#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1390;
float _3794;
float _3795;
float _3796;
float _3797;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3806 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _437 = (_430 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _438 = (_430 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _439 = (_430 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3817 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _430) + _559;
    float _569 = ((_540.y - _560) * _430) + _560;
    float _570 = ((_540.z - _561) * _430) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _503) + _570;
    float _598 = ((((_582.x - _568) * _503) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _503) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3828 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _664 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_647 - _648) * cbMtdParam._m0[24u].z) + _648) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3839 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _672 = (_665 * (cbMtdParam._m0[17u].x - _516)) + _516;
    float _673 = (_665 * (cbMtdParam._m0[17u].y - _519)) + _519;
    float _674 = (_665 * (cbMtdParam._m0[17u].z - _522)) + _522;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _702 = _700.x;
    float _719 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _702) * _430) + _702;
    float _736 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _719) * _503) + _719;
    float _740 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _736) * cbMtdParam._m0[19u].z) + _736;
    float _742 = _740 - (_740 * _665);
    float _746 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3850 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = (_665 * (_759.z - _746)) + _746;
    float _779 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _780 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _792 = (((_766 - _779) + (cbMtdParam._m0[21u].x * _779)) * _665) + _779;
    float _793 = (((_767 - _780) + (cbMtdParam._m0[21u].x * _780)) * _665) + _780;
    float _794 = (_665 * (sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _606)) + _606;
    float _796 = cbMtdParam._m0[22u].x + _620.w;
    float _799 = fma(_794, _239 * NORMAL.x, fma(_793, _246 * TANGENT.x, (_232 * _224) * _792));
    float _802 = fma(_794, _239 * NORMAL.y, fma(_793, _246 * TANGENT.y, (_232 * _225) * _792));
    float _805 = fma(_794, _239 * NORMAL.z, fma(_793, _246 * TANGENT.z, (_232 * _226) * _792));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    float _810 = _809 * _799;
    float _811 = _809 * _802;
    float _812 = _809 * _805;
    float _3861 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _813 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3883 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3894 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3905 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3916 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _818 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    vec4 _897 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _899 = _897.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1071 = sqrt(((_883 * _883) + (_884 * _884)) + (_885 * _885));
        float _1077 = (cbMatDynParam._m0[5u].x * _1071) + cbMatDynParam._m0[5u].y;
        float _3927 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1082 = (cbMatDynParam._m0[5u].z * _1071) + cbMatDynParam._m0[5u].w;
        float _3938 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) - _1078)) + _1078) < ((_899 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _929 = fma(_812, cbSceneParam._m0[5u].z, fma(_811, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _810));
    float _932 = fma(_812, cbSceneParam._m0[6u].z, fma(_811, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _810));
    float _935 = fma(_812, cbSceneParam._m0[7u].z, fma(_811, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _810));
    uint _948 = _252 + 9u;
    uint _949 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_949].z;
    float _3949 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _961 = 1.0 - _818;
    float _962 = _958 * _961;
    float _963 = _959 * _961;
    float _964 = _960 * _961;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _818;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _818;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _818;
    float _972 = _969 + 0.039999999105930328369140625;
    float _974 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    vec4 _984 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _988 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _984.x;
    float _989 = dot(vec3(_810, _811, _812), vec3(_890, _891, _892));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _810) - _890;
    float _997 = (_992 * _811) - _891;
    float _998 = (_992 * _812) - _892;
    float _1002 = abs(dot(vec3(_890, _891, _892), vec3(_810, _811, _812)));
    float _3982 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_813);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1023 = (1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1024 = _1017 * _1004;
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1389;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1114 = fma(_1060, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052));
        float _1118 = fma(_1060, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052));
        float _1122 = fma(_1060, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052));
        float _1147 = _1052 + _810;
        float _1148 = _1056 + _811;
        float _1149 = _1060 + _812;
        float _1159 = fma(_1149, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147)) - _1114;
        float _1160 = fma(_1149, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147)) - _1118;
        float _1161 = fma(_1149, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147)) - _1122;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1114 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1118 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[34u].z) + ((((((_1122 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1217 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1183.x + (-0.5));
        float _1219 = _1217 * (_1183.y + (-0.5));
        float _1220 = _1217 * (_1183.z + (-0.5));
        float _1227 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1190.x + (-0.5));
        float _1229 = _1227 * (_1190.y + (-0.5));
        float _1230 = _1227 * (_1190.z + (-0.5));
        float _1237 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1197.x + (-0.5));
        float _1239 = _1237 * (_1197.y + (-0.5));
        float _1240 = _1237 * (_1197.z + (-0.5));
        float _1247 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1204.x + (-0.5));
        float _1249 = _1247 * (_1204.y + (-0.5));
        float _1250 = _1247 * (_1204.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1271 = (dot(vec3(_810, _811, _812), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1281 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4030 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1283 + 1.0))) + _1288) * _1251;
        float _1298 = _1219 * 0.5;
        float _1299 = _1229 * 0.5;
        float _1300 = _1239 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_810, _811, _812), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4063 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1325 + 1.0))) + _1330) * _1252;
        float _1340 = _1220 * 0.5;
        float _1341 = _1230 * 0.5;
        float _1342 = _1240 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_810, _811, _812), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4096 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1367 + 1.0))) + _1372) * _1253;
        _1389 = _1220;
        _1391 = _1219;
        _1392 = _1218;
        _1393 = _1230;
        _1394 = _1229;
        _1395 = _1228;
        _1396 = _1240;
        _1397 = _1239;
        _1398 = _1238;
        _1399 = _1253;
        _1400 = _1252;
        _1401 = _1251;
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1390;
        _1391 = _1390;
        _1392 = _1390;
        _1393 = _1390;
        _1394 = _1390;
        _1395 = _1390;
        _1396 = _1390;
        _1397 = _1390;
        _1398 = _1390;
        _1399 = _1390;
        _1400 = _1390;
        _1401 = _1390;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1060, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052));
        float _1435 = fma(_1060, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052));
        float _1439 = fma(_1060, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052));
        float _1462 = _1052 + _810;
        float _1463 = _1056 + _811;
        float _1464 = _1060 + _812;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_810, _811, _812), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4159 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_810, _811, _812), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4192 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_810, _811, _812), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4225 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1390;
        _1701 = _1390;
        _1702 = _1390;
        _1703 = _1390;
        _1704 = _1390;
        _1705 = _1390;
        _1706 = _1390;
        _1707 = _1390;
        _1708 = _1390;
        _1709 = _1390;
        _1710 = _1390;
        _1711 = _1390;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1402)) + _1402;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1403)) + _1403;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1404)) + _1404;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _996 * 0.5;
    float _1769 = _997 * 0.5;
    float _1770 = _998 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1389, _1393, _1396, _1399));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1885 = fma(_1060, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052)) + cbModelParam._m0[13u].w;
        float _1889 = fma(_1060, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052)) + cbModelParam._m0[14u].w;
        float _1893 = fma(_1060, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052)) + cbModelParam._m0[15u].w;
        float _1896 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1899 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1902 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1930;
        if (_1896 > 0.0)
        {
            _1930 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1930 = frontier_phi_17_15_ladder;
        }
        float _2154;
        if (_1899 > 0.0)
        {
            _2154 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2154 = frontier_phi_26_22_ladder;
        }
        float _2411;
        if (_1902 > 0.0)
        {
            _2411 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2411 = frontier_phi_38_33_ladder;
        }
        float _2413 = isnan(_2154) ? _1930 : (isnan(_1930) ? _2154 : min(_1930, _2154));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1896) + _1885;
        float _2419 = (_2414 * _1899) + _1889;
        float _2420 = (_2414 * _1902) + _1893;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_16_38_ladder = _2548.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2548.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2548.x * cbModelParam._m0[1u].y;
        }
        _1918 = frontier_phi_16_38_ladder_2;
        _1920 = frontier_phi_16_38_ladder_1;
        _1922 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1837);
        _1918 = _1906.x * cbModelParam._m0[1u].y;
        _1920 = _1906.y * cbModelParam._m0[1u].y;
        _1922 = _1906.z * cbModelParam._m0[1u].y;
    }
    float _1926 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1926 : min(cbModelParam._m0[25u].w, _1926));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1060, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1060, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1060, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1995 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1998 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2159;
        if (_1992 > 0.0)
        {
            _2159 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2159 = frontier_phi_28_24_ladder;
        }
        float _2438;
        if (_1995 > 0.0)
        {
            _2438 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2438 = frontier_phi_40_35_ladder;
        }
        float _2651;
        if (_1998 > 0.0)
        {
            _2651 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2651 = frontier_phi_49_46_ladder;
        }
        float _2653 = isnan(_2438) ? _2159 : (isnan(_2159) ? _2438 : min(_2159, _2438));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _1992) + _1981;
        float _2659 = (_2654 * _1995) + _1985;
        float _2660 = (_2654 * _1998) + _1989;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1927);
            frontier_phi_25_49_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_25_49_ladder_2;
        _2019 = frontier_phi_25_49_ladder_1;
        _2021 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1927);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1023 * _972) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1023 * _974) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2038 = (((_1023 * _975) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    vec4 _2055 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_910, _911));
    float _2057 = _2055.w;
    float _2069 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2057);
    float _2070 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2057);
    float _2071 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2057);
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _988 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2113 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2117 = _2077 | 1u;
    float _2128 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_810, _811, _812));
    float _2131 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_810, _811, _812));
    float _4361 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _4372 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2136 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2138 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2145 = ((cbLight._m0[_2094].x * _2100) * _2138) + (((cbLight._m0[_2104].x * _2069) * _2113) * _2136);
    float _2146 = ((_2100 * cbLight._m0[_2094].y) * _2138) + (((cbLight._m0[_2104].y * _2070) * _2113) * _2136);
    float _2147 = ((_2100 * cbLight._m0[_2094].z) * _2138) + (((cbLight._m0[_2104].z * _2071) * _2113) * _2136);
    uvec4 _2151 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2153 = _2151.x == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2153)
    {
        _2164 = _2145;
        _2166 = _2146;
        _2168 = _2147;
    }
    else
    {
        uint _2172 = _2077 + 6u;
        float _2188 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4383 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2191 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2164 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _2145;
        _2166 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _2146;
        _2168 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _2147;
    }
    bool _2171 = _2151.y == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2171)
    {
        _2209 = _2164;
        _2211 = _2166;
        _2213 = _2168;
    }
    else
    {
        uint _2382 = _2077 + 7u;
        float _2398 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2399 = _2398 * _2398;
        float _4399 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2400 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2401 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2209 = (((cbLight._m0[_2382].x * 0.3183098733425140380859375) * _2400) * _2401) + _2164;
        _2211 = (((cbLight._m0[_2382].y * 0.3183098733425140380859375) * _2400) * _2401) + _2166;
        _2213 = (((cbLight._m0[_2382].z * 0.3183098733425140380859375) * _2400) * _2401) + _2168;
    }
    uint _2216 = _2077 + 8u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _813) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2077].x + _890;
    float _2232 = cbLight._m0[_2077].y + _891;
    float _2233 = cbLight._m0[_2077].z + _892;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2077].xyz));
    float _4415 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2245 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2246 = dot(vec3(_810, _811, _812), vec3(_2238, _2239, _2240));
    float _4437 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2238, _2239, _2240));
    float _4448 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2230 * _2230;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2267 = 0.959999978542327880859375 - _969;
    float _2269 = 0.959999978542327880859375 - _970;
    float _2270 = 0.959999978542327880859375 - _971;
    float _2277 = 1.0 - _2230;
    float _2288 = (0.5 / (((_2245 * ((_2244 * _2277) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2277) + _2230) * _2244))) * _2244;
    float _4459 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    uint _2304 = _2077 + 9u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _813) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2117].x + _890;
    float _2318 = cbLight._m0[_2117].y + _891;
    float _2319 = cbLight._m0[_2117].z + _892;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2117].xyz));
    float _4470 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2331 = dot(vec3(_810, _811, _812), vec3(_2324, _2325, _2326));
    float _4481 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2335 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2324, _2325, _2326));
    float _4492 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = _2316 * _2316;
    float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
    float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2357 = 1.0 - _2316;
    float _2367 = (0.5 / (((_2245 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2357) + _2316) * _2330))) * _2330;
    float _4503 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
    float _2379 = (((((_2350 * _2267) + _972) * cbLight._m0[_2304].x) * _2369) * _2100) + ((((cbLight._m0[_2216].x * _2069) * ((_2266 * _2267) + _972)) * _2290) * _2113);
    float _2380 = (((((_2350 * _2269) + _974) * cbLight._m0[_2304].y) * _2369) * _2100) + ((((cbLight._m0[_2216].y * _2070) * ((_2266 * _2269) + _974)) * _2290) * _2113);
    float _2381 = (((((_2350 * _2270) + _975) * cbLight._m0[_2304].z) * _2369) * _2100) + ((((cbLight._m0[_2216].z * _2071) * ((_2266 * _2270) + _975)) * _2290) * _2113);
    float _2443;
    float _2445;
    float _2447;
    if (_2153)
    {
        _2443 = _2379;
        _2445 = _2380;
        _2447 = _2381;
    }
    else
    {
        uint _2449 = _2077 + 2u;
        uint _2453 = _2077 + 10u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _813) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _890;
        float _2470 = cbLight._m0[_2449].y + _891;
        float _2471 = cbLight._m0[_2449].z + _892;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2449].xyz));
        float _4514 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2483 = dot(vec3(_810, _811, _812), vec3(_2476, _2477, _2478));
        float _4525 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4536 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
        float _2509 = 1.0 - _2468;
        float _2519 = (0.5 / (((_2245 * ((_2482 * _2509) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2509) + _2468) * _2482))) * _2482;
        float _4547 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2443 = (((((_2502 * _2267) + _972) * cbLight._m0[_2453].x) * _2521) * _2522) + _2379;
        _2445 = (((((_2502 * _2269) + _974) * cbLight._m0[_2453].y) * _2521) * _2522) + _2380;
        _2447 = (((((_2502 * _2270) + _975) * cbLight._m0[_2453].z) * _2521) * _2522) + _2381;
    }
    float _2557;
    float _2559;
    float _2561;
    if (_2171)
    {
        _2557 = _2443;
        _2559 = _2445;
        _2561 = _2447;
    }
    else
    {
        uint _2568 = _2077 + 3u;
        uint _2572 = _2077 + 11u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _813) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _890;
        float _2589 = cbLight._m0[_2568].y + _891;
        float _2590 = cbLight._m0[_2568].z + _892;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2568].xyz));
        float _4563 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2602 = dot(vec3(_810, _811, _812), vec3(_2595, _2596, _2597));
        float _4574 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4585 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2621 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2628 = 1.0 - _2587;
        float _2638 = (0.5 / (((_2245 * ((_2601 * _2628) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2628) + _2587) * _2601))) * _2601;
        float _4596 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2557 = (((((_2621 * _2267) + _972) * cbLight._m0[_2572].x) * _2640) * _2641) + _2443;
        _2559 = (((((_2621 * _2269) + _974) * cbLight._m0[_2572].y) * _2640) * _2641) + _2445;
        _2561 = (((((_2621 * _2270) + _975) * cbLight._m0[_2572].z) * _2640) * _2641) + _2447;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2075.y == 0u)
    {
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2716;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2716;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2716;
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2732)));
        float _2753 = (log2(_2719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            uint _3023 = 0u;
            uint _3032;
            bool _3033;
            for (;;)
            {
                _3032 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                _3033 = _3032 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3033)
                {
                    frontier_phi_66_pred = _3017;
                    frontier_phi_66_pred_1 = _3022;
                    frontier_phi_66_pred_2 = _3021;
                    frontier_phi_66_pred_3 = _3020;
                    frontier_phi_66_pred_4 = _3019;
                    frontier_phi_66_pred_5 = _3018;
                }
                else
                {
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    uint _3168;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3032;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3172 = uint(findLSB(_3168)) + (_3023 << 5u);
                        uint _3169 = (_3168 + 4294967295u) & _3168;
                        uint _3174 = _3172 * 48u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3194 = (_3172 * 48u) + 4u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3213 = (_3172 * 48u) + 8u;
                        vec3 _3224 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x));
                        float _3228 = _3188.x - _2717;
                        float _3229 = _3188.y - _2718;
                        float _3230 = _3188.z - _2719;
                        float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                        float _3234 = inversesqrt(_3231);
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3238 = dot(vec3(_929, _932, _935), vec3(_3235, _3236, _3237));
                        float _3243 = 1.0 - (_3231 * _3188.w);
                        float _4622 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3245 = sqrt(_3231) * _3207.w;
                        float _3248 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3238) + _3249;
                        float _3255 = _3245 * _3245;
                        float _3259 = ((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3244) / ((_3255 * 0.699999988079071044921875) + 1.0);
                        float _3263 = (-0.0) - _2717;
                        float _3264 = (-0.0) - _2718;
                        float _3265 = (-0.0) - _2719;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3280 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _1004;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_929, _932, _935), vec3(_3270, _3271, _3272));
                        float _4638 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3305 = dot(vec3(_929, _932, _935), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4649 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3248 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3238) + _3314;
                        float _4660 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4671 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3340 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3312 * _3312) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125))) * _3244;
                        _3092 = (_3259 * _3207.x) + _3165;
                        _3093 = (_3259 * _3207.y) + _3166;
                        _3094 = (_3259 * _3207.z) + _3167;
                        _3089 = (_3340 * _3224.x) + _3162;
                        _3090 = (_3340 * _3224.y) + _3163;
                        _3091 = (_3340 * _3224.z) + _3164;
                        if (_3169 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3169;
                        }
                    }
                    frontier_phi_66_pred = _3089;
                    frontier_phi_66_pred_1 = _3094;
                    frontier_phi_66_pred_2 = _3093;
                    frontier_phi_66_pred_3 = _3092;
                    frontier_phi_66_pred_4 = _3091;
                    frontier_phi_66_pred_5 = _3090;
                }
                _2865 = frontier_phi_66_pred;
                _2875 = frontier_phi_66_pred_1;
                _2873 = frontier_phi_66_pred_2;
                _2871 = frontier_phi_66_pred_3;
                _2869 = frontier_phi_66_pred_4;
                _2867 = frontier_phi_66_pred_5;
                uint _3024 = _3023 + 1u;
                if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3017 = _2865;
                    _3018 = _2867;
                    _3019 = _2869;
                    _3020 = _2871;
                    _3021 = _2873;
                    _3022 = _2875;
                    _3023 = _3024;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((4294967295u << _2881) & _2763) == 0u)
        {
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
        }
        else
        {
            float _3010 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
            float _3011 = _3010 * _2717;
            float _3012 = _3010 * _2718;
            float _3013 = _3010 * _2719;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _3145 = _2864;
                float _3146 = _2866;
                float _3147 = _2868;
                float _3148 = _2870;
                float _3149 = _2872;
                float _3150 = _2874;
                uint _3151 = _2881;
                uint _3160;
                bool _3161;
                for (;;)
                {
                    _3160 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                    _3161 = _3160 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3161)
                    {
                        frontier_phi_77_pred = _3150;
                        frontier_phi_77_pred_1 = _3149;
                        frontier_phi_77_pred_2 = _3148;
                        frontier_phi_77_pred_3 = _3147;
                        frontier_phi_77_pred_4 = _3146;
                        frontier_phi_77_pred_5 = _3145;
                    }
                    else
                    {
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        uint _3373 = _3160;
                        uint _3374;
                        vec4 _3399;
                        float _3400;
                        vec4 _3415;
                        vec3 _3427;
                        vec4 _3442;
                        vec4 _3457;
                        float _3503;
                        bool _3504;
                        for (;;)
                        {
                            uint _3384 = ((_3151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3373));
                            _3374 = (_3373 + 4294967295u) & _3373;
                            uint _3386 = _3384 * 40u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3400 = _3399.w;
                            uint _3402 = (_3384 * 40u) + 4u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3384 * 40u) + 8u;
                            _3427 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x));
                            uint _3429 = (_3384 * 40u) + 16u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3384 * 40u) + 20u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3384 * 40u) + 24u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3478 = (_3384 * 40u) + 28u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3503 = fma(_2719, _3491.z, fma(_2718, _3491.y, _3491.x * _2717)) + _3491.w;
                            _3504 = !((fma(_2719, _3472.z, fma(_2718, _3472.y, _3472.x * _2717)) + _3472.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3504)
                            {
                                float _3531 = _3399.x - _2717;
                                float _3532 = _3399.y - _2718;
                                float _3533 = _3399.z - _2719;
                                float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                                float _3537 = inversesqrt(_3534);
                                float _3538 = _3537 * _3531;
                                float _3539 = _3537 * _3532;
                                float _3540 = _3537 * _3533;
                                float _3544 = 1.0 - (_3534 / (_3400 * _3400));
                                float _4682 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3549 = sqrt(_3534) * _3415.w;
                                float _3551 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                                float _3552 = _3551 * _3551;
                                float _3555 = ((1.0 - _3552) * dot(vec3(_3538, _3539, _3540), vec3(_929, _932, _935))) + _3552;
                                float _3558 = _3549 * _3549;
                                float _3562 = (fma(_2719, _3442.z, fma(_2718, _3442.y, _3442.x * _2717)) + _3442.w) / _3503;
                                float _3563 = (fma(_2719, _3457.z, fma(_2718, _3457.y, _3457.x * _2717)) + _3457.w) / _3503;
                                float _3567 = 1.0 - dot(vec2(_3562, _3563), vec2(_3562, _3563));
                                float _4698 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3569 = _3568 * (((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3545) / ((_3558 * 0.699999988079071044921875) + 1.0));
                                float _3581 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                                float _3582 = 1.0 - _1004;
                                float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                                float _3590 = _3589 * _3589;
                                float _3591 = _3590 * _3590;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3594 = _3540 - _3013;
                                float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                                float _3602 = dot(vec3(_929, _932, _935), vec3((-0.0) - _3011, (-0.0) - _3012, (-0.0) - _3013));
                                float _4709 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3606 = dot(vec3(_929, _932, _935), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                                float _4720 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                                float _3614 = _3551 * _3590;
                                float _3615 = _3614 * _3614;
                                float _3621 = ((1.0 - _3615) * dot(vec3(_929, _932, _935), vec3(_3538, _3539, _3540))) + _3615;
                                float _4731 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3623 = 1.0 - _3590;
                                float _3633 = (0.5 / (((_3622 * ((_3605 * _3623) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3590) * _3605))) * _3622;
                                float _4742 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3643 = (_3568 * _3545) * (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3613 * _3613) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3569 * _3415.y;
                                frontier_phi_83_pred_1 = _3569 * _3415.x;
                                frontier_phi_83_pred_2 = _3643 * _3427.z;
                                frontier_phi_83_pred_3 = _3643 * _3427.y;
                                frontier_phi_83_pred_4 = _3643 * _3427.x;
                                frontier_phi_83_pred_5 = _3569 * _3415.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_83_pred;
                            _3650 = frontier_phi_83_pred_1;
                            _3649 = frontier_phi_83_pred_2;
                            _3648 = frontier_phi_83_pred_3;
                            _3647 = frontier_phi_83_pred_4;
                            _3652 = frontier_phi_83_pred_5;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            if (_3374 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3374;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3359;
                        frontier_phi_77_pred_1 = _3358;
                        frontier_phi_77_pred_2 = _3357;
                        frontier_phi_77_pred_3 = _3356;
                        frontier_phi_77_pred_4 = _3355;
                        frontier_phi_77_pred_5 = _3354;
                    }
                    _2996 = frontier_phi_77_pred;
                    _2994 = frontier_phi_77_pred_1;
                    _2992 = frontier_phi_77_pred_2;
                    _2990 = frontier_phi_77_pred_3;
                    _2988 = frontier_phi_77_pred_4;
                    _2986 = frontier_phi_77_pred_5;
                    uint _3152 = _3151 + 1u;
                    if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3145 = _2986;
                        _3146 = _2988;
                        _3147 = _2990;
                        _3148 = _2992;
                        _3149 = _2994;
                        _3150 = _2996;
                        _3151 = _3152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2990;
                frontier_phi_58_59_ladder_1 = _2996;
                frontier_phi_58_59_ladder_2 = _2994;
                frontier_phi_58_59_ladder_3 = _2992;
                frontier_phi_58_59_ladder_4 = _2988;
                frontier_phi_58_59_ladder_5 = _2986;
            }
            else
            {
                frontier_phi_58_59_ladder = _2868;
                frontier_phi_58_59_ladder_1 = _2874;
                frontier_phi_58_59_ladder_2 = _2872;
                frontier_phi_58_59_ladder_3 = _2870;
                frontier_phi_58_59_ladder_4 = _2866;
                frontier_phi_58_59_ladder_5 = _2864;
            }
            _2985 = frontier_phi_58_59_ladder_5;
            _2987 = frontier_phi_58_59_ladder_4;
            _2989 = frontier_phi_58_59_ladder;
            _2991 = frontier_phi_58_59_ladder_3;
            _2993 = frontier_phi_58_59_ladder_2;
            _2995 = frontier_phi_58_59_ladder_1;
        }
        float _3000 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _2776 = (_3000 * _2991) + _2209;
        _2778 = (_3000 * _2993) + _2211;
        _2780 = (_3000 * _2995) + _2213;
        _2782 = ((_2985 * _972) * _3000) + _2557;
        _2784 = ((_2987 * _974) * _3000) + _2559;
        _2786 = ((_2989 * _975) * _3000) + _2561;
    }
    else
    {
        _2776 = _2209;
        _2778 = _2211;
        _2780 = _2213;
        _2782 = _2557;
        _2784 = _2559;
        _2786 = _2561;
    }
    float _4758 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4769 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4780 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2803 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2776 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _988))) + ((_2782 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    float _2804 = ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2778 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _988))) + ((_2784 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    float _2805 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2780 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _988))) + ((_2786 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    uint _2806 = _252 + 6u;
    float _2814 = _910 / cbSceneParam._m0[86u].x;
    float _2815 = _911 / cbSceneParam._m0[86u].y;
    vec4 _2829 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2831 = _2829.x;
    float _2832 = _2829.y;
    float _2833 = _2829.z;
    float _2834 = _2829.w;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2890 = _2889 / _832;
        float _2901 = _2890 * _883;
        float _2902 = _884 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2905 = _2890 * _885;
        float _2907 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2908 = _2907 + cbSceneParam._m0[79u].w;
        float _2909 = cbSceneParam._m0[79u].w - _2902;
        float _2915 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2905 * _2905));
        float _2918 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2915;
        float _2923 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2925 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2903 - _2907) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2908 > 0.0) ? exp2(_2923 * _2908) : (2.0 - exp2(_2925 * _2908))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2918;
        }
        else
        {
            float _3046 = 1.0 / cbSceneParam._m0[80u].x;
            float _3047 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : max(_2908, _2909));
            float _3048 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : min(_2908, _2909));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            _3102 = ((abs(_2915 / _2903) * cbSceneParam._m0[80u].y) * ((((_3057 - _3058) * 2.0) - ((exp2(_2923 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0)))) - exp2(_2923 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))))) * _3046)) - ((exp2(_2925 * _3057) - exp2(_2925 * _3058)) * _3046))) + (_2918 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2834);
        _2927 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2831;
        _2929 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2832;
        _2931 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2833;
        _2933 = _3113 * _2834;
    }
    else
    {
        _2927 = _2831;
        _2929 = _2832;
        _2931 = _2833;
        _2933 = _2834;
    }
    bool _3140;
    vec4 _2943;
    vec4 _2965;
    float _2967;
    float _2971;
    float _2972;
    float _2973;
    float _2974;
    bool _2984;
    for (;;)
    {
        _2943 = cbMatDynParam._m0[0u];
        float _2945 = roundEven(_2943.y);
        bool _2946 = _2945 == 3.0;
        float _2947 = log2(_2933);
        float _2954 = exp2(_2947 * cbSceneParam._m0[78u].x) * _2803;
        float _2955 = exp2(_2947 * cbSceneParam._m0[78u].y) * _2804;
        float _2956 = exp2(_2947 * cbSceneParam._m0[78u].z) * _2805;
        float _2963 = _899 + (-0.5);
        _2965 = cbMtdParam._m0[1u];
        _2967 = _2965.y * _2963;
        float _2970 = (_2945 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2971 = _2970 * (_2946 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2927)));
        _2972 = _2970 * (_2946 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2929)));
        _2973 = _2970 * (_2946 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2931)));
        _2974 = _2963 * 0.999000012874603271484375;
        _2984 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2984)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2974) < 0.5)
            {
                _3140 = true;
                break;
            }
        }
        uint _3081 = _948 + uint(_2943.w);
        if ((cbInstanceData._m0[_3081].w < 1.0) && ((cbInstanceData._m0[_3081].w + _2974) < 0.5))
        {
            _3140 = true;
            break;
        }
        if ((_2967 + 1.0) < _2965.x)
        {
            _3140 = true;
            break;
        }
        _3140 = false;
        break;
    }
    float _3345;
    if (_3140)
    {
        discard_state = true;
        _3345 = 0.0;
    }
    else
    {
        _3345 = cbInstanceData._m0[_2806].w;
    }
    SV_Target.x = _2971;
    SV_Target.y = _2972;
    SV_Target.z = _2973;
    SV_Target.w = _3345;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2806].w;
    discard_exit();
}


