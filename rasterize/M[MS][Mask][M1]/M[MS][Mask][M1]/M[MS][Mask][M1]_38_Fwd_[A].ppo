#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1471;
float _3850;
float _3851;
float _3852;
float _3853;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3862 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3873 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3884 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3895 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _457 = (_450 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _458 = (_450 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _459 = (_450 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _463 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _457;
    float _466 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _458;
    float _469 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _459;
    float _476 = ((_457 - _463) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) + _463;
    float _477 = ((_458 - _466) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) + _466;
    float _478 = ((_459 - _469) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) + _469;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _572 = ((_542.z - _563) * _450) + _563;
    float _575 = ((((_542.x - _561) * _450) + _561) * 2.0) + (-1.0);
    float _576 = ((((_542.y - _562) * _450) + _562) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3906 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _635 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _638 = ((isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : min(_635, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _647 = (_638 - ((((((_625 - _626) * cbMtdParam._m0[24u].z) + _626) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _638))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3927 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _655 = (_648 * ((_497.x * cbMtdParam._m0[18u].x) - _476)) + _476;
    float _656 = (_648 * ((_497.y * cbMtdParam._m0[18u].y) - _477)) + _477;
    float _657 = (_648 * ((_497.z * cbMtdParam._m0[18u].z) - _478)) + _478;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _697 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_671 - _672) * cbMtdParam._m0[24u].w) + _672) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3938 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _706 = ((((cbMtdParam._m0[10u].x - _655) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _698) + _655;
    float _707 = ((((cbMtdParam._m0[10u].y - _656) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _698) + _656;
    float _708 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _657)) * _698) + _657;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _736 = _734.x;
    float _754 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _736) * _450) + _736;
    float _758 = ((_720.x - _754) * cbMtdParam._m0[19u].z) + _754;
    float _760 = _758 - (_758 * _648);
    float _762 = _760 - (_760 * _698);
    float _767 = (((_517.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _771 = ((_598.z - _767) * cbMtdParam._m0[19u].w) + _767;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _792 = (_785.x * 2.0) + (-1.0);
    float _793 = (_785.y * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _3949 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _802 = (_648 * (_785.z - _771)) + _771;
    float _805 = ((cbMtdParam._m0[23u].x - _802) * _698) + _802;
    vec4 _824 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _830 = (_824.x * 2.0) + (-1.0);
    float _831 = (_824.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _3960 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _846 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_517.x * 2.0) + (-1.0)))) + (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _847 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_517.y * 2.0) + (-1.0)))) + (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _859 = (((_792 - _846) + (cbMtdParam._m0[21u].x * _846)) * _648) + _846;
    float _860 = (((_793 - _847) + (cbMtdParam._m0[21u].x * _847)) * _648) + _847;
    float _861 = (_648 * (sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _582)) + _582;
    float _872 = (((_830 - _859) + (_859 * cbMtdParam._m0[22u].z)) * _698) + _859;
    float _873 = (((_831 - _860) + (_860 * cbMtdParam._m0[22u].z)) * _698) + _860;
    float _874 = ((sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) - _861) * _698) + _861;
    float _878 = cbMtdParam._m0[22u].x + _598.w;
    float _881 = fma(_874, _255 * NORMAL.x, fma(_873, _262 * TANGENT.x, (_248 * _240) * _872));
    float _884 = fma(_874, _255 * NORMAL.y, fma(_873, _262 * TANGENT.y, (_248 * _241) * _872));
    float _887 = fma(_874, _255 * NORMAL.z, fma(_873, _262 * TANGENT.z, (_248 * _242) * _872));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _3971 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _895 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _3993 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4004 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4015 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4026 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _900 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    vec4 _978 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _980 = _978.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1152 = sqrt(((_964 * _964) + (_965 * _965)) + (_966 * _966));
        float _1158 = (cbMatDynParam._m0[5u].x * _1152) + cbMatDynParam._m0[5u].y;
        float _4037 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1163 = (cbMatDynParam._m0[5u].z * _1152) + cbMatDynParam._m0[5u].w;
        float _4048 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) - _1159)) + _1159) < ((_980 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _991 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _992 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1010 = fma(_894, cbSceneParam._m0[5u].z, fma(_893, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _892));
    float _1013 = fma(_894, cbSceneParam._m0[6u].z, fma(_893, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _892));
    float _1016 = fma(_894, cbSceneParam._m0[7u].z, fma(_893, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _892));
    uint _1029 = _287 + 9u;
    uint _1030 = _1029 + uint(cbMatDynParam._m0[0u].w);
    float _1036 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1030].x;
    float _1037 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1030].y;
    float _1038 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1030].z;
    float _4059 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1042 = 1.0 - _900;
    float _1043 = _1039 * _1042;
    float _1044 = _1040 * _1042;
    float _1045 = _1041 * _1042;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _900;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _900;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _900;
    float _1053 = _1050 + 0.039999999105930328369140625;
    float _1055 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    vec4 _1065 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _991, cbSceneParam._m0[86u].y * _992));
    float _1069 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * TEXCOORD_5.w) * _1065.x;
    float _1070 = dot(vec3(_892, _893, _894), vec3(_971, _972, _973));
    float _1073 = _1070 * 2.0;
    float _1077 = (_1073 * _892) - _971;
    float _1078 = (_1073 * _893) - _972;
    float _1079 = (_1073 * _894) - _973;
    float _1083 = abs(dot(vec3(_971, _972, _973), vec3(_892, _893, _894)));
    float _4092 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1085 = sqrt(_895);
    float _1098 = exp2((_1085 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1085 * 3.0));
    float _1104 = (1.0 - _1098) * ((_1085 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1105 = _1098 * _1085;
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1141, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133));
        float _1199 = fma(_1141, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133));
        float _1203 = fma(_1141, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133));
        float _1228 = _1133 + _892;
        float _1229 = _1137 + _893;
        float _1230 = _1141 + _894;
        float _1240 = fma(_1230, cbModelParam._m0[26u].z, fma(_1229, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1228)) - _1195;
        float _1241 = fma(_1230, cbModelParam._m0[27u].z, fma(_1229, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1228)) - _1199;
        float _1242 = fma(_1230, cbModelParam._m0[28u].z, fma(_1229, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1228)) - _1203;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_892, _893, _894), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4140 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_892, _893, _894), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4173 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_892, _893, _894), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4206 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1141, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133));
        float _1517 = fma(_1141, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133));
        float _1521 = fma(_1141, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133));
        float _1544 = _1133 + _892;
        float _1545 = _1137 + _893;
        float _1546 = _1141 + _894;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_892, _893, _894), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4269 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_892, _893, _894), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4302 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_892, _893, _894), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4335 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = _1471;
        _1790 = _1471;
        _1791 = _1471;
        _1792 = _1471;
        _1793 = _1471;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1483)) + _1483;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1484)) + _1484;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1485)) + _1485;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1077 * 0.5;
    float _1851 = _1078 * 0.5;
    float _1852 = _1079 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _895);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1966 = fma(_1141, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133)) + cbModelParam._m0[13u].w;
        float _1970 = fma(_1141, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133)) + cbModelParam._m0[14u].w;
        float _1974 = fma(_1141, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133)) + cbModelParam._m0[15u].w;
        float _1977 = fma(_1079, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077));
        float _1980 = fma(_1079, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077));
        float _1983 = fma(_1079, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077));
        float _2011;
        if (_1977 > 0.0)
        {
            _2011 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2011 = frontier_phi_17_15_ladder;
        }
        float _2213;
        if (_1980 > 0.0)
        {
            _2213 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2213 = frontier_phi_26_22_ladder;
        }
        float _2467;
        if (_1983 > 0.0)
        {
            _2467 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2467 = frontier_phi_38_33_ladder;
        }
        float _2469 = isnan(_2213) ? _2011 : (isnan(_2011) ? _2213 : min(_2011, _2213));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1977) + _1966;
        float _2475 = (_2470 * _1980) + _1970;
        float _2476 = (_2470 * _1983) + _1974;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2477;
        float _2481 = _2477 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 > _2481) || ((_2475 < _2479) || ((_2474 < _2479) || (_2474 > _2481))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2476, cbModelParam._m0[9u].z, fma(_2475, cbModelParam._m0[9u].y, _2474 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2476, cbModelParam._m0[10u].z, fma(_2475, cbModelParam._m0[10u].y, _2474 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2476, cbModelParam._m0[11u].z, fma(_2475, cbModelParam._m0[11u].y, _2474 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_16_38_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1999 = frontier_phi_16_38_ladder_2;
        _2001 = frontier_phi_16_38_ladder_1;
        _2003 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1077, _1078, _1079), _1919);
        _1999 = _1987.x * cbModelParam._m0[1u].y;
        _2001 = _1987.y * cbModelParam._m0[1u].y;
        _2003 = _1987.z * cbModelParam._m0[1u].y;
    }
    float _2007 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _895);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2007 : min(cbModelParam._m0[25u].w, _2007));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1141, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1141, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1141, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1079, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077));
        float _2075 = fma(_1079, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077));
        float _2078 = fma(_1079, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077));
        float _2218;
        if (_2072 > 0.0)
        {
            _2218 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2218 = frontier_phi_28_24_ladder;
        }
        float _2494;
        if (_2075 > 0.0)
        {
            _2494 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2494 = frontier_phi_40_35_ladder;
        }
        float _2707;
        if (_2078 > 0.0)
        {
            _2707 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2707 = frontier_phi_49_46_ladder;
        }
        float _2709 = isnan(_2494) ? _2218 : (isnan(_2218) ? _2494 : min(_2218, _2494));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _2072) + _2061;
        float _2715 = (_2710 * _2075) + _2065;
        float _2716 = (_2710 * _2078) + _2069;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _2008);
            frontier_phi_25_49_ladder = _2915.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2915.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2915.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_25_49_ladder_2;
        _2099 = frontier_phi_25_49_ladder_1;
        _2101 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1077, _1078, _1079), _2008);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1104 * _1053) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1104 * _1055) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1104 * _1056) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _1069 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2172 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2176 = _2139 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_892, _893, _894));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_892, _893, _894));
    float _4471 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4482 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2156].x * _2162) * _2197) + ((cbLight._m0[_2166].x * _2172) * _2195);
    float _2205 = ((_2162 * cbLight._m0[_2156].y) * _2197) + ((_2172 * cbLight._m0[_2166].y) * _2195);
    float _2206 = ((_2162 * cbLight._m0[_2156].z) * _2197) + ((_2172 * cbLight._m0[_2166].z) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2212)
    {
        _2223 = _2204;
        _2225 = _2205;
        _2227 = _2206;
    }
    else
    {
        uint _2231 = _2139 + 6u;
        float _2247 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4493 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2250 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2223 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2204;
        _2225 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2205;
        _2227 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2206;
    }
    bool _2230 = _2210.y == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2230)
    {
        _2268 = _2223;
        _2270 = _2225;
        _2272 = _2227;
    }
    else
    {
        uint _2438 = _2139 + 7u;
        float _2454 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2455 = _2454 * _2454;
        float _4509 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2456 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2457 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2268 = (((cbLight._m0[_2438].x * 0.3183098733425140380859375) * _2456) * _2457) + _2223;
        _2270 = (((cbLight._m0[_2438].y * 0.3183098733425140380859375) * _2456) * _2457) + _2225;
        _2272 = (((cbLight._m0[_2438].z * 0.3183098733425140380859375) * _2456) * _2457) + _2227;
    }
    uint _2275 = _2139 + 8u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _895) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2139].x + _971;
    float _2291 = cbLight._m0[_2139].y + _972;
    float _2292 = cbLight._m0[_2139].z + _973;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2139].xyz));
    float _4525 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2304 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2305 = dot(vec3(_892, _893, _894), vec3(_2297, _2298, _2299));
    float _4547 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2297, _2298, _2299));
    float _4558 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2289 * _2289;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2326 = 0.959999978542327880859375 - _1050;
    float _2328 = 0.959999978542327880859375 - _1051;
    float _2329 = 0.959999978542327880859375 - _1052;
    float _2336 = 1.0 - _2289;
    float _2347 = (0.5 / (((_2304 * ((_2303 * _2336) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2336) + _2289) * _2303))) * _2303;
    float _4569 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    uint _2360 = _2139 + 9u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _895) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2176].x + _971;
    float _2374 = cbLight._m0[_2176].y + _972;
    float _2375 = cbLight._m0[_2176].z + _973;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2176].xyz));
    float _4580 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2387 = dot(vec3(_892, _893, _894), vec3(_2380, _2381, _2382));
    float _4591 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2380, _2381, _2382));
    float _4602 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2372 * _2372;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2413 = 1.0 - _2372;
    float _2423 = (0.5 / (((_2304 * ((_2386 * _2413) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2413) + _2372) * _2386))) * _2386;
    float _4613 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    float _2435 = (((((_2406 * _2326) + _1053) * cbLight._m0[_2360].x) * _2425) * _2162) + (((((_2325 * _2326) + _1053) * cbLight._m0[_2275].x) * _2349) * _2172);
    float _2436 = (((((_2406 * _2328) + _1055) * cbLight._m0[_2360].y) * _2425) * _2162) + (((((_2325 * _2328) + _1055) * cbLight._m0[_2275].y) * _2349) * _2172);
    float _2437 = (((((_2406 * _2329) + _1056) * cbLight._m0[_2360].z) * _2425) * _2162) + (((((_2325 * _2329) + _1056) * cbLight._m0[_2275].z) * _2349) * _2172);
    float _2499;
    float _2501;
    float _2503;
    if (_2212)
    {
        _2499 = _2435;
        _2501 = _2436;
        _2503 = _2437;
    }
    else
    {
        uint _2505 = _2139 + 2u;
        uint _2509 = _2139 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _895) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _971;
        float _2526 = cbLight._m0[_2505].y + _972;
        float _2527 = cbLight._m0[_2505].z + _973;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2505].xyz));
        float _4624 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2539 = dot(vec3(_892, _893, _894), vec3(_2532, _2533, _2534));
        float _4635 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4646 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2304 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2565) + _2524) * _2538))) * _2538;
        float _4657 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2499 = (((((_2558 * _2326) + _1053) * cbLight._m0[_2509].x) * _2577) * _2578) + _2435;
        _2501 = (((((_2558 * _2328) + _1055) * cbLight._m0[_2509].y) * _2577) * _2578) + _2436;
        _2503 = (((((_2558 * _2329) + _1056) * cbLight._m0[_2509].z) * _2577) * _2578) + _2437;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2230)
    {
        _2613 = _2499;
        _2615 = _2501;
        _2617 = _2503;
    }
    else
    {
        uint _2624 = _2139 + 3u;
        uint _2628 = _2139 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _895) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _971;
        float _2645 = cbLight._m0[_2624].y + _972;
        float _2646 = cbLight._m0[_2624].z + _973;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2624].xyz));
        float _4673 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2658 = dot(vec3(_892, _893, _894), vec3(_2651, _2652, _2653));
        float _4684 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4695 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2304 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2684) + _2643) * _2657))) * _2657;
        float _4706 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2613 = (((((_2677 * _2326) + _1053) * cbLight._m0[_2628].x) * _2696) * _2697) + _2499;
        _2615 = (((((_2677 * _2328) + _1055) * cbLight._m0[_2628].y) * _2696) * _2697) + _2501;
        _2617 = (((((_2677 * _2329) + _1056) * cbLight._m0[_2628].z) * _2696) * _2697) + _2503;
    }
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_2137.y == 0u)
    {
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2772;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2772;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2772;
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.x;
        uint _2799 = uint((float(_2787.y) * floor(float(uint(cbSceneParam._m0[85u].y * _992) / _2788))) + floor(float(uint(cbSceneParam._m0[85u].x * _991) / _2788)));
        float _2809 = (log2(_2775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2810 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        uint _2813 = uint(isnan(14.0) ? _2810 : (isnan(_2810) ? 14.0 : min(_2810, 14.0)));
        uvec4 _2818 = texelFetch(g_lightClusterGridBuffer, int(((_2813 << 2u) + (_2799 << 6u)) >> 2u));
        uint _2819 = _2818.x;
        uint _2820 = _2787.z;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((((1u << ((_2820 >> 4u) & 15u)) + 4294967295u) & _2819) == 0u) || ((_2820 & 240u) == 0u))
        {
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
        }
        else
        {
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            uint _3079 = 0u;
            uint _3088;
            bool _3089;
            for (;;)
            {
                _3088 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                _3089 = _3088 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3089)
                {
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3078;
                    frontier_phi_66_pred_2 = _3077;
                    frontier_phi_66_pred_3 = _3076;
                    frontier_phi_66_pred_4 = _3075;
                    frontier_phi_66_pred_5 = _3074;
                }
                else
                {
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    uint _3224;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3088;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    for (;;)
                    {
                        uint _3228 = uint(findLSB(_3224)) + (_3079 << 5u);
                        uint _3225 = (_3224 + 4294967295u) & _3224;
                        uint _3230 = _3228 * 48u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 3u)).x));
                        uint _3250 = (_3228 * 48u) + 4u;
                        vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3269 = (_3228 * 48u) + 8u;
                        vec3 _3280 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x));
                        float _3284 = _3244.x - _2773;
                        float _3285 = _3244.y - _2774;
                        float _3286 = _3244.z - _2775;
                        float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                        float _3290 = inversesqrt(_3287);
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3294 = dot(vec3(_1010, _1013, _1016), vec3(_3291, _3292, _3293));
                        float _3299 = 1.0 - (_3287 * _3244.w);
                        float _4732 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3301 = sqrt(_3287) * _3263.w;
                        float _3304 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                        float _3305 = _3304 * _3304;
                        float _3308 = ((1.0 - _3305) * _3294) + _3305;
                        float _3311 = _3301 * _3301;
                        float _3315 = ((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3300) / ((_3311 * 0.699999988079071044921875) + 1.0);
                        float _3319 = (-0.0) - _2773;
                        float _3320 = (-0.0) - _2774;
                        float _3321 = (-0.0) - _2775;
                        float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3336 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                        float _3337 = 1.0 - _1085;
                        float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                        float _3345 = _3344 * _3344;
                        float _3346 = _3345 * _3345;
                        float _3347 = _3326 + _3291;
                        float _3348 = _3327 + _3292;
                        float _3349 = _3328 + _3293;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3357 = dot(vec3(_1010, _1013, _1016), vec3(_3326, _3327, _3328));
                        float _4748 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3360 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3361 = dot(vec3(_1010, _1013, _1016), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                        float _4759 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                        float _3369 = _3304 * _3345;
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3294) + _3370;
                        float _4770 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3374 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3375 = 1.0 - _3345;
                        float _3385 = (0.5 / (((_3374 * ((_3360 * _3375) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3345) * _3360))) * _3374;
                        float _4781 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3396 = (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3368 * _3368) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125))) * _3300;
                        _3148 = (_3315 * _3263.x) + _3221;
                        _3149 = (_3315 * _3263.y) + _3222;
                        _3150 = (_3315 * _3263.z) + _3223;
                        _3145 = (_3396 * _3280.x) + _3218;
                        _3146 = (_3396 * _3280.y) + _3219;
                        _3147 = (_3396 * _3280.z) + _3220;
                        if (_3225 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3225;
                        }
                    }
                    frontier_phi_66_pred = _3145;
                    frontier_phi_66_pred_1 = _3150;
                    frontier_phi_66_pred_2 = _3149;
                    frontier_phi_66_pred_3 = _3148;
                    frontier_phi_66_pred_4 = _3147;
                    frontier_phi_66_pred_5 = _3146;
                }
                _2921 = frontier_phi_66_pred;
                _2931 = frontier_phi_66_pred_1;
                _2929 = frontier_phi_66_pred_2;
                _2927 = frontier_phi_66_pred_3;
                _2925 = frontier_phi_66_pred_4;
                _2923 = frontier_phi_66_pred_5;
                uint _3080 = _3079 + 1u;
                if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3073 = _2921;
                    _3074 = _2923;
                    _3075 = _2925;
                    _3076 = _2927;
                    _3077 = _2929;
                    _3078 = _2931;
                    _3079 = _3080;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
        }
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.z;
        uint _2937 = (_2935 >> 8u) & 15u;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((4294967295u << _2937) & _2819) == 0u)
        {
            _3041 = _2920;
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
        }
        else
        {
            float _3066 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
            float _3067 = _3066 * _2773;
            float _3068 = _3066 * _2774;
            float _3069 = _3066 * _2775;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2937 < ((_2935 >> 12u) & 15u))
            {
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3201 = _2920;
                float _3202 = _2922;
                float _3203 = _2924;
                float _3204 = _2926;
                float _3205 = _2928;
                float _3206 = _2930;
                uint _3207 = _2937;
                uint _3216;
                bool _3217;
                for (;;)
                {
                    _3216 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3207 << 2u)) >> 2u)).x;
                    _3217 = _3216 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3217)
                    {
                        frontier_phi_77_pred = _3206;
                        frontier_phi_77_pred_1 = _3205;
                        frontier_phi_77_pred_2 = _3204;
                        frontier_phi_77_pred_3 = _3203;
                        frontier_phi_77_pred_4 = _3202;
                        frontier_phi_77_pred_5 = _3201;
                    }
                    else
                    {
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        uint _3429 = _3216;
                        uint _3430;
                        vec4 _3455;
                        float _3456;
                        vec4 _3471;
                        vec3 _3483;
                        vec4 _3498;
                        vec4 _3513;
                        float _3559;
                        bool _3560;
                        for (;;)
                        {
                            uint _3440 = ((_3207 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3429));
                            _3430 = (_3429 + 4294967295u) & _3429;
                            uint _3442 = _3440 * 40u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3456 = _3455.w;
                            uint _3458 = (_3440 * 40u) + 4u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3440 * 40u) + 8u;
                            _3483 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x));
                            uint _3485 = (_3440 * 40u) + 16u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3440 * 40u) + 20u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3440 * 40u) + 24u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3534 = (_3440 * 40u) + 28u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3559 = fma(_2775, _3547.z, fma(_2774, _3547.y, _3547.x * _2773)) + _3547.w;
                            _3560 = !((fma(_2775, _3528.z, fma(_2774, _3528.y, _3528.x * _2773)) + _3528.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3560)
                            {
                                float _3587 = _3455.x - _2773;
                                float _3588 = _3455.y - _2774;
                                float _3589 = _3455.z - _2775;
                                float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                                float _3593 = inversesqrt(_3590);
                                float _3594 = _3593 * _3587;
                                float _3595 = _3593 * _3588;
                                float _3596 = _3593 * _3589;
                                float _3600 = 1.0 - (_3590 / (_3456 * _3456));
                                float _4792 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3605 = sqrt(_3590) * _3471.w;
                                float _3607 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                                float _3608 = _3607 * _3607;
                                float _3611 = ((1.0 - _3608) * dot(vec3(_3594, _3595, _3596), vec3(_1010, _1013, _1016))) + _3608;
                                float _3614 = _3605 * _3605;
                                float _3618 = (fma(_2775, _3498.z, fma(_2774, _3498.y, _3498.x * _2773)) + _3498.w) / _3559;
                                float _3619 = (fma(_2775, _3513.z, fma(_2774, _3513.y, _3513.x * _2773)) + _3513.w) / _3559;
                                float _3623 = 1.0 - dot(vec2(_3618, _3619), vec2(_3618, _3619));
                                float _4808 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3625 = _3624 * (((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3601) / ((_3614 * 0.699999988079071044921875) + 1.0));
                                float _3637 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                                float _3638 = 1.0 - _1085;
                                float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                                float _3646 = _3645 * _3645;
                                float _3647 = _3646 * _3646;
                                float _3648 = _3594 - _3067;
                                float _3649 = _3595 - _3068;
                                float _3650 = _3596 - _3069;
                                float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                                float _3658 = dot(vec3(_1010, _1013, _1016), vec3((-0.0) - _3067, (-0.0) - _3068, (-0.0) - _3069));
                                float _4819 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3662 = dot(vec3(_1010, _1013, _1016), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                                float _4830 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                                float _3670 = _3607 * _3646;
                                float _3671 = _3670 * _3670;
                                float _3677 = ((1.0 - _3671) * dot(vec3(_1010, _1013, _1016), vec3(_3594, _3595, _3596))) + _3671;
                                float _4841 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3679 = 1.0 - _3646;
                                float _3689 = (0.5 / (((_3678 * ((_3661 * _3679) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3646) * _3661))) * _3678;
                                float _4852 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3699 = (_3624 * _3601) * (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3669 * _3669) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3625 * _3471.y;
                                frontier_phi_83_pred_1 = _3625 * _3471.x;
                                frontier_phi_83_pred_2 = _3699 * _3483.z;
                                frontier_phi_83_pred_3 = _3699 * _3483.y;
                                frontier_phi_83_pred_4 = _3699 * _3483.x;
                                frontier_phi_83_pred_5 = _3625 * _3471.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3707 = frontier_phi_83_pred;
                            _3706 = frontier_phi_83_pred_1;
                            _3705 = frontier_phi_83_pred_2;
                            _3704 = frontier_phi_83_pred_3;
                            _3703 = frontier_phi_83_pred_4;
                            _3708 = frontier_phi_83_pred_5;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            if (_3430 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3430;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3415;
                        frontier_phi_77_pred_1 = _3414;
                        frontier_phi_77_pred_2 = _3413;
                        frontier_phi_77_pred_3 = _3412;
                        frontier_phi_77_pred_4 = _3411;
                        frontier_phi_77_pred_5 = _3410;
                    }
                    _3052 = frontier_phi_77_pred;
                    _3050 = frontier_phi_77_pred_1;
                    _3048 = frontier_phi_77_pred_2;
                    _3046 = frontier_phi_77_pred_3;
                    _3044 = frontier_phi_77_pred_4;
                    _3042 = frontier_phi_77_pred_5;
                    uint _3208 = _3207 + 1u;
                    if (_3208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3201 = _3042;
                        _3202 = _3044;
                        _3203 = _3046;
                        _3204 = _3048;
                        _3205 = _3050;
                        _3206 = _3052;
                        _3207 = _3208;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3046;
                frontier_phi_58_59_ladder_1 = _3052;
                frontier_phi_58_59_ladder_2 = _3050;
                frontier_phi_58_59_ladder_3 = _3048;
                frontier_phi_58_59_ladder_4 = _3044;
                frontier_phi_58_59_ladder_5 = _3042;
            }
            else
            {
                frontier_phi_58_59_ladder = _2924;
                frontier_phi_58_59_ladder_1 = _2930;
                frontier_phi_58_59_ladder_2 = _2928;
                frontier_phi_58_59_ladder_3 = _2926;
                frontier_phi_58_59_ladder_4 = _2922;
                frontier_phi_58_59_ladder_5 = _2920;
            }
            _3041 = frontier_phi_58_59_ladder_5;
            _3043 = frontier_phi_58_59_ladder_4;
            _3045 = frontier_phi_58_59_ladder;
            _3047 = frontier_phi_58_59_ladder_3;
            _3049 = frontier_phi_58_59_ladder_2;
            _3051 = frontier_phi_58_59_ladder_1;
        }
        float _3056 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _2832 = (_3056 * _3047) + _2268;
        _2834 = (_3056 * _3049) + _2270;
        _2836 = (_3056 * _3051) + _2272;
        _2838 = ((_3041 * _1053) * _3056) + _2613;
        _2840 = ((_3043 * _1055) * _3056) + _2615;
        _2842 = ((_3045 * _1056) * _3056) + _2617;
    }
    else
    {
        _2832 = _2268;
        _2834 = _2270;
        _2836 = _2272;
        _2838 = _2613;
        _2840 = _2615;
        _2842 = _2617;
    }
    float _4868 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _4879 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4890 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _2859 = ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2832 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1069))) + ((_2838 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2860 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2834 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1069))) + ((_2840 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2861 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2836 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1069))) + ((_2842 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    uint _2862 = _287 + 6u;
    float _2870 = _991 / cbSceneParam._m0[86u].x;
    float _2871 = _992 / cbSceneParam._m0[86u].y;
    vec4 _2885 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2887 = _2885.x;
    float _2888 = _2885.y;
    float _2889 = _2885.z;
    float _2890 = _2885.w;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _2945 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _2946 = _2945 / _914;
        float _2957 = _2946 * _964;
        float _2958 = _965 * _2946;
        float _2959 = (-0.0) - _2958;
        float _2961 = _2946 * _966;
        float _2963 = (cbSceneParam._m0[77u].w * _2959) / _2945;
        float _2964 = _2963 + cbSceneParam._m0[79u].w;
        float _2965 = cbSceneParam._m0[79u].w - _2958;
        float _2971 = sqrt(((_2957 * _2957) + (_2958 * _2958)) + (_2961 * _2961));
        float _2974 = (1.0 - (cbSceneParam._m0[77u].w / _2945)) * _2971;
        float _2979 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2981 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3158;
        if (abs((_2959 - _2963) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3158 = ((((_2964 > 0.0) ? exp2(_2979 * _2964) : (2.0 - exp2(_2981 * _2964))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2974;
        }
        else
        {
            float _3102 = 1.0 / cbSceneParam._m0[80u].x;
            float _3103 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : max(_2964, _2965));
            float _3104 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : min(_2964, _2965));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            _3158 = ((abs(_2971 / _2959) * cbSceneParam._m0[80u].y) * ((((_3113 - _3114) * 2.0) - ((exp2(_2979 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0)))) - exp2(_2979 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))))) * _3102)) - ((exp2(_2981 * _3113) - exp2(_2981 * _3114)) * _3102))) + (_2974 * cbSceneParam._m0[80u].z);
        }
        vec4 _3160 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, 1.0), 0.0);
        float _3169 = exp2((_3158 * (-1.44269502162933349609375)) * (1.0 - _3160.w));
        float _3170 = log2(_3169);
        float _3186 = log2(_2890);
        _2983 = (exp2(_3186 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].x)) * _3160.x) / cbSceneParam._m0[78u].x)) + _2887;
        _2985 = (exp2(_3186 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].y)) * _3160.y) / cbSceneParam._m0[78u].y)) + _2888;
        _2987 = (exp2(_3186 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].z)) * _3160.z) / cbSceneParam._m0[78u].z)) + _2889;
        _2989 = _3169 * _2890;
    }
    else
    {
        _2983 = _2887;
        _2985 = _2888;
        _2987 = _2889;
        _2989 = _2890;
    }
    bool _3196;
    vec4 _2999;
    vec4 _3021;
    float _3023;
    float _3027;
    float _3028;
    float _3029;
    float _3030;
    bool _3040;
    for (;;)
    {
        _2999 = cbMatDynParam._m0[0u];
        float _3001 = roundEven(_2999.y);
        bool _3002 = _3001 == 3.0;
        float _3003 = log2(_2989);
        float _3010 = exp2(_3003 * cbSceneParam._m0[78u].x) * _2859;
        float _3011 = exp2(_3003 * cbSceneParam._m0[78u].y) * _2860;
        float _3012 = exp2(_3003 * cbSceneParam._m0[78u].z) * _2861;
        float _3019 = _980 + (-0.5);
        _3021 = cbMtdParam._m0[1u];
        _3023 = _3021.y * _3019;
        float _3026 = (_3001 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3027 = _3026 * (_3002 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2983)));
        _3028 = _3026 * (_3002 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2985)));
        _3029 = _3026 * (_3002 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2987)));
        _3030 = _3019 * 0.999000012874603271484375;
        _3040 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3040)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3030) < 0.5)
            {
                _3196 = true;
                break;
            }
        }
        uint _3137 = _1029 + uint(_2999.w);
        if ((cbInstanceData._m0[_3137].w < 1.0) && ((cbInstanceData._m0[_3137].w + _3030) < 0.5))
        {
            _3196 = true;
            break;
        }
        if ((_3023 + 1.0) < _3021.x)
        {
            _3196 = true;
            break;
        }
        _3196 = false;
        break;
    }
    float _3401;
    if (_3196)
    {
        discard_state = true;
        _3401 = 0.0;
    }
    else
    {
        _3401 = cbInstanceData._m0[_2862].w;
    }
    SV_Target.x = _3027;
    SV_Target.y = _3028;
    SV_Target.z = _3029;
    SV_Target.w = _3401;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2862].w;
    discard_exit();
}


