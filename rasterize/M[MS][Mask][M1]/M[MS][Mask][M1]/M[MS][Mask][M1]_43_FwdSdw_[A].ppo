#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _4032;
float _4033;
float _4034;
float _4035;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4044 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4055 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4066 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4077 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _446 = (_439 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _447 = (_439 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _448 = (_439 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    float _452 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _446;
    float _455 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _447;
    float _458 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _448;
    float _465 = ((_446 - _452) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) + _452;
    float _466 = ((_447 - _455) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) + _455;
    float _467 = ((_448 - _458) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _458;
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _554 = _550.z;
    float _563 = ((_533.z - _554) * _439) + _554;
    float _566 = ((((_533.x - _552) * _439) + _552) * 2.0) + (-1.0);
    float _567 = ((((_533.y - _553) * _439) + _553) * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _4088 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _573 = sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _605 = (_566 + ((((_506.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_593.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _606 = (_567 + ((((_506.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_593.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _609 = fma(_573, _243, fma(_606, _250, _605 * _236));
    float _612 = fma(_573, _244, fma(_606, _251, _605 * _237));
    float _615 = fma(_573, _245, fma(_606, _252, _605 * _238));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _658 = (cbMtdParam._m0[19u].x + dot(vec4(_619 * _609, _619 * _612, _619 * _615, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_648 - _649) * cbMtdParam._m0[24u].z) + _649) * cbMtdParam._m0[21u].z);
    float _4099 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _666 = (_659 * ((_486.x * cbMtdParam._m0[18u].x) - _465)) + _465;
    float _667 = (_659 * ((_486.y * cbMtdParam._m0[18u].y) - _466)) + _466;
    float _668 = (_659 * ((_486.z * cbMtdParam._m0[18u].z) - _467)) + _467;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _696) * _439) + _696;
    float _718 = ((_680.x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _720 = _718 - (_718 * _659);
    float _725 = (((_506.z - _563) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _563;
    float _729 = ((_593.z - _725) * cbMtdParam._m0[19u].w) + _725;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _749 = (_742.x * 2.0) + (-1.0);
    float _750 = (_742.y * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _4110 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _759 = ((_742.z - _729) * _659) + _729;
    float _769 = ((sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) - _573) * _659) + _573;
    float _772 = (((_749 - _605) * _659) + _605) + (cbMtdParam._m0[21u].x * _605);
    float _773 = (((_750 - _606) * _659) + _606) + (cbMtdParam._m0[21u].x * _606);
    float _775 = cbMtdParam._m0[22u].x + _593.w;
    float _778 = fma(_769, _243, fma(_773, _250, _772 * _236));
    float _781 = fma(_769, _244, fma(_773, _251, _772 * _237));
    float _784 = fma(_769, _245, fma(_773, _252, _772 * _238));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _4121 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _792 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4143 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4154 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4165 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4176 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _797 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1050 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1056 = (cbMatDynParam._m0[5u].x * _1050) + cbMatDynParam._m0[5u].y;
        float _4187 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1061 = (cbMatDynParam._m0[5u].z * _1050) + cbMatDynParam._m0[5u].w;
        float _4198 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) - _1057)) + _1057) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _911 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _914 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _927 = _276 + 9u;
    uint _928 = _927 + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_928].z;
    float _4209 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _940 = 1.0 - _797;
    float _941 = _937 * _940;
    float _942 = _938 * _940;
    float _943 = _939 * _940;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _797;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _797;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _797;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _967 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _789) - _869;
    float _976 = (_971 * _790) - _870;
    float _977 = (_971 * _791) - _871;
    float _981 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _4242 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_792);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1002 = (1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _983;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1098 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1102 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1127 = _1031 + _789;
        float _1128 = _1035 + _790;
        float _1129 = _1039 + _791;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_789, _790, _791), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4290 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_789, _790, _791), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4323 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_789, _790, _791), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4356 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1416 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1420 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1443 = _1031 + _789;
        float _1444 = _1035 + _790;
        float _1445 = _1039 + _791;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_789, _790, _791), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4419 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_789, _790, _791), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4452 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_789, _790, _791), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4485 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = _1370;
        _1692 = _1370;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1383)) + _1383;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _975 * 0.5;
    float _1750 = _976 * 0.5;
    float _1751 = _977 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1879 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1882 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1910 = frontier_phi_17_15_ladder;
        }
        float _2081;
        if (_1879 > 0.0)
        {
            _2081 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2081 = frontier_phi_26_22_ladder;
        }
        float _2376;
        if (_1882 > 0.0)
        {
            _2376 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2376 = frontier_phi_38_33_ladder;
        }
        float _2378 = isnan(_2081) ? _1910 : (isnan(_1910) ? _2081 : min(_1910, _2081));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1876) + _1865;
        float _2384 = (_2379 * _1879) + _1869;
        float _2385 = (_2379 * _1882) + _1873;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_16_38_ladder_2;
        _1900 = frontier_phi_16_38_ladder_1;
        _1902 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1974 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1977 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2086;
        if (_1971 > 0.0)
        {
            _2086 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2086 = frontier_phi_28_24_ladder;
        }
        float _2403;
        if (_1974 > 0.0)
        {
            _2403 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2403 = frontier_phi_40_35_ladder;
        }
        float _2741;
        if (_1977 > 0.0)
        {
            _2741 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2741 = frontier_phi_50_47_ladder;
        }
        float _2743 = isnan(_2403) ? _2086 : (isnan(_2086) ? _2403 : min(_2086, _2403));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1971) + _1960;
        float _2749 = (_2744 * _1974) + _1964;
        float _2750 = (_2744 * _1977) + _1968;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_25_50_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_50_ladder_2;
        _1998 = frontier_phi_25_50_ladder_1;
        _2000 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1907);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1002 * _951) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1002 * _953) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1002 * _954) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2073 = _2060 / _2072;
    float _2074 = _2064 / _2072;
    float _2075 = _2068 / _2072;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2102 = ((uint(_2075 > cbSceneParam._m0[59u].y) + uint(_2075 > cbSceneParam._m0[59u].x)) + uint(_2075 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2103 = _2102 + 43u;
        uint _2111 = _2102 + 44u;
        uint _2119 = _2102 + 45u;
        uint _2127 = _2102 + 46u;
        float _2138 = fma(_2072, cbSceneParam._m0[_2103].w, fma(_2068, cbSceneParam._m0[_2103].z, fma(_2064, cbSceneParam._m0[_2103].y, _2060 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2072, cbSceneParam._m0[_2111].w, fma(_2068, cbSceneParam._m0[_2111].z, fma(_2064, cbSceneParam._m0[_2111].y, _2060 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2072, cbSceneParam._m0[_2127].w, fma(_2068, cbSceneParam._m0[_2127].z, fma(_2064, cbSceneParam._m0[_2127].y, _2060 * cbSceneParam._m0[_2127].x)));
        float _2155 = cbSceneParam._m0[33u].z * _2150;
        float _2157 = cbSceneParam._m0[33u].w * _2150;
        float _2160 = fma(_2072, cbSceneParam._m0[_2119].w, fma(_2068, cbSceneParam._m0[_2119].z, fma(_2064, cbSceneParam._m0[_2119].y, _2060 * cbSceneParam._m0[_2119].x))) / _2150;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
        float _4611 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2138) / _2150, (_2157 + _2142) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2138) / _2150, (_2142 - _2155) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2155) / _2150, (_2142 - _2157) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2157) / _2150, (_2155 + _2142) / _2150), _2160), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2072, cbSceneParam._m0[63u].w, fma(_2068, cbSceneParam._m0[63u].z, fma(_2064, cbSceneParam._m0[63u].y, _2060 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2072, cbSceneParam._m0[60u].w, fma(_2068, cbSceneParam._m0[60u].z, fma(_2064, cbSceneParam._m0[60u].y, _2060 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2072, cbSceneParam._m0[61u].w, fma(_2068, cbSceneParam._m0[61u].z, fma(_2064, cbSceneParam._m0[61u].y, _2060 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2416 = fma(_2072, cbSceneParam._m0[62u].w, fma(_2068, cbSceneParam._m0[62u].z, fma(_2064, cbSceneParam._m0[62u].y, _2060 * cbSceneParam._m0[62u].x))) / _2276;
            float _2420 = isnan(cbSceneParam._m0[41u].w) ? _2416 : (isnan(_2416) ? cbSceneParam._m0[41u].w : max(_2416, cbSceneParam._m0[41u].w));
            float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
            float _4627 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
            float _2470 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2420), 0.0)).x), vec4(0.25)));
            float _2474 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
            float _2475 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
            float _2476 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
            frontier_phi_37_36_ladder_1 = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_37_36_ladder_2 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
        }
        else
        {
            frontier_phi_37_36_ladder = _2224;
            frontier_phi_37_36_ladder_1 = _2223;
            frontier_phi_37_36_ladder_2 = _2222;
        }
        _2288 = frontier_phi_37_36_ladder_2;
        _2290 = frontier_phi_37_36_ladder_1;
        _2292 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _967 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2335 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2339 = _2299 | 1u;
    float _2350 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_789, _790, _791));
    float _2353 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_789, _790, _791));
    float _4663 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _4674 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2358 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2360 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2367 = ((cbLight._m0[_2316].x * _2322) * _2360) + (((cbLight._m0[_2326].x * _2288) * _2335) * _2358);
    float _2368 = ((_2322 * cbLight._m0[_2316].y) * _2360) + (((cbLight._m0[_2326].y * _2290) * _2335) * _2358);
    float _2369 = ((_2322 * cbLight._m0[_2316].z) * _2360) + (((cbLight._m0[_2326].z * _2292) * _2335) * _2358);
    uvec4 _2373 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2375 = _2373.x == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2375)
    {
        _2477 = _2367;
        _2479 = _2368;
        _2481 = _2369;
    }
    else
    {
        uint _2485 = _2299 + 6u;
        float _2501 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4685 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2504 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2477 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2367;
        _2479 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2368;
        _2481 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2369;
    }
    bool _2484 = _2373.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2484)
    {
        _2539 = _2477;
        _2541 = _2479;
        _2543 = _2481;
    }
    else
    {
        uint _2712 = _2299 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4701 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2731 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2477;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2479;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2481;
    }
    uint _2546 = _2299 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _792) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2299].x + _869;
    float _2562 = cbLight._m0[_2299].y + _870;
    float _2563 = cbLight._m0[_2299].z + _871;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2299].xyz));
    float _4717 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _4728 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2575 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2576 = dot(vec3(_789, _790, _791), vec3(_2568, _2569, _2570));
    float _4739 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2568, _2569, _2570));
    float _4750 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _948;
    float _2599 = 0.959999978542327880859375 - _949;
    float _2600 = 0.959999978542327880859375 - _950;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4761 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2299 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _792) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2339].x + _869;
    float _2648 = cbLight._m0[_2339].y + _870;
    float _2649 = cbLight._m0[_2339].z + _871;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2339].xyz));
    float _4772 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2661 = dot(vec3(_789, _790, _791), vec3(_2654, _2655, _2656));
    float _4783 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2654, _2655, _2656));
    float _4794 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4805 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _951) * cbLight._m0[_2634].x) * _2699) * _2322) + ((((cbLight._m0[_2546].x * _2288) * ((_2596 * _2597) + _951)) * _2620) * _2335);
    float _2710 = (((((_2680 * _2599) + _953) * cbLight._m0[_2634].y) * _2699) * _2322) + ((((cbLight._m0[_2546].y * _2290) * ((_2596 * _2599) + _953)) * _2620) * _2335);
    float _2711 = (((((_2680 * _2600) + _954) * cbLight._m0[_2634].z) * _2699) * _2322) + ((((cbLight._m0[_2546].z * _2292) * ((_2596 * _2600) + _954)) * _2620) * _2335);
    float _2767;
    float _2769;
    float _2771;
    if (_2375)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2299 + 2u;
        uint _2777 = _2299 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _792) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _869;
        float _2794 = cbLight._m0[_2773].y + _870;
        float _2795 = cbLight._m0[_2773].z + _871;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2773].xyz));
        float _4816 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2807 = dot(vec3(_789, _790, _791), vec3(_2800, _2801, _2802));
        float _4827 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4838 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2575 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2833) + _2792) * _2806))) * _2806;
        float _4849 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2767 = (((((_2826 * _2597) + _951) * cbLight._m0[_2777].x) * _2845) * _2846) + _2709;
        _2769 = (((((_2826 * _2599) + _953) * cbLight._m0[_2777].y) * _2845) * _2846) + _2710;
        _2771 = (((((_2826 * _2600) + _954) * cbLight._m0[_2777].z) * _2845) * _2846) + _2711;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2484)
    {
        _2877 = _2767;
        _2879 = _2769;
        _2881 = _2771;
    }
    else
    {
        uint _2888 = _2299 + 3u;
        uint _2892 = _2299 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _792) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _869;
        float _2909 = cbLight._m0[_2888].y + _870;
        float _2910 = cbLight._m0[_2888].z + _871;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2888].xyz));
        float _4865 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2922 = dot(vec3(_789, _790, _791), vec3(_2915, _2916, _2917));
        float _4876 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4887 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2575 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2948) + _2907) * _2921))) * _2921;
        float _4898 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2877 = (((((_2941 * _2597) + _951) * cbLight._m0[_2892].x) * _2960) * _2961) + _2767;
        _2879 = (((((_2941 * _2599) + _953) * cbLight._m0[_2892].y) * _2960) * _2961) + _2769;
        _2881 = (((((_2941 * _2600) + _954) * cbLight._m0[_2892].z) * _2960) * _2961) + _2771;
    }
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    if (_2297.y == 0u)
    {
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2983)));
        float _3004 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
        }
        else
        {
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            uint _3253 = 0u;
            uint _3262;
            bool _3263;
            for (;;)
            {
                _3262 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                _3263 = _3262 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3263)
                {
                    frontier_phi_71_pred = _3252;
                    frontier_phi_71_pred_1 = _3251;
                    frontier_phi_71_pred_2 = _3250;
                    frontier_phi_71_pred_3 = _3249;
                    frontier_phi_71_pred_4 = _3248;
                    frontier_phi_71_pred_5 = _3247;
                }
                else
                {
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    uint _3398;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3262;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    for (;;)
                    {
                        uint _3402 = uint(findLSB(_3398)) + (_3253 << 5u);
                        uint _3399 = (_3398 + 4294967295u) & _3398;
                        uint _3404 = _3402 * 48u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3424 = (_3402 * 48u) + 4u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3443 = (_3402 * 48u) + 8u;
                        vec3 _3454 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x));
                        float _3458 = _3418.x - _2073;
                        float _3459 = _3418.y - _2074;
                        float _3460 = _3418.z - _2075;
                        float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                        float _3464 = inversesqrt(_3461);
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3468 = dot(vec3(_908, _911, _914), vec3(_3465, _3466, _3467));
                        float _3473 = 1.0 - (_3461 * _3418.w);
                        float _4924 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3475 = sqrt(_3461) * _3437.w;
                        float _3478 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                        float _3479 = _3478 * _3478;
                        float _3482 = ((1.0 - _3479) * _3468) + _3479;
                        float _3485 = _3475 * _3475;
                        float _3489 = ((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3474) / ((_3485 * 0.699999988079071044921875) + 1.0);
                        float _3493 = (-0.0) - _2073;
                        float _3494 = (-0.0) - _2074;
                        float _3495 = (-0.0) - _2075;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3500 = _3499 * _3493;
                        float _3501 = _3499 * _3494;
                        float _3502 = _3499 * _3495;
                        float _3509 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                        float _3510 = 1.0 - _983;
                        float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                        float _3518 = _3517 * _3517;
                        float _3519 = _3518 * _3518;
                        float _3520 = _3500 + _3465;
                        float _3521 = _3501 + _3466;
                        float _3522 = _3502 + _3467;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3530 = dot(vec3(_908, _911, _914), vec3(_3500, _3501, _3502));
                        float _4940 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3534 = dot(vec3(_908, _911, _914), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                        float _4951 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3537 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                        float _3542 = _3478 * _3518;
                        float _3543 = _3542 * _3542;
                        float _3546 = ((1.0 - _3543) * _3468) + _3543;
                        float _4962 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3547 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3548 = 1.0 - _3518;
                        float _3558 = (0.5 / (((_3547 * ((_3533 * _3548) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3518) * _3533))) * _3547;
                        float _4973 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3569 = (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) / ((_3541 * _3541) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125))) * _3474;
                        _3322 = (_3489 * _3437.x) + _3395;
                        _3323 = (_3489 * _3437.y) + _3396;
                        _3324 = (_3489 * _3437.z) + _3397;
                        _3319 = (_3569 * _3454.x) + _3392;
                        _3320 = (_3569 * _3454.y) + _3393;
                        _3321 = (_3569 * _3454.z) + _3394;
                        if (_3399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3399;
                        }
                    }
                    frontier_phi_71_pred = _3324;
                    frontier_phi_71_pred_1 = _3323;
                    frontier_phi_71_pred_2 = _3322;
                    frontier_phi_71_pred_3 = _3321;
                    frontier_phi_71_pred_4 = _3320;
                    frontier_phi_71_pred_5 = _3319;
                }
                _3105 = frontier_phi_71_pred;
                _3103 = frontier_phi_71_pred_1;
                _3101 = frontier_phi_71_pred_2;
                _3099 = frontier_phi_71_pred_3;
                _3097 = frontier_phi_71_pred_4;
                _3095 = frontier_phi_71_pred_5;
                uint _3254 = _3253 + 1u;
                if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3247 = _3095;
                    _3248 = _3097;
                    _3249 = _3099;
                    _3250 = _3101;
                    _3251 = _3103;
                    _3252 = _3105;
                    _3253 = _3254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
        }
        uvec4 _3108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3109 = _3108.z;
        uint _3111 = (_3109 >> 8u) & 15u;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((4294967295u << _3111) & _3014) == 0u)
        {
            _3215 = _3094;
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
        }
        else
        {
            float _3240 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _3241 = _3240 * _2073;
            float _3242 = _3240 * _2074;
            float _3243 = _3240 * _2075;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3111 < ((_3109 >> 12u) & 15u))
            {
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3375 = _3094;
                float _3376 = _3096;
                float _3377 = _3098;
                float _3378 = _3100;
                float _3379 = _3102;
                float _3380 = _3104;
                uint _3381 = _3111;
                uint _3390;
                bool _3391;
                for (;;)
                {
                    _3390 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3381 << 2u)) >> 2u)).x;
                    _3391 = _3390 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3391)
                    {
                        frontier_phi_82_pred = _3380;
                        frontier_phi_82_pred_1 = _3379;
                        frontier_phi_82_pred_2 = _3378;
                        frontier_phi_82_pred_3 = _3377;
                        frontier_phi_82_pred_4 = _3376;
                        frontier_phi_82_pred_5 = _3375;
                    }
                    else
                    {
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        float _3600 = _3379;
                        float _3601 = _3380;
                        uint _3602 = _3390;
                        uint _3603;
                        vec4 _3628;
                        float _3629;
                        vec4 _3644;
                        vec3 _3656;
                        vec4 _3671;
                        vec4 _3686;
                        float _3732;
                        bool _3733;
                        for (;;)
                        {
                            uint _3613 = ((_3381 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3602));
                            _3603 = (_3602 + 4294967295u) & _3602;
                            uint _3615 = _3613 * 40u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3629 = _3628.w;
                            uint _3631 = (_3613 * 40u) + 4u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3613 * 40u) + 8u;
                            _3656 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x));
                            uint _3658 = (_3613 * 40u) + 16u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3613 * 40u) + 20u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3613 * 40u) + 24u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3707 = (_3613 * 40u) + 28u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            _3732 = fma(_2075, _3720.z, fma(_2074, _3720.y, _3720.x * _2073)) + _3720.w;
                            _3733 = !((fma(_2075, _3701.z, fma(_2074, _3701.y, _3701.x * _2073)) + _3701.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3733)
                            {
                                float _3760 = _3628.x - _2073;
                                float _3761 = _3628.y - _2074;
                                float _3762 = _3628.z - _2075;
                                float _3763 = dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762));
                                float _3766 = inversesqrt(_3763);
                                float _3767 = _3766 * _3760;
                                float _3768 = _3766 * _3761;
                                float _3769 = _3766 * _3762;
                                float _3773 = 1.0 - (_3763 / (_3629 * _3629));
                                float _4984 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3778 = sqrt(_3763) * _3644.w;
                                float _3780 = 1.39999997615814208984375 / (_3778 + 1.39999997615814208984375);
                                float _3781 = _3780 * _3780;
                                float _3784 = ((1.0 - _3781) * dot(vec3(_3767, _3768, _3769), vec3(_908, _911, _914))) + _3781;
                                float _3787 = _3778 * _3778;
                                float _3791 = (fma(_2075, _3671.z, fma(_2074, _3671.y, _3671.x * _2073)) + _3671.w) / _3732;
                                float _3792 = (fma(_2075, _3686.z, fma(_2074, _3686.y, _3686.x * _2073)) + _3686.w) / _3732;
                                float _3796 = 1.0 - dot(vec2(_3791, _3792), vec2(_3791, _3792));
                                float _5000 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3798 = _3797 * (((isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0))) * _3774) / ((_3787 * 0.699999988079071044921875) + 1.0));
                                float _3810 = exp2(log2(1.0 / ((_3787 * 3.5) + 5.0)) * 0.25);
                                float _3811 = 1.0 - _983;
                                float _3818 = sqrt(1.0 - ((1.0 - (_3811 * _3811)) * (1.0 - (_3810 * _3810))));
                                float _3819 = _3818 * _3818;
                                float _3820 = _3819 * _3819;
                                float _3821 = _3767 - _3241;
                                float _3822 = _3768 - _3242;
                                float _3823 = _3769 - _3243;
                                float _3827 = inversesqrt(dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823)));
                                float _3831 = dot(vec3(_908, _911, _914), vec3((-0.0) - _3241, (-0.0) - _3242, (-0.0) - _3243));
                                float _5011 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3835 = dot(vec3(_908, _911, _914), vec3(_3827 * _3821, _3827 * _3822, _3827 * _3823));
                                float _5022 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3838 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3842 = ((_3838 * _3838) * (_3820 + (-1.0))) + 1.0;
                                float _3843 = _3780 * _3819;
                                float _3844 = _3843 * _3843;
                                float _3850 = ((1.0 - _3844) * dot(vec3(_908, _911, _914), vec3(_3767, _3768, _3769))) + _3844;
                                float _5033 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3852 = 1.0 - _3819;
                                float _3862 = (0.5 / (((_3851 * ((_3834 * _3852) + _3819)) + 9.9999999392252902907785028219223e-09) + (((_3851 * _3852) + _3819) * _3834))) * _3851;
                                float _5044 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3872 = (_3797 * _3774) * (((_3820 * 3.1415927410125732421875) * (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0)))) / ((_3842 * _3842) * ((_3787 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3798 * _3644.z;
                                frontier_phi_88_pred_1 = _3798 * _3644.y;
                                frontier_phi_88_pred_2 = _3798 * _3644.x;
                                frontier_phi_88_pred_3 = _3872 * _3656.z;
                                frontier_phi_88_pred_4 = _3872 * _3656.y;
                                frontier_phi_88_pred_5 = _3872 * _3656.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3881 = frontier_phi_88_pred;
                            _3880 = frontier_phi_88_pred_1;
                            _3879 = frontier_phi_88_pred_2;
                            _3878 = frontier_phi_88_pred_3;
                            _3877 = frontier_phi_88_pred_4;
                            _3876 = frontier_phi_88_pred_5;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            if (_3603 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3603;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3588;
                        frontier_phi_82_pred_1 = _3587;
                        frontier_phi_82_pred_2 = _3586;
                        frontier_phi_82_pred_3 = _3585;
                        frontier_phi_82_pred_4 = _3584;
                        frontier_phi_82_pred_5 = _3583;
                    }
                    _3226 = frontier_phi_82_pred;
                    _3224 = frontier_phi_82_pred_1;
                    _3222 = frontier_phi_82_pred_2;
                    _3220 = frontier_phi_82_pred_3;
                    _3218 = frontier_phi_82_pred_4;
                    _3216 = frontier_phi_82_pred_5;
                    uint _3382 = _3381 + 1u;
                    if (_3382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3375 = _3216;
                        _3376 = _3218;
                        _3377 = _3220;
                        _3378 = _3222;
                        _3379 = _3224;
                        _3380 = _3226;
                        _3381 = _3382;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3222;
                frontier_phi_63_64_ladder_1 = _3226;
                frontier_phi_63_64_ladder_2 = _3224;
                frontier_phi_63_64_ladder_3 = _3220;
                frontier_phi_63_64_ladder_4 = _3218;
                frontier_phi_63_64_ladder_5 = _3216;
            }
            else
            {
                frontier_phi_63_64_ladder = _3100;
                frontier_phi_63_64_ladder_1 = _3104;
                frontier_phi_63_64_ladder_2 = _3102;
                frontier_phi_63_64_ladder_3 = _3098;
                frontier_phi_63_64_ladder_4 = _3096;
                frontier_phi_63_64_ladder_5 = _3094;
            }
            _3215 = frontier_phi_63_64_ladder_5;
            _3217 = frontier_phi_63_64_ladder_4;
            _3219 = frontier_phi_63_64_ladder_3;
            _3221 = frontier_phi_63_64_ladder;
            _3223 = frontier_phi_63_64_ladder_2;
            _3225 = frontier_phi_63_64_ladder_1;
        }
        float _3230 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _3027 = (_3230 * _3221) + _2539;
        _3029 = (_3230 * _3223) + _2541;
        _3031 = (_3230 * _3225) + _2543;
        _3033 = ((_3215 * _951) * _3230) + _2877;
        _3035 = ((_3217 * _953) * _3230) + _2879;
        _3037 = ((_3219 * _954) * _3230) + _2881;
    }
    else
    {
        _3027 = _2539;
        _3029 = _2541;
        _3031 = _2543;
        _3033 = _2877;
        _3035 = _2879;
        _3037 = _2881;
    }
    float _5060 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _5071 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _5082 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _3054 = ((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3027 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _967))) + ((_3033 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3029 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _967))) + ((_3035 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _3056 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3031 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _967))) + ((_3037 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _3057 = _276 + 6u;
    float _3065 = _889 / cbSceneParam._m0[86u].x;
    float _3066 = _890 / cbSceneParam._m0[86u].y;
    vec4 _3080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3082 = _3080.x;
    float _3083 = _3080.y;
    float _3084 = _3080.z;
    float _3085 = _3080.w;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _3119 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _3120 = _3119 / _811;
        float _3131 = _3120 * _862;
        float _3132 = _863 * _3120;
        float _3133 = (-0.0) - _3132;
        float _3135 = _3120 * _864;
        float _3137 = (cbSceneParam._m0[77u].w * _3133) / _3119;
        float _3138 = _3137 + cbSceneParam._m0[79u].w;
        float _3139 = cbSceneParam._m0[79u].w - _3132;
        float _3145 = sqrt(((_3131 * _3131) + (_3132 * _3132)) + (_3135 * _3135));
        float _3148 = (1.0 - (cbSceneParam._m0[77u].w / _3119)) * _3145;
        float _3153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3155 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3332;
        if (abs((_3133 - _3137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3332 = ((((_3138 > 0.0) ? exp2(_3153 * _3138) : (2.0 - exp2(_3155 * _3138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3148;
        }
        else
        {
            float _3276 = 1.0 / cbSceneParam._m0[80u].x;
            float _3277 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : max(_3138, _3139));
            float _3278 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : min(_3138, _3139));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            _3332 = ((abs(_3145 / _3133) * cbSceneParam._m0[80u].y) * ((((_3287 - _3288) * 2.0) - ((exp2(_3153 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0)))) - exp2(_3153 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))))) * _3276)) - ((exp2(_3155 * _3287) - exp2(_3155 * _3288)) * _3276))) + (_3148 * cbSceneParam._m0[80u].z);
        }
        vec4 _3334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, 1.0), 0.0);
        float _3343 = exp2((_3332 * (-1.44269502162933349609375)) * (1.0 - _3334.w));
        float _3344 = log2(_3343);
        float _3360 = log2(_3085);
        _3157 = (exp2(_3360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].x)) * _3334.x) / cbSceneParam._m0[78u].x)) + _3082;
        _3159 = (exp2(_3360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].y)) * _3334.y) / cbSceneParam._m0[78u].y)) + _3083;
        _3161 = (exp2(_3360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].z)) * _3334.z) / cbSceneParam._m0[78u].z)) + _3084;
        _3163 = _3343 * _3085;
    }
    else
    {
        _3157 = _3082;
        _3159 = _3083;
        _3161 = _3084;
        _3163 = _3085;
    }
    bool _3370;
    vec4 _3173;
    vec4 _3195;
    float _3197;
    float _3201;
    float _3202;
    float _3203;
    float _3204;
    bool _3214;
    for (;;)
    {
        _3173 = cbMatDynParam._m0[0u];
        float _3175 = roundEven(_3173.y);
        bool _3176 = _3175 == 3.0;
        float _3177 = log2(_3163);
        float _3184 = exp2(_3177 * cbSceneParam._m0[78u].x) * _3054;
        float _3185 = exp2(_3177 * cbSceneParam._m0[78u].y) * _3055;
        float _3186 = exp2(_3177 * cbSceneParam._m0[78u].z) * _3056;
        float _3193 = _878 + (-0.5);
        _3195 = cbMtdParam._m0[1u];
        _3197 = _3195.y * _3193;
        float _3200 = (_3175 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3201 = _3200 * (_3176 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3157)));
        _3202 = _3200 * (_3176 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3159)));
        _3203 = _3200 * (_3176 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3161)));
        _3204 = _3193 * 0.999000012874603271484375;
        _3214 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3214)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3204) < 0.5)
            {
                _3370 = true;
                break;
            }
        }
        uint _3311 = _927 + uint(_3173.w);
        if ((cbInstanceData._m0[_3311].w < 1.0) && ((cbInstanceData._m0[_3311].w + _3204) < 0.5))
        {
            _3370 = true;
            break;
        }
        if ((_3197 + 1.0) < _3195.x)
        {
            _3370 = true;
            break;
        }
        _3370 = false;
        break;
    }
    float _3574;
    if (_3370)
    {
        discard_state = true;
        _3574 = 0.0;
    }
    else
    {
        _3574 = cbInstanceData._m0[_3057].w;
    }
    SV_Target.x = _3201;
    SV_Target.y = _3202;
    SV_Target.z = _3203;
    SV_Target.w = _3574;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3057].w;
    discard_exit();
}


