#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1561;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4170 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4181 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4192 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4203 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4214 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _654 = _650.z;
    float _661 = ((_633.x - _652) * _486) + _652;
    float _662 = ((_633.y - _653) * _486) + _653;
    float _663 = ((_633.z - _654) * _486) + _654;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _688 = ((_675.z - _663) * _559) + _663;
    float _691 = ((((_675.x - _661) * _559) + _661) * 2.0) + (-1.0);
    float _692 = ((((_675.y - _662) * _559) + _662) * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4225 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _749 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _752 = ((isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : min(_749, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _761 = (_752 - ((((((_739 - _740) * cbMtdParam._m0[24u].z) + _740) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _752))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4246 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _769 = (_762 * (cbMtdParam._m0[17u].x - _589)) + _589;
    float _770 = (_762 * (cbMtdParam._m0[17u].y - _591)) + _591;
    float _771 = (_762 * (cbMtdParam._m0[17u].z - _593)) + _593;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _811 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_785 - _786) * cbMtdParam._m0[24u].w) + _786) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4257 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _820 = ((((cbMtdParam._m0[10u].x - _769) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _812) + _769;
    float _821 = ((((cbMtdParam._m0[10u].y - _770) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _812) + _770;
    float _822 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _771)) * _812) + _771;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _850 = _848.x;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _850) * _486) + _850;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _867) * _559) + _867;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _884) * cbMtdParam._m0[19u].z) + _884;
    float _890 = _888 - (_888 * _762);
    float _892 = _890 - (_890 * _812);
    float _897 = (((_610.z - _688) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _688;
    float _901 = ((_712.z - _897) * cbMtdParam._m0[19u].w) + _897;
    vec4 _915 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _922 = (_915.x * 2.0) + (-1.0);
    float _923 = (_915.y * 2.0) + (-1.0);
    float _924 = dot(vec2(_922, _923), vec2(_922, _923));
    float _4268 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _932 = (_762 * (_915.z - _901)) + _901;
    float _935 = ((cbMtdParam._m0[23u].x - _932) * _812) + _932;
    vec4 _956 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _962 = (_956.x * 2.0) + (-1.0);
    float _963 = (_956.y * 2.0) + (-1.0);
    float _964 = dot(vec2(_962, _963), vec2(_962, _963));
    float _4279 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _978 = (_691 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_610.x * 2.0) + (-1.0)))) + (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _979 = (_692 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_610.y * 2.0) + (-1.0)))) + (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _991 = (((_922 - _978) + (cbMtdParam._m0[21u].x * _978)) * _762) + _978;
    float _992 = (((_923 - _979) + (cbMtdParam._m0[21u].x * _979)) * _762) + _979;
    float _993 = (_762 * (sqrt(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) - _698)) + _698;
    float _1004 = (((_962 - _991) + (_991 * cbMtdParam._m0[22u].z)) * _812) + _991;
    float _1005 = (((_963 - _992) + (_992 * cbMtdParam._m0[22u].z)) * _812) + _992;
    float _1006 = ((sqrt(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) - _993) * _812) + _993;
    float _1008 = cbMtdParam._m0[22u].x + _712.w;
    float _1011 = fma(_1006, _263 * NORMAL.x, fma(_1005, _270 * TANGENT.x, (_256 * _248) * _1004));
    float _1014 = fma(_1006, _263 * NORMAL.y, fma(_1005, _270 * TANGENT.y, (_256 * _249) * _1004));
    float _1017 = fma(_1006, _263 * NORMAL.z, fma(_1005, _270 * TANGENT.z, (_256 * _250) * _1004));
    float _1021 = inversesqrt(dot(vec3(_1011, _1014, _1017), vec3(_1011, _1014, _1017)));
    float _1022 = _1021 * _1011;
    float _1023 = _1021 * _1014;
    float _1024 = _1021 * _1017;
    float _4290 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _1025 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4312 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4323 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4334 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4345 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _1030 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _1044 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1094 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1084);
    float _1095 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1084);
    float _1096 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1084);
    float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
    float _1101 = _1094 * _1100;
    float _1102 = _1095 * _1100;
    float _1103 = _1096 * _1100;
    float _1109 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1110 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1128 = fma(_1024, cbSceneParam._m0[5u].z, fma(_1023, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1022));
    float _1131 = fma(_1024, cbSceneParam._m0[6u].z, fma(_1023, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1022));
    float _1134 = fma(_1024, cbSceneParam._m0[7u].z, fma(_1023, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1022));
    uint _1148 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1154 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1148].x;
    float _1155 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1148].y;
    float _1156 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1148].z;
    float _4356 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _1160 = 1.0 - _1030;
    float _1161 = _1157 * _1160;
    float _1162 = _1158 * _1160;
    float _1163 = _1159 * _1160;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1030;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1030;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1030;
    float _1171 = _1168 + 0.039999999105930328369140625;
    float _1173 = _1169 + 0.039999999105930328369140625;
    float _1174 = _1170 + 0.039999999105930328369140625;
    vec4 _1183 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1109, cbSceneParam._m0[86u].y * _1110));
    float _1187 = ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * TEXCOORD_5.w) * _1183.x;
    float _1188 = dot(vec3(_1022, _1023, _1024), vec3(_1101, _1102, _1103));
    float _1191 = _1188 * 2.0;
    float _1195 = (_1191 * _1022) - _1101;
    float _1196 = (_1191 * _1023) - _1102;
    float _1197 = (_1191 * _1024) - _1103;
    float _1201 = abs(dot(vec3(_1101, _1102, _1103), vec3(_1022, _1023, _1024)));
    float _4389 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1203 = sqrt(_1025);
    float _1216 = exp2((_1203 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1203 * 3.0));
    float _1222 = (1.0 - _1216) * ((_1203 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1223 = _1216 * _1203;
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1560;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1285 = fma(_1259, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251));
        float _1289 = fma(_1259, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251));
        float _1293 = fma(_1259, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251));
        float _1318 = _1251 + _1022;
        float _1319 = _1255 + _1023;
        float _1320 = _1259 + _1024;
        float _1330 = fma(_1320, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1318)) - _1285;
        float _1331 = fma(_1320, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1318)) - _1289;
        float _1332 = fma(_1320, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1318)) - _1293;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1285 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1289 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[34u].z) + ((((((_1293 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1388 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1354.x + (-0.5));
        float _1390 = _1388 * (_1354.y + (-0.5));
        float _1391 = _1388 * (_1354.z + (-0.5));
        float _1398 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1361.x + (-0.5));
        float _1400 = _1398 * (_1361.y + (-0.5));
        float _1401 = _1398 * (_1361.z + (-0.5));
        float _1408 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1368.x + (-0.5));
        float _1410 = _1408 * (_1368.y + (-0.5));
        float _1411 = _1408 * (_1368.z + (-0.5));
        float _1418 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1375.x + (-0.5));
        float _1420 = _1418 * (_1375.y + (-0.5));
        float _1421 = _1418 * (_1375.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1442 = (dot(vec3(_1022, _1023, _1024), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1452 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4437 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1454 + 1.0))) + _1459) * _1422;
        float _1469 = _1390 * 0.5;
        float _1470 = _1400 * 0.5;
        float _1471 = _1410 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_1022, _1023, _1024), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4470 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1496 + 1.0))) + _1501) * _1423;
        float _1511 = _1391 * 0.5;
        float _1512 = _1401 * 0.5;
        float _1513 = _1411 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_1022, _1023, _1024), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4503 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1538 + 1.0))) + _1543) * _1424;
        _1560 = _1391;
        _1562 = _1390;
        _1563 = _1389;
        _1564 = _1401;
        _1565 = _1400;
        _1566 = _1399;
        _1567 = _1411;
        _1568 = _1410;
        _1569 = _1409;
        _1570 = _1424;
        _1571 = _1423;
        _1572 = _1422;
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1561;
        _1562 = _1561;
        _1563 = _1561;
        _1564 = _1561;
        _1565 = _1561;
        _1566 = _1561;
        _1567 = _1561;
        _1568 = _1561;
        _1569 = _1561;
        _1570 = _1561;
        _1571 = _1561;
        _1572 = _1561;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1599 = fma(_1259, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251));
        float _1603 = fma(_1259, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251));
        float _1607 = fma(_1259, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251));
        float _1630 = _1251 + _1022;
        float _1631 = _1255 + _1023;
        float _1632 = _1259 + _1024;
        float _1642 = fma(_1632, cbModelParam._m0[30u].z, fma(_1631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1630)) - _1599;
        float _1643 = fma(_1632, cbModelParam._m0[31u].z, fma(_1631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1630)) - _1603;
        float _1644 = fma(_1632, cbModelParam._m0[32u].z, fma(_1631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1630)) - _1607;
        float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
        float _1661 = ((_1648 * _1642) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1599 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1648 * _1643) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1603 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1648 * _1644) / cbModelParam._m0[35u].z) + ((((((_1607 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        float _1698 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1665.x + (-0.5));
        float _1700 = _1698 * (_1665.y + (-0.5));
        float _1701 = _1698 * (_1665.z + (-0.5));
        float _1708 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1672.x + (-0.5));
        float _1710 = _1708 * (_1672.y + (-0.5));
        float _1711 = _1708 * (_1672.z + (-0.5));
        float _1718 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1679.x + (-0.5));
        float _1720 = _1718 * (_1679.y + (-0.5));
        float _1721 = _1718 * (_1679.z + (-0.5));
        float _1728 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1686.x + (-0.5));
        float _1730 = _1728 * (_1686.y + (-0.5));
        float _1731 = _1728 * (_1686.z + (-0.5));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = _1699 * 0.5;
        float _1736 = _1709 * 0.5;
        float _1737 = _1719 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_1022, _1023, _1024), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4544 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4555 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4566 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_1762 + 1.0))) + _1767) * _1732;
        float _1777 = _1700 * 0.5;
        float _1778 = _1710 * 0.5;
        float _1779 = _1720 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1022, _1023, _1024), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4599 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1804 + 1.0))) + _1809) * _1733;
        float _1819 = _1701 * 0.5;
        float _1820 = _1711 * 0.5;
        float _1821 = _1721 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1022, _1023, _1024), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4632 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_1846 + 1.0))) + _1851) * _1734;
        _1868 = _1701;
        _1869 = _1700;
        _1870 = _1699;
        _1871 = _1711;
        _1872 = _1710;
        _1873 = _1709;
        _1874 = _1721;
        _1875 = _1720;
        _1876 = _1719;
        _1877 = _1734;
        _1878 = _1733;
        _1879 = _1732;
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
    }
    else
    {
        _1868 = _1561;
        _1869 = _1561;
        _1870 = _1561;
        _1871 = _1561;
        _1872 = _1561;
        _1873 = _1561;
        _1874 = _1561;
        _1875 = _1561;
        _1876 = _1561;
        _1877 = _1561;
        _1878 = _1561;
        _1879 = _1561;
        _1880 = 0.0;
        _1881 = 0.0;
        _1882 = 0.0;
    }
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1573)) + _1573;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1574)) + _1574;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1575)) + _1575;
    float _1915 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1892));
    float _1936 = _1195 * 0.5;
    float _1937 = _1196 * 0.5;
    float _1938 = _1197 * 0.5;
    float _1939 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1942 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1945 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1979;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1952 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1560, _1564, _1567, _1570));
        float _1956 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1960 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1967 = dot(vec4(cbModelParam._m0[39u]), vec4(_1936, _1937, _1938, 1.0));
        _1979 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1967) ? 0.0 : (isnan(0.0) ? _1967 : max(0.0, _1967))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1979 = 1.0;
    }
    float _1990;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1981 = dot(vec4(cbModelParam._m0[40u]), vec4(_1936, _1937, _1938, 1.0));
        _1990 = dot(vec3(isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1981) ? 0.0 : (isnan(0.0) ? _1981 : max(0.0, _1981))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1990 = 1.0;
    }
    float _1994 = (_1990 * cbModelParam._m0[1u].x) + (_1979 * (1.0 - cbModelParam._m0[1u].x));
    float _2004 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1025);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2004 : min(cbModelParam._m0[25u].z, _2004));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1259, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1259, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1259, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1197, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195));
        float _2067 = fma(_1197, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195));
        float _2070 = fma(_1197, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2098 = frontier_phi_14_12_ladder;
        }
        float _2270;
        if (_2067 > 0.0)
        {
            _2270 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2270 = frontier_phi_23_19_ladder;
        }
        float _2565;
        if (_2070 > 0.0)
        {
            _2565 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2565 = frontier_phi_35_30_ladder;
        }
        float _2567 = isnan(_2270) ? _2098 : (isnan(_2098) ? _2270 : min(_2098, _2270));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _2064) + _2053;
        float _2573 = (_2568 * _2067) + _2057;
        float _2574 = (_2568 * _2070) + _2061;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2575;
        float _2579 = _2575 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 > _2579) || ((_2573 < _2577) || ((_2572 < _2577) || (_2572 > _2579))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2574, cbModelParam._m0[9u].z, fma(_2573, cbModelParam._m0[9u].y, _2572 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2574, cbModelParam._m0[10u].z, fma(_2573, cbModelParam._m0[10u].y, _2572 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2574, cbModelParam._m0[11u].z, fma(_2573, cbModelParam._m0[11u].y, _2572 * cbModelParam._m0[11u].x))), _2005);
            frontier_phi_13_35_ladder = _2719.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2719.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2719.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_13_35_ladder_2;
        _2088 = frontier_phi_13_35_ladder_1;
        _2090 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1195, _1196, _1197), _2005);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1025);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2185;
    float _2187;
    float _2189;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2149 = fma(_1259, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251)) + cbModelParam._m0[21u].w;
        float _2153 = fma(_1259, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251)) + cbModelParam._m0[22u].w;
        float _2157 = fma(_1259, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251)) + cbModelParam._m0[23u].w;
        float _2160 = fma(_1197, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195));
        float _2163 = fma(_1197, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195));
        float _2166 = fma(_1197, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195));
        float _2275;
        if (_2160 > 0.0)
        {
            _2275 = abs((1.0 - _2149) / _2160);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2149 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2275 = frontier_phi_25_21_ladder;
        }
        float _2592;
        if (_2163 > 0.0)
        {
            _2592 = abs((1.0 - _2153) / _2163);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2153 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2592 = frontier_phi_37_32_ladder;
        }
        float _2930;
        if (_2166 > 0.0)
        {
            _2930 = abs((1.0 - _2157) / _2166);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2157 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2930 = frontier_phi_47_44_ladder;
        }
        float _2932 = isnan(_2592) ? _2275 : (isnan(_2275) ? _2592 : min(_2275, _2592));
        float _2933 = isnan(_2930) ? _2932 : (isnan(_2932) ? _2930 : min(_2932, _2930));
        float _2937 = (_2933 * _2160) + _2149;
        float _2938 = (_2933 * _2163) + _2153;
        float _2939 = (_2933 * _2166) + _2157;
        float _2940 = _2933 * 9.9999997473787516355514526367188e-05;
        float _2941 = (-1.0) - _2940;
        float _2943 = _2940 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2939 > _2943) || ((_2939 < _2941) || ((_2938 > _2943) || ((_2938 < _2941) || ((_2937 < _2941) || (_2937 > _2943))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2939, cbModelParam._m0[17u].z, fma(_2938, cbModelParam._m0[17u].y, _2937 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2939, cbModelParam._m0[18u].z, fma(_2938, cbModelParam._m0[18u].y, _2937 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2939, cbModelParam._m0[19u].z, fma(_2938, cbModelParam._m0[19u].y, _2937 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_22_47_ladder = _3061.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3061.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3061.x * cbModelParam._m0[1u].z;
        }
        _2185 = frontier_phi_22_47_ladder_2;
        _2187 = frontier_phi_22_47_ladder_1;
        _2189 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2169 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1195, _1196, _1197), _2095);
        _2185 = _2169.x * cbModelParam._m0[1u].z;
        _2187 = _2169.y * cbModelParam._m0[1u].z;
        _2189 = _2169.z * cbModelParam._m0[1u].z;
    }
    float _2202 = (((_1222 * _1171) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2185 - _2086)) + _2086);
    float _2204 = (((_1222 * _1173) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2187 - _2088)) + _2088);
    float _2206 = (((_1222 * _1174) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2189 - _2090)) + _2090);
    float _2209 = fma(_2206, cbSceneParam._m0[89u].z, fma(_2204, cbSceneParam._m0[89u].y, _2202 * cbSceneParam._m0[89u].x));
    float _2212 = fma(_2206, cbSceneParam._m0[90u].z, fma(_2204, cbSceneParam._m0[90u].y, _2202 * cbSceneParam._m0[90u].x));
    float _2215 = fma(_2206, cbSceneParam._m0[91u].z, fma(_2204, cbSceneParam._m0[91u].y, _2202 * cbSceneParam._m0[91u].x));
    float _2249 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2253 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2257 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2261 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2262 = _2249 / _2261;
    float _2263 = _2253 / _2261;
    float _2264 = _2257 / _2261;
    float _2411;
    float _2412;
    float _2413;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2291 = ((uint(_2264 > cbSceneParam._m0[59u].y) + uint(_2264 > cbSceneParam._m0[59u].x)) + uint(_2264 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2292 = _2291 + 43u;
        uint _2300 = _2291 + 44u;
        uint _2308 = _2291 + 45u;
        uint _2316 = _2291 + 46u;
        float _2327 = fma(_2261, cbSceneParam._m0[_2292].w, fma(_2257, cbSceneParam._m0[_2292].z, fma(_2253, cbSceneParam._m0[_2292].y, _2249 * cbSceneParam._m0[_2292].x)));
        float _2331 = fma(_2261, cbSceneParam._m0[_2300].w, fma(_2257, cbSceneParam._m0[_2300].z, fma(_2253, cbSceneParam._m0[_2300].y, _2249 * cbSceneParam._m0[_2300].x)));
        float _2339 = fma(_2261, cbSceneParam._m0[_2316].w, fma(_2257, cbSceneParam._m0[_2316].z, fma(_2253, cbSceneParam._m0[_2316].y, _2249 * cbSceneParam._m0[_2316].x)));
        float _2344 = cbSceneParam._m0[33u].z * _2339;
        float _2346 = cbSceneParam._m0[33u].w * _2339;
        float _2349 = fma(_2261, cbSceneParam._m0[_2308].w, fma(_2257, cbSceneParam._m0[_2308].z, fma(_2253, cbSceneParam._m0[_2308].y, _2249 * cbSceneParam._m0[_2308].x))) / _2339;
        float _2397 = (cbSceneParam._m0[33u].x - sqrt(((_2263 * _2263) + (_2262 * _2262)) + (_2264 * _2264))) * cbSceneParam._m0[33u].y;
        float _4758 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2404 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2344 + _2327) / _2339, (_2346 + _2331) / _2339), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2346 + _2327) / _2339, (_2331 - _2344) / _2339), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2327 - _2344) / _2339, (_2331 - _2346) / _2339), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2327 - _2346) / _2339, (_2344 + _2331) / _2339), _2349), 0.0)).x), vec4(0.25)));
        _2411 = 1.0 - (_2404 * cbSceneParam._m0[34u].x);
        _2412 = 1.0 - (_2404 * cbSceneParam._m0[34u].y);
        _2413 = 1.0 - (_2404 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2411 = 1.0;
        _2412 = 1.0;
        _2413 = 1.0;
    }
    float _2477;
    float _2479;
    float _2481;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2465 = fma(_2261, cbSceneParam._m0[63u].w, fma(_2257, cbSceneParam._m0[63u].z, fma(_2253, cbSceneParam._m0[63u].y, _2249 * cbSceneParam._m0[63u].x)));
        float _2466 = fma(_2261, cbSceneParam._m0[60u].w, fma(_2257, cbSceneParam._m0[60u].z, fma(_2253, cbSceneParam._m0[60u].y, _2249 * cbSceneParam._m0[60u].x))) / _2465;
        float _2467 = fma(_2261, cbSceneParam._m0[61u].w, fma(_2257, cbSceneParam._m0[61u].z, fma(_2253, cbSceneParam._m0[61u].y, _2249 * cbSceneParam._m0[61u].x))) / _2465;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2466 >= cbSceneParam._m0[64u].x) && (_2467 >= cbSceneParam._m0[64u].y)) && (_2466 <= cbSceneParam._m0[64u].z)) && (_2467 <= cbSceneParam._m0[64u].w))
        {
            float _2605 = fma(_2261, cbSceneParam._m0[62u].w, fma(_2257, cbSceneParam._m0[62u].z, fma(_2253, cbSceneParam._m0[62u].y, _2249 * cbSceneParam._m0[62u].x))) / _2465;
            float _2609 = isnan(cbSceneParam._m0[41u].w) ? _2605 : (isnan(_2605) ? cbSceneParam._m0[41u].w : max(_2605, cbSceneParam._m0[41u].w));
            float _2652 = (cbSceneParam._m0[33u].x - sqrt(((_2263 * _2263) + (_2262 * _2262)) + (_2264 * _2264))) * cbSceneParam._m0[33u].y;
            float _4774 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
            float _2659 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2466, cbSceneParam._m0[33u].w + _2467), _2609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2466, _2467 - cbSceneParam._m0[33u].z), _2609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2466 - cbSceneParam._m0[33u].z, _2467 - cbSceneParam._m0[33u].w), _2609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2466 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2467), _2609), 0.0)).x), vec4(0.25)));
            float _2663 = 1.0 - (_2659 * cbSceneParam._m0[34u].x);
            float _2664 = 1.0 - (_2659 * cbSceneParam._m0[34u].y);
            float _2665 = 1.0 - (_2659 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2665) ? _2413 : (isnan(_2413) ? _2665 : min(_2413, _2665));
            frontier_phi_34_33_ladder_1 = isnan(_2664) ? _2412 : (isnan(_2412) ? _2664 : min(_2412, _2664));
            frontier_phi_34_33_ladder_2 = isnan(_2663) ? _2411 : (isnan(_2411) ? _2663 : min(_2411, _2663));
        }
        else
        {
            frontier_phi_34_33_ladder = _2413;
            frontier_phi_34_33_ladder_1 = _2412;
            frontier_phi_34_33_ladder_2 = _2411;
        }
        _2477 = frontier_phi_34_33_ladder_2;
        _2479 = frontier_phi_34_33_ladder_1;
        _2481 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2477 = _2411;
        _2479 = _2412;
        _2481 = _2413;
    }
    uvec4 _2486 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2488 = _2486.x * 14u;
    uint _2489 = _2488 + 13u;
    float _2496 = _1187 + (-1.0);
    float _2501 = (cbLight._m0[_2489].x * _2496) + 1.0;
    float _2502 = (cbLight._m0[_2489].y * _2496) + 1.0;
    float _2503 = (cbLight._m0[_2489].z * _2496) + 1.0;
    float _2504 = (cbLight._m0[_2489].w * _2496) + 1.0;
    uint _2505 = _2488 + 5u;
    float _2511 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    uint _2515 = _2488 + 4u;
    float _2524 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
    uint _2528 = _2488 | 1u;
    float _2539 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_1022, _1023, _1024));
    float _2542 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_1022, _1023, _1024));
    float _4810 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _4821 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2547 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * 0.3183098733425140380859375;
    float _2549 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * 0.3183098733425140380859375;
    float _2556 = ((cbLight._m0[_2505].x * _2511) * _2549) + (((cbLight._m0[_2515].x * _2477) * _2524) * _2547);
    float _2557 = ((_2511 * cbLight._m0[_2505].y) * _2549) + (((cbLight._m0[_2515].y * _2479) * _2524) * _2547);
    float _2558 = ((_2511 * cbLight._m0[_2505].z) * _2549) + (((cbLight._m0[_2515].z * _2481) * _2524) * _2547);
    uvec4 _2562 = floatBitsToUint(cbLight._m0[_2488 + 12u]);
    bool _2564 = _2562.x == 0u;
    float _2666;
    float _2668;
    float _2670;
    if (_2564)
    {
        _2666 = _2556;
        _2668 = _2557;
        _2670 = _2558;
    }
    else
    {
        uint _2674 = _2488 + 6u;
        float _2690 = (dot(vec3(cbLight._m0[_2488 + 2u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2691 = _2690 * _2690;
        float _4832 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2692 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2693 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
        _2666 = (((cbLight._m0[_2674].x * 0.3183098733425140380859375) * _2692) * _2693) + _2556;
        _2668 = (((cbLight._m0[_2674].y * 0.3183098733425140380859375) * _2692) * _2693) + _2557;
        _2670 = (((cbLight._m0[_2674].z * 0.3183098733425140380859375) * _2692) * _2693) + _2558;
    }
    bool _2673 = _2562.y == 0u;
    float _2728;
    float _2730;
    float _2732;
    if (_2673)
    {
        _2728 = _2666;
        _2730 = _2668;
        _2732 = _2670;
    }
    else
    {
        uint _2901 = _2488 + 7u;
        float _2917 = (dot(vec3(cbLight._m0[_2488 + 3u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2918 = _2917 * _2917;
        float _4848 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2919 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2920 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2728 = (((cbLight._m0[_2901].x * 0.3183098733425140380859375) * _2919) * _2920) + _2666;
        _2730 = (((cbLight._m0[_2901].y * 0.3183098733425140380859375) * _2919) * _2920) + _2668;
        _2732 = (((cbLight._m0[_2901].z * 0.3183098733425140380859375) * _2919) * _2920) + _2670;
    }
    uint _2735 = _2488 + 8u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _1025) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2488].x + _1101;
    float _2751 = cbLight._m0[_2488].y + _1102;
    float _2752 = cbLight._m0[_2488].z + _1103;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2488].xyz));
    float _4864 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _4875 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _2764 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2765 = dot(vec3(_1022, _1023, _1024), vec3(_2757, _2758, _2759));
    float _4886 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2768 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _2769 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2757, _2758, _2759));
    float _4897 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2773 = _2749 * _2749;
    float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
    float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0);
    float _2786 = 0.959999978542327880859375 - _1168;
    float _2788 = 0.959999978542327880859375 - _1169;
    float _2789 = 0.959999978542327880859375 - _1170;
    float _2796 = 1.0 - _2749;
    float _2807 = (0.5 / (((_2764 * ((_2763 * _2796) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2796) + _2749) * _2763))) * _2763;
    float _4908 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2809 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
    uint _2823 = _2488 + 9u;
    float _2834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _1025) * 0.949999988079071044921875);
    float _2835 = _2834 * _2834;
    float _2836 = cbLight._m0[_2528].x + _1101;
    float _2837 = cbLight._m0[_2528].y + _1102;
    float _2838 = cbLight._m0[_2528].z + _1103;
    float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
    float _2843 = _2842 * _2836;
    float _2844 = _2842 * _2837;
    float _2845 = _2842 * _2838;
    float _2846 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2528].xyz));
    float _4919 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2849 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2850 = dot(vec3(_1022, _1023, _1024), vec3(_2843, _2844, _2845));
    float _4930 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
    float _2853 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
    float _2854 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2843, _2844, _2845));
    float _4941 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2858 = _2835 * _2835;
    float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
    float _2869 = exp2(log2(1.0 - (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) * 5.0);
    float _2876 = 1.0 - _2835;
    float _2886 = (0.5 / (((_2764 * ((_2849 * _2876) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2876) + _2835) * _2849))) * _2849;
    float _4952 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
    float _2888 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
    float _2898 = (((((_2869 * _2786) + _1171) * cbLight._m0[_2823].x) * _2888) * _2511) + ((((cbLight._m0[_2735].x * _2477) * ((_2785 * _2786) + _1171)) * _2809) * _2524);
    float _2899 = (((((_2869 * _2788) + _1173) * cbLight._m0[_2823].y) * _2888) * _2511) + ((((cbLight._m0[_2735].y * _2479) * ((_2785 * _2788) + _1173)) * _2809) * _2524);
    float _2900 = (((((_2869 * _2789) + _1174) * cbLight._m0[_2823].z) * _2888) * _2511) + ((((cbLight._m0[_2735].z * _2481) * ((_2785 * _2789) + _1174)) * _2809) * _2524);
    float _2956;
    float _2958;
    float _2960;
    if (_2564)
    {
        _2956 = _2898;
        _2958 = _2899;
        _2960 = _2900;
    }
    else
    {
        uint _2962 = _2488 + 2u;
        uint _2966 = _2488 + 10u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _1025) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _1101;
        float _2983 = cbLight._m0[_2962].y + _1102;
        float _2984 = cbLight._m0[_2962].z + _1103;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2962].xyz));
        float _4963 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _2996 = dot(vec3(_1022, _1023, _1024), vec3(_2989, _2990, _2991));
        float _4974 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4985 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3015 = exp2(log2(1.0 - (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) * 5.0);
        float _3022 = 1.0 - _2981;
        float _3032 = (0.5 / (((_2764 * ((_2995 * _3022) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _3022) + _2981) * _2995))) * _2995;
        float _4996 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3034 = (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3035 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
        _2956 = (((((_3015 * _2786) + _1171) * cbLight._m0[_2966].x) * _3034) * _3035) + _2898;
        _2958 = (((((_3015 * _2788) + _1173) * cbLight._m0[_2966].y) * _3034) * _3035) + _2899;
        _2960 = (((((_3015 * _2789) + _1174) * cbLight._m0[_2966].z) * _3034) * _3035) + _2900;
    }
    float _3066;
    float _3068;
    float _3070;
    if (_2673)
    {
        _3066 = _2956;
        _3068 = _2958;
        _3070 = _2960;
    }
    else
    {
        uint _3077 = _2488 + 3u;
        uint _3081 = _2488 + 11u;
        float _3095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3077].w)) * _1025) * 0.949999988079071044921875);
        float _3096 = _3095 * _3095;
        float _3097 = cbLight._m0[_3077].x + _1101;
        float _3098 = cbLight._m0[_3077].y + _1102;
        float _3099 = cbLight._m0[_3077].z + _1103;
        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
        float _3104 = _3103 * _3097;
        float _3105 = _3103 * _3098;
        float _3106 = _3103 * _3099;
        float _3107 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_3077].xyz));
        float _5012 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        float _3110 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
        float _3111 = dot(vec3(_1022, _1023, _1024), vec3(_3104, _3105, _3106));
        float _5023 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        float _3114 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
        float _3115 = dot(vec3(cbLight._m0[_3077].xyz), vec3(_3104, _3105, _3106));
        float _5034 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        float _3119 = _3096 * _3096;
        float _3123 = ((_3114 * _3114) * (_3119 + (-1.0))) + 1.0;
        float _3130 = exp2(log2(1.0 - (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) * 5.0);
        float _3137 = 1.0 - _3096;
        float _3147 = (0.5 / (((_2764 * ((_3110 * _3137) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _3137) + _3096) * _3110))) * _3110;
        float _5045 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        float _3149 = (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3119 / ((_3123 * _3123) * 3.141590118408203125));
        float _3150 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _3066 = (((((_3130 * _2786) + _1171) * cbLight._m0[_3081].x) * _3149) * _3150) + _2956;
        _3068 = (((((_3130 * _2788) + _1173) * cbLight._m0[_3081].y) * _3149) * _3150) + _2958;
        _3070 = (((((_3130 * _2789) + _1174) * cbLight._m0[_3081].z) * _3149) * _3150) + _2960;
    }
    float _3216;
    float _3218;
    float _3220;
    float _3222;
    float _3224;
    float _3226;
    if (_2486.y == 0u)
    {
        uvec4 _3171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3172 = _3171.x;
        uint _3183 = uint((float(_3171.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1110) / _3172))) + floor(float(uint(cbSceneParam._m0[85u].x * _1109) / _3172)));
        float _3193 = (log2(_2264 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3194 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
        uint _3197 = uint(isnan(14.0) ? _3194 : (isnan(_3194) ? 14.0 : min(_3194, 14.0)));
        uvec4 _3202 = texelFetch(g_lightClusterGridBuffer, int(((_3197 << 2u) + (_3183 << 6u)) >> 2u));
        uint _3203 = _3202.x;
        uint _3204 = _3171.z;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        if (((((1u << ((_3204 >> 4u) & 15u)) + 4294967295u) & _3203) == 0u) || ((_3204 & 240u) == 0u))
        {
            _3283 = 0.0;
            _3285 = 0.0;
            _3287 = 0.0;
            _3289 = 0.0;
            _3291 = 0.0;
            _3293 = 0.0;
        }
        else
        {
            float _3284;
            float _3286;
            float _3288;
            float _3290;
            float _3292;
            float _3294;
            float _3428 = 0.0;
            float _3429 = 0.0;
            float _3430 = 0.0;
            float _3431 = 0.0;
            float _3432 = 0.0;
            float _3433 = 0.0;
            uint _3434 = 0u;
            uint _3443;
            bool _3444;
            for (;;)
            {
                _3443 = texelFetch(g_lightClassification, int((((_3197 << 5u) + (_3183 << 9u)) + (_3434 << 2u)) >> 2u)).x;
                _3444 = _3443 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3444)
                {
                    frontier_phi_66_pred = _3433;
                    frontier_phi_66_pred_1 = _3432;
                    frontier_phi_66_pred_2 = _3431;
                    frontier_phi_66_pred_3 = _3430;
                    frontier_phi_66_pred_4 = _3429;
                    frontier_phi_66_pred_5 = _3428;
                }
                else
                {
                    float _3552;
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    uint _3558;
                    _3552 = _3428;
                    _3553 = _3429;
                    _3554 = _3430;
                    _3555 = _3431;
                    _3556 = _3432;
                    _3557 = _3433;
                    _3558 = _3443;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    for (;;)
                    {
                        uint _3562 = uint(findLSB(_3558)) + (_3434 << 5u);
                        uint _3559 = (_3558 + 4294967295u) & _3558;
                        uint _3564 = _3562 * 48u;
                        vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3564)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 3u)).x));
                        uint _3584 = (_3562 * 48u) + 4u;
                        vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3584)).x, texelFetch(g_PointLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3584 + 3u)).x));
                        uint _3603 = (_3562 * 48u) + 8u;
                        vec3 _3614 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3603)).x, texelFetch(g_PointLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3603 + 2u)).x));
                        float _3618 = _3578.x - _2262;
                        float _3619 = _3578.y - _2263;
                        float _3620 = _3578.z - _2264;
                        float _3621 = dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620));
                        float _3624 = inversesqrt(_3621);
                        float _3625 = _3624 * _3618;
                        float _3626 = _3624 * _3619;
                        float _3627 = _3624 * _3620;
                        float _3628 = dot(vec3(_1128, _1131, _1134), vec3(_3625, _3626, _3627));
                        float _3633 = 1.0 - (_3621 * _3578.w);
                        float _5071 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                        float _3634 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3635 = sqrt(_3621) * _3597.w;
                        float _3638 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                        float _3639 = _3638 * _3638;
                        float _3642 = ((1.0 - _3639) * _3628) + _3639;
                        float _3645 = _3635 * _3635;
                        float _3649 = ((isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0))) * _3634) / ((_3645 * 0.699999988079071044921875) + 1.0);
                        float _3653 = (-0.0) - _2262;
                        float _3654 = (-0.0) - _2263;
                        float _3655 = (-0.0) - _2264;
                        float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                        float _3660 = _3659 * _3653;
                        float _3661 = _3659 * _3654;
                        float _3662 = _3659 * _3655;
                        float _3669 = exp2(log2(1.0 / ((_3645 * 3.5) + 5.0)) * 0.25);
                        float _3670 = 1.0 - _1203;
                        float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                        float _3678 = _3677 * _3677;
                        float _3679 = _3678 * _3678;
                        float _3680 = _3660 + _3625;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                        float _3690 = dot(vec3(_1128, _1131, _1134), vec3(_3660, _3661, _3662));
                        float _5087 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3693 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3694 = dot(vec3(_1128, _1131, _1134), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                        float _5098 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3697 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                        float _3702 = _3638 * _3678;
                        float _3703 = _3702 * _3702;
                        float _3706 = ((1.0 - _3703) * _3628) + _3703;
                        float _5109 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3707 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                        float _3708 = 1.0 - _3678;
                        float _3718 = (0.5 / (((_3707 * ((_3693 * _3708) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3707 * _3708) + _3678) * _3693))) * _3707;
                        float _5120 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                        float _3729 = (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0)))) / ((_3701 * _3701) * ((_3645 * 2.1991131305694580078125) + 3.141590118408203125))) * _3634;
                        _3487 = (_3649 * _3597.x) + _3555;
                        _3488 = (_3649 * _3597.y) + _3556;
                        _3489 = (_3649 * _3597.z) + _3557;
                        _3484 = (_3729 * _3614.x) + _3552;
                        _3485 = (_3729 * _3614.y) + _3553;
                        _3486 = (_3729 * _3614.z) + _3554;
                        if (_3559 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3552 = _3484;
                            _3553 = _3485;
                            _3554 = _3486;
                            _3555 = _3487;
                            _3556 = _3488;
                            _3557 = _3489;
                            _3558 = _3559;
                        }
                    }
                    frontier_phi_66_pred = _3489;
                    frontier_phi_66_pred_1 = _3488;
                    frontier_phi_66_pred_2 = _3487;
                    frontier_phi_66_pred_3 = _3486;
                    frontier_phi_66_pred_4 = _3485;
                    frontier_phi_66_pred_5 = _3484;
                }
                _3294 = frontier_phi_66_pred;
                _3292 = frontier_phi_66_pred_1;
                _3290 = frontier_phi_66_pred_2;
                _3288 = frontier_phi_66_pred_3;
                _3286 = frontier_phi_66_pred_4;
                _3284 = frontier_phi_66_pred_5;
                uint _3435 = _3434 + 1u;
                if (_3435 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3428 = _3284;
                    _3429 = _3286;
                    _3430 = _3288;
                    _3431 = _3290;
                    _3432 = _3292;
                    _3433 = _3294;
                    _3434 = _3435;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3283 = _3284;
            _3285 = _3286;
            _3287 = _3288;
            _3289 = _3290;
            _3291 = _3292;
            _3293 = _3294;
        }
        uvec4 _3297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3298 = _3297.z;
        uint _3300 = (_3298 >> 8u) & 15u;
        float _3396;
        float _3398;
        float _3400;
        float _3402;
        float _3404;
        float _3406;
        if (((4294967295u << _3300) & _3203) == 0u)
        {
            _3396 = _3283;
            _3398 = _3285;
            _3400 = _3287;
            _3402 = _3289;
            _3404 = _3291;
            _3406 = _3293;
        }
        else
        {
            float _3421 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
            float _3422 = _3421 * _2262;
            float _3423 = _3421 * _2263;
            float _3424 = _3421 * _2264;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3300 < ((_3298 >> 12u) & 15u))
            {
                float _3397;
                float _3399;
                float _3401;
                float _3403;
                float _3405;
                float _3407;
                float _3535 = _3283;
                float _3536 = _3285;
                float _3537 = _3287;
                float _3538 = _3289;
                float _3539 = _3291;
                float _3540 = _3293;
                uint _3541 = _3300;
                uint _3550;
                bool _3551;
                for (;;)
                {
                    _3550 = texelFetch(g_lightClassification, int((((_3197 << 5u) + (_3183 << 9u)) + (_3541 << 2u)) >> 2u)).x;
                    _3551 = _3550 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3551)
                    {
                        frontier_phi_72_pred = _3540;
                        frontier_phi_72_pred_1 = _3539;
                        frontier_phi_72_pred_2 = _3538;
                        frontier_phi_72_pred_3 = _3537;
                        frontier_phi_72_pred_4 = _3536;
                        frontier_phi_72_pred_5 = _3535;
                    }
                    else
                    {
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _4031;
                        float _4032;
                        float _3747 = _3535;
                        float _3748 = _3536;
                        float _3749 = _3537;
                        float _3750 = _3538;
                        float _3751 = _3539;
                        float _3752 = _3540;
                        uint _3753 = _3550;
                        uint _3754;
                        vec4 _3779;
                        float _3780;
                        vec4 _3795;
                        vec3 _3807;
                        vec4 _3822;
                        vec4 _3837;
                        float _3883;
                        bool _3884;
                        for (;;)
                        {
                            uint _3764 = ((_3541 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3753));
                            _3754 = (_3753 + 4294967295u) & _3753;
                            uint _3766 = _3764 * 40u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            _3780 = _3779.w;
                            uint _3782 = (_3764 * 40u) + 4u;
                            _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3797 = (_3764 * 40u) + 8u;
                            _3807 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x));
                            uint _3809 = (_3764 * 40u) + 16u;
                            _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3824 = (_3764 * 40u) + 20u;
                            _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            uint _3839 = (_3764 * 40u) + 24u;
                            vec4 _3852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 3u)).x));
                            uint _3858 = (_3764 * 40u) + 28u;
                            vec4 _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            _3883 = fma(_2264, _3871.z, fma(_2263, _3871.y, _3871.x * _2262)) + _3871.w;
                            _3884 = !((fma(_2264, _3852.z, fma(_2263, _3852.y, _3852.x * _2262)) + _3852.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3884)
                            {
                                float _3911 = _3779.x - _2262;
                                float _3912 = _3779.y - _2263;
                                float _3913 = _3779.z - _2264;
                                float _3914 = dot(vec3(_3911, _3912, _3913), vec3(_3911, _3912, _3913));
                                float _3917 = inversesqrt(_3914);
                                float _3918 = _3917 * _3911;
                                float _3919 = _3917 * _3912;
                                float _3920 = _3917 * _3913;
                                float _3924 = 1.0 - (_3914 / (_3780 * _3780));
                                float _5131 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3925 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3929 = sqrt(_3914) * _3795.w;
                                float _3931 = 1.39999997615814208984375 / (_3929 + 1.39999997615814208984375);
                                float _3932 = _3931 * _3931;
                                float _3935 = ((1.0 - _3932) * dot(vec3(_3918, _3919, _3920), vec3(_1128, _1131, _1134))) + _3932;
                                float _3938 = _3929 * _3929;
                                float _3942 = (fma(_2264, _3822.z, fma(_2263, _3822.y, _3822.x * _2262)) + _3822.w) / _3883;
                                float _3943 = (fma(_2264, _3837.z, fma(_2263, _3837.y, _3837.x * _2262)) + _3837.w) / _3883;
                                float _3947 = 1.0 - dot(vec2(_3942, _3943), vec2(_3942, _3943));
                                float _5147 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3949 = _3948 * (((isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0))) * _3925) / ((_3938 * 0.699999988079071044921875) + 1.0));
                                float _3961 = exp2(log2(1.0 / ((_3938 * 3.5) + 5.0)) * 0.25);
                                float _3962 = 1.0 - _1203;
                                float _3969 = sqrt(1.0 - ((1.0 - (_3962 * _3962)) * (1.0 - (_3961 * _3961))));
                                float _3970 = _3969 * _3969;
                                float _3971 = _3970 * _3970;
                                float _3972 = _3918 - _3422;
                                float _3973 = _3919 - _3423;
                                float _3974 = _3920 - _3424;
                                float _3978 = inversesqrt(dot(vec3(_3972, _3973, _3974), vec3(_3972, _3973, _3974)));
                                float _3982 = dot(vec3(_1128, _1131, _1134), vec3((-0.0) - _3422, (-0.0) - _3423, (-0.0) - _3424));
                                float _5158 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3985 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3986 = dot(vec3(_1128, _1131, _1134), vec3(_3978 * _3972, _3978 * _3973, _3978 * _3974));
                                float _5169 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3989 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3993 = ((_3989 * _3989) * (_3971 + (-1.0))) + 1.0;
                                float _3994 = _3931 * _3970;
                                float _3995 = _3994 * _3994;
                                float _4001 = ((1.0 - _3995) * dot(vec3(_1128, _1131, _1134), vec3(_3918, _3919, _3920))) + _3995;
                                float _5180 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4002 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _4003 = 1.0 - _3970;
                                float _4013 = (0.5 / (((_4002 * ((_3985 * _4003) + _3970)) + 9.9999999392252902907785028219223e-09) + (((_4002 * _4003) + _3970) * _3985))) * _4002;
                                float _5191 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4023 = (_3948 * _3925) * (((_3971 * 3.1415927410125732421875) * (isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0)))) / ((_3993 * _3993) * ((_3938 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3949 * _3795.y;
                                frontier_phi_78_pred_1 = _3949 * _3795.x;
                                frontier_phi_78_pred_2 = _4023 * _3807.z;
                                frontier_phi_78_pred_3 = _4023 * _3807.y;
                                frontier_phi_78_pred_4 = _4023 * _3807.x;
                                frontier_phi_78_pred_5 = _3949 * _3795.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4031 = frontier_phi_78_pred;
                            _4030 = frontier_phi_78_pred_1;
                            _4029 = frontier_phi_78_pred_2;
                            _4028 = frontier_phi_78_pred_3;
                            _4027 = frontier_phi_78_pred_4;
                            _4032 = frontier_phi_78_pred_5;
                            _3737 = _4030 + _3750;
                            _3738 = _4031 + _3751;
                            _3739 = _4032 + _3752;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            if (_3754 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3738;
                                _3752 = _3739;
                                _3753 = _3754;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3739;
                        frontier_phi_72_pred_1 = _3738;
                        frontier_phi_72_pred_2 = _3737;
                        frontier_phi_72_pred_3 = _3736;
                        frontier_phi_72_pred_4 = _3735;
                        frontier_phi_72_pred_5 = _3734;
                    }
                    _3407 = frontier_phi_72_pred;
                    _3405 = frontier_phi_72_pred_1;
                    _3403 = frontier_phi_72_pred_2;
                    _3401 = frontier_phi_72_pred_3;
                    _3399 = frontier_phi_72_pred_4;
                    _3397 = frontier_phi_72_pred_5;
                    uint _3542 = _3541 + 1u;
                    if (_3542 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3535 = _3397;
                        _3536 = _3399;
                        _3537 = _3401;
                        _3538 = _3403;
                        _3539 = _3405;
                        _3540 = _3407;
                        _3541 = _3542;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3407;
                frontier_phi_60_61_ladder_1 = _3405;
                frontier_phi_60_61_ladder_2 = _3401;
                frontier_phi_60_61_ladder_3 = _3399;
                frontier_phi_60_61_ladder_4 = _3397;
                frontier_phi_60_61_ladder_5 = _3403;
            }
            else
            {
                frontier_phi_60_61_ladder = _3293;
                frontier_phi_60_61_ladder_1 = _3291;
                frontier_phi_60_61_ladder_2 = _3287;
                frontier_phi_60_61_ladder_3 = _3285;
                frontier_phi_60_61_ladder_4 = _3283;
                frontier_phi_60_61_ladder_5 = _3289;
            }
            _3396 = frontier_phi_60_61_ladder_4;
            _3398 = frontier_phi_60_61_ladder_3;
            _3400 = frontier_phi_60_61_ladder_2;
            _3402 = frontier_phi_60_61_ladder_5;
            _3404 = frontier_phi_60_61_ladder_1;
            _3406 = frontier_phi_60_61_ladder;
        }
        float _3411 = isnan(1.0) ? _1187 : (isnan(_1187) ? 1.0 : min(_1187, 1.0));
        _3216 = (_3411 * _3402) + _2728;
        _3218 = (_3411 * _3404) + _2730;
        _3220 = (_3411 * _3406) + _2732;
        _3222 = ((_3396 * _1171) * _3411) + _3066;
        _3224 = ((_3398 * _1173) * _3411) + _3068;
        _3226 = ((_3400 * _1174) * _3411) + _3070;
    }
    else
    {
        _3216 = _2728;
        _3218 = _2730;
        _3220 = _2732;
        _3222 = _3066;
        _3224 = _3068;
        _3226 = _3070;
    }
    float _5207 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _5218 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _5229 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    uint _3246 = _295 + 6u;
    float _3254 = _1109 / cbSceneParam._m0[86u].x;
    float _3255 = _1110 / cbSceneParam._m0[86u].y;
    vec4 _3269 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3254, _3255, (log2((isnan(cbSceneParam._m0[77u].w) ? _1044 : (isnan(_1044) ? cbSceneParam._m0[77u].w : min(_1044, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3271 = _3269.x;
    float _3272 = _3269.y;
    float _3273 = _3269.z;
    float _3274 = _3269.w;
    float _3346;
    float _3348;
    float _3350;
    float _3352;
    if (_1044 > cbSceneParam._m0[78u].w)
    {
        float _3308 = isnan(_1044) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1044 : min(cbSceneParam._m0[80u].w, _1044));
        float _3309 = _3308 / _1044;
        float _3320 = _3309 * _1094;
        float _3321 = _1095 * _3309;
        float _3322 = (-0.0) - _3321;
        float _3324 = _3309 * _1096;
        float _3326 = (cbSceneParam._m0[77u].w * _3322) / _3308;
        float _3327 = _3326 + cbSceneParam._m0[79u].w;
        float _3328 = cbSceneParam._m0[79u].w - _3321;
        float _3334 = sqrt(((_3320 * _3320) + (_3321 * _3321)) + (_3324 * _3324));
        float _3337 = (1.0 - (cbSceneParam._m0[77u].w / _3308)) * _3334;
        float _3342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3497;
        if (abs((_3322 - _3326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3497 = ((((_3327 > 0.0) ? exp2(_3342 * _3327) : (2.0 - exp2(_3344 * _3327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3337;
        }
        else
        {
            float _3457 = 1.0 / cbSceneParam._m0[80u].x;
            float _3458 = isnan(_3328) ? _3327 : (isnan(_3327) ? _3328 : max(_3327, _3328));
            float _3459 = isnan(_3328) ? _3327 : (isnan(_3327) ? _3328 : min(_3327, _3328));
            float _3468 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : min(_3458, 0.0));
            float _3469 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : min(_3459, 0.0));
            _3497 = ((abs(_3334 / _3322) * cbSceneParam._m0[80u].y) * ((((_3468 - _3469) * 2.0) - ((exp2(_3342 * (isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0)))) - exp2(_3342 * (isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))))) * _3457)) - ((exp2(_3344 * _3468) - exp2(_3344 * _3469)) * _3457))) + (_3337 * cbSceneParam._m0[80u].z);
        }
        vec4 _3499 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3254, _3255, 1.0), 0.0);
        float _3508 = exp2((_3497 * (-1.44269502162933349609375)) * (1.0 - _3499.w));
        float _3509 = log2(_3508);
        float _3525 = log2(_3274);
        _3346 = (exp2(_3525 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3509 * cbSceneParam._m0[78u].x)) * _3499.x) / cbSceneParam._m0[78u].x)) + _3271;
        _3348 = (exp2(_3525 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3509 * cbSceneParam._m0[78u].y)) * _3499.y) / cbSceneParam._m0[78u].y)) + _3272;
        _3350 = (exp2(_3525 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3509 * cbSceneParam._m0[78u].z)) * _3499.z) / cbSceneParam._m0[78u].z)) + _3273;
        _3352 = _3508 * _3274;
    }
    else
    {
        _3346 = _3271;
        _3348 = _3272;
        _3350 = _3273;
        _3352 = _3274;
    }
    float _3364 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3365 = _3364 == 3.0;
    float _3366 = log2(_3352);
    float _3373 = exp2(_3366 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3216 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1187))) + ((_3222 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3374 = exp2(_3366 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_3218 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1187))) + ((_3224 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3375 = exp2(_3366 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0))) * (_3220 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1187))) + ((_3226 + ((isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0))) * _1994)) * cbPerFrame._m0[3u].x));
    float _3384 = (_3364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3384 * (_3365 ? _3373 : (_3373 + (cbSceneParam._m0[72u].w * _3346)));
    SV_Target.y = _3384 * (_3365 ? _3374 : (_3374 + (cbSceneParam._m0[72u].w * _3348)));
    SV_Target.z = _3384 * (_3365 ? _3375 : (_3375 + (cbSceneParam._m0[72u].w * _3350)));
    SV_Target.w = cbInstanceData._m0[_3246].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3246].w;
}


