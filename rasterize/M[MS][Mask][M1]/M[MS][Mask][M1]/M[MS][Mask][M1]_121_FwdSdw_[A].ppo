#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _4158;
float _4159;
float _4160;
float _4161;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _346.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4170 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _346.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4181 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _547 = dot(vec4(_537, _535.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _559 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _346.z) * 2.0) - ((((_537 - _547) * cbMtdParam._m0[23u].w) + _547) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4192 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _567 = (_560 * ((_518.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _568 = (_560 * ((_518.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _569 = (_560 * ((_518.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _417) + _606;
    float _616 = ((_587.y - _607) * _417) + _607;
    float _617 = ((_587.z - _608) * _417) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _640 = ((_629.x - _615) * _490) + _615;
    float _641 = ((_629.y - _616) * _490) + _616;
    float _642 = ((_629.z - _617) * _490) + _617;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _667 = ((_654.z - _642) * _560) + _642;
    float _670 = ((((_654.x - _640) * _560) + _640) * 2.0) + (-1.0);
    float _672 = ((((_654.y - _641) * _560) + _641) * 2.0) + (-1.0);
    float _673 = dot(vec2(_670, _672), vec2(_670, _672));
    float _4203 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _704 = (((_692.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _705 = (((_692.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _672;
    float _708 = fma(_678, _246, fma(_705, _253, _704 * _239));
    float _711 = fma(_678, _247, fma(_705, _254, _704 * _240));
    float _714 = fma(_678, _248, fma(_705, _255, _704 * _241));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _747 = _745.x;
    float _748 = 1.0 - _747;
    float _756 = (cbMtdParam._m0[19u].x + dot(vec4(_718 * _708, _718 * _711, _718 * _714, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_747 - _748) * cbMtdParam._m0[24u].z) + _748) * cbMtdParam._m0[21u].z);
    float _4214 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _764 = (_757 * (cbMtdParam._m0[17u].x - _567)) + _567;
    float _765 = (_757 * (cbMtdParam._m0[17u].y - _568)) + _568;
    float _766 = (_757 * (cbMtdParam._m0[17u].z - _569)) + _569;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _794) * _417) + _794;
    float _829 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _812) * _490) + _812;
    float _847 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _829) * _560) + _829;
    float _851 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _847) * cbMtdParam._m0[19u].z) + _847;
    float _853 = _851 - (_851 * _757);
    float _857 = (cbMtdParam._m0[19u].w * (_692.z - _667)) + _667;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _4225 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = ((_870.z - _857) * _757) + _857;
    float _897 = ((sqrt(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) - _678) * _757) + _678;
    float _900 = (((_877 - _704) * _757) + _704) + (cbMtdParam._m0[21u].x * _704);
    float _901 = (((_878 - _705) * _757) + _705) + (cbMtdParam._m0[21u].x * _705);
    float _903 = cbMtdParam._m0[22u].x + _692.w;
    float _906 = fma(_897, _246, fma(_901, _253, _900 * _239));
    float _909 = fma(_897, _247, fma(_901, _254, _900 * _240));
    float _912 = fma(_897, _248, fma(_901, _255, _900 * _241));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4236 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _920 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4258 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4269 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4280 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4291 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _925 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    vec4 _1003 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1005 = _1003.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1177 = sqrt(((_989 * _989) + (_990 * _990)) + (_991 * _991));
        float _1183 = (cbMatDynParam._m0[5u].x * _1177) + cbMatDynParam._m0[5u].y;
        float _4302 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1188 = (cbMatDynParam._m0[5u].z * _1177) + cbMatDynParam._m0[5u].w;
        float _4313 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) - _1184)) + _1184) < ((_1005 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1016 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1017 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1035 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1038 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1041 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1054 = _258 + 9u;
    uint _1055 = _1054 + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _4324 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _1067 = 1.0 - _925;
    float _1068 = _1064 * _1067;
    float _1069 = _1065 * _1067;
    float _1070 = _1066 * _1067;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _925;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _925;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _925;
    float _1078 = _1075 + 0.039999999105930328369140625;
    float _1080 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1016, cbSceneParam._m0[86u].y * _1017));
    float _1094 = ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * TEXCOORD_5.w) * _1090.x;
    float _1095 = dot(vec3(_917, _918, _919), vec3(_996, _997, _998));
    float _1098 = _1095 * 2.0;
    float _1102 = (_1098 * _917) - _996;
    float _1103 = (_1098 * _918) - _997;
    float _1104 = (_1098 * _919) - _998;
    float _1108 = abs(dot(vec3(_996, _997, _998), vec3(_917, _918, _919)));
    float _4357 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1110 = sqrt(_920);
    float _1123 = exp2((_1110 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1110 * 3.0));
    float _1129 = (1.0 - _1123) * ((_1110 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1130 = _1123 * _1110;
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1166, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158));
        float _1225 = fma(_1166, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158));
        float _1229 = fma(_1166, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158));
        float _1254 = _1158 + _917;
        float _1255 = _1162 + _918;
        float _1256 = _1166 + _919;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_917, _918, _919), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4405 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_917, _918, _919), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4438 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_917, _918, _919), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4471 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1537 = fma(_1166, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158));
        float _1541 = fma(_1166, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158));
        float _1545 = fma(_1166, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158));
        float _1568 = _1158 + _917;
        float _1569 = _1162 + _918;
        float _1570 = _1166 + _919;
        float _1580 = fma(_1570, cbModelParam._m0[30u].z, fma(_1569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1568)) - _1537;
        float _1581 = fma(_1570, cbModelParam._m0[31u].z, fma(_1569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1568)) - _1541;
        float _1582 = fma(_1570, cbModelParam._m0[32u].z, fma(_1569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1568)) - _1545;
        float _1586 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
        float _1599 = ((_1586 * _1580) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1537 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1600 = ((_1586 * _1581) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1541 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1586 * _1582) / cbModelParam._m0[35u].z) + ((((((_1545 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1599, _1600, _1601), 0.0);
        float _1636 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1603.x + (-0.5));
        float _1638 = _1636 * (_1603.y + (-0.5));
        float _1639 = _1636 * (_1603.z + (-0.5));
        float _1646 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1610.x + (-0.5));
        float _1648 = _1646 * (_1610.y + (-0.5));
        float _1649 = _1646 * (_1610.z + (-0.5));
        float _1656 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1617.x + (-0.5));
        float _1658 = _1656 * (_1617.y + (-0.5));
        float _1659 = _1656 * (_1617.z + (-0.5));
        float _1666 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1624.x + (-0.5));
        float _1668 = _1666 * (_1624.y + (-0.5));
        float _1669 = _1666 * (_1624.z + (-0.5));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = _1637 * 0.5;
        float _1674 = _1647 * 0.5;
        float _1675 = _1657 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_917, _918, _919), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4534 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1700 + 1.0))) + _1705) * _1670;
        float _1715 = _1638 * 0.5;
        float _1716 = _1648 * 0.5;
        float _1717 = _1658 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_917, _918, _919), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4567 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1742 + 1.0))) + _1747) * _1671;
        float _1757 = _1639 * 0.5;
        float _1758 = _1649 * 0.5;
        float _1759 = _1659 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_917, _918, _919), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4600 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1784 + 1.0))) + _1789) * _1672;
        _1806 = _1639;
        _1807 = _1638;
        _1808 = _1637;
        _1809 = _1649;
        _1810 = _1648;
        _1811 = _1647;
        _1812 = _1659;
        _1813 = _1658;
        _1814 = _1657;
        _1815 = _1672;
        _1816 = _1671;
        _1817 = _1670;
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
    }
    else
    {
        _1806 = _1497;
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = 0.0;
        _1819 = 0.0;
        _1820 = 0.0;
    }
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1510)) + _1510;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1511)) + _1511;
    float _1853 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1830));
    float _1874 = _1102 * 0.5;
    float _1875 = _1103 * 0.5;
    float _1876 = _1104 * 0.5;
    float _1877 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1880 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1883 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1917;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1890 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1894 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1898 = dot(vec4(_1874, _1875, _1876, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1905 = dot(vec4(cbModelParam._m0[39u]), vec4(_1874, _1875, _1876, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1905) ? 0.0 : (isnan(0.0) ? _1905 : max(0.0, _1905))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1928;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1919 = dot(vec4(cbModelParam._m0[40u]), vec4(_1874, _1875, _1876, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1932 = (_1928 * cbModelParam._m0[1u].x) + (_1917 * (1.0 - cbModelParam._m0[1u].x));
    float _1942 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1942 : min(cbModelParam._m0[25u].z, _1942));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1990 = fma(_1166, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1158)) + cbModelParam._m0[13u].w;
        float _1994 = fma(_1166, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1158)) + cbModelParam._m0[14u].w;
        float _1998 = fma(_1166, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1158)) + cbModelParam._m0[15u].w;
        float _2001 = fma(_1104, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102));
        float _2004 = fma(_1104, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102));
        float _2007 = fma(_1104, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102));
        float _2035;
        if (_2001 > 0.0)
        {
            _2035 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2035 = frontier_phi_17_15_ladder;
        }
        float _2207;
        if (_2004 > 0.0)
        {
            _2207 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2207 = frontier_phi_26_22_ladder;
        }
        float _2502;
        if (_2007 > 0.0)
        {
            _2502 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2502 = frontier_phi_38_33_ladder;
        }
        float _2504 = isnan(_2207) ? _2035 : (isnan(_2035) ? _2207 : min(_2035, _2207));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _2001) + _1990;
        float _2510 = (_2505 * _2004) + _1994;
        float _2511 = (_2505 * _2007) + _1998;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2512;
        float _2516 = _2512 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 > _2516) || ((_2510 < _2514) || ((_2509 < _2514) || (_2509 > _2516))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2511, cbModelParam._m0[9u].z, fma(_2510, cbModelParam._m0[9u].y, _2509 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2511, cbModelParam._m0[10u].z, fma(_2510, cbModelParam._m0[10u].y, _2509 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2511, cbModelParam._m0[11u].z, fma(_2510, cbModelParam._m0[11u].y, _2509 * cbModelParam._m0[11u].x))), _1943);
            frontier_phi_16_38_ladder = _2656.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2656.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2656.x * cbModelParam._m0[1u].y;
        }
        _2023 = frontier_phi_16_38_ladder_2;
        _2025 = frontier_phi_16_38_ladder_1;
        _2027 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1102, _1103, _1104), _1943);
        _2023 = _2011.x * cbModelParam._m0[1u].y;
        _2025 = _2011.y * cbModelParam._m0[1u].y;
        _2027 = _2011.z * cbModelParam._m0[1u].y;
    }
    float _2031 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2032 = isnan(_2031) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2031 : min(cbModelParam._m0[25u].w, _2031));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2086 = fma(_1166, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1158)) + cbModelParam._m0[21u].w;
        float _2090 = fma(_1166, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1158)) + cbModelParam._m0[22u].w;
        float _2094 = fma(_1166, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1158)) + cbModelParam._m0[23u].w;
        float _2097 = fma(_1104, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102));
        float _2100 = fma(_1104, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102));
        float _2103 = fma(_1104, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102));
        float _2212;
        if (_2097 > 0.0)
        {
            _2212 = abs((1.0 - _2086) / _2097);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2086 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2212 = frontier_phi_28_24_ladder;
        }
        float _2529;
        if (_2100 > 0.0)
        {
            _2529 = abs((1.0 - _2090) / _2100);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2090 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2529 = frontier_phi_40_35_ladder;
        }
        float _2867;
        if (_2103 > 0.0)
        {
            _2867 = abs((1.0 - _2094) / _2103);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2094 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2867 = frontier_phi_50_47_ladder;
        }
        float _2869 = isnan(_2529) ? _2212 : (isnan(_2212) ? _2529 : min(_2212, _2529));
        float _2870 = isnan(_2867) ? _2869 : (isnan(_2869) ? _2867 : min(_2869, _2867));
        float _2874 = (_2870 * _2097) + _2086;
        float _2875 = (_2870 * _2100) + _2090;
        float _2876 = (_2870 * _2103) + _2094;
        float _2877 = _2870 * 9.9999997473787516355514526367188e-05;
        float _2878 = (-1.0) - _2877;
        float _2880 = _2877 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2876 > _2880) || ((_2876 < _2878) || ((_2875 > _2880) || ((_2875 < _2878) || ((_2874 < _2878) || (_2874 > _2880))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2876, cbModelParam._m0[17u].z, fma(_2875, cbModelParam._m0[17u].y, _2874 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2876, cbModelParam._m0[18u].z, fma(_2875, cbModelParam._m0[18u].y, _2874 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2876, cbModelParam._m0[19u].z, fma(_2875, cbModelParam._m0[19u].y, _2874 * cbModelParam._m0[19u].x))), _2032);
            frontier_phi_25_50_ladder = _2998.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2998.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2998.x * cbModelParam._m0[1u].z;
        }
        _2122 = frontier_phi_25_50_ladder_2;
        _2124 = frontier_phi_25_50_ladder_1;
        _2126 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1102, _1103, _1104), _2032);
        _2122 = _2106.x * cbModelParam._m0[1u].z;
        _2124 = _2106.y * cbModelParam._m0[1u].z;
        _2126 = _2106.z * cbModelParam._m0[1u].z;
    }
    float _2139 = (((_1129 * _1078) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2141 = (((_1129 * _1080) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2143 = (((_1129 * _1081) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2126 - _2027)) + _2027);
    float _2146 = fma(_2143, cbSceneParam._m0[89u].z, fma(_2141, cbSceneParam._m0[89u].y, _2139 * cbSceneParam._m0[89u].x));
    float _2149 = fma(_2143, cbSceneParam._m0[90u].z, fma(_2141, cbSceneParam._m0[90u].y, _2139 * cbSceneParam._m0[90u].x));
    float _2152 = fma(_2143, cbSceneParam._m0[91u].z, fma(_2141, cbSceneParam._m0[91u].y, _2139 * cbSceneParam._m0[91u].x));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2199 = _2186 / _2198;
    float _2200 = _2190 / _2198;
    float _2201 = _2194 / _2198;
    float _2348;
    float _2349;
    float _2350;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2228 = ((uint(_2201 > cbSceneParam._m0[59u].y) + uint(_2201 > cbSceneParam._m0[59u].x)) + uint(_2201 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2229 = _2228 + 43u;
        uint _2237 = _2228 + 44u;
        uint _2245 = _2228 + 45u;
        uint _2253 = _2228 + 46u;
        float _2264 = fma(_2198, cbSceneParam._m0[_2229].w, fma(_2194, cbSceneParam._m0[_2229].z, fma(_2190, cbSceneParam._m0[_2229].y, _2186 * cbSceneParam._m0[_2229].x)));
        float _2268 = fma(_2198, cbSceneParam._m0[_2237].w, fma(_2194, cbSceneParam._m0[_2237].z, fma(_2190, cbSceneParam._m0[_2237].y, _2186 * cbSceneParam._m0[_2237].x)));
        float _2276 = fma(_2198, cbSceneParam._m0[_2253].w, fma(_2194, cbSceneParam._m0[_2253].z, fma(_2190, cbSceneParam._m0[_2253].y, _2186 * cbSceneParam._m0[_2253].x)));
        float _2281 = cbSceneParam._m0[33u].z * _2276;
        float _2283 = cbSceneParam._m0[33u].w * _2276;
        float _2286 = fma(_2198, cbSceneParam._m0[_2245].w, fma(_2194, cbSceneParam._m0[_2245].z, fma(_2190, cbSceneParam._m0[_2245].y, _2186 * cbSceneParam._m0[_2245].x))) / _2276;
        float _2334 = (cbSceneParam._m0[33u].x - sqrt(((_2200 * _2200) + (_2199 * _2199)) + (_2201 * _2201))) * cbSceneParam._m0[33u].y;
        float _4726 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2341 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 + _2264) / _2276, (_2283 + _2268) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2283 + _2264) / _2276, (_2268 - _2281) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 - _2281) / _2276, (_2268 - _2283) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 - _2283) / _2276, (_2281 + _2268) / _2276), _2286), 0.0)).x), vec4(0.25)));
        _2348 = 1.0 - (_2341 * cbSceneParam._m0[34u].x);
        _2349 = 1.0 - (_2341 * cbSceneParam._m0[34u].y);
        _2350 = 1.0 - (_2341 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2348 = 1.0;
        _2349 = 1.0;
        _2350 = 1.0;
    }
    float _2414;
    float _2416;
    float _2418;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2402 = fma(_2198, cbSceneParam._m0[63u].w, fma(_2194, cbSceneParam._m0[63u].z, fma(_2190, cbSceneParam._m0[63u].y, _2186 * cbSceneParam._m0[63u].x)));
        float _2403 = fma(_2198, cbSceneParam._m0[60u].w, fma(_2194, cbSceneParam._m0[60u].z, fma(_2190, cbSceneParam._m0[60u].y, _2186 * cbSceneParam._m0[60u].x))) / _2402;
        float _2404 = fma(_2198, cbSceneParam._m0[61u].w, fma(_2194, cbSceneParam._m0[61u].z, fma(_2190, cbSceneParam._m0[61u].y, _2186 * cbSceneParam._m0[61u].x))) / _2402;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2403 >= cbSceneParam._m0[64u].x) && (_2404 >= cbSceneParam._m0[64u].y)) && (_2403 <= cbSceneParam._m0[64u].z)) && (_2404 <= cbSceneParam._m0[64u].w))
        {
            float _2542 = fma(_2198, cbSceneParam._m0[62u].w, fma(_2194, cbSceneParam._m0[62u].z, fma(_2190, cbSceneParam._m0[62u].y, _2186 * cbSceneParam._m0[62u].x))) / _2402;
            float _2546 = isnan(cbSceneParam._m0[41u].w) ? _2542 : (isnan(_2542) ? cbSceneParam._m0[41u].w : max(_2542, cbSceneParam._m0[41u].w));
            float _2589 = (cbSceneParam._m0[33u].x - sqrt(((_2200 * _2200) + (_2199 * _2199)) + (_2201 * _2201))) * cbSceneParam._m0[33u].y;
            float _4742 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
            float _2596 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2403, cbSceneParam._m0[33u].w + _2404), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2403, _2404 - cbSceneParam._m0[33u].z), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2403 - cbSceneParam._m0[33u].z, _2404 - cbSceneParam._m0[33u].w), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2403 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2404), _2546), 0.0)).x), vec4(0.25)));
            float _2600 = 1.0 - (_2596 * cbSceneParam._m0[34u].x);
            float _2601 = 1.0 - (_2596 * cbSceneParam._m0[34u].y);
            float _2602 = 1.0 - (_2596 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2602) ? _2350 : (isnan(_2350) ? _2602 : min(_2350, _2602));
            frontier_phi_37_36_ladder_1 = isnan(_2601) ? _2349 : (isnan(_2349) ? _2601 : min(_2349, _2601));
            frontier_phi_37_36_ladder_2 = isnan(_2600) ? _2348 : (isnan(_2348) ? _2600 : min(_2348, _2600));
        }
        else
        {
            frontier_phi_37_36_ladder = _2350;
            frontier_phi_37_36_ladder_1 = _2349;
            frontier_phi_37_36_ladder_2 = _2348;
        }
        _2414 = frontier_phi_37_36_ladder_2;
        _2416 = frontier_phi_37_36_ladder_1;
        _2418 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2414 = _2348;
        _2416 = _2349;
        _2418 = _2350;
    }
    uvec4 _2423 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2425 = _2423.x * 14u;
    uint _2426 = _2425 + 13u;
    float _2433 = _1094 + (-1.0);
    float _2438 = (cbLight._m0[_2426].x * _2433) + 1.0;
    float _2439 = (cbLight._m0[_2426].y * _2433) + 1.0;
    float _2440 = (cbLight._m0[_2426].z * _2433) + 1.0;
    float _2441 = (cbLight._m0[_2426].w * _2433) + 1.0;
    uint _2442 = _2425 + 5u;
    float _2448 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
    uint _2452 = _2425 + 4u;
    float _2461 = isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0));
    uint _2465 = _2425 | 1u;
    float _2476 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_917, _918, _919));
    float _2479 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_917, _918, _919));
    float _4778 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _4789 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2484 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * 0.3183098733425140380859375;
    float _2486 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * 0.3183098733425140380859375;
    float _2493 = ((cbLight._m0[_2442].x * _2448) * _2486) + (((cbLight._m0[_2452].x * _2414) * _2461) * _2484);
    float _2494 = ((_2448 * cbLight._m0[_2442].y) * _2486) + (((cbLight._m0[_2452].y * _2416) * _2461) * _2484);
    float _2495 = ((_2448 * cbLight._m0[_2442].z) * _2486) + (((cbLight._m0[_2452].z * _2418) * _2461) * _2484);
    uvec4 _2499 = floatBitsToUint(cbLight._m0[_2425 + 12u]);
    bool _2501 = _2499.x == 0u;
    float _2603;
    float _2605;
    float _2607;
    if (_2501)
    {
        _2603 = _2493;
        _2605 = _2494;
        _2607 = _2495;
    }
    else
    {
        uint _2611 = _2425 + 6u;
        float _2627 = (dot(vec3(cbLight._m0[_2425 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4800 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2630 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2603 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2493;
        _2605 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2494;
        _2607 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2495;
    }
    bool _2610 = _2499.y == 0u;
    float _2665;
    float _2667;
    float _2669;
    if (_2610)
    {
        _2665 = _2603;
        _2667 = _2605;
        _2669 = _2607;
    }
    else
    {
        uint _2838 = _2425 + 7u;
        float _2854 = (dot(vec3(cbLight._m0[_2425 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2855 = _2854 * _2854;
        float _4816 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2856 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2857 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _2665 = (((cbLight._m0[_2838].x * 0.3183098733425140380859375) * _2856) * _2857) + _2603;
        _2667 = (((cbLight._m0[_2838].y * 0.3183098733425140380859375) * _2856) * _2857) + _2605;
        _2669 = (((cbLight._m0[_2838].z * 0.3183098733425140380859375) * _2856) * _2857) + _2607;
    }
    uint _2672 = _2425 + 8u;
    float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _920) * 0.949999988079071044921875);
    float _2686 = _2685 * _2685;
    float _2687 = cbLight._m0[_2425].x + _996;
    float _2688 = cbLight._m0[_2425].y + _997;
    float _2689 = cbLight._m0[_2425].z + _998;
    float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
    float _2694 = _2693 * _2687;
    float _2695 = _2693 * _2688;
    float _2696 = _2693 * _2689;
    float _2697 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2425].xyz));
    float _4832 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _4843 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _2701 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _2702 = dot(vec3(_917, _918, _919), vec3(_2694, _2695, _2696));
    float _4854 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2694, _2695, _2696));
    float _4865 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2686 * _2686;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) * 5.0);
    float _2723 = 0.959999978542327880859375 - _1075;
    float _2725 = 0.959999978542327880859375 - _1076;
    float _2726 = 0.959999978542327880859375 - _1077;
    float _2733 = 1.0 - _2686;
    float _2744 = (0.5 / (((_2701 * ((_2700 * _2733) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2733) + _2686) * _2700))) * _2700;
    float _4876 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2746 = (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    uint _2760 = _2425 + 9u;
    float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _920) * 0.949999988079071044921875);
    float _2772 = _2771 * _2771;
    float _2773 = cbLight._m0[_2465].x + _996;
    float _2774 = cbLight._m0[_2465].y + _997;
    float _2775 = cbLight._m0[_2465].z + _998;
    float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
    float _2780 = _2779 * _2773;
    float _2781 = _2779 * _2774;
    float _2782 = _2779 * _2775;
    float _2783 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2465].xyz));
    float _4887 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2786 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2787 = dot(vec3(_917, _918, _919), vec3(_2780, _2781, _2782));
    float _4898 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2791 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2780, _2781, _2782));
    float _4909 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2795 = _2772 * _2772;
    float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
    float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0);
    float _2813 = 1.0 - _2772;
    float _2823 = (0.5 / (((_2701 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2813) + _2772) * _2786))) * _2786;
    float _4920 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2825 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
    float _2835 = (((((_2806 * _2723) + _1078) * cbLight._m0[_2760].x) * _2825) * _2448) + ((((cbLight._m0[_2672].x * _2414) * ((_2722 * _2723) + _1078)) * _2746) * _2461);
    float _2836 = (((((_2806 * _2725) + _1080) * cbLight._m0[_2760].y) * _2825) * _2448) + ((((cbLight._m0[_2672].y * _2416) * ((_2722 * _2725) + _1080)) * _2746) * _2461);
    float _2837 = (((((_2806 * _2726) + _1081) * cbLight._m0[_2760].z) * _2825) * _2448) + ((((cbLight._m0[_2672].z * _2418) * ((_2722 * _2726) + _1081)) * _2746) * _2461);
    float _2893;
    float _2895;
    float _2897;
    if (_2501)
    {
        _2893 = _2835;
        _2895 = _2836;
        _2897 = _2837;
    }
    else
    {
        uint _2899 = _2425 + 2u;
        uint _2903 = _2425 + 10u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _920) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _996;
        float _2920 = cbLight._m0[_2899].y + _997;
        float _2921 = cbLight._m0[_2899].z + _998;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2899].xyz));
        float _4931 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2933 = dot(vec3(_917, _918, _919), vec3(_2926, _2927, _2928));
        float _4942 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4953 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2701 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2959) + _2918) * _2932))) * _2932;
        float _4964 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2893 = (((((_2952 * _2723) + _1078) * cbLight._m0[_2903].x) * _2971) * _2972) + _2835;
        _2895 = (((((_2952 * _2725) + _1080) * cbLight._m0[_2903].y) * _2971) * _2972) + _2836;
        _2897 = (((((_2952 * _2726) + _1081) * cbLight._m0[_2903].z) * _2971) * _2972) + _2837;
    }
    float _3003;
    float _3005;
    float _3007;
    if (_2610)
    {
        _3003 = _2893;
        _3005 = _2895;
        _3007 = _2897;
    }
    else
    {
        uint _3014 = _2425 + 3u;
        uint _3018 = _2425 + 11u;
        float _3032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3014].w)) * _920) * 0.949999988079071044921875);
        float _3033 = _3032 * _3032;
        float _3034 = cbLight._m0[_3014].x + _996;
        float _3035 = cbLight._m0[_3014].y + _997;
        float _3036 = cbLight._m0[_3014].z + _998;
        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
        float _3041 = _3040 * _3034;
        float _3042 = _3040 * _3035;
        float _3043 = _3040 * _3036;
        float _3044 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_3014].xyz));
        float _4980 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _3048 = dot(vec3(_917, _918, _919), vec3(_3041, _3042, _3043));
        float _4991 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3051 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _3052 = dot(vec3(cbLight._m0[_3014].xyz), vec3(_3041, _3042, _3043));
        float _5002 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3056 = _3033 * _3033;
        float _3060 = ((_3051 * _3051) * (_3056 + (-1.0))) + 1.0;
        float _3067 = exp2(log2(1.0 - (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) * 5.0);
        float _3074 = 1.0 - _3033;
        float _3084 = (0.5 / (((_2701 * ((_3047 * _3074) + _3033)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _3074) + _3033) * _3047))) * _3047;
        float _5013 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        float _3086 = (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_3056 / ((_3060 * _3060) * 3.141590118408203125));
        float _3087 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _3003 = (((((_3067 * _2723) + _1078) * cbLight._m0[_3018].x) * _3086) * _3087) + _2893;
        _3005 = (((((_3067 * _2725) + _1080) * cbLight._m0[_3018].y) * _3086) * _3087) + _2895;
        _3007 = (((((_3067 * _2726) + _1081) * cbLight._m0[_3018].z) * _3086) * _3087) + _2897;
    }
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_2423.y == 0u)
    {
        uvec4 _3108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3109 = _3108.x;
        uint _3120 = uint((float(_3108.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1017) / _3109))) + floor(float(uint(cbSceneParam._m0[85u].x * _1016) / _3109)));
        float _3130 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3131 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        uint _3134 = uint(isnan(14.0) ? _3131 : (isnan(_3131) ? 14.0 : min(_3131, 14.0)));
        uvec4 _3139 = texelFetch(g_lightClusterGridBuffer, int(((_3134 << 2u) + (_3120 << 6u)) >> 2u));
        uint _3140 = _3139.x;
        uint _3141 = _3108.z;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((((1u << ((_3141 >> 4u) & 15u)) + 4294967295u) & _3140) == 0u) || ((_3141 & 240u) == 0u))
        {
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
        }
        else
        {
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            uint _3379 = 0u;
            uint _3388;
            bool _3389;
            for (;;)
            {
                _3388 = texelFetch(g_lightClassification, int((((_3134 << 5u) + (_3120 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                _3389 = _3388 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3389)
                {
                    frontier_phi_71_pred = _3378;
                    frontier_phi_71_pred_1 = _3377;
                    frontier_phi_71_pred_2 = _3376;
                    frontier_phi_71_pred_3 = _3375;
                    frontier_phi_71_pred_4 = _3374;
                    frontier_phi_71_pred_5 = _3373;
                }
                else
                {
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    uint _3524;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3388;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    for (;;)
                    {
                        uint _3528 = uint(findLSB(_3524)) + (_3379 << 5u);
                        uint _3525 = (_3524 + 4294967295u) & _3524;
                        uint _3530 = _3528 * 48u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 3u)).x));
                        uint _3550 = (_3528 * 48u) + 4u;
                        vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 3u)).x));
                        uint _3569 = (_3528 * 48u) + 8u;
                        vec3 _3580 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3569)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 2u)).x));
                        float _3584 = _3544.x - _2199;
                        float _3585 = _3544.y - _2200;
                        float _3586 = _3544.z - _2201;
                        float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                        float _3590 = inversesqrt(_3587);
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3594 = dot(vec3(_1035, _1038, _1041), vec3(_3591, _3592, _3593));
                        float _3599 = 1.0 - (_3587 * _3544.w);
                        float _5039 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3600 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3601 = sqrt(_3587) * _3563.w;
                        float _3604 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                        float _3605 = _3604 * _3604;
                        float _3608 = ((1.0 - _3605) * _3594) + _3605;
                        float _3611 = _3601 * _3601;
                        float _3615 = ((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3600) / ((_3611 * 0.699999988079071044921875) + 1.0);
                        float _3619 = (-0.0) - _2199;
                        float _3620 = (-0.0) - _2200;
                        float _3621 = (-0.0) - _2201;
                        float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3635 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                        float _3636 = 1.0 - _1110;
                        float _3643 = sqrt(1.0 - ((1.0 - (_3636 * _3636)) * (1.0 - (_3635 * _3635))));
                        float _3644 = _3643 * _3643;
                        float _3645 = _3644 * _3644;
                        float _3646 = _3626 + _3591;
                        float _3647 = _3627 + _3592;
                        float _3648 = _3628 + _3593;
                        float _3652 = inversesqrt(dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648)));
                        float _3656 = dot(vec3(_1035, _1038, _1041), vec3(_3626, _3627, _3628));
                        float _5055 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3659 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3660 = dot(vec3(_1035, _1038, _1041), vec3(_3652 * _3646, _3652 * _3647, _3652 * _3648));
                        float _5066 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3663 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3667 = ((_3663 * _3663) * (_3645 + (-1.0))) + 1.0;
                        float _3668 = _3604 * _3644;
                        float _3669 = _3668 * _3668;
                        float _3672 = ((1.0 - _3669) * _3594) + _3669;
                        float _5077 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3673 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3674 = 1.0 - _3644;
                        float _3684 = (0.5 / (((_3673 * ((_3659 * _3674) + _3644)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3644) * _3659))) * _3673;
                        float _5088 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3695 = (((_3645 * 3.1415927410125732421875) * (isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0)))) / ((_3667 * _3667) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125))) * _3600;
                        _3448 = (_3615 * _3563.x) + _3521;
                        _3449 = (_3615 * _3563.y) + _3522;
                        _3450 = (_3615 * _3563.z) + _3523;
                        _3445 = (_3695 * _3580.x) + _3518;
                        _3446 = (_3695 * _3580.y) + _3519;
                        _3447 = (_3695 * _3580.z) + _3520;
                        if (_3525 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3525;
                        }
                    }
                    frontier_phi_71_pred = _3450;
                    frontier_phi_71_pred_1 = _3449;
                    frontier_phi_71_pred_2 = _3448;
                    frontier_phi_71_pred_3 = _3447;
                    frontier_phi_71_pred_4 = _3446;
                    frontier_phi_71_pred_5 = _3445;
                }
                _3231 = frontier_phi_71_pred;
                _3229 = frontier_phi_71_pred_1;
                _3227 = frontier_phi_71_pred_2;
                _3225 = frontier_phi_71_pred_3;
                _3223 = frontier_phi_71_pred_4;
                _3221 = frontier_phi_71_pred_5;
                uint _3380 = _3379 + 1u;
                if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3373 = _3221;
                    _3374 = _3223;
                    _3375 = _3225;
                    _3376 = _3227;
                    _3377 = _3229;
                    _3378 = _3231;
                    _3379 = _3380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
        }
        uvec4 _3234 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3235 = _3234.z;
        uint _3237 = (_3235 >> 8u) & 15u;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        if (((4294967295u << _3237) & _3140) == 0u)
        {
            _3341 = _3220;
            _3343 = _3222;
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
        }
        else
        {
            float _3366 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _3367 = _3366 * _2199;
            float _3368 = _3366 * _2200;
            float _3369 = _3366 * _2201;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3237 < ((_3235 >> 12u) & 15u))
            {
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3501 = _3220;
                float _3502 = _3222;
                float _3503 = _3224;
                float _3504 = _3226;
                float _3505 = _3228;
                float _3506 = _3230;
                uint _3507 = _3237;
                uint _3516;
                bool _3517;
                for (;;)
                {
                    _3516 = texelFetch(g_lightClassification, int((((_3134 << 5u) + (_3120 << 9u)) + (_3507 << 2u)) >> 2u)).x;
                    _3517 = _3516 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3517)
                    {
                        frontier_phi_82_pred = _3506;
                        frontier_phi_82_pred_1 = _3505;
                        frontier_phi_82_pred_2 = _3504;
                        frontier_phi_82_pred_3 = _3503;
                        frontier_phi_82_pred_4 = _3502;
                        frontier_phi_82_pred_5 = _3501;
                    }
                    else
                    {
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _4007;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        uint _3728 = _3516;
                        uint _3729;
                        vec4 _3754;
                        float _3755;
                        vec4 _3770;
                        vec3 _3782;
                        vec4 _3797;
                        vec4 _3812;
                        float _3858;
                        bool _3859;
                        for (;;)
                        {
                            uint _3739 = ((_3507 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3728));
                            _3729 = (_3728 + 4294967295u) & _3728;
                            uint _3741 = _3739 * 40u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            _3755 = _3754.w;
                            uint _3757 = (_3739 * 40u) + 4u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3772 = (_3739 * 40u) + 8u;
                            _3782 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x));
                            uint _3784 = (_3739 * 40u) + 16u;
                            _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            uint _3799 = (_3739 * 40u) + 20u;
                            _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            uint _3814 = (_3739 * 40u) + 24u;
                            vec4 _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            uint _3833 = (_3739 * 40u) + 28u;
                            vec4 _3846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 3u)).x));
                            _3858 = fma(_2201, _3846.z, fma(_2200, _3846.y, _3846.x * _2199)) + _3846.w;
                            _3859 = !((fma(_2201, _3827.z, fma(_2200, _3827.y, _3827.x * _2199)) + _3827.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3859)
                            {
                                float _3886 = _3754.x - _2199;
                                float _3887 = _3754.y - _2200;
                                float _3888 = _3754.z - _2201;
                                float _3889 = dot(vec3(_3886, _3887, _3888), vec3(_3886, _3887, _3888));
                                float _3892 = inversesqrt(_3889);
                                float _3893 = _3892 * _3886;
                                float _3894 = _3892 * _3887;
                                float _3895 = _3892 * _3888;
                                float _3899 = 1.0 - (_3889 / (_3755 * _3755));
                                float _5099 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3900 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3904 = sqrt(_3889) * _3770.w;
                                float _3906 = 1.39999997615814208984375 / (_3904 + 1.39999997615814208984375);
                                float _3907 = _3906 * _3906;
                                float _3910 = ((1.0 - _3907) * dot(vec3(_3893, _3894, _3895), vec3(_1035, _1038, _1041))) + _3907;
                                float _3913 = _3904 * _3904;
                                float _3917 = (fma(_2201, _3797.z, fma(_2200, _3797.y, _3797.x * _2199)) + _3797.w) / _3858;
                                float _3918 = (fma(_2201, _3812.z, fma(_2200, _3812.y, _3812.x * _2199)) + _3812.w) / _3858;
                                float _3922 = 1.0 - dot(vec2(_3917, _3918), vec2(_3917, _3918));
                                float _5115 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3923 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3924 = _3923 * (((isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0))) * _3900) / ((_3913 * 0.699999988079071044921875) + 1.0));
                                float _3936 = exp2(log2(1.0 / ((_3913 * 3.5) + 5.0)) * 0.25);
                                float _3937 = 1.0 - _1110;
                                float _3944 = sqrt(1.0 - ((1.0 - (_3937 * _3937)) * (1.0 - (_3936 * _3936))));
                                float _3945 = _3944 * _3944;
                                float _3946 = _3945 * _3945;
                                float _3947 = _3893 - _3367;
                                float _3948 = _3894 - _3368;
                                float _3949 = _3895 - _3369;
                                float _3953 = inversesqrt(dot(vec3(_3947, _3948, _3949), vec3(_3947, _3948, _3949)));
                                float _3957 = dot(vec3(_1035, _1038, _1041), vec3((-0.0) - _3367, (-0.0) - _3368, (-0.0) - _3369));
                                float _5126 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3960 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3961 = dot(vec3(_1035, _1038, _1041), vec3(_3953 * _3947, _3953 * _3948, _3953 * _3949));
                                float _5137 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                                float _3964 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3968 = ((_3964 * _3964) * (_3946 + (-1.0))) + 1.0;
                                float _3969 = _3906 * _3945;
                                float _3970 = _3969 * _3969;
                                float _3976 = ((1.0 - _3970) * dot(vec3(_1035, _1038, _1041), vec3(_3893, _3894, _3895))) + _3970;
                                float _5148 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3977 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3978 = 1.0 - _3945;
                                float _3988 = (0.5 / (((_3977 * ((_3960 * _3978) + _3945)) + 9.9999999392252902907785028219223e-09) + (((_3977 * _3978) + _3945) * _3960))) * _3977;
                                float _5159 = isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0));
                                float _3998 = (_3923 * _3900) * (((_3946 * 3.1415927410125732421875) * (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0)))) / ((_3968 * _3968) * ((_3913 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3924 * _3770.z;
                                frontier_phi_88_pred_1 = _3924 * _3770.y;
                                frontier_phi_88_pred_2 = _3924 * _3770.x;
                                frontier_phi_88_pred_3 = _3998 * _3782.z;
                                frontier_phi_88_pred_4 = _3998 * _3782.y;
                                frontier_phi_88_pred_5 = _3998 * _3782.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4007 = frontier_phi_88_pred;
                            _4006 = frontier_phi_88_pred_1;
                            _4005 = frontier_phi_88_pred_2;
                            _4004 = frontier_phi_88_pred_3;
                            _4003 = frontier_phi_88_pred_4;
                            _4002 = frontier_phi_88_pred_5;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3714 = _4007 + _3727;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3711 = _4004 + _3724;
                            if (_3729 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3729;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3714;
                        frontier_phi_82_pred_1 = _3713;
                        frontier_phi_82_pred_2 = _3712;
                        frontier_phi_82_pred_3 = _3711;
                        frontier_phi_82_pred_4 = _3710;
                        frontier_phi_82_pred_5 = _3709;
                    }
                    _3352 = frontier_phi_82_pred;
                    _3350 = frontier_phi_82_pred_1;
                    _3348 = frontier_phi_82_pred_2;
                    _3346 = frontier_phi_82_pred_3;
                    _3344 = frontier_phi_82_pred_4;
                    _3342 = frontier_phi_82_pred_5;
                    uint _3508 = _3507 + 1u;
                    if (_3508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3501 = _3342;
                        _3502 = _3344;
                        _3503 = _3346;
                        _3504 = _3348;
                        _3505 = _3350;
                        _3506 = _3352;
                        _3507 = _3508;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3348;
                frontier_phi_63_64_ladder_1 = _3352;
                frontier_phi_63_64_ladder_2 = _3350;
                frontier_phi_63_64_ladder_3 = _3346;
                frontier_phi_63_64_ladder_4 = _3344;
                frontier_phi_63_64_ladder_5 = _3342;
            }
            else
            {
                frontier_phi_63_64_ladder = _3226;
                frontier_phi_63_64_ladder_1 = _3230;
                frontier_phi_63_64_ladder_2 = _3228;
                frontier_phi_63_64_ladder_3 = _3224;
                frontier_phi_63_64_ladder_4 = _3222;
                frontier_phi_63_64_ladder_5 = _3220;
            }
            _3341 = frontier_phi_63_64_ladder_5;
            _3343 = frontier_phi_63_64_ladder_4;
            _3345 = frontier_phi_63_64_ladder_3;
            _3347 = frontier_phi_63_64_ladder;
            _3349 = frontier_phi_63_64_ladder_2;
            _3351 = frontier_phi_63_64_ladder_1;
        }
        float _3356 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
        _3153 = (_3356 * _3347) + _2665;
        _3155 = (_3356 * _3349) + _2667;
        _3157 = (_3356 * _3351) + _2669;
        _3159 = ((_3341 * _1078) * _3356) + _3003;
        _3161 = ((_3343 * _1080) * _3356) + _3005;
        _3163 = ((_3345 * _1081) * _3356) + _3007;
    }
    else
    {
        _3153 = _2665;
        _3155 = _2667;
        _3157 = _2669;
        _3159 = _3003;
        _3161 = _3005;
        _3163 = _3007;
    }
    float _5175 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _5186 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _5197 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _3180 = ((isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0))) * (_3153 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1094))) + ((_3159 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    float _3181 = ((isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_3155 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1094))) + ((_3161 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    float _3182 = ((isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3157 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1094))) + ((_3163 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1932)) * cbPerFrame._m0[3u].x);
    uint _3183 = _258 + 6u;
    float _3191 = _1016 / cbSceneParam._m0[86u].x;
    float _3192 = _1017 / cbSceneParam._m0[86u].y;
    vec4 _3206 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3208 = _3206.x;
    float _3209 = _3206.y;
    float _3210 = _3206.z;
    float _3211 = _3206.w;
    float _3283;
    float _3285;
    float _3287;
    float _3289;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _3245 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _3246 = _3245 / _939;
        float _3257 = _3246 * _989;
        float _3258 = _990 * _3246;
        float _3259 = (-0.0) - _3258;
        float _3261 = _3246 * _991;
        float _3263 = (cbSceneParam._m0[77u].w * _3259) / _3245;
        float _3264 = _3263 + cbSceneParam._m0[79u].w;
        float _3265 = cbSceneParam._m0[79u].w - _3258;
        float _3271 = sqrt(((_3257 * _3257) + (_3258 * _3258)) + (_3261 * _3261));
        float _3274 = (1.0 - (cbSceneParam._m0[77u].w / _3245)) * _3271;
        float _3279 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3281 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3458;
        if (abs((_3259 - _3263) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3458 = ((((_3264 > 0.0) ? exp2(_3279 * _3264) : (2.0 - exp2(_3281 * _3264))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3274;
        }
        else
        {
            float _3402 = 1.0 / cbSceneParam._m0[80u].x;
            float _3403 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : max(_3264, _3265));
            float _3404 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : min(_3264, _3265));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            float _3414 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : min(_3404, 0.0));
            _3458 = ((abs(_3271 / _3259) * cbSceneParam._m0[80u].y) * ((((_3413 - _3414) * 2.0) - ((exp2(_3279 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0)))) - exp2(_3279 * (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))))) * _3402)) - ((exp2(_3281 * _3413) - exp2(_3281 * _3414)) * _3402))) + (_3274 * cbSceneParam._m0[80u].z);
        }
        vec4 _3460 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3191, _3192, 1.0), 0.0);
        float _3469 = exp2((_3458 * (-1.44269502162933349609375)) * (1.0 - _3460.w));
        float _3470 = log2(_3469);
        float _3486 = log2(_3211);
        _3283 = (exp2(_3486 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].x)) * _3460.x) / cbSceneParam._m0[78u].x)) + _3208;
        _3285 = (exp2(_3486 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].y)) * _3460.y) / cbSceneParam._m0[78u].y)) + _3209;
        _3287 = (exp2(_3486 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].z)) * _3460.z) / cbSceneParam._m0[78u].z)) + _3210;
        _3289 = _3469 * _3211;
    }
    else
    {
        _3283 = _3208;
        _3285 = _3209;
        _3287 = _3210;
        _3289 = _3211;
    }
    bool _3496;
    vec4 _3299;
    vec4 _3321;
    float _3323;
    float _3327;
    float _3328;
    float _3329;
    float _3330;
    bool _3340;
    for (;;)
    {
        _3299 = cbMatDynParam._m0[0u];
        float _3301 = roundEven(_3299.y);
        bool _3302 = _3301 == 3.0;
        float _3303 = log2(_3289);
        float _3310 = exp2(_3303 * cbSceneParam._m0[78u].x) * _3180;
        float _3311 = exp2(_3303 * cbSceneParam._m0[78u].y) * _3181;
        float _3312 = exp2(_3303 * cbSceneParam._m0[78u].z) * _3182;
        float _3319 = _1005 + (-0.5);
        _3321 = cbMtdParam._m0[1u];
        _3323 = _3321.y * _3319;
        float _3326 = (_3301 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3327 = _3326 * (_3302 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3283)));
        _3328 = _3326 * (_3302 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3285)));
        _3329 = _3326 * (_3302 ? _3312 : (_3312 + (cbSceneParam._m0[72u].w * _3287)));
        _3330 = _3319 * 0.999000012874603271484375;
        _3340 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3340)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3330) < 0.5)
            {
                _3496 = true;
                break;
            }
        }
        uint _3437 = _1054 + uint(_3299.w);
        if ((cbInstanceData._m0[_3437].w < 1.0) && ((cbInstanceData._m0[_3437].w + _3330) < 0.5))
        {
            _3496 = true;
            break;
        }
        if ((_3323 + 1.0) < _3321.x)
        {
            _3496 = true;
            break;
        }
        _3496 = false;
        break;
    }
    float _3700;
    if (_3496)
    {
        discard_state = true;
        _3700 = 0.0;
    }
    else
    {
        _3700 = cbInstanceData._m0[_3183].w;
    }
    SV_Target.x = _3327;
    SV_Target.y = _3328;
    SV_Target.z = _3329;
    SV_Target.w = _3700;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3183].w;
    discard_exit();
}


