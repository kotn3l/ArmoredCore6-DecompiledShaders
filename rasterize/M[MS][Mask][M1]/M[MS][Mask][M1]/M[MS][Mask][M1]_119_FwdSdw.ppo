#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1706;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4313 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4324 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4335 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4346 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4357 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4368 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    float _742 = ((_714.x - _733) * _497) + _733;
    float _743 = ((_714.y - _734) * _497) + _734;
    float _744 = ((_714.z - _735) * _497) + _735;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _767 = ((_756.x - _742) * _570) + _742;
    float _768 = ((_756.y - _743) * _570) + _743;
    float _769 = ((_756.z - _744) * _570) + _744;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _794 = ((_781.z - _769) * _640) + _769;
    float _797 = ((((_781.x - _767) * _640) + _767) * 2.0) + (-1.0);
    float _798 = ((((_781.y - _768) * _640) + _768) * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4379 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _804 = sqrt(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))));
    vec4 _818 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _845 = _843.x;
    float _846 = 1.0 - _845;
    float _854 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _857 = ((isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : min(_854, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _866 = (_857 - ((((((_845 - _846) * cbMtdParam._m0[24u].z) + _846) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _857))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4400 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _867 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _874 = (_867 * (cbMtdParam._m0[17u].x - _670)) + _670;
    float _875 = (_867 * (cbMtdParam._m0[17u].y - _672)) + _672;
    float _876 = (_867 * (cbMtdParam._m0[17u].z - _674)) + _674;
    float _891 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _892 = _891 * TEXCOORD.z;
    float _893 = _891 * TEXCOORD.w;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _892) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _893) + cbTextureTilingScale._m0[19u].w));
    float _907 = _905.x;
    float _908 = 1.0 - _907;
    float _933 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_907 - _908) * cbMtdParam._m0[24u].w) + _908) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4411 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _934 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _942 = ((((cbMtdParam._m0[10u].x - _874) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _934) + _874;
    float _943 = ((((cbMtdParam._m0[10u].y - _875) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _934) + _875;
    float _944 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _876)) * _934) + _876;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _972 = _970.x;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _972) * _497) + _972;
    float _1006 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _989) * _570) + _989;
    float _1023 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1006) * _640) + _1006;
    float _1027 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1023) * cbMtdParam._m0[19u].z) + _1023;
    float _1029 = _1027 - (_1027 * _867);
    float _1031 = _1029 - (_1029 * _934);
    float _1036 = (((_691.z - _794) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _794;
    float _1042 = ((_818.z - _1036) * cbMtdParam._m0[19u].w) + _1036;
    vec4 _1058 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1065 = (_1058.x * 2.0) + (-1.0);
    float _1066 = (_1058.y * 2.0) + (-1.0);
    float _1067 = dot(vec2(_1065, _1066), vec2(_1065, _1066));
    float _4422 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1075 = (_867 * (_1058.z - _1042)) + _1042;
    float _1078 = ((cbMtdParam._m0[23u].x - _1075) * _934) + _1075;
    vec4 _1101 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _892) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _893) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1107 = (_1101.x * 2.0) + (-1.0);
    float _1108 = (_1101.y * 2.0) + (-1.0);
    float _1109 = dot(vec2(_1107, _1108), vec2(_1107, _1108));
    float _4433 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1123 = (_797 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_691.x * 2.0) + (-1.0)))) + (((_818.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1124 = (_798 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_691.y * 2.0) + (-1.0)))) + (((_818.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1136 = (((_1065 - _1123) + (cbMtdParam._m0[21u].x * _1123)) * _867) + _1123;
    float _1137 = (((_1066 - _1124) + (cbMtdParam._m0[21u].x * _1124)) * _867) + _1124;
    float _1138 = (_867 * (sqrt(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) - _804)) + _804;
    float _1149 = (((_1107 - _1136) + (_1136 * cbMtdParam._m0[22u].z)) * _934) + _1136;
    float _1150 = (((_1108 - _1137) + (_1137 * cbMtdParam._m0[22u].z)) * _934) + _1137;
    float _1151 = ((sqrt(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) - _1138) * _934) + _1138;
    float _1153 = cbMtdParam._m0[22u].x + _818.w;
    float _1156 = fma(_1151, _271 * NORMAL.x, fma(_1150, _278 * TANGENT.x, (_264 * _256) * _1149));
    float _1159 = fma(_1151, _271 * NORMAL.y, fma(_1150, _278 * TANGENT.y, (_264 * _257) * _1149));
    float _1162 = fma(_1151, _271 * NORMAL.z, fma(_1150, _278 * TANGENT.z, (_264 * _258) * _1149));
    float _1166 = inversesqrt(dot(vec3(_1156, _1159, _1162), vec3(_1156, _1159, _1162)));
    float _1167 = _1166 * _1156;
    float _1168 = _1166 * _1159;
    float _1169 = _1166 * _1162;
    float _4444 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1170 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _4466 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4477 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4488 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4499 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1175 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _1189 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1239 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1229);
    float _1240 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1229);
    float _1241 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1229);
    float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
    float _1246 = _1239 * _1245;
    float _1247 = _1240 * _1245;
    float _1248 = _1241 * _1245;
    float _1254 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1255 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1273 = fma(_1169, cbSceneParam._m0[5u].z, fma(_1168, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1167));
    float _1276 = fma(_1169, cbSceneParam._m0[6u].z, fma(_1168, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1167));
    float _1279 = fma(_1169, cbSceneParam._m0[7u].z, fma(_1168, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1167));
    uint _1293 = (_303 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1299 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * cbInstanceData._m0[_1293].x;
    float _1300 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * cbInstanceData._m0[_1293].y;
    float _1301 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * cbInstanceData._m0[_1293].z;
    float _4510 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _1302 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1303 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _4532 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1304 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _1305 = 1.0 - _1175;
    float _1306 = _1302 * _1305;
    float _1307 = _1303 * _1305;
    float _1308 = _1304 * _1305;
    float _1313 = (_1302 + (-0.039999999105930328369140625)) * _1175;
    float _1314 = (_1303 + (-0.039999999105930328369140625)) * _1175;
    float _1315 = (_1304 + (-0.039999999105930328369140625)) * _1175;
    float _1316 = _1313 + 0.039999999105930328369140625;
    float _1318 = _1314 + 0.039999999105930328369140625;
    float _1319 = _1315 + 0.039999999105930328369140625;
    vec4 _1328 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1254, cbSceneParam._m0[86u].y * _1255));
    float _1332 = ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * TEXCOORD_5.w) * _1328.x;
    float _1333 = dot(vec3(_1167, _1168, _1169), vec3(_1246, _1247, _1248));
    float _1336 = _1333 * 2.0;
    float _1340 = (_1336 * _1167) - _1246;
    float _1341 = (_1336 * _1168) - _1247;
    float _1342 = (_1336 * _1169) - _1248;
    float _1346 = abs(dot(vec3(_1246, _1247, _1248), vec3(_1167, _1168, _1169)));
    float _4543 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1348 = sqrt(_1170);
    float _1361 = exp2((_1348 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1348 * 3.0));
    float _1367 = (1.0 - _1361) * ((_1348 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1368 = _1361 * _1348;
    float _1396 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1400 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1404 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1705;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1430 = fma(_1404, cbModelParam._m0[26u].z, fma(_1400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1396));
        float _1434 = fma(_1404, cbModelParam._m0[27u].z, fma(_1400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1396));
        float _1438 = fma(_1404, cbModelParam._m0[28u].z, fma(_1400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1396));
        float _1463 = _1396 + _1167;
        float _1464 = _1400 + _1168;
        float _1465 = _1404 + _1169;
        float _1475 = fma(_1465, cbModelParam._m0[26u].z, fma(_1464, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1463)) - _1430;
        float _1476 = fma(_1465, cbModelParam._m0[27u].z, fma(_1464, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1463)) - _1434;
        float _1477 = fma(_1465, cbModelParam._m0[28u].z, fma(_1464, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1463)) - _1438;
        float _1481 = inversesqrt(dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477)));
        float _1494 = ((_1481 * _1475) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1430 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1481 * _1476) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1434 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1481 * _1477) / cbModelParam._m0[34u].z) + ((((((_1438 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        float _1533 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1499.x + (-0.5));
        float _1535 = _1533 * (_1499.y + (-0.5));
        float _1536 = _1533 * (_1499.z + (-0.5));
        float _1543 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1506.x + (-0.5));
        float _1545 = _1543 * (_1506.y + (-0.5));
        float _1546 = _1543 * (_1506.z + (-0.5));
        float _1553 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1513.x + (-0.5));
        float _1555 = _1553 * (_1513.y + (-0.5));
        float _1556 = _1553 * (_1513.z + (-0.5));
        float _1563 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1520.x + (-0.5));
        float _1565 = _1563 * (_1520.y + (-0.5));
        float _1566 = _1563 * (_1520.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1587 = (dot(vec3(_1167, _1168, _1169), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1597 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4591 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1599 + 1.0))) + _1604) * _1567;
        float _1614 = _1535 * 0.5;
        float _1615 = _1545 * 0.5;
        float _1616 = _1555 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_1167, _1168, _1169), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4624 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1641 + 1.0))) + _1646) * _1568;
        float _1656 = _1536 * 0.5;
        float _1657 = _1546 * 0.5;
        float _1658 = _1556 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_1167, _1168, _1169), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4657 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_1683 + 1.0))) + _1688) * _1569;
        _1705 = _1536;
        _1707 = _1535;
        _1708 = _1534;
        _1709 = _1546;
        _1710 = _1545;
        _1711 = _1544;
        _1712 = _1556;
        _1713 = _1555;
        _1714 = _1554;
        _1715 = _1569;
        _1716 = _1568;
        _1717 = _1567;
        _1718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1719 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1706;
        _1707 = _1706;
        _1708 = _1706;
        _1709 = _1706;
        _1710 = _1706;
        _1711 = _1706;
        _1712 = _1706;
        _1713 = _1706;
        _1714 = _1706;
        _1715 = _1706;
        _1716 = _1706;
        _1717 = _1706;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1743 = fma(_1404, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396));
        float _1747 = fma(_1404, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396));
        float _1751 = fma(_1404, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396));
        float _1774 = _1396 + _1167;
        float _1775 = _1400 + _1168;
        float _1776 = _1404 + _1169;
        float _1786 = fma(_1776, cbModelParam._m0[30u].z, fma(_1775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1774)) - _1743;
        float _1787 = fma(_1776, cbModelParam._m0[31u].z, fma(_1775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1774)) - _1747;
        float _1788 = fma(_1776, cbModelParam._m0[32u].z, fma(_1775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1774)) - _1751;
        float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
        float _1805 = ((_1792 * _1786) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1743 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1806 = ((_1792 * _1787) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1747 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1807 = ((_1792 * _1788) / cbModelParam._m0[35u].z) + ((((((_1751 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1809 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1816 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1823 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1830 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        float _1842 = exp2((_1809.w + (-0.5)) * 20.0) * 2.0;
        float _1843 = _1842 * (_1809.x + (-0.5));
        float _1844 = _1842 * (_1809.y + (-0.5));
        float _1845 = _1842 * (_1809.z + (-0.5));
        float _1852 = exp2((_1816.w + (-0.5)) * 20.0) * 2.0;
        float _1853 = _1852 * (_1816.x + (-0.5));
        float _1854 = _1852 * (_1816.y + (-0.5));
        float _1855 = _1852 * (_1816.z + (-0.5));
        float _1862 = exp2((_1823.w + (-0.5)) * 20.0) * 2.0;
        float _1863 = _1862 * (_1823.x + (-0.5));
        float _1864 = _1862 * (_1823.y + (-0.5));
        float _1865 = _1862 * (_1823.z + (-0.5));
        float _1872 = exp2((_1830.w + (-0.5)) * 20.0) * 2.0;
        float _1873 = _1872 * (_1830.x + (-0.5));
        float _1874 = _1872 * (_1830.y + (-0.5));
        float _1875 = _1872 * (_1830.z + (-0.5));
        float _1876 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1877 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1878 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1879 = _1843 * 0.5;
        float _1880 = _1853 * 0.5;
        float _1881 = _1863 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1167, _1168, _1169), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _4698 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1876 + 9.9999997473787516355514526367188e-06);
        float _4709 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _4720 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_1906 + 1.0))) + _1911) * _1876;
        float _1921 = _1844 * 0.5;
        float _1922 = _1854 * 0.5;
        float _1923 = _1864 * 0.5;
        float _1924 = dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923));
        float _1929 = (_1924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1924);
        float _1937 = (dot(vec3(_1167, _1168, _1169), vec3(_1929 * _1921, _1929 * _1922, _1929 * _1923)) + 1.0) * 0.5;
        float _4731 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1946 = sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923)) / (_1877 + 9.9999997473787516355514526367188e-06);
        float _4742 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _1948 = _1947 * 2.0;
        float _1952 = (1.0 - _1947) / (_1947 + 1.0);
        float _4753 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _1962 = ((((1.0 - _1953) * (_1948 + 2.0)) * exp2(log2(isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_1948 + 1.0))) + _1953) * _1877;
        float _1963 = _1845 * 0.5;
        float _1964 = _1855 * 0.5;
        float _1965 = _1865 * 0.5;
        float _1966 = dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965));
        float _1971 = (_1966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1966);
        float _1979 = (dot(vec3(_1167, _1168, _1169), vec3(_1971 * _1963, _1971 * _1964, _1971 * _1965)) + 1.0) * 0.5;
        float _4764 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1988 = sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965)) / (_1878 + 9.9999997473787516355514526367188e-06);
        float _4775 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _1990 = _1989 * 2.0;
        float _1994 = (1.0 - _1989) / (_1989 + 1.0);
        float _4786 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1995 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2004 = ((((1.0 - _1995) * (_1990 + 2.0)) * exp2(log2(isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_1990 + 1.0))) + _1995) * _1878;
        _2012 = _1845;
        _2013 = _1844;
        _2014 = _1843;
        _2015 = _1855;
        _2016 = _1854;
        _2017 = _1853;
        _2018 = _1865;
        _2019 = _1864;
        _2020 = _1863;
        _2021 = _1878;
        _2022 = _1877;
        _2023 = _1876;
        _2024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
        _2025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)));
        _2026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    }
    else
    {
        _2012 = _1706;
        _2013 = _1706;
        _2014 = _1706;
        _2015 = _1706;
        _2016 = _1706;
        _2017 = _1706;
        _2018 = _1706;
        _2019 = _1706;
        _2020 = _1706;
        _2021 = _1706;
        _2022 = _1706;
        _2023 = _1706;
        _2024 = 0.0;
        _2025 = 0.0;
        _2026 = 0.0;
    }
    float _2036 = (cbModelParam._m0[1u].x * (_2024 - _1718)) + _1718;
    float _2037 = (cbModelParam._m0[1u].x * (_2025 - _1719)) + _1719;
    float _2038 = (cbModelParam._m0[1u].x * (_2026 - _1720)) + _1720;
    float _2059 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2036));
    float _2080 = _1340 * 0.5;
    float _2081 = _1341 * 0.5;
    float _2082 = _1342 * 0.5;
    float _2083 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2014, _2017, _2020, _2023));
    float _2086 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2013, _2016, _2019, _2022));
    float _2089 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2012, _2015, _2018, _2021));
    float _2123;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2096 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1705, _1709, _1712, _1715));
        float _2100 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1707, _1710, _1713, _1716));
        float _2104 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1708, _1711, _1714, _1717));
        float _2111 = dot(vec4(cbModelParam._m0[39u]), vec4(_2080, _2081, _2082, 1.0));
        _2123 = dot(vec3(isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)), isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2111) ? 0.0 : (isnan(0.0) ? _2111 : max(0.0, _2111))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2123 = 1.0;
    }
    float _2134;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2125 = dot(vec4(cbModelParam._m0[40u]), vec4(_2080, _2081, _2082, 1.0));
        _2134 = dot(vec3(isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0)), isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0)), isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2125) ? 0.0 : (isnan(0.0) ? _2125 : max(0.0, _2125))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2134 = 1.0;
    }
    float _2138 = (_2134 * cbModelParam._m0[1u].x) + (_2123 * (1.0 - cbModelParam._m0[1u].x));
    float _2148 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1170);
    float _2149 = isnan(_2148) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2148 : min(cbModelParam._m0[25u].z, _2148));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2196 = fma(_1404, cbModelParam._m0[13u].z, fma(_1400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1396)) + cbModelParam._m0[13u].w;
        float _2200 = fma(_1404, cbModelParam._m0[14u].z, fma(_1400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1396)) + cbModelParam._m0[14u].w;
        float _2204 = fma(_1404, cbModelParam._m0[15u].z, fma(_1400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1396)) + cbModelParam._m0[15u].w;
        float _2207 = fma(_1342, cbModelParam._m0[13u].z, fma(_1341, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1340));
        float _2210 = fma(_1342, cbModelParam._m0[14u].z, fma(_1341, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1340));
        float _2213 = fma(_1342, cbModelParam._m0[15u].z, fma(_1341, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1340));
        float _2241;
        if (_2207 > 0.0)
        {
            _2241 = abs((1.0 - _2196) / _2207);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2196 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2241 = frontier_phi_14_12_ladder;
        }
        float _2413;
        if (_2210 > 0.0)
        {
            _2413 = abs((1.0 - _2200) / _2210);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2200 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2413 = frontier_phi_23_19_ladder;
        }
        float _2708;
        if (_2213 > 0.0)
        {
            _2708 = abs((1.0 - _2204) / _2213);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2204 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2708 = frontier_phi_35_30_ladder;
        }
        float _2710 = isnan(_2413) ? _2241 : (isnan(_2241) ? _2413 : min(_2241, _2413));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _2207) + _2196;
        float _2716 = (_2711 * _2210) + _2200;
        float _2717 = (_2711 * _2213) + _2204;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2718;
        float _2722 = _2718 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 > _2722) || ((_2716 < _2720) || ((_2715 < _2720) || (_2715 > _2722))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2717, cbModelParam._m0[9u].z, fma(_2716, cbModelParam._m0[9u].y, _2715 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2717, cbModelParam._m0[10u].z, fma(_2716, cbModelParam._m0[10u].y, _2715 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2717, cbModelParam._m0[11u].z, fma(_2716, cbModelParam._m0[11u].y, _2715 * cbModelParam._m0[11u].x))), _2149);
            frontier_phi_13_35_ladder = _2862.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2862.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2862.x * cbModelParam._m0[1u].y;
        }
        _2229 = frontier_phi_13_35_ladder_2;
        _2231 = frontier_phi_13_35_ladder_1;
        _2233 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1340, _1341, _1342), _2149);
        _2229 = _2217.x * cbModelParam._m0[1u].y;
        _2231 = _2217.y * cbModelParam._m0[1u].y;
        _2233 = _2217.z * cbModelParam._m0[1u].y;
    }
    float _2237 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1170);
    float _2238 = isnan(_2237) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2237 : min(cbModelParam._m0[25u].w, _2237));
    float _2328;
    float _2330;
    float _2332;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2292 = fma(_1404, cbModelParam._m0[21u].z, fma(_1400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1396)) + cbModelParam._m0[21u].w;
        float _2296 = fma(_1404, cbModelParam._m0[22u].z, fma(_1400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1396)) + cbModelParam._m0[22u].w;
        float _2300 = fma(_1404, cbModelParam._m0[23u].z, fma(_1400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1396)) + cbModelParam._m0[23u].w;
        float _2303 = fma(_1342, cbModelParam._m0[21u].z, fma(_1341, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1340));
        float _2306 = fma(_1342, cbModelParam._m0[22u].z, fma(_1341, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1340));
        float _2309 = fma(_1342, cbModelParam._m0[23u].z, fma(_1341, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1340));
        float _2418;
        if (_2303 > 0.0)
        {
            _2418 = abs((1.0 - _2292) / _2303);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2303 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2292 + 1.0) / _2303);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2418 = frontier_phi_25_21_ladder;
        }
        float _2735;
        if (_2306 > 0.0)
        {
            _2735 = abs((1.0 - _2296) / _2306);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2306 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2296 + 1.0) / _2306);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2735 = frontier_phi_37_32_ladder;
        }
        float _3073;
        if (_2309 > 0.0)
        {
            _3073 = abs((1.0 - _2300) / _2309);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2309 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2300 + 1.0) / _2309);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3073 = frontier_phi_47_44_ladder;
        }
        float _3075 = isnan(_2735) ? _2418 : (isnan(_2418) ? _2735 : min(_2418, _2735));
        float _3076 = isnan(_3073) ? _3075 : (isnan(_3075) ? _3073 : min(_3075, _3073));
        float _3080 = (_3076 * _2303) + _2292;
        float _3081 = (_3076 * _2306) + _2296;
        float _3082 = (_3076 * _2309) + _2300;
        float _3083 = _3076 * 9.9999997473787516355514526367188e-05;
        float _3084 = (-1.0) - _3083;
        float _3086 = _3083 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3082 > _3086) || ((_3082 < _3084) || ((_3081 > _3086) || ((_3081 < _3084) || ((_3080 < _3084) || (_3080 > _3086))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3082, cbModelParam._m0[17u].z, fma(_3081, cbModelParam._m0[17u].y, _3080 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3082, cbModelParam._m0[18u].z, fma(_3081, cbModelParam._m0[18u].y, _3080 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3082, cbModelParam._m0[19u].z, fma(_3081, cbModelParam._m0[19u].y, _3080 * cbModelParam._m0[19u].x))), _2238);
            frontier_phi_22_47_ladder = _3204.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3204.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3204.x * cbModelParam._m0[1u].z;
        }
        _2328 = frontier_phi_22_47_ladder_2;
        _2330 = frontier_phi_22_47_ladder_1;
        _2332 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2312 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1340, _1341, _1342), _2238);
        _2328 = _2312.x * cbModelParam._m0[1u].z;
        _2330 = _2312.y * cbModelParam._m0[1u].z;
        _2332 = _2312.z * cbModelParam._m0[1u].z;
    }
    float _2345 = (((_1367 * _1316) + _1368) * _1332) * ((cbModelParam._m0[1u].w * (_2328 - _2229)) + _2229);
    float _2347 = (((_1367 * _1318) + _1368) * _1332) * ((cbModelParam._m0[1u].w * (_2330 - _2231)) + _2231);
    float _2349 = (((_1367 * _1319) + _1368) * _1332) * ((cbModelParam._m0[1u].w * (_2332 - _2233)) + _2233);
    float _2352 = fma(_2349, cbSceneParam._m0[89u].z, fma(_2347, cbSceneParam._m0[89u].y, _2345 * cbSceneParam._m0[89u].x));
    float _2355 = fma(_2349, cbSceneParam._m0[90u].z, fma(_2347, cbSceneParam._m0[90u].y, _2345 * cbSceneParam._m0[90u].x));
    float _2358 = fma(_2349, cbSceneParam._m0[91u].z, fma(_2347, cbSceneParam._m0[91u].y, _2345 * cbSceneParam._m0[91u].x));
    float _2392 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2404 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2405 = _2392 / _2404;
    float _2406 = _2396 / _2404;
    float _2407 = _2400 / _2404;
    float _2554;
    float _2555;
    float _2556;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2434 = ((uint(_2407 > cbSceneParam._m0[59u].y) + uint(_2407 > cbSceneParam._m0[59u].x)) + uint(_2407 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2435 = _2434 + 43u;
        uint _2443 = _2434 + 44u;
        uint _2451 = _2434 + 45u;
        uint _2459 = _2434 + 46u;
        float _2470 = fma(_2404, cbSceneParam._m0[_2435].w, fma(_2400, cbSceneParam._m0[_2435].z, fma(_2396, cbSceneParam._m0[_2435].y, _2392 * cbSceneParam._m0[_2435].x)));
        float _2474 = fma(_2404, cbSceneParam._m0[_2443].w, fma(_2400, cbSceneParam._m0[_2443].z, fma(_2396, cbSceneParam._m0[_2443].y, _2392 * cbSceneParam._m0[_2443].x)));
        float _2482 = fma(_2404, cbSceneParam._m0[_2459].w, fma(_2400, cbSceneParam._m0[_2459].z, fma(_2396, cbSceneParam._m0[_2459].y, _2392 * cbSceneParam._m0[_2459].x)));
        float _2487 = cbSceneParam._m0[33u].z * _2482;
        float _2489 = cbSceneParam._m0[33u].w * _2482;
        float _2492 = fma(_2404, cbSceneParam._m0[_2451].w, fma(_2400, cbSceneParam._m0[_2451].z, fma(_2396, cbSceneParam._m0[_2451].y, _2392 * cbSceneParam._m0[_2451].x))) / _2482;
        float _2540 = (cbSceneParam._m0[33u].x - sqrt(((_2406 * _2406) + (_2405 * _2405)) + (_2407 * _2407))) * cbSceneParam._m0[33u].y;
        float _4912 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2547 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2487 + _2470) / _2482, (_2489 + _2474) / _2482), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2489 + _2470) / _2482, (_2474 - _2487) / _2482), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2470 - _2487) / _2482, (_2474 - _2489) / _2482), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2470 - _2489) / _2482, (_2487 + _2474) / _2482), _2492), 0.0)).x), vec4(0.25)));
        _2554 = 1.0 - (_2547 * cbSceneParam._m0[34u].x);
        _2555 = 1.0 - (_2547 * cbSceneParam._m0[34u].y);
        _2556 = 1.0 - (_2547 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2554 = 1.0;
        _2555 = 1.0;
        _2556 = 1.0;
    }
    float _2620;
    float _2622;
    float _2624;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2608 = fma(_2404, cbSceneParam._m0[63u].w, fma(_2400, cbSceneParam._m0[63u].z, fma(_2396, cbSceneParam._m0[63u].y, _2392 * cbSceneParam._m0[63u].x)));
        float _2609 = fma(_2404, cbSceneParam._m0[60u].w, fma(_2400, cbSceneParam._m0[60u].z, fma(_2396, cbSceneParam._m0[60u].y, _2392 * cbSceneParam._m0[60u].x))) / _2608;
        float _2610 = fma(_2404, cbSceneParam._m0[61u].w, fma(_2400, cbSceneParam._m0[61u].z, fma(_2396, cbSceneParam._m0[61u].y, _2392 * cbSceneParam._m0[61u].x))) / _2608;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2609 >= cbSceneParam._m0[64u].x) && (_2610 >= cbSceneParam._m0[64u].y)) && (_2609 <= cbSceneParam._m0[64u].z)) && (_2610 <= cbSceneParam._m0[64u].w))
        {
            float _2748 = fma(_2404, cbSceneParam._m0[62u].w, fma(_2400, cbSceneParam._m0[62u].z, fma(_2396, cbSceneParam._m0[62u].y, _2392 * cbSceneParam._m0[62u].x))) / _2608;
            float _2752 = isnan(cbSceneParam._m0[41u].w) ? _2748 : (isnan(_2748) ? cbSceneParam._m0[41u].w : max(_2748, cbSceneParam._m0[41u].w));
            float _2795 = (cbSceneParam._m0[33u].x - sqrt(((_2406 * _2406) + (_2405 * _2405)) + (_2407 * _2407))) * cbSceneParam._m0[33u].y;
            float _4928 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
            float _2802 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2609, cbSceneParam._m0[33u].w + _2610), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2609, _2610 - cbSceneParam._m0[33u].z), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2609 - cbSceneParam._m0[33u].z, _2610 - cbSceneParam._m0[33u].w), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2609 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2610), _2752), 0.0)).x), vec4(0.25)));
            float _2806 = 1.0 - (_2802 * cbSceneParam._m0[34u].x);
            float _2807 = 1.0 - (_2802 * cbSceneParam._m0[34u].y);
            float _2808 = 1.0 - (_2802 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2808) ? _2556 : (isnan(_2556) ? _2808 : min(_2556, _2808));
            frontier_phi_34_33_ladder_1 = isnan(_2807) ? _2555 : (isnan(_2555) ? _2807 : min(_2555, _2807));
            frontier_phi_34_33_ladder_2 = isnan(_2806) ? _2554 : (isnan(_2554) ? _2806 : min(_2554, _2806));
        }
        else
        {
            frontier_phi_34_33_ladder = _2556;
            frontier_phi_34_33_ladder_1 = _2555;
            frontier_phi_34_33_ladder_2 = _2554;
        }
        _2620 = frontier_phi_34_33_ladder_2;
        _2622 = frontier_phi_34_33_ladder_1;
        _2624 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2620 = _2554;
        _2622 = _2555;
        _2624 = _2556;
    }
    uvec4 _2629 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2631 = _2629.x * 14u;
    uint _2632 = _2631 + 13u;
    float _2639 = _1332 + (-1.0);
    float _2644 = (cbLight._m0[_2632].x * _2639) + 1.0;
    float _2645 = (cbLight._m0[_2632].y * _2639) + 1.0;
    float _2646 = (cbLight._m0[_2632].z * _2639) + 1.0;
    float _2647 = (cbLight._m0[_2632].w * _2639) + 1.0;
    uint _2648 = _2631 + 5u;
    float _2654 = isnan(1.0) ? _2645 : (isnan(_2645) ? 1.0 : min(_2645, 1.0));
    uint _2658 = _2631 + 4u;
    float _2667 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
    uint _2671 = _2631 | 1u;
    float _2682 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_1167, _1168, _1169));
    float _2685 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_1167, _1168, _1169));
    float _4964 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _4975 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2690 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * 0.3183098733425140380859375;
    float _2692 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * 0.3183098733425140380859375;
    float _2699 = ((cbLight._m0[_2648].x * _2654) * _2692) + (((cbLight._m0[_2658].x * _2620) * _2667) * _2690);
    float _2700 = ((_2654 * cbLight._m0[_2648].y) * _2692) + (((cbLight._m0[_2658].y * _2622) * _2667) * _2690);
    float _2701 = ((_2654 * cbLight._m0[_2648].z) * _2692) + (((cbLight._m0[_2658].z * _2624) * _2667) * _2690);
    uvec4 _2705 = floatBitsToUint(cbLight._m0[_2631 + 12u]);
    bool _2707 = _2705.x == 0u;
    float _2809;
    float _2811;
    float _2813;
    if (_2707)
    {
        _2809 = _2699;
        _2811 = _2700;
        _2813 = _2701;
    }
    else
    {
        uint _2817 = _2631 + 6u;
        float _2833 = (dot(vec3(cbLight._m0[_2631 + 2u].xyz), vec3(_1167, _1168, _1169)) * 0.5) + 0.5;
        float _2834 = _2833 * _2833;
        float _4986 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2835 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _2836 = isnan(1.0) ? _2646 : (isnan(_2646) ? 1.0 : min(_2646, 1.0));
        _2809 = (((cbLight._m0[_2817].x * 0.3183098733425140380859375) * _2835) * _2836) + _2699;
        _2811 = (((cbLight._m0[_2817].y * 0.3183098733425140380859375) * _2835) * _2836) + _2700;
        _2813 = (((cbLight._m0[_2817].z * 0.3183098733425140380859375) * _2835) * _2836) + _2701;
    }
    bool _2816 = _2705.y == 0u;
    float _2871;
    float _2873;
    float _2875;
    if (_2816)
    {
        _2871 = _2809;
        _2873 = _2811;
        _2875 = _2813;
    }
    else
    {
        uint _3044 = _2631 + 7u;
        float _3060 = (dot(vec3(cbLight._m0[_2631 + 3u].xyz), vec3(_1167, _1168, _1169)) * 0.5) + 0.5;
        float _3061 = _3060 * _3060;
        float _5002 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3062 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _3063 = isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0));
        _2871 = (((cbLight._m0[_3044].x * 0.3183098733425140380859375) * _3062) * _3063) + _2809;
        _2873 = (((cbLight._m0[_3044].y * 0.3183098733425140380859375) * _3062) * _3063) + _2811;
        _2875 = (((cbLight._m0[_3044].z * 0.3183098733425140380859375) * _3062) * _3063) + _2813;
    }
    uint _2878 = _2631 + 8u;
    float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _1170) * 0.949999988079071044921875);
    float _2892 = _2891 * _2891;
    float _2893 = cbLight._m0[_2631].x + _1246;
    float _2894 = cbLight._m0[_2631].y + _1247;
    float _2895 = cbLight._m0[_2631].z + _1248;
    float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
    float _2900 = _2899 * _2893;
    float _2901 = _2899 * _2894;
    float _2902 = _2899 * _2895;
    float _2903 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2631].xyz));
    float _5018 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2906 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    float _5029 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _2907 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
    float _2908 = dot(vec3(_1167, _1168, _1169), vec3(_2900, _2901, _2902));
    float _5040 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2911 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
    float _2912 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2900, _2901, _2902));
    float _5051 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
    float _2916 = _2892 * _2892;
    float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
    float _2928 = exp2(log2(1.0 - (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) * 5.0);
    float _2929 = 0.959999978542327880859375 - _1313;
    float _2931 = 0.959999978542327880859375 - _1314;
    float _2932 = 0.959999978542327880859375 - _1315;
    float _2939 = 1.0 - _2892;
    float _2950 = (0.5 / (((_2907 * ((_2906 * _2939) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _2939) + _2892) * _2906))) * _2906;
    float _5062 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2952 = (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
    uint _2966 = _2631 + 9u;
    float _2977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _1170) * 0.949999988079071044921875);
    float _2978 = _2977 * _2977;
    float _2979 = cbLight._m0[_2671].x + _1246;
    float _2980 = cbLight._m0[_2671].y + _1247;
    float _2981 = cbLight._m0[_2671].z + _1248;
    float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
    float _2986 = _2985 * _2979;
    float _2987 = _2985 * _2980;
    float _2988 = _2985 * _2981;
    float _2989 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2671].xyz));
    float _5073 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
    float _2992 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
    float _2993 = dot(vec3(_1167, _1168, _1169), vec3(_2986, _2987, _2988));
    float _5084 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
    float _2996 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
    float _2997 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2986, _2987, _2988));
    float _5095 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
    float _3001 = _2978 * _2978;
    float _3005 = ((_2996 * _2996) * (_3001 + (-1.0))) + 1.0;
    float _3012 = exp2(log2(1.0 - (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) * 5.0);
    float _3019 = 1.0 - _2978;
    float _3029 = (0.5 / (((_2907 * ((_2992 * _3019) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _3019) + _2978) * _2992))) * _2992;
    float _5106 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
    float _3031 = (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3001 / ((_3005 * _3005) * 3.141590118408203125));
    float _3041 = (((((_3012 * _2929) + _1316) * cbLight._m0[_2966].x) * _3031) * _2654) + ((((cbLight._m0[_2878].x * _2620) * ((_2928 * _2929) + _1316)) * _2952) * _2667);
    float _3042 = (((((_3012 * _2931) + _1318) * cbLight._m0[_2966].y) * _3031) * _2654) + ((((cbLight._m0[_2878].y * _2622) * ((_2928 * _2931) + _1318)) * _2952) * _2667);
    float _3043 = (((((_3012 * _2932) + _1319) * cbLight._m0[_2966].z) * _3031) * _2654) + ((((cbLight._m0[_2878].z * _2624) * ((_2928 * _2932) + _1319)) * _2952) * _2667);
    float _3099;
    float _3101;
    float _3103;
    if (_2707)
    {
        _3099 = _3041;
        _3101 = _3042;
        _3103 = _3043;
    }
    else
    {
        uint _3105 = _2631 + 2u;
        uint _3109 = _2631 + 10u;
        float _3123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3105].w)) * _1170) * 0.949999988079071044921875);
        float _3124 = _3123 * _3123;
        float _3125 = cbLight._m0[_3105].x + _1246;
        float _3126 = cbLight._m0[_3105].y + _1247;
        float _3127 = cbLight._m0[_3105].z + _1248;
        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
        float _3132 = _3131 * _3125;
        float _3133 = _3131 * _3126;
        float _3134 = _3131 * _3127;
        float _3135 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_3105].xyz));
        float _5117 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
        float _3138 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
        float _3139 = dot(vec3(_1167, _1168, _1169), vec3(_3132, _3133, _3134));
        float _5128 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        float _3142 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
        float _3143 = dot(vec3(cbLight._m0[_3105].xyz), vec3(_3132, _3133, _3134));
        float _5139 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        float _3147 = _3124 * _3124;
        float _3151 = ((_3142 * _3142) * (_3147 + (-1.0))) + 1.0;
        float _3158 = exp2(log2(1.0 - (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0)))) * 5.0);
        float _3165 = 1.0 - _3124;
        float _3175 = (0.5 / (((_2907 * ((_3138 * _3165) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _3165) + _3124) * _3138))) * _3138;
        float _5150 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
        float _3177 = (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3147 / ((_3151 * _3151) * 3.141590118408203125));
        float _3178 = isnan(1.0) ? _2646 : (isnan(_2646) ? 1.0 : min(_2646, 1.0));
        _3099 = (((((_3158 * _2929) + _1316) * cbLight._m0[_3109].x) * _3177) * _3178) + _3041;
        _3101 = (((((_3158 * _2931) + _1318) * cbLight._m0[_3109].y) * _3177) * _3178) + _3042;
        _3103 = (((((_3158 * _2932) + _1319) * cbLight._m0[_3109].z) * _3177) * _3178) + _3043;
    }
    float _3209;
    float _3211;
    float _3213;
    if (_2816)
    {
        _3209 = _3099;
        _3211 = _3101;
        _3213 = _3103;
    }
    else
    {
        uint _3220 = _2631 + 3u;
        uint _3224 = _2631 + 11u;
        float _3238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3220].w)) * _1170) * 0.949999988079071044921875);
        float _3239 = _3238 * _3238;
        float _3240 = cbLight._m0[_3220].x + _1246;
        float _3241 = cbLight._m0[_3220].y + _1247;
        float _3242 = cbLight._m0[_3220].z + _1248;
        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
        float _3247 = _3246 * _3240;
        float _3248 = _3246 * _3241;
        float _3249 = _3246 * _3242;
        float _3250 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_3220].xyz));
        float _5166 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
        float _3253 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
        float _3254 = dot(vec3(_1167, _1168, _1169), vec3(_3247, _3248, _3249));
        float _5177 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
        float _3257 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
        float _3258 = dot(vec3(cbLight._m0[_3220].xyz), vec3(_3247, _3248, _3249));
        float _5188 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
        float _3262 = _3239 * _3239;
        float _3266 = ((_3257 * _3257) * (_3262 + (-1.0))) + 1.0;
        float _3273 = exp2(log2(1.0 - (isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0)))) * 5.0);
        float _3280 = 1.0 - _3239;
        float _3290 = (0.5 / (((_2907 * ((_3253 * _3280) + _3239)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _3280) + _3239) * _3253))) * _3253;
        float _5199 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
        float _3292 = (isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3262 / ((_3266 * _3266) * 3.141590118408203125));
        float _3293 = isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0));
        _3209 = (((((_3273 * _2929) + _1316) * cbLight._m0[_3224].x) * _3292) * _3293) + _3099;
        _3211 = (((((_3273 * _2931) + _1318) * cbLight._m0[_3224].y) * _3292) * _3293) + _3101;
        _3213 = (((((_3273 * _2932) + _1319) * cbLight._m0[_3224].z) * _3292) * _3293) + _3103;
    }
    float _3359;
    float _3361;
    float _3363;
    float _3365;
    float _3367;
    float _3369;
    if (_2629.y == 0u)
    {
        uvec4 _3314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3315 = _3314.x;
        uint _3326 = uint((float(_3314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1255) / _3315))) + floor(float(uint(cbSceneParam._m0[85u].x * _1254) / _3315)));
        float _3336 = (log2(_2407 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3337 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
        uint _3340 = uint(isnan(14.0) ? _3337 : (isnan(_3337) ? 14.0 : min(_3337, 14.0)));
        uvec4 _3345 = texelFetch(g_lightClusterGridBuffer, int(((_3340 << 2u) + (_3326 << 6u)) >> 2u));
        uint _3346 = _3345.x;
        uint _3347 = _3314.z;
        float _3426;
        float _3428;
        float _3430;
        float _3432;
        float _3434;
        float _3436;
        if (((((1u << ((_3347 >> 4u) & 15u)) + 4294967295u) & _3346) == 0u) || ((_3347 & 240u) == 0u))
        {
            _3426 = 0.0;
            _3428 = 0.0;
            _3430 = 0.0;
            _3432 = 0.0;
            _3434 = 0.0;
            _3436 = 0.0;
        }
        else
        {
            float _3427;
            float _3429;
            float _3431;
            float _3433;
            float _3435;
            float _3437;
            float _3571 = 0.0;
            float _3572 = 0.0;
            float _3573 = 0.0;
            float _3574 = 0.0;
            float _3575 = 0.0;
            float _3576 = 0.0;
            uint _3577 = 0u;
            uint _3586;
            bool _3587;
            for (;;)
            {
                _3586 = texelFetch(g_lightClassification, int((((_3340 << 5u) + (_3326 << 9u)) + (_3577 << 2u)) >> 2u)).x;
                _3587 = _3586 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3587)
                {
                    frontier_phi_66_pred = _3576;
                    frontier_phi_66_pred_1 = _3575;
                    frontier_phi_66_pred_2 = _3574;
                    frontier_phi_66_pred_3 = _3573;
                    frontier_phi_66_pred_4 = _3572;
                    frontier_phi_66_pred_5 = _3571;
                }
                else
                {
                    float _3695;
                    float _3696;
                    float _3697;
                    float _3698;
                    float _3699;
                    float _3700;
                    uint _3701;
                    _3695 = _3571;
                    _3696 = _3572;
                    _3697 = _3573;
                    _3698 = _3574;
                    _3699 = _3575;
                    _3700 = _3576;
                    _3701 = _3586;
                    float _3627;
                    float _3628;
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    for (;;)
                    {
                        uint _3705 = uint(findLSB(_3701)) + (_3577 << 5u);
                        uint _3702 = (_3701 + 4294967295u) & _3701;
                        uint _3707 = _3705 * 48u;
                        vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3707)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3707 + 3u)).x));
                        uint _3727 = (_3705 * 48u) + 4u;
                        vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3727)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 3u)).x));
                        uint _3746 = (_3705 * 48u) + 8u;
                        vec3 _3757 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3746)).x, texelFetch(g_PointLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3746 + 2u)).x));
                        float _3761 = _3721.x - _2405;
                        float _3762 = _3721.y - _2406;
                        float _3763 = _3721.z - _2407;
                        float _3764 = dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763));
                        float _3767 = inversesqrt(_3764);
                        float _3768 = _3767 * _3761;
                        float _3769 = _3767 * _3762;
                        float _3770 = _3767 * _3763;
                        float _3771 = dot(vec3(_1273, _1276, _1279), vec3(_3768, _3769, _3770));
                        float _3776 = 1.0 - (_3764 * _3721.w);
                        float _5225 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                        float _3777 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                        float _3778 = sqrt(_3764) * _3740.w;
                        float _3781 = 1.39999997615814208984375 / (_3778 + 1.39999997615814208984375);
                        float _3782 = _3781 * _3781;
                        float _3785 = ((1.0 - _3782) * _3771) + _3782;
                        float _3788 = _3778 * _3778;
                        float _3792 = ((isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0))) * _3777) / ((_3788 * 0.699999988079071044921875) + 1.0);
                        float _3796 = (-0.0) - _2405;
                        float _3797 = (-0.0) - _2406;
                        float _3798 = (-0.0) - _2407;
                        float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                        float _3803 = _3802 * _3796;
                        float _3804 = _3802 * _3797;
                        float _3805 = _3802 * _3798;
                        float _3812 = exp2(log2(1.0 / ((_3788 * 3.5) + 5.0)) * 0.25);
                        float _3813 = 1.0 - _1348;
                        float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                        float _3821 = _3820 * _3820;
                        float _3822 = _3821 * _3821;
                        float _3823 = _3803 + _3768;
                        float _3824 = _3804 + _3769;
                        float _3825 = _3805 + _3770;
                        float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                        float _3833 = dot(vec3(_1273, _1276, _1279), vec3(_3803, _3804, _3805));
                        float _5241 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                        float _3836 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                        float _3837 = dot(vec3(_1273, _1276, _1279), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                        float _5252 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                        float _3840 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                        float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                        float _3845 = _3781 * _3821;
                        float _3846 = _3845 * _3845;
                        float _3849 = ((1.0 - _3846) * _3771) + _3846;
                        float _5263 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                        float _3850 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                        float _3851 = 1.0 - _3821;
                        float _3861 = (0.5 / (((_3850 * ((_3836 * _3851) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3821) * _3836))) * _3850;
                        float _5274 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                        float _3872 = (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0)))) / ((_3844 * _3844) * ((_3788 * 2.1991131305694580078125) + 3.141590118408203125))) * _3777;
                        _3630 = (_3792 * _3740.x) + _3698;
                        _3631 = (_3792 * _3740.y) + _3699;
                        _3632 = (_3792 * _3740.z) + _3700;
                        _3627 = (_3872 * _3757.x) + _3695;
                        _3628 = (_3872 * _3757.y) + _3696;
                        _3629 = (_3872 * _3757.z) + _3697;
                        if (_3702 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3695 = _3627;
                            _3696 = _3628;
                            _3697 = _3629;
                            _3698 = _3630;
                            _3699 = _3631;
                            _3700 = _3632;
                            _3701 = _3702;
                        }
                    }
                    frontier_phi_66_pred = _3632;
                    frontier_phi_66_pred_1 = _3631;
                    frontier_phi_66_pred_2 = _3630;
                    frontier_phi_66_pred_3 = _3629;
                    frontier_phi_66_pred_4 = _3628;
                    frontier_phi_66_pred_5 = _3627;
                }
                _3437 = frontier_phi_66_pred;
                _3435 = frontier_phi_66_pred_1;
                _3433 = frontier_phi_66_pred_2;
                _3431 = frontier_phi_66_pred_3;
                _3429 = frontier_phi_66_pred_4;
                _3427 = frontier_phi_66_pred_5;
                uint _3578 = _3577 + 1u;
                if (_3578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3571 = _3427;
                    _3572 = _3429;
                    _3573 = _3431;
                    _3574 = _3433;
                    _3575 = _3435;
                    _3576 = _3437;
                    _3577 = _3578;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3426 = _3427;
            _3428 = _3429;
            _3430 = _3431;
            _3432 = _3433;
            _3434 = _3435;
            _3436 = _3437;
        }
        uvec4 _3440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3441 = _3440.z;
        uint _3443 = (_3441 >> 8u) & 15u;
        float _3539;
        float _3541;
        float _3543;
        float _3545;
        float _3547;
        float _3549;
        if (((4294967295u << _3443) & _3346) == 0u)
        {
            _3539 = _3426;
            _3541 = _3428;
            _3543 = _3430;
            _3545 = _3432;
            _3547 = _3434;
            _3549 = _3436;
        }
        else
        {
            float _3564 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
            float _3565 = _3564 * _2405;
            float _3566 = _3564 * _2406;
            float _3567 = _3564 * _2407;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3443 < ((_3441 >> 12u) & 15u))
            {
                float _3540;
                float _3542;
                float _3544;
                float _3546;
                float _3548;
                float _3550;
                float _3678 = _3426;
                float _3679 = _3428;
                float _3680 = _3430;
                float _3681 = _3432;
                float _3682 = _3434;
                float _3683 = _3436;
                uint _3684 = _3443;
                uint _3693;
                bool _3694;
                for (;;)
                {
                    _3693 = texelFetch(g_lightClassification, int((((_3340 << 5u) + (_3326 << 9u)) + (_3684 << 2u)) >> 2u)).x;
                    _3694 = _3693 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3694)
                    {
                        frontier_phi_72_pred = _3683;
                        frontier_phi_72_pred_1 = _3682;
                        frontier_phi_72_pred_2 = _3681;
                        frontier_phi_72_pred_3 = _3680;
                        frontier_phi_72_pred_4 = _3679;
                        frontier_phi_72_pred_5 = _3678;
                    }
                    else
                    {
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _4170;
                        float _4171;
                        float _4172;
                        float _4173;
                        float _4174;
                        float _4175;
                        float _3890 = _3678;
                        float _3891 = _3679;
                        float _3892 = _3680;
                        float _3893 = _3681;
                        float _3894 = _3682;
                        float _3895 = _3683;
                        uint _3896 = _3693;
                        uint _3897;
                        vec4 _3922;
                        float _3923;
                        vec4 _3938;
                        vec3 _3950;
                        vec4 _3965;
                        vec4 _3980;
                        float _4026;
                        bool _4027;
                        for (;;)
                        {
                            uint _3907 = ((_3684 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3896));
                            _3897 = (_3896 + 4294967295u) & _3896;
                            uint _3909 = _3907 * 40u;
                            _3922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 3u)).x));
                            _3923 = _3922.w;
                            uint _3925 = (_3907 * 40u) + 4u;
                            _3938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 3u)).x));
                            uint _3940 = (_3907 * 40u) + 8u;
                            _3950 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 2u)).x));
                            uint _3952 = (_3907 * 40u) + 16u;
                            _3965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 3u)).x));
                            uint _3967 = (_3907 * 40u) + 20u;
                            _3980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 3u)).x));
                            uint _3982 = (_3907 * 40u) + 24u;
                            vec4 _3995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 3u)).x));
                            uint _4001 = (_3907 * 40u) + 28u;
                            vec4 _4014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 3u)).x));
                            _4026 = fma(_2407, _4014.z, fma(_2406, _4014.y, _4014.x * _2405)) + _4014.w;
                            _4027 = !((fma(_2407, _3995.z, fma(_2406, _3995.y, _3995.x * _2405)) + _3995.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4027)
                            {
                                float _4054 = _3922.x - _2405;
                                float _4055 = _3922.y - _2406;
                                float _4056 = _3922.z - _2407;
                                float _4057 = dot(vec3(_4054, _4055, _4056), vec3(_4054, _4055, _4056));
                                float _4060 = inversesqrt(_4057);
                                float _4061 = _4060 * _4054;
                                float _4062 = _4060 * _4055;
                                float _4063 = _4060 * _4056;
                                float _4067 = 1.0 - (_4057 / (_3923 * _3923));
                                float _5285 = isnan(0.0) ? _4067 : (isnan(_4067) ? 0.0 : max(_4067, 0.0));
                                float _4068 = isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0));
                                float _4072 = sqrt(_4057) * _3938.w;
                                float _4074 = 1.39999997615814208984375 / (_4072 + 1.39999997615814208984375);
                                float _4075 = _4074 * _4074;
                                float _4078 = ((1.0 - _4075) * dot(vec3(_4061, _4062, _4063), vec3(_1273, _1276, _1279))) + _4075;
                                float _4081 = _4072 * _4072;
                                float _4085 = (fma(_2407, _3965.z, fma(_2406, _3965.y, _3965.x * _2405)) + _3965.w) / _4026;
                                float _4086 = (fma(_2407, _3980.z, fma(_2406, _3980.y, _3980.x * _2405)) + _3980.w) / _4026;
                                float _4090 = 1.0 - dot(vec2(_4085, _4086), vec2(_4085, _4086));
                                float _5301 = isnan(0.0) ? _4090 : (isnan(_4090) ? 0.0 : max(_4090, 0.0));
                                float _4091 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4092 = _4091 * (((isnan(0.0) ? _4078 : (isnan(_4078) ? 0.0 : max(_4078, 0.0))) * _4068) / ((_4081 * 0.699999988079071044921875) + 1.0));
                                float _4104 = exp2(log2(1.0 / ((_4081 * 3.5) + 5.0)) * 0.25);
                                float _4105 = 1.0 - _1348;
                                float _4112 = sqrt(1.0 - ((1.0 - (_4105 * _4105)) * (1.0 - (_4104 * _4104))));
                                float _4113 = _4112 * _4112;
                                float _4114 = _4113 * _4113;
                                float _4115 = _4061 - _3565;
                                float _4116 = _4062 - _3566;
                                float _4117 = _4063 - _3567;
                                float _4121 = inversesqrt(dot(vec3(_4115, _4116, _4117), vec3(_4115, _4116, _4117)));
                                float _4125 = dot(vec3(_1273, _1276, _1279), vec3((-0.0) - _3565, (-0.0) - _3566, (-0.0) - _3567));
                                float _5312 = isnan(0.0) ? _4125 : (isnan(_4125) ? 0.0 : max(_4125, 0.0));
                                float _4128 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4129 = dot(vec3(_1273, _1276, _1279), vec3(_4121 * _4115, _4121 * _4116, _4121 * _4117));
                                float _5323 = isnan(0.0) ? _4129 : (isnan(_4129) ? 0.0 : max(_4129, 0.0));
                                float _4132 = isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0));
                                float _4136 = ((_4132 * _4132) * (_4114 + (-1.0))) + 1.0;
                                float _4137 = _4074 * _4113;
                                float _4138 = _4137 * _4137;
                                float _4144 = ((1.0 - _4138) * dot(vec3(_1273, _1276, _1279), vec3(_4061, _4062, _4063))) + _4138;
                                float _5334 = isnan(0.0) ? _4144 : (isnan(_4144) ? 0.0 : max(_4144, 0.0));
                                float _4145 = isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0));
                                float _4146 = 1.0 - _4113;
                                float _4156 = (0.5 / (((_4145 * ((_4128 * _4146) + _4113)) + 9.9999999392252902907785028219223e-09) + (((_4145 * _4146) + _4113) * _4128))) * _4145;
                                float _5345 = isnan(0.0) ? _4156 : (isnan(_4156) ? 0.0 : max(_4156, 0.0));
                                float _4166 = (_4091 * _4068) * (((_4114 * 3.1415927410125732421875) * (isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0)))) / ((_4136 * _4136) * ((_4081 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4092 * _3938.y;
                                frontier_phi_78_pred_1 = _4092 * _3938.x;
                                frontier_phi_78_pred_2 = _4166 * _3950.z;
                                frontier_phi_78_pred_3 = _4166 * _3950.y;
                                frontier_phi_78_pred_4 = _4166 * _3950.x;
                                frontier_phi_78_pred_5 = _4092 * _3938.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4174 = frontier_phi_78_pred;
                            _4173 = frontier_phi_78_pred_1;
                            _4172 = frontier_phi_78_pred_2;
                            _4171 = frontier_phi_78_pred_3;
                            _4170 = frontier_phi_78_pred_4;
                            _4175 = frontier_phi_78_pred_5;
                            _3880 = _4173 + _3893;
                            _3881 = _4174 + _3894;
                            _3882 = _4175 + _3895;
                            _3877 = _4170 + _3890;
                            _3878 = _4171 + _3891;
                            _3879 = _4172 + _3892;
                            if (_3897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3890 = _3877;
                                _3891 = _3878;
                                _3892 = _3879;
                                _3893 = _3880;
                                _3894 = _3881;
                                _3895 = _3882;
                                _3896 = _3897;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3882;
                        frontier_phi_72_pred_1 = _3881;
                        frontier_phi_72_pred_2 = _3880;
                        frontier_phi_72_pred_3 = _3879;
                        frontier_phi_72_pred_4 = _3878;
                        frontier_phi_72_pred_5 = _3877;
                    }
                    _3550 = frontier_phi_72_pred;
                    _3548 = frontier_phi_72_pred_1;
                    _3546 = frontier_phi_72_pred_2;
                    _3544 = frontier_phi_72_pred_3;
                    _3542 = frontier_phi_72_pred_4;
                    _3540 = frontier_phi_72_pred_5;
                    uint _3685 = _3684 + 1u;
                    if (_3685 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3678 = _3540;
                        _3679 = _3542;
                        _3680 = _3544;
                        _3681 = _3546;
                        _3682 = _3548;
                        _3683 = _3550;
                        _3684 = _3685;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3550;
                frontier_phi_60_61_ladder_1 = _3548;
                frontier_phi_60_61_ladder_2 = _3544;
                frontier_phi_60_61_ladder_3 = _3542;
                frontier_phi_60_61_ladder_4 = _3540;
                frontier_phi_60_61_ladder_5 = _3546;
            }
            else
            {
                frontier_phi_60_61_ladder = _3436;
                frontier_phi_60_61_ladder_1 = _3434;
                frontier_phi_60_61_ladder_2 = _3430;
                frontier_phi_60_61_ladder_3 = _3428;
                frontier_phi_60_61_ladder_4 = _3426;
                frontier_phi_60_61_ladder_5 = _3432;
            }
            _3539 = frontier_phi_60_61_ladder_4;
            _3541 = frontier_phi_60_61_ladder_3;
            _3543 = frontier_phi_60_61_ladder_2;
            _3545 = frontier_phi_60_61_ladder_5;
            _3547 = frontier_phi_60_61_ladder_1;
            _3549 = frontier_phi_60_61_ladder;
        }
        float _3554 = isnan(1.0) ? _1332 : (isnan(_1332) ? 1.0 : min(_1332, 1.0));
        _3359 = (_3554 * _3545) + _2871;
        _3361 = (_3554 * _3547) + _2873;
        _3363 = (_3554 * _3549) + _2875;
        _3365 = ((_3539 * _1316) * _3554) + _3209;
        _3367 = ((_3541 * _1318) * _3554) + _3211;
        _3369 = ((_3543 * _1319) * _3554) + _3213;
    }
    else
    {
        _3359 = _2871;
        _3361 = _2873;
        _3363 = _2875;
        _3365 = _3209;
        _3367 = _3211;
        _3369 = _3213;
    }
    float _5361 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _5372 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _5383 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    uint _3389 = _303 + 6u;
    float _3397 = _1254 / cbSceneParam._m0[86u].x;
    float _3398 = _1255 / cbSceneParam._m0[86u].y;
    vec4 _3412 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3397, _3398, (log2((isnan(cbSceneParam._m0[77u].w) ? _1189 : (isnan(_1189) ? cbSceneParam._m0[77u].w : min(_1189, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3414 = _3412.x;
    float _3415 = _3412.y;
    float _3416 = _3412.z;
    float _3417 = _3412.w;
    float _3489;
    float _3491;
    float _3493;
    float _3495;
    if (_1189 > cbSceneParam._m0[78u].w)
    {
        float _3451 = isnan(_1189) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1189 : min(cbSceneParam._m0[80u].w, _1189));
        float _3452 = _3451 / _1189;
        float _3463 = _3452 * _1239;
        float _3464 = _1240 * _3452;
        float _3465 = (-0.0) - _3464;
        float _3467 = _3452 * _1241;
        float _3469 = (cbSceneParam._m0[77u].w * _3465) / _3451;
        float _3470 = _3469 + cbSceneParam._m0[79u].w;
        float _3471 = cbSceneParam._m0[79u].w - _3464;
        float _3477 = sqrt(((_3463 * _3463) + (_3464 * _3464)) + (_3467 * _3467));
        float _3480 = (1.0 - (cbSceneParam._m0[77u].w / _3451)) * _3477;
        float _3485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3640;
        if (abs((_3465 - _3469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3640 = ((((_3470 > 0.0) ? exp2(_3485 * _3470) : (2.0 - exp2(_3487 * _3470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3480;
        }
        else
        {
            float _3600 = 1.0 / cbSceneParam._m0[80u].x;
            float _3601 = isnan(_3471) ? _3470 : (isnan(_3470) ? _3471 : max(_3470, _3471));
            float _3602 = isnan(_3471) ? _3470 : (isnan(_3470) ? _3471 : min(_3470, _3471));
            float _3611 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : min(_3601, 0.0));
            float _3612 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : min(_3602, 0.0));
            _3640 = ((abs(_3477 / _3465) * cbSceneParam._m0[80u].y) * ((((_3611 - _3612) * 2.0) - ((exp2(_3485 * (isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0)))) - exp2(_3485 * (isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))))) * _3600)) - ((exp2(_3487 * _3611) - exp2(_3487 * _3612)) * _3600))) + (_3480 * cbSceneParam._m0[80u].z);
        }
        vec4 _3642 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3397, _3398, 1.0), 0.0);
        float _3651 = exp2((_3640 * (-1.44269502162933349609375)) * (1.0 - _3642.w));
        float _3652 = log2(_3651);
        float _3668 = log2(_3417);
        _3489 = (exp2(_3668 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3652 * cbSceneParam._m0[78u].x)) * _3642.x) / cbSceneParam._m0[78u].x)) + _3414;
        _3491 = (exp2(_3668 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3652 * cbSceneParam._m0[78u].y)) * _3642.y) / cbSceneParam._m0[78u].y)) + _3415;
        _3493 = (exp2(_3668 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3652 * cbSceneParam._m0[78u].z)) * _3642.z) / cbSceneParam._m0[78u].z)) + _3416;
        _3495 = _3651 * _3417;
    }
    else
    {
        _3489 = _3414;
        _3491 = _3415;
        _3493 = _3416;
        _3495 = _3417;
    }
    float _3507 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3508 = _3507 == 3.0;
    float _3509 = log2(_3495);
    float _3516 = exp2(_3509 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0))) * (_3359 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1332))) + ((_3365 + ((isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0))) * _2138)) * cbPerFrame._m0[3u].x));
    float _3517 = exp2(_3509 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5372 : (isnan(_5372) ? 1.0 : min(_5372, 1.0))) * (_3361 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1332))) + ((_3367 + ((isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0))) * _2138)) * cbPerFrame._m0[3u].x));
    float _3518 = exp2(_3509 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5383 : (isnan(_5383) ? 1.0 : min(_5383, 1.0))) * (_3363 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1332))) + ((_3369 + ((isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0))) * _2138)) * cbPerFrame._m0[3u].x));
    float _3527 = (_3507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3527 * (_3508 ? _3516 : (_3516 + (cbSceneParam._m0[72u].w * _3489)));
    SV_Target.y = _3527 * (_3508 ? _3517 : (_3517 + (cbSceneParam._m0[72u].w * _3491)));
    SV_Target.z = _3527 * (_3508 ? _3518 : (_3518 + (cbSceneParam._m0[72u].w * _3493)));
    SV_Target.w = cbInstanceData._m0[_3389].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3389].w;
}


