#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1799;
float _4458;
float _4459;
float _4460;
float _4461;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _260 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _261 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _262 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _268 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _269 = _268 * _260;
    float _270 = _268 * _261;
    float _271 = _268 * _262;
    float _275 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = _275 * NORMAL.x;
    float _277 = _275 * NORMAL.y;
    float _278 = _275 * NORMAL.z;
    float _282 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _283 = _282 * TANGENT.x;
    float _284 = _282 * TANGENT.y;
    float _285 = _282 * TANGENT.z;
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _296 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _297 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4470 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4481 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _4492 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    uint _307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _312 = _307 + 1u;
    uint _316 = _307 + 2u;
    float _325 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _326 = _325 * TEXCOORD.z;
    float _327 = _325 * TEXCOORD.w;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _326) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _327) + cbTextureTilingScale._m0[13u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _394 = _389.x * cbMtdParam._m0[11u].x;
    float _395 = _389.y * cbMtdParam._m0[11u].y;
    float _396 = _389.z * cbMtdParam._m0[11u].z;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _326) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _327) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _483 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _500 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _434.x) * 2.0) - ((((_471 - _483) * cbMtdParam._m0[23u].w) + _483) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4503 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _508 = (_501 * ((_415.x * cbMtdParam._m0[12u].x) - _394)) + _394;
    float _509 = (_501 * ((_415.y * cbMtdParam._m0[12u].y) - _395)) + _395;
    float _510 = (_501 * ((_415.z * cbMtdParam._m0[12u].z) - _396)) + _396;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _573 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _434.y) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[23u].w) + _559) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4514 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _581 = (_574 * ((_527.x * cbMtdParam._m0[13u].x) - _508)) + _508;
    float _582 = (_574 * ((_527.y * cbMtdParam._m0[13u].y) - _509)) + _509;
    float _583 = (_574 * ((_527.z * cbMtdParam._m0[13u].z) - _510)) + _510;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _326) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _327) + cbTextureTilingScale._m0[24u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _621 = _619.x;
    float _631 = dot(vec4(_621, _619.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _643 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _434.z) * 2.0) - ((((_621 - _631) * cbMtdParam._m0[23u].w) + _631) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4525 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _654 = (_363.x * cbMtdParam._m0[9u].x) * ((_644 * ((_602.x * cbMtdParam._m0[14u].x) - _581)) + _581);
    float _655 = (_363.y * cbMtdParam._m0[9u].y) * ((_644 * ((_602.y * cbMtdParam._m0[14u].y) - _582)) + _582);
    float _656 = (_363.z * cbMtdParam._m0[9u].z) * ((_644 * ((_602.z * cbMtdParam._m0[14u].z) - _583)) + _583);
    float _660 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _340.x) * _654;
    float _663 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _340.y) * _655;
    float _666 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _340.z) * _656;
    float _674 = (((_654 - _660) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) + _660) * 4.55000019073486328125;
    float _676 = (((_655 - _663) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) + _663) * 4.55000019073486328125;
    float _678 = (((_656 - _666) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) + _666) * 4.55000019073486328125;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _326) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _327) + cbTextureTilingScale._m0[14u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _326) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _327) + cbTextureTilingScale._m0[20u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _326) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _327) + cbTextureTilingScale._m0[4u].w));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _759 = _757.x;
    float _760 = _757.y;
    float _761 = _757.z;
    float _768 = ((_740.x - _759) * _501) + _759;
    float _769 = ((_740.y - _760) * _501) + _760;
    float _770 = ((_740.z - _761) * _501) + _761;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _326) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _327) + cbTextureTilingScale._m0[2u].w));
    float _793 = ((_782.x - _768) * _574) + _768;
    float _794 = ((_782.y - _769) * _574) + _769;
    float _795 = ((_782.z - _770) * _574) + _770;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _326) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _327) + cbTextureTilingScale._m0[23u].w));
    float _820 = ((_807.z - _795) * _644) + _795;
    float _823 = ((((_807.x - _793) * _644) + _793) * 2.0) + (-1.0);
    float _824 = ((((_807.y - _794) * _644) + _794) * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _4536 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _830 = sqrt(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))));
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _860 = (_823 + ((((_715.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_848.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _861 = (_824 + ((((_715.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_848.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _864 = fma(_830, _276, fma(_861, _283, _860 * _269));
    float _867 = fma(_830, _277, fma(_861, _284, _860 * _270));
    float _870 = fma(_830, _278, fma(_861, _285, _860 * _271));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    vec4 _901 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _326) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _327) + cbTextureTilingScale._m0[11u].w));
    float _903 = _901.x;
    float _904 = 1.0 - _903;
    float _912 = (cbMtdParam._m0[19u].x + dot(vec4(_874 * _864, _874 * _867, _874 * _870, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_903 - _904) * cbMtdParam._m0[24u].z) + _904) * cbMtdParam._m0[21u].z);
    float _4547 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _913 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _915 = (-0.0) - cbMtdParam._m0[24u].x;
    float _917 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
    float _925 = _913 - ((_913 * TEXCOORD_8.x) * _918);
    float _926 = _913 - ((_913 * TEXCOORD_8.y) * _918);
    float _927 = _913 - ((_913 * TEXCOORD_8.z) * _918);
    float _934 = (_925 * ((_696.x * cbMtdParam._m0[18u].x) - _674)) + _674;
    float _935 = (_926 * ((_696.y * cbMtdParam._m0[18u].y) - _676)) + _676;
    float _936 = (_927 * ((_696.z * cbMtdParam._m0[18u].z) - _678)) + _678;
    float _951 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _952 = _951 * TEXCOORD.z;
    float _953 = _951 * TEXCOORD.w;
    vec4 _965 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _952) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _953) + cbTextureTilingScale._m0[19u].w));
    float _967 = _965.x;
    float _968 = 1.0 - _967;
    float _994 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_967 - _968) * cbMtdParam._m0[24u].w) + _968) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4568 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _995 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _1003 = ((((cbMtdParam._m0[10u].x - _934) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _995) + _934;
    float _1004 = ((((cbMtdParam._m0[10u].y - _935) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _995) + _935;
    float _1005 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _936)) * _995) + _936;
    vec4 _1031 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1033 = _1031.x;
    float _1050 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _326) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _327) + cbTextureTilingScale._m0[9u].w)).x - _1033) * _501) + _1033;
    float _1067 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _326) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _327) + cbTextureTilingScale._m0[21u].w)).x - _1050) * _574) + _1050;
    float _1084 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _326) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _327) + cbTextureTilingScale._m0[10u].w)).x - _1067) * _644) + _1067;
    float _1090 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1084) * cbMtdParam._m0[19u].z) + _1084;
    float _1092 = _1090 - (_1090 * _925);
    float _1094 = _1092 - (_1092 * _995);
    float _1101 = (((_715.z - _820) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _820;
    float _1105 = ((_848.z - _1101) * cbMtdParam._m0[19u].w) + _1101;
    vec4 _1121 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _326) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _327) + cbTextureTilingScale._m0[15u].w));
    float _1128 = (_1121.x * 2.0) + (-1.0);
    float _1129 = (_1121.y * 2.0) + (-1.0);
    float _1130 = dot(vec2(_1128, _1129), vec2(_1128, _1129));
    float _4579 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1138 = ((_1121.z - _1105) * _925) + _1105;
    float _1141 = ((cbMtdParam._m0[23u].x - _1138) * _995) + _1138;
    vec4 _1164 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _952) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _953) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1170 = (_1164.x * 2.0) + (-1.0);
    float _1171 = (_1164.y * 2.0) + (-1.0);
    float _1172 = dot(vec2(_1170, _1171), vec2(_1170, _1171));
    float _4590 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1187 = ((sqrt(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) - _830) * _927) + _830;
    float _1190 = (((_1128 - _860) * _925) + _860) + (cbMtdParam._m0[21u].x * _860);
    float _1191 = (((_1129 - _861) * _926) + _861) + (cbMtdParam._m0[21u].x * _861);
    float _1202 = (((_1170 - _1190) + (_1190 * cbMtdParam._m0[22u].z)) * _995) + _1190;
    float _1203 = (((_1171 - _1191) + (_1191 * cbMtdParam._m0[22u].z)) * _995) + _1191;
    float _1204 = (_995 * (sqrt(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) - _1187)) + _1187;
    float _1206 = cbMtdParam._m0[22u].x + _848.w;
    float _1209 = fma(_1204, _276, fma(_1203, _283, _1202 * _269));
    float _1212 = fma(_1204, _277, fma(_1203, _284, _1202 * _270));
    float _1215 = fma(_1204, _278, fma(_1203, _285, _1202 * _271));
    float _1219 = inversesqrt(dot(vec3(_1209, _1212, _1215), vec3(_1209, _1212, _1215)));
    float _1220 = _1219 * _1209;
    float _1221 = _1219 * _1212;
    float _1222 = _1219 * _1215;
    float _4601 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1223 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _4623 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4634 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4645 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4656 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1228 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _1242 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1282);
    float _1293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1282);
    float _1294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1282);
    float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
    float _1299 = _1292 * _1298;
    float _1300 = _1293 * _1298;
    float _1301 = _1294 * _1298;
    vec4 _1306 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1308 = _1306.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1480 = sqrt(((_1292 * _1292) + (_1293 * _1293)) + (_1294 * _1294));
        float _1486 = (cbMatDynParam._m0[5u].x * _1480) + cbMatDynParam._m0[5u].y;
        float _4667 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1491 = (cbMatDynParam._m0[5u].z * _1480) + cbMatDynParam._m0[5u].w;
        float _4678 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) - _1487)) + _1487) < ((_1308 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1319 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1320 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1338 = fma(_1222, cbSceneParam._m0[5u].z, fma(_1221, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1220));
    float _1341 = fma(_1222, cbSceneParam._m0[6u].z, fma(_1221, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1220));
    float _1344 = fma(_1222, cbSceneParam._m0[7u].z, fma(_1221, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1220));
    uint _1357 = _307 + 9u;
    uint _1358 = _1357 + uint(cbMatDynParam._m0[0u].w);
    float _1364 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * cbInstanceData._m0[_1358].x;
    float _1365 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * cbInstanceData._m0[_1358].y;
    float _1366 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * cbInstanceData._m0[_1358].z;
    float _4689 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1367 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _4700 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1368 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _4711 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
    float _1369 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _1370 = 1.0 - _1228;
    float _1371 = _1367 * _1370;
    float _1372 = _1368 * _1370;
    float _1373 = _1369 * _1370;
    float _1378 = (_1367 + (-0.039999999105930328369140625)) * _1228;
    float _1379 = (_1368 + (-0.039999999105930328369140625)) * _1228;
    float _1380 = (_1369 + (-0.039999999105930328369140625)) * _1228;
    float _1381 = _1378 + 0.039999999105930328369140625;
    float _1383 = _1379 + 0.039999999105930328369140625;
    float _1384 = _1380 + 0.039999999105930328369140625;
    vec4 _1393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1319, cbSceneParam._m0[86u].y * _1320));
    float _1397 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * TEXCOORD_5.w) * _1393.x;
    float _1398 = dot(vec3(_1220, _1221, _1222), vec3(_1299, _1300, _1301));
    float _1401 = _1398 * 2.0;
    float _1405 = (_1401 * _1220) - _1299;
    float _1406 = (_1401 * _1221) - _1300;
    float _1407 = (_1401 * _1222) - _1301;
    float _1411 = abs(dot(vec3(_1299, _1300, _1301), vec3(_1220, _1221, _1222)));
    float _4722 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1413 = sqrt(_1223);
    float _1426 = exp2((_1413 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1413 * 3.0));
    float _1432 = (1.0 - _1426) * ((_1413 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1433 = _1426 * _1413;
    float _1461 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1469 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1798;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1523 = fma(_1469, cbModelParam._m0[26u].z, fma(_1465, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1461));
        float _1527 = fma(_1469, cbModelParam._m0[27u].z, fma(_1465, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1461));
        float _1531 = fma(_1469, cbModelParam._m0[28u].z, fma(_1465, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1461));
        float _1556 = _1461 + _1220;
        float _1557 = _1465 + _1221;
        float _1558 = _1469 + _1222;
        float _1568 = fma(_1558, cbModelParam._m0[26u].z, fma(_1557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1556)) - _1523;
        float _1569 = fma(_1558, cbModelParam._m0[27u].z, fma(_1557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1556)) - _1527;
        float _1570 = fma(_1558, cbModelParam._m0[28u].z, fma(_1557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1556)) - _1531;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[34u].z) + ((((((_1531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1626 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1592.x + (-0.5));
        float _1628 = _1626 * (_1592.y + (-0.5));
        float _1629 = _1626 * (_1592.z + (-0.5));
        float _1636 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1599.x + (-0.5));
        float _1638 = _1636 * (_1599.y + (-0.5));
        float _1639 = _1636 * (_1599.z + (-0.5));
        float _1646 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1606.x + (-0.5));
        float _1648 = _1646 * (_1606.y + (-0.5));
        float _1649 = _1646 * (_1606.z + (-0.5));
        float _1656 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1613.x + (-0.5));
        float _1658 = _1656 * (_1613.y + (-0.5));
        float _1659 = _1656 * (_1613.z + (-0.5));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = _1627 * 0.5;
        float _1664 = _1637 * 0.5;
        float _1665 = _1647 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1680 = (dot(vec3(_1220, _1221, _1222), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4748 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1690 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4759 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4770 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_1692 + 1.0))) + _1697) * _1660;
        float _1707 = _1628 * 0.5;
        float _1708 = _1638 * 0.5;
        float _1709 = _1648 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_1220, _1221, _1222), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4781 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4792 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4803 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_1734 + 1.0))) + _1739) * _1661;
        float _1749 = _1629 * 0.5;
        float _1750 = _1639 * 0.5;
        float _1751 = _1649 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_1220, _1221, _1222), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4814 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4825 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4836 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_1776 + 1.0))) + _1781) * _1662;
        _1798 = _1629;
        _1800 = _1628;
        _1801 = _1627;
        _1802 = _1639;
        _1803 = _1638;
        _1804 = _1637;
        _1805 = _1649;
        _1806 = _1648;
        _1807 = _1647;
        _1808 = _1662;
        _1809 = _1661;
        _1810 = _1660;
        _1811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
    }
    else
    {
        _1798 = _1799;
        _1800 = _1799;
        _1801 = _1799;
        _1802 = _1799;
        _1803 = _1799;
        _1804 = _1799;
        _1805 = _1799;
        _1806 = _1799;
        _1807 = _1799;
        _1808 = _1799;
        _1809 = _1799;
        _1810 = _1799;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _2108;
    float _2109;
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    float _2119;
    float _2120;
    float _2121;
    float _2122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1839 = fma(_1469, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461));
        float _1843 = fma(_1469, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461));
        float _1847 = fma(_1469, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461));
        float _1870 = _1461 + _1220;
        float _1871 = _1465 + _1221;
        float _1872 = _1469 + _1222;
        float _1882 = fma(_1872, cbModelParam._m0[30u].z, fma(_1871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1870)) - _1839;
        float _1883 = fma(_1872, cbModelParam._m0[31u].z, fma(_1871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1870)) - _1843;
        float _1884 = fma(_1872, cbModelParam._m0[32u].z, fma(_1871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1870)) - _1847;
        float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
        float _1901 = ((_1888 * _1882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1902 = ((_1888 * _1883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1903 = ((_1888 * _1884) / cbModelParam._m0[35u].z) + ((((((_1847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1901, _1902, _1903), 0.0);
        vec4 _1912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1901, _1902, _1903), 0.0);
        vec4 _1919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1901, _1902, _1903), 0.0);
        vec4 _1926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1901, _1902, _1903), 0.0);
        float _1938 = exp2((_1905.w + (-0.5)) * 20.0) * 2.0;
        float _1939 = _1938 * (_1905.x + (-0.5));
        float _1940 = _1938 * (_1905.y + (-0.5));
        float _1941 = _1938 * (_1905.z + (-0.5));
        float _1948 = exp2((_1912.w + (-0.5)) * 20.0) * 2.0;
        float _1949 = _1948 * (_1912.x + (-0.5));
        float _1950 = _1948 * (_1912.y + (-0.5));
        float _1951 = _1948 * (_1912.z + (-0.5));
        float _1958 = exp2((_1919.w + (-0.5)) * 20.0) * 2.0;
        float _1959 = _1958 * (_1919.x + (-0.5));
        float _1960 = _1958 * (_1919.y + (-0.5));
        float _1961 = _1958 * (_1919.z + (-0.5));
        float _1968 = exp2((_1926.w + (-0.5)) * 20.0) * 2.0;
        float _1969 = _1968 * (_1926.x + (-0.5));
        float _1970 = _1968 * (_1926.y + (-0.5));
        float _1971 = _1968 * (_1926.z + (-0.5));
        float _1972 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1974 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1975 = _1939 * 0.5;
        float _1976 = _1949 * 0.5;
        float _1977 = _1959 * 0.5;
        float _1978 = dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977));
        float _1983 = (_1978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1978);
        float _1991 = (dot(vec3(_1220, _1221, _1222), vec3(_1983 * _1975, _1983 * _1976, _1983 * _1977)) + 1.0) * 0.5;
        float _4877 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _2000 = sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977)) / (_1972 + 9.9999997473787516355514526367188e-06);
        float _4888 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2002 = _2001 * 2.0;
        float _2006 = (1.0 - _2001) / (_2001 + 1.0);
        float _4899 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2016 = ((((1.0 - _2007) * (_2002 + 2.0)) * exp2(log2(isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2002 + 1.0))) + _2007) * _1972;
        float _2017 = _1940 * 0.5;
        float _2018 = _1950 * 0.5;
        float _2019 = _1960 * 0.5;
        float _2020 = dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019));
        float _2025 = (_2020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2020);
        float _2033 = (dot(vec3(_1220, _1221, _1222), vec3(_2025 * _2017, _2025 * _2018, _2025 * _2019)) + 1.0) * 0.5;
        float _4910 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2042 = sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019)) / (_1973 + 9.9999997473787516355514526367188e-06);
        float _4921 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2044 = _2043 * 2.0;
        float _2048 = (1.0 - _2043) / (_2043 + 1.0);
        float _4932 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _2058 = ((((1.0 - _2049) * (_2044 + 2.0)) * exp2(log2(isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2044 + 1.0))) + _2049) * _1973;
        float _2059 = _1941 * 0.5;
        float _2060 = _1951 * 0.5;
        float _2061 = _1961 * 0.5;
        float _2062 = dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061));
        float _2067 = (_2062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2062);
        float _2075 = (dot(vec3(_1220, _1221, _1222), vec3(_2067 * _2059, _2067 * _2060, _2067 * _2061)) + 1.0) * 0.5;
        float _4943 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2084 = sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061)) / (_1974 + 9.9999997473787516355514526367188e-06);
        float _4954 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2086 = _2085 * 2.0;
        float _2090 = (1.0 - _2085) / (_2085 + 1.0);
        float _4965 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2100 = ((((1.0 - _2091) * (_2086 + 2.0)) * exp2(log2(isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2086 + 1.0))) + _2091) * _1974;
        _2108 = _1941;
        _2109 = _1940;
        _2110 = _1939;
        _2111 = _1951;
        _2112 = _1950;
        _2113 = _1949;
        _2114 = _1961;
        _2115 = _1960;
        _2116 = _1959;
        _2117 = _1974;
        _2118 = _1973;
        _2119 = _1972;
        _2120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)));
        _2121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)));
        _2122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)));
    }
    else
    {
        _2108 = _1799;
        _2109 = _1799;
        _2110 = _1799;
        _2111 = _1799;
        _2112 = _1799;
        _2113 = _1799;
        _2114 = _1799;
        _2115 = _1799;
        _2116 = _1799;
        _2117 = _1799;
        _2118 = _1799;
        _2119 = _1799;
        _2120 = 0.0;
        _2121 = 0.0;
        _2122 = 0.0;
    }
    float _2132 = (cbModelParam._m0[1u].x * (_2120 - _1811)) + _1811;
    float _2133 = (cbModelParam._m0[1u].x * (_2121 - _1812)) + _1812;
    float _2134 = (cbModelParam._m0[1u].x * (_2122 - _1813)) + _1813;
    float _2155 = fma(_2134, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2132 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2134, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2132 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2134, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2132));
    float _2176 = _1405 * 0.5;
    float _2177 = _1406 * 0.5;
    float _2178 = _1407 * 0.5;
    float _2179 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_2110, _2113, _2116, _2119));
    float _2182 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_2109, _2112, _2115, _2118));
    float _2185 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_2108, _2111, _2114, _2117));
    float _2219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2192 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_1798, _1802, _1805, _1808));
        float _2196 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_1800, _1803, _1806, _1809));
        float _2200 = dot(vec4(_2176, _2177, _2178, 1.0), vec4(_1801, _1804, _1807, _1810));
        float _2207 = dot(vec4(cbModelParam._m0[39u]), vec4(_2176, _2177, _2178, 1.0));
        _2219 = dot(vec3(isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0)), isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0)), isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2207) ? 0.0 : (isnan(0.0) ? _2207 : max(0.0, _2207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2219 = 1.0;
    }
    float _2230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2221 = dot(vec4(cbModelParam._m0[40u]), vec4(_2176, _2177, _2178, 1.0));
        _2230 = dot(vec3(isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0)), isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0)), isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2221) ? 0.0 : (isnan(0.0) ? _2221 : max(0.0, _2221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2230 = 1.0;
    }
    float _2234 = (_2230 * cbModelParam._m0[1u].x) + (_2219 * (1.0 - cbModelParam._m0[1u].x));
    float _2244 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1223);
    float _2245 = isnan(_2244) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2244 : min(cbModelParam._m0[25u].z, _2244));
    float _2325;
    float _2327;
    float _2329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2292 = fma(_1469, cbModelParam._m0[13u].z, fma(_1465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1461)) + cbModelParam._m0[13u].w;
        float _2296 = fma(_1469, cbModelParam._m0[14u].z, fma(_1465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1461)) + cbModelParam._m0[14u].w;
        float _2300 = fma(_1469, cbModelParam._m0[15u].z, fma(_1465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1461)) + cbModelParam._m0[15u].w;
        float _2303 = fma(_1407, cbModelParam._m0[13u].z, fma(_1406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1405));
        float _2306 = fma(_1407, cbModelParam._m0[14u].z, fma(_1406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1405));
        float _2309 = fma(_1407, cbModelParam._m0[15u].z, fma(_1406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1405));
        float _2337;
        if (_2303 > 0.0)
        {
            _2337 = abs((1.0 - _2292) / _2303);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2303 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2292 + 1.0) / _2303);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2337 = frontier_phi_17_15_ladder;
        }
        float _2508;
        if (_2306 > 0.0)
        {
            _2508 = abs((1.0 - _2296) / _2306);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2306 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2296 + 1.0) / _2306);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2508 = frontier_phi_26_22_ladder;
        }
        float _2803;
        if (_2309 > 0.0)
        {
            _2803 = abs((1.0 - _2300) / _2309);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2309 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2300 + 1.0) / _2309);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2803 = frontier_phi_38_33_ladder;
        }
        float _2805 = isnan(_2508) ? _2337 : (isnan(_2337) ? _2508 : min(_2337, _2508));
        float _2806 = isnan(_2803) ? _2805 : (isnan(_2805) ? _2803 : min(_2805, _2803));
        float _2810 = (_2806 * _2303) + _2292;
        float _2811 = (_2806 * _2306) + _2296;
        float _2812 = (_2806 * _2309) + _2300;
        float _2813 = _2806 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2813;
        float _2817 = _2813 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 > _2817) || ((_2811 < _2815) || ((_2810 < _2815) || (_2810 > _2817))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2812, cbModelParam._m0[9u].z, fma(_2811, cbModelParam._m0[9u].y, _2810 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2812, cbModelParam._m0[10u].z, fma(_2811, cbModelParam._m0[10u].y, _2810 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2812, cbModelParam._m0[11u].z, fma(_2811, cbModelParam._m0[11u].y, _2810 * cbModelParam._m0[11u].x))), _2245);
            frontier_phi_16_38_ladder = _2957.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2957.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2957.x * cbModelParam._m0[1u].y;
        }
        _2325 = frontier_phi_16_38_ladder_2;
        _2327 = frontier_phi_16_38_ladder_1;
        _2329 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1405, _1406, _1407), _2245);
        _2325 = _2313.x * cbModelParam._m0[1u].y;
        _2327 = _2313.y * cbModelParam._m0[1u].y;
        _2329 = _2313.z * cbModelParam._m0[1u].y;
    }
    float _2333 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1223);
    float _2334 = isnan(_2333) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2333 : min(cbModelParam._m0[25u].w, _2333));
    float _2423;
    float _2425;
    float _2427;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2387 = fma(_1469, cbModelParam._m0[21u].z, fma(_1465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1461)) + cbModelParam._m0[21u].w;
        float _2391 = fma(_1469, cbModelParam._m0[22u].z, fma(_1465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1461)) + cbModelParam._m0[22u].w;
        float _2395 = fma(_1469, cbModelParam._m0[23u].z, fma(_1465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1461)) + cbModelParam._m0[23u].w;
        float _2398 = fma(_1407, cbModelParam._m0[21u].z, fma(_1406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1405));
        float _2401 = fma(_1407, cbModelParam._m0[22u].z, fma(_1406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1405));
        float _2404 = fma(_1407, cbModelParam._m0[23u].z, fma(_1406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1405));
        float _2513;
        if (_2398 > 0.0)
        {
            _2513 = abs((1.0 - _2387) / _2398);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2398 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2387 + 1.0) / _2398);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2513 = frontier_phi_28_24_ladder;
        }
        float _2830;
        if (_2401 > 0.0)
        {
            _2830 = abs((1.0 - _2391) / _2401);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2401 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2391 + 1.0) / _2401);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2830 = frontier_phi_40_35_ladder;
        }
        float _3168;
        if (_2404 > 0.0)
        {
            _3168 = abs((1.0 - _2395) / _2404);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2404 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2395 + 1.0) / _2404);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3168 = frontier_phi_50_47_ladder;
        }
        float _3170 = isnan(_2830) ? _2513 : (isnan(_2513) ? _2830 : min(_2513, _2830));
        float _3171 = isnan(_3168) ? _3170 : (isnan(_3170) ? _3168 : min(_3170, _3168));
        float _3175 = (_3171 * _2398) + _2387;
        float _3176 = (_3171 * _2401) + _2391;
        float _3177 = (_3171 * _2404) + _2395;
        float _3178 = _3171 * 9.9999997473787516355514526367188e-05;
        float _3179 = (-1.0) - _3178;
        float _3181 = _3178 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3177 > _3181) || ((_3177 < _3179) || ((_3176 > _3181) || ((_3176 < _3179) || ((_3175 < _3179) || (_3175 > _3181))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3299 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3177, cbModelParam._m0[17u].z, fma(_3176, cbModelParam._m0[17u].y, _3175 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3177, cbModelParam._m0[18u].z, fma(_3176, cbModelParam._m0[18u].y, _3175 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3177, cbModelParam._m0[19u].z, fma(_3176, cbModelParam._m0[19u].y, _3175 * cbModelParam._m0[19u].x))), _2334);
            frontier_phi_25_50_ladder = _3299.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3299.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3299.x * cbModelParam._m0[1u].z;
        }
        _2423 = frontier_phi_25_50_ladder_2;
        _2425 = frontier_phi_25_50_ladder_1;
        _2427 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1405, _1406, _1407), _2334);
        _2423 = _2407.x * cbModelParam._m0[1u].z;
        _2425 = _2407.y * cbModelParam._m0[1u].z;
        _2427 = _2407.z * cbModelParam._m0[1u].z;
    }
    float _2440 = (((_1432 * _1381) + _1433) * _1397) * ((cbModelParam._m0[1u].w * (_2423 - _2325)) + _2325);
    float _2442 = (((_1432 * _1383) + _1433) * _1397) * ((cbModelParam._m0[1u].w * (_2425 - _2327)) + _2327);
    float _2444 = (((_1432 * _1384) + _1433) * _1397) * ((cbModelParam._m0[1u].w * (_2427 - _2329)) + _2329);
    float _2447 = fma(_2444, cbSceneParam._m0[89u].z, fma(_2442, cbSceneParam._m0[89u].y, _2440 * cbSceneParam._m0[89u].x));
    float _2450 = fma(_2444, cbSceneParam._m0[90u].z, fma(_2442, cbSceneParam._m0[90u].y, _2440 * cbSceneParam._m0[90u].x));
    float _2453 = fma(_2444, cbSceneParam._m0[91u].z, fma(_2442, cbSceneParam._m0[91u].y, _2440 * cbSceneParam._m0[91u].x));
    float _2487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2491 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2495 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2500 = _2487 / _2499;
    float _2501 = _2491 / _2499;
    float _2502 = _2495 / _2499;
    float _2649;
    float _2650;
    float _2651;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2529 = ((uint(_2502 > cbSceneParam._m0[59u].y) + uint(_2502 > cbSceneParam._m0[59u].x)) + uint(_2502 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2530 = _2529 + 43u;
        uint _2538 = _2529 + 44u;
        uint _2546 = _2529 + 45u;
        uint _2554 = _2529 + 46u;
        float _2565 = fma(_2499, cbSceneParam._m0[_2530].w, fma(_2495, cbSceneParam._m0[_2530].z, fma(_2491, cbSceneParam._m0[_2530].y, _2487 * cbSceneParam._m0[_2530].x)));
        float _2569 = fma(_2499, cbSceneParam._m0[_2538].w, fma(_2495, cbSceneParam._m0[_2538].z, fma(_2491, cbSceneParam._m0[_2538].y, _2487 * cbSceneParam._m0[_2538].x)));
        float _2577 = fma(_2499, cbSceneParam._m0[_2554].w, fma(_2495, cbSceneParam._m0[_2554].z, fma(_2491, cbSceneParam._m0[_2554].y, _2487 * cbSceneParam._m0[_2554].x)));
        float _2582 = cbSceneParam._m0[33u].z * _2577;
        float _2584 = cbSceneParam._m0[33u].w * _2577;
        float _2587 = fma(_2499, cbSceneParam._m0[_2546].w, fma(_2495, cbSceneParam._m0[_2546].z, fma(_2491, cbSceneParam._m0[_2546].y, _2487 * cbSceneParam._m0[_2546].x))) / _2577;
        float _2635 = (cbSceneParam._m0[33u].x - sqrt(((_2501 * _2501) + (_2500 * _2500)) + (_2502 * _2502))) * cbSceneParam._m0[33u].y;
        float _5091 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2642 = (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2582 + _2565) / _2577, (_2584 + _2569) / _2577), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2584 + _2565) / _2577, (_2569 - _2582) / _2577), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2565 - _2582) / _2577, (_2569 - _2584) / _2577), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2565 - _2584) / _2577, (_2582 + _2569) / _2577), _2587), 0.0)).x), vec4(0.25)));
        _2649 = 1.0 - (_2642 * cbSceneParam._m0[34u].x);
        _2650 = 1.0 - (_2642 * cbSceneParam._m0[34u].y);
        _2651 = 1.0 - (_2642 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2649 = 1.0;
        _2650 = 1.0;
        _2651 = 1.0;
    }
    float _2715;
    float _2717;
    float _2719;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2703 = fma(_2499, cbSceneParam._m0[63u].w, fma(_2495, cbSceneParam._m0[63u].z, fma(_2491, cbSceneParam._m0[63u].y, _2487 * cbSceneParam._m0[63u].x)));
        float _2704 = fma(_2499, cbSceneParam._m0[60u].w, fma(_2495, cbSceneParam._m0[60u].z, fma(_2491, cbSceneParam._m0[60u].y, _2487 * cbSceneParam._m0[60u].x))) / _2703;
        float _2705 = fma(_2499, cbSceneParam._m0[61u].w, fma(_2495, cbSceneParam._m0[61u].z, fma(_2491, cbSceneParam._m0[61u].y, _2487 * cbSceneParam._m0[61u].x))) / _2703;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2704 >= cbSceneParam._m0[64u].x) && (_2705 >= cbSceneParam._m0[64u].y)) && (_2704 <= cbSceneParam._m0[64u].z)) && (_2705 <= cbSceneParam._m0[64u].w))
        {
            float _2843 = fma(_2499, cbSceneParam._m0[62u].w, fma(_2495, cbSceneParam._m0[62u].z, fma(_2491, cbSceneParam._m0[62u].y, _2487 * cbSceneParam._m0[62u].x))) / _2703;
            float _2847 = isnan(cbSceneParam._m0[41u].w) ? _2843 : (isnan(_2843) ? cbSceneParam._m0[41u].w : max(_2843, cbSceneParam._m0[41u].w));
            float _2890 = (cbSceneParam._m0[33u].x - sqrt(((_2501 * _2501) + (_2500 * _2500)) + (_2502 * _2502))) * cbSceneParam._m0[33u].y;
            float _5107 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
            float _2897 = (isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2704, cbSceneParam._m0[33u].w + _2705), _2847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2704, _2705 - cbSceneParam._m0[33u].z), _2847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2704 - cbSceneParam._m0[33u].z, _2705 - cbSceneParam._m0[33u].w), _2847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2704 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2705), _2847), 0.0)).x), vec4(0.25)));
            float _2901 = 1.0 - (_2897 * cbSceneParam._m0[34u].x);
            float _2902 = 1.0 - (_2897 * cbSceneParam._m0[34u].y);
            float _2903 = 1.0 - (_2897 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2903) ? _2651 : (isnan(_2651) ? _2903 : min(_2651, _2903));
            frontier_phi_37_36_ladder_1 = isnan(_2902) ? _2650 : (isnan(_2650) ? _2902 : min(_2650, _2902));
            frontier_phi_37_36_ladder_2 = isnan(_2901) ? _2649 : (isnan(_2649) ? _2901 : min(_2649, _2901));
        }
        else
        {
            frontier_phi_37_36_ladder = _2651;
            frontier_phi_37_36_ladder_1 = _2650;
            frontier_phi_37_36_ladder_2 = _2649;
        }
        _2715 = frontier_phi_37_36_ladder_2;
        _2717 = frontier_phi_37_36_ladder_1;
        _2719 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2715 = _2649;
        _2717 = _2650;
        _2719 = _2651;
    }
    uvec4 _2724 = floatBitsToUint(cbInstanceData._m0[_307 + 5u]);
    uint _2726 = _2724.x * 14u;
    uint _2727 = _2726 + 13u;
    float _2734 = _1397 + (-1.0);
    float _2739 = (cbLight._m0[_2727].x * _2734) + 1.0;
    float _2740 = (cbLight._m0[_2727].y * _2734) + 1.0;
    float _2741 = (cbLight._m0[_2727].z * _2734) + 1.0;
    float _2742 = (cbLight._m0[_2727].w * _2734) + 1.0;
    uint _2743 = _2726 + 5u;
    float _2749 = isnan(1.0) ? _2740 : (isnan(_2740) ? 1.0 : min(_2740, 1.0));
    uint _2753 = _2726 + 4u;
    float _2762 = isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0));
    uint _2766 = _2726 | 1u;
    float _2777 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_1220, _1221, _1222));
    float _2780 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_1220, _1221, _1222));
    float _5143 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _5154 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2785 = (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0))) * 0.3183098733425140380859375;
    float _2787 = (isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0))) * 0.3183098733425140380859375;
    float _2794 = ((cbLight._m0[_2743].x * _2749) * _2787) + (((cbLight._m0[_2753].x * _2715) * _2762) * _2785);
    float _2795 = ((_2749 * cbLight._m0[_2743].y) * _2787) + (((cbLight._m0[_2753].y * _2717) * _2762) * _2785);
    float _2796 = ((_2749 * cbLight._m0[_2743].z) * _2787) + (((cbLight._m0[_2753].z * _2719) * _2762) * _2785);
    uvec4 _2800 = floatBitsToUint(cbLight._m0[_2726 + 12u]);
    bool _2802 = _2800.x == 0u;
    float _2904;
    float _2906;
    float _2908;
    if (_2802)
    {
        _2904 = _2794;
        _2906 = _2795;
        _2908 = _2796;
    }
    else
    {
        uint _2912 = _2726 + 6u;
        float _2928 = (dot(vec3(cbLight._m0[_2726 + 2u].xyz), vec3(_1220, _1221, _1222)) * 0.5) + 0.5;
        float _2929 = _2928 * _2928;
        float _5165 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2930 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
        float _2931 = isnan(1.0) ? _2741 : (isnan(_2741) ? 1.0 : min(_2741, 1.0));
        _2904 = (((cbLight._m0[_2912].x * 0.3183098733425140380859375) * _2930) * _2931) + _2794;
        _2906 = (((cbLight._m0[_2912].y * 0.3183098733425140380859375) * _2930) * _2931) + _2795;
        _2908 = (((cbLight._m0[_2912].z * 0.3183098733425140380859375) * _2930) * _2931) + _2796;
    }
    bool _2911 = _2800.y == 0u;
    float _2966;
    float _2968;
    float _2970;
    if (_2911)
    {
        _2966 = _2904;
        _2968 = _2906;
        _2970 = _2908;
    }
    else
    {
        uint _3139 = _2726 + 7u;
        float _3155 = (dot(vec3(cbLight._m0[_2726 + 3u].xyz), vec3(_1220, _1221, _1222)) * 0.5) + 0.5;
        float _3156 = _3155 * _3155;
        float _5181 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
        float _3157 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
        float _3158 = isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0));
        _2966 = (((cbLight._m0[_3139].x * 0.3183098733425140380859375) * _3157) * _3158) + _2904;
        _2968 = (((cbLight._m0[_3139].y * 0.3183098733425140380859375) * _3157) * _3158) + _2906;
        _2970 = (((cbLight._m0[_3139].z * 0.3183098733425140380859375) * _3157) * _3158) + _2908;
    }
    uint _2973 = _2726 + 8u;
    float _2986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _1223) * 0.949999988079071044921875);
    float _2987 = _2986 * _2986;
    float _2988 = cbLight._m0[_2726].x + _1299;
    float _2989 = cbLight._m0[_2726].y + _1300;
    float _2990 = cbLight._m0[_2726].z + _1301;
    float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
    float _2995 = _2994 * _2988;
    float _2996 = _2994 * _2989;
    float _2997 = _2994 * _2990;
    float _2998 = dot(vec3(_1220, _1221, _1222), vec3(cbLight._m0[_2726].xyz));
    float _5197 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
    float _3001 = isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0));
    float _5208 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
    float _3002 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
    float _3003 = dot(vec3(_1220, _1221, _1222), vec3(_2995, _2996, _2997));
    float _5219 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
    float _3006 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
    float _3007 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2995, _2996, _2997));
    float _5230 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
    float _3011 = _2987 * _2987;
    float _3015 = ((_3006 * _3006) * (_3011 + (-1.0))) + 1.0;
    float _3023 = exp2(log2(1.0 - (isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0)))) * 5.0);
    float _3024 = 0.959999978542327880859375 - _1378;
    float _3026 = 0.959999978542327880859375 - _1379;
    float _3027 = 0.959999978542327880859375 - _1380;
    float _3034 = 1.0 - _2987;
    float _3045 = (0.5 / (((_3002 * ((_3001 * _3034) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3034) + _2987) * _3001))) * _3001;
    float _5241 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
    float _3047 = (isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3011 / ((_3015 * _3015) * 3.141590118408203125));
    uint _3061 = _2726 + 9u;
    float _3072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _1223) * 0.949999988079071044921875);
    float _3073 = _3072 * _3072;
    float _3074 = cbLight._m0[_2766].x + _1299;
    float _3075 = cbLight._m0[_2766].y + _1300;
    float _3076 = cbLight._m0[_2766].z + _1301;
    float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
    float _3081 = _3080 * _3074;
    float _3082 = _3080 * _3075;
    float _3083 = _3080 * _3076;
    float _3084 = dot(vec3(_1220, _1221, _1222), vec3(cbLight._m0[_2766].xyz));
    float _5252 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
    float _3087 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
    float _3088 = dot(vec3(_1220, _1221, _1222), vec3(_3081, _3082, _3083));
    float _5263 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
    float _3091 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
    float _3092 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_3081, _3082, _3083));
    float _5274 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
    float _3096 = _3073 * _3073;
    float _3100 = ((_3091 * _3091) * (_3096 + (-1.0))) + 1.0;
    float _3107 = exp2(log2(1.0 - (isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0)))) * 5.0);
    float _3114 = 1.0 - _3073;
    float _3124 = (0.5 / (((_3002 * ((_3087 * _3114) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3114) + _3073) * _3087))) * _3087;
    float _5285 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
    float _3126 = (isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0))) * (_3096 / ((_3100 * _3100) * 3.141590118408203125));
    float _3136 = (((((_3107 * _3024) + _1381) * cbLight._m0[_3061].x) * _3126) * _2749) + ((((cbLight._m0[_2973].x * _2715) * ((_3023 * _3024) + _1381)) * _3047) * _2762);
    float _3137 = (((((_3107 * _3026) + _1383) * cbLight._m0[_3061].y) * _3126) * _2749) + ((((cbLight._m0[_2973].y * _2717) * ((_3023 * _3026) + _1383)) * _3047) * _2762);
    float _3138 = (((((_3107 * _3027) + _1384) * cbLight._m0[_3061].z) * _3126) * _2749) + ((((cbLight._m0[_2973].z * _2719) * ((_3023 * _3027) + _1384)) * _3047) * _2762);
    float _3194;
    float _3196;
    float _3198;
    if (_2802)
    {
        _3194 = _3136;
        _3196 = _3137;
        _3198 = _3138;
    }
    else
    {
        uint _3200 = _2726 + 2u;
        uint _3204 = _2726 + 10u;
        float _3218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3200].w)) * _1223) * 0.949999988079071044921875);
        float _3219 = _3218 * _3218;
        float _3220 = cbLight._m0[_3200].x + _1299;
        float _3221 = cbLight._m0[_3200].y + _1300;
        float _3222 = cbLight._m0[_3200].z + _1301;
        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
        float _3227 = _3226 * _3220;
        float _3228 = _3226 * _3221;
        float _3229 = _3226 * _3222;
        float _3230 = dot(vec3(_1220, _1221, _1222), vec3(cbLight._m0[_3200].xyz));
        float _5296 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
        float _3233 = isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0));
        float _3234 = dot(vec3(_1220, _1221, _1222), vec3(_3227, _3228, _3229));
        float _5307 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
        float _3237 = isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0));
        float _3238 = dot(vec3(cbLight._m0[_3200].xyz), vec3(_3227, _3228, _3229));
        float _5318 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
        float _3242 = _3219 * _3219;
        float _3246 = ((_3237 * _3237) * (_3242 + (-1.0))) + 1.0;
        float _3253 = exp2(log2(1.0 - (isnan(1.0) ? _5318 : (isnan(_5318) ? 1.0 : min(_5318, 1.0)))) * 5.0);
        float _3260 = 1.0 - _3219;
        float _3270 = (0.5 / (((_3002 * ((_3233 * _3260) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3260) + _3219) * _3233))) * _3233;
        float _5329 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
        float _3272 = (isnan(1.0) ? _5329 : (isnan(_5329) ? 1.0 : min(_5329, 1.0))) * (_3242 / ((_3246 * _3246) * 3.141590118408203125));
        float _3273 = isnan(1.0) ? _2741 : (isnan(_2741) ? 1.0 : min(_2741, 1.0));
        _3194 = (((((_3253 * _3024) + _1381) * cbLight._m0[_3204].x) * _3272) * _3273) + _3136;
        _3196 = (((((_3253 * _3026) + _1383) * cbLight._m0[_3204].y) * _3272) * _3273) + _3137;
        _3198 = (((((_3253 * _3027) + _1384) * cbLight._m0[_3204].z) * _3272) * _3273) + _3138;
    }
    float _3304;
    float _3306;
    float _3308;
    if (_2911)
    {
        _3304 = _3194;
        _3306 = _3196;
        _3308 = _3198;
    }
    else
    {
        uint _3315 = _2726 + 3u;
        uint _3319 = _2726 + 11u;
        float _3333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3315].w)) * _1223) * 0.949999988079071044921875);
        float _3334 = _3333 * _3333;
        float _3335 = cbLight._m0[_3315].x + _1299;
        float _3336 = cbLight._m0[_3315].y + _1300;
        float _3337 = cbLight._m0[_3315].z + _1301;
        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
        float _3342 = _3341 * _3335;
        float _3343 = _3341 * _3336;
        float _3344 = _3341 * _3337;
        float _3345 = dot(vec3(_1220, _1221, _1222), vec3(cbLight._m0[_3315].xyz));
        float _5345 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
        float _3348 = isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0));
        float _3349 = dot(vec3(_1220, _1221, _1222), vec3(_3342, _3343, _3344));
        float _5356 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
        float _3352 = isnan(1.0) ? _5356 : (isnan(_5356) ? 1.0 : min(_5356, 1.0));
        float _3353 = dot(vec3(cbLight._m0[_3315].xyz), vec3(_3342, _3343, _3344));
        float _5367 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
        float _3357 = _3334 * _3334;
        float _3361 = ((_3352 * _3352) * (_3357 + (-1.0))) + 1.0;
        float _3368 = exp2(log2(1.0 - (isnan(1.0) ? _5367 : (isnan(_5367) ? 1.0 : min(_5367, 1.0)))) * 5.0);
        float _3375 = 1.0 - _3334;
        float _3385 = (0.5 / (((_3002 * ((_3348 * _3375) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3375) + _3334) * _3348))) * _3348;
        float _5378 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
        float _3387 = (isnan(1.0) ? _5378 : (isnan(_5378) ? 1.0 : min(_5378, 1.0))) * (_3357 / ((_3361 * _3361) * 3.141590118408203125));
        float _3388 = isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0));
        _3304 = (((((_3368 * _3024) + _1381) * cbLight._m0[_3319].x) * _3387) * _3388) + _3194;
        _3306 = (((((_3368 * _3026) + _1383) * cbLight._m0[_3319].y) * _3387) * _3388) + _3196;
        _3308 = (((((_3368 * _3027) + _1384) * cbLight._m0[_3319].z) * _3387) * _3388) + _3198;
    }
    float _3454;
    float _3456;
    float _3458;
    float _3460;
    float _3462;
    float _3464;
    if (_2724.y == 0u)
    {
        uvec4 _3409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3410 = _3409.x;
        uint _3421 = uint((float(_3409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1320) / _3410))) + floor(float(uint(cbSceneParam._m0[85u].x * _1319) / _3410)));
        float _3431 = (log2(_2502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3432 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
        uint _3435 = uint(isnan(14.0) ? _3432 : (isnan(_3432) ? 14.0 : min(_3432, 14.0)));
        uvec4 _3440 = texelFetch(g_lightClusterGridBuffer, int(((_3435 << 2u) + (_3421 << 6u)) >> 2u));
        uint _3441 = _3440.x;
        uint _3442 = _3409.z;
        float _3521;
        float _3523;
        float _3525;
        float _3527;
        float _3529;
        float _3531;
        if (((((1u << ((_3442 >> 4u) & 15u)) + 4294967295u) & _3441) == 0u) || ((_3442 & 240u) == 0u))
        {
            _3521 = 0.0;
            _3523 = 0.0;
            _3525 = 0.0;
            _3527 = 0.0;
            _3529 = 0.0;
            _3531 = 0.0;
        }
        else
        {
            float _3522;
            float _3524;
            float _3526;
            float _3528;
            float _3530;
            float _3532;
            float _3673 = 0.0;
            float _3674 = 0.0;
            float _3675 = 0.0;
            float _3676 = 0.0;
            float _3677 = 0.0;
            float _3678 = 0.0;
            uint _3679 = 0u;
            uint _3688;
            bool _3689;
            for (;;)
            {
                _3688 = texelFetch(g_lightClassification, int((((_3435 << 5u) + (_3421 << 9u)) + (_3679 << 2u)) >> 2u)).x;
                _3689 = _3688 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3689)
                {
                    frontier_phi_71_pred = _3678;
                    frontier_phi_71_pred_1 = _3677;
                    frontier_phi_71_pred_2 = _3676;
                    frontier_phi_71_pred_3 = _3675;
                    frontier_phi_71_pred_4 = _3674;
                    frontier_phi_71_pred_5 = _3673;
                }
                else
                {
                    float _3818;
                    float _3819;
                    float _3820;
                    float _3821;
                    float _3822;
                    float _3823;
                    uint _3824;
                    _3818 = _3673;
                    _3819 = _3674;
                    _3820 = _3675;
                    _3821 = _3676;
                    _3822 = _3677;
                    _3823 = _3678;
                    _3824 = _3688;
                    float _3745;
                    float _3746;
                    float _3747;
                    float _3748;
                    float _3749;
                    float _3750;
                    for (;;)
                    {
                        uint _3828 = uint(findLSB(_3824)) + (_3679 << 5u);
                        uint _3825 = (_3824 + 4294967295u) & _3824;
                        uint _3830 = _3828 * 48u;
                        vec4 _3844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3830)).x, texelFetch(g_PointLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3830 + 3u)).x));
                        uint _3850 = (_3828 * 48u) + 4u;
                        vec4 _3863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3850)).x, texelFetch(g_PointLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3850 + 3u)).x));
                        uint _3869 = (_3828 * 48u) + 8u;
                        vec3 _3880 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3869)).x, texelFetch(g_PointLightRenderingBuffer, int(_3869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3869 + 2u)).x));
                        float _3884 = _3844.x - _2500;
                        float _3885 = _3844.y - _2501;
                        float _3886 = _3844.z - _2502;
                        float _3887 = dot(vec3(_3884, _3885, _3886), vec3(_3884, _3885, _3886));
                        float _3890 = inversesqrt(_3887);
                        float _3891 = _3890 * _3884;
                        float _3892 = _3890 * _3885;
                        float _3893 = _3890 * _3886;
                        float _3894 = dot(vec3(_1338, _1341, _1344), vec3(_3891, _3892, _3893));
                        float _3899 = 1.0 - (_3887 * _3844.w);
                        float _5404 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                        float _3900 = isnan(1.0) ? _5404 : (isnan(_5404) ? 1.0 : min(_5404, 1.0));
                        float _3901 = sqrt(_3887) * _3863.w;
                        float _3904 = 1.39999997615814208984375 / (_3901 + 1.39999997615814208984375);
                        float _3905 = _3904 * _3904;
                        float _3908 = ((1.0 - _3905) * _3894) + _3905;
                        float _3911 = _3901 * _3901;
                        float _3915 = ((isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0))) * _3900) / ((_3911 * 0.699999988079071044921875) + 1.0);
                        float _3919 = (-0.0) - _2500;
                        float _3920 = (-0.0) - _2501;
                        float _3921 = (-0.0) - _2502;
                        float _3925 = inversesqrt(dot(vec3(_3919, _3920, _3921), vec3(_3919, _3920, _3921)));
                        float _3926 = _3925 * _3919;
                        float _3927 = _3925 * _3920;
                        float _3928 = _3925 * _3921;
                        float _3935 = exp2(log2(1.0 / ((_3911 * 3.5) + 5.0)) * 0.25);
                        float _3936 = 1.0 - _1413;
                        float _3943 = sqrt(1.0 - ((1.0 - (_3936 * _3936)) * (1.0 - (_3935 * _3935))));
                        float _3944 = _3943 * _3943;
                        float _3945 = _3944 * _3944;
                        float _3946 = _3926 + _3891;
                        float _3947 = _3927 + _3892;
                        float _3948 = _3928 + _3893;
                        float _3952 = inversesqrt(dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948)));
                        float _3956 = dot(vec3(_1338, _1341, _1344), vec3(_3926, _3927, _3928));
                        float _5420 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                        float _3959 = isnan(1.0) ? _5420 : (isnan(_5420) ? 1.0 : min(_5420, 1.0));
                        float _3960 = dot(vec3(_1338, _1341, _1344), vec3(_3952 * _3946, _3952 * _3947, _3952 * _3948));
                        float _5431 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                        float _3963 = isnan(1.0) ? _5431 : (isnan(_5431) ? 1.0 : min(_5431, 1.0));
                        float _3967 = ((_3963 * _3963) * (_3945 + (-1.0))) + 1.0;
                        float _3968 = _3904 * _3944;
                        float _3969 = _3968 * _3968;
                        float _3972 = ((1.0 - _3969) * _3894) + _3969;
                        float _5442 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                        float _3973 = isnan(1.0) ? _5442 : (isnan(_5442) ? 1.0 : min(_5442, 1.0));
                        float _3974 = 1.0 - _3944;
                        float _3984 = (0.5 / (((_3973 * ((_3959 * _3974) + _3944)) + 9.9999999392252902907785028219223e-09) + (((_3973 * _3974) + _3944) * _3959))) * _3973;
                        float _5453 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                        float _3995 = (((_3945 * 3.1415927410125732421875) * (isnan(1.0) ? _5453 : (isnan(_5453) ? 1.0 : min(_5453, 1.0)))) / ((_3967 * _3967) * ((_3911 * 2.1991131305694580078125) + 3.141590118408203125))) * _3900;
                        _3748 = (_3915 * _3863.x) + _3821;
                        _3749 = (_3915 * _3863.y) + _3822;
                        _3750 = (_3915 * _3863.z) + _3823;
                        _3745 = (_3995 * _3880.x) + _3818;
                        _3746 = (_3995 * _3880.y) + _3819;
                        _3747 = (_3995 * _3880.z) + _3820;
                        if (_3825 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3818 = _3745;
                            _3819 = _3746;
                            _3820 = _3747;
                            _3821 = _3748;
                            _3822 = _3749;
                            _3823 = _3750;
                            _3824 = _3825;
                        }
                    }
                    frontier_phi_71_pred = _3750;
                    frontier_phi_71_pred_1 = _3749;
                    frontier_phi_71_pred_2 = _3748;
                    frontier_phi_71_pred_3 = _3747;
                    frontier_phi_71_pred_4 = _3746;
                    frontier_phi_71_pred_5 = _3745;
                }
                _3532 = frontier_phi_71_pred;
                _3530 = frontier_phi_71_pred_1;
                _3528 = frontier_phi_71_pred_2;
                _3526 = frontier_phi_71_pred_3;
                _3524 = frontier_phi_71_pred_4;
                _3522 = frontier_phi_71_pred_5;
                uint _3680 = _3679 + 1u;
                if (_3680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3673 = _3522;
                    _3674 = _3524;
                    _3675 = _3526;
                    _3676 = _3528;
                    _3677 = _3530;
                    _3678 = _3532;
                    _3679 = _3680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3521 = _3522;
            _3523 = _3524;
            _3525 = _3526;
            _3527 = _3528;
            _3529 = _3530;
            _3531 = _3532;
        }
        uvec4 _3535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3536 = _3535.z;
        uint _3538 = (_3536 >> 8u) & 15u;
        float _3641;
        float _3643;
        float _3645;
        float _3647;
        float _3649;
        float _3651;
        if (((4294967295u << _3538) & _3441) == 0u)
        {
            _3641 = _3521;
            _3643 = _3523;
            _3645 = _3525;
            _3647 = _3527;
            _3649 = _3529;
            _3651 = _3531;
        }
        else
        {
            float _3666 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
            float _3667 = _3666 * _2500;
            float _3668 = _3666 * _2501;
            float _3669 = _3666 * _2502;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3538 < ((_3536 >> 12u) & 15u))
            {
                float _3642;
                float _3644;
                float _3646;
                float _3648;
                float _3650;
                float _3652;
                float _3801 = _3521;
                float _3802 = _3523;
                float _3803 = _3525;
                float _3804 = _3527;
                float _3805 = _3529;
                float _3806 = _3531;
                uint _3807 = _3538;
                uint _3816;
                bool _3817;
                for (;;)
                {
                    _3816 = texelFetch(g_lightClassification, int((((_3435 << 5u) + (_3421 << 9u)) + (_3807 << 2u)) >> 2u)).x;
                    _3817 = _3816 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3817)
                    {
                        frontier_phi_82_pred = _3806;
                        frontier_phi_82_pred_1 = _3805;
                        frontier_phi_82_pred_2 = _3804;
                        frontier_phi_82_pred_3 = _3803;
                        frontier_phi_82_pred_4 = _3802;
                        frontier_phi_82_pred_5 = _3801;
                    }
                    else
                    {
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4302;
                        float _4303;
                        float _4304;
                        float _4305;
                        float _4306;
                        float _4307;
                        float _4022 = _3801;
                        float _4023 = _3802;
                        float _4024 = _3803;
                        float _4025 = _3804;
                        float _4026 = _3805;
                        float _4027 = _3806;
                        uint _4028 = _3816;
                        uint _4029;
                        vec4 _4054;
                        float _4055;
                        vec4 _4070;
                        vec3 _4082;
                        vec4 _4097;
                        vec4 _4112;
                        float _4158;
                        bool _4159;
                        for (;;)
                        {
                            uint _4039 = ((_3807 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4028));
                            _4029 = (_4028 + 4294967295u) & _4028;
                            uint _4041 = _4039 * 40u;
                            _4054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4041 + 3u)).x));
                            _4055 = _4054.w;
                            uint _4057 = (_4039 * 40u) + 4u;
                            _4070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4057 + 3u)).x));
                            uint _4072 = (_4039 * 40u) + 8u;
                            _4082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4072 + 2u)).x));
                            uint _4084 = (_4039 * 40u) + 16u;
                            _4097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4084 + 3u)).x));
                            uint _4099 = (_4039 * 40u) + 20u;
                            _4112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4099 + 3u)).x));
                            uint _4114 = (_4039 * 40u) + 24u;
                            vec4 _4127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4114 + 3u)).x));
                            uint _4133 = (_4039 * 40u) + 28u;
                            vec4 _4146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 3u)).x));
                            _4158 = fma(_2502, _4146.z, fma(_2501, _4146.y, _4146.x * _2500)) + _4146.w;
                            _4159 = !((fma(_2502, _4127.z, fma(_2501, _4127.y, _4127.x * _2500)) + _4127.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4159)
                            {
                                float _4186 = _4054.x - _2500;
                                float _4187 = _4054.y - _2501;
                                float _4188 = _4054.z - _2502;
                                float _4189 = dot(vec3(_4186, _4187, _4188), vec3(_4186, _4187, _4188));
                                float _4192 = inversesqrt(_4189);
                                float _4193 = _4192 * _4186;
                                float _4194 = _4192 * _4187;
                                float _4195 = _4192 * _4188;
                                float _4199 = 1.0 - (_4189 / (_4055 * _4055));
                                float _5464 = isnan(0.0) ? _4199 : (isnan(_4199) ? 0.0 : max(_4199, 0.0));
                                float _4200 = isnan(1.0) ? _5464 : (isnan(_5464) ? 1.0 : min(_5464, 1.0));
                                float _4204 = sqrt(_4189) * _4070.w;
                                float _4206 = 1.39999997615814208984375 / (_4204 + 1.39999997615814208984375);
                                float _4207 = _4206 * _4206;
                                float _4210 = ((1.0 - _4207) * dot(vec3(_4193, _4194, _4195), vec3(_1338, _1341, _1344))) + _4207;
                                float _4213 = _4204 * _4204;
                                float _4217 = (fma(_2502, _4097.z, fma(_2501, _4097.y, _4097.x * _2500)) + _4097.w) / _4158;
                                float _4218 = (fma(_2502, _4112.z, fma(_2501, _4112.y, _4112.x * _2500)) + _4112.w) / _4158;
                                float _4222 = 1.0 - dot(vec2(_4217, _4218), vec2(_4217, _4218));
                                float _5480 = isnan(0.0) ? _4222 : (isnan(_4222) ? 0.0 : max(_4222, 0.0));
                                float _4223 = isnan(1.0) ? _5480 : (isnan(_5480) ? 1.0 : min(_5480, 1.0));
                                float _4224 = _4223 * (((isnan(0.0) ? _4210 : (isnan(_4210) ? 0.0 : max(_4210, 0.0))) * _4200) / ((_4213 * 0.699999988079071044921875) + 1.0));
                                float _4236 = exp2(log2(1.0 / ((_4213 * 3.5) + 5.0)) * 0.25);
                                float _4237 = 1.0 - _1413;
                                float _4244 = sqrt(1.0 - ((1.0 - (_4237 * _4237)) * (1.0 - (_4236 * _4236))));
                                float _4245 = _4244 * _4244;
                                float _4246 = _4245 * _4245;
                                float _4247 = _4193 - _3667;
                                float _4248 = _4194 - _3668;
                                float _4249 = _4195 - _3669;
                                float _4253 = inversesqrt(dot(vec3(_4247, _4248, _4249), vec3(_4247, _4248, _4249)));
                                float _4257 = dot(vec3(_1338, _1341, _1344), vec3((-0.0) - _3667, (-0.0) - _3668, (-0.0) - _3669));
                                float _5491 = isnan(0.0) ? _4257 : (isnan(_4257) ? 0.0 : max(_4257, 0.0));
                                float _4260 = isnan(1.0) ? _5491 : (isnan(_5491) ? 1.0 : min(_5491, 1.0));
                                float _4261 = dot(vec3(_1338, _1341, _1344), vec3(_4253 * _4247, _4253 * _4248, _4253 * _4249));
                                float _5502 = isnan(0.0) ? _4261 : (isnan(_4261) ? 0.0 : max(_4261, 0.0));
                                float _4264 = isnan(1.0) ? _5502 : (isnan(_5502) ? 1.0 : min(_5502, 1.0));
                                float _4268 = ((_4264 * _4264) * (_4246 + (-1.0))) + 1.0;
                                float _4269 = _4206 * _4245;
                                float _4270 = _4269 * _4269;
                                float _4276 = ((1.0 - _4270) * dot(vec3(_1338, _1341, _1344), vec3(_4193, _4194, _4195))) + _4270;
                                float _5513 = isnan(0.0) ? _4276 : (isnan(_4276) ? 0.0 : max(_4276, 0.0));
                                float _4277 = isnan(1.0) ? _5513 : (isnan(_5513) ? 1.0 : min(_5513, 1.0));
                                float _4278 = 1.0 - _4245;
                                float _4288 = (0.5 / (((_4277 * ((_4260 * _4278) + _4245)) + 9.9999999392252902907785028219223e-09) + (((_4277 * _4278) + _4245) * _4260))) * _4277;
                                float _5524 = isnan(0.0) ? _4288 : (isnan(_4288) ? 0.0 : max(_4288, 0.0));
                                float _4298 = (_4223 * _4200) * (((_4246 * 3.1415927410125732421875) * (isnan(1.0) ? _5524 : (isnan(_5524) ? 1.0 : min(_5524, 1.0)))) / ((_4268 * _4268) * ((_4213 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4224 * _4070.z;
                                frontier_phi_88_pred_1 = _4224 * _4070.y;
                                frontier_phi_88_pred_2 = _4224 * _4070.x;
                                frontier_phi_88_pred_3 = _4298 * _4082.z;
                                frontier_phi_88_pred_4 = _4298 * _4082.y;
                                frontier_phi_88_pred_5 = _4298 * _4082.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4307 = frontier_phi_88_pred;
                            _4306 = frontier_phi_88_pred_1;
                            _4305 = frontier_phi_88_pred_2;
                            _4304 = frontier_phi_88_pred_3;
                            _4303 = frontier_phi_88_pred_4;
                            _4302 = frontier_phi_88_pred_5;
                            _4012 = _4305 + _4025;
                            _4013 = _4306 + _4026;
                            _4014 = _4307 + _4027;
                            _4009 = _4302 + _4022;
                            _4010 = _4303 + _4023;
                            _4011 = _4304 + _4024;
                            if (_4029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4022 = _4009;
                                _4023 = _4010;
                                _4024 = _4011;
                                _4025 = _4012;
                                _4026 = _4013;
                                _4027 = _4014;
                                _4028 = _4029;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _4014;
                        frontier_phi_82_pred_1 = _4013;
                        frontier_phi_82_pred_2 = _4012;
                        frontier_phi_82_pred_3 = _4011;
                        frontier_phi_82_pred_4 = _4010;
                        frontier_phi_82_pred_5 = _4009;
                    }
                    _3652 = frontier_phi_82_pred;
                    _3650 = frontier_phi_82_pred_1;
                    _3648 = frontier_phi_82_pred_2;
                    _3646 = frontier_phi_82_pred_3;
                    _3644 = frontier_phi_82_pred_4;
                    _3642 = frontier_phi_82_pred_5;
                    uint _3808 = _3807 + 1u;
                    if (_3808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3801 = _3642;
                        _3802 = _3644;
                        _3803 = _3646;
                        _3804 = _3648;
                        _3805 = _3650;
                        _3806 = _3652;
                        _3807 = _3808;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3648;
                frontier_phi_63_64_ladder_1 = _3652;
                frontier_phi_63_64_ladder_2 = _3650;
                frontier_phi_63_64_ladder_3 = _3646;
                frontier_phi_63_64_ladder_4 = _3644;
                frontier_phi_63_64_ladder_5 = _3642;
            }
            else
            {
                frontier_phi_63_64_ladder = _3527;
                frontier_phi_63_64_ladder_1 = _3531;
                frontier_phi_63_64_ladder_2 = _3529;
                frontier_phi_63_64_ladder_3 = _3525;
                frontier_phi_63_64_ladder_4 = _3523;
                frontier_phi_63_64_ladder_5 = _3521;
            }
            _3641 = frontier_phi_63_64_ladder_5;
            _3643 = frontier_phi_63_64_ladder_4;
            _3645 = frontier_phi_63_64_ladder_3;
            _3647 = frontier_phi_63_64_ladder;
            _3649 = frontier_phi_63_64_ladder_2;
            _3651 = frontier_phi_63_64_ladder_1;
        }
        float _3656 = isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0));
        _3454 = (_3656 * _3647) + _2966;
        _3456 = (_3656 * _3649) + _2968;
        _3458 = (_3656 * _3651) + _2970;
        _3460 = ((_3641 * _1381) * _3656) + _3304;
        _3462 = ((_3643 * _1383) * _3656) + _3306;
        _3464 = ((_3645 * _1384) * _3656) + _3308;
    }
    else
    {
        _3454 = _2966;
        _3456 = _2968;
        _3458 = _2970;
        _3460 = _3304;
        _3462 = _3306;
        _3464 = _3308;
    }
    float _5540 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _5551 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
    float _5562 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _3481 = ((isnan(1.0) ? _5540 : (isnan(_5540) ? 1.0 : min(_5540, 1.0))) * (_3454 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1397))) + ((_3460 + ((isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0))) * _2234)) * cbPerFrame._m0[3u].x);
    float _3482 = ((isnan(1.0) ? _5551 : (isnan(_5551) ? 1.0 : min(_5551, 1.0))) * (_3456 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1397))) + ((_3462 + ((isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0))) * _2234)) * cbPerFrame._m0[3u].x);
    float _3483 = ((isnan(1.0) ? _5562 : (isnan(_5562) ? 1.0 : min(_5562, 1.0))) * (_3458 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1397))) + ((_3464 + ((isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0))) * _2234)) * cbPerFrame._m0[3u].x);
    uint _3484 = _307 + 6u;
    float _3492 = _1319 / cbSceneParam._m0[86u].x;
    float _3493 = _1320 / cbSceneParam._m0[86u].y;
    vec4 _3507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3492, _3493, (log2((isnan(cbSceneParam._m0[77u].w) ? _1242 : (isnan(_1242) ? cbSceneParam._m0[77u].w : min(_1242, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3509 = _3507.x;
    float _3510 = _3507.y;
    float _3511 = _3507.z;
    float _3512 = _3507.w;
    float _3583;
    float _3585;
    float _3587;
    float _3589;
    if (_1242 > cbSceneParam._m0[78u].w)
    {
        float _3546 = isnan(_1242) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1242 : min(cbSceneParam._m0[80u].w, _1242));
        float _3547 = _3546 / _1242;
        float _3558 = _3547 * _1292;
        float _3559 = _1293 * _3547;
        float _3560 = (-0.0) - _3559;
        float _3561 = _3547 * _1294;
        float _3563 = (cbSceneParam._m0[77u].w * _3560) / _3546;
        float _3564 = _3563 + cbSceneParam._m0[79u].w;
        float _3565 = cbSceneParam._m0[79u].w - _3559;
        float _3571 = sqrt(((_3558 * _3558) + (_3559 * _3559)) + (_3561 * _3561));
        float _3574 = (1.0 - (cbSceneParam._m0[77u].w / _3546)) * _3571;
        float _3579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3758;
        if (abs((_3560 - _3563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3758 = ((((_3564 > 0.0) ? exp2(_3579 * _3564) : (2.0 - exp2(_3581 * _3564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3574;
        }
        else
        {
            float _3702 = 1.0 / cbSceneParam._m0[80u].x;
            float _3703 = isnan(_3565) ? _3564 : (isnan(_3564) ? _3565 : max(_3564, _3565));
            float _3704 = isnan(_3565) ? _3564 : (isnan(_3564) ? _3565 : min(_3564, _3565));
            float _3713 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : min(_3703, 0.0));
            float _3714 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : min(_3704, 0.0));
            _3758 = ((abs(_3571 / _3560) * cbSceneParam._m0[80u].y) * ((((_3713 - _3714) * 2.0) - ((exp2(_3579 * (isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0)))) - exp2(_3579 * (isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))))) * _3702)) - ((exp2(_3581 * _3713) - exp2(_3581 * _3714)) * _3702))) + (_3574 * cbSceneParam._m0[80u].z);
        }
        vec4 _3760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3492, _3493, 1.0), 0.0);
        float _3769 = exp2((_3758 * (-1.44269502162933349609375)) * (1.0 - _3760.w));
        float _3770 = log2(_3769);
        float _3786 = log2(_3512);
        _3583 = (exp2(_3786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3770 * cbSceneParam._m0[78u].x)) * _3760.x) / cbSceneParam._m0[78u].x)) + _3509;
        _3585 = (exp2(_3786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3770 * cbSceneParam._m0[78u].y)) * _3760.y) / cbSceneParam._m0[78u].y)) + _3510;
        _3587 = (exp2(_3786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3770 * cbSceneParam._m0[78u].z)) * _3760.z) / cbSceneParam._m0[78u].z)) + _3511;
        _3589 = _3769 * _3512;
    }
    else
    {
        _3583 = _3509;
        _3585 = _3510;
        _3587 = _3511;
        _3589 = _3512;
    }
    bool _3796;
    vec4 _3599;
    vec4 _3621;
    float _3623;
    float _3627;
    float _3628;
    float _3629;
    float _3630;
    bool _3640;
    for (;;)
    {
        _3599 = cbMatDynParam._m0[0u];
        float _3601 = roundEven(_3599.y);
        bool _3602 = _3601 == 3.0;
        float _3603 = log2(_3589);
        float _3610 = exp2(_3603 * cbSceneParam._m0[78u].x) * _3481;
        float _3611 = exp2(_3603 * cbSceneParam._m0[78u].y) * _3482;
        float _3612 = exp2(_3603 * cbSceneParam._m0[78u].z) * _3483;
        float _3619 = _1308 + (-0.5);
        _3621 = cbMtdParam._m0[1u];
        _3623 = _3621.y * _3619;
        float _3626 = (_3601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3627 = _3626 * (_3602 ? _3610 : (_3610 + (cbSceneParam._m0[72u].w * _3583)));
        _3628 = _3626 * (_3602 ? _3611 : (_3611 + (cbSceneParam._m0[72u].w * _3585)));
        _3629 = _3626 * (_3602 ? _3612 : (_3612 + (cbSceneParam._m0[72u].w * _3587)));
        _3630 = _3619 * 0.999000012874603271484375;
        _3640 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3640)
        {
            if ((cbInstanceData._m0[_307 + 7u].x + _3630) < 0.5)
            {
                _3796 = true;
                break;
            }
        }
        uint _3737 = _1357 + uint(_3599.w);
        if ((cbInstanceData._m0[_3737].w < 1.0) && ((cbInstanceData._m0[_3737].w + _3630) < 0.5))
        {
            _3796 = true;
            break;
        }
        if ((_3623 + 1.0) < _3621.x)
        {
            _3796 = true;
            break;
        }
        _3796 = false;
        break;
    }
    float _4000;
    if (_3796)
    {
        discard_state = true;
        _4000 = 0.0;
    }
    else
    {
        _4000 = cbInstanceData._m0[_3484].w;
    }
    SV_Target.x = _3627;
    SV_Target.y = _3628;
    SV_Target.z = _3629;
    SV_Target.w = _4000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3484].w;
    discard_exit();
}


