#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1628;
float _4029;
float _4030;
float _4031;
float _4032;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4041 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4052 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _4063 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    uint _294 = uint(roundEven(NORMAL.w)) * 13u;
    uint _299 = _294 + 1u;
    uint _303 = _294 + 2u;
    float _312 = sqrt(((cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x)) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x));
    float _313 = _312 * TEXCOORD.z;
    float _314 = _312 * TEXCOORD.w;
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _313) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _314) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _381 = _376.x * cbMtdParam._m0[11u].x;
    float _382 = _376.y * cbMtdParam._m0[11u].y;
    float _383 = _376.z * cbMtdParam._m0[11u].z;
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _313) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _314) + cbTextureTilingScale._m0[5u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _421.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4074 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _495 = (_488 * ((_402.x * cbMtdParam._m0[12u].x) - _381)) + _381;
    float _496 = (_488 * ((_402.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _497 = (_488 * ((_402.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _313) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _314) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _421.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _313) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _314) + cbTextureTilingScale._m0[24u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _608 = _606.x;
    float _618 = dot(vec4(_608, _606.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _630 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _421.z) * 2.0) - ((((_608 - _618) * cbMtdParam._m0[23u].w) + _618) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4096 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _641 = (_350.x * cbMtdParam._m0[9u].x) * ((_631 * ((_589.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _642 = (_350.y * cbMtdParam._m0[9u].y) * ((_631 * ((_589.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _643 = (_350.z * cbMtdParam._m0[9u].z) * ((_631 * ((_589.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _647 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _327.x) * _641;
    float _650 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _327.y) * _642;
    float _653 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _327.z) * _643;
    float _661 = (((_641 - _647) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _647) * 4.55000019073486328125;
    float _663 = (((_642 - _650) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) + _650) * 4.55000019073486328125;
    float _665 = (((_643 - _653) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) + _653) * 4.55000019073486328125;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _313) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _314) + cbTextureTilingScale._m0[14u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _313) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _314) + cbTextureTilingScale._m0[20u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _313) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _314) + cbTextureTilingScale._m0[4u].w));
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _744 = _742.x;
    float _745 = _742.y;
    float _746 = _742.z;
    float _753 = ((_725.x - _744) * _488) + _744;
    float _754 = ((_725.y - _745) * _488) + _745;
    float _755 = ((_725.z - _746) * _488) + _746;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _313) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _314) + cbTextureTilingScale._m0[2u].w));
    float _778 = ((_767.x - _753) * _561) + _753;
    float _779 = ((_767.y - _754) * _561) + _754;
    float _780 = ((_767.z - _755) * _561) + _755;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _313) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _314) + cbTextureTilingScale._m0[23u].w));
    float _805 = ((_792.z - _780) * _631) + _780;
    float _808 = ((((_792.x - _778) * _631) + _778) * 2.0) + (-1.0);
    float _809 = ((((_792.y - _779) * _631) + _779) * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4107 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _815 = sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))));
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _854 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _313) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _314) + cbTextureTilingScale._m0[11u].w));
    float _856 = _854.x;
    float _857 = 1.0 - _856;
    float _872 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_856 - _857) * cbMtdParam._m0[24u].z) + _857) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4118 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _873 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _880 = (_873 * ((_683.x * cbMtdParam._m0[18u].x) - _661)) + _661;
    float _881 = (_873 * ((_683.y * cbMtdParam._m0[18u].y) - _663)) + _663;
    float _882 = (_873 * ((_683.z * cbMtdParam._m0[18u].z) - _665)) + _665;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _910 = _908.x;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _313) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _314) + cbTextureTilingScale._m0[9u].w)).x - _910) * _488) + _910;
    float _944 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _313) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _314) + cbTextureTilingScale._m0[21u].w)).x - _927) * _561) + _927;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _313) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _314) + cbTextureTilingScale._m0[10u].w)).x - _944) * _631) + _944;
    float _966 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _962) * cbMtdParam._m0[19u].z) + _962;
    float _968 = _966 - (_966 * _873);
    float _973 = (((_702.z - _805) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _805;
    float _977 = ((_829.z - _973) * cbMtdParam._m0[19u].w) + _973;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _313) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _314) + cbTextureTilingScale._m0[15u].w));
    float _997 = (_990.x * 2.0) + (-1.0);
    float _998 = (_990.y * 2.0) + (-1.0);
    float _999 = dot(vec2(_997, _998), vec2(_997, _998));
    float _4129 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1007 = (_873 * (_990.z - _977)) + _977;
    float _1016 = (_808 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_702.x * 2.0) + (-1.0)))) + (((_829.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1017 = (_809 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_702.y * 2.0) + (-1.0)))) + (((_829.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1029 = (((_997 - _1016) + (cbMtdParam._m0[21u].x * _1016)) * _873) + _1016;
    float _1030 = (((_998 - _1017) + (cbMtdParam._m0[21u].x * _1017)) * _873) + _1017;
    float _1031 = (_873 * (sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _815)) + _815;
    float _1035 = cbMtdParam._m0[22u].x + _829.w;
    float _1038 = fma(_1031, _260 * NORMAL.x, fma(_1030, _267 * TANGENT.x, (_253 * _245) * _1029));
    float _1041 = fma(_1031, _260 * NORMAL.y, fma(_1030, _267 * TANGENT.y, (_253 * _246) * _1029));
    float _1044 = fma(_1031, _260 * NORMAL.z, fma(_1030, _267 * TANGENT.z, (_253 * _247) * _1029));
    float _1048 = inversesqrt(dot(vec3(_1038, _1041, _1044), vec3(_1038, _1041, _1044)));
    float _1049 = _1048 * _1038;
    float _1050 = _1048 * _1041;
    float _1051 = _1048 * _1044;
    float _4140 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1052 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4162 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4173 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4184 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4195 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _1057 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _1071 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1121 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1111);
    float _1122 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1111);
    float _1123 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1111);
    float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
    float _1128 = _1121 * _1127;
    float _1129 = _1122 * _1127;
    float _1130 = _1123 * _1127;
    vec4 _1135 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1137 = _1135.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1309 = sqrt(((_1121 * _1121) + (_1122 * _1122)) + (_1123 * _1123));
        float _1315 = (cbMatDynParam._m0[5u].x * _1309) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1320 = (cbMatDynParam._m0[5u].z * _1309) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1316)) + _1316) < ((_1137 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1148 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1149 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1167 = fma(_1051, cbSceneParam._m0[5u].z, fma(_1050, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1049));
    float _1170 = fma(_1051, cbSceneParam._m0[6u].z, fma(_1050, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1049));
    float _1173 = fma(_1051, cbSceneParam._m0[7u].z, fma(_1050, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1049));
    uint _1186 = _294 + 9u;
    uint _1187 = _1186 + uint(cbMatDynParam._m0[0u].w);
    float _1193 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_1187].x;
    float _1194 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_1187].y;
    float _1195 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_1187].z;
    float _4228 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _1199 = 1.0 - _1057;
    float _1200 = _1196 * _1199;
    float _1201 = _1197 * _1199;
    float _1202 = _1198 * _1199;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1057;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1057;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1057;
    float _1210 = _1207 + 0.039999999105930328369140625;
    float _1212 = _1208 + 0.039999999105930328369140625;
    float _1213 = _1209 + 0.039999999105930328369140625;
    vec4 _1222 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1148, cbSceneParam._m0[86u].y * _1149));
    float _1226 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _1222.x;
    float _1227 = dot(vec3(_1049, _1050, _1051), vec3(_1128, _1129, _1130));
    float _1230 = _1227 * 2.0;
    float _1234 = (_1230 * _1049) - _1128;
    float _1235 = (_1230 * _1050) - _1129;
    float _1236 = (_1230 * _1051) - _1130;
    float _1240 = abs(dot(vec3(_1128, _1129, _1130), vec3(_1049, _1050, _1051)));
    float _4261 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1242 = sqrt(_1052);
    float _1255 = exp2((_1242 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1242 * 3.0));
    float _1261 = (1.0 - _1255) * ((_1242 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1262 = _1255 * _1242;
    float _1290 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1627;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1352 = fma(_1298, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290));
        float _1356 = fma(_1298, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290));
        float _1360 = fma(_1298, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290));
        float _1385 = _1290 + _1049;
        float _1386 = _1294 + _1050;
        float _1387 = _1298 + _1051;
        float _1397 = fma(_1387, cbModelParam._m0[26u].z, fma(_1386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1385)) - _1352;
        float _1398 = fma(_1387, cbModelParam._m0[27u].z, fma(_1386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1385)) - _1356;
        float _1399 = fma(_1387, cbModelParam._m0[28u].z, fma(_1386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1385)) - _1360;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1352 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1356 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[34u].z) + ((((((_1360 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1455 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1421.x + (-0.5));
        float _1457 = _1455 * (_1421.y + (-0.5));
        float _1458 = _1455 * (_1421.z + (-0.5));
        float _1465 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1428.x + (-0.5));
        float _1467 = _1465 * (_1428.y + (-0.5));
        float _1468 = _1465 * (_1428.z + (-0.5));
        float _1475 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1435.x + (-0.5));
        float _1477 = _1475 * (_1435.y + (-0.5));
        float _1478 = _1475 * (_1435.z + (-0.5));
        float _1485 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1442.x + (-0.5));
        float _1487 = _1485 * (_1442.y + (-0.5));
        float _1488 = _1485 * (_1442.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1509 = (dot(vec3(_1049, _1050, _1051), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1519 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4309 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1521 + 1.0))) + _1526) * _1489;
        float _1536 = _1457 * 0.5;
        float _1537 = _1467 * 0.5;
        float _1538 = _1477 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1049, _1050, _1051), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4342 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1563 + 1.0))) + _1568) * _1490;
        float _1578 = _1458 * 0.5;
        float _1579 = _1468 * 0.5;
        float _1580 = _1478 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_1049, _1050, _1051), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4375 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1605 + 1.0))) + _1610) * _1491;
        _1627 = _1458;
        _1629 = _1457;
        _1630 = _1456;
        _1631 = _1468;
        _1632 = _1467;
        _1633 = _1466;
        _1634 = _1478;
        _1635 = _1477;
        _1636 = _1476;
        _1637 = _1491;
        _1638 = _1490;
        _1639 = _1489;
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1641 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1628;
        _1629 = _1628;
        _1630 = _1628;
        _1631 = _1628;
        _1632 = _1628;
        _1633 = _1628;
        _1634 = _1628;
        _1635 = _1628;
        _1636 = _1628;
        _1637 = _1628;
        _1638 = _1628;
        _1639 = _1628;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1668 = fma(_1298, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290));
        float _1672 = fma(_1298, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290));
        float _1676 = fma(_1298, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290));
        float _1699 = _1290 + _1049;
        float _1700 = _1294 + _1050;
        float _1701 = _1298 + _1051;
        float _1711 = fma(_1701, cbModelParam._m0[30u].z, fma(_1700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1699)) - _1668;
        float _1712 = fma(_1701, cbModelParam._m0[31u].z, fma(_1700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1699)) - _1672;
        float _1713 = fma(_1701, cbModelParam._m0[32u].z, fma(_1700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1699)) - _1676;
        float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
        float _1730 = ((_1717 * _1711) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1668 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1717 * _1712) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1672 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1717 * _1713) / cbModelParam._m0[35u].z) + ((((((_1676 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        float _1767 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1734.x + (-0.5));
        float _1769 = _1767 * (_1734.y + (-0.5));
        float _1770 = _1767 * (_1734.z + (-0.5));
        float _1777 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1741.x + (-0.5));
        float _1779 = _1777 * (_1741.y + (-0.5));
        float _1780 = _1777 * (_1741.z + (-0.5));
        float _1787 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1748.x + (-0.5));
        float _1789 = _1787 * (_1748.y + (-0.5));
        float _1790 = _1787 * (_1748.z + (-0.5));
        float _1797 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1755.x + (-0.5));
        float _1799 = _1797 * (_1755.y + (-0.5));
        float _1800 = _1797 * (_1755.z + (-0.5));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = _1768 * 0.5;
        float _1805 = _1778 * 0.5;
        float _1806 = _1788 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1049, _1050, _1051), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4438 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1831 + 1.0))) + _1836) * _1801;
        float _1846 = _1769 * 0.5;
        float _1847 = _1779 * 0.5;
        float _1848 = _1789 * 0.5;
        float _1849 = dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848));
        float _1854 = (_1849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1849);
        float _1862 = (dot(vec3(_1049, _1050, _1051), vec3(_1854 * _1846, _1854 * _1847, _1854 * _1848)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1873 = _1872 * 2.0;
        float _1877 = (1.0 - _1872) / (_1872 + 1.0);
        float _4471 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1887 = ((((1.0 - _1878) * (_1873 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1873 + 1.0))) + _1878) * _1802;
        float _1888 = _1770 * 0.5;
        float _1889 = _1780 * 0.5;
        float _1890 = _1790 * 0.5;
        float _1891 = dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890));
        float _1896 = (_1891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1891);
        float _1904 = (dot(vec3(_1049, _1050, _1051), vec3(_1896 * _1888, _1896 * _1889, _1896 * _1890)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1913 = sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1915 = _1914 * 2.0;
        float _1919 = (1.0 - _1914) / (_1914 + 1.0);
        float _4504 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1929 = ((((1.0 - _1920) * (_1915 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1915 + 1.0))) + _1920) * _1803;
        _1937 = _1770;
        _1938 = _1769;
        _1939 = _1768;
        _1940 = _1780;
        _1941 = _1779;
        _1942 = _1778;
        _1943 = _1790;
        _1944 = _1789;
        _1945 = _1788;
        _1946 = _1803;
        _1947 = _1802;
        _1948 = _1801;
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)));
    }
    else
    {
        _1937 = _1628;
        _1938 = _1628;
        _1939 = _1628;
        _1940 = _1628;
        _1941 = _1628;
        _1942 = _1628;
        _1943 = _1628;
        _1944 = _1628;
        _1945 = _1628;
        _1946 = _1628;
        _1947 = _1628;
        _1948 = _1628;
        _1949 = 0.0;
        _1950 = 0.0;
        _1951 = 0.0;
    }
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1640)) + _1640;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1641)) + _1641;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1642)) + _1642;
    float _1984 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1961));
    float _2005 = _1234 * 0.5;
    float _2006 = _1235 * 0.5;
    float _2007 = _1236 * 0.5;
    float _2008 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2011 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2014 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2048;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2021 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1627, _1631, _1634, _1637));
        float _2025 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1629, _1632, _1635, _1638));
        float _2029 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1630, _1633, _1636, _1639));
        float _2036 = dot(vec4(cbModelParam._m0[39u]), vec4(_2005, _2006, _2007, 1.0));
        _2048 = dot(vec3(isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2036) ? 0.0 : (isnan(0.0) ? _2036 : max(0.0, _2036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2048 = 1.0;
    }
    float _2059;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2050 = dot(vec4(cbModelParam._m0[40u]), vec4(_2005, _2006, _2007, 1.0));
        _2059 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2050) ? 0.0 : (isnan(0.0) ? _2050 : max(0.0, _2050))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2059 = 1.0;
    }
    float _2063 = (_2059 * cbModelParam._m0[1u].x) + (_2048 * (1.0 - cbModelParam._m0[1u].x));
    float _2073 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1052);
    float _2074 = isnan(_2073) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2073 : min(cbModelParam._m0[25u].z, _2073));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2121 = fma(_1298, cbModelParam._m0[13u].z, fma(_1294, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1290)) + cbModelParam._m0[13u].w;
        float _2125 = fma(_1298, cbModelParam._m0[14u].z, fma(_1294, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1290)) + cbModelParam._m0[14u].w;
        float _2129 = fma(_1298, cbModelParam._m0[15u].z, fma(_1294, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1290)) + cbModelParam._m0[15u].w;
        float _2132 = fma(_1236, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1234));
        float _2135 = fma(_1236, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1234));
        float _2138 = fma(_1236, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1234));
        float _2166;
        if (_2132 > 0.0)
        {
            _2166 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2166 = frontier_phi_17_15_ladder;
        }
        float _2389;
        if (_2135 > 0.0)
        {
            _2389 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2389 = frontier_phi_26_22_ladder;
        }
        float _2646;
        if (_2138 > 0.0)
        {
            _2646 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2646 = frontier_phi_38_33_ladder;
        }
        float _2648 = isnan(_2389) ? _2166 : (isnan(_2166) ? _2389 : min(_2166, _2389));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _2132) + _2121;
        float _2654 = (_2649 * _2135) + _2125;
        float _2655 = (_2649 * _2138) + _2129;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2656;
        float _2660 = _2656 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 > _2660) || ((_2654 < _2658) || ((_2653 < _2658) || (_2653 > _2660))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2655, cbModelParam._m0[9u].z, fma(_2654, cbModelParam._m0[9u].y, _2653 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2655, cbModelParam._m0[10u].z, fma(_2654, cbModelParam._m0[10u].y, _2653 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2655, cbModelParam._m0[11u].z, fma(_2654, cbModelParam._m0[11u].y, _2653 * cbModelParam._m0[11u].x))), _2074);
            frontier_phi_16_38_ladder = _2783.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2783.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2783.x * cbModelParam._m0[1u].y;
        }
        _2154 = frontier_phi_16_38_ladder_2;
        _2156 = frontier_phi_16_38_ladder_1;
        _2158 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1234, _1235, _1236), _2074);
        _2154 = _2142.x * cbModelParam._m0[1u].y;
        _2156 = _2142.y * cbModelParam._m0[1u].y;
        _2158 = _2142.z * cbModelParam._m0[1u].y;
    }
    float _2162 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1052);
    float _2163 = isnan(_2162) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2162 : min(cbModelParam._m0[25u].w, _2162));
    float _2252;
    float _2254;
    float _2256;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2216 = fma(_1298, cbModelParam._m0[21u].z, fma(_1294, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1290)) + cbModelParam._m0[21u].w;
        float _2220 = fma(_1298, cbModelParam._m0[22u].z, fma(_1294, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1290)) + cbModelParam._m0[22u].w;
        float _2224 = fma(_1298, cbModelParam._m0[23u].z, fma(_1294, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1290)) + cbModelParam._m0[23u].w;
        float _2227 = fma(_1236, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1234));
        float _2230 = fma(_1236, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1234));
        float _2233 = fma(_1236, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1234));
        float _2394;
        if (_2227 > 0.0)
        {
            _2394 = abs((1.0 - _2216) / _2227);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2216 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2394 = frontier_phi_28_24_ladder;
        }
        float _2673;
        if (_2230 > 0.0)
        {
            _2673 = abs((1.0 - _2220) / _2230);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2220 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2673 = frontier_phi_40_35_ladder;
        }
        float _2886;
        if (_2233 > 0.0)
        {
            _2886 = abs((1.0 - _2224) / _2233);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2224 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2886 = frontier_phi_49_46_ladder;
        }
        float _2888 = isnan(_2673) ? _2394 : (isnan(_2394) ? _2673 : min(_2394, _2673));
        float _2889 = isnan(_2886) ? _2888 : (isnan(_2888) ? _2886 : min(_2888, _2886));
        float _2893 = (_2889 * _2227) + _2216;
        float _2894 = (_2889 * _2230) + _2220;
        float _2895 = (_2889 * _2233) + _2224;
        float _2896 = _2889 * 9.9999997473787516355514526367188e-05;
        float _2897 = (-1.0) - _2896;
        float _2899 = _2896 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2895 > _2899) || ((_2895 < _2897) || ((_2894 > _2899) || ((_2894 < _2897) || ((_2893 < _2897) || (_2893 > _2899))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2895, cbModelParam._m0[17u].z, fma(_2894, cbModelParam._m0[17u].y, _2893 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2895, cbModelParam._m0[18u].z, fma(_2894, cbModelParam._m0[18u].y, _2893 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2895, cbModelParam._m0[19u].z, fma(_2894, cbModelParam._m0[19u].y, _2893 * cbModelParam._m0[19u].x))), _2163);
            frontier_phi_25_49_ladder = _3094.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3094.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3094.x * cbModelParam._m0[1u].z;
        }
        _2252 = frontier_phi_25_49_ladder_2;
        _2254 = frontier_phi_25_49_ladder_1;
        _2256 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2236 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1234, _1235, _1236), _2163);
        _2252 = _2236.x * cbModelParam._m0[1u].z;
        _2254 = _2236.y * cbModelParam._m0[1u].z;
        _2256 = _2236.z * cbModelParam._m0[1u].z;
    }
    float _2269 = (((_1261 * _1210) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2252 - _2154)) + _2154);
    float _2271 = (((_1261 * _1212) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2254 - _2156)) + _2156);
    float _2273 = (((_1261 * _1213) + _1262) * _1226) * ((cbModelParam._m0[1u].w * (_2256 - _2158)) + _2158);
    float _2276 = fma(_2273, cbSceneParam._m0[89u].z, fma(_2271, cbSceneParam._m0[89u].y, _2269 * cbSceneParam._m0[89u].x));
    float _2279 = fma(_2273, cbSceneParam._m0[90u].z, fma(_2271, cbSceneParam._m0[90u].y, _2269 * cbSceneParam._m0[90u].x));
    float _2282 = fma(_2273, cbSceneParam._m0[91u].z, fma(_2271, cbSceneParam._m0[91u].y, _2269 * cbSceneParam._m0[91u].x));
    vec4 _2290 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1148, _1149));
    float _2292 = _2290.w;
    float _2304 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2292);
    float _2305 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2292);
    float _2306 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2292);
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_294 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _1226 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_1049, _1050, _1051));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_1049, _1050, _1051));
    float _4640 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4651 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2304) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2305) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2306) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2388)
    {
        _2399 = _2380;
        _2401 = _2381;
        _2403 = _2382;
    }
    else
    {
        uint _2407 = _2312 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4662 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2426 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2380;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2381;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2382;
    }
    bool _2406 = _2386.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2406)
    {
        _2444 = _2399;
        _2446 = _2401;
        _2448 = _2403;
    }
    else
    {
        uint _2617 = _2312 + 7u;
        float _2633 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_1049, _1050, _1051)) * 0.5) + 0.5;
        float _2634 = _2633 * _2633;
        float _4678 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2635 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2636 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2444 = (((cbLight._m0[_2617].x * 0.3183098733425140380859375) * _2635) * _2636) + _2399;
        _2446 = (((cbLight._m0[_2617].y * 0.3183098733425140380859375) * _2635) * _2636) + _2401;
        _2448 = (((cbLight._m0[_2617].z * 0.3183098733425140380859375) * _2635) * _2636) + _2403;
    }
    uint _2451 = _2312 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _1052) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2312].x + _1128;
    float _2467 = cbLight._m0[_2312].y + _1129;
    float _2468 = cbLight._m0[_2312].z + _1130;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2312].xyz));
    float _4694 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _4705 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _2480 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2481 = dot(vec3(_1049, _1050, _1051), vec3(_2473, _2474, _2475));
    float _4716 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2473, _2474, _2475));
    float _4727 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2502 = 0.959999978542327880859375 - _1207;
    float _2504 = 0.959999978542327880859375 - _1208;
    float _2505 = 0.959999978542327880859375 - _1209;
    float _2512 = 1.0 - _2465;
    float _2523 = (0.5 / (((_2480 * ((_2479 * _2512) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2512) + _2465) * _2479))) * _2479;
    float _4738 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2539 = _2312 + 9u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _1052) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2352].x + _1128;
    float _2553 = cbLight._m0[_2352].y + _1129;
    float _2554 = cbLight._m0[_2352].z + _1130;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2352].xyz));
    float _4749 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2566 = dot(vec3(_1049, _1050, _1051), vec3(_2559, _2560, _2561));
    float _4760 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2559, _2560, _2561));
    float _4771 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2551 * _2551;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
    float _2592 = 1.0 - _2551;
    float _2602 = (0.5 / (((_2480 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2592) + _2551) * _2565))) * _2565;
    float _4782 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    float _2614 = (((((_2585 * _2502) + _1210) * cbLight._m0[_2539].x) * _2604) * _2335) + ((((cbLight._m0[_2451].x * _2304) * ((_2501 * _2502) + _1210)) * _2525) * _2348);
    float _2615 = (((((_2585 * _2504) + _1212) * cbLight._m0[_2539].y) * _2604) * _2335) + ((((cbLight._m0[_2451].y * _2305) * ((_2501 * _2504) + _1212)) * _2525) * _2348);
    float _2616 = (((((_2585 * _2505) + _1213) * cbLight._m0[_2539].z) * _2604) * _2335) + ((((cbLight._m0[_2451].z * _2306) * ((_2501 * _2505) + _1213)) * _2525) * _2348);
    float _2678;
    float _2680;
    float _2682;
    if (_2388)
    {
        _2678 = _2614;
        _2680 = _2615;
        _2682 = _2616;
    }
    else
    {
        uint _2684 = _2312 + 2u;
        uint _2688 = _2312 + 10u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _1052) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _1128;
        float _2705 = cbLight._m0[_2684].y + _1129;
        float _2706 = cbLight._m0[_2684].z + _1130;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2684].xyz));
        float _4793 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2718 = dot(vec3(_1049, _1050, _1051), vec3(_2711, _2712, _2713));
        float _4804 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4815 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2480 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2744) + _2703) * _2717))) * _2717;
        float _4826 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2678 = (((((_2737 * _2502) + _1210) * cbLight._m0[_2688].x) * _2756) * _2757) + _2614;
        _2680 = (((((_2737 * _2504) + _1212) * cbLight._m0[_2688].y) * _2756) * _2757) + _2615;
        _2682 = (((((_2737 * _2505) + _1213) * cbLight._m0[_2688].z) * _2756) * _2757) + _2616;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2406)
    {
        _2792 = _2678;
        _2794 = _2680;
        _2796 = _2682;
    }
    else
    {
        uint _2803 = _2312 + 3u;
        uint _2807 = _2312 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _1052) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _1128;
        float _2824 = cbLight._m0[_2803].y + _1129;
        float _2825 = cbLight._m0[_2803].z + _1130;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_1049, _1050, _1051), vec3(cbLight._m0[_2803].xyz));
        float _4842 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2837 = dot(vec3(_1049, _1050, _1051), vec3(_2830, _2831, _2832));
        float _4853 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4864 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) * 5.0);
        float _2863 = 1.0 - _2822;
        float _2873 = (0.5 / (((_2480 * ((_2836 * _2863) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2863) + _2822) * _2836))) * _2836;
        float _4875 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2792 = (((((_2856 * _2502) + _1210) * cbLight._m0[_2807].x) * _2875) * _2876) + _2678;
        _2794 = (((((_2856 * _2504) + _1212) * cbLight._m0[_2807].y) * _2875) * _2876) + _2680;
        _2796 = (((((_2856 * _2505) + _1213) * cbLight._m0[_2807].z) * _2875) * _2876) + _2682;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2310.y == 0u)
    {
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2952 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2951;
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2951;
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2951;
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1149) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _1148) / _2967)));
        float _2988 = (log2(_2954 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
        }
        else
        {
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            uint _3258 = 0u;
            uint _3267;
            bool _3268;
            for (;;)
            {
                _3267 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                _3268 = _3267 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3268)
                {
                    frontier_phi_66_pred = _3252;
                    frontier_phi_66_pred_1 = _3257;
                    frontier_phi_66_pred_2 = _3256;
                    frontier_phi_66_pred_3 = _3255;
                    frontier_phi_66_pred_4 = _3254;
                    frontier_phi_66_pred_5 = _3253;
                }
                else
                {
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    uint _3403;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3267;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    for (;;)
                    {
                        uint _3407 = uint(findLSB(_3403)) + (_3258 << 5u);
                        uint _3404 = (_3403 + 4294967295u) & _3403;
                        uint _3409 = _3407 * 48u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3429 = (_3407 * 48u) + 4u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 3u)).x));
                        uint _3448 = (_3407 * 48u) + 8u;
                        vec3 _3459 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x));
                        float _3463 = _3423.x - _2952;
                        float _3464 = _3423.y - _2953;
                        float _3465 = _3423.z - _2954;
                        float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                        float _3469 = inversesqrt(_3466);
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3473 = dot(vec3(_1167, _1170, _1173), vec3(_3470, _3471, _3472));
                        float _3478 = 1.0 - (_3466 * _3423.w);
                        float _4901 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3480 = sqrt(_3466) * _3442.w;
                        float _3483 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3473) + _3484;
                        float _3490 = _3480 * _3480;
                        float _3494 = ((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3479) / ((_3490 * 0.699999988079071044921875) + 1.0);
                        float _3498 = (-0.0) - _2952;
                        float _3499 = (-0.0) - _2953;
                        float _3500 = (-0.0) - _2954;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3505 = _3504 * _3498;
                        float _3506 = _3504 * _3499;
                        float _3507 = _3504 * _3500;
                        float _3515 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                        float _3516 = 1.0 - _1242;
                        float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                        float _3524 = _3523 * _3523;
                        float _3525 = _3524 * _3524;
                        float _3526 = _3505 + _3470;
                        float _3527 = _3506 + _3471;
                        float _3528 = _3507 + _3472;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3536 = dot(vec3(_1167, _1170, _1173), vec3(_3505, _3506, _3507));
                        float _4917 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3540 = dot(vec3(_1167, _1170, _1173), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                        float _4928 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                        float _3548 = _3483 * _3524;
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3473) + _3549;
                        float _4939 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3553 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3554 = 1.0 - _3524;
                        float _3564 = (0.5 / (((_3553 * ((_3539 * _3554) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3524) * _3539))) * _3553;
                        float _4950 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3575 = (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3547 * _3547) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125))) * _3479;
                        _3327 = (_3494 * _3442.x) + _3400;
                        _3328 = (_3494 * _3442.y) + _3401;
                        _3329 = (_3494 * _3442.z) + _3402;
                        _3324 = (_3575 * _3459.x) + _3397;
                        _3325 = (_3575 * _3459.y) + _3398;
                        _3326 = (_3575 * _3459.z) + _3399;
                        if (_3404 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3404;
                        }
                    }
                    frontier_phi_66_pred = _3324;
                    frontier_phi_66_pred_1 = _3329;
                    frontier_phi_66_pred_2 = _3328;
                    frontier_phi_66_pred_3 = _3327;
                    frontier_phi_66_pred_4 = _3326;
                    frontier_phi_66_pred_5 = _3325;
                }
                _3100 = frontier_phi_66_pred;
                _3110 = frontier_phi_66_pred_1;
                _3108 = frontier_phi_66_pred_2;
                _3106 = frontier_phi_66_pred_3;
                _3104 = frontier_phi_66_pred_4;
                _3102 = frontier_phi_66_pred_5;
                uint _3259 = _3258 + 1u;
                if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3252 = _3100;
                    _3253 = _3102;
                    _3254 = _3104;
                    _3255 = _3106;
                    _3256 = _3108;
                    _3257 = _3110;
                    _3258 = _3259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
        }
        uvec4 _3113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3114 = _3113.z;
        uint _3116 = (_3114 >> 8u) & 15u;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((4294967295u << _3116) & _2998) == 0u)
        {
            _3220 = _3099;
            _3222 = _3101;
            _3224 = _3103;
            _3226 = _3105;
            _3228 = _3107;
            _3230 = _3109;
        }
        else
        {
            float _3245 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
            float _3246 = _3245 * _2952;
            float _3247 = _3245 * _2953;
            float _3248 = _3245 * _2954;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3116 < ((_3114 >> 12u) & 15u))
            {
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3380 = _3099;
                float _3381 = _3101;
                float _3382 = _3103;
                float _3383 = _3105;
                float _3384 = _3107;
                float _3385 = _3109;
                uint _3386 = _3116;
                uint _3395;
                bool _3396;
                for (;;)
                {
                    _3395 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                    _3396 = _3395 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3396)
                    {
                        frontier_phi_77_pred = _3385;
                        frontier_phi_77_pred_1 = _3384;
                        frontier_phi_77_pred_2 = _3383;
                        frontier_phi_77_pred_3 = _3382;
                        frontier_phi_77_pred_4 = _3381;
                        frontier_phi_77_pred_5 = _3380;
                    }
                    else
                    {
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        uint _3608 = _3395;
                        uint _3609;
                        vec4 _3634;
                        float _3635;
                        vec4 _3650;
                        vec3 _3662;
                        vec4 _3677;
                        vec4 _3692;
                        float _3738;
                        bool _3739;
                        for (;;)
                        {
                            uint _3619 = ((_3386 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3608));
                            _3609 = (_3608 + 4294967295u) & _3608;
                            uint _3621 = _3619 * 40u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3635 = _3634.w;
                            uint _3637 = (_3619 * 40u) + 4u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3619 * 40u) + 8u;
                            _3662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x));
                            uint _3664 = (_3619 * 40u) + 16u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3619 * 40u) + 20u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3619 * 40u) + 24u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3713 = (_3619 * 40u) + 28u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            _3738 = fma(_2954, _3726.z, fma(_2953, _3726.y, _3726.x * _2952)) + _3726.w;
                            _3739 = !((fma(_2954, _3707.z, fma(_2953, _3707.y, _3707.x * _2952)) + _3707.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3739)
                            {
                                float _3766 = _3634.x - _2952;
                                float _3767 = _3634.y - _2953;
                                float _3768 = _3634.z - _2954;
                                float _3769 = dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768));
                                float _3772 = inversesqrt(_3769);
                                float _3773 = _3772 * _3766;
                                float _3774 = _3772 * _3767;
                                float _3775 = _3772 * _3768;
                                float _3779 = 1.0 - (_3769 / (_3635 * _3635));
                                float _4961 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3784 = sqrt(_3769) * _3650.w;
                                float _3786 = 1.39999997615814208984375 / (_3784 + 1.39999997615814208984375);
                                float _3787 = _3786 * _3786;
                                float _3790 = ((1.0 - _3787) * dot(vec3(_3773, _3774, _3775), vec3(_1167, _1170, _1173))) + _3787;
                                float _3793 = _3784 * _3784;
                                float _3797 = (fma(_2954, _3677.z, fma(_2953, _3677.y, _3677.x * _2952)) + _3677.w) / _3738;
                                float _3798 = (fma(_2954, _3692.z, fma(_2953, _3692.y, _3692.x * _2952)) + _3692.w) / _3738;
                                float _3802 = 1.0 - dot(vec2(_3797, _3798), vec2(_3797, _3798));
                                float _4977 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3804 = _3803 * (((isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0))) * _3780) / ((_3793 * 0.699999988079071044921875) + 1.0));
                                float _3816 = exp2(log2(1.0 / ((_3793 * 3.5) + 5.0)) * 0.25);
                                float _3817 = 1.0 - _1242;
                                float _3824 = sqrt(1.0 - ((1.0 - (_3817 * _3817)) * (1.0 - (_3816 * _3816))));
                                float _3825 = _3824 * _3824;
                                float _3826 = _3825 * _3825;
                                float _3827 = _3773 - _3246;
                                float _3828 = _3774 - _3247;
                                float _3829 = _3775 - _3248;
                                float _3833 = inversesqrt(dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829)));
                                float _3837 = dot(vec3(_1167, _1170, _1173), vec3((-0.0) - _3246, (-0.0) - _3247, (-0.0) - _3248));
                                float _4988 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3841 = dot(vec3(_1167, _1170, _1173), vec3(_3833 * _3827, _3833 * _3828, _3833 * _3829));
                                float _4999 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3848 = ((_3844 * _3844) * (_3826 + (-1.0))) + 1.0;
                                float _3849 = _3786 * _3825;
                                float _3850 = _3849 * _3849;
                                float _3856 = ((1.0 - _3850) * dot(vec3(_1167, _1170, _1173), vec3(_3773, _3774, _3775))) + _3850;
                                float _5010 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3858 = 1.0 - _3825;
                                float _3868 = (0.5 / (((_3857 * ((_3840 * _3858) + _3825)) + 9.9999999392252902907785028219223e-09) + (((_3857 * _3858) + _3825) * _3840))) * _3857;
                                float _5021 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3878 = (_3803 * _3780) * (((_3826 * 3.1415927410125732421875) * (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) / ((_3848 * _3848) * ((_3793 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3804 * _3650.y;
                                frontier_phi_83_pred_1 = _3804 * _3650.x;
                                frontier_phi_83_pred_2 = _3878 * _3662.z;
                                frontier_phi_83_pred_3 = _3878 * _3662.y;
                                frontier_phi_83_pred_4 = _3878 * _3662.x;
                                frontier_phi_83_pred_5 = _3804 * _3650.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3886 = frontier_phi_83_pred;
                            _3885 = frontier_phi_83_pred_1;
                            _3884 = frontier_phi_83_pred_2;
                            _3883 = frontier_phi_83_pred_3;
                            _3882 = frontier_phi_83_pred_4;
                            _3887 = frontier_phi_83_pred_5;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            if (_3609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3609;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3594;
                        frontier_phi_77_pred_1 = _3593;
                        frontier_phi_77_pred_2 = _3592;
                        frontier_phi_77_pred_3 = _3591;
                        frontier_phi_77_pred_4 = _3590;
                        frontier_phi_77_pred_5 = _3589;
                    }
                    _3231 = frontier_phi_77_pred;
                    _3229 = frontier_phi_77_pred_1;
                    _3227 = frontier_phi_77_pred_2;
                    _3225 = frontier_phi_77_pred_3;
                    _3223 = frontier_phi_77_pred_4;
                    _3221 = frontier_phi_77_pred_5;
                    uint _3387 = _3386 + 1u;
                    if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3380 = _3221;
                        _3381 = _3223;
                        _3382 = _3225;
                        _3383 = _3227;
                        _3384 = _3229;
                        _3385 = _3231;
                        _3386 = _3387;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3225;
                frontier_phi_58_59_ladder_1 = _3231;
                frontier_phi_58_59_ladder_2 = _3229;
                frontier_phi_58_59_ladder_3 = _3227;
                frontier_phi_58_59_ladder_4 = _3223;
                frontier_phi_58_59_ladder_5 = _3221;
            }
            else
            {
                frontier_phi_58_59_ladder = _3103;
                frontier_phi_58_59_ladder_1 = _3109;
                frontier_phi_58_59_ladder_2 = _3107;
                frontier_phi_58_59_ladder_3 = _3105;
                frontier_phi_58_59_ladder_4 = _3101;
                frontier_phi_58_59_ladder_5 = _3099;
            }
            _3220 = frontier_phi_58_59_ladder_5;
            _3222 = frontier_phi_58_59_ladder_4;
            _3224 = frontier_phi_58_59_ladder;
            _3226 = frontier_phi_58_59_ladder_3;
            _3228 = frontier_phi_58_59_ladder_2;
            _3230 = frontier_phi_58_59_ladder_1;
        }
        float _3235 = isnan(1.0) ? _1226 : (isnan(_1226) ? 1.0 : min(_1226, 1.0));
        _3011 = (_3235 * _3226) + _2444;
        _3013 = (_3235 * _3228) + _2446;
        _3015 = (_3235 * _3230) + _2448;
        _3017 = ((_3220 * _1210) * _3235) + _2792;
        _3019 = ((_3222 * _1212) * _3235) + _2794;
        _3021 = ((_3224 * _1213) * _3235) + _2796;
    }
    else
    {
        _3011 = _2444;
        _3013 = _2446;
        _3015 = _2448;
        _3017 = _2792;
        _3019 = _2794;
        _3021 = _2796;
    }
    float _5037 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _5048 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _5059 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _3038 = ((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3011 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1226))) + ((_3017 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    float _3039 = ((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3013 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1226))) + ((_3019 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3015 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1226))) + ((_3021 + ((isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))) * _2063)) * cbPerFrame._m0[3u].x);
    uint _3041 = _294 + 6u;
    float _3049 = _1148 / cbSceneParam._m0[86u].x;
    float _3050 = _1149 / cbSceneParam._m0[86u].y;
    vec4 _3064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, (log2((isnan(cbSceneParam._m0[77u].w) ? _1071 : (isnan(_1071) ? cbSceneParam._m0[77u].w : min(_1071, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3066 = _3064.x;
    float _3067 = _3064.y;
    float _3068 = _3064.z;
    float _3069 = _3064.w;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    if (_1071 > cbSceneParam._m0[78u].w)
    {
        float _3124 = isnan(_1071) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1071 : min(cbSceneParam._m0[80u].w, _1071));
        float _3125 = _3124 / _1071;
        float _3136 = _3125 * _1121;
        float _3137 = _1122 * _3125;
        float _3138 = (-0.0) - _3137;
        float _3140 = _3125 * _1123;
        float _3142 = (cbSceneParam._m0[77u].w * _3138) / _3124;
        float _3143 = _3142 + cbSceneParam._m0[79u].w;
        float _3144 = cbSceneParam._m0[79u].w - _3137;
        float _3150 = sqrt(((_3136 * _3136) + (_3137 * _3137)) + (_3140 * _3140));
        float _3153 = (1.0 - (cbSceneParam._m0[77u].w / _3124)) * _3150;
        float _3158 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3160 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3337;
        if (abs((_3138 - _3142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3337 = ((((_3143 > 0.0) ? exp2(_3158 * _3143) : (2.0 - exp2(_3160 * _3143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3153;
        }
        else
        {
            float _3281 = 1.0 / cbSceneParam._m0[80u].x;
            float _3282 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : max(_3143, _3144));
            float _3283 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : min(_3143, _3144));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            _3337 = ((abs(_3150 / _3138) * cbSceneParam._m0[80u].y) * ((((_3292 - _3293) * 2.0) - ((exp2(_3158 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0)))) - exp2(_3158 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))))) * _3281)) - ((exp2(_3160 * _3292) - exp2(_3160 * _3293)) * _3281))) + (_3153 * cbSceneParam._m0[80u].z);
        }
        vec4 _3339 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, 1.0), 0.0);
        float _3348 = exp2((_3337 * (-1.44269502162933349609375)) * (1.0 - _3339.w));
        float _3349 = log2(_3348);
        float _3365 = log2(_3069);
        _3162 = (exp2(_3365 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].x)) * _3339.x) / cbSceneParam._m0[78u].x)) + _3066;
        _3164 = (exp2(_3365 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].y)) * _3339.y) / cbSceneParam._m0[78u].y)) + _3067;
        _3166 = (exp2(_3365 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].z)) * _3339.z) / cbSceneParam._m0[78u].z)) + _3068;
        _3168 = _3348 * _3069;
    }
    else
    {
        _3162 = _3066;
        _3164 = _3067;
        _3166 = _3068;
        _3168 = _3069;
    }
    bool _3375;
    vec4 _3178;
    vec4 _3200;
    float _3202;
    float _3206;
    float _3207;
    float _3208;
    float _3209;
    bool _3219;
    for (;;)
    {
        _3178 = cbMatDynParam._m0[0u];
        float _3180 = roundEven(_3178.y);
        bool _3181 = _3180 == 3.0;
        float _3182 = log2(_3168);
        float _3189 = exp2(_3182 * cbSceneParam._m0[78u].x) * _3038;
        float _3190 = exp2(_3182 * cbSceneParam._m0[78u].y) * _3039;
        float _3191 = exp2(_3182 * cbSceneParam._m0[78u].z) * _3040;
        float _3198 = _1137 + (-0.5);
        _3200 = cbMtdParam._m0[1u];
        _3202 = _3200.y * _3198;
        float _3205 = (_3180 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3206 = _3205 * (_3181 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3162)));
        _3207 = _3205 * (_3181 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3164)));
        _3208 = _3205 * (_3181 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3166)));
        _3209 = _3198 * 0.999000012874603271484375;
        _3219 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3219)
        {
            if ((cbInstanceData._m0[_294 + 7u].x + _3209) < 0.5)
            {
                _3375 = true;
                break;
            }
        }
        uint _3316 = _1186 + uint(_3178.w);
        if ((cbInstanceData._m0[_3316].w < 1.0) && ((cbInstanceData._m0[_3316].w + _3209) < 0.5))
        {
            _3375 = true;
            break;
        }
        if ((_3202 + 1.0) < _3200.x)
        {
            _3375 = true;
            break;
        }
        _3375 = false;
        break;
    }
    float _3580;
    if (_3375)
    {
        discard_state = true;
        _3580 = 0.0;
    }
    else
    {
        _3580 = cbInstanceData._m0[_3041].w;
    }
    SV_Target.x = _3206;
    SV_Target.y = _3207;
    SV_Target.z = _3208;
    SV_Target.w = _3580;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3041].w;
    discard_exit();
}


