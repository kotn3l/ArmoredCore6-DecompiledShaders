#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1480;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4087 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4098 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4109 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4120 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _480 = (_473 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _481 = (_473 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _482 = (_473 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[23u].w) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4131 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _556 = (_338.x * cbMtdParam._m0[9u].x) * ((_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480);
    float _557 = (_338.y * cbMtdParam._m0[9u].y) * ((_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481);
    float _558 = (_338.z * cbMtdParam._m0[9u].z) * ((_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482);
    float _562 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _556;
    float _565 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _557;
    float _568 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _558;
    float _576 = (((_556 - _562) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) + _562) * 4.55000019073486328125;
    float _578 = (((_557 - _565) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) + _565) * 4.55000019073486328125;
    float _580 = (((_558 - _568) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) + _568) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _664 = _660.z;
    float _671 = ((_643.x - _662) * _473) + _662;
    float _672 = ((_643.y - _663) * _473) + _663;
    float _673 = ((_643.z - _664) * _473) + _664;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _698 = ((_685.z - _673) * _546) + _673;
    float _701 = ((((_685.x - _671) * _546) + _671) * 2.0) + (-1.0);
    float _702 = ((((_685.y - _672) * _546) + _672) * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _4142 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _738 = (_701 + ((((_618.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _739 = (_702 + ((((_618.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _742 = fma(_708, _249, fma(_739, _256, _738 * _242));
    float _745 = fma(_708, _250, fma(_739, _257, _738 * _243));
    float _748 = fma(_708, _251, fma(_739, _258, _738 * _244));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _781 = _779.x;
    float _782 = 1.0 - _781;
    float _791 = (cbMtdParam._m0[19u].x + dot(vec4(_752 * _742, _752 * _745, _752 * _748, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_781 - _782) * cbMtdParam._m0[24u].z) + _782) * cbMtdParam._m0[21u].z);
    float _4153 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _799 = (_792 * ((_599.x * cbMtdParam._m0[18u].x) - _576)) + _576;
    float _800 = (_792 * ((_599.y * cbMtdParam._m0[18u].y) - _578)) + _578;
    float _801 = (_792 * ((_599.z * cbMtdParam._m0[18u].z) - _580)) + _580;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _829 = _827.x;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _829) * _473) + _829;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _846) * _546) + _846;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _863) * cbMtdParam._m0[19u].z) + _863;
    float _869 = _867 - (_867 * _792);
    float _874 = (((_618.z - _698) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _698;
    float _878 = ((_726.z - _874) * cbMtdParam._m0[19u].w) + _874;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _898 = (_891.x * 2.0) + (-1.0);
    float _899 = (_891.y * 2.0) + (-1.0);
    float _900 = dot(vec2(_898, _899), vec2(_898, _899));
    float _4164 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _908 = ((_891.z - _878) * _792) + _878;
    float _918 = ((sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) - _708) * _792) + _708;
    float _921 = (((_898 - _738) * _792) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _922 = (((_899 - _739) * _792) + _739) + (cbMtdParam._m0[21u].x * _739);
    float _926 = cbMtdParam._m0[22u].x + _726.w;
    float _929 = fma(_918, _249, fma(_922, _256, _921 * _242));
    float _932 = fma(_918, _250, fma(_922, _257, _921 * _243));
    float _935 = fma(_918, _251, fma(_922, _258, _921 * _244));
    float _939 = inversesqrt(dot(vec3(_929, _932, _935), vec3(_929, _932, _935)));
    float _940 = _939 * _929;
    float _941 = _939 * _932;
    float _942 = _939 * _935;
    float _4175 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _943 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4197 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4208 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4219 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4230 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _948 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _962 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_942, cbSceneParam._m0[5u].z, fma(_941, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _940));
    float _1050 = fma(_942, cbSceneParam._m0[6u].z, fma(_941, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _940));
    float _1053 = fma(_942, cbSceneParam._m0[7u].z, fma(_941, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _940));
    uint _1067 = (_282 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _4241 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _1079 = 1.0 - _948;
    float _1080 = _1076 * _1079;
    float _1081 = _1077 * _1079;
    float _1082 = _1078 * _1079;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _948;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _948;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _948;
    float _1090 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    vec4 _1102 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1106 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * TEXCOORD_5.w) * _1102.x;
    float _1107 = dot(vec3(_940, _941, _942), vec3(_1020, _1021, _1022));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _940) - _1020;
    float _1115 = (_1110 * _941) - _1021;
    float _1116 = (_1110 * _942) - _1022;
    float _1120 = abs(dot(vec3(_1020, _1021, _1022), vec3(_940, _941, _942)));
    float _4274 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_943);
    float _1135 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1122;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1479;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1208 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1212 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1237 = _1170 + _940;
        float _1238 = _1174 + _941;
        float _1239 = _1178 + _942;
        float _1249 = fma(_1239, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237)) - _1204;
        float _1250 = fma(_1239, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237)) - _1208;
        float _1251 = fma(_1239, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237)) - _1212;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1307 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1273.x + (-0.5));
        float _1309 = _1307 * (_1273.y + (-0.5));
        float _1310 = _1307 * (_1273.z + (-0.5));
        float _1317 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1280.x + (-0.5));
        float _1319 = _1317 * (_1280.y + (-0.5));
        float _1320 = _1317 * (_1280.z + (-0.5));
        float _1327 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1287.x + (-0.5));
        float _1329 = _1327 * (_1287.y + (-0.5));
        float _1330 = _1327 * (_1287.z + (-0.5));
        float _1337 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1294.x + (-0.5));
        float _1339 = _1337 * (_1294.y + (-0.5));
        float _1340 = _1337 * (_1294.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1361 = (dot(vec3(_940, _941, _942), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1371 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4322 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1373 + 1.0))) + _1378) * _1341;
        float _1388 = _1309 * 0.5;
        float _1389 = _1319 * 0.5;
        float _1390 = _1329 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_940, _941, _942), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4355 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1415 + 1.0))) + _1420) * _1342;
        float _1430 = _1310 * 0.5;
        float _1431 = _1320 * 0.5;
        float _1432 = _1330 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_940, _941, _942), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4388 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1457 + 1.0))) + _1462) * _1343;
        _1479 = _1310;
        _1481 = _1309;
        _1482 = _1308;
        _1483 = _1320;
        _1484 = _1319;
        _1485 = _1318;
        _1486 = _1330;
        _1487 = _1329;
        _1488 = _1328;
        _1489 = _1343;
        _1490 = _1342;
        _1491 = _1341;
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1480;
        _1481 = _1480;
        _1482 = _1480;
        _1483 = _1480;
        _1484 = _1480;
        _1485 = _1480;
        _1486 = _1480;
        _1487 = _1480;
        _1488 = _1480;
        _1489 = _1480;
        _1490 = _1480;
        _1491 = _1480;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1522 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1526 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1549 = _1170 + _940;
        float _1550 = _1174 + _941;
        float _1551 = _1178 + _942;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_940, _941, _942), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4451 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_940, _941, _942), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4484 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_940, _941, _942), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4517 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1480;
        _1788 = _1480;
        _1789 = _1480;
        _1790 = _1480;
        _1791 = _1480;
        _1792 = _1480;
        _1793 = _1480;
        _1794 = _1480;
        _1795 = _1480;
        _1796 = _1480;
        _1797 = _1480;
        _1798 = _1480;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1492)) + _1492;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1493)) + _1493;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1494)) + _1494;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1114 * 0.5;
    float _1856 = _1115 * 0.5;
    float _1857 = _1116 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1483, _1486, _1489));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _943);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _1985 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _1988 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2016 = frontier_phi_14_12_ladder;
        }
        float _2187;
        if (_1985 > 0.0)
        {
            _2187 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2187 = frontier_phi_23_19_ladder;
        }
        float _2482;
        if (_1988 > 0.0)
        {
            _2482 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2482 = frontier_phi_35_30_ladder;
        }
        float _2484 = isnan(_2187) ? _2016 : (isnan(_2016) ? _2187 : min(_2016, _2187));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1982) + _1971;
        float _2490 = (_2485 * _1985) + _1975;
        float _2491 = (_2485 * _1988) + _1979;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_13_35_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_13_35_ladder_2;
        _2006 = frontier_phi_13_35_ladder_1;
        _2008 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _943);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2080 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2083 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2192;
        if (_2077 > 0.0)
        {
            _2192 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2192 = frontier_phi_25_21_ladder;
        }
        float _2509;
        if (_2080 > 0.0)
        {
            _2509 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2509 = frontier_phi_37_32_ladder;
        }
        float _2847;
        if (_2083 > 0.0)
        {
            _2847 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2847 = frontier_phi_47_44_ladder;
        }
        float _2849 = isnan(_2509) ? _2192 : (isnan(_2192) ? _2509 : min(_2192, _2509));
        float _2850 = isnan(_2847) ? _2849 : (isnan(_2849) ? _2847 : min(_2849, _2847));
        float _2854 = (_2850 * _2077) + _2066;
        float _2855 = (_2850 * _2080) + _2070;
        float _2856 = (_2850 * _2083) + _2074;
        float _2857 = _2850 * 9.9999997473787516355514526367188e-05;
        float _2858 = (-1.0) - _2857;
        float _2860 = _2857 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2856 > _2860) || ((_2856 < _2858) || ((_2855 > _2860) || ((_2855 < _2858) || ((_2854 < _2858) || (_2854 > _2860))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2856, cbModelParam._m0[17u].z, fma(_2855, cbModelParam._m0[17u].y, _2854 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2856, cbModelParam._m0[18u].z, fma(_2855, cbModelParam._m0[18u].y, _2854 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2856, cbModelParam._m0[19u].z, fma(_2855, cbModelParam._m0[19u].y, _2854 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_22_47_ladder = _2978.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2978.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2978.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_22_47_ladder_2;
        _2104 = frontier_phi_22_47_ladder_1;
        _2106 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2013);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2119 = (((_1141 * _1090) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1141 * _1092) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2123 = (((_1141 * _1093) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2179 = _2166 / _2178;
    float _2180 = _2170 / _2178;
    float _2181 = _2174 / _2178;
    float _2328;
    float _2329;
    float _2330;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2208 = ((uint(_2181 > cbSceneParam._m0[59u].y) + uint(_2181 > cbSceneParam._m0[59u].x)) + uint(_2181 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2209 = _2208 + 43u;
        uint _2217 = _2208 + 44u;
        uint _2225 = _2208 + 45u;
        uint _2233 = _2208 + 46u;
        float _2244 = fma(_2178, cbSceneParam._m0[_2209].w, fma(_2174, cbSceneParam._m0[_2209].z, fma(_2170, cbSceneParam._m0[_2209].y, _2166 * cbSceneParam._m0[_2209].x)));
        float _2248 = fma(_2178, cbSceneParam._m0[_2217].w, fma(_2174, cbSceneParam._m0[_2217].z, fma(_2170, cbSceneParam._m0[_2217].y, _2166 * cbSceneParam._m0[_2217].x)));
        float _2256 = fma(_2178, cbSceneParam._m0[_2233].w, fma(_2174, cbSceneParam._m0[_2233].z, fma(_2170, cbSceneParam._m0[_2233].y, _2166 * cbSceneParam._m0[_2233].x)));
        float _2261 = cbSceneParam._m0[33u].z * _2256;
        float _2263 = cbSceneParam._m0[33u].w * _2256;
        float _2266 = fma(_2178, cbSceneParam._m0[_2225].w, fma(_2174, cbSceneParam._m0[_2225].z, fma(_2170, cbSceneParam._m0[_2225].y, _2166 * cbSceneParam._m0[_2225].x))) / _2256;
        float _2314 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
        float _4643 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2321 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 + _2244) / _2256, (_2263 + _2248) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 + _2244) / _2256, (_2248 - _2261) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2261) / _2256, (_2248 - _2263) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2263) / _2256, (_2261 + _2248) / _2256), _2266), 0.0)).x), vec4(0.25)));
        _2328 = 1.0 - (_2321 * cbSceneParam._m0[34u].x);
        _2329 = 1.0 - (_2321 * cbSceneParam._m0[34u].y);
        _2330 = 1.0 - (_2321 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2328 = 1.0;
        _2329 = 1.0;
        _2330 = 1.0;
    }
    float _2394;
    float _2396;
    float _2398;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2382 = fma(_2178, cbSceneParam._m0[63u].w, fma(_2174, cbSceneParam._m0[63u].z, fma(_2170, cbSceneParam._m0[63u].y, _2166 * cbSceneParam._m0[63u].x)));
        float _2383 = fma(_2178, cbSceneParam._m0[60u].w, fma(_2174, cbSceneParam._m0[60u].z, fma(_2170, cbSceneParam._m0[60u].y, _2166 * cbSceneParam._m0[60u].x))) / _2382;
        float _2384 = fma(_2178, cbSceneParam._m0[61u].w, fma(_2174, cbSceneParam._m0[61u].z, fma(_2170, cbSceneParam._m0[61u].y, _2166 * cbSceneParam._m0[61u].x))) / _2382;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2383 >= cbSceneParam._m0[64u].x) && (_2384 >= cbSceneParam._m0[64u].y)) && (_2383 <= cbSceneParam._m0[64u].z)) && (_2384 <= cbSceneParam._m0[64u].w))
        {
            float _2522 = fma(_2178, cbSceneParam._m0[62u].w, fma(_2174, cbSceneParam._m0[62u].z, fma(_2170, cbSceneParam._m0[62u].y, _2166 * cbSceneParam._m0[62u].x))) / _2382;
            float _2526 = isnan(cbSceneParam._m0[41u].w) ? _2522 : (isnan(_2522) ? cbSceneParam._m0[41u].w : max(_2522, cbSceneParam._m0[41u].w));
            float _2569 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
            float _4659 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
            float _2576 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2383, cbSceneParam._m0[33u].w + _2384), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2383, _2384 - cbSceneParam._m0[33u].z), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].z, _2384 - cbSceneParam._m0[33u].w), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2384), _2526), 0.0)).x), vec4(0.25)));
            float _2580 = 1.0 - (_2576 * cbSceneParam._m0[34u].x);
            float _2581 = 1.0 - (_2576 * cbSceneParam._m0[34u].y);
            float _2582 = 1.0 - (_2576 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2582) ? _2330 : (isnan(_2330) ? _2582 : min(_2330, _2582));
            frontier_phi_34_33_ladder_1 = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
            frontier_phi_34_33_ladder_2 = isnan(_2580) ? _2328 : (isnan(_2328) ? _2580 : min(_2328, _2580));
        }
        else
        {
            frontier_phi_34_33_ladder = _2330;
            frontier_phi_34_33_ladder_1 = _2329;
            frontier_phi_34_33_ladder_2 = _2328;
        }
        _2394 = frontier_phi_34_33_ladder_2;
        _2396 = frontier_phi_34_33_ladder_1;
        _2398 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2394 = _2328;
        _2396 = _2329;
        _2398 = _2330;
    }
    uvec4 _2403 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2405 = _2403.x * 14u;
    uint _2406 = _2405 + 13u;
    float _2413 = _1106 + (-1.0);
    float _2418 = (cbLight._m0[_2406].x * _2413) + 1.0;
    float _2419 = (cbLight._m0[_2406].y * _2413) + 1.0;
    float _2420 = (cbLight._m0[_2406].z * _2413) + 1.0;
    float _2421 = (cbLight._m0[_2406].w * _2413) + 1.0;
    uint _2422 = _2405 + 5u;
    float _2428 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2432 = _2405 + 4u;
    float _2441 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    uint _2445 = _2405 | 1u;
    float _2456 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_940, _941, _942));
    float _2459 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_940, _941, _942));
    float _4695 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _4706 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2464 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * 0.3183098733425140380859375;
    float _2466 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2473 = ((cbLight._m0[_2422].x * _2428) * _2466) + (((cbLight._m0[_2432].x * _2394) * _2441) * _2464);
    float _2474 = ((_2428 * cbLight._m0[_2422].y) * _2466) + (((cbLight._m0[_2432].y * _2396) * _2441) * _2464);
    float _2475 = ((_2428 * cbLight._m0[_2422].z) * _2466) + (((cbLight._m0[_2432].z * _2398) * _2441) * _2464);
    uvec4 _2479 = floatBitsToUint(cbLight._m0[_2405 + 12u]);
    bool _2481 = _2479.x == 0u;
    float _2583;
    float _2585;
    float _2587;
    if (_2481)
    {
        _2583 = _2473;
        _2585 = _2474;
        _2587 = _2475;
    }
    else
    {
        uint _2591 = _2405 + 6u;
        float _2607 = (dot(vec3(cbLight._m0[_2405 + 2u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4717 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2610 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2583 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2473;
        _2585 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2474;
        _2587 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2475;
    }
    bool _2590 = _2479.y == 0u;
    float _2645;
    float _2647;
    float _2649;
    if (_2590)
    {
        _2645 = _2583;
        _2647 = _2585;
        _2649 = _2587;
    }
    else
    {
        uint _2818 = _2405 + 7u;
        float _2834 = (dot(vec3(cbLight._m0[_2405 + 3u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2835 = _2834 * _2834;
        float _4733 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2836 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2837 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2645 = (((cbLight._m0[_2818].x * 0.3183098733425140380859375) * _2836) * _2837) + _2583;
        _2647 = (((cbLight._m0[_2818].y * 0.3183098733425140380859375) * _2836) * _2837) + _2585;
        _2649 = (((cbLight._m0[_2818].z * 0.3183098733425140380859375) * _2836) * _2837) + _2587;
    }
    uint _2652 = _2405 + 8u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _943) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2405].x + _1020;
    float _2668 = cbLight._m0[_2405].y + _1021;
    float _2669 = cbLight._m0[_2405].z + _1022;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2405].xyz));
    float _4749 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _4760 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2681 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2682 = dot(vec3(_940, _941, _942), vec3(_2674, _2675, _2676));
    float _4771 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2686 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2674, _2675, _2676));
    float _4782 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2690 = _2666 * _2666;
    float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
    float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
    float _2703 = 0.959999978542327880859375 - _1087;
    float _2705 = 0.959999978542327880859375 - _1088;
    float _2706 = 0.959999978542327880859375 - _1089;
    float _2713 = 1.0 - _2666;
    float _2724 = (0.5 / (((_2681 * ((_2680 * _2713) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2713) + _2666) * _2680))) * _2680;
    float _4793 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
    uint _2740 = _2405 + 9u;
    float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _943) * 0.949999988079071044921875);
    float _2752 = _2751 * _2751;
    float _2753 = cbLight._m0[_2445].x + _1020;
    float _2754 = cbLight._m0[_2445].y + _1021;
    float _2755 = cbLight._m0[_2445].z + _1022;
    float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
    float _2760 = _2759 * _2753;
    float _2761 = _2759 * _2754;
    float _2762 = _2759 * _2755;
    float _2763 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2445].xyz));
    float _4804 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2766 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
    float _2767 = dot(vec3(_940, _941, _942), vec3(_2760, _2761, _2762));
    float _4815 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2770 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2771 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2760, _2761, _2762));
    float _4826 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2775 = _2752 * _2752;
    float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
    float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
    float _2793 = 1.0 - _2752;
    float _2803 = (0.5 / (((_2681 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2793) + _2752) * _2766))) * _2766;
    float _4837 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2805 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
    float _2815 = (((((_2786 * _2703) + _1090) * cbLight._m0[_2740].x) * _2805) * _2428) + ((((cbLight._m0[_2652].x * _2394) * ((_2702 * _2703) + _1090)) * _2726) * _2441);
    float _2816 = (((((_2786 * _2705) + _1092) * cbLight._m0[_2740].y) * _2805) * _2428) + ((((cbLight._m0[_2652].y * _2396) * ((_2702 * _2705) + _1092)) * _2726) * _2441);
    float _2817 = (((((_2786 * _2706) + _1093) * cbLight._m0[_2740].z) * _2805) * _2428) + ((((cbLight._m0[_2652].z * _2398) * ((_2702 * _2706) + _1093)) * _2726) * _2441);
    float _2873;
    float _2875;
    float _2877;
    if (_2481)
    {
        _2873 = _2815;
        _2875 = _2816;
        _2877 = _2817;
    }
    else
    {
        uint _2879 = _2405 + 2u;
        uint _2883 = _2405 + 10u;
        float _2897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2879].w)) * _943) * 0.949999988079071044921875);
        float _2898 = _2897 * _2897;
        float _2899 = cbLight._m0[_2879].x + _1020;
        float _2900 = cbLight._m0[_2879].y + _1021;
        float _2901 = cbLight._m0[_2879].z + _1022;
        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
        float _2906 = _2905 * _2899;
        float _2907 = _2905 * _2900;
        float _2908 = _2905 * _2901;
        float _2909 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2879].xyz));
        float _4848 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2913 = dot(vec3(_940, _941, _942), vec3(_2906, _2907, _2908));
        float _4859 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2917 = dot(vec3(cbLight._m0[_2879].xyz), vec3(_2906, _2907, _2908));
        float _4870 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2921 = _2898 * _2898;
        float _2925 = ((_2916 * _2916) * (_2921 + (-1.0))) + 1.0;
        float _2932 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
        float _2939 = 1.0 - _2898;
        float _2949 = (0.5 / (((_2681 * ((_2912 * _2939) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2939) + _2898) * _2912))) * _2912;
        float _4881 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2921 / ((_2925 * _2925) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2873 = (((((_2932 * _2703) + _1090) * cbLight._m0[_2883].x) * _2951) * _2952) + _2815;
        _2875 = (((((_2932 * _2705) + _1092) * cbLight._m0[_2883].y) * _2951) * _2952) + _2816;
        _2877 = (((((_2932 * _2706) + _1093) * cbLight._m0[_2883].z) * _2951) * _2952) + _2817;
    }
    float _2983;
    float _2985;
    float _2987;
    if (_2590)
    {
        _2983 = _2873;
        _2985 = _2875;
        _2987 = _2877;
    }
    else
    {
        uint _2994 = _2405 + 3u;
        uint _2998 = _2405 + 11u;
        float _3012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2994].w)) * _943) * 0.949999988079071044921875);
        float _3013 = _3012 * _3012;
        float _3014 = cbLight._m0[_2994].x + _1020;
        float _3015 = cbLight._m0[_2994].y + _1021;
        float _3016 = cbLight._m0[_2994].z + _1022;
        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
        float _3021 = _3020 * _3014;
        float _3022 = _3020 * _3015;
        float _3023 = _3020 * _3016;
        float _3024 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2994].xyz));
        float _4897 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3027 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _3028 = dot(vec3(_940, _941, _942), vec3(_3021, _3022, _3023));
        float _4908 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _3032 = dot(vec3(cbLight._m0[_2994].xyz), vec3(_3021, _3022, _3023));
        float _4919 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3036 = _3013 * _3013;
        float _3040 = ((_3031 * _3031) * (_3036 + (-1.0))) + 1.0;
        float _3047 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
        float _3054 = 1.0 - _3013;
        float _3064 = (0.5 / (((_2681 * ((_3027 * _3054) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _3054) + _3013) * _3027))) * _3027;
        float _4930 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3066 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_3036 / ((_3040 * _3040) * 3.141590118408203125));
        float _3067 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2983 = (((((_3047 * _2703) + _1090) * cbLight._m0[_2998].x) * _3066) * _3067) + _2873;
        _2985 = (((((_3047 * _2705) + _1092) * cbLight._m0[_2998].y) * _3066) * _3067) + _2875;
        _2987 = (((((_3047 * _2706) + _1093) * cbLight._m0[_2998].z) * _3066) * _3067) + _2877;
    }
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_2403.y == 0u)
    {
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.x;
        uint _3100 = uint((float(_3088.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _3089))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _3089)));
        float _3110 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3111 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        uint _3114 = uint(isnan(14.0) ? _3111 : (isnan(_3111) ? 14.0 : min(_3111, 14.0)));
        uvec4 _3119 = texelFetch(g_lightClusterGridBuffer, int(((_3114 << 2u) + (_3100 << 6u)) >> 2u));
        uint _3120 = _3119.x;
        uint _3121 = _3088.z;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((((1u << ((_3121 >> 4u) & 15u)) + 4294967295u) & _3120) == 0u) || ((_3121 & 240u) == 0u))
        {
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
            _3206 = 0.0;
            _3208 = 0.0;
            _3210 = 0.0;
        }
        else
        {
            float _3201;
            float _3203;
            float _3205;
            float _3207;
            float _3209;
            float _3211;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            float _3348 = 0.0;
            float _3349 = 0.0;
            float _3350 = 0.0;
            uint _3351 = 0u;
            uint _3360;
            bool _3361;
            for (;;)
            {
                _3360 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                _3361 = _3360 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3361)
                {
                    frontier_phi_66_pred = _3350;
                    frontier_phi_66_pred_1 = _3349;
                    frontier_phi_66_pred_2 = _3348;
                    frontier_phi_66_pred_3 = _3347;
                    frontier_phi_66_pred_4 = _3346;
                    frontier_phi_66_pred_5 = _3345;
                }
                else
                {
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    float _3474;
                    uint _3475;
                    _3469 = _3345;
                    _3470 = _3346;
                    _3471 = _3347;
                    _3472 = _3348;
                    _3473 = _3349;
                    _3474 = _3350;
                    _3475 = _3360;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    for (;;)
                    {
                        uint _3479 = uint(findLSB(_3475)) + (_3351 << 5u);
                        uint _3476 = (_3475 + 4294967295u) & _3475;
                        uint _3481 = _3479 * 48u;
                        vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 3u)).x));
                        uint _3501 = (_3479 * 48u) + 4u;
                        vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3501)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 3u)).x));
                        uint _3520 = (_3479 * 48u) + 8u;
                        vec3 _3531 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x));
                        float _3535 = _3495.x - _2179;
                        float _3536 = _3495.y - _2180;
                        float _3537 = _3495.z - _2181;
                        float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                        float _3541 = inversesqrt(_3538);
                        float _3542 = _3541 * _3535;
                        float _3543 = _3541 * _3536;
                        float _3544 = _3541 * _3537;
                        float _3545 = dot(vec3(_1047, _1050, _1053), vec3(_3542, _3543, _3544));
                        float _3550 = 1.0 - (_3538 * _3495.w);
                        float _4956 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3551 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3552 = sqrt(_3538) * _3514.w;
                        float _3555 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                        float _3556 = _3555 * _3555;
                        float _3559 = ((1.0 - _3556) * _3545) + _3556;
                        float _3562 = _3552 * _3552;
                        float _3566 = ((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3551) / ((_3562 * 0.699999988079071044921875) + 1.0);
                        float _3570 = (-0.0) - _2179;
                        float _3571 = (-0.0) - _2180;
                        float _3572 = (-0.0) - _2181;
                        float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                        float _3577 = _3576 * _3570;
                        float _3578 = _3576 * _3571;
                        float _3579 = _3576 * _3572;
                        float _3586 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                        float _3587 = 1.0 - _1122;
                        float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                        float _3595 = _3594 * _3594;
                        float _3596 = _3595 * _3595;
                        float _3597 = _3577 + _3542;
                        float _3598 = _3578 + _3543;
                        float _3599 = _3579 + _3544;
                        float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                        float _3607 = dot(vec3(_1047, _1050, _1053), vec3(_3577, _3578, _3579));
                        float _4972 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3610 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3611 = dot(vec3(_1047, _1050, _1053), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                        float _4983 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3614 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                        float _3619 = _3555 * _3595;
                        float _3620 = _3619 * _3619;
                        float _3623 = ((1.0 - _3620) * _3545) + _3620;
                        float _4994 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3624 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3625 = 1.0 - _3595;
                        float _3635 = (0.5 / (((_3624 * ((_3610 * _3625) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3595) * _3610))) * _3624;
                        float _5005 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3646 = (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3618 * _3618) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125))) * _3551;
                        _3404 = (_3566 * _3514.x) + _3472;
                        _3405 = (_3566 * _3514.y) + _3473;
                        _3406 = (_3566 * _3514.z) + _3474;
                        _3401 = (_3646 * _3531.x) + _3469;
                        _3402 = (_3646 * _3531.y) + _3470;
                        _3403 = (_3646 * _3531.z) + _3471;
                        if (_3476 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3469 = _3401;
                            _3470 = _3402;
                            _3471 = _3403;
                            _3472 = _3404;
                            _3473 = _3405;
                            _3474 = _3406;
                            _3475 = _3476;
                        }
                    }
                    frontier_phi_66_pred = _3406;
                    frontier_phi_66_pred_1 = _3405;
                    frontier_phi_66_pred_2 = _3404;
                    frontier_phi_66_pred_3 = _3403;
                    frontier_phi_66_pred_4 = _3402;
                    frontier_phi_66_pred_5 = _3401;
                }
                _3211 = frontier_phi_66_pred;
                _3209 = frontier_phi_66_pred_1;
                _3207 = frontier_phi_66_pred_2;
                _3205 = frontier_phi_66_pred_3;
                _3203 = frontier_phi_66_pred_4;
                _3201 = frontier_phi_66_pred_5;
                uint _3352 = _3351 + 1u;
                if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3345 = _3201;
                    _3346 = _3203;
                    _3347 = _3205;
                    _3348 = _3207;
                    _3349 = _3209;
                    _3350 = _3211;
                    _3351 = _3352;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
            _3206 = _3207;
            _3208 = _3209;
            _3210 = _3211;
        }
        uvec4 _3214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3215 = _3214.z;
        uint _3217 = (_3215 >> 8u) & 15u;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        if (((4294967295u << _3217) & _3120) == 0u)
        {
            _3313 = _3200;
            _3315 = _3202;
            _3317 = _3204;
            _3319 = _3206;
            _3321 = _3208;
            _3323 = _3210;
        }
        else
        {
            float _3338 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _3339 = _3338 * _2179;
            float _3340 = _3338 * _2180;
            float _3341 = _3338 * _2181;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3217 < ((_3215 >> 12u) & 15u))
            {
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3322;
                float _3324;
                float _3452 = _3200;
                float _3453 = _3202;
                float _3454 = _3204;
                float _3455 = _3206;
                float _3456 = _3208;
                float _3457 = _3210;
                uint _3458 = _3217;
                uint _3467;
                bool _3468;
                for (;;)
                {
                    _3467 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3458 << 2u)) >> 2u)).x;
                    _3468 = _3467 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3468)
                    {
                        frontier_phi_72_pred = _3457;
                        frontier_phi_72_pred_1 = _3456;
                        frontier_phi_72_pred_2 = _3455;
                        frontier_phi_72_pred_3 = _3454;
                        frontier_phi_72_pred_4 = _3453;
                        frontier_phi_72_pred_5 = _3452;
                    }
                    else
                    {
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3664 = _3452;
                        float _3665 = _3453;
                        float _3666 = _3454;
                        float _3667 = _3455;
                        float _3668 = _3456;
                        float _3669 = _3457;
                        uint _3670 = _3467;
                        uint _3671;
                        vec4 _3696;
                        float _3697;
                        vec4 _3712;
                        vec3 _3724;
                        vec4 _3739;
                        vec4 _3754;
                        float _3800;
                        bool _3801;
                        for (;;)
                        {
                            uint _3681 = ((_3458 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3670));
                            _3671 = (_3670 + 4294967295u) & _3670;
                            uint _3683 = _3681 * 40u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3697 = _3696.w;
                            uint _3699 = (_3681 * 40u) + 4u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3681 * 40u) + 8u;
                            _3724 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x));
                            uint _3726 = (_3681 * 40u) + 16u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3681 * 40u) + 20u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3756 = (_3681 * 40u) + 24u;
                            vec4 _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3775 = (_3681 * 40u) + 28u;
                            vec4 _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            _3800 = fma(_2181, _3788.z, fma(_2180, _3788.y, _3788.x * _2179)) + _3788.w;
                            _3801 = !((fma(_2181, _3769.z, fma(_2180, _3769.y, _3769.x * _2179)) + _3769.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3801)
                            {
                                float _3828 = _3696.x - _2179;
                                float _3829 = _3696.y - _2180;
                                float _3830 = _3696.z - _2181;
                                float _3831 = dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830));
                                float _3834 = inversesqrt(_3831);
                                float _3835 = _3834 * _3828;
                                float _3836 = _3834 * _3829;
                                float _3837 = _3834 * _3830;
                                float _3841 = 1.0 - (_3831 / (_3697 * _3697));
                                float _5016 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3846 = sqrt(_3831) * _3712.w;
                                float _3848 = 1.39999997615814208984375 / (_3846 + 1.39999997615814208984375);
                                float _3849 = _3848 * _3848;
                                float _3852 = ((1.0 - _3849) * dot(vec3(_3835, _3836, _3837), vec3(_1047, _1050, _1053))) + _3849;
                                float _3855 = _3846 * _3846;
                                float _3859 = (fma(_2181, _3739.z, fma(_2180, _3739.y, _3739.x * _2179)) + _3739.w) / _3800;
                                float _3860 = (fma(_2181, _3754.z, fma(_2180, _3754.y, _3754.x * _2179)) + _3754.w) / _3800;
                                float _3864 = 1.0 - dot(vec2(_3859, _3860), vec2(_3859, _3860));
                                float _5032 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3866 = _3865 * (((isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0))) * _3842) / ((_3855 * 0.699999988079071044921875) + 1.0));
                                float _3878 = exp2(log2(1.0 / ((_3855 * 3.5) + 5.0)) * 0.25);
                                float _3879 = 1.0 - _1122;
                                float _3886 = sqrt(1.0 - ((1.0 - (_3879 * _3879)) * (1.0 - (_3878 * _3878))));
                                float _3887 = _3886 * _3886;
                                float _3888 = _3887 * _3887;
                                float _3889 = _3835 - _3339;
                                float _3890 = _3836 - _3340;
                                float _3891 = _3837 - _3341;
                                float _3895 = inversesqrt(dot(vec3(_3889, _3890, _3891), vec3(_3889, _3890, _3891)));
                                float _3899 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3339, (-0.0) - _3340, (-0.0) - _3341));
                                float _5043 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3902 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3903 = dot(vec3(_1047, _1050, _1053), vec3(_3895 * _3889, _3895 * _3890, _3895 * _3891));
                                float _5054 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3906 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3910 = ((_3906 * _3906) * (_3888 + (-1.0))) + 1.0;
                                float _3911 = _3848 * _3887;
                                float _3912 = _3911 * _3911;
                                float _3918 = ((1.0 - _3912) * dot(vec3(_1047, _1050, _1053), vec3(_3835, _3836, _3837))) + _3912;
                                float _5065 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3920 = 1.0 - _3887;
                                float _3930 = (0.5 / (((_3919 * ((_3902 * _3920) + _3887)) + 9.9999999392252902907785028219223e-09) + (((_3919 * _3920) + _3887) * _3902))) * _3919;
                                float _5076 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                                float _3940 = (_3865 * _3842) * (((_3888 * 3.1415927410125732421875) * (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) / ((_3910 * _3910) * ((_3855 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3866 * _3712.y;
                                frontier_phi_78_pred_1 = _3866 * _3712.x;
                                frontier_phi_78_pred_2 = _3940 * _3724.z;
                                frontier_phi_78_pred_3 = _3940 * _3724.y;
                                frontier_phi_78_pred_4 = _3940 * _3724.x;
                                frontier_phi_78_pred_5 = _3866 * _3712.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3948 = frontier_phi_78_pred;
                            _3947 = frontier_phi_78_pred_1;
                            _3946 = frontier_phi_78_pred_2;
                            _3945 = frontier_phi_78_pred_3;
                            _3944 = frontier_phi_78_pred_4;
                            _3949 = frontier_phi_78_pred_5;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            if (_3671 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3671;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3656;
                        frontier_phi_72_pred_1 = _3655;
                        frontier_phi_72_pred_2 = _3654;
                        frontier_phi_72_pred_3 = _3653;
                        frontier_phi_72_pred_4 = _3652;
                        frontier_phi_72_pred_5 = _3651;
                    }
                    _3324 = frontier_phi_72_pred;
                    _3322 = frontier_phi_72_pred_1;
                    _3320 = frontier_phi_72_pred_2;
                    _3318 = frontier_phi_72_pred_3;
                    _3316 = frontier_phi_72_pred_4;
                    _3314 = frontier_phi_72_pred_5;
                    uint _3459 = _3458 + 1u;
                    if (_3459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3452 = _3314;
                        _3453 = _3316;
                        _3454 = _3318;
                        _3455 = _3320;
                        _3456 = _3322;
                        _3457 = _3324;
                        _3458 = _3459;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3324;
                frontier_phi_60_61_ladder_1 = _3322;
                frontier_phi_60_61_ladder_2 = _3318;
                frontier_phi_60_61_ladder_3 = _3316;
                frontier_phi_60_61_ladder_4 = _3314;
                frontier_phi_60_61_ladder_5 = _3320;
            }
            else
            {
                frontier_phi_60_61_ladder = _3210;
                frontier_phi_60_61_ladder_1 = _3208;
                frontier_phi_60_61_ladder_2 = _3204;
                frontier_phi_60_61_ladder_3 = _3202;
                frontier_phi_60_61_ladder_4 = _3200;
                frontier_phi_60_61_ladder_5 = _3206;
            }
            _3313 = frontier_phi_60_61_ladder_4;
            _3315 = frontier_phi_60_61_ladder_3;
            _3317 = frontier_phi_60_61_ladder_2;
            _3319 = frontier_phi_60_61_ladder_5;
            _3321 = frontier_phi_60_61_ladder_1;
            _3323 = frontier_phi_60_61_ladder;
        }
        float _3328 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _3133 = (_3328 * _3319) + _2645;
        _3135 = (_3328 * _3321) + _2647;
        _3137 = (_3328 * _3323) + _2649;
        _3139 = ((_3313 * _1090) * _3328) + _2983;
        _3141 = ((_3315 * _1092) * _3328) + _2985;
        _3143 = ((_3317 * _1093) * _3328) + _2987;
    }
    else
    {
        _3133 = _2645;
        _3135 = _2647;
        _3137 = _2649;
        _3139 = _2983;
        _3141 = _2985;
        _3143 = _2987;
    }
    float _5092 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _5103 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5114 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    uint _3163 = _282 + 6u;
    float _3171 = _1028 / cbSceneParam._m0[86u].x;
    float _3172 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _3186 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, (log2((isnan(cbSceneParam._m0[77u].w) ? _962 : (isnan(_962) ? cbSceneParam._m0[77u].w : min(_962, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3188 = _3186.x;
    float _3189 = _3186.y;
    float _3190 = _3186.z;
    float _3191 = _3186.w;
    float _3263;
    float _3265;
    float _3267;
    float _3269;
    if (_962 > cbSceneParam._m0[78u].w)
    {
        float _3225 = isnan(_962) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _962 : min(cbSceneParam._m0[80u].w, _962));
        float _3226 = _3225 / _962;
        float _3237 = _3226 * _1013;
        float _3238 = _1014 * _3226;
        float _3239 = (-0.0) - _3238;
        float _3241 = _3226 * _1015;
        float _3243 = (cbSceneParam._m0[77u].w * _3239) / _3225;
        float _3244 = _3243 + cbSceneParam._m0[79u].w;
        float _3245 = cbSceneParam._m0[79u].w - _3238;
        float _3251 = sqrt(((_3237 * _3237) + (_3238 * _3238)) + (_3241 * _3241));
        float _3254 = (1.0 - (cbSceneParam._m0[77u].w / _3225)) * _3251;
        float _3259 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3261 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3414;
        if (abs((_3239 - _3243) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3414 = ((((_3244 > 0.0) ? exp2(_3259 * _3244) : (2.0 - exp2(_3261 * _3244))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3254;
        }
        else
        {
            float _3374 = 1.0 / cbSceneParam._m0[80u].x;
            float _3375 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : max(_3244, _3245));
            float _3376 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : min(_3244, _3245));
            float _3385 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : min(_3375, 0.0));
            float _3386 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : min(_3376, 0.0));
            _3414 = ((abs(_3251 / _3239) * cbSceneParam._m0[80u].y) * ((((_3385 - _3386) * 2.0) - ((exp2(_3259 * (isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0)))) - exp2(_3259 * (isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))))) * _3374)) - ((exp2(_3261 * _3385) - exp2(_3261 * _3386)) * _3374))) + (_3254 * cbSceneParam._m0[80u].z);
        }
        vec4 _3416 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, 1.0), 0.0);
        float _3425 = exp2((_3414 * (-1.44269502162933349609375)) * (1.0 - _3416.w));
        float _3426 = log2(_3425);
        float _3442 = log2(_3191);
        _3263 = (exp2(_3442 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3426 * cbSceneParam._m0[78u].x)) * _3416.x) / cbSceneParam._m0[78u].x)) + _3188;
        _3265 = (exp2(_3442 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3426 * cbSceneParam._m0[78u].y)) * _3416.y) / cbSceneParam._m0[78u].y)) + _3189;
        _3267 = (exp2(_3442 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3426 * cbSceneParam._m0[78u].z)) * _3416.z) / cbSceneParam._m0[78u].z)) + _3190;
        _3269 = _3425 * _3191;
    }
    else
    {
        _3263 = _3188;
        _3265 = _3189;
        _3267 = _3190;
        _3269 = _3191;
    }
    float _3281 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3282 = _3281 == 3.0;
    float _3283 = log2(_3269);
    float _3290 = exp2(_3283 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3133 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1106))) + ((_3139 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3291 = exp2(_3283 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3135 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1106))) + ((_3141 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3292 = exp2(_3283 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3137 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1106))) + ((_3143 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3301 = (_3281 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3301 * (_3282 ? _3290 : (_3290 + (cbSceneParam._m0[72u].w * _3263)));
    SV_Target.y = _3301 * (_3282 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3265)));
    SV_Target.z = _3301 * (_3282 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3267)));
    SV_Target.w = cbInstanceData._m0[_3163].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3163].w;
}


