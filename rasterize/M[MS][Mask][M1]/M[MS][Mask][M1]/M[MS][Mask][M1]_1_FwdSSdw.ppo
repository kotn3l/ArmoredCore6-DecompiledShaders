#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1087;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[23u].w) + _367) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3442 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _392 = (_385 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _393 = (_385 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _394 = (_385 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _385) + _428;
    float _440 = ((((_407.x - _426) * _385) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _385) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3453 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _476 = (((_464.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _477 = (((_464.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _505 = _503.x;
    float _523 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _505) * _385) + _505;
    float _527 = ((_489.x - _523) * cbMtdParam._m0[19u].z) + _523;
    float _531 = (cbMtdParam._m0[19u].w * (_464.z - _437)) + _437;
    float _533 = cbMtdParam._m0[22u].x + _464.w;
    float _536 = fma(_448, _219 * NORMAL.x, fma(_477, _226 * TANGENT.x, (_212 * _204) * _476));
    float _539 = fma(_448, _219 * NORMAL.y, fma(_477, _226 * TANGENT.y, (_212 * _205) * _476));
    float _542 = fma(_448, _219 * NORMAL.z, fma(_477, _226 * TANGENT.z, (_212 * _206) * _476));
    float _546 = inversesqrt(dot(vec3(_536, _539, _542), vec3(_536, _539, _542)));
    float _547 = _546 * _536;
    float _548 = _546 * _539;
    float _549 = _546 * _542;
    float _3464 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _550 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3486 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3497 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3508 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3519 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _555 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _569 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _620 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _610);
    float _621 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _610);
    float _622 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _610);
    float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
    float _627 = _620 * _626;
    float _628 = _621 * _626;
    float _629 = _622 * _626;
    float _635 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _636 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _654 = fma(_549, cbSceneParam._m0[5u].z, fma(_548, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _547));
    float _657 = fma(_549, cbSceneParam._m0[6u].z, fma(_548, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _547));
    float _660 = fma(_549, cbSceneParam._m0[7u].z, fma(_548, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _547));
    uint _674 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _680 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_674].x;
    float _681 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_674].y;
    float _682 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_674].z;
    float _3530 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _686 = 1.0 - _555;
    float _687 = _683 * _686;
    float _688 = _684 * _686;
    float _689 = _685 * _686;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _555;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _555;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _555;
    float _697 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    vec4 _709 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _636));
    float _713 = ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * TEXCOORD_5.w) * _709.x;
    float _714 = dot(vec3(_547, _548, _549), vec3(_627, _628, _629));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _547) - _627;
    float _722 = (_717 * _548) - _628;
    float _723 = (_717 * _549) - _629;
    float _727 = abs(dot(vec3(_627, _628, _629), vec3(_547, _548, _549)));
    float _3563 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _729 = sqrt(_550);
    float _742 = exp2((_729 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_729 * 3.0));
    float _748 = (1.0 - _742) * ((_729 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _749 = _742 * _729;
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _815 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _819 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _844 = _777 + _547;
        float _845 = _781 + _548;
        float _846 = _785 + _549;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_547, _548, _549), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3611 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_547, _548, _549), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3644 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_547, _548, _549), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3677 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1126 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1130 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1134 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1157 = _777 + _547;
        float _1158 = _781 + _548;
        float _1159 = _785 + _549;
        float _1169 = fma(_1159, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157)) - _1126;
        float _1170 = fma(_1159, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157)) - _1130;
        float _1171 = fma(_1159, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157)) - _1134;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1126 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1130 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[35u].z) + ((((((_1134 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1225 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1192.x + (-0.5));
        float _1227 = _1225 * (_1192.y + (-0.5));
        float _1228 = _1225 * (_1192.z + (-0.5));
        float _1235 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1199.x + (-0.5));
        float _1237 = _1235 * (_1199.y + (-0.5));
        float _1238 = _1235 * (_1199.z + (-0.5));
        float _1245 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1206.x + (-0.5));
        float _1247 = _1245 * (_1206.y + (-0.5));
        float _1248 = _1245 * (_1206.z + (-0.5));
        float _1255 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1213.x + (-0.5));
        float _1257 = _1255 * (_1213.y + (-0.5));
        float _1258 = _1255 * (_1213.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_547, _548, _549), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3740 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1289 + 1.0))) + _1294) * _1259;
        float _1304 = _1227 * 0.5;
        float _1305 = _1237 * 0.5;
        float _1306 = _1247 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_547, _548, _549), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3773 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1331 + 1.0))) + _1336) * _1260;
        float _1346 = _1228 * 0.5;
        float _1347 = _1238 * 0.5;
        float _1348 = _1248 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_547, _548, _549), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3806 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1373 + 1.0))) + _1378) * _1261;
        _1395 = _1228;
        _1396 = _1227;
        _1397 = _1226;
        _1398 = _1238;
        _1399 = _1237;
        _1400 = _1236;
        _1401 = _1248;
        _1402 = _1247;
        _1403 = _1246;
        _1404 = _1261;
        _1405 = _1260;
        _1406 = _1259;
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1087;
        _1396 = _1087;
        _1397 = _1087;
        _1398 = _1087;
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1099)) + _1099;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1100)) + _1100;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1101)) + _1101;
    float _1442 = fma(_1421, cbSceneParam._m0[89u].z, fma(_1420, cbSceneParam._m0[89u].y, _1419 * cbSceneParam._m0[89u].x));
    float _1445 = fma(_1421, cbSceneParam._m0[90u].z, fma(_1420, cbSceneParam._m0[90u].y, _1419 * cbSceneParam._m0[90u].x));
    float _1448 = fma(_1421, cbSceneParam._m0[91u].z, fma(_1420, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1419));
    float _1463 = _721 * 0.5;
    float _1464 = _722 * 0.5;
    float _1465 = _723 * 0.5;
    float _1466 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1469 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1472 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1506;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1479 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1483 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1487 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1494 = dot(vec4(cbModelParam._m0[39u]), vec4(_1463, _1464, _1465, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1517;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1508 = dot(vec4(cbModelParam._m0[40u]), vec4(_1463, _1464, _1465, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1521 = (_1517 * cbModelParam._m0[1u].x) + (_1506 * (1.0 - cbModelParam._m0[1u].x));
    float _1531 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _550);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1531 : min(cbModelParam._m0[25u].z, _1531));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1581 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1585 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1589 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1592 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1595 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1598 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1626;
        if (_1592 > 0.0)
        {
            _1626 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1626 = frontier_phi_14_12_ladder;
        }
        float _1851;
        if (_1595 > 0.0)
        {
            _1851 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1851 = frontier_phi_23_19_ladder;
        }
        float _2108;
        if (_1598 > 0.0)
        {
            _2108 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2108 = frontier_phi_35_30_ladder;
        }
        float _2110 = isnan(_1851) ? _1626 : (isnan(_1626) ? _1851 : min(_1626, _1851));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1592) + _1581;
        float _2116 = (_2111 * _1595) + _1585;
        float _2117 = (_2111 * _1598) + _1589;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1532);
            frontier_phi_13_35_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1614 = frontier_phi_13_35_ladder_2;
        _1616 = frontier_phi_13_35_ladder_1;
        _1618 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1532);
        _1614 = _1602.x * cbModelParam._m0[1u].y;
        _1616 = _1602.y * cbModelParam._m0[1u].y;
        _1618 = _1602.z * cbModelParam._m0[1u].y;
    }
    float _1622 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _550);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1622 : min(cbModelParam._m0[25u].w, _1622));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1692 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1695 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1856;
        if (_1689 > 0.0)
        {
            _1856 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1856 = frontier_phi_25_21_ladder;
        }
        float _2135;
        if (_1692 > 0.0)
        {
            _2135 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2135 = frontier_phi_37_32_ladder;
        }
        float _2348;
        if (_1695 > 0.0)
        {
            _2348 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2348 = frontier_phi_46_43_ladder;
        }
        float _2350 = isnan(_2135) ? _1856 : (isnan(_1856) ? _2135 : min(_1856, _2135));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1689) + _1678;
        float _2356 = (_2351 * _1692) + _1682;
        float _2357 = (_2351 * _1695) + _1686;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2358;
        float _2361 = _2358 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2357 > _2361) || ((_2357 < _2359) || ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 < _2359) || (_2355 > _2361))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2357, cbModelParam._m0[17u].z, fma(_2356, cbModelParam._m0[17u].y, _2355 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2357, cbModelParam._m0[18u].z, fma(_2356, cbModelParam._m0[18u].y, _2355 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2357, cbModelParam._m0[19u].z, fma(_2356, cbModelParam._m0[19u].y, _2355 * cbModelParam._m0[19u].x))), _1623);
            frontier_phi_22_46_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_22_46_ladder_2;
        _1716 = frontier_phi_22_46_ladder_1;
        _1718 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1623);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1731 = (((_748 * _697) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1733 = (((_748 * _699) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1735 = (((_748 * _700) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    vec4 _1752 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_635, _636));
    float _1754 = _1752.w;
    float _1766 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1754);
    float _1767 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1754);
    float _1768 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1754);
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _713 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1810 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1814 = _1774 | 1u;
    float _1825 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_547, _548, _549));
    float _1828 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_547, _548, _549));
    float _3942 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _3953 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1833 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1835 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1842 = ((cbLight._m0[_1791].x * _1797) * _1835) + (((cbLight._m0[_1801].x * _1766) * _1810) * _1833);
    float _1843 = ((_1797 * cbLight._m0[_1791].y) * _1835) + (((cbLight._m0[_1801].y * _1767) * _1810) * _1833);
    float _1844 = ((_1797 * cbLight._m0[_1791].z) * _1835) + (((cbLight._m0[_1801].z * _1768) * _1810) * _1833);
    uvec4 _1848 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1850 = _1848.x == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1850)
    {
        _1861 = _1842;
        _1863 = _1843;
        _1865 = _1844;
    }
    else
    {
        uint _1869 = _1774 + 6u;
        float _1885 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_547, _548, _549)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3964 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1888 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1861 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1842;
        _1863 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1843;
        _1865 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1844;
    }
    bool _1868 = _1848.y == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1868)
    {
        _1906 = _1861;
        _1908 = _1863;
        _1910 = _1865;
    }
    else
    {
        uint _2079 = _1774 + 7u;
        float _2095 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_547, _548, _549)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _3980 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2098 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1906 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1861;
        _1908 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1863;
        _1910 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1865;
    }
    uint _1913 = _1774 + 8u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _550) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1774].x + _627;
    float _1929 = cbLight._m0[_1774].y + _628;
    float _1930 = cbLight._m0[_1774].z + _629;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_1774].xyz));
    float _3996 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _1942 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1943 = dot(vec3(_547, _548, _549), vec3(_1935, _1936, _1937));
    float _4018 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1935, _1936, _1937));
    float _4029 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1927 * _1927;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
    float _1964 = 0.959999978542327880859375 - _694;
    float _1966 = 0.959999978542327880859375 - _695;
    float _1967 = 0.959999978542327880859375 - _696;
    float _1974 = 1.0 - _1927;
    float _1985 = (0.5 / (((_1942 * ((_1941 * _1974) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _1974) + _1927) * _1941))) * _1941;
    float _4040 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    uint _2001 = _1774 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _550) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1814].x + _627;
    float _2015 = cbLight._m0[_1814].y + _628;
    float _2016 = cbLight._m0[_1814].z + _629;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_1814].xyz));
    float _4051 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _2028 = dot(vec3(_547, _548, _549), vec3(_2021, _2022, _2023));
    float _4062 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_2021, _2022, _2023));
    float _4073 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _2054 = 1.0 - _2013;
    float _2064 = (0.5 / (((_1942 * ((_2027 * _2054) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2054) + _2013) * _2027))) * _2027;
    float _4084 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2076 = (((((_2047 * _1964) + _697) * cbLight._m0[_2001].x) * _2066) * _1797) + ((((cbLight._m0[_1913].x * _1766) * ((_1963 * _1964) + _697)) * _1987) * _1810);
    float _2077 = (((((_2047 * _1966) + _699) * cbLight._m0[_2001].y) * _2066) * _1797) + ((((cbLight._m0[_1913].y * _1767) * ((_1963 * _1966) + _699)) * _1987) * _1810);
    float _2078 = (((((_2047 * _1967) + _700) * cbLight._m0[_2001].z) * _2066) * _1797) + ((((cbLight._m0[_1913].z * _1768) * ((_1963 * _1967) + _700)) * _1987) * _1810);
    float _2140;
    float _2142;
    float _2144;
    if (_1850)
    {
        _2140 = _2076;
        _2142 = _2077;
        _2144 = _2078;
    }
    else
    {
        uint _2146 = _1774 + 2u;
        uint _2150 = _1774 + 10u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _550) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _627;
        float _2167 = cbLight._m0[_2146].y + _628;
        float _2168 = cbLight._m0[_2146].z + _629;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2146].xyz));
        float _4095 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2180 = dot(vec3(_547, _548, _549), vec3(_2173, _2174, _2175));
        float _4106 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4117 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
        float _2206 = 1.0 - _2165;
        float _2216 = (0.5 / (((_1942 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2206) + _2165) * _2179))) * _2179;
        float _4128 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2219 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2140 = (((((_2199 * _1964) + _697) * cbLight._m0[_2150].x) * _2218) * _2219) + _2076;
        _2142 = (((((_2199 * _1966) + _699) * cbLight._m0[_2150].y) * _2218) * _2219) + _2077;
        _2144 = (((((_2199 * _1967) + _700) * cbLight._m0[_2150].z) * _2218) * _2219) + _2078;
    }
    float _2254;
    float _2256;
    float _2258;
    if (_1868)
    {
        _2254 = _2140;
        _2256 = _2142;
        _2258 = _2144;
    }
    else
    {
        uint _2265 = _1774 + 3u;
        uint _2269 = _1774 + 11u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _550) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _627;
        float _2286 = cbLight._m0[_2265].y + _628;
        float _2287 = cbLight._m0[_2265].z + _629;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2265].xyz));
        float _4144 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2299 = dot(vec3(_547, _548, _549), vec3(_2292, _2293, _2294));
        float _4155 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4166 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2325 = 1.0 - _2284;
        float _2335 = (0.5 / (((_1942 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2325) + _2284) * _2298))) * _2298;
        float _4177 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2337 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2338 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2254 = (((((_2318 * _1964) + _697) * cbLight._m0[_2269].x) * _2337) * _2338) + _2140;
        _2256 = (((((_2318 * _1966) + _699) * cbLight._m0[_2269].y) * _2337) * _2338) + _2142;
        _2258 = (((((_2318 * _1967) + _700) * cbLight._m0[_2269].z) * _2337) * _2338) + _2144;
    }
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_1772.y == 0u)
    {
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2413;
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2413;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2413;
        uvec4 _2428 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2429 = _2428.x;
        uint _2440 = uint((float(_2428.y) * floor(float(uint(cbSceneParam._m0[85u].y * _636) / _2429))) + floor(float(uint(cbSceneParam._m0[85u].x * _635) / _2429)));
        float _2450 = (log2(_2416 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2451 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        uint _2454 = uint(isnan(14.0) ? _2451 : (isnan(_2451) ? 14.0 : min(_2451, 14.0)));
        uvec4 _2459 = texelFetch(g_lightClusterGridBuffer, int(((_2454 << 2u) + (_2440 << 6u)) >> 2u));
        uint _2460 = _2459.x;
        uint _2461 = _2428.z;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((((1u << ((_2461 >> 4u) & 15u)) + 4294967295u) & _2460) == 0u) || ((_2461 & 240u) == 0u))
        {
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
        }
        else
        {
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            uint _2712 = 0u;
            uint _2721;
            bool _2722;
            for (;;)
            {
                _2721 = texelFetch(g_lightClassification, int((((_2454 << 5u) + (_2440 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                _2722 = _2721 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2722)
                {
                    frontier_phi_61_pred = _2706;
                    frontier_phi_61_pred_1 = _2711;
                    frontier_phi_61_pred_2 = _2710;
                    frontier_phi_61_pred_3 = _2709;
                    frontier_phi_61_pred_4 = _2708;
                    frontier_phi_61_pred_5 = _2707;
                }
                else
                {
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    uint _2836;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2721;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    for (;;)
                    {
                        uint _2840 = uint(findLSB(_2836)) + (_2712 << 5u);
                        uint _2837 = (_2836 + 4294967295u) & _2836;
                        uint _2842 = _2840 * 48u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 3u)).x));
                        uint _2862 = (_2840 * 48u) + 4u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2881 = (_2840 * 48u) + 8u;
                        vec3 _2892 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x));
                        float _2896 = _2856.x - _2414;
                        float _2897 = _2856.y - _2415;
                        float _2898 = _2856.z - _2416;
                        float _2899 = dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898));
                        float _2902 = inversesqrt(_2899);
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2906 = dot(vec3(_654, _657, _660), vec3(_2903, _2904, _2905));
                        float _2911 = 1.0 - (_2899 * _2856.w);
                        float _4203 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2913 = sqrt(_2899) * _2875.w;
                        float _2916 = 1.39999997615814208984375 / (_2913 + 1.39999997615814208984375);
                        float _2917 = _2916 * _2916;
                        float _2920 = ((1.0 - _2917) * _2906) + _2917;
                        float _2923 = _2913 * _2913;
                        float _2927 = ((isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))) * _2912) / ((_2923 * 0.699999988079071044921875) + 1.0);
                        float _2931 = (-0.0) - _2414;
                        float _2932 = (-0.0) - _2415;
                        float _2933 = (-0.0) - _2416;
                        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2948 = exp2(log2(1.0 / ((_2923 * 3.5) + 5.0)) * 0.25);
                        float _2949 = 1.0 - _729;
                        float _2956 = sqrt(1.0 - ((1.0 - (_2949 * _2949)) * (1.0 - (_2948 * _2948))));
                        float _2957 = _2956 * _2956;
                        float _2958 = _2957 * _2957;
                        float _2959 = _2938 + _2903;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2969 = dot(vec3(_654, _657, _660), vec3(_2938, _2939, _2940));
                        float _4219 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2973 = dot(vec3(_654, _657, _660), vec3(_2965 * _2959, _2965 * _2960, _2965 * _2961));
                        float _4230 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2980 = ((_2976 * _2976) * (_2958 + (-1.0))) + 1.0;
                        float _2981 = _2916 * _2957;
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2906) + _2982;
                        float _4241 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2987 = 1.0 - _2957;
                        float _2997 = (0.5 / (((_2986 * ((_2972 * _2987) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2986 * _2987) + _2957) * _2972))) * _2986;
                        float _4252 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3008 = (((_2958 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_2980 * _2980) * ((_2923 * 2.1991131305694580078125) + 3.141590118408203125))) * _2912;
                        _2765 = (_2927 * _2875.x) + _2833;
                        _2766 = (_2927 * _2875.y) + _2834;
                        _2767 = (_2927 * _2875.z) + _2835;
                        _2762 = (_3008 * _2892.x) + _2830;
                        _2763 = (_3008 * _2892.y) + _2831;
                        _2764 = (_3008 * _2892.z) + _2832;
                        if (_2837 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2837;
                        }
                    }
                    frontier_phi_61_pred = _2762;
                    frontier_phi_61_pred_1 = _2767;
                    frontier_phi_61_pred_2 = _2766;
                    frontier_phi_61_pred_3 = _2765;
                    frontier_phi_61_pred_4 = _2764;
                    frontier_phi_61_pred_5 = _2763;
                }
                _2562 = frontier_phi_61_pred;
                _2572 = frontier_phi_61_pred_1;
                _2570 = frontier_phi_61_pred_2;
                _2568 = frontier_phi_61_pred_3;
                _2566 = frontier_phi_61_pred_4;
                _2564 = frontier_phi_61_pred_5;
                uint _2713 = _2712 + 1u;
                if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2706 = _2562;
                    _2707 = _2564;
                    _2708 = _2566;
                    _2709 = _2568;
                    _2710 = _2570;
                    _2711 = _2572;
                    _2712 = _2713;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
        }
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.z;
        uint _2578 = (_2576 >> 8u) & 15u;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((4294967295u << _2578) & _2460) == 0u)
        {
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
        }
        else
        {
            float _2699 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
            float _2700 = _2699 * _2414;
            float _2701 = _2699 * _2415;
            float _2702 = _2699 * _2416;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2578 < ((_2576 >> 12u) & 15u))
            {
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2813 = _2561;
                float _2814 = _2563;
                float _2815 = _2565;
                float _2816 = _2567;
                float _2817 = _2569;
                float _2818 = _2571;
                uint _2819 = _2578;
                uint _2828;
                bool _2829;
                for (;;)
                {
                    _2828 = texelFetch(g_lightClassification, int((((_2454 << 5u) + (_2440 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                    _2829 = _2828 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2829)
                    {
                        frontier_phi_67_pred = _2816;
                        frontier_phi_67_pred_1 = _2817;
                        frontier_phi_67_pred_2 = _2818;
                        frontier_phi_67_pred_3 = _2815;
                        frontier_phi_67_pred_4 = _2814;
                        frontier_phi_67_pred_5 = _2813;
                    }
                    else
                    {
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        uint _3032 = _2828;
                        uint _3033;
                        vec4 _3058;
                        float _3059;
                        vec4 _3074;
                        vec3 _3086;
                        vec4 _3101;
                        vec4 _3117;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3043 = ((_2819 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3032));
                            _3033 = (_3032 + 4294967295u) & _3032;
                            uint _3045 = _3043 * 40u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3059 = _3058.w;
                            uint _3061 = (_3043 * 40u) + 4u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3043 * 40u) + 8u;
                            _3086 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x));
                            uint _3088 = (_3043 * 40u) + 16u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3104 = (_3043 * 40u) + 20u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3043 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3043 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2416, _3152.z, fma(_2415, _3152.y, _3152.x * _2414)) + _3152.w;
                            _3165 = !((fma(_2416, _3133.z, fma(_2415, _3133.y, _3133.x * _2414)) + _3133.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3165)
                            {
                                float _3192 = _3058.x - _2414;
                                float _3193 = _3058.y - _2415;
                                float _3194 = _3058.z - _2416;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3059 * _3059));
                                float _4263 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3210 = sqrt(_3195) * _3074.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3216 = ((1.0 - _3213) * dot(vec3(_3199, _3200, _3201), vec3(_654, _657, _660))) + _3213;
                                float _3219 = _3210 * _3210;
                                float _3223 = (fma(_2416, _3101.z, fma(_2415, _3101.y, _3101.x * _2414)) + _3101.w) / _3164;
                                float _3224 = (fma(_2416, _3117.z, fma(_2415, _3117.y, _3117.x * _2414)) + _3117.w) / _3164;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4279 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3206) / ((_3219 * 0.699999988079071044921875) + 1.0));
                                float _3242 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _729;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3199 - _2700;
                                float _3254 = _3200 - _2701;
                                float _3255 = _3201 - _2702;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_654, _657, _660), vec3((-0.0) - _2700, (-0.0) - _2701, (-0.0) - _2702));
                                float _4290 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3267 = dot(vec3(_654, _657, _660), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4301 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3212 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_654, _657, _660), vec3(_3199, _3200, _3201))) + _3276;
                                float _4312 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4323 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3229 * _3206) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) / ((_3274 * _3274) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3304 * _3086.x;
                                frontier_phi_73_pred_1 = _3304 * _3086.y;
                                frontier_phi_73_pred_2 = _3230 * _3074.z;
                                frontier_phi_73_pred_3 = _3230 * _3074.y;
                                frontier_phi_73_pred_4 = _3230 * _3074.x;
                                frontier_phi_73_pred_5 = _3304 * _3086.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_73_pred;
                            _3309 = frontier_phi_73_pred_1;
                            _3313 = frontier_phi_73_pred_2;
                            _3312 = frontier_phi_73_pred_3;
                            _3311 = frontier_phi_73_pred_4;
                            _3310 = frontier_phi_73_pred_5;
                            _3016 = _3311 + _3029;
                            _3017 = _3312 + _3030;
                            _3018 = _3313 + _3031;
                            _3013 = _3308 + _3026;
                            _3014 = _3309 + _3027;
                            _3015 = _3310 + _3028;
                            if (_3033 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3033;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3016;
                        frontier_phi_67_pred_1 = _3017;
                        frontier_phi_67_pred_2 = _3018;
                        frontier_phi_67_pred_3 = _3015;
                        frontier_phi_67_pred_4 = _3014;
                        frontier_phi_67_pred_5 = _3013;
                    }
                    _2681 = frontier_phi_67_pred;
                    _2683 = frontier_phi_67_pred_1;
                    _2685 = frontier_phi_67_pred_2;
                    _2679 = frontier_phi_67_pred_3;
                    _2677 = frontier_phi_67_pred_4;
                    _2675 = frontier_phi_67_pred_5;
                    uint _2820 = _2819 + 1u;
                    if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2813 = _2675;
                        _2814 = _2677;
                        _2815 = _2679;
                        _2816 = _2681;
                        _2817 = _2683;
                        _2818 = _2685;
                        _2819 = _2820;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2683;
                frontier_phi_55_56_ladder_1 = _2685;
                frontier_phi_55_56_ladder_2 = _2681;
                frontier_phi_55_56_ladder_3 = _2679;
                frontier_phi_55_56_ladder_4 = _2677;
                frontier_phi_55_56_ladder_5 = _2675;
            }
            else
            {
                frontier_phi_55_56_ladder = _2569;
                frontier_phi_55_56_ladder_1 = _2571;
                frontier_phi_55_56_ladder_2 = _2567;
                frontier_phi_55_56_ladder_3 = _2565;
                frontier_phi_55_56_ladder_4 = _2563;
                frontier_phi_55_56_ladder_5 = _2561;
            }
            _2674 = frontier_phi_55_56_ladder_5;
            _2676 = frontier_phi_55_56_ladder_4;
            _2678 = frontier_phi_55_56_ladder_3;
            _2680 = frontier_phi_55_56_ladder_2;
            _2682 = frontier_phi_55_56_ladder;
            _2684 = frontier_phi_55_56_ladder_1;
        }
        float _2689 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2473 = (_2689 * _2680) + _1906;
        _2475 = (_2689 * _2682) + _1908;
        _2477 = (_2689 * _2684) + _1910;
        _2479 = ((_2674 * _697) * _2689) + _2254;
        _2481 = ((_2676 * _699) * _2689) + _2256;
        _2483 = ((_2678 * _700) * _2689) + _2258;
    }
    else
    {
        _2473 = _1906;
        _2475 = _1908;
        _2477 = _1910;
        _2479 = _2254;
        _2481 = _2256;
        _2483 = _2258;
    }
    float _4339 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4350 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4361 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    uint _2503 = _232 + 6u;
    float _2511 = _635 / cbSceneParam._m0[86u].x;
    float _2512 = _636 / cbSceneParam._m0[86u].y;
    vec4 _2526 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, (log2((isnan(cbSceneParam._m0[77u].w) ? _569 : (isnan(_569) ? cbSceneParam._m0[77u].w : min(_569, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2528 = _2526.x;
    float _2529 = _2526.y;
    float _2530 = _2526.z;
    float _2531 = _2526.w;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_569 > cbSceneParam._m0[78u].w)
    {
        float _2586 = isnan(_569) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _569 : min(cbSceneParam._m0[80u].w, _569));
        float _2587 = _2586 / _569;
        float _2598 = _2587 * _620;
        float _2599 = _621 * _2587;
        float _2600 = (-0.0) - _2599;
        float _2602 = _2587 * _622;
        float _2604 = (cbSceneParam._m0[77u].w * _2600) / _2586;
        float _2605 = _2604 + cbSceneParam._m0[79u].w;
        float _2606 = cbSceneParam._m0[79u].w - _2599;
        float _2612 = sqrt(((_2598 * _2598) + (_2599 * _2599)) + (_2602 * _2602));
        float _2615 = (1.0 - (cbSceneParam._m0[77u].w / _2586)) * _2612;
        float _2620 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2622 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2775;
        if (abs((_2600 - _2604) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2775 = ((((_2605 > 0.0) ? exp2(_2620 * _2605) : (2.0 - exp2(_2622 * _2605))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2615;
        }
        else
        {
            float _2735 = 1.0 / cbSceneParam._m0[80u].x;
            float _2736 = isnan(_2606) ? _2605 : (isnan(_2605) ? _2606 : max(_2605, _2606));
            float _2737 = isnan(_2606) ? _2605 : (isnan(_2605) ? _2606 : min(_2605, _2606));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            _2775 = ((abs(_2612 / _2600) * cbSceneParam._m0[80u].y) * ((((_2746 - _2747) * 2.0) - ((exp2(_2620 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0)))) - exp2(_2620 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))))) * _2735)) - ((exp2(_2622 * _2746) - exp2(_2622 * _2747)) * _2735))) + (_2615 * cbSceneParam._m0[80u].z);
        }
        vec4 _2777 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, 1.0), 0.0);
        float _2786 = exp2((_2775 * (-1.44269502162933349609375)) * (1.0 - _2777.w));
        float _2787 = log2(_2786);
        float _2803 = log2(_2531);
        _2624 = (exp2(_2803 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].x)) * _2777.x) / cbSceneParam._m0[78u].x)) + _2528;
        _2626 = (exp2(_2803 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].y)) * _2777.y) / cbSceneParam._m0[78u].y)) + _2529;
        _2628 = (exp2(_2803 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].z)) * _2777.z) / cbSceneParam._m0[78u].z)) + _2530;
        _2630 = _2786 * _2531;
    }
    else
    {
        _2624 = _2528;
        _2626 = _2529;
        _2628 = _2530;
        _2630 = _2531;
    }
    float _2642 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2643 = _2642 == 3.0;
    float _2644 = log2(_2630);
    float _2651 = exp2(_2644 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2473 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _713))) + ((_2479 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2652 = exp2(_2644 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2475 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _713))) + ((_2481 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2653 = exp2(_2644 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2477 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _713))) + ((_2483 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2662 = (_2642 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2662 * (_2643 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.y = _2662 * (_2643 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.z = _2662 * (_2643 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.w = cbInstanceData._m0[_2503].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2503].w;
}


