#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1741;
float _4142;
float _4143;
float _4144;
float _4145;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4154 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4165 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4176 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4187 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[23u].w) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4198 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _550 = (_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477;
    float _551 = (_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478;
    float _552 = (_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[23u].w) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4209 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _620 = (_613 * ((_571.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _621 = (_613 * ((_571.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _622 = (_613 * ((_571.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _626 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _620;
    float _629 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _621;
    float _632 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _622;
    float _639 = ((_620 - _626) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _626;
    float _640 = ((_621 - _629) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) + _629;
    float _641 = ((_622 - _632) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) + _632;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _702 = _700.x;
    float _703 = _700.y;
    float _704 = _700.z;
    float _711 = ((_683.x - _702) * _470) + _702;
    float _712 = ((_683.y - _703) * _470) + _703;
    float _713 = ((_683.z - _704) * _470) + _704;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _736 = ((_725.x - _711) * _543) + _711;
    float _737 = ((_725.y - _712) * _543) + _712;
    float _738 = ((_725.z - _713) * _543) + _713;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _763 = ((_750.z - _738) * _613) + _738;
    float _766 = ((((_750.x - _736) * _613) + _736) * 2.0) + (-1.0);
    float _767 = ((((_750.y - _737) * _613) + _737) * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4220 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))));
    vec4 _791 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _803 = (_766 + ((((_658.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_791.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _804 = (_767 + ((((_658.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_791.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _807 = fma(_773, _270, fma(_804, _277, _803 * _263));
    float _810 = fma(_773, _271, fma(_804, _278, _803 * _264));
    float _813 = fma(_773, _272, fma(_804, _279, _803 * _265));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _846 = _844.x;
    float _847 = 1.0 - _846;
    float _855 = (cbMtdParam._m0[19u].x + dot(vec4(_817 * _807, _817 * _810, _817 * _813, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_846 - _847) * cbMtdParam._m0[24u].z) + _847) * cbMtdParam._m0[21u].z);
    float _4231 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _858 = (-0.0) - cbMtdParam._m0[24u].x;
    float _860 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
    float _868 = _856 - ((_856 * TEXCOORD_8.x) * _861);
    float _869 = _856 - ((_856 * TEXCOORD_8.y) * _861);
    float _870 = _856 - ((_856 * TEXCOORD_8.z) * _861);
    float _877 = (_868 * (cbMtdParam._m0[17u].x - _639)) + _639;
    float _878 = (_869 * (cbMtdParam._m0[17u].y - _640)) + _640;
    float _879 = (_870 * (cbMtdParam._m0[17u].z - _641)) + _641;
    float _894 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _895 = _894 * TEXCOORD.z;
    float _896 = _894 * TEXCOORD.w;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _895) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _896) + cbTextureTilingScale._m0[19u].w));
    float _910 = _908.x;
    float _911 = 1.0 - _910;
    float _937 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_910 - _911) * cbMtdParam._m0[24u].w) + _911) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4252 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _938 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _946 = ((((cbMtdParam._m0[10u].x - _877) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _938) + _877;
    float _947 = ((((cbMtdParam._m0[10u].y - _878) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _938) + _878;
    float _948 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _879)) * _938) + _879;
    vec4 _974 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _976 = _974.x;
    float _994 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _976) * _470) + _976;
    float _1011 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _994) * _543) + _994;
    float _1028 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1011) * _613) + _1011;
    float _1034 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1028) * cbMtdParam._m0[19u].z) + _1028;
    float _1036 = _1034 - (_1034 * _868);
    float _1038 = _1036 - (_1036 * _938);
    float _1043 = (((_658.z - _763) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _763;
    float _1047 = ((_791.z - _1043) * cbMtdParam._m0[19u].w) + _1043;
    vec4 _1063 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1070 = (_1063.x * 2.0) + (-1.0);
    float _1071 = (_1063.y * 2.0) + (-1.0);
    float _1072 = dot(vec2(_1070, _1071), vec2(_1070, _1071));
    float _4263 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1080 = ((_1063.z - _1047) * _868) + _1047;
    float _1083 = ((cbMtdParam._m0[23u].x - _1080) * _938) + _1080;
    vec4 _1106 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _895) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _896) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1112 = (_1106.x * 2.0) + (-1.0);
    float _1113 = (_1106.y * 2.0) + (-1.0);
    float _1114 = dot(vec2(_1112, _1113), vec2(_1112, _1113));
    float _4274 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1129 = ((sqrt(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) - _773) * _870) + _773;
    float _1132 = (((_1070 - _803) * _868) + _803) + (cbMtdParam._m0[21u].x * _803);
    float _1133 = (((_1071 - _804) * _869) + _804) + (cbMtdParam._m0[21u].x * _804);
    float _1144 = (((_1112 - _1132) + (_1132 * cbMtdParam._m0[22u].z)) * _938) + _1132;
    float _1145 = (((_1113 - _1133) + (_1133 * cbMtdParam._m0[22u].z)) * _938) + _1133;
    float _1146 = (_938 * (sqrt(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) - _1129)) + _1129;
    float _1148 = cbMtdParam._m0[22u].x + _791.w;
    float _1151 = fma(_1146, _270, fma(_1145, _277, _1144 * _263));
    float _1154 = fma(_1146, _271, fma(_1145, _278, _1144 * _264));
    float _1157 = fma(_1146, _272, fma(_1145, _279, _1144 * _265));
    float _1161 = inversesqrt(dot(vec3(_1151, _1154, _1157), vec3(_1151, _1154, _1157)));
    float _1162 = _1161 * _1151;
    float _1163 = _1161 * _1154;
    float _1164 = _1161 * _1157;
    float _4285 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1165 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _4307 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4318 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4329 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4340 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1170 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _1184 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1234 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1224);
    float _1235 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1224);
    float _1236 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1224);
    float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
    float _1241 = _1234 * _1240;
    float _1242 = _1235 * _1240;
    float _1243 = _1236 * _1240;
    vec4 _1248 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1250 = _1248.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1422 = sqrt(((_1234 * _1234) + (_1235 * _1235)) + (_1236 * _1236));
        float _1428 = (cbMatDynParam._m0[5u].x * _1422) + cbMatDynParam._m0[5u].y;
        float _4351 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1433 = (cbMatDynParam._m0[5u].z * _1422) + cbMatDynParam._m0[5u].w;
        float _4362 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) - _1429)) + _1429) < ((_1250 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1261 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1262 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1280 = fma(_1164, cbSceneParam._m0[5u].z, fma(_1163, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1162));
    float _1283 = fma(_1164, cbSceneParam._m0[6u].z, fma(_1163, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1162));
    float _1286 = fma(_1164, cbSceneParam._m0[7u].z, fma(_1163, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1162));
    uint _1299 = _301 + 9u;
    uint _1300 = _1299 + uint(cbMatDynParam._m0[0u].w);
    float _1306 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1300].x;
    float _1307 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1300].y;
    float _1308 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * cbInstanceData._m0[_1300].z;
    float _4373 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1309 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _1310 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1311 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _1312 = 1.0 - _1170;
    float _1313 = _1309 * _1312;
    float _1314 = _1310 * _1312;
    float _1315 = _1311 * _1312;
    float _1320 = (_1309 + (-0.039999999105930328369140625)) * _1170;
    float _1321 = (_1310 + (-0.039999999105930328369140625)) * _1170;
    float _1322 = (_1311 + (-0.039999999105930328369140625)) * _1170;
    float _1323 = _1320 + 0.039999999105930328369140625;
    float _1325 = _1321 + 0.039999999105930328369140625;
    float _1326 = _1322 + 0.039999999105930328369140625;
    vec4 _1335 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1261, cbSceneParam._m0[86u].y * _1262));
    float _1339 = ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * TEXCOORD_5.w) * _1335.x;
    float _1340 = dot(vec3(_1162, _1163, _1164), vec3(_1241, _1242, _1243));
    float _1343 = _1340 * 2.0;
    float _1347 = (_1343 * _1162) - _1241;
    float _1348 = (_1343 * _1163) - _1242;
    float _1349 = (_1343 * _1164) - _1243;
    float _1353 = abs(dot(vec3(_1241, _1242, _1243), vec3(_1162, _1163, _1164)));
    float _4406 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1355 = sqrt(_1165);
    float _1368 = exp2((_1355 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1355 * 3.0));
    float _1374 = (1.0 - _1368) * ((_1355 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1375 = _1368 * _1355;
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1740;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1465 = fma(_1411, cbModelParam._m0[26u].z, fma(_1407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1403));
        float _1469 = fma(_1411, cbModelParam._m0[27u].z, fma(_1407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1403));
        float _1473 = fma(_1411, cbModelParam._m0[28u].z, fma(_1407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1403));
        float _1498 = _1403 + _1162;
        float _1499 = _1407 + _1163;
        float _1500 = _1411 + _1164;
        float _1510 = fma(_1500, cbModelParam._m0[26u].z, fma(_1499, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1498)) - _1465;
        float _1511 = fma(_1500, cbModelParam._m0[27u].z, fma(_1499, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1498)) - _1469;
        float _1512 = fma(_1500, cbModelParam._m0[28u].z, fma(_1499, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1498)) - _1473;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1465 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1469 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[34u].z) + ((((((_1473 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1568 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1534.x + (-0.5));
        float _1570 = _1568 * (_1534.y + (-0.5));
        float _1571 = _1568 * (_1534.z + (-0.5));
        float _1578 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1541.x + (-0.5));
        float _1580 = _1578 * (_1541.y + (-0.5));
        float _1581 = _1578 * (_1541.z + (-0.5));
        float _1588 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1548.x + (-0.5));
        float _1590 = _1588 * (_1548.y + (-0.5));
        float _1591 = _1588 * (_1548.z + (-0.5));
        float _1598 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1555.x + (-0.5));
        float _1600 = _1598 * (_1555.y + (-0.5));
        float _1601 = _1598 * (_1555.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1622 = (dot(vec3(_1162, _1163, _1164), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1632 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4454 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1634 + 1.0))) + _1639) * _1602;
        float _1649 = _1570 * 0.5;
        float _1650 = _1580 * 0.5;
        float _1651 = _1590 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_1162, _1163, _1164), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4487 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1676 + 1.0))) + _1681) * _1603;
        float _1691 = _1571 * 0.5;
        float _1692 = _1581 * 0.5;
        float _1693 = _1591 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_1162, _1163, _1164), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4520 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1718 + 1.0))) + _1723) * _1604;
        _1740 = _1571;
        _1742 = _1570;
        _1743 = _1569;
        _1744 = _1581;
        _1745 = _1580;
        _1746 = _1579;
        _1747 = _1591;
        _1748 = _1590;
        _1749 = _1589;
        _1750 = _1604;
        _1751 = _1603;
        _1752 = _1602;
        _1753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1741;
        _1742 = _1741;
        _1743 = _1741;
        _1744 = _1741;
        _1745 = _1741;
        _1746 = _1741;
        _1747 = _1741;
        _1748 = _1741;
        _1749 = _1741;
        _1750 = _1741;
        _1751 = _1741;
        _1752 = _1741;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1781 = fma(_1411, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403));
        float _1785 = fma(_1411, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403));
        float _1789 = fma(_1411, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403));
        float _1812 = _1403 + _1162;
        float _1813 = _1407 + _1163;
        float _1814 = _1411 + _1164;
        float _1824 = fma(_1814, cbModelParam._m0[30u].z, fma(_1813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1812)) - _1781;
        float _1825 = fma(_1814, cbModelParam._m0[31u].z, fma(_1813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1812)) - _1785;
        float _1826 = fma(_1814, cbModelParam._m0[32u].z, fma(_1813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1812)) - _1789;
        float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
        float _1843 = ((_1830 * _1824) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1781 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1844 = ((_1830 * _1825) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1785 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1845 = ((_1830 * _1826) / cbModelParam._m0[35u].z) + ((((((_1789 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1847 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1843, _1844, _1845), 0.0);
        vec4 _1854 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1843, _1844, _1845), 0.0);
        vec4 _1861 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1843, _1844, _1845), 0.0);
        vec4 _1868 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1843, _1844, _1845), 0.0);
        float _1880 = exp2((_1847.w + (-0.5)) * 20.0) * 2.0;
        float _1881 = _1880 * (_1847.x + (-0.5));
        float _1882 = _1880 * (_1847.y + (-0.5));
        float _1883 = _1880 * (_1847.z + (-0.5));
        float _1890 = exp2((_1854.w + (-0.5)) * 20.0) * 2.0;
        float _1891 = _1890 * (_1854.x + (-0.5));
        float _1892 = _1890 * (_1854.y + (-0.5));
        float _1893 = _1890 * (_1854.z + (-0.5));
        float _1900 = exp2((_1861.w + (-0.5)) * 20.0) * 2.0;
        float _1901 = _1900 * (_1861.x + (-0.5));
        float _1902 = _1900 * (_1861.y + (-0.5));
        float _1903 = _1900 * (_1861.z + (-0.5));
        float _1910 = exp2((_1868.w + (-0.5)) * 20.0) * 2.0;
        float _1911 = _1910 * (_1868.x + (-0.5));
        float _1912 = _1910 * (_1868.y + (-0.5));
        float _1913 = _1910 * (_1868.z + (-0.5));
        float _1914 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1915 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1916 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1917 = _1881 * 0.5;
        float _1918 = _1891 * 0.5;
        float _1919 = _1901 * 0.5;
        float _1920 = dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919));
        float _1925 = (_1920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1920);
        float _1933 = (dot(vec3(_1162, _1163, _1164), vec3(_1925 * _1917, _1925 * _1918, _1925 * _1919)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1942 = sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919)) / (_1914 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1944 = _1943 * 2.0;
        float _1948 = (1.0 - _1943) / (_1943 + 1.0);
        float _4583 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1958 = ((((1.0 - _1949) * (_1944 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1944 + 1.0))) + _1949) * _1914;
        float _1959 = _1882 * 0.5;
        float _1960 = _1892 * 0.5;
        float _1961 = _1902 * 0.5;
        float _1962 = dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961));
        float _1967 = (_1962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1962);
        float _1975 = (dot(vec3(_1162, _1163, _1164), vec3(_1967 * _1959, _1967 * _1960, _1967 * _1961)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1984 = sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961)) / (_1915 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1986 = _1985 * 2.0;
        float _1990 = (1.0 - _1985) / (_1985 + 1.0);
        float _4616 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2000 = ((((1.0 - _1991) * (_1986 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1986 + 1.0))) + _1991) * _1915;
        float _2001 = _1883 * 0.5;
        float _2002 = _1893 * 0.5;
        float _2003 = _1903 * 0.5;
        float _2004 = dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003));
        float _2009 = (_2004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2004);
        float _2017 = (dot(vec3(_1162, _1163, _1164), vec3(_2009 * _2001, _2009 * _2002, _2009 * _2003)) + 1.0) * 0.5;
        float _4627 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2026 = sqrt(((_2002 * _2002) + (_2001 * _2001)) + (_2003 * _2003)) / (_1916 + 9.9999997473787516355514526367188e-06);
        float _4638 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2028 = _2027 * 2.0;
        float _2032 = (1.0 - _2027) / (_2027 + 1.0);
        float _4649 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2042 = ((((1.0 - _2033) * (_2028 + 2.0)) * exp2(log2(isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2028 + 1.0))) + _2033) * _1916;
        _2050 = _1883;
        _2051 = _1882;
        _2052 = _1881;
        _2053 = _1893;
        _2054 = _1892;
        _2055 = _1891;
        _2056 = _1903;
        _2057 = _1902;
        _2058 = _1901;
        _2059 = _1916;
        _2060 = _1915;
        _2061 = _1914;
        _2062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)));
        _2063 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)));
        _2064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    }
    else
    {
        _2050 = _1741;
        _2051 = _1741;
        _2052 = _1741;
        _2053 = _1741;
        _2054 = _1741;
        _2055 = _1741;
        _2056 = _1741;
        _2057 = _1741;
        _2058 = _1741;
        _2059 = _1741;
        _2060 = _1741;
        _2061 = _1741;
        _2062 = 0.0;
        _2063 = 0.0;
        _2064 = 0.0;
    }
    float _2074 = (cbModelParam._m0[1u].x * (_2062 - _1753)) + _1753;
    float _2075 = (cbModelParam._m0[1u].x * (_2063 - _1754)) + _1754;
    float _2076 = (cbModelParam._m0[1u].x * (_2064 - _1755)) + _1755;
    float _2097 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2100 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2103 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2074));
    float _2118 = _1347 * 0.5;
    float _2119 = _1348 * 0.5;
    float _2120 = _1349 * 0.5;
    float _2121 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_2052, _2055, _2058, _2061));
    float _2124 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_2051, _2054, _2057, _2060));
    float _2127 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_2050, _2053, _2056, _2059));
    float _2161;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2134 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_1740, _1744, _1747, _1750));
        float _2138 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_1742, _1745, _1748, _1751));
        float _2142 = dot(vec4(_2118, _2119, _2120, 1.0), vec4(_1743, _1746, _1749, _1752));
        float _2149 = dot(vec4(cbModelParam._m0[39u]), vec4(_2118, _2119, _2120, 1.0));
        _2161 = dot(vec3(isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0)), isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0)), isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2149) ? 0.0 : (isnan(0.0) ? _2149 : max(0.0, _2149))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2161 = 1.0;
    }
    float _2172;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2163 = dot(vec4(cbModelParam._m0[40u]), vec4(_2118, _2119, _2120, 1.0));
        _2172 = dot(vec3(isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0)), isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0)), isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2163) ? 0.0 : (isnan(0.0) ? _2163 : max(0.0, _2163))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2172 = 1.0;
    }
    float _2176 = (_2172 * cbModelParam._m0[1u].x) + (_2161 * (1.0 - cbModelParam._m0[1u].x));
    float _2186 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1165);
    float _2187 = isnan(_2186) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2186 : min(cbModelParam._m0[25u].z, _2186));
    float _2267;
    float _2269;
    float _2271;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2234 = fma(_1411, cbModelParam._m0[13u].z, fma(_1407, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1403)) + cbModelParam._m0[13u].w;
        float _2238 = fma(_1411, cbModelParam._m0[14u].z, fma(_1407, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1403)) + cbModelParam._m0[14u].w;
        float _2242 = fma(_1411, cbModelParam._m0[15u].z, fma(_1407, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1403)) + cbModelParam._m0[15u].w;
        float _2245 = fma(_1349, cbModelParam._m0[13u].z, fma(_1348, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1347));
        float _2248 = fma(_1349, cbModelParam._m0[14u].z, fma(_1348, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1347));
        float _2251 = fma(_1349, cbModelParam._m0[15u].z, fma(_1348, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1347));
        float _2279;
        if (_2245 > 0.0)
        {
            _2279 = abs((1.0 - _2234) / _2245);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2245 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2234 + 1.0) / _2245);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2279 = frontier_phi_17_15_ladder;
        }
        float _2503;
        if (_2248 > 0.0)
        {
            _2503 = abs((1.0 - _2238) / _2248);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2238 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2503 = frontier_phi_26_22_ladder;
        }
        float _2760;
        if (_2251 > 0.0)
        {
            _2760 = abs((1.0 - _2242) / _2251);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2242 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2760 = frontier_phi_38_33_ladder;
        }
        float _2762 = isnan(_2503) ? _2279 : (isnan(_2279) ? _2503 : min(_2279, _2503));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _2245) + _2234;
        float _2768 = (_2763 * _2248) + _2238;
        float _2769 = (_2763 * _2251) + _2242;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2770;
        float _2774 = _2770 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 > _2774) || ((_2768 < _2772) || ((_2767 < _2772) || (_2767 > _2774))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2769, cbModelParam._m0[9u].z, fma(_2768, cbModelParam._m0[9u].y, _2767 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2769, cbModelParam._m0[10u].z, fma(_2768, cbModelParam._m0[10u].y, _2767 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2769, cbModelParam._m0[11u].z, fma(_2768, cbModelParam._m0[11u].y, _2767 * cbModelParam._m0[11u].x))), _2187);
            frontier_phi_16_38_ladder = _2897.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2897.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2897.x * cbModelParam._m0[1u].y;
        }
        _2267 = frontier_phi_16_38_ladder_2;
        _2269 = frontier_phi_16_38_ladder_1;
        _2271 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2255 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1347, _1348, _1349), _2187);
        _2267 = _2255.x * cbModelParam._m0[1u].y;
        _2269 = _2255.y * cbModelParam._m0[1u].y;
        _2271 = _2255.z * cbModelParam._m0[1u].y;
    }
    float _2275 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1165);
    float _2276 = isnan(_2275) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2275 : min(cbModelParam._m0[25u].w, _2275));
    float _2366;
    float _2368;
    float _2370;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2330 = fma(_1411, cbModelParam._m0[21u].z, fma(_1407, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1403)) + cbModelParam._m0[21u].w;
        float _2334 = fma(_1411, cbModelParam._m0[22u].z, fma(_1407, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1403)) + cbModelParam._m0[22u].w;
        float _2338 = fma(_1411, cbModelParam._m0[23u].z, fma(_1407, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1403)) + cbModelParam._m0[23u].w;
        float _2341 = fma(_1349, cbModelParam._m0[21u].z, fma(_1348, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1347));
        float _2344 = fma(_1349, cbModelParam._m0[22u].z, fma(_1348, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1347));
        float _2347 = fma(_1349, cbModelParam._m0[23u].z, fma(_1348, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1347));
        float _2508;
        if (_2341 > 0.0)
        {
            _2508 = abs((1.0 - _2330) / _2341);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2341 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2330 + 1.0) / _2341);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2508 = frontier_phi_28_24_ladder;
        }
        float _2787;
        if (_2344 > 0.0)
        {
            _2787 = abs((1.0 - _2334) / _2344);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2344 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2334 + 1.0) / _2344);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2787 = frontier_phi_40_35_ladder;
        }
        float _3000;
        if (_2347 > 0.0)
        {
            _3000 = abs((1.0 - _2338) / _2347);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2347 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2338 + 1.0) / _2347);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3000 = frontier_phi_49_46_ladder;
        }
        float _3002 = isnan(_2787) ? _2508 : (isnan(_2508) ? _2787 : min(_2508, _2787));
        float _3003 = isnan(_3000) ? _3002 : (isnan(_3002) ? _3000 : min(_3002, _3000));
        float _3007 = (_3003 * _2341) + _2330;
        float _3008 = (_3003 * _2344) + _2334;
        float _3009 = (_3003 * _2347) + _2338;
        float _3010 = _3003 * 9.9999997473787516355514526367188e-05;
        float _3011 = (-1.0) - _3010;
        float _3013 = _3010 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3009 > _3013) || ((_3009 < _3011) || ((_3008 > _3013) || ((_3008 < _3011) || ((_3007 < _3011) || (_3007 > _3013))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3208 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3009, cbModelParam._m0[17u].z, fma(_3008, cbModelParam._m0[17u].y, _3007 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3009, cbModelParam._m0[18u].z, fma(_3008, cbModelParam._m0[18u].y, _3007 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3009, cbModelParam._m0[19u].z, fma(_3008, cbModelParam._m0[19u].y, _3007 * cbModelParam._m0[19u].x))), _2276);
            frontier_phi_25_49_ladder = _3208.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3208.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3208.x * cbModelParam._m0[1u].z;
        }
        _2366 = frontier_phi_25_49_ladder_2;
        _2368 = frontier_phi_25_49_ladder_1;
        _2370 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2350 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1347, _1348, _1349), _2276);
        _2366 = _2350.x * cbModelParam._m0[1u].z;
        _2368 = _2350.y * cbModelParam._m0[1u].z;
        _2370 = _2350.z * cbModelParam._m0[1u].z;
    }
    float _2383 = (((_1374 * _1323) + _1375) * _1339) * ((cbModelParam._m0[1u].w * (_2366 - _2267)) + _2267);
    float _2385 = (((_1374 * _1325) + _1375) * _1339) * ((cbModelParam._m0[1u].w * (_2368 - _2269)) + _2269);
    float _2387 = (((_1374 * _1326) + _1375) * _1339) * ((cbModelParam._m0[1u].w * (_2370 - _2271)) + _2271);
    float _2390 = fma(_2387, cbSceneParam._m0[89u].z, fma(_2385, cbSceneParam._m0[89u].y, _2383 * cbSceneParam._m0[89u].x));
    float _2393 = fma(_2387, cbSceneParam._m0[90u].z, fma(_2385, cbSceneParam._m0[90u].y, _2383 * cbSceneParam._m0[90u].x));
    float _2396 = fma(_2387, cbSceneParam._m0[91u].z, fma(_2385, cbSceneParam._m0[91u].y, _2383 * cbSceneParam._m0[91u].x));
    vec4 _2404 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1261, _1262));
    float _2406 = _2404.w;
    float _2418 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2406);
    float _2419 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2406);
    float _2420 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2406);
    uvec4 _2424 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2426 = _2424.x * 14u;
    uint _2427 = _2426 + 13u;
    float _2434 = _1339 + (-1.0);
    float _2439 = (cbLight._m0[_2427].x * _2434) + 1.0;
    float _2440 = (cbLight._m0[_2427].y * _2434) + 1.0;
    float _2441 = (cbLight._m0[_2427].z * _2434) + 1.0;
    float _2442 = (cbLight._m0[_2427].w * _2434) + 1.0;
    uint _2443 = _2426 + 5u;
    float _2449 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
    uint _2453 = _2426 + 4u;
    float _2462 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
    uint _2466 = _2426 | 1u;
    float _2477 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_1162, _1163, _1164));
    float _2480 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_1162, _1163, _1164));
    float _4785 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _4796 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2485 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * 0.3183098733425140380859375;
    float _2487 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * 0.3183098733425140380859375;
    float _2494 = ((cbLight._m0[_2443].x * _2449) * _2487) + (((cbLight._m0[_2453].x * _2418) * _2462) * _2485);
    float _2495 = ((_2449 * cbLight._m0[_2443].y) * _2487) + (((cbLight._m0[_2453].y * _2419) * _2462) * _2485);
    float _2496 = ((_2449 * cbLight._m0[_2443].z) * _2487) + (((cbLight._m0[_2453].z * _2420) * _2462) * _2485);
    uvec4 _2500 = floatBitsToUint(cbLight._m0[_2426 + 12u]);
    bool _2502 = _2500.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2502)
    {
        _2513 = _2494;
        _2515 = _2495;
        _2517 = _2496;
    }
    else
    {
        uint _2521 = _2426 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2426 + 2u].xyz), vec3(_1162, _1163, _1164)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4807 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2540 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2494;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2495;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2496;
    }
    bool _2520 = _2500.y == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2520)
    {
        _2558 = _2513;
        _2560 = _2515;
        _2562 = _2517;
    }
    else
    {
        uint _2731 = _2426 + 7u;
        float _2747 = (dot(vec3(cbLight._m0[_2426 + 3u].xyz), vec3(_1162, _1163, _1164)) * 0.5) + 0.5;
        float _2748 = _2747 * _2747;
        float _4823 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2749 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2750 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
        _2558 = (((cbLight._m0[_2731].x * 0.3183098733425140380859375) * _2749) * _2750) + _2513;
        _2560 = (((cbLight._m0[_2731].y * 0.3183098733425140380859375) * _2749) * _2750) + _2515;
        _2562 = (((cbLight._m0[_2731].z * 0.3183098733425140380859375) * _2749) * _2750) + _2517;
    }
    uint _2565 = _2426 + 8u;
    float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _1165) * 0.949999988079071044921875);
    float _2579 = _2578 * _2578;
    float _2580 = cbLight._m0[_2426].x + _1241;
    float _2581 = cbLight._m0[_2426].y + _1242;
    float _2582 = cbLight._m0[_2426].z + _1243;
    float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
    float _2587 = _2586 * _2580;
    float _2588 = _2586 * _2581;
    float _2589 = _2586 * _2582;
    float _2590 = dot(vec3(_1162, _1163, _1164), vec3(cbLight._m0[_2426].xyz));
    float _4839 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _4850 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _2594 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2595 = dot(vec3(_1162, _1163, _1164), vec3(_2587, _2588, _2589));
    float _4861 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _2599 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2587, _2588, _2589));
    float _4872 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2603 = _2579 * _2579;
    float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
    float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
    float _2616 = 0.959999978542327880859375 - _1320;
    float _2618 = 0.959999978542327880859375 - _1321;
    float _2619 = 0.959999978542327880859375 - _1322;
    float _2626 = 1.0 - _2579;
    float _2637 = (0.5 / (((_2594 * ((_2593 * _2626) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2626) + _2579) * _2593))) * _2593;
    float _4883 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
    uint _2653 = _2426 + 9u;
    float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _1165) * 0.949999988079071044921875);
    float _2665 = _2664 * _2664;
    float _2666 = cbLight._m0[_2466].x + _1241;
    float _2667 = cbLight._m0[_2466].y + _1242;
    float _2668 = cbLight._m0[_2466].z + _1243;
    float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
    float _2673 = _2672 * _2666;
    float _2674 = _2672 * _2667;
    float _2675 = _2672 * _2668;
    float _2676 = dot(vec3(_1162, _1163, _1164), vec3(cbLight._m0[_2466].xyz));
    float _4894 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2680 = dot(vec3(_1162, _1163, _1164), vec3(_2673, _2674, _2675));
    float _4905 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2684 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2673, _2674, _2675));
    float _4916 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2688 = _2665 * _2665;
    float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
    float _2706 = 1.0 - _2665;
    float _2716 = (0.5 / (((_2594 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2706) + _2665) * _2679))) * _2679;
    float _4927 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2718 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
    float _2728 = (((((_2699 * _2616) + _1323) * cbLight._m0[_2653].x) * _2718) * _2449) + ((((cbLight._m0[_2565].x * _2418) * ((_2615 * _2616) + _1323)) * _2639) * _2462);
    float _2729 = (((((_2699 * _2618) + _1325) * cbLight._m0[_2653].y) * _2718) * _2449) + ((((cbLight._m0[_2565].y * _2419) * ((_2615 * _2618) + _1325)) * _2639) * _2462);
    float _2730 = (((((_2699 * _2619) + _1326) * cbLight._m0[_2653].z) * _2718) * _2449) + ((((cbLight._m0[_2565].z * _2420) * ((_2615 * _2619) + _1326)) * _2639) * _2462);
    float _2792;
    float _2794;
    float _2796;
    if (_2502)
    {
        _2792 = _2728;
        _2794 = _2729;
        _2796 = _2730;
    }
    else
    {
        uint _2798 = _2426 + 2u;
        uint _2802 = _2426 + 10u;
        float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2798].w)) * _1165) * 0.949999988079071044921875);
        float _2817 = _2816 * _2816;
        float _2818 = cbLight._m0[_2798].x + _1241;
        float _2819 = cbLight._m0[_2798].y + _1242;
        float _2820 = cbLight._m0[_2798].z + _1243;
        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
        float _2825 = _2824 * _2818;
        float _2826 = _2824 * _2819;
        float _2827 = _2824 * _2820;
        float _2828 = dot(vec3(_1162, _1163, _1164), vec3(cbLight._m0[_2798].xyz));
        float _4938 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2832 = dot(vec3(_1162, _1163, _1164), vec3(_2825, _2826, _2827));
        float _4949 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2836 = dot(vec3(cbLight._m0[_2798].xyz), vec3(_2825, _2826, _2827));
        float _4960 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2840 = _2817 * _2817;
        float _2844 = ((_2835 * _2835) * (_2840 + (-1.0))) + 1.0;
        float _2851 = exp2(log2(1.0 - (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) * 5.0);
        float _2858 = 1.0 - _2817;
        float _2868 = (0.5 / (((_2594 * ((_2831 * _2858) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2858) + _2817) * _2831))) * _2831;
        float _4971 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2870 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2840 / ((_2844 * _2844) * 3.141590118408203125));
        float _2871 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _2792 = (((((_2851 * _2616) + _1323) * cbLight._m0[_2802].x) * _2870) * _2871) + _2728;
        _2794 = (((((_2851 * _2618) + _1325) * cbLight._m0[_2802].y) * _2870) * _2871) + _2729;
        _2796 = (((((_2851 * _2619) + _1326) * cbLight._m0[_2802].z) * _2870) * _2871) + _2730;
    }
    float _2906;
    float _2908;
    float _2910;
    if (_2520)
    {
        _2906 = _2792;
        _2908 = _2794;
        _2910 = _2796;
    }
    else
    {
        uint _2917 = _2426 + 3u;
        uint _2921 = _2426 + 11u;
        float _2935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2917].w)) * _1165) * 0.949999988079071044921875);
        float _2936 = _2935 * _2935;
        float _2937 = cbLight._m0[_2917].x + _1241;
        float _2938 = cbLight._m0[_2917].y + _1242;
        float _2939 = cbLight._m0[_2917].z + _1243;
        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
        float _2944 = _2943 * _2937;
        float _2945 = _2943 * _2938;
        float _2946 = _2943 * _2939;
        float _2947 = dot(vec3(_1162, _1163, _1164), vec3(cbLight._m0[_2917].xyz));
        float _4987 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2950 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _2951 = dot(vec3(_1162, _1163, _1164), vec3(_2944, _2945, _2946));
        float _4998 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _2955 = dot(vec3(cbLight._m0[_2917].xyz), vec3(_2944, _2945, _2946));
        float _5009 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2959 = _2936 * _2936;
        float _2963 = ((_2954 * _2954) * (_2959 + (-1.0))) + 1.0;
        float _2970 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _2977 = 1.0 - _2936;
        float _2987 = (0.5 / (((_2594 * ((_2950 * _2977) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2977) + _2936) * _2950))) * _2950;
        float _5020 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2989 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2959 / ((_2963 * _2963) * 3.141590118408203125));
        float _2990 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
        _2906 = (((((_2970 * _2616) + _1323) * cbLight._m0[_2921].x) * _2989) * _2990) + _2792;
        _2908 = (((((_2970 * _2618) + _1325) * cbLight._m0[_2921].y) * _2989) * _2990) + _2794;
        _2910 = (((((_2970 * _2619) + _1326) * cbLight._m0[_2921].z) * _2989) * _2990) + _2796;
    }
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_2424.y == 0u)
    {
        float _3065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3066 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3065;
        float _3067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3065;
        float _3068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3065;
        uvec4 _3080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3081 = _3080.x;
        uint _3092 = uint((float(_3080.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1262) / _3081))) + floor(float(uint(cbSceneParam._m0[85u].x * _1261) / _3081)));
        float _3102 = (log2(_3068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3103 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
        uint _3106 = uint(isnan(14.0) ? _3103 : (isnan(_3103) ? 14.0 : min(_3103, 14.0)));
        uvec4 _3111 = texelFetch(g_lightClusterGridBuffer, int(((_3106 << 2u) + (_3092 << 6u)) >> 2u));
        uint _3112 = _3111.x;
        uint _3113 = _3080.z;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        if (((((1u << ((_3113 >> 4u) & 15u)) + 4294967295u) & _3112) == 0u) || ((_3113 & 240u) == 0u))
        {
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
        }
        else
        {
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3224;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            float _3370 = 0.0;
            uint _3371 = 0u;
            uint _3380;
            bool _3381;
            for (;;)
            {
                _3380 = texelFetch(g_lightClassification, int((((_3106 << 5u) + (_3092 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                _3381 = _3380 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3381)
                {
                    frontier_phi_66_pred = _3365;
                    frontier_phi_66_pred_1 = _3370;
                    frontier_phi_66_pred_2 = _3369;
                    frontier_phi_66_pred_3 = _3368;
                    frontier_phi_66_pred_4 = _3367;
                    frontier_phi_66_pred_5 = _3366;
                }
                else
                {
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    float _3515;
                    uint _3516;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3380;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    for (;;)
                    {
                        uint _3520 = uint(findLSB(_3516)) + (_3371 << 5u);
                        uint _3517 = (_3516 + 4294967295u) & _3516;
                        uint _3522 = _3520 * 48u;
                        vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3522)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3522 + 3u)).x));
                        uint _3542 = (_3520 * 48u) + 4u;
                        vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3542)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 3u)).x));
                        uint _3561 = (_3520 * 48u) + 8u;
                        vec3 _3572 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x));
                        float _3576 = _3536.x - _3066;
                        float _3577 = _3536.y - _3067;
                        float _3578 = _3536.z - _3068;
                        float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                        float _3582 = inversesqrt(_3579);
                        float _3583 = _3582 * _3576;
                        float _3584 = _3582 * _3577;
                        float _3585 = _3582 * _3578;
                        float _3586 = dot(vec3(_1280, _1283, _1286), vec3(_3583, _3584, _3585));
                        float _3591 = 1.0 - (_3579 * _3536.w);
                        float _5046 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3592 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3593 = sqrt(_3579) * _3555.w;
                        float _3596 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                        float _3597 = _3596 * _3596;
                        float _3600 = ((1.0 - _3597) * _3586) + _3597;
                        float _3603 = _3593 * _3593;
                        float _3607 = ((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3592) / ((_3603 * 0.699999988079071044921875) + 1.0);
                        float _3611 = (-0.0) - _3066;
                        float _3612 = (-0.0) - _3067;
                        float _3613 = (-0.0) - _3068;
                        float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                        float _3618 = _3617 * _3611;
                        float _3619 = _3617 * _3612;
                        float _3620 = _3617 * _3613;
                        float _3628 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                        float _3629 = 1.0 - _1355;
                        float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                        float _3637 = _3636 * _3636;
                        float _3638 = _3637 * _3637;
                        float _3639 = _3618 + _3583;
                        float _3640 = _3619 + _3584;
                        float _3641 = _3620 + _3585;
                        float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                        float _3649 = dot(vec3(_1280, _1283, _1286), vec3(_3618, _3619, _3620));
                        float _5062 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3652 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3653 = dot(vec3(_1280, _1283, _1286), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                        float _5073 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3656 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                        float _3661 = _3596 * _3637;
                        float _3662 = _3661 * _3661;
                        float _3665 = ((1.0 - _3662) * _3586) + _3662;
                        float _5084 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3666 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3667 = 1.0 - _3637;
                        float _3677 = (0.5 / (((_3666 * ((_3652 * _3667) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3637) * _3652))) * _3666;
                        float _5095 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3688 = (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) / ((_3660 * _3660) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125))) * _3592;
                        _3440 = (_3607 * _3555.x) + _3513;
                        _3441 = (_3607 * _3555.y) + _3514;
                        _3442 = (_3607 * _3555.z) + _3515;
                        _3437 = (_3688 * _3572.x) + _3510;
                        _3438 = (_3688 * _3572.y) + _3511;
                        _3439 = (_3688 * _3572.z) + _3512;
                        if (_3517 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3517;
                        }
                    }
                    frontier_phi_66_pred = _3437;
                    frontier_phi_66_pred_1 = _3442;
                    frontier_phi_66_pred_2 = _3441;
                    frontier_phi_66_pred_3 = _3440;
                    frontier_phi_66_pred_4 = _3439;
                    frontier_phi_66_pred_5 = _3438;
                }
                _3214 = frontier_phi_66_pred;
                _3224 = frontier_phi_66_pred_1;
                _3222 = frontier_phi_66_pred_2;
                _3220 = frontier_phi_66_pred_3;
                _3218 = frontier_phi_66_pred_4;
                _3216 = frontier_phi_66_pred_5;
                uint _3372 = _3371 + 1u;
                if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3365 = _3214;
                    _3366 = _3216;
                    _3367 = _3218;
                    _3368 = _3220;
                    _3369 = _3222;
                    _3370 = _3224;
                    _3371 = _3372;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
        }
        uvec4 _3227 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3228 = _3227.z;
        uint _3230 = (_3228 >> 8u) & 15u;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        if (((4294967295u << _3230) & _3112) == 0u)
        {
            _3333 = _3213;
            _3335 = _3215;
            _3337 = _3217;
            _3339 = _3219;
            _3341 = _3221;
            _3343 = _3223;
        }
        else
        {
            float _3358 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
            float _3359 = _3358 * _3066;
            float _3360 = _3358 * _3067;
            float _3361 = _3358 * _3068;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3230 < ((_3228 >> 12u) & 15u))
            {
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3493 = _3213;
                float _3494 = _3215;
                float _3495 = _3217;
                float _3496 = _3219;
                float _3497 = _3221;
                float _3498 = _3223;
                uint _3499 = _3230;
                uint _3508;
                bool _3509;
                for (;;)
                {
                    _3508 = texelFetch(g_lightClassification, int((((_3106 << 5u) + (_3092 << 9u)) + (_3499 << 2u)) >> 2u)).x;
                    _3509 = _3508 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3509)
                    {
                        frontier_phi_77_pred = _3498;
                        frontier_phi_77_pred_1 = _3497;
                        frontier_phi_77_pred_2 = _3496;
                        frontier_phi_77_pred_3 = _3495;
                        frontier_phi_77_pred_4 = _3494;
                        frontier_phi_77_pred_5 = _3493;
                    }
                    else
                    {
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _3715 = _3493;
                        float _3716 = _3494;
                        float _3717 = _3495;
                        float _3718 = _3496;
                        float _3719 = _3497;
                        float _3720 = _3498;
                        uint _3721 = _3508;
                        uint _3722;
                        vec4 _3747;
                        float _3748;
                        vec4 _3763;
                        vec3 _3775;
                        vec4 _3790;
                        vec4 _3805;
                        float _3851;
                        bool _3852;
                        for (;;)
                        {
                            uint _3732 = ((_3499 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3721));
                            _3722 = (_3721 + 4294967295u) & _3721;
                            uint _3734 = _3732 * 40u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            _3748 = _3747.w;
                            uint _3750 = (_3732 * 40u) + 4u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3732 * 40u) + 8u;
                            _3775 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x));
                            uint _3777 = (_3732 * 40u) + 16u;
                            _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3792 = (_3732 * 40u) + 20u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3732 * 40u) + 24u;
                            vec4 _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3826 = (_3732 * 40u) + 28u;
                            vec4 _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            _3851 = fma(_3068, _3839.z, fma(_3067, _3839.y, _3839.x * _3066)) + _3839.w;
                            _3852 = !((fma(_3068, _3820.z, fma(_3067, _3820.y, _3820.x * _3066)) + _3820.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3852)
                            {
                                float _3879 = _3747.x - _3066;
                                float _3880 = _3747.y - _3067;
                                float _3881 = _3747.z - _3068;
                                float _3882 = dot(vec3(_3879, _3880, _3881), vec3(_3879, _3880, _3881));
                                float _3885 = inversesqrt(_3882);
                                float _3886 = _3885 * _3879;
                                float _3887 = _3885 * _3880;
                                float _3888 = _3885 * _3881;
                                float _3892 = 1.0 - (_3882 / (_3748 * _3748));
                                float _5106 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3897 = sqrt(_3882) * _3763.w;
                                float _3899 = 1.39999997615814208984375 / (_3897 + 1.39999997615814208984375);
                                float _3900 = _3899 * _3899;
                                float _3903 = ((1.0 - _3900) * dot(vec3(_3886, _3887, _3888), vec3(_1280, _1283, _1286))) + _3900;
                                float _3906 = _3897 * _3897;
                                float _3910 = (fma(_3068, _3790.z, fma(_3067, _3790.y, _3790.x * _3066)) + _3790.w) / _3851;
                                float _3911 = (fma(_3068, _3805.z, fma(_3067, _3805.y, _3805.x * _3066)) + _3805.w) / _3851;
                                float _3915 = 1.0 - dot(vec2(_3910, _3911), vec2(_3910, _3911));
                                float _5122 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3917 = _3916 * (((isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0))) * _3893) / ((_3906 * 0.699999988079071044921875) + 1.0));
                                float _3929 = exp2(log2(1.0 / ((_3906 * 3.5) + 5.0)) * 0.25);
                                float _3930 = 1.0 - _1355;
                                float _3937 = sqrt(1.0 - ((1.0 - (_3930 * _3930)) * (1.0 - (_3929 * _3929))));
                                float _3938 = _3937 * _3937;
                                float _3939 = _3938 * _3938;
                                float _3940 = _3886 - _3359;
                                float _3941 = _3887 - _3360;
                                float _3942 = _3888 - _3361;
                                float _3946 = inversesqrt(dot(vec3(_3940, _3941, _3942), vec3(_3940, _3941, _3942)));
                                float _3950 = dot(vec3(_1280, _1283, _1286), vec3((-0.0) - _3359, (-0.0) - _3360, (-0.0) - _3361));
                                float _5133 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3953 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3954 = dot(vec3(_1280, _1283, _1286), vec3(_3946 * _3940, _3946 * _3941, _3946 * _3942));
                                float _5144 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3957 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3961 = ((_3957 * _3957) * (_3939 + (-1.0))) + 1.0;
                                float _3962 = _3899 * _3938;
                                float _3963 = _3962 * _3962;
                                float _3969 = ((1.0 - _3963) * dot(vec3(_1280, _1283, _1286), vec3(_3886, _3887, _3888))) + _3963;
                                float _5155 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3970 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3971 = 1.0 - _3938;
                                float _3981 = (0.5 / (((_3970 * ((_3953 * _3971) + _3938)) + 9.9999999392252902907785028219223e-09) + (((_3970 * _3971) + _3938) * _3953))) * _3970;
                                float _5166 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3991 = (_3916 * _3893) * (((_3939 * 3.1415927410125732421875) * (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) / ((_3961 * _3961) * ((_3906 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3917 * _3763.y;
                                frontier_phi_83_pred_1 = _3917 * _3763.x;
                                frontier_phi_83_pred_2 = _3991 * _3775.z;
                                frontier_phi_83_pred_3 = _3991 * _3775.y;
                                frontier_phi_83_pred_4 = _3991 * _3775.x;
                                frontier_phi_83_pred_5 = _3917 * _3763.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3999 = frontier_phi_83_pred;
                            _3998 = frontier_phi_83_pred_1;
                            _3997 = frontier_phi_83_pred_2;
                            _3996 = frontier_phi_83_pred_3;
                            _3995 = frontier_phi_83_pred_4;
                            _4000 = frontier_phi_83_pred_5;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            if (_3722 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3722;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3707;
                        frontier_phi_77_pred_1 = _3706;
                        frontier_phi_77_pred_2 = _3705;
                        frontier_phi_77_pred_3 = _3704;
                        frontier_phi_77_pred_4 = _3703;
                        frontier_phi_77_pred_5 = _3702;
                    }
                    _3344 = frontier_phi_77_pred;
                    _3342 = frontier_phi_77_pred_1;
                    _3340 = frontier_phi_77_pred_2;
                    _3338 = frontier_phi_77_pred_3;
                    _3336 = frontier_phi_77_pred_4;
                    _3334 = frontier_phi_77_pred_5;
                    uint _3500 = _3499 + 1u;
                    if (_3500 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3493 = _3334;
                        _3494 = _3336;
                        _3495 = _3338;
                        _3496 = _3340;
                        _3497 = _3342;
                        _3498 = _3344;
                        _3499 = _3500;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3338;
                frontier_phi_58_59_ladder_1 = _3344;
                frontier_phi_58_59_ladder_2 = _3342;
                frontier_phi_58_59_ladder_3 = _3340;
                frontier_phi_58_59_ladder_4 = _3336;
                frontier_phi_58_59_ladder_5 = _3334;
            }
            else
            {
                frontier_phi_58_59_ladder = _3217;
                frontier_phi_58_59_ladder_1 = _3223;
                frontier_phi_58_59_ladder_2 = _3221;
                frontier_phi_58_59_ladder_3 = _3219;
                frontier_phi_58_59_ladder_4 = _3215;
                frontier_phi_58_59_ladder_5 = _3213;
            }
            _3333 = frontier_phi_58_59_ladder_5;
            _3335 = frontier_phi_58_59_ladder_4;
            _3337 = frontier_phi_58_59_ladder;
            _3339 = frontier_phi_58_59_ladder_3;
            _3341 = frontier_phi_58_59_ladder_2;
            _3343 = frontier_phi_58_59_ladder_1;
        }
        float _3348 = isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0));
        _3125 = (_3348 * _3339) + _2558;
        _3127 = (_3348 * _3341) + _2560;
        _3129 = (_3348 * _3343) + _2562;
        _3131 = ((_3333 * _1323) * _3348) + _2906;
        _3133 = ((_3335 * _1325) * _3348) + _2908;
        _3135 = ((_3337 * _1326) * _3348) + _2910;
    }
    else
    {
        _3125 = _2558;
        _3127 = _2560;
        _3129 = _2562;
        _3131 = _2906;
        _3133 = _2908;
        _3135 = _2910;
    }
    float _5182 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _5193 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _5204 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _3152 = ((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3125 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1339))) + ((_3131 + ((isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0))) * _2176)) * cbPerFrame._m0[3u].x);
    float _3153 = ((isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0))) * (_3127 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1339))) + ((_3133 + ((isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0))) * _2176)) * cbPerFrame._m0[3u].x);
    float _3154 = ((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3129 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1339))) + ((_3135 + ((isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))) * _2176)) * cbPerFrame._m0[3u].x);
    uint _3155 = _301 + 6u;
    float _3163 = _1261 / cbSceneParam._m0[86u].x;
    float _3164 = _1262 / cbSceneParam._m0[86u].y;
    vec4 _3178 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3163, _3164, (log2((isnan(cbSceneParam._m0[77u].w) ? _1184 : (isnan(_1184) ? cbSceneParam._m0[77u].w : min(_1184, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3180 = _3178.x;
    float _3181 = _3178.y;
    float _3182 = _3178.z;
    float _3183 = _3178.w;
    float _3275;
    float _3277;
    float _3279;
    float _3281;
    if (_1184 > cbSceneParam._m0[78u].w)
    {
        float _3238 = isnan(_1184) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1184 : min(cbSceneParam._m0[80u].w, _1184));
        float _3239 = _3238 / _1184;
        float _3250 = _3239 * _1234;
        float _3251 = _1235 * _3239;
        float _3252 = (-0.0) - _3251;
        float _3253 = _3239 * _1236;
        float _3255 = (cbSceneParam._m0[77u].w * _3252) / _3238;
        float _3256 = _3255 + cbSceneParam._m0[79u].w;
        float _3257 = cbSceneParam._m0[79u].w - _3251;
        float _3263 = sqrt(((_3250 * _3250) + (_3251 * _3251)) + (_3253 * _3253));
        float _3266 = (1.0 - (cbSceneParam._m0[77u].w / _3238)) * _3263;
        float _3271 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3273 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3450;
        if (abs((_3252 - _3255) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3450 = ((((_3256 > 0.0) ? exp2(_3271 * _3256) : (2.0 - exp2(_3273 * _3256))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3266;
        }
        else
        {
            float _3394 = 1.0 / cbSceneParam._m0[80u].x;
            float _3395 = isnan(_3257) ? _3256 : (isnan(_3256) ? _3257 : max(_3256, _3257));
            float _3396 = isnan(_3257) ? _3256 : (isnan(_3256) ? _3257 : min(_3256, _3257));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            float _3406 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : min(_3396, 0.0));
            _3450 = ((abs(_3263 / _3252) * cbSceneParam._m0[80u].y) * ((((_3405 - _3406) * 2.0) - ((exp2(_3271 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0)))) - exp2(_3271 * (isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))))) * _3394)) - ((exp2(_3273 * _3405) - exp2(_3273 * _3406)) * _3394))) + (_3266 * cbSceneParam._m0[80u].z);
        }
        vec4 _3452 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3163, _3164, 1.0), 0.0);
        float _3461 = exp2((_3450 * (-1.44269502162933349609375)) * (1.0 - _3452.w));
        float _3462 = log2(_3461);
        float _3478 = log2(_3183);
        _3275 = (exp2(_3478 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].x)) * _3452.x) / cbSceneParam._m0[78u].x)) + _3180;
        _3277 = (exp2(_3478 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].y)) * _3452.y) / cbSceneParam._m0[78u].y)) + _3181;
        _3279 = (exp2(_3478 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].z)) * _3452.z) / cbSceneParam._m0[78u].z)) + _3182;
        _3281 = _3461 * _3183;
    }
    else
    {
        _3275 = _3180;
        _3277 = _3181;
        _3279 = _3182;
        _3281 = _3183;
    }
    bool _3488;
    vec4 _3291;
    vec4 _3313;
    float _3315;
    float _3319;
    float _3320;
    float _3321;
    float _3322;
    bool _3332;
    for (;;)
    {
        _3291 = cbMatDynParam._m0[0u];
        float _3293 = roundEven(_3291.y);
        bool _3294 = _3293 == 3.0;
        float _3295 = log2(_3281);
        float _3302 = exp2(_3295 * cbSceneParam._m0[78u].x) * _3152;
        float _3303 = exp2(_3295 * cbSceneParam._m0[78u].y) * _3153;
        float _3304 = exp2(_3295 * cbSceneParam._m0[78u].z) * _3154;
        float _3311 = _1250 + (-0.5);
        _3313 = cbMtdParam._m0[1u];
        _3315 = _3313.y * _3311;
        float _3318 = (_3293 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3319 = _3318 * (_3294 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3275)));
        _3320 = _3318 * (_3294 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3277)));
        _3321 = _3318 * (_3294 ? _3304 : (_3304 + (cbSceneParam._m0[72u].w * _3279)));
        _3322 = _3311 * 0.999000012874603271484375;
        _3332 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3332)
        {
            if ((cbInstanceData._m0[_301 + 7u].x + _3322) < 0.5)
            {
                _3488 = true;
                break;
            }
        }
        uint _3429 = _1299 + uint(_3291.w);
        if ((cbInstanceData._m0[_3429].w < 1.0) && ((cbInstanceData._m0[_3429].w + _3322) < 0.5))
        {
            _3488 = true;
            break;
        }
        if ((_3315 + 1.0) < _3313.x)
        {
            _3488 = true;
            break;
        }
        _3488 = false;
        break;
    }
    float _3693;
    if (_3488)
    {
        discard_state = true;
        _3693 = 0.0;
    }
    else
    {
        _3693 = cbInstanceData._m0[_3155].w;
    }
    SV_Target.x = _3319;
    SV_Target.y = _3320;
    SV_Target.z = _3321;
    SV_Target.w = _3693;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3155].w;
    discard_exit();
}


