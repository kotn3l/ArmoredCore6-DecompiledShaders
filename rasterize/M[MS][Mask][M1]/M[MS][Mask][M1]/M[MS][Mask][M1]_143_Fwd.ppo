#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1565;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3888 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3899 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3910 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _460 = (_453 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _461 = (_453 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _462 = (_453 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _583 = dot(vec4(_573, _571.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _595 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _386.z) * 2.0) - ((((_573 - _583) * cbMtdParam._m0[23u].w) + _583) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3943 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _603 = (_596 * ((_554.x * cbMtdParam._m0[14u].x) - _533)) + _533;
    float _604 = (_596 * ((_554.y * cbMtdParam._m0[14u].y) - _534)) + _534;
    float _605 = (_596 * ((_554.z * cbMtdParam._m0[14u].z) - _535)) + _535;
    float _609 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _603;
    float _612 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _604;
    float _615 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _605;
    float _622 = ((_603 - _609) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _609;
    float _623 = ((_604 - _612) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _612;
    float _624 = ((_605 - _615) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _615;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    float _714 = ((_686.x - _705) * _453) + _705;
    float _715 = ((_686.y - _706) * _453) + _706;
    float _716 = ((_686.z - _707) * _453) + _707;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _739 = ((_728.x - _714) * _526) + _714;
    float _740 = ((_728.y - _715) * _526) + _715;
    float _741 = ((_728.z - _716) * _526) + _716;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _766 = ((_753.z - _741) * _596) + _741;
    float _769 = ((((_753.x - _739) * _596) + _739) * 2.0) + (-1.0);
    float _770 = ((((_753.y - _740) * _596) + _740) * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3954 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))));
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _806 = (_769 + ((((_661.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_794.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _807 = (_770 + ((((_661.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_794.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _810 = fma(_776, _251, fma(_807, _258, _806 * _244));
    float _813 = fma(_776, _252, fma(_807, _259, _806 * _245));
    float _816 = fma(_776, _253, fma(_807, _260, _806 * _246));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _849 = _847.x;
    float _850 = 1.0 - _849;
    float _858 = (cbMtdParam._m0[19u].x + dot(vec4(_820 * _810, _820 * _813, _820 * _816, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_849 - _850) * cbMtdParam._m0[24u].z) + _850) * cbMtdParam._m0[21u].z);
    float _3965 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _859 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _866 = (_859 * ((_642.x * cbMtdParam._m0[18u].x) - _622)) + _622;
    float _867 = (_859 * ((_642.y * cbMtdParam._m0[18u].y) - _623)) + _623;
    float _868 = (_859 * ((_642.z * cbMtdParam._m0[18u].z) - _624)) + _624;
    vec4 _894 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _896 = _894.x;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _896) * _453) + _896;
    float _931 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _914) * _526) + _914;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w)).x - _931) * _596) + _931;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _949) * cbMtdParam._m0[19u].z) + _949;
    float _955 = _953 - (_953 * _859);
    float _960 = (((_661.z - _766) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _766;
    float _964 = ((_794.z - _960) * cbMtdParam._m0[19u].w) + _960;
    vec4 _977 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _984 = (_977.x * 2.0) + (-1.0);
    float _985 = (_977.y * 2.0) + (-1.0);
    float _986 = dot(vec2(_984, _985), vec2(_984, _985));
    float _3976 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _994 = ((_977.z - _964) * _859) + _964;
    float _1004 = ((sqrt(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) - _776) * _859) + _776;
    float _1007 = (((_984 - _806) * _859) + _806) + (cbMtdParam._m0[21u].x * _806);
    float _1008 = (((_985 - _807) * _859) + _807) + (cbMtdParam._m0[21u].x * _807);
    float _1012 = cbMtdParam._m0[22u].x + _794.w;
    float _1015 = fma(_1004, _251, fma(_1008, _258, _1007 * _244));
    float _1018 = fma(_1004, _252, fma(_1008, _259, _1007 * _245));
    float _1021 = fma(_1004, _253, fma(_1008, _260, _1007 * _246));
    float _1025 = inversesqrt(dot(vec3(_1015, _1018, _1021), vec3(_1015, _1018, _1021)));
    float _1026 = _1025 * _1015;
    float _1027 = _1025 * _1018;
    float _1028 = _1025 * _1021;
    float _3987 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _1029 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4009 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4020 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4031 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4042 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1034 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1048 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1098 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1088);
    float _1099 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1088);
    float _1100 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1088);
    float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
    float _1105 = _1098 * _1104;
    float _1106 = _1099 * _1104;
    float _1107 = _1100 * _1104;
    float _1113 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1114 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1132 = fma(_1028, cbSceneParam._m0[5u].z, fma(_1027, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1026));
    float _1135 = fma(_1028, cbSceneParam._m0[6u].z, fma(_1027, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1026));
    float _1138 = fma(_1028, cbSceneParam._m0[7u].z, fma(_1027, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1026));
    uint _1152 = (_284 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1158 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_1152].x;
    float _1159 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1152].y;
    float _1160 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1152].z;
    float _4053 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _1164 = 1.0 - _1034;
    float _1165 = _1161 * _1164;
    float _1166 = _1162 * _1164;
    float _1167 = _1163 * _1164;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1034;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1034;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1034;
    float _1175 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    vec4 _1187 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1113, cbSceneParam._m0[86u].y * _1114));
    float _1191 = ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * TEXCOORD_5.w) * _1187.x;
    float _1192 = dot(vec3(_1026, _1027, _1028), vec3(_1105, _1106, _1107));
    float _1195 = _1192 * 2.0;
    float _1199 = (_1195 * _1026) - _1105;
    float _1200 = (_1195 * _1027) - _1106;
    float _1201 = (_1195 * _1028) - _1107;
    float _1205 = abs(dot(vec3(_1105, _1106, _1107), vec3(_1026, _1027, _1028)));
    float _4086 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1207 = sqrt(_1029);
    float _1220 = exp2((_1207 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1207 * 3.0));
    float _1226 = (1.0 - _1220) * ((_1207 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1227 = _1220 * _1207;
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1564;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1289 = fma(_1263, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1255));
        float _1293 = fma(_1263, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1255));
        float _1297 = fma(_1263, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1255));
        float _1322 = _1255 + _1026;
        float _1323 = _1259 + _1027;
        float _1324 = _1263 + _1028;
        float _1334 = fma(_1324, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1322)) - _1289;
        float _1335 = fma(_1324, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1322)) - _1293;
        float _1336 = fma(_1324, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1322)) - _1297;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1289 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1293 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[34u].z) + ((((((_1297 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1392 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1358.x + (-0.5));
        float _1394 = _1392 * (_1358.y + (-0.5));
        float _1395 = _1392 * (_1358.z + (-0.5));
        float _1402 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1365.x + (-0.5));
        float _1404 = _1402 * (_1365.y + (-0.5));
        float _1405 = _1402 * (_1365.z + (-0.5));
        float _1412 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1372.x + (-0.5));
        float _1414 = _1412 * (_1372.y + (-0.5));
        float _1415 = _1412 * (_1372.z + (-0.5));
        float _1422 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1379.x + (-0.5));
        float _1424 = _1422 * (_1379.y + (-0.5));
        float _1425 = _1422 * (_1379.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1446 = (dot(vec3(_1026, _1027, _1028), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1456 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4134 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1458 + 1.0))) + _1463) * _1426;
        float _1473 = _1394 * 0.5;
        float _1474 = _1404 * 0.5;
        float _1475 = _1414 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_1026, _1027, _1028), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4167 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1500 + 1.0))) + _1505) * _1427;
        float _1515 = _1395 * 0.5;
        float _1516 = _1405 * 0.5;
        float _1517 = _1415 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1026, _1027, _1028), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4200 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1542 + 1.0))) + _1547) * _1428;
        _1564 = _1395;
        _1566 = _1394;
        _1567 = _1393;
        _1568 = _1405;
        _1569 = _1404;
        _1570 = _1403;
        _1571 = _1415;
        _1572 = _1414;
        _1573 = _1413;
        _1574 = _1428;
        _1575 = _1427;
        _1576 = _1426;
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1565;
        _1566 = _1565;
        _1567 = _1565;
        _1568 = _1565;
        _1569 = _1565;
        _1570 = _1565;
        _1571 = _1565;
        _1572 = _1565;
        _1573 = _1565;
        _1574 = _1565;
        _1575 = _1565;
        _1576 = _1565;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1602 = fma(_1263, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255));
        float _1606 = fma(_1263, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255));
        float _1610 = fma(_1263, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255));
        float _1633 = _1255 + _1026;
        float _1634 = _1259 + _1027;
        float _1635 = _1263 + _1028;
        float _1645 = fma(_1635, cbModelParam._m0[30u].z, fma(_1634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1633)) - _1602;
        float _1646 = fma(_1635, cbModelParam._m0[31u].z, fma(_1634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1633)) - _1606;
        float _1647 = fma(_1635, cbModelParam._m0[32u].z, fma(_1634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1633)) - _1610;
        float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
        float _1664 = ((_1651 * _1645) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1602 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1651 * _1646) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1606 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1666 = ((_1651 * _1647) / cbModelParam._m0[35u].z) + ((((((_1610 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        float _1701 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1668.x + (-0.5));
        float _1703 = _1701 * (_1668.y + (-0.5));
        float _1704 = _1701 * (_1668.z + (-0.5));
        float _1711 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1675.x + (-0.5));
        float _1713 = _1711 * (_1675.y + (-0.5));
        float _1714 = _1711 * (_1675.z + (-0.5));
        float _1721 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1682.x + (-0.5));
        float _1723 = _1721 * (_1682.y + (-0.5));
        float _1724 = _1721 * (_1682.z + (-0.5));
        float _1731 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1689.x + (-0.5));
        float _1733 = _1731 * (_1689.y + (-0.5));
        float _1734 = _1731 * (_1689.z + (-0.5));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = _1702 * 0.5;
        float _1739 = _1712 * 0.5;
        float _1740 = _1722 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_1026, _1027, _1028), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4263 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1765 + 1.0))) + _1770) * _1735;
        float _1780 = _1703 * 0.5;
        float _1781 = _1713 * 0.5;
        float _1782 = _1723 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1026, _1027, _1028), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4296 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1807 + 1.0))) + _1812) * _1736;
        float _1822 = _1704 * 0.5;
        float _1823 = _1714 * 0.5;
        float _1824 = _1724 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1026, _1027, _1028), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4329 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1849 + 1.0))) + _1854) * _1737;
        _1871 = _1704;
        _1872 = _1703;
        _1873 = _1702;
        _1874 = _1714;
        _1875 = _1713;
        _1876 = _1712;
        _1877 = _1724;
        _1878 = _1723;
        _1879 = _1722;
        _1880 = _1737;
        _1881 = _1736;
        _1882 = _1735;
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
    }
    else
    {
        _1871 = _1565;
        _1872 = _1565;
        _1873 = _1565;
        _1874 = _1565;
        _1875 = _1565;
        _1876 = _1565;
        _1877 = _1565;
        _1878 = _1565;
        _1879 = _1565;
        _1880 = _1565;
        _1881 = _1565;
        _1882 = _1565;
        _1883 = 0.0;
        _1884 = 0.0;
        _1885 = 0.0;
    }
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1577)) + _1577;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1578)) + _1578;
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1579)) + _1579;
    float _1918 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1895));
    float _1939 = _1199 * 0.5;
    float _1940 = _1200 * 0.5;
    float _1941 = _1201 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1564, _1568, _1571, _1574));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1567, _1570, _1573, _1576));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1029);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2055 = fma(_1263, cbModelParam._m0[13u].z, fma(_1259, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1255)) + cbModelParam._m0[13u].w;
        float _2059 = fma(_1263, cbModelParam._m0[14u].z, fma(_1259, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1255)) + cbModelParam._m0[14u].w;
        float _2063 = fma(_1263, cbModelParam._m0[15u].z, fma(_1259, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1255)) + cbModelParam._m0[15u].w;
        float _2066 = fma(_1201, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199));
        float _2069 = fma(_1201, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199));
        float _2072 = fma(_1201, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199));
        float _2100;
        if (_2066 > 0.0)
        {
            _2100 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2100 = frontier_phi_14_12_ladder;
        }
        float _2302;
        if (_2069 > 0.0)
        {
            _2302 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2302 = frontier_phi_23_19_ladder;
        }
        float _2556;
        if (_2072 > 0.0)
        {
            _2556 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2556 = frontier_phi_35_30_ladder;
        }
        float _2558 = isnan(_2302) ? _2100 : (isnan(_2100) ? _2302 : min(_2100, _2302));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _2066) + _2055;
        float _2564 = (_2559 * _2069) + _2059;
        float _2565 = (_2559 * _2072) + _2063;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2566;
        float _2570 = _2566 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 > _2570) || ((_2564 < _2568) || ((_2563 < _2568) || (_2563 > _2570))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2565, cbModelParam._m0[9u].z, fma(_2564, cbModelParam._m0[9u].y, _2563 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2565, cbModelParam._m0[10u].z, fma(_2564, cbModelParam._m0[10u].y, _2563 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2565, cbModelParam._m0[11u].z, fma(_2564, cbModelParam._m0[11u].y, _2563 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_13_35_ladder = _2693.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2693.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2693.x * cbModelParam._m0[1u].y;
        }
        _2088 = frontier_phi_13_35_ladder_2;
        _2090 = frontier_phi_13_35_ladder_1;
        _2092 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1199, _1200, _1201), _2008);
        _2088 = _2076.x * cbModelParam._m0[1u].y;
        _2090 = _2076.y * cbModelParam._m0[1u].y;
        _2092 = _2076.z * cbModelParam._m0[1u].y;
    }
    float _2096 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1029);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2096 : min(cbModelParam._m0[25u].w, _2096));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2150 = fma(_1263, cbModelParam._m0[21u].z, fma(_1259, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1255)) + cbModelParam._m0[21u].w;
        float _2154 = fma(_1263, cbModelParam._m0[22u].z, fma(_1259, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1255)) + cbModelParam._m0[22u].w;
        float _2158 = fma(_1263, cbModelParam._m0[23u].z, fma(_1259, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1255)) + cbModelParam._m0[23u].w;
        float _2161 = fma(_1201, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199));
        float _2164 = fma(_1201, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199));
        float _2167 = fma(_1201, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199));
        float _2307;
        if (_2161 > 0.0)
        {
            _2307 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2307 = frontier_phi_25_21_ladder;
        }
        float _2583;
        if (_2164 > 0.0)
        {
            _2583 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2583 = frontier_phi_37_32_ladder;
        }
        float _2796;
        if (_2167 > 0.0)
        {
            _2796 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2796 = frontier_phi_46_43_ladder;
        }
        float _2798 = isnan(_2583) ? _2307 : (isnan(_2307) ? _2583 : min(_2307, _2583));
        float _2799 = isnan(_2796) ? _2798 : (isnan(_2798) ? _2796 : min(_2798, _2796));
        float _2803 = (_2799 * _2161) + _2150;
        float _2804 = (_2799 * _2164) + _2154;
        float _2805 = (_2799 * _2167) + _2158;
        float _2806 = _2799 * 9.9999997473787516355514526367188e-05;
        float _2807 = (-1.0) - _2806;
        float _2809 = _2806 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2805 > _2809) || ((_2805 < _2807) || ((_2804 > _2809) || ((_2804 < _2807) || ((_2803 < _2807) || (_2803 > _2809))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2805, cbModelParam._m0[17u].z, fma(_2804, cbModelParam._m0[17u].y, _2803 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2805, cbModelParam._m0[18u].z, fma(_2804, cbModelParam._m0[18u].y, _2803 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2805, cbModelParam._m0[19u].z, fma(_2804, cbModelParam._m0[19u].y, _2803 * cbModelParam._m0[19u].x))), _2097);
            frontier_phi_22_46_ladder = _3004.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3004.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3004.x * cbModelParam._m0[1u].z;
        }
        _2186 = frontier_phi_22_46_ladder_2;
        _2188 = frontier_phi_22_46_ladder_1;
        _2190 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1199, _1200, _1201), _2097);
        _2186 = _2170.x * cbModelParam._m0[1u].z;
        _2188 = _2170.y * cbModelParam._m0[1u].z;
        _2190 = _2170.z * cbModelParam._m0[1u].z;
    }
    float _2203 = (((_1226 * _1175) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1226 * _1177) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2207 = (((_1226 * _1178) + _1227) * _1191) * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2210 = fma(_2207, cbSceneParam._m0[89u].z, fma(_2205, cbSceneParam._m0[89u].y, _2203 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2207, cbSceneParam._m0[90u].z, fma(_2205, cbSceneParam._m0[90u].y, _2203 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2207, cbSceneParam._m0[91u].z, fma(_2205, cbSceneParam._m0[91u].y, _2203 * cbSceneParam._m0[91u].x));
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _1191 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2261 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2265 = _2228 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_1026, _1027, _1028));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_1026, _1027, _1028));
    float _4465 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4476 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2245].x * _2251) * _2286) + ((cbLight._m0[_2255].x * _2261) * _2284);
    float _2294 = ((_2251 * cbLight._m0[_2245].y) * _2286) + ((_2261 * cbLight._m0[_2255].y) * _2284);
    float _2295 = ((_2251 * cbLight._m0[_2245].z) * _2286) + ((_2261 * cbLight._m0[_2255].z) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2301)
    {
        _2312 = _2293;
        _2314 = _2294;
        _2316 = _2295;
    }
    else
    {
        uint _2320 = _2228 + 6u;
        float _2336 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4487 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2339 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2312 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2293;
        _2314 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2294;
        _2316 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2295;
    }
    bool _2319 = _2299.y == 0u;
    float _2357;
    float _2359;
    float _2361;
    if (_2319)
    {
        _2357 = _2312;
        _2359 = _2314;
        _2361 = _2316;
    }
    else
    {
        uint _2527 = _2228 + 7u;
        float _2543 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2544 = _2543 * _2543;
        float _4503 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2545 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2546 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2357 = (((cbLight._m0[_2527].x * 0.3183098733425140380859375) * _2545) * _2546) + _2312;
        _2359 = (((cbLight._m0[_2527].y * 0.3183098733425140380859375) * _2545) * _2546) + _2314;
        _2361 = (((cbLight._m0[_2527].z * 0.3183098733425140380859375) * _2545) * _2546) + _2316;
    }
    uint _2364 = _2228 + 8u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _1029) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2228].x + _1105;
    float _2380 = cbLight._m0[_2228].y + _1106;
    float _2381 = cbLight._m0[_2228].z + _1107;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2228].xyz));
    float _4519 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _2393 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2394 = dot(vec3(_1026, _1027, _1028), vec3(_2386, _2387, _2388));
    float _4541 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2386, _2387, _2388));
    float _4552 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2378 * _2378;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2415 = 0.959999978542327880859375 - _1172;
    float _2417 = 0.959999978542327880859375 - _1173;
    float _2418 = 0.959999978542327880859375 - _1174;
    float _2425 = 1.0 - _2378;
    float _2436 = (0.5 / (((_2393 * ((_2392 * _2425) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2425) + _2378) * _2392))) * _2392;
    float _4563 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    uint _2449 = _2228 + 9u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _1029) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2265].x + _1105;
    float _2463 = cbLight._m0[_2265].y + _1106;
    float _2464 = cbLight._m0[_2265].z + _1107;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2265].xyz));
    float _4574 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2476 = dot(vec3(_1026, _1027, _1028), vec3(_2469, _2470, _2471));
    float _4585 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2469, _2470, _2471));
    float _4596 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2461 * _2461;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2502 = 1.0 - _2461;
    float _2512 = (0.5 / (((_2393 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2502) + _2461) * _2475))) * _2475;
    float _4607 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    float _2524 = (((((_2495 * _2415) + _1175) * cbLight._m0[_2449].x) * _2514) * _2251) + (((((_2414 * _2415) + _1175) * cbLight._m0[_2364].x) * _2438) * _2261);
    float _2525 = (((((_2495 * _2417) + _1177) * cbLight._m0[_2449].y) * _2514) * _2251) + (((((_2414 * _2417) + _1177) * cbLight._m0[_2364].y) * _2438) * _2261);
    float _2526 = (((((_2495 * _2418) + _1178) * cbLight._m0[_2449].z) * _2514) * _2251) + (((((_2414 * _2418) + _1178) * cbLight._m0[_2364].z) * _2438) * _2261);
    float _2588;
    float _2590;
    float _2592;
    if (_2301)
    {
        _2588 = _2524;
        _2590 = _2525;
        _2592 = _2526;
    }
    else
    {
        uint _2594 = _2228 + 2u;
        uint _2598 = _2228 + 10u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _1029) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _1105;
        float _2615 = cbLight._m0[_2594].y + _1106;
        float _2616 = cbLight._m0[_2594].z + _1107;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2594].xyz));
        float _4618 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2628 = dot(vec3(_1026, _1027, _1028), vec3(_2621, _2622, _2623));
        float _4629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4640 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2654 = 1.0 - _2613;
        float _2664 = (0.5 / (((_2393 * ((_2627 * _2654) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2654) + _2613) * _2627))) * _2627;
        float _4651 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2588 = (((((_2647 * _2415) + _1175) * cbLight._m0[_2598].x) * _2666) * _2667) + _2524;
        _2590 = (((((_2647 * _2417) + _1177) * cbLight._m0[_2598].y) * _2666) * _2667) + _2525;
        _2592 = (((((_2647 * _2418) + _1178) * cbLight._m0[_2598].z) * _2666) * _2667) + _2526;
    }
    float _2702;
    float _2704;
    float _2706;
    if (_2319)
    {
        _2702 = _2588;
        _2704 = _2590;
        _2706 = _2592;
    }
    else
    {
        uint _2713 = _2228 + 3u;
        uint _2717 = _2228 + 11u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _1029) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _1105;
        float _2734 = cbLight._m0[_2713].y + _1106;
        float _2735 = cbLight._m0[_2713].z + _1107;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2713].xyz));
        float _4667 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2747 = dot(vec3(_1026, _1027, _1028), vec3(_2740, _2741, _2742));
        float _4678 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4689 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2766 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2773 = 1.0 - _2732;
        float _2783 = (0.5 / (((_2393 * ((_2746 * _2773) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2773) + _2732) * _2746))) * _2746;
        float _4700 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2785 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2786 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2702 = (((((_2766 * _2415) + _1175) * cbLight._m0[_2717].x) * _2785) * _2786) + _2588;
        _2704 = (((((_2766 * _2417) + _1177) * cbLight._m0[_2717].y) * _2785) * _2786) + _2590;
        _2706 = (((((_2766 * _2418) + _1178) * cbLight._m0[_2717].z) * _2785) * _2786) + _2592;
    }
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_2226.y == 0u)
    {
        float _2861 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2862 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2861;
        float _2863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2861;
        float _2864 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2861;
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.x;
        uint _2888 = uint((float(_2876.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1114) / _2877))) + floor(float(uint(cbSceneParam._m0[85u].x * _1113) / _2877)));
        float _2898 = (log2(_2864 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2899 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        uint _2902 = uint(isnan(14.0) ? _2899 : (isnan(_2899) ? 14.0 : min(_2899, 14.0)));
        uvec4 _2907 = texelFetch(g_lightClusterGridBuffer, int(((_2902 << 2u) + (_2888 << 6u)) >> 2u));
        uint _2908 = _2907.x;
        uint _2909 = _2876.z;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((((1u << ((_2909 >> 4u) & 15u)) + 4294967295u) & _2908) == 0u) || ((_2909 & 240u) == 0u))
        {
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
        }
        else
        {
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            uint _3160 = 0u;
            uint _3169;
            bool _3170;
            for (;;)
            {
                _3169 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                _3170 = _3169 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3170)
                {
                    frontier_phi_61_pred = _3154;
                    frontier_phi_61_pred_1 = _3159;
                    frontier_phi_61_pred_2 = _3158;
                    frontier_phi_61_pred_3 = _3157;
                    frontier_phi_61_pred_4 = _3156;
                    frontier_phi_61_pred_5 = _3155;
                }
                else
                {
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    uint _3284;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3169;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3288 = uint(findLSB(_3284)) + (_3160 << 5u);
                        uint _3285 = (_3284 + 4294967295u) & _3284;
                        uint _3290 = _3288 * 48u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3310 = (_3288 * 48u) + 4u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3329 = (_3288 * 48u) + 8u;
                        vec3 _3340 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x));
                        float _3344 = _3304.x - _2862;
                        float _3345 = _3304.y - _2863;
                        float _3346 = _3304.z - _2864;
                        float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                        float _3350 = inversesqrt(_3347);
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3354 = dot(vec3(_1132, _1135, _1138), vec3(_3351, _3352, _3353));
                        float _3359 = 1.0 - (_3347 * _3304.w);
                        float _4726 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3361 = sqrt(_3347) * _3323.w;
                        float _3364 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3354) + _3365;
                        float _3371 = _3361 * _3361;
                        float _3375 = ((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3360) / ((_3371 * 0.699999988079071044921875) + 1.0);
                        float _3379 = (-0.0) - _2862;
                        float _3380 = (-0.0) - _2863;
                        float _3381 = (-0.0) - _2864;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3396 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _1207;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_1132, _1135, _1138), vec3(_3386, _3387, _3388));
                        float _4742 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3421 = dot(vec3(_1132, _1135, _1138), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4753 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3364 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3354) + _3430;
                        float _4764 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4775 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3428 * _3428) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125))) * _3360;
                        _3213 = (_3375 * _3323.x) + _3281;
                        _3214 = (_3375 * _3323.y) + _3282;
                        _3215 = (_3375 * _3323.z) + _3283;
                        _3210 = (_3456 * _3340.x) + _3278;
                        _3211 = (_3456 * _3340.y) + _3279;
                        _3212 = (_3456 * _3340.z) + _3280;
                        if (_3285 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3285;
                        }
                    }
                    frontier_phi_61_pred = _3210;
                    frontier_phi_61_pred_1 = _3215;
                    frontier_phi_61_pred_2 = _3214;
                    frontier_phi_61_pred_3 = _3213;
                    frontier_phi_61_pred_4 = _3212;
                    frontier_phi_61_pred_5 = _3211;
                }
                _3010 = frontier_phi_61_pred;
                _3020 = frontier_phi_61_pred_1;
                _3018 = frontier_phi_61_pred_2;
                _3016 = frontier_phi_61_pred_3;
                _3014 = frontier_phi_61_pred_4;
                _3012 = frontier_phi_61_pred_5;
                uint _3161 = _3160 + 1u;
                if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3154 = _3010;
                    _3155 = _3012;
                    _3156 = _3014;
                    _3157 = _3016;
                    _3158 = _3018;
                    _3159 = _3020;
                    _3160 = _3161;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
        }
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.z;
        uint _3026 = (_3024 >> 8u) & 15u;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((4294967295u << _3026) & _2908) == 0u)
        {
            _3122 = _3009;
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
            _3130 = _3017;
            _3132 = _3019;
        }
        else
        {
            float _3147 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
            float _3148 = _3147 * _2862;
            float _3149 = _3147 * _2863;
            float _3150 = _3147 * _2864;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3026 < ((_3024 >> 12u) & 15u))
            {
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3261 = _3009;
                float _3262 = _3011;
                float _3263 = _3013;
                float _3264 = _3015;
                float _3265 = _3017;
                float _3266 = _3019;
                uint _3267 = _3026;
                uint _3276;
                bool _3277;
                for (;;)
                {
                    _3276 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                    _3277 = _3276 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3277)
                    {
                        frontier_phi_67_pred = _3264;
                        frontier_phi_67_pred_1 = _3265;
                        frontier_phi_67_pred_2 = _3266;
                        frontier_phi_67_pred_3 = _3263;
                        frontier_phi_67_pred_4 = _3262;
                        frontier_phi_67_pred_5 = _3261;
                    }
                    else
                    {
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3474 = _3261;
                        float _3475 = _3262;
                        float _3476 = _3263;
                        float _3477 = _3264;
                        float _3478 = _3265;
                        float _3479 = _3266;
                        uint _3480 = _3276;
                        uint _3481;
                        vec4 _3506;
                        float _3507;
                        vec4 _3522;
                        vec3 _3534;
                        vec4 _3549;
                        vec4 _3564;
                        float _3610;
                        bool _3611;
                        for (;;)
                        {
                            uint _3491 = ((_3267 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3480));
                            _3481 = (_3480 + 4294967295u) & _3480;
                            uint _3493 = _3491 * 40u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3507 = _3506.w;
                            uint _3509 = (_3491 * 40u) + 4u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3491 * 40u) + 8u;
                            _3534 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x));
                            uint _3536 = (_3491 * 40u) + 16u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3491 * 40u) + 20u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3491 * 40u) + 24u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3585 = (_3491 * 40u) + 28u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3610 = fma(_2864, _3598.z, fma(_2863, _3598.y, _3598.x * _2862)) + _3598.w;
                            _3611 = !((fma(_2864, _3579.z, fma(_2863, _3579.y, _3579.x * _2862)) + _3579.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3611)
                            {
                                float _3638 = _3506.x - _2862;
                                float _3639 = _3506.y - _2863;
                                float _3640 = _3506.z - _2864;
                                float _3641 = dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640));
                                float _3644 = inversesqrt(_3641);
                                float _3645 = _3644 * _3638;
                                float _3646 = _3644 * _3639;
                                float _3647 = _3644 * _3640;
                                float _3651 = 1.0 - (_3641 / (_3507 * _3507));
                                float _4786 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3656 = sqrt(_3641) * _3522.w;
                                float _3658 = 1.39999997615814208984375 / (_3656 + 1.39999997615814208984375);
                                float _3659 = _3658 * _3658;
                                float _3662 = ((1.0 - _3659) * dot(vec3(_3645, _3646, _3647), vec3(_1132, _1135, _1138))) + _3659;
                                float _3665 = _3656 * _3656;
                                float _3669 = (fma(_2864, _3549.z, fma(_2863, _3549.y, _3549.x * _2862)) + _3549.w) / _3610;
                                float _3670 = (fma(_2864, _3564.z, fma(_2863, _3564.y, _3564.x * _2862)) + _3564.w) / _3610;
                                float _3674 = 1.0 - dot(vec2(_3669, _3670), vec2(_3669, _3670));
                                float _4802 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3676 = _3675 * (((isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0))) * _3652) / ((_3665 * 0.699999988079071044921875) + 1.0));
                                float _3688 = exp2(log2(1.0 / ((_3665 * 3.5) + 5.0)) * 0.25);
                                float _3689 = 1.0 - _1207;
                                float _3696 = sqrt(1.0 - ((1.0 - (_3689 * _3689)) * (1.0 - (_3688 * _3688))));
                                float _3697 = _3696 * _3696;
                                float _3698 = _3697 * _3697;
                                float _3699 = _3645 - _3148;
                                float _3700 = _3646 - _3149;
                                float _3701 = _3647 - _3150;
                                float _3705 = inversesqrt(dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701)));
                                float _3709 = dot(vec3(_1132, _1135, _1138), vec3((-0.0) - _3148, (-0.0) - _3149, (-0.0) - _3150));
                                float _4813 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3713 = dot(vec3(_1132, _1135, _1138), vec3(_3705 * _3699, _3705 * _3700, _3705 * _3701));
                                float _4824 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3720 = ((_3716 * _3716) * (_3698 + (-1.0))) + 1.0;
                                float _3721 = _3658 * _3697;
                                float _3722 = _3721 * _3721;
                                float _3728 = ((1.0 - _3722) * dot(vec3(_1132, _1135, _1138), vec3(_3645, _3646, _3647))) + _3722;
                                float _4835 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3730 = 1.0 - _3697;
                                float _3740 = (0.5 / (((_3729 * ((_3712 * _3730) + _3697)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3697) * _3712))) * _3729;
                                float _4846 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3750 = (_3675 * _3652) * (((_3698 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3720 * _3720) * ((_3665 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3750 * _3534.x;
                                frontier_phi_73_pred_1 = _3750 * _3534.y;
                                frontier_phi_73_pred_2 = _3676 * _3522.z;
                                frontier_phi_73_pred_3 = _3676 * _3522.y;
                                frontier_phi_73_pred_4 = _3676 * _3522.x;
                                frontier_phi_73_pred_5 = _3750 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3754 = frontier_phi_73_pred;
                            _3755 = frontier_phi_73_pred_1;
                            _3759 = frontier_phi_73_pred_2;
                            _3758 = frontier_phi_73_pred_3;
                            _3757 = frontier_phi_73_pred_4;
                            _3756 = frontier_phi_73_pred_5;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            if (_3481 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3481;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3464;
                        frontier_phi_67_pred_1 = _3465;
                        frontier_phi_67_pred_2 = _3466;
                        frontier_phi_67_pred_3 = _3463;
                        frontier_phi_67_pred_4 = _3462;
                        frontier_phi_67_pred_5 = _3461;
                    }
                    _3129 = frontier_phi_67_pred;
                    _3131 = frontier_phi_67_pred_1;
                    _3133 = frontier_phi_67_pred_2;
                    _3127 = frontier_phi_67_pred_3;
                    _3125 = frontier_phi_67_pred_4;
                    _3123 = frontier_phi_67_pred_5;
                    uint _3268 = _3267 + 1u;
                    if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3261 = _3123;
                        _3262 = _3125;
                        _3263 = _3127;
                        _3264 = _3129;
                        _3265 = _3131;
                        _3266 = _3133;
                        _3267 = _3268;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3131;
                frontier_phi_55_56_ladder_1 = _3133;
                frontier_phi_55_56_ladder_2 = _3129;
                frontier_phi_55_56_ladder_3 = _3127;
                frontier_phi_55_56_ladder_4 = _3125;
                frontier_phi_55_56_ladder_5 = _3123;
            }
            else
            {
                frontier_phi_55_56_ladder = _3017;
                frontier_phi_55_56_ladder_1 = _3019;
                frontier_phi_55_56_ladder_2 = _3015;
                frontier_phi_55_56_ladder_3 = _3013;
                frontier_phi_55_56_ladder_4 = _3011;
                frontier_phi_55_56_ladder_5 = _3009;
            }
            _3122 = frontier_phi_55_56_ladder_5;
            _3124 = frontier_phi_55_56_ladder_4;
            _3126 = frontier_phi_55_56_ladder_3;
            _3128 = frontier_phi_55_56_ladder_2;
            _3130 = frontier_phi_55_56_ladder;
            _3132 = frontier_phi_55_56_ladder_1;
        }
        float _3137 = isnan(1.0) ? _1191 : (isnan(_1191) ? 1.0 : min(_1191, 1.0));
        _2921 = (_3137 * _3128) + _2357;
        _2923 = (_3137 * _3130) + _2359;
        _2925 = (_3137 * _3132) + _2361;
        _2927 = ((_3122 * _1175) * _3137) + _2702;
        _2929 = ((_3124 * _1177) * _3137) + _2704;
        _2931 = ((_3126 * _1178) * _3137) + _2706;
    }
    else
    {
        _2921 = _2357;
        _2923 = _2359;
        _2925 = _2361;
        _2927 = _2702;
        _2929 = _2704;
        _2931 = _2706;
    }
    float _4862 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _4873 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _4884 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    uint _2951 = _284 + 6u;
    float _2959 = _1113 / cbSceneParam._m0[86u].x;
    float _2960 = _1114 / cbSceneParam._m0[86u].y;
    vec4 _2974 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, (log2((isnan(cbSceneParam._m0[77u].w) ? _1048 : (isnan(_1048) ? cbSceneParam._m0[77u].w : min(_1048, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2976 = _2974.x;
    float _2977 = _2974.y;
    float _2978 = _2974.z;
    float _2979 = _2974.w;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_1048 > cbSceneParam._m0[78u].w)
    {
        float _3034 = isnan(_1048) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1048 : min(cbSceneParam._m0[80u].w, _1048));
        float _3035 = _3034 / _1048;
        float _3046 = _3035 * _1098;
        float _3047 = _1099 * _3035;
        float _3048 = (-0.0) - _3047;
        float _3050 = _3035 * _1100;
        float _3052 = (cbSceneParam._m0[77u].w * _3048) / _3034;
        float _3053 = _3052 + cbSceneParam._m0[79u].w;
        float _3054 = cbSceneParam._m0[79u].w - _3047;
        float _3060 = sqrt(((_3046 * _3046) + (_3047 * _3047)) + (_3050 * _3050));
        float _3063 = (1.0 - (cbSceneParam._m0[77u].w / _3034)) * _3060;
        float _3068 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3070 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3048 - _3052) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3053 > 0.0) ? exp2(_3068 * _3053) : (2.0 - exp2(_3070 * _3053))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3063;
        }
        else
        {
            float _3183 = 1.0 / cbSceneParam._m0[80u].x;
            float _3184 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : max(_3053, _3054));
            float _3185 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : min(_3053, _3054));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            _3223 = ((abs(_3060 / _3048) * cbSceneParam._m0[80u].y) * ((((_3194 - _3195) * 2.0) - ((exp2(_3068 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0)))) - exp2(_3068 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))))) * _3183)) - ((exp2(_3070 * _3194) - exp2(_3070 * _3195)) * _3183))) + (_3063 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2979);
        _3072 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2976;
        _3074 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2977;
        _3076 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2978;
        _3078 = _3234 * _2979;
    }
    else
    {
        _3072 = _2976;
        _3074 = _2977;
        _3076 = _2978;
        _3078 = _2979;
    }
    float _3090 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3091 = _3090 == 3.0;
    float _3092 = log2(_3078);
    float _3099 = exp2(_3092 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2921 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1191))) + ((_2927 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3100 = exp2(_3092 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2923 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1191))) + ((_2929 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3101 = exp2(_3092 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2925 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1191))) + ((_2931 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1997)) * cbPerFrame._m0[3u].x));
    float _3110 = (_3090 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3110 * (_3091 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.y = _3110 * (_3091 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.z = _3110 * (_3091 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.w = cbInstanceData._m0[_2951].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2951].w;
}


