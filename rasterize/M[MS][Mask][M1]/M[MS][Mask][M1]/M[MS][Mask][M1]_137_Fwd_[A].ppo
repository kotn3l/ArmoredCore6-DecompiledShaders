#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1657;
float _4034;
float _4035;
float _4036;
float _4037;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4046 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _461 = (_454 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _462 = (_454 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _463 = (_454 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[23u].w) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4057 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _383.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[23u].w) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4068 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _610 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _314.x) * ((_597 * ((_555.x * cbMtdParam._m0[14u].x) - _534)) + _534);
    float _613 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _314.y) * ((_597 * ((_555.y * cbMtdParam._m0[14u].y) - _535)) + _535);
    float _616 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _314.z) * ((_597 * ((_555.z * cbMtdParam._m0[14u].z) - _536)) + _536);
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    float _682 = ((_654.x - _673) * _454) + _673;
    float _683 = ((_654.y - _674) * _454) + _674;
    float _684 = ((_654.z - _675) * _454) + _675;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _707 = ((_696.x - _682) * _527) + _682;
    float _708 = ((_696.y - _683) * _527) + _683;
    float _709 = ((_696.z - _684) * _527) + _684;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _734 = ((_721.z - _709) * _597) + _709;
    float _737 = ((((_721.x - _707) * _597) + _707) * 2.0) + (-1.0);
    float _739 = ((((_721.y - _708) * _597) + _708) * 2.0) + (-1.0);
    float _740 = dot(vec2(_737, _739), vec2(_737, _739));
    float _4079 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _786 = _784.x;
    float _787 = 1.0 - _786;
    float _795 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _798 = ((isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : min(_795, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _807 = (_798 - ((((((_786 - _787) * cbMtdParam._m0[24u].z) + _787) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _798))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4100 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _815 = (_808 * ((_634.x * cbMtdParam._m0[18u].x) - _610)) + _610;
    float _816 = (_808 * ((_634.y * cbMtdParam._m0[18u].y) - _613)) + _613;
    float _817 = (_808 * ((_634.z * cbMtdParam._m0[18u].z) - _616)) + _616;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _831 = _829.x;
    float _832 = 1.0 - _831;
    float _857 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_831 - _832) * cbMtdParam._m0[24u].w) + _832) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4111 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _866 = ((((cbMtdParam._m0[10u].x - _815) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _858) + _815;
    float _867 = ((((cbMtdParam._m0[10u].y - _816) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _858) + _816;
    float _868 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _817)) * _858) + _817;
    vec4 _894 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _896 = _894.x;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _896) * _454) + _896;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _913) * _527) + _913;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _930) * _597) + _930;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _947) * cbMtdParam._m0[19u].z) + _947;
    float _953 = _951 - (_951 * _808);
    float _955 = _953 - (_953 * _858);
    float _959 = (cbMtdParam._m0[19u].w * (_759.z - _734)) + _734;
    vec4 _975 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _982 = (_975.x * 2.0) + (-1.0);
    float _983 = (_975.y * 2.0) + (-1.0);
    float _984 = dot(vec2(_982, _983), vec2(_982, _983));
    float _4122 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _992 = (_808 * (_975.z - _959)) + _959;
    float _995 = ((cbMtdParam._m0[23u].x - _992) * _858) + _992;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4133 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1034 = (((_759.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _1035 = (((_759.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _739;
    float _1047 = (((_982 - _1034) + (cbMtdParam._m0[21u].x * _1034)) * _808) + _1034;
    float _1048 = (((_983 - _1035) + (cbMtdParam._m0[21u].x * _1035)) * _808) + _1035;
    float _1049 = (_808 * (sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) - _745)) + _745;
    float _1060 = (((_1024 - _1047) + (_1047 * cbMtdParam._m0[22u].z)) * _858) + _1047;
    float _1061 = (((_1025 - _1048) + (_1048 * cbMtdParam._m0[22u].z)) * _858) + _1048;
    float _1062 = ((sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) - _1049) * _858) + _1049;
    float _1064 = cbMtdParam._m0[22u].x + _759.w;
    float _1067 = fma(_1062, _262 * NORMAL.x, fma(_1061, _269 * TANGENT.x, (_255 * _247) * _1060));
    float _1070 = fma(_1062, _262 * NORMAL.y, fma(_1061, _269 * TANGENT.y, (_255 * _248) * _1060));
    float _1073 = fma(_1062, _262 * NORMAL.z, fma(_1061, _269 * TANGENT.z, (_255 * _249) * _1060));
    float _1077 = inversesqrt(dot(vec3(_1067, _1070, _1073), vec3(_1067, _1070, _1073)));
    float _1078 = _1077 * _1067;
    float _1079 = _1077 * _1070;
    float _1080 = _1077 * _1073;
    float _4144 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1081 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4166 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4177 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4188 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4199 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1086 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _1100 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1150 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1140);
    float _1151 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1140);
    float _1152 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1140);
    float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
    float _1157 = _1150 * _1156;
    float _1158 = _1151 * _1156;
    float _1159 = _1152 * _1156;
    vec4 _1164 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1166 = _1164.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1338 = sqrt(((_1150 * _1150) + (_1151 * _1151)) + (_1152 * _1152));
        float _1344 = (cbMatDynParam._m0[5u].x * _1338) + cbMatDynParam._m0[5u].y;
        float _4210 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1349 = (cbMatDynParam._m0[5u].z * _1338) + cbMatDynParam._m0[5u].w;
        float _4221 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) - _1345)) + _1345) < ((_1166 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1177 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1178 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1196 = fma(_1080, cbSceneParam._m0[5u].z, fma(_1079, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1078));
    float _1199 = fma(_1080, cbSceneParam._m0[6u].z, fma(_1079, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1078));
    float _1202 = fma(_1080, cbSceneParam._m0[7u].z, fma(_1079, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1078));
    uint _1215 = _275 + 9u;
    uint _1216 = _1215 + uint(cbMatDynParam._m0[0u].w);
    float _1222 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1216].x;
    float _1223 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1216].y;
    float _1224 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_1216].z;
    float _4232 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1225 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1226 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1227 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _1228 = 1.0 - _1086;
    float _1229 = _1225 * _1228;
    float _1230 = _1226 * _1228;
    float _1231 = _1227 * _1228;
    float _1236 = (_1225 + (-0.039999999105930328369140625)) * _1086;
    float _1237 = (_1226 + (-0.039999999105930328369140625)) * _1086;
    float _1238 = (_1227 + (-0.039999999105930328369140625)) * _1086;
    float _1239 = _1236 + 0.039999999105930328369140625;
    float _1241 = _1237 + 0.039999999105930328369140625;
    float _1242 = _1238 + 0.039999999105930328369140625;
    vec4 _1251 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1177, cbSceneParam._m0[86u].y * _1178));
    float _1255 = ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * TEXCOORD_5.w) * _1251.x;
    float _1256 = dot(vec3(_1078, _1079, _1080), vec3(_1157, _1158, _1159));
    float _1259 = _1256 * 2.0;
    float _1263 = (_1259 * _1078) - _1157;
    float _1264 = (_1259 * _1079) - _1158;
    float _1265 = (_1259 * _1080) - _1159;
    float _1269 = abs(dot(vec3(_1157, _1158, _1159), vec3(_1078, _1079, _1080)));
    float _4265 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1271 = sqrt(_1081);
    float _1284 = exp2((_1271 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1271 * 3.0));
    float _1290 = (1.0 - _1284) * ((_1271 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1291 = _1284 * _1271;
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1327 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1656;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1381 = fma(_1327, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1319));
        float _1385 = fma(_1327, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1319));
        float _1389 = fma(_1327, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1319));
        float _1414 = _1319 + _1078;
        float _1415 = _1323 + _1079;
        float _1416 = _1327 + _1080;
        float _1426 = fma(_1416, cbModelParam._m0[26u].z, fma(_1415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1414)) - _1381;
        float _1427 = fma(_1416, cbModelParam._m0[27u].z, fma(_1415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1414)) - _1385;
        float _1428 = fma(_1416, cbModelParam._m0[28u].z, fma(_1415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1414)) - _1389;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1381 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1385 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[34u].z) + ((((((_1389 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1484 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1450.x + (-0.5));
        float _1486 = _1484 * (_1450.y + (-0.5));
        float _1487 = _1484 * (_1450.z + (-0.5));
        float _1494 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1457.x + (-0.5));
        float _1496 = _1494 * (_1457.y + (-0.5));
        float _1497 = _1494 * (_1457.z + (-0.5));
        float _1504 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1464.x + (-0.5));
        float _1506 = _1504 * (_1464.y + (-0.5));
        float _1507 = _1504 * (_1464.z + (-0.5));
        float _1514 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1471.x + (-0.5));
        float _1516 = _1514 * (_1471.y + (-0.5));
        float _1517 = _1514 * (_1471.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1538 = (dot(vec3(_1078, _1079, _1080), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1548 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4313 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1550 + 1.0))) + _1555) * _1518;
        float _1565 = _1486 * 0.5;
        float _1566 = _1496 * 0.5;
        float _1567 = _1506 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_1078, _1079, _1080), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4346 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1592 + 1.0))) + _1597) * _1519;
        float _1607 = _1487 * 0.5;
        float _1608 = _1497 * 0.5;
        float _1609 = _1507 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_1078, _1079, _1080), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4379 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1634 + 1.0))) + _1639) * _1520;
        _1656 = _1487;
        _1658 = _1486;
        _1659 = _1485;
        _1660 = _1497;
        _1661 = _1496;
        _1662 = _1495;
        _1663 = _1507;
        _1664 = _1506;
        _1665 = _1505;
        _1666 = _1520;
        _1667 = _1519;
        _1668 = _1518;
        _1669 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1670 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1671 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1657;
        _1658 = _1657;
        _1659 = _1657;
        _1660 = _1657;
        _1661 = _1657;
        _1662 = _1657;
        _1663 = _1657;
        _1664 = _1657;
        _1665 = _1657;
        _1666 = _1657;
        _1667 = _1657;
        _1668 = _1657;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1697 = fma(_1327, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319));
        float _1701 = fma(_1327, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319));
        float _1705 = fma(_1327, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319));
        float _1728 = _1319 + _1078;
        float _1729 = _1323 + _1079;
        float _1730 = _1327 + _1080;
        float _1740 = fma(_1730, cbModelParam._m0[30u].z, fma(_1729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1728)) - _1697;
        float _1741 = fma(_1730, cbModelParam._m0[31u].z, fma(_1729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1728)) - _1701;
        float _1742 = fma(_1730, cbModelParam._m0[32u].z, fma(_1729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1728)) - _1705;
        float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
        float _1759 = ((_1746 * _1740) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1697 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1760 = ((_1746 * _1741) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1701 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1761 = ((_1746 * _1742) / cbModelParam._m0[35u].z) + ((((((_1705 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1777 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1784 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        float _1796 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1763.x + (-0.5));
        float _1798 = _1796 * (_1763.y + (-0.5));
        float _1799 = _1796 * (_1763.z + (-0.5));
        float _1806 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1807 = _1806 * (_1770.x + (-0.5));
        float _1808 = _1806 * (_1770.y + (-0.5));
        float _1809 = _1806 * (_1770.z + (-0.5));
        float _1816 = exp2((_1777.w + (-0.5)) * 20.0) * 2.0;
        float _1817 = _1816 * (_1777.x + (-0.5));
        float _1818 = _1816 * (_1777.y + (-0.5));
        float _1819 = _1816 * (_1777.z + (-0.5));
        float _1826 = exp2((_1784.w + (-0.5)) * 20.0) * 2.0;
        float _1827 = _1826 * (_1784.x + (-0.5));
        float _1828 = _1826 * (_1784.y + (-0.5));
        float _1829 = _1826 * (_1784.z + (-0.5));
        float _1830 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1831 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1832 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1833 = _1797 * 0.5;
        float _1834 = _1807 * 0.5;
        float _1835 = _1817 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1078, _1079, _1080), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1830 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4442 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1860 + 1.0))) + _1865) * _1830;
        float _1875 = _1798 * 0.5;
        float _1876 = _1808 * 0.5;
        float _1877 = _1818 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1078, _1079, _1080), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1831 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4475 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1902 + 1.0))) + _1907) * _1831;
        float _1917 = _1799 * 0.5;
        float _1918 = _1809 * 0.5;
        float _1919 = _1819 * 0.5;
        float _1920 = dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919));
        float _1925 = (_1920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1920);
        float _1933 = (dot(vec3(_1078, _1079, _1080), vec3(_1925 * _1917, _1925 * _1918, _1925 * _1919)) + 1.0) * 0.5;
        float _4486 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1942 = sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919)) / (_1832 + 9.9999997473787516355514526367188e-06);
        float _4497 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1944 = _1943 * 2.0;
        float _1948 = (1.0 - _1943) / (_1943 + 1.0);
        float _4508 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1958 = ((((1.0 - _1949) * (_1944 + 2.0)) * exp2(log2(isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_1944 + 1.0))) + _1949) * _1832;
        _1966 = _1799;
        _1967 = _1798;
        _1968 = _1797;
        _1969 = _1809;
        _1970 = _1808;
        _1971 = _1807;
        _1972 = _1819;
        _1973 = _1818;
        _1974 = _1817;
        _1975 = _1832;
        _1976 = _1831;
        _1977 = _1830;
        _1978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
        _1979 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
        _1980 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)));
    }
    else
    {
        _1966 = _1657;
        _1967 = _1657;
        _1968 = _1657;
        _1969 = _1657;
        _1970 = _1657;
        _1971 = _1657;
        _1972 = _1657;
        _1973 = _1657;
        _1974 = _1657;
        _1975 = _1657;
        _1976 = _1657;
        _1977 = _1657;
        _1978 = 0.0;
        _1979 = 0.0;
        _1980 = 0.0;
    }
    float _1990 = (cbModelParam._m0[1u].x * (_1978 - _1669)) + _1669;
    float _1991 = (cbModelParam._m0[1u].x * (_1979 - _1670)) + _1670;
    float _1992 = (cbModelParam._m0[1u].x * (_1980 - _1671)) + _1671;
    float _2013 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1990));
    float _2034 = _1263 * 0.5;
    float _2035 = _1264 * 0.5;
    float _2036 = _1265 * 0.5;
    float _2037 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1968, _1971, _1974, _1977));
    float _2040 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1967, _1970, _1973, _1976));
    float _2043 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1966, _1969, _1972, _1975));
    float _2077;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2050 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1656, _1660, _1663, _1666));
        float _2054 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1658, _1661, _1664, _1667));
        float _2058 = dot(vec4(_2034, _2035, _2036, 1.0), vec4(_1659, _1662, _1665, _1668));
        float _2065 = dot(vec4(cbModelParam._m0[39u]), vec4(_2034, _2035, _2036, 1.0));
        _2077 = dot(vec3(isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)), isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)), isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2065) ? 0.0 : (isnan(0.0) ? _2065 : max(0.0, _2065))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2077 = 1.0;
    }
    float _2088;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2079 = dot(vec4(cbModelParam._m0[40u]), vec4(_2034, _2035, _2036, 1.0));
        _2088 = dot(vec3(isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)), isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2079) ? 0.0 : (isnan(0.0) ? _2079 : max(0.0, _2079))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2088 = 1.0;
    }
    float _2092 = (_2088 * cbModelParam._m0[1u].x) + (_2077 * (1.0 - cbModelParam._m0[1u].x));
    float _2102 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1081);
    float _2103 = isnan(_2102) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2102 : min(cbModelParam._m0[25u].z, _2102));
    float _2183;
    float _2185;
    float _2187;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2150 = fma(_1327, cbModelParam._m0[13u].z, fma(_1323, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1319)) + cbModelParam._m0[13u].w;
        float _2154 = fma(_1327, cbModelParam._m0[14u].z, fma(_1323, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1319)) + cbModelParam._m0[14u].w;
        float _2158 = fma(_1327, cbModelParam._m0[15u].z, fma(_1323, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1319)) + cbModelParam._m0[15u].w;
        float _2161 = fma(_1265, cbModelParam._m0[13u].z, fma(_1264, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1263));
        float _2164 = fma(_1265, cbModelParam._m0[14u].z, fma(_1264, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1263));
        float _2167 = fma(_1265, cbModelParam._m0[15u].z, fma(_1264, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1263));
        float _2195;
        if (_2161 > 0.0)
        {
            _2195 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2195 = frontier_phi_17_15_ladder;
        }
        float _2397;
        if (_2164 > 0.0)
        {
            _2397 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2397 = frontier_phi_26_22_ladder;
        }
        float _2651;
        if (_2167 > 0.0)
        {
            _2651 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2651 = frontier_phi_38_33_ladder;
        }
        float _2653 = isnan(_2397) ? _2195 : (isnan(_2195) ? _2397 : min(_2195, _2397));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _2161) + _2150;
        float _2659 = (_2654 * _2164) + _2154;
        float _2660 = (_2654 * _2167) + _2158;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2661;
        float _2665 = _2661 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 > _2665) || ((_2659 < _2663) || ((_2658 < _2663) || (_2658 > _2665))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2660, cbModelParam._m0[9u].z, fma(_2659, cbModelParam._m0[9u].y, _2658 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2660, cbModelParam._m0[10u].z, fma(_2659, cbModelParam._m0[10u].y, _2658 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2660, cbModelParam._m0[11u].z, fma(_2659, cbModelParam._m0[11u].y, _2658 * cbModelParam._m0[11u].x))), _2103);
            frontier_phi_16_38_ladder = _2788.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2788.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2788.x * cbModelParam._m0[1u].y;
        }
        _2183 = frontier_phi_16_38_ladder_2;
        _2185 = frontier_phi_16_38_ladder_1;
        _2187 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1263, _1264, _1265), _2103);
        _2183 = _2171.x * cbModelParam._m0[1u].y;
        _2185 = _2171.y * cbModelParam._m0[1u].y;
        _2187 = _2171.z * cbModelParam._m0[1u].y;
    }
    float _2191 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1081);
    float _2192 = isnan(_2191) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2191 : min(cbModelParam._m0[25u].w, _2191));
    float _2281;
    float _2283;
    float _2285;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2245 = fma(_1327, cbModelParam._m0[21u].z, fma(_1323, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1319)) + cbModelParam._m0[21u].w;
        float _2249 = fma(_1327, cbModelParam._m0[22u].z, fma(_1323, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1319)) + cbModelParam._m0[22u].w;
        float _2253 = fma(_1327, cbModelParam._m0[23u].z, fma(_1323, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1319)) + cbModelParam._m0[23u].w;
        float _2256 = fma(_1265, cbModelParam._m0[21u].z, fma(_1264, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1263));
        float _2259 = fma(_1265, cbModelParam._m0[22u].z, fma(_1264, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1263));
        float _2262 = fma(_1265, cbModelParam._m0[23u].z, fma(_1264, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1263));
        float _2402;
        if (_2256 > 0.0)
        {
            _2402 = abs((1.0 - _2245) / _2256);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2245 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2402 = frontier_phi_28_24_ladder;
        }
        float _2678;
        if (_2259 > 0.0)
        {
            _2678 = abs((1.0 - _2249) / _2259);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2259 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2249 + 1.0) / _2259);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2678 = frontier_phi_40_35_ladder;
        }
        float _2891;
        if (_2262 > 0.0)
        {
            _2891 = abs((1.0 - _2253) / _2262);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2262 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2253 + 1.0) / _2262);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2891 = frontier_phi_49_46_ladder;
        }
        float _2893 = isnan(_2678) ? _2402 : (isnan(_2402) ? _2678 : min(_2402, _2678));
        float _2894 = isnan(_2891) ? _2893 : (isnan(_2893) ? _2891 : min(_2893, _2891));
        float _2898 = (_2894 * _2256) + _2245;
        float _2899 = (_2894 * _2259) + _2249;
        float _2900 = (_2894 * _2262) + _2253;
        float _2901 = _2894 * 9.9999997473787516355514526367188e-05;
        float _2902 = (-1.0) - _2901;
        float _2904 = _2901 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2900 > _2904) || ((_2900 < _2902) || ((_2899 > _2904) || ((_2899 < _2902) || ((_2898 < _2902) || (_2898 > _2904))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2900, cbModelParam._m0[17u].z, fma(_2899, cbModelParam._m0[17u].y, _2898 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2900, cbModelParam._m0[18u].z, fma(_2899, cbModelParam._m0[18u].y, _2898 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2900, cbModelParam._m0[19u].z, fma(_2899, cbModelParam._m0[19u].y, _2898 * cbModelParam._m0[19u].x))), _2192);
            frontier_phi_25_49_ladder = _3099.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3099.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3099.x * cbModelParam._m0[1u].z;
        }
        _2281 = frontier_phi_25_49_ladder_2;
        _2283 = frontier_phi_25_49_ladder_1;
        _2285 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2265 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1263, _1264, _1265), _2192);
        _2281 = _2265.x * cbModelParam._m0[1u].z;
        _2283 = _2265.y * cbModelParam._m0[1u].z;
        _2285 = _2265.z * cbModelParam._m0[1u].z;
    }
    float _2298 = (((_1290 * _1239) + _1291) * _1255) * ((cbModelParam._m0[1u].w * (_2281 - _2183)) + _2183);
    float _2300 = (((_1290 * _1241) + _1291) * _1255) * ((cbModelParam._m0[1u].w * (_2283 - _2185)) + _2185);
    float _2302 = (((_1290 * _1242) + _1291) * _1255) * ((cbModelParam._m0[1u].w * (_2285 - _2187)) + _2187);
    float _2305 = fma(_2302, cbSceneParam._m0[89u].z, fma(_2300, cbSceneParam._m0[89u].y, _2298 * cbSceneParam._m0[89u].x));
    float _2308 = fma(_2302, cbSceneParam._m0[90u].z, fma(_2300, cbSceneParam._m0[90u].y, _2298 * cbSceneParam._m0[90u].x));
    float _2311 = fma(_2302, cbSceneParam._m0[91u].z, fma(_2300, cbSceneParam._m0[91u].y, _2298 * cbSceneParam._m0[91u].x));
    uvec4 _2321 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2323 = _2321.x * 14u;
    uint _2324 = _2323 + 13u;
    float _2331 = _1255 + (-1.0);
    float _2336 = (cbLight._m0[_2324].x * _2331) + 1.0;
    float _2337 = (cbLight._m0[_2324].y * _2331) + 1.0;
    float _2338 = (cbLight._m0[_2324].z * _2331) + 1.0;
    float _2339 = (cbLight._m0[_2324].w * _2331) + 1.0;
    uint _2340 = _2323 + 5u;
    float _2346 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2350 = _2323 + 4u;
    float _2356 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2360 = _2323 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_1078, _1079, _1080));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_1078, _1079, _1080));
    float _4644 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4655 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2340].x * _2346) * _2381) + ((cbLight._m0[_2350].x * _2356) * _2379);
    float _2389 = ((_2346 * cbLight._m0[_2340].y) * _2381) + ((_2356 * cbLight._m0[_2350].y) * _2379);
    float _2390 = ((_2346 * cbLight._m0[_2340].z) * _2381) + ((_2356 * cbLight._m0[_2350].z) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2323 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2396)
    {
        _2407 = _2388;
        _2409 = _2389;
        _2411 = _2390;
    }
    else
    {
        uint _2415 = _2323 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2323 + 2u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4666 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2434 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2388;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2389;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2390;
    }
    bool _2414 = _2394.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2414)
    {
        _2452 = _2407;
        _2454 = _2409;
        _2456 = _2411;
    }
    else
    {
        uint _2622 = _2323 + 7u;
        float _2638 = (dot(vec3(cbLight._m0[_2323 + 3u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2639 = _2638 * _2638;
        float _4682 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2640 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2641 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2452 = (((cbLight._m0[_2622].x * 0.3183098733425140380859375) * _2640) * _2641) + _2407;
        _2454 = (((cbLight._m0[_2622].y * 0.3183098733425140380859375) * _2640) * _2641) + _2409;
        _2456 = (((cbLight._m0[_2622].z * 0.3183098733425140380859375) * _2640) * _2641) + _2411;
    }
    uint _2459 = _2323 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _1081) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2323].x + _1157;
    float _2475 = cbLight._m0[_2323].y + _1158;
    float _2476 = cbLight._m0[_2323].z + _1159;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2323].xyz));
    float _4698 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _4709 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _2488 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2489 = dot(vec3(_1078, _1079, _1080), vec3(_2481, _2482, _2483));
    float _4720 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2481, _2482, _2483));
    float _4731 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2510 = 0.959999978542327880859375 - _1236;
    float _2512 = 0.959999978542327880859375 - _1237;
    float _2513 = 0.959999978542327880859375 - _1238;
    float _2520 = 1.0 - _2473;
    float _2531 = (0.5 / (((_2488 * ((_2487 * _2520) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2520) + _2473) * _2487))) * _2487;
    float _4742 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2544 = _2323 + 9u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _1081) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2360].x + _1157;
    float _2558 = cbLight._m0[_2360].y + _1158;
    float _2559 = cbLight._m0[_2360].z + _1159;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2360].xyz));
    float _4753 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2571 = dot(vec3(_1078, _1079, _1080), vec3(_2564, _2565, _2566));
    float _4764 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2564, _2565, _2566));
    float _4775 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2556 * _2556;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
    float _2597 = 1.0 - _2556;
    float _2607 = (0.5 / (((_2488 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2597) + _2556) * _2570))) * _2570;
    float _4786 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2609 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    float _2619 = (((((_2590 * _2510) + _1239) * cbLight._m0[_2544].x) * _2609) * _2346) + (((((_2509 * _2510) + _1239) * cbLight._m0[_2459].x) * _2533) * _2356);
    float _2620 = (((((_2590 * _2512) + _1241) * cbLight._m0[_2544].y) * _2609) * _2346) + (((((_2509 * _2512) + _1241) * cbLight._m0[_2459].y) * _2533) * _2356);
    float _2621 = (((((_2590 * _2513) + _1242) * cbLight._m0[_2544].z) * _2609) * _2346) + (((((_2509 * _2513) + _1242) * cbLight._m0[_2459].z) * _2533) * _2356);
    float _2683;
    float _2685;
    float _2687;
    if (_2396)
    {
        _2683 = _2619;
        _2685 = _2620;
        _2687 = _2621;
    }
    else
    {
        uint _2689 = _2323 + 2u;
        uint _2693 = _2323 + 10u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _1081) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _1157;
        float _2710 = cbLight._m0[_2689].y + _1158;
        float _2711 = cbLight._m0[_2689].z + _1159;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2689].xyz));
        float _4797 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2723 = dot(vec3(_1078, _1079, _1080), vec3(_2716, _2717, _2718));
        float _4808 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4819 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
        float _2749 = 1.0 - _2708;
        float _2759 = (0.5 / (((_2488 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2749) + _2708) * _2722))) * _2722;
        float _4830 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2683 = (((((_2742 * _2510) + _1239) * cbLight._m0[_2693].x) * _2761) * _2762) + _2619;
        _2685 = (((((_2742 * _2512) + _1241) * cbLight._m0[_2693].y) * _2761) * _2762) + _2620;
        _2687 = (((((_2742 * _2513) + _1242) * cbLight._m0[_2693].z) * _2761) * _2762) + _2621;
    }
    float _2797;
    float _2799;
    float _2801;
    if (_2414)
    {
        _2797 = _2683;
        _2799 = _2685;
        _2801 = _2687;
    }
    else
    {
        uint _2808 = _2323 + 3u;
        uint _2812 = _2323 + 11u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _1081) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _1157;
        float _2829 = cbLight._m0[_2808].y + _1158;
        float _2830 = cbLight._m0[_2808].z + _1159;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2808].xyz));
        float _4846 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2842 = dot(vec3(_1078, _1079, _1080), vec3(_2835, _2836, _2837));
        float _4857 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4868 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2861 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
        float _2868 = 1.0 - _2827;
        float _2878 = (0.5 / (((_2488 * ((_2841 * _2868) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2868) + _2827) * _2841))) * _2841;
        float _4879 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2797 = (((((_2861 * _2510) + _1239) * cbLight._m0[_2812].x) * _2880) * _2881) + _2683;
        _2799 = (((((_2861 * _2512) + _1241) * cbLight._m0[_2812].y) * _2880) * _2881) + _2685;
        _2801 = (((((_2861 * _2513) + _1242) * cbLight._m0[_2812].z) * _2880) * _2881) + _2687;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2321.y == 0u)
    {
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2957 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2956;
        float _2958 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2956;
        float _2959 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2956;
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.x;
        uint _2983 = uint((float(_2971.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1178) / _2972))) + floor(float(uint(cbSceneParam._m0[85u].x * _1177) / _2972)));
        float _2993 = (log2(_2959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2994 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        uint _2997 = uint(isnan(14.0) ? _2994 : (isnan(_2994) ? 14.0 : min(_2994, 14.0)));
        uvec4 _3002 = texelFetch(g_lightClusterGridBuffer, int(((_2997 << 2u) + (_2983 << 6u)) >> 2u));
        uint _3003 = _3002.x;
        uint _3004 = _2971.z;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((((1u << ((_3004 >> 4u) & 15u)) + 4294967295u) & _3003) == 0u) || ((_3004 & 240u) == 0u))
        {
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
        }
        else
        {
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            uint _3263 = 0u;
            uint _3272;
            bool _3273;
            for (;;)
            {
                _3272 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                _3273 = _3272 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3273)
                {
                    frontier_phi_66_pred = _3257;
                    frontier_phi_66_pred_1 = _3262;
                    frontier_phi_66_pred_2 = _3261;
                    frontier_phi_66_pred_3 = _3260;
                    frontier_phi_66_pred_4 = _3259;
                    frontier_phi_66_pred_5 = _3258;
                }
                else
                {
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    uint _3408;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3272;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    for (;;)
                    {
                        uint _3412 = uint(findLSB(_3408)) + (_3263 << 5u);
                        uint _3409 = (_3408 + 4294967295u) & _3408;
                        uint _3414 = _3412 * 48u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3434 = (_3412 * 48u) + 4u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3453 = (_3412 * 48u) + 8u;
                        vec3 _3464 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x));
                        float _3468 = _3428.x - _2957;
                        float _3469 = _3428.y - _2958;
                        float _3470 = _3428.z - _2959;
                        float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                        float _3474 = inversesqrt(_3471);
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3478 = dot(vec3(_1196, _1199, _1202), vec3(_3475, _3476, _3477));
                        float _3483 = 1.0 - (_3471 * _3428.w);
                        float _4905 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3485 = sqrt(_3471) * _3447.w;
                        float _3488 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3478) + _3489;
                        float _3495 = _3485 * _3485;
                        float _3499 = ((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3484) / ((_3495 * 0.699999988079071044921875) + 1.0);
                        float _3503 = (-0.0) - _2957;
                        float _3504 = (-0.0) - _2958;
                        float _3505 = (-0.0) - _2959;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3520 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _1271;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3510 + _3475;
                        float _3532 = _3511 + _3476;
                        float _3533 = _3512 + _3477;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_1196, _1199, _1202), vec3(_3510, _3511, _3512));
                        float _4921 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3545 = dot(vec3(_1196, _1199, _1202), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4932 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3488 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3478) + _3554;
                        float _4943 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4954 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3552 * _3552) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125))) * _3484;
                        _3332 = (_3499 * _3447.x) + _3405;
                        _3333 = (_3499 * _3447.y) + _3406;
                        _3334 = (_3499 * _3447.z) + _3407;
                        _3329 = (_3580 * _3464.x) + _3402;
                        _3330 = (_3580 * _3464.y) + _3403;
                        _3331 = (_3580 * _3464.z) + _3404;
                        if (_3409 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3409;
                        }
                    }
                    frontier_phi_66_pred = _3329;
                    frontier_phi_66_pred_1 = _3334;
                    frontier_phi_66_pred_2 = _3333;
                    frontier_phi_66_pred_3 = _3332;
                    frontier_phi_66_pred_4 = _3331;
                    frontier_phi_66_pred_5 = _3330;
                }
                _3105 = frontier_phi_66_pred;
                _3115 = frontier_phi_66_pred_1;
                _3113 = frontier_phi_66_pred_2;
                _3111 = frontier_phi_66_pred_3;
                _3109 = frontier_phi_66_pred_4;
                _3107 = frontier_phi_66_pred_5;
                uint _3264 = _3263 + 1u;
                if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3257 = _3105;
                    _3258 = _3107;
                    _3259 = _3109;
                    _3260 = _3111;
                    _3261 = _3113;
                    _3262 = _3115;
                    _3263 = _3264;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
        }
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.z;
        uint _3121 = (_3119 >> 8u) & 15u;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        if (((4294967295u << _3121) & _3003) == 0u)
        {
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
        }
        else
        {
            float _3250 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
            float _3251 = _3250 * _2957;
            float _3252 = _3250 * _2958;
            float _3253 = _3250 * _2959;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3121 < ((_3119 >> 12u) & 15u))
            {
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3385 = _3104;
                float _3386 = _3106;
                float _3387 = _3108;
                float _3388 = _3110;
                float _3389 = _3112;
                float _3390 = _3114;
                uint _3391 = _3121;
                uint _3400;
                bool _3401;
                for (;;)
                {
                    _3400 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                    _3401 = _3400 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3401)
                    {
                        frontier_phi_77_pred = _3390;
                        frontier_phi_77_pred_1 = _3389;
                        frontier_phi_77_pred_2 = _3388;
                        frontier_phi_77_pred_3 = _3387;
                        frontier_phi_77_pred_4 = _3386;
                        frontier_phi_77_pred_5 = _3385;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        float _3609 = _3387;
                        float _3610 = _3388;
                        float _3611 = _3389;
                        float _3612 = _3390;
                        uint _3613 = _3400;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3624 = ((_3391 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3624 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3624 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2959, _3731.z, fma(_2958, _3731.y, _3731.x * _2957)) + _3731.w;
                            _3744 = !((fma(_2959, _3712.z, fma(_2958, _3712.y, _3712.x * _2957)) + _3712.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3639.x - _2957;
                                float _3772 = _3639.y - _2958;
                                float _3773 = _3639.z - _2959;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3640 * _3640));
                                float _4965 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3789 = sqrt(_3774) * _3655.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_1196, _1199, _1202))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2959, _3682.z, fma(_2958, _3682.y, _3682.x * _2957)) + _3682.w) / _3743;
                                float _3803 = (fma(_2959, _3697.z, fma(_2958, _3697.y, _3697.x * _2957)) + _3697.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _4981 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _1271;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3251;
                                float _3833 = _3779 - _3252;
                                float _3834 = _3780 - _3253;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_1196, _1199, _1202), vec3((-0.0) - _3251, (-0.0) - _3252, (-0.0) - _3253));
                                float _4992 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3846 = dot(vec3(_1196, _1199, _1202), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _5003 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_1196, _1199, _1202), vec3(_3778, _3779, _3780))) + _3855;
                                float _5014 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _5025 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3809 * _3655.y;
                                frontier_phi_83_pred_1 = _3809 * _3655.x;
                                frontier_phi_83_pred_2 = _3883 * _3667.z;
                                frontier_phi_83_pred_3 = _3883 * _3667.y;
                                frontier_phi_83_pred_4 = _3883 * _3667.x;
                                frontier_phi_83_pred_5 = _3809 * _3655.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3891 = frontier_phi_83_pred;
                            _3890 = frontier_phi_83_pred_1;
                            _3889 = frontier_phi_83_pred_2;
                            _3888 = frontier_phi_83_pred_3;
                            _3887 = frontier_phi_83_pred_4;
                            _3892 = frontier_phi_83_pred_5;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3599;
                        frontier_phi_77_pred_1 = _3598;
                        frontier_phi_77_pred_2 = _3597;
                        frontier_phi_77_pred_3 = _3596;
                        frontier_phi_77_pred_4 = _3595;
                        frontier_phi_77_pred_5 = _3594;
                    }
                    _3236 = frontier_phi_77_pred;
                    _3234 = frontier_phi_77_pred_1;
                    _3232 = frontier_phi_77_pred_2;
                    _3230 = frontier_phi_77_pred_3;
                    _3228 = frontier_phi_77_pred_4;
                    _3226 = frontier_phi_77_pred_5;
                    uint _3392 = _3391 + 1u;
                    if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3385 = _3226;
                        _3386 = _3228;
                        _3387 = _3230;
                        _3388 = _3232;
                        _3389 = _3234;
                        _3390 = _3236;
                        _3391 = _3392;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3230;
                frontier_phi_58_59_ladder_1 = _3236;
                frontier_phi_58_59_ladder_2 = _3234;
                frontier_phi_58_59_ladder_3 = _3232;
                frontier_phi_58_59_ladder_4 = _3228;
                frontier_phi_58_59_ladder_5 = _3226;
            }
            else
            {
                frontier_phi_58_59_ladder = _3108;
                frontier_phi_58_59_ladder_1 = _3114;
                frontier_phi_58_59_ladder_2 = _3112;
                frontier_phi_58_59_ladder_3 = _3110;
                frontier_phi_58_59_ladder_4 = _3106;
                frontier_phi_58_59_ladder_5 = _3104;
            }
            _3225 = frontier_phi_58_59_ladder_5;
            _3227 = frontier_phi_58_59_ladder_4;
            _3229 = frontier_phi_58_59_ladder;
            _3231 = frontier_phi_58_59_ladder_3;
            _3233 = frontier_phi_58_59_ladder_2;
            _3235 = frontier_phi_58_59_ladder_1;
        }
        float _3240 = isnan(1.0) ? _1255 : (isnan(_1255) ? 1.0 : min(_1255, 1.0));
        _3016 = (_3240 * _3231) + _2452;
        _3018 = (_3240 * _3233) + _2454;
        _3020 = (_3240 * _3235) + _2456;
        _3022 = ((_3225 * _1239) * _3240) + _2797;
        _3024 = ((_3227 * _1241) * _3240) + _2799;
        _3026 = ((_3229 * _1242) * _3240) + _2801;
    }
    else
    {
        _3016 = _2452;
        _3018 = _2454;
        _3020 = _2456;
        _3022 = _2797;
        _3024 = _2799;
        _3026 = _2801;
    }
    float _5041 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _5052 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _5063 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _3043 = ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3016 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1255))) + ((_3022 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2092)) * cbPerFrame._m0[3u].x);
    float _3044 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3018 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1255))) + ((_3024 + ((isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0))) * _2092)) * cbPerFrame._m0[3u].x);
    float _3045 = ((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3020 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1255))) + ((_3026 + ((isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0))) * _2092)) * cbPerFrame._m0[3u].x);
    uint _3046 = _275 + 6u;
    float _3054 = _1177 / cbSceneParam._m0[86u].x;
    float _3055 = _1178 / cbSceneParam._m0[86u].y;
    vec4 _3069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, (log2((isnan(cbSceneParam._m0[77u].w) ? _1100 : (isnan(_1100) ? cbSceneParam._m0[77u].w : min(_1100, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3071 = _3069.x;
    float _3072 = _3069.y;
    float _3073 = _3069.z;
    float _3074 = _3069.w;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_1100 > cbSceneParam._m0[78u].w)
    {
        float _3129 = isnan(_1100) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1100 : min(cbSceneParam._m0[80u].w, _1100));
        float _3130 = _3129 / _1100;
        float _3141 = _3130 * _1150;
        float _3142 = _1151 * _3130;
        float _3143 = (-0.0) - _3142;
        float _3145 = _3130 * _1152;
        float _3147 = (cbSceneParam._m0[77u].w * _3143) / _3129;
        float _3148 = _3147 + cbSceneParam._m0[79u].w;
        float _3149 = cbSceneParam._m0[79u].w - _3142;
        float _3155 = sqrt(((_3141 * _3141) + (_3142 * _3142)) + (_3145 * _3145));
        float _3158 = (1.0 - (cbSceneParam._m0[77u].w / _3129)) * _3155;
        float _3163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3342;
        if (abs((_3143 - _3147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3342 = ((((_3148 > 0.0) ? exp2(_3163 * _3148) : (2.0 - exp2(_3165 * _3148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3158;
        }
        else
        {
            float _3286 = 1.0 / cbSceneParam._m0[80u].x;
            float _3287 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : max(_3148, _3149));
            float _3288 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : min(_3148, _3149));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            _3342 = ((abs(_3155 / _3143) * cbSceneParam._m0[80u].y) * ((((_3297 - _3298) * 2.0) - ((exp2(_3163 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0)))) - exp2(_3163 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))))) * _3286)) - ((exp2(_3165 * _3297) - exp2(_3165 * _3298)) * _3286))) + (_3158 * cbSceneParam._m0[80u].z);
        }
        vec4 _3344 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, 1.0), 0.0);
        float _3353 = exp2((_3342 * (-1.44269502162933349609375)) * (1.0 - _3344.w));
        float _3354 = log2(_3353);
        float _3370 = log2(_3074);
        _3167 = (exp2(_3370 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].x)) * _3344.x) / cbSceneParam._m0[78u].x)) + _3071;
        _3169 = (exp2(_3370 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].y)) * _3344.y) / cbSceneParam._m0[78u].y)) + _3072;
        _3171 = (exp2(_3370 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].z)) * _3344.z) / cbSceneParam._m0[78u].z)) + _3073;
        _3173 = _3353 * _3074;
    }
    else
    {
        _3167 = _3071;
        _3169 = _3072;
        _3171 = _3073;
        _3173 = _3074;
    }
    bool _3380;
    vec4 _3183;
    vec4 _3205;
    float _3207;
    float _3211;
    float _3212;
    float _3213;
    float _3214;
    bool _3224;
    for (;;)
    {
        _3183 = cbMatDynParam._m0[0u];
        float _3185 = roundEven(_3183.y);
        bool _3186 = _3185 == 3.0;
        float _3187 = log2(_3173);
        float _3194 = exp2(_3187 * cbSceneParam._m0[78u].x) * _3043;
        float _3195 = exp2(_3187 * cbSceneParam._m0[78u].y) * _3044;
        float _3196 = exp2(_3187 * cbSceneParam._m0[78u].z) * _3045;
        float _3203 = _1166 + (-0.5);
        _3205 = cbMtdParam._m0[1u];
        _3207 = _3205.y * _3203;
        float _3210 = (_3185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3211 = _3210 * (_3186 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3167)));
        _3212 = _3210 * (_3186 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3169)));
        _3213 = _3210 * (_3186 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3171)));
        _3214 = _3203 * 0.999000012874603271484375;
        _3224 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3224)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3214) < 0.5)
            {
                _3380 = true;
                break;
            }
        }
        uint _3321 = _1215 + uint(_3183.w);
        if ((cbInstanceData._m0[_3321].w < 1.0) && ((cbInstanceData._m0[_3321].w + _3214) < 0.5))
        {
            _3380 = true;
            break;
        }
        if ((_3207 + 1.0) < _3205.x)
        {
            _3380 = true;
            break;
        }
        _3380 = false;
        break;
    }
    float _3585;
    if (_3380)
    {
        discard_state = true;
        _3585 = 0.0;
    }
    else
    {
        _3585 = cbInstanceData._m0[_3046].w;
    }
    SV_Target.x = _3211;
    SV_Target.y = _3212;
    SV_Target.z = _3213;
    SV_Target.w = _3585;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3046].w;
    discard_exit();
}


