#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1292;
float _3957;
float _3958;
float _3959;
float _3960;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3969 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _433 = (_426 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _434 = (_426 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _435 = (_426 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3980 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _512 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433);
    float _515 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434);
    float _518 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435);
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _426) + _550;
    float _560 = ((_531.y - _551) * _426) + _551;
    float _561 = ((_531.z - _552) * _426) + _552;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _499) + _561;
    float _589 = ((((_573.x - _559) * _499) + _559) * 2.0) + (-1.0);
    float _591 = ((((_573.y - _560) * _499) + _560) * 2.0) + (-1.0);
    float _592 = dot(vec2(_589, _591), vec2(_589, _591));
    float _3991 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _623 = (((_611.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _624 = (((_611.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _652 = _650.x;
    float _669 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _652) * _426) + _652;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w));
    float _687 = ((_682.x - _669) * _499) + _669;
    float _691 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _687) * cbMtdParam._m0[19u].z) + _687;
    float _695 = (cbMtdParam._m0[19u].w * (_611.z - _586)) + _586;
    float _697 = cbMtdParam._m0[22u].x + _611.w;
    float _700 = fma(_597, _235 * NORMAL.x, fma(_624, _242 * TANGENT.x, (_228 * _220) * _623));
    float _703 = fma(_597, _235 * NORMAL.y, fma(_624, _242 * TANGENT.y, (_228 * _221) * _623));
    float _706 = fma(_597, _235 * NORMAL.z, fma(_624, _242 * TANGENT.z, (_228 * _222) * _623));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _4002 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _714 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4024 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4035 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4046 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4057 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _719 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _784 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _774);
    float _785 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _774);
    float _786 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _774);
    float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
    float _791 = _784 * _790;
    float _792 = _785 * _790;
    float _793 = _786 * _790;
    vec4 _798 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _800 = _798.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_784 * _784) + (_785 * _785)) + (_786 * _786));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _4068 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _4079 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) - _979)) + _979) < ((_800 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _811 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _812 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _830 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _833 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _836 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _849 = _248 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_850].z;
    float _4090 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _862 = 1.0 - _719;
    float _863 = _859 * _862;
    float _864 = _860 * _862;
    float _865 = _861 * _862;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _719;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _719;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _719;
    float _873 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _811, cbSceneParam._m0[86u].y * _812));
    float _889 = ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * TEXCOORD_5.w) * _885.x;
    float _890 = dot(vec3(_711, _712, _713), vec3(_791, _792, _793));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _711) - _791;
    float _898 = (_893 * _712) - _792;
    float _899 = (_893 * _713) - _793;
    float _903 = abs(dot(vec3(_791, _792, _793), vec3(_711, _712, _713)));
    float _4123 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_714);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _924 = (1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _925 = _918 * _905;
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1291;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1016 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1020 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1024 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1049 = _953 + _711;
        float _1050 = _957 + _712;
        float _1051 = _961 + _713;
        float _1061 = fma(_1051, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049)) - _1016;
        float _1062 = fma(_1051, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049)) - _1020;
        float _1063 = fma(_1051, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049)) - _1024;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1016 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1020 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[34u].z) + ((((((_1024 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1119 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1085.x + (-0.5));
        float _1121 = _1119 * (_1085.y + (-0.5));
        float _1122 = _1119 * (_1085.z + (-0.5));
        float _1129 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1092.x + (-0.5));
        float _1131 = _1129 * (_1092.y + (-0.5));
        float _1132 = _1129 * (_1092.z + (-0.5));
        float _1139 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1099.x + (-0.5));
        float _1141 = _1139 * (_1099.y + (-0.5));
        float _1142 = _1139 * (_1099.z + (-0.5));
        float _1149 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1106.x + (-0.5));
        float _1151 = _1149 * (_1106.y + (-0.5));
        float _1152 = _1149 * (_1106.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1173 = (dot(vec3(_711, _712, _713), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1183 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4171 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1185 + 1.0))) + _1190) * _1153;
        float _1200 = _1121 * 0.5;
        float _1201 = _1131 * 0.5;
        float _1202 = _1141 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_711, _712, _713), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4204 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1227 + 1.0))) + _1232) * _1154;
        float _1242 = _1122 * 0.5;
        float _1243 = _1132 * 0.5;
        float _1244 = _1142 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_711, _712, _713), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4237 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1269 + 1.0))) + _1274) * _1155;
        _1291 = _1122;
        _1293 = _1121;
        _1294 = _1120;
        _1295 = _1132;
        _1296 = _1131;
        _1297 = _1130;
        _1298 = _1142;
        _1299 = _1141;
        _1300 = _1140;
        _1301 = _1155;
        _1302 = _1154;
        _1303 = _1153;
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _1292;
        _1293 = _1292;
        _1294 = _1292;
        _1295 = _1292;
        _1296 = _1292;
        _1297 = _1292;
        _1298 = _1292;
        _1299 = _1292;
        _1300 = _1292;
        _1301 = _1292;
        _1302 = _1292;
        _1303 = _1292;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1337 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1341 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1364 = _953 + _711;
        float _1365 = _957 + _712;
        float _1366 = _961 + _713;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_711, _712, _713), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4300 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_711, _712, _713), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4333 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_711, _712, _713), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4366 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1292;
        _1603 = _1292;
        _1604 = _1292;
        _1605 = _1292;
        _1606 = _1292;
        _1607 = _1292;
        _1608 = _1292;
        _1609 = _1292;
        _1610 = _1292;
        _1611 = _1292;
        _1612 = _1292;
        _1613 = _1292;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1304)) + _1304;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1305)) + _1305;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1306)) + _1306;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _897 * 0.5;
    float _1671 = _898 * 0.5;
    float _1672 = _899 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1295, _1298, _1301));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1802 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1805 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1833 = frontier_phi_17_15_ladder;
        }
        float _2005;
        if (_1802 > 0.0)
        {
            _2005 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2005 = frontier_phi_26_22_ladder;
        }
        float _2300;
        if (_1805 > 0.0)
        {
            _2300 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2300 = frontier_phi_38_33_ladder;
        }
        float _2302 = isnan(_2005) ? _1833 : (isnan(_1833) ? _2005 : min(_1833, _2005));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1799) + _1788;
        float _2308 = (_2303 * _1802) + _1792;
        float _2309 = (_2303 * _1805) + _1796;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_16_38_ladder_2;
        _1823 = frontier_phi_16_38_ladder_1;
        _1825 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1739);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1898 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1901 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2010;
        if (_1895 > 0.0)
        {
            _2010 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2327;
        if (_1898 > 0.0)
        {
            _2327 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2327 = frontier_phi_40_35_ladder;
        }
        float _2665;
        if (_1901 > 0.0)
        {
            _2665 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2665 = frontier_phi_50_47_ladder;
        }
        float _2667 = isnan(_2327) ? _2010 : (isnan(_2010) ? _2327 : min(_2010, _2327));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _1895) + _1884;
        float _2673 = (_2668 * _1898) + _1888;
        float _2674 = (_2668 * _1901) + _1892;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_25_50_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_25_50_ladder_2;
        _1922 = frontier_phi_25_50_ladder_1;
        _1924 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1830);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1937 = (((_924 * _873) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1939 = (((_924 * _875) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1941 = (((_924 * _876) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1997 = _1984 / _1996;
    float _1998 = _1988 / _1996;
    float _1999 = _1992 / _1996;
    float _2146;
    float _2147;
    float _2148;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2026 = ((uint(_1999 > cbSceneParam._m0[59u].y) + uint(_1999 > cbSceneParam._m0[59u].x)) + uint(_1999 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2027 = _2026 + 43u;
        uint _2035 = _2026 + 44u;
        uint _2043 = _2026 + 45u;
        uint _2051 = _2026 + 46u;
        float _2062 = fma(_1996, cbSceneParam._m0[_2027].w, fma(_1992, cbSceneParam._m0[_2027].z, fma(_1988, cbSceneParam._m0[_2027].y, _1984 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1996, cbSceneParam._m0[_2035].w, fma(_1992, cbSceneParam._m0[_2035].z, fma(_1988, cbSceneParam._m0[_2035].y, _1984 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_1996, cbSceneParam._m0[_2051].w, fma(_1992, cbSceneParam._m0[_2051].z, fma(_1988, cbSceneParam._m0[_2051].y, _1984 * cbSceneParam._m0[_2051].x)));
        float _2079 = cbSceneParam._m0[33u].z * _2074;
        float _2081 = cbSceneParam._m0[33u].w * _2074;
        float _2084 = fma(_1996, cbSceneParam._m0[_2043].w, fma(_1992, cbSceneParam._m0[_2043].z, fma(_1988, cbSceneParam._m0[_2043].y, _1984 * cbSceneParam._m0[_2043].x))) / _2074;
        float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
        float _4492 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2139 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2062) / _2074, (_2081 + _2066) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2062) / _2074, (_2066 - _2079) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2079) / _2074, (_2066 - _2081) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2081) / _2074, (_2079 + _2066) / _2074), _2084), 0.0)).x), vec4(0.25)));
        _2146 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
        _2147 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
        _2148 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2146 = 1.0;
        _2147 = 1.0;
        _2148 = 1.0;
    }
    float _2212;
    float _2214;
    float _2216;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2200 = fma(_1996, cbSceneParam._m0[63u].w, fma(_1992, cbSceneParam._m0[63u].z, fma(_1988, cbSceneParam._m0[63u].y, _1984 * cbSceneParam._m0[63u].x)));
        float _2201 = fma(_1996, cbSceneParam._m0[60u].w, fma(_1992, cbSceneParam._m0[60u].z, fma(_1988, cbSceneParam._m0[60u].y, _1984 * cbSceneParam._m0[60u].x))) / _2200;
        float _2202 = fma(_1996, cbSceneParam._m0[61u].w, fma(_1992, cbSceneParam._m0[61u].z, fma(_1988, cbSceneParam._m0[61u].y, _1984 * cbSceneParam._m0[61u].x))) / _2200;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2201 >= cbSceneParam._m0[64u].x) && (_2202 >= cbSceneParam._m0[64u].y)) && (_2201 <= cbSceneParam._m0[64u].z)) && (_2202 <= cbSceneParam._m0[64u].w))
        {
            float _2340 = fma(_1996, cbSceneParam._m0[62u].w, fma(_1992, cbSceneParam._m0[62u].z, fma(_1988, cbSceneParam._m0[62u].y, _1984 * cbSceneParam._m0[62u].x))) / _2200;
            float _2344 = isnan(cbSceneParam._m0[41u].w) ? _2340 : (isnan(_2340) ? cbSceneParam._m0[41u].w : max(_2340, cbSceneParam._m0[41u].w));
            float _2387 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
            float _4508 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
            float _2394 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2201, cbSceneParam._m0[33u].w + _2202), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2201, _2202 - cbSceneParam._m0[33u].z), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].z, _2202 - cbSceneParam._m0[33u].w), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2202), _2344), 0.0)).x), vec4(0.25)));
            float _2398 = 1.0 - (_2394 * cbSceneParam._m0[34u].x);
            float _2399 = 1.0 - (_2394 * cbSceneParam._m0[34u].y);
            float _2400 = 1.0 - (_2394 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
            frontier_phi_37_36_ladder_1 = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
            frontier_phi_37_36_ladder_2 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
        }
        else
        {
            frontier_phi_37_36_ladder = _2148;
            frontier_phi_37_36_ladder_1 = _2147;
            frontier_phi_37_36_ladder_2 = _2146;
        }
        _2212 = frontier_phi_37_36_ladder_2;
        _2214 = frontier_phi_37_36_ladder_1;
        _2216 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2212 = _2146;
        _2214 = _2147;
        _2216 = _2148;
    }
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _889 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2259 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2263 = _2223 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_711, _712, _713));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_711, _712, _713));
    float _4544 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4555 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2240].x * _2246) * _2284) + (((cbLight._m0[_2250].x * _2212) * _2259) * _2282);
    float _2292 = ((_2246 * cbLight._m0[_2240].y) * _2284) + (((cbLight._m0[_2250].y * _2214) * _2259) * _2282);
    float _2293 = ((_2246 * cbLight._m0[_2240].z) * _2284) + (((cbLight._m0[_2250].z * _2216) * _2259) * _2282);
    uvec4 _2297 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2299 = _2297.x == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2299)
    {
        _2401 = _2291;
        _2403 = _2292;
        _2405 = _2293;
    }
    else
    {
        uint _2409 = _2223 + 6u;
        float _2425 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4566 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2428 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2401 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2291;
        _2403 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2292;
        _2405 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2293;
    }
    bool _2408 = _2297.y == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2408)
    {
        _2463 = _2401;
        _2465 = _2403;
        _2467 = _2405;
    }
    else
    {
        uint _2636 = _2223 + 7u;
        float _2652 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4582 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2655 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2463 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2401;
        _2465 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2403;
        _2467 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2405;
    }
    uint _2470 = _2223 + 8u;
    float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _714) * 0.949999988079071044921875);
    float _2484 = _2483 * _2483;
    float _2485 = cbLight._m0[_2223].x + _791;
    float _2486 = cbLight._m0[_2223].y + _792;
    float _2487 = cbLight._m0[_2223].z + _793;
    float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
    float _2492 = _2491 * _2485;
    float _2493 = _2491 * _2486;
    float _2494 = _2491 * _2487;
    float _2495 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2223].xyz));
    float _4598 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _4609 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2499 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2500 = dot(vec3(_711, _712, _713), vec3(_2492, _2493, _2494));
    float _4620 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2492, _2493, _2494));
    float _4631 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2484 * _2484;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2521 = 0.959999978542327880859375 - _870;
    float _2523 = 0.959999978542327880859375 - _871;
    float _2524 = 0.959999978542327880859375 - _872;
    float _2531 = 1.0 - _2484;
    float _2542 = (0.5 / (((_2499 * ((_2498 * _2531) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2531) + _2484) * _2498))) * _2498;
    float _4642 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    uint _2558 = _2223 + 9u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _714) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2263].x + _791;
    float _2572 = cbLight._m0[_2263].y + _792;
    float _2573 = cbLight._m0[_2263].z + _793;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2263].xyz));
    float _4653 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2585 = dot(vec3(_711, _712, _713), vec3(_2578, _2579, _2580));
    float _4664 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2589 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2578, _2579, _2580));
    float _4675 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2593 = _2570 * _2570;
    float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
    float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2611 = 1.0 - _2570;
    float _2621 = (0.5 / (((_2499 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2611) + _2570) * _2584))) * _2584;
    float _4686 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
    float _2633 = (((((_2604 * _2521) + _873) * cbLight._m0[_2558].x) * _2623) * _2246) + ((((cbLight._m0[_2470].x * _2212) * ((_2520 * _2521) + _873)) * _2544) * _2259);
    float _2634 = (((((_2604 * _2523) + _875) * cbLight._m0[_2558].y) * _2623) * _2246) + ((((cbLight._m0[_2470].y * _2214) * ((_2520 * _2523) + _875)) * _2544) * _2259);
    float _2635 = (((((_2604 * _2524) + _876) * cbLight._m0[_2558].z) * _2623) * _2246) + ((((cbLight._m0[_2470].z * _2216) * ((_2520 * _2524) + _876)) * _2544) * _2259);
    float _2691;
    float _2693;
    float _2695;
    if (_2299)
    {
        _2691 = _2633;
        _2693 = _2634;
        _2695 = _2635;
    }
    else
    {
        uint _2697 = _2223 + 2u;
        uint _2701 = _2223 + 10u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _714) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _791;
        float _2718 = cbLight._m0[_2697].y + _792;
        float _2719 = cbLight._m0[_2697].z + _793;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2697].xyz));
        float _4697 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2731 = dot(vec3(_711, _712, _713), vec3(_2724, _2725, _2726));
        float _4708 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4719 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2499 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2757) + _2716) * _2730))) * _2730;
        float _4730 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2691 = (((((_2750 * _2521) + _873) * cbLight._m0[_2701].x) * _2769) * _2770) + _2633;
        _2693 = (((((_2750 * _2523) + _875) * cbLight._m0[_2701].y) * _2769) * _2770) + _2634;
        _2695 = (((((_2750 * _2524) + _876) * cbLight._m0[_2701].z) * _2769) * _2770) + _2635;
    }
    float _2801;
    float _2803;
    float _2805;
    if (_2408)
    {
        _2801 = _2691;
        _2803 = _2693;
        _2805 = _2695;
    }
    else
    {
        uint _2812 = _2223 + 3u;
        uint _2816 = _2223 + 11u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _714) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _791;
        float _2833 = cbLight._m0[_2812].y + _792;
        float _2834 = cbLight._m0[_2812].z + _793;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2812].xyz));
        float _4746 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2846 = dot(vec3(_711, _712, _713), vec3(_2839, _2840, _2841));
        float _4757 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4768 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2872 = 1.0 - _2831;
        float _2882 = (0.5 / (((_2499 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2872) + _2831) * _2845))) * _2845;
        float _4779 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2884 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2885 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2801 = (((((_2865 * _2521) + _873) * cbLight._m0[_2816].x) * _2884) * _2885) + _2691;
        _2803 = (((((_2865 * _2523) + _875) * cbLight._m0[_2816].y) * _2884) * _2885) + _2693;
        _2805 = (((((_2865 * _2524) + _876) * cbLight._m0[_2816].z) * _2884) * _2885) + _2695;
    }
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    if (_2221.y == 0u)
    {
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.x;
        uint _2918 = uint((float(_2906.y) * floor(float(uint(cbSceneParam._m0[85u].y * _812) / _2907))) + floor(float(uint(cbSceneParam._m0[85u].x * _811) / _2907)));
        float _2928 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2929 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        uint _2932 = uint(isnan(14.0) ? _2929 : (isnan(_2929) ? 14.0 : min(_2929, 14.0)));
        uvec4 _2937 = texelFetch(g_lightClusterGridBuffer, int(((_2932 << 2u) + (_2918 << 6u)) >> 2u));
        uint _2938 = _2937.x;
        uint _2939 = _2906.z;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((((1u << ((_2939 >> 4u) & 15u)) + 4294967295u) & _2938) == 0u) || ((_2939 & 240u) == 0u))
        {
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
        }
        else
        {
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            uint _3177 = 0u;
            uint _3186;
            bool _3187;
            for (;;)
            {
                _3186 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                _3187 = _3186 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3187)
                {
                    frontier_phi_71_pred = _3176;
                    frontier_phi_71_pred_1 = _3175;
                    frontier_phi_71_pred_2 = _3174;
                    frontier_phi_71_pred_3 = _3173;
                    frontier_phi_71_pred_4 = _3172;
                    frontier_phi_71_pred_5 = _3171;
                }
                else
                {
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    uint _3322;
                    _3316 = _3171;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3186;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    for (;;)
                    {
                        uint _3326 = uint(findLSB(_3322)) + (_3177 << 5u);
                        uint _3323 = (_3322 + 4294967295u) & _3322;
                        uint _3328 = _3326 * 48u;
                        vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3348 = (_3326 * 48u) + 4u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3367 = (_3326 * 48u) + 8u;
                        vec3 _3378 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x));
                        float _3382 = _3342.x - _1997;
                        float _3383 = _3342.y - _1998;
                        float _3384 = _3342.z - _1999;
                        float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                        float _3388 = inversesqrt(_3385);
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3392 = dot(vec3(_830, _833, _836), vec3(_3389, _3390, _3391));
                        float _3397 = 1.0 - (_3385 * _3342.w);
                        float _4805 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3399 = sqrt(_3385) * _3361.w;
                        float _3402 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                        float _3403 = _3402 * _3402;
                        float _3406 = ((1.0 - _3403) * _3392) + _3403;
                        float _3409 = _3399 * _3399;
                        float _3413 = ((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3398) / ((_3409 * 0.699999988079071044921875) + 1.0);
                        float _3417 = (-0.0) - _1997;
                        float _3418 = (-0.0) - _1998;
                        float _3419 = (-0.0) - _1999;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3424 = _3423 * _3417;
                        float _3425 = _3423 * _3418;
                        float _3426 = _3423 * _3419;
                        float _3433 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                        float _3434 = 1.0 - _905;
                        float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                        float _3442 = _3441 * _3441;
                        float _3443 = _3442 * _3442;
                        float _3444 = _3424 + _3389;
                        float _3445 = _3425 + _3390;
                        float _3446 = _3426 + _3391;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3454 = dot(vec3(_830, _833, _836), vec3(_3424, _3425, _3426));
                        float _4821 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3457 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3458 = dot(vec3(_830, _833, _836), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                        float _4832 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3461 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                        float _3466 = _3402 * _3442;
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3392) + _3467;
                        float _4843 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3471 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3472 = 1.0 - _3442;
                        float _3482 = (0.5 / (((_3471 * ((_3457 * _3472) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3442) * _3457))) * _3471;
                        float _4854 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3493 = (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3465 * _3465) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125))) * _3398;
                        _3246 = (_3413 * _3361.x) + _3319;
                        _3247 = (_3413 * _3361.y) + _3320;
                        _3248 = (_3413 * _3361.z) + _3321;
                        _3243 = (_3493 * _3378.x) + _3316;
                        _3244 = (_3493 * _3378.y) + _3317;
                        _3245 = (_3493 * _3378.z) + _3318;
                        if (_3323 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3316 = _3243;
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3323;
                        }
                    }
                    frontier_phi_71_pred = _3248;
                    frontier_phi_71_pred_1 = _3247;
                    frontier_phi_71_pred_2 = _3246;
                    frontier_phi_71_pred_3 = _3245;
                    frontier_phi_71_pred_4 = _3244;
                    frontier_phi_71_pred_5 = _3243;
                }
                _3029 = frontier_phi_71_pred;
                _3027 = frontier_phi_71_pred_1;
                _3025 = frontier_phi_71_pred_2;
                _3023 = frontier_phi_71_pred_3;
                _3021 = frontier_phi_71_pred_4;
                _3019 = frontier_phi_71_pred_5;
                uint _3178 = _3177 + 1u;
                if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3171 = _3019;
                    _3172 = _3021;
                    _3173 = _3023;
                    _3174 = _3025;
                    _3175 = _3027;
                    _3176 = _3029;
                    _3177 = _3178;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
        }
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.z;
        uint _3035 = (_3033 >> 8u) & 15u;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((4294967295u << _3035) & _2938) == 0u)
        {
            _3139 = _3018;
            _3141 = _3020;
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
        }
        else
        {
            float _3164 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float _3165 = _3164 * _1997;
            float _3166 = _3164 * _1998;
            float _3167 = _3164 * _1999;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3035 < ((_3033 >> 12u) & 15u))
            {
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3299 = _3018;
                float _3300 = _3020;
                float _3301 = _3022;
                float _3302 = _3024;
                float _3303 = _3026;
                float _3304 = _3028;
                uint _3305 = _3035;
                uint _3314;
                bool _3315;
                for (;;)
                {
                    _3314 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3305 << 2u)) >> 2u)).x;
                    _3315 = _3314 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3315)
                    {
                        frontier_phi_82_pred = _3304;
                        frontier_phi_82_pred_1 = _3303;
                        frontier_phi_82_pred_2 = _3302;
                        frontier_phi_82_pred_3 = _3301;
                        frontier_phi_82_pred_4 = _3300;
                        frontier_phi_82_pred_5 = _3299;
                    }
                    else
                    {
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3520 = _3299;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        uint _3526 = _3314;
                        uint _3527;
                        vec4 _3552;
                        float _3553;
                        vec4 _3568;
                        vec3 _3580;
                        vec4 _3595;
                        vec4 _3610;
                        float _3657;
                        bool _3658;
                        for (;;)
                        {
                            uint _3537 = ((_3305 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3526));
                            _3527 = (_3526 + 4294967295u) & _3526;
                            uint _3539 = _3537 * 40u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3553 = _3552.w;
                            uint _3555 = (_3537 * 40u) + 4u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3537 * 40u) + 8u;
                            _3580 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x));
                            uint _3582 = (_3537 * 40u) + 16u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3537 * 40u) + 20u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3613 = (_3537 * 40u) + 24u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3632 = (_3537 * 40u) + 28u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3657 = fma(_1999, _3645.z, fma(_1998, _3645.y, _3645.x * _1997)) + _3645.w;
                            _3658 = !((fma(_1999, _3626.z, fma(_1998, _3626.y, _3626.x * _1997)) + _3626.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3658)
                            {
                                float _3685 = _3552.x - _1997;
                                float _3686 = _3552.y - _1998;
                                float _3687 = _3552.z - _1999;
                                float _3688 = dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687));
                                float _3691 = inversesqrt(_3688);
                                float _3692 = _3691 * _3685;
                                float _3693 = _3691 * _3686;
                                float _3694 = _3691 * _3687;
                                float _3698 = 1.0 - (_3688 / (_3553 * _3553));
                                float _4865 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3703 = sqrt(_3688) * _3568.w;
                                float _3705 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                                float _3706 = _3705 * _3705;
                                float _3709 = ((1.0 - _3706) * dot(vec3(_3692, _3693, _3694), vec3(_830, _833, _836))) + _3706;
                                float _3712 = _3703 * _3703;
                                float _3716 = (fma(_1999, _3595.z, fma(_1998, _3595.y, _3595.x * _1997)) + _3595.w) / _3657;
                                float _3717 = (fma(_1999, _3610.z, fma(_1998, _3610.y, _3610.x * _1997)) + _3610.w) / _3657;
                                float _3721 = 1.0 - dot(vec2(_3716, _3717), vec2(_3716, _3717));
                                float _4881 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3723 = _3722 * (((isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0))) * _3699) / ((_3712 * 0.699999988079071044921875) + 1.0));
                                float _3735 = exp2(log2(1.0 / ((_3712 * 3.5) + 5.0)) * 0.25);
                                float _3736 = 1.0 - _905;
                                float _3743 = sqrt(1.0 - ((1.0 - (_3736 * _3736)) * (1.0 - (_3735 * _3735))));
                                float _3744 = _3743 * _3743;
                                float _3745 = _3744 * _3744;
                                float _3746 = _3692 - _3165;
                                float _3747 = _3693 - _3166;
                                float _3748 = _3694 - _3167;
                                float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                                float _3756 = dot(vec3(_830, _833, _836), vec3((-0.0) - _3165, (-0.0) - _3166, (-0.0) - _3167));
                                float _4892 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3760 = dot(vec3(_830, _833, _836), vec3(_3752 * _3746, _3752 * _3747, _3752 * _3748));
                                float _4903 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3767 = ((_3763 * _3763) * (_3745 + (-1.0))) + 1.0;
                                float _3768 = _3705 * _3744;
                                float _3769 = _3768 * _3768;
                                float _3775 = ((1.0 - _3769) * dot(vec3(_830, _833, _836), vec3(_3692, _3693, _3694))) + _3769;
                                float _4914 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3777 = 1.0 - _3744;
                                float _3787 = (0.5 / (((_3776 * ((_3759 * _3777) + _3744)) + 9.9999999392252902907785028219223e-09) + (((_3776 * _3777) + _3744) * _3759))) * _3776;
                                float _4925 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3797 = (_3722 * _3699) * (((_3745 * 3.1415927410125732421875) * (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) / ((_3767 * _3767) * ((_3712 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3723 * _3568.z;
                                frontier_phi_88_pred_1 = _3723 * _3568.y;
                                frontier_phi_88_pred_2 = _3723 * _3568.x;
                                frontier_phi_88_pred_3 = _3797 * _3580.z;
                                frontier_phi_88_pred_4 = _3797 * _3580.y;
                                frontier_phi_88_pred_5 = _3797 * _3580.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_88_pred;
                            _3805 = frontier_phi_88_pred_1;
                            _3804 = frontier_phi_88_pred_2;
                            _3803 = frontier_phi_88_pred_3;
                            _3802 = frontier_phi_88_pred_4;
                            _3801 = frontier_phi_88_pred_5;
                            _3510 = _3804 + _3523;
                            _3511 = _3805 + _3524;
                            _3512 = _3806 + _3525;
                            _3507 = _3801 + _3520;
                            _3508 = _3802 + _3521;
                            _3509 = _3803 + _3522;
                            if (_3527 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3527;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3512;
                        frontier_phi_82_pred_1 = _3511;
                        frontier_phi_82_pred_2 = _3510;
                        frontier_phi_82_pred_3 = _3509;
                        frontier_phi_82_pred_4 = _3508;
                        frontier_phi_82_pred_5 = _3507;
                    }
                    _3150 = frontier_phi_82_pred;
                    _3148 = frontier_phi_82_pred_1;
                    _3146 = frontier_phi_82_pred_2;
                    _3144 = frontier_phi_82_pred_3;
                    _3142 = frontier_phi_82_pred_4;
                    _3140 = frontier_phi_82_pred_5;
                    uint _3306 = _3305 + 1u;
                    if (_3306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3299 = _3140;
                        _3300 = _3142;
                        _3301 = _3144;
                        _3302 = _3146;
                        _3303 = _3148;
                        _3304 = _3150;
                        _3305 = _3306;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3146;
                frontier_phi_63_64_ladder_1 = _3150;
                frontier_phi_63_64_ladder_2 = _3148;
                frontier_phi_63_64_ladder_3 = _3144;
                frontier_phi_63_64_ladder_4 = _3142;
                frontier_phi_63_64_ladder_5 = _3140;
            }
            else
            {
                frontier_phi_63_64_ladder = _3024;
                frontier_phi_63_64_ladder_1 = _3028;
                frontier_phi_63_64_ladder_2 = _3026;
                frontier_phi_63_64_ladder_3 = _3022;
                frontier_phi_63_64_ladder_4 = _3020;
                frontier_phi_63_64_ladder_5 = _3018;
            }
            _3139 = frontier_phi_63_64_ladder_5;
            _3141 = frontier_phi_63_64_ladder_4;
            _3143 = frontier_phi_63_64_ladder_3;
            _3145 = frontier_phi_63_64_ladder;
            _3147 = frontier_phi_63_64_ladder_2;
            _3149 = frontier_phi_63_64_ladder_1;
        }
        float _3154 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2951 = (_3154 * _3145) + _2463;
        _2953 = (_3154 * _3147) + _2465;
        _2955 = (_3154 * _3149) + _2467;
        _2957 = ((_3139 * _873) * _3154) + _2801;
        _2959 = ((_3141 * _875) * _3154) + _2803;
        _2961 = ((_3143 * _876) * _3154) + _2805;
    }
    else
    {
        _2951 = _2463;
        _2953 = _2465;
        _2955 = _2467;
        _2957 = _2801;
        _2959 = _2803;
        _2961 = _2805;
    }
    float _4941 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4952 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4963 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2978 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2951 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _889))) + ((_2957 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2979 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2953 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _889))) + ((_2959 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2980 = ((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2955 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _889))) + ((_2961 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2981 = _248 + 6u;
    float _2989 = _811 / cbSceneParam._m0[86u].x;
    float _2990 = _812 / cbSceneParam._m0[86u].y;
    vec4 _3004 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3006 = _3004.x;
    float _3007 = _3004.y;
    float _3008 = _3004.z;
    float _3009 = _3004.w;
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _3043 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _3044 = _3043 / _733;
        float _3055 = _3044 * _784;
        float _3056 = _785 * _3044;
        float _3057 = (-0.0) - _3056;
        float _3059 = _3044 * _786;
        float _3061 = (cbSceneParam._m0[77u].w * _3057) / _3043;
        float _3062 = _3061 + cbSceneParam._m0[79u].w;
        float _3063 = cbSceneParam._m0[79u].w - _3056;
        float _3069 = sqrt(((_3055 * _3055) + (_3056 * _3056)) + (_3059 * _3059));
        float _3072 = (1.0 - (cbSceneParam._m0[77u].w / _3043)) * _3069;
        float _3077 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3079 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3256;
        if (abs((_3057 - _3061) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3256 = ((((_3062 > 0.0) ? exp2(_3077 * _3062) : (2.0 - exp2(_3079 * _3062))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3072;
        }
        else
        {
            float _3200 = 1.0 / cbSceneParam._m0[80u].x;
            float _3201 = isnan(_3063) ? _3062 : (isnan(_3062) ? _3063 : max(_3062, _3063));
            float _3202 = isnan(_3063) ? _3062 : (isnan(_3062) ? _3063 : min(_3062, _3063));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            _3256 = ((abs(_3069 / _3057) * cbSceneParam._m0[80u].y) * ((((_3211 - _3212) * 2.0) - ((exp2(_3077 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0)))) - exp2(_3077 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))))) * _3200)) - ((exp2(_3079 * _3211) - exp2(_3079 * _3212)) * _3200))) + (_3072 * cbSceneParam._m0[80u].z);
        }
        vec4 _3258 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, 1.0), 0.0);
        float _3267 = exp2((_3256 * (-1.44269502162933349609375)) * (1.0 - _3258.w));
        float _3268 = log2(_3267);
        float _3284 = log2(_3009);
        _3081 = (exp2(_3284 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].x)) * _3258.x) / cbSceneParam._m0[78u].x)) + _3006;
        _3083 = (exp2(_3284 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].y)) * _3258.y) / cbSceneParam._m0[78u].y)) + _3007;
        _3085 = (exp2(_3284 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].z)) * _3258.z) / cbSceneParam._m0[78u].z)) + _3008;
        _3087 = _3267 * _3009;
    }
    else
    {
        _3081 = _3006;
        _3083 = _3007;
        _3085 = _3008;
        _3087 = _3009;
    }
    bool _3294;
    vec4 _3097;
    vec4 _3119;
    float _3121;
    float _3125;
    float _3126;
    float _3127;
    float _3128;
    bool _3138;
    for (;;)
    {
        _3097 = cbMatDynParam._m0[0u];
        float _3099 = roundEven(_3097.y);
        bool _3100 = _3099 == 3.0;
        float _3101 = log2(_3087);
        float _3108 = exp2(_3101 * cbSceneParam._m0[78u].x) * _2978;
        float _3109 = exp2(_3101 * cbSceneParam._m0[78u].y) * _2979;
        float _3110 = exp2(_3101 * cbSceneParam._m0[78u].z) * _2980;
        float _3117 = _800 + (-0.5);
        _3119 = cbMtdParam._m0[1u];
        _3121 = _3119.y * _3117;
        float _3124 = (_3099 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3125 = _3124 * (_3100 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3081)));
        _3126 = _3124 * (_3100 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3083)));
        _3127 = _3124 * (_3100 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3085)));
        _3128 = _3117 * 0.999000012874603271484375;
        _3138 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3138)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3128) < 0.5)
            {
                _3294 = true;
                break;
            }
        }
        uint _3235 = _849 + uint(_3097.w);
        if ((cbInstanceData._m0[_3235].w < 1.0) && ((cbInstanceData._m0[_3235].w + _3128) < 0.5))
        {
            _3294 = true;
            break;
        }
        if ((_3121 + 1.0) < _3119.x)
        {
            _3294 = true;
            break;
        }
        _3294 = false;
        break;
    }
    float _3498;
    if (_3294)
    {
        discard_state = true;
        _3498 = 0.0;
    }
    else
    {
        _3498 = cbInstanceData._m0[_2981].w;
    }
    SV_Target.x = _3125;
    SV_Target.y = _3126;
    SV_Target.z = _3127;
    SV_Target.w = _3498;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2981].w;
    discard_exit();
}


