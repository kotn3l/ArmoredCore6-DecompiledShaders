#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1239;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3850 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _428 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_415 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309);
    float _431 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_415 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310);
    float _434 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_415 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311);
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = ((_452.z - _473) * _415) + _473;
    float _485 = ((((_452.x - _471) * _415) + _471) * 2.0) + (-1.0);
    float _487 = ((((_452.y - _472) * _415) + _472) * 2.0) + (-1.0);
    float _488 = dot(vec2(_485, _487), vec2(_485, _487));
    float _3861 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _521 = (((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _485;
    float _522 = (((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    float _525 = fma(_493, _228, fma(_522, _235, _521 * _221));
    float _528 = fma(_493, _229, fma(_522, _236, _521 * _222));
    float _531 = fma(_493, _230, fma(_522, _237, _521 * _223));
    float _535 = inversesqrt(dot(vec3(_525, _528, _531), vec3(_525, _528, _531)));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _574 = (cbMtdParam._m0[19u].x + dot(vec4(_535 * _525, _535 * _528, _535 * _531, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_564 - _565) * cbMtdParam._m0[24u].z) + _565) * cbMtdParam._m0[21u].z);
    float _3872 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _582 = (_575 * (cbMtdParam._m0[17u].x - _428)) + _428;
    float _583 = (_575 * (cbMtdParam._m0[17u].y - _431)) + _431;
    float _584 = (_575 * (cbMtdParam._m0[17u].z - _434)) + _434;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _612 = _610.x;
    float _629 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _612) * _415) + _612;
    float _633 = ((_596.x - _629) * cbMtdParam._m0[19u].z) + _629;
    float _635 = _633 - (_633 * _575);
    float _639 = (cbMtdParam._m0[19u].w * (_509.z - _482)) + _482;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _659 = (_652.x * 2.0) + (-1.0);
    float _660 = (_652.y * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3883 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _669 = ((_652.z - _639) * _575) + _639;
    float _679 = ((sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) - _493) * _575) + _493;
    float _682 = (((_659 - _521) * _575) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _683 = (((_660 - _522) * _575) + _522) + (cbMtdParam._m0[21u].x * _522);
    float _685 = cbMtdParam._m0[22u].x + _509.w;
    float _688 = fma(_679, _228, fma(_683, _235, _682 * _221));
    float _691 = fma(_679, _229, fma(_683, _236, _682 * _222));
    float _694 = fma(_679, _230, fma(_683, _237, _682 * _223));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    float _699 = _698 * _688;
    float _700 = _698 * _691;
    float _701 = _698 * _694;
    float _3894 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _702 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3916 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3927 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3938 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3949 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _707 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _721 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _772 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _762);
    float _773 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _762);
    float _774 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _762);
    float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
    float _779 = _772 * _778;
    float _780 = _773 * _778;
    float _781 = _774 * _778;
    float _787 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _788 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _806 = fma(_701, cbSceneParam._m0[5u].z, fma(_700, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _699));
    float _809 = fma(_701, cbSceneParam._m0[6u].z, fma(_700, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _699));
    float _812 = fma(_701, cbSceneParam._m0[7u].z, fma(_700, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _699));
    uint _826 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_826].z;
    float _3960 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _838 = 1.0 - _707;
    float _839 = _835 * _838;
    float _840 = _836 * _838;
    float _841 = _837 * _838;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _707;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _707;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _707;
    float _849 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _787, cbSceneParam._m0[86u].y * _788));
    float _865 = ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * TEXCOORD_5.w) * _861.x;
    float _866 = dot(vec3(_699, _700, _701), vec3(_779, _780, _781));
    float _869 = _866 * 2.0;
    float _873 = (_869 * _699) - _779;
    float _874 = (_869 * _700) - _780;
    float _875 = (_869 * _701) - _781;
    float _879 = abs(dot(vec3(_779, _780, _781), vec3(_699, _700, _701)));
    float _3993 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _881 = sqrt(_702);
    float _894 = exp2((_881 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_881 * 3.0));
    float _900 = (1.0 - _894) * ((_881 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _901 = _894 * _881;
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_937, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929));
        float _967 = fma(_937, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929));
        float _971 = fma(_937, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929));
        float _996 = _929 + _699;
        float _997 = _933 + _700;
        float _998 = _937 + _701;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_699, _700, _701), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4041 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_699, _700, _701), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4074 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_699, _700, _701), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4107 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_937, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929));
        float _1282 = fma(_937, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929));
        float _1286 = fma(_937, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929));
        float _1309 = _929 + _699;
        float _1310 = _933 + _700;
        float _1311 = _937 + _701;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_699, _700, _701), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4170 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_699, _700, _701), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4203 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_699, _700, _701), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4236 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1239;
        _1548 = _1239;
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1251)) + _1251;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _873 * 0.5;
    float _1616 = _874 * 0.5;
    float _1617 = _875 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _702);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_937, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_937, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_937, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_875, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873));
        float _1746 = fma(_875, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873));
        float _1749 = fma(_875, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1777 = frontier_phi_14_12_ladder;
        }
        float _1949;
        if (_1746 > 0.0)
        {
            _1949 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1949 = frontier_phi_23_19_ladder;
        }
        float _2244;
        if (_1749 > 0.0)
        {
            _2244 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2244 = frontier_phi_35_30_ladder;
        }
        float _2246 = isnan(_1949) ? _1777 : (isnan(_1777) ? _1949 : min(_1777, _1949));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1743) + _1732;
        float _2252 = (_2247 * _1746) + _1736;
        float _2253 = (_2247 * _1749) + _1740;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_13_35_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_13_35_ladder_2;
        _1767 = frontier_phi_13_35_ladder_1;
        _1769 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_873, _874, _875), _1684);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _702);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1828 = fma(_937, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929)) + cbModelParam._m0[21u].w;
        float _1832 = fma(_937, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929)) + cbModelParam._m0[22u].w;
        float _1836 = fma(_937, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929)) + cbModelParam._m0[23u].w;
        float _1839 = fma(_875, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873));
        float _1842 = fma(_875, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873));
        float _1845 = fma(_875, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873));
        float _1954;
        if (_1839 > 0.0)
        {
            _1954 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1954 = frontier_phi_25_21_ladder;
        }
        float _2271;
        if (_1842 > 0.0)
        {
            _2271 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2271 = frontier_phi_37_32_ladder;
        }
        float _2609;
        if (_1845 > 0.0)
        {
            _2609 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2609 = frontier_phi_47_44_ladder;
        }
        float _2611 = isnan(_2271) ? _1954 : (isnan(_1954) ? _2271 : min(_1954, _2271));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1839) + _1828;
        float _2617 = (_2612 * _1842) + _1832;
        float _2618 = (_2612 * _1845) + _1836;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_22_47_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1864 = frontier_phi_22_47_ladder_2;
        _1866 = frontier_phi_22_47_ladder_1;
        _1868 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_873, _874, _875), _1774);
        _1864 = _1848.x * cbModelParam._m0[1u].z;
        _1866 = _1848.y * cbModelParam._m0[1u].z;
        _1868 = _1848.z * cbModelParam._m0[1u].z;
    }
    float _1881 = (((_900 * _849) + _901) * _865) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1883 = (((_900 * _851) + _901) * _865) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1885 = (((_900 * _852) + _901) * _865) * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1881 * cbSceneParam._m0[91u].x));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1941 = _1928 / _1940;
    float _1942 = _1932 / _1940;
    float _1943 = _1936 / _1940;
    float _2090;
    float _2091;
    float _2092;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1970 = ((uint(_1943 > cbSceneParam._m0[59u].y) + uint(_1943 > cbSceneParam._m0[59u].x)) + uint(_1943 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1971 = _1970 + 43u;
        uint _1979 = _1970 + 44u;
        uint _1987 = _1970 + 45u;
        uint _1995 = _1970 + 46u;
        float _2006 = fma(_1940, cbSceneParam._m0[_1971].w, fma(_1936, cbSceneParam._m0[_1971].z, fma(_1932, cbSceneParam._m0[_1971].y, _1928 * cbSceneParam._m0[_1971].x)));
        float _2010 = fma(_1940, cbSceneParam._m0[_1979].w, fma(_1936, cbSceneParam._m0[_1979].z, fma(_1932, cbSceneParam._m0[_1979].y, _1928 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1940, cbSceneParam._m0[_1995].w, fma(_1936, cbSceneParam._m0[_1995].z, fma(_1932, cbSceneParam._m0[_1995].y, _1928 * cbSceneParam._m0[_1995].x)));
        float _2023 = cbSceneParam._m0[33u].z * _2018;
        float _2025 = cbSceneParam._m0[33u].w * _2018;
        float _2028 = fma(_1940, cbSceneParam._m0[_1987].w, fma(_1936, cbSceneParam._m0[_1987].z, fma(_1932, cbSceneParam._m0[_1987].y, _1928 * cbSceneParam._m0[_1987].x))) / _2018;
        float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
        float _4362 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2083 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2006) / _2018, (_2025 + _2010) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 + _2006) / _2018, (_2010 - _2023) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2023) / _2018, (_2010 - _2025) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2025) / _2018, (_2023 + _2010) / _2018), _2028), 0.0)).x), vec4(0.25)));
        _2090 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
        _2091 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
        _2092 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2090 = 1.0;
        _2091 = 1.0;
        _2092 = 1.0;
    }
    float _2156;
    float _2158;
    float _2160;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2144 = fma(_1940, cbSceneParam._m0[63u].w, fma(_1936, cbSceneParam._m0[63u].z, fma(_1932, cbSceneParam._m0[63u].y, _1928 * cbSceneParam._m0[63u].x)));
        float _2145 = fma(_1940, cbSceneParam._m0[60u].w, fma(_1936, cbSceneParam._m0[60u].z, fma(_1932, cbSceneParam._m0[60u].y, _1928 * cbSceneParam._m0[60u].x))) / _2144;
        float _2146 = fma(_1940, cbSceneParam._m0[61u].w, fma(_1936, cbSceneParam._m0[61u].z, fma(_1932, cbSceneParam._m0[61u].y, _1928 * cbSceneParam._m0[61u].x))) / _2144;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2145 >= cbSceneParam._m0[64u].x) && (_2146 >= cbSceneParam._m0[64u].y)) && (_2145 <= cbSceneParam._m0[64u].z)) && (_2146 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1940, cbSceneParam._m0[62u].w, fma(_1936, cbSceneParam._m0[62u].z, fma(_1932, cbSceneParam._m0[62u].y, _1928 * cbSceneParam._m0[62u].x))) / _2144;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
            float _4378 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2145, cbSceneParam._m0[33u].w + _2146), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2145, _2146 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].z, _2146 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2146), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
            frontier_phi_34_33_ladder_1 = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_34_33_ladder_2 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
        }
        else
        {
            frontier_phi_34_33_ladder = _2092;
            frontier_phi_34_33_ladder_1 = _2091;
            frontier_phi_34_33_ladder_2 = _2090;
        }
        _2156 = frontier_phi_34_33_ladder_2;
        _2158 = frontier_phi_34_33_ladder_1;
        _2160 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2156 = _2090;
        _2158 = _2091;
        _2160 = _2092;
    }
    uvec4 _2165 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2167 = _2165.x * 14u;
    uint _2168 = _2167 + 13u;
    float _2175 = _865 + (-1.0);
    float _2180 = (cbLight._m0[_2168].x * _2175) + 1.0;
    float _2181 = (cbLight._m0[_2168].y * _2175) + 1.0;
    float _2182 = (cbLight._m0[_2168].z * _2175) + 1.0;
    float _2183 = (cbLight._m0[_2168].w * _2175) + 1.0;
    uint _2184 = _2167 + 5u;
    float _2190 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2194 = _2167 + 4u;
    float _2203 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2207 = _2167 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_699, _700, _701));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_699, _700, _701));
    float _4414 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4425 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2184].x * _2190) * _2228) + (((cbLight._m0[_2194].x * _2156) * _2203) * _2226);
    float _2236 = ((_2190 * cbLight._m0[_2184].y) * _2228) + (((cbLight._m0[_2194].y * _2158) * _2203) * _2226);
    float _2237 = ((_2190 * cbLight._m0[_2184].z) * _2228) + (((cbLight._m0[_2194].z * _2160) * _2203) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2167 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2243)
    {
        _2345 = _2235;
        _2347 = _2236;
        _2349 = _2237;
    }
    else
    {
        uint _2353 = _2167 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2167 + 2u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4436 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2372 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2235;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2236;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2237;
    }
    bool _2352 = _2241.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2352)
    {
        _2407 = _2345;
        _2409 = _2347;
        _2411 = _2349;
    }
    else
    {
        uint _2580 = _2167 + 7u;
        float _2596 = (dot(vec3(cbLight._m0[_2167 + 3u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4452 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2599 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2407 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2345;
        _2409 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2347;
        _2411 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2349;
    }
    uint _2414 = _2167 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _702) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2167].x + _779;
    float _2430 = cbLight._m0[_2167].y + _780;
    float _2431 = cbLight._m0[_2167].z + _781;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2167].xyz));
    float _4468 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2443 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2444 = dot(vec3(_699, _700, _701), vec3(_2436, _2437, _2438));
    float _4490 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2436, _2437, _2438));
    float _4501 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2465 = 0.959999978542327880859375 - _846;
    float _2467 = 0.959999978542327880859375 - _847;
    float _2468 = 0.959999978542327880859375 - _848;
    float _2475 = 1.0 - _2428;
    float _2486 = (0.5 / (((_2443 * ((_2442 * _2475) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2475) + _2428) * _2442))) * _2442;
    float _4512 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2502 = _2167 + 9u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _702) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2207].x + _779;
    float _2516 = cbLight._m0[_2207].y + _780;
    float _2517 = cbLight._m0[_2207].z + _781;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2207].xyz));
    float _4523 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2529 = dot(vec3(_699, _700, _701), vec3(_2522, _2523, _2524));
    float _4534 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2522, _2523, _2524));
    float _4545 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2514 * _2514;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2555 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2443 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2555) + _2514) * _2528))) * _2528;
    float _4556 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    float _2577 = (((((_2548 * _2465) + _849) * cbLight._m0[_2502].x) * _2567) * _2190) + ((((cbLight._m0[_2414].x * _2156) * ((_2464 * _2465) + _849)) * _2488) * _2203);
    float _2578 = (((((_2548 * _2467) + _851) * cbLight._m0[_2502].y) * _2567) * _2190) + ((((cbLight._m0[_2414].y * _2158) * ((_2464 * _2467) + _851)) * _2488) * _2203);
    float _2579 = (((((_2548 * _2468) + _852) * cbLight._m0[_2502].z) * _2567) * _2190) + ((((cbLight._m0[_2414].z * _2160) * ((_2464 * _2468) + _852)) * _2488) * _2203);
    float _2635;
    float _2637;
    float _2639;
    if (_2243)
    {
        _2635 = _2577;
        _2637 = _2578;
        _2639 = _2579;
    }
    else
    {
        uint _2641 = _2167 + 2u;
        uint _2645 = _2167 + 10u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _702) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _779;
        float _2662 = cbLight._m0[_2641].y + _780;
        float _2663 = cbLight._m0[_2641].z + _781;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2641].xyz));
        float _4567 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2675 = dot(vec3(_699, _700, _701), vec3(_2668, _2669, _2670));
        float _4578 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4589 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2443 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2701) + _2660) * _2674))) * _2674;
        float _4600 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2635 = (((((_2694 * _2465) + _849) * cbLight._m0[_2645].x) * _2713) * _2714) + _2577;
        _2637 = (((((_2694 * _2467) + _851) * cbLight._m0[_2645].y) * _2713) * _2714) + _2578;
        _2639 = (((((_2694 * _2468) + _852) * cbLight._m0[_2645].z) * _2713) * _2714) + _2579;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2352)
    {
        _2745 = _2635;
        _2747 = _2637;
        _2749 = _2639;
    }
    else
    {
        uint _2756 = _2167 + 3u;
        uint _2760 = _2167 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _702) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _779;
        float _2777 = cbLight._m0[_2756].y + _780;
        float _2778 = cbLight._m0[_2756].z + _781;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2756].xyz));
        float _4616 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2790 = dot(vec3(_699, _700, _701), vec3(_2783, _2784, _2785));
        float _4627 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4638 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2443 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2816) + _2775) * _2789))) * _2789;
        float _4649 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2745 = (((((_2809 * _2465) + _849) * cbLight._m0[_2760].x) * _2828) * _2829) + _2635;
        _2747 = (((((_2809 * _2467) + _851) * cbLight._m0[_2760].y) * _2828) * _2829) + _2637;
        _2749 = (((((_2809 * _2468) + _852) * cbLight._m0[_2760].z) * _2828) * _2829) + _2639;
    }
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_2165.y == 0u)
    {
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.x;
        uint _2862 = uint((float(_2850.y) * floor(float(uint(cbSceneParam._m0[85u].y * _788) / _2851))) + floor(float(uint(cbSceneParam._m0[85u].x * _787) / _2851)));
        float _2872 = (log2(_1943 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2873 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        uint _2876 = uint(isnan(14.0) ? _2873 : (isnan(_2873) ? 14.0 : min(_2873, 14.0)));
        uvec4 _2881 = texelFetch(g_lightClusterGridBuffer, int(((_2876 << 2u) + (_2862 << 6u)) >> 2u));
        uint _2882 = _2881.x;
        uint _2883 = _2850.z;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((((1u << ((_2883 >> 4u) & 15u)) + 4294967295u) & _2882) == 0u) || ((_2883 & 240u) == 0u))
        {
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
        }
        else
        {
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            uint _3113 = 0u;
            uint _3122;
            bool _3123;
            for (;;)
            {
                _3122 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                _3123 = _3122 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3123)
                {
                    frontier_phi_66_pred = _3112;
                    frontier_phi_66_pred_1 = _3111;
                    frontier_phi_66_pred_2 = _3110;
                    frontier_phi_66_pred_3 = _3109;
                    frontier_phi_66_pred_4 = _3108;
                    frontier_phi_66_pred_5 = _3107;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3122;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3113 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _1941;
                        float _3298 = _3257.y - _1942;
                        float _3299 = _3257.z - _1943;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_806, _809, _812), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4675 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _1941;
                        float _3333 = (-0.0) - _1942;
                        float _3334 = (-0.0) - _1943;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3348 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _881;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3339 + _3304;
                        float _3360 = _3340 + _3305;
                        float _3361 = _3341 + _3306;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_806, _809, _812), vec3(_3339, _3340, _3341));
                        float _4691 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3373 = dot(vec3(_806, _809, _812), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4702 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3317 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3307) + _3382;
                        float _4713 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4724 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3380 * _3380) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3166 = (_3328 * _3276.x) + _3234;
                        _3167 = (_3328 * _3276.y) + _3235;
                        _3168 = (_3328 * _3276.z) + _3236;
                        _3163 = (_3408 * _3293.x) + _3231;
                        _3164 = (_3408 * _3293.y) + _3232;
                        _3165 = (_3408 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_66_pred = _3168;
                    frontier_phi_66_pred_1 = _3167;
                    frontier_phi_66_pred_2 = _3166;
                    frontier_phi_66_pred_3 = _3165;
                    frontier_phi_66_pred_4 = _3164;
                    frontier_phi_66_pred_5 = _3163;
                }
                _2973 = frontier_phi_66_pred;
                _2971 = frontier_phi_66_pred_1;
                _2969 = frontier_phi_66_pred_2;
                _2967 = frontier_phi_66_pred_3;
                _2965 = frontier_phi_66_pred_4;
                _2963 = frontier_phi_66_pred_5;
                uint _3114 = _3113 + 1u;
                if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3107 = _2963;
                    _3108 = _2965;
                    _3109 = _2967;
                    _3110 = _2969;
                    _3111 = _2971;
                    _3112 = _2973;
                    _3113 = _3114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
        }
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.z;
        uint _2979 = (_2977 >> 8u) & 15u;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((4294967295u << _2979) & _2882) == 0u)
        {
            _3075 = _2962;
            _3077 = _2964;
            _3079 = _2966;
            _3081 = _2968;
            _3083 = _2970;
            _3085 = _2972;
        }
        else
        {
            float _3100 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
            float _3101 = _3100 * _1941;
            float _3102 = _3100 * _1942;
            float _3103 = _3100 * _1943;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2979 < ((_2977 >> 12u) & 15u))
            {
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3214 = _2962;
                float _3215 = _2964;
                float _3216 = _2966;
                float _3217 = _2968;
                float _3218 = _2970;
                float _3219 = _2972;
                uint _3220 = _2979;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3230)
                    {
                        frontier_phi_72_pred = _3219;
                        frontier_phi_72_pred_1 = _3218;
                        frontier_phi_72_pred_2 = _3217;
                        frontier_phi_72_pred_3 = _3216;
                        frontier_phi_72_pred_4 = _3215;
                        frontier_phi_72_pred_5 = _3214;
                    }
                    else
                    {
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        float _3430 = _3218;
                        float _3431 = _3219;
                        uint _3432 = _3229;
                        uint _3433;
                        vec4 _3458;
                        float _3459;
                        vec4 _3474;
                        vec3 _3486;
                        vec4 _3501;
                        vec4 _3517;
                        float _3563;
                        bool _3564;
                        for (;;)
                        {
                            uint _3443 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3432));
                            _3433 = (_3432 + 4294967295u) & _3432;
                            uint _3445 = _3443 * 40u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3459 = _3458.w;
                            uint _3461 = (_3443 * 40u) + 4u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3443 * 40u) + 8u;
                            _3486 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x));
                            uint _3488 = (_3443 * 40u) + 16u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3504 = (_3443 * 40u) + 20u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3443 * 40u) + 24u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3538 = (_3443 * 40u) + 28u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3563 = fma(_1943, _3551.z, fma(_1942, _3551.y, _3551.x * _1941)) + _3551.w;
                            _3564 = !((fma(_1943, _3532.z, fma(_1942, _3532.y, _3532.x * _1941)) + _3532.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3564)
                            {
                                float _3591 = _3458.x - _1941;
                                float _3592 = _3458.y - _1942;
                                float _3593 = _3458.z - _1943;
                                float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                                float _3597 = inversesqrt(_3594);
                                float _3598 = _3597 * _3591;
                                float _3599 = _3597 * _3592;
                                float _3600 = _3597 * _3593;
                                float _3604 = 1.0 - (_3594 / (_3459 * _3459));
                                float _4735 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3609 = sqrt(_3594) * _3474.w;
                                float _3611 = 1.39999997615814208984375 / (_3609 + 1.39999997615814208984375);
                                float _3612 = _3611 * _3611;
                                float _3615 = ((1.0 - _3612) * dot(vec3(_3598, _3599, _3600), vec3(_806, _809, _812))) + _3612;
                                float _3618 = _3609 * _3609;
                                float _3622 = (fma(_1943, _3501.z, fma(_1942, _3501.y, _3501.x * _1941)) + _3501.w) / _3563;
                                float _3623 = (fma(_1943, _3517.z, fma(_1942, _3517.y, _3517.x * _1941)) + _3517.w) / _3563;
                                float _3627 = 1.0 - dot(vec2(_3622, _3623), vec2(_3622, _3623));
                                float _4751 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3629 = _3628 * (((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3605) / ((_3618 * 0.699999988079071044921875) + 1.0));
                                float _3641 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                                float _3642 = 1.0 - _881;
                                float _3649 = sqrt(1.0 - ((1.0 - (_3642 * _3642)) * (1.0 - (_3641 * _3641))));
                                float _3650 = _3649 * _3649;
                                float _3651 = _3650 * _3650;
                                float _3652 = _3598 - _3101;
                                float _3653 = _3599 - _3102;
                                float _3654 = _3600 - _3103;
                                float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                                float _3662 = dot(vec3(_806, _809, _812), vec3((-0.0) - _3101, (-0.0) - _3102, (-0.0) - _3103));
                                float _4762 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3666 = dot(vec3(_806, _809, _812), vec3(_3658 * _3652, _3658 * _3653, _3658 * _3654));
                                float _4773 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3673 = ((_3669 * _3669) * (_3651 + (-1.0))) + 1.0;
                                float _3674 = _3611 * _3650;
                                float _3675 = _3674 * _3674;
                                float _3681 = ((1.0 - _3675) * dot(vec3(_806, _809, _812), vec3(_3598, _3599, _3600))) + _3675;
                                float _4784 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3683 = 1.0 - _3650;
                                float _3693 = (0.5 / (((_3682 * ((_3665 * _3683) + _3650)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3650) * _3665))) * _3682;
                                float _4795 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3703 = (_3628 * _3605) * (((_3651 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3673 * _3673) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3629 * _3474.y;
                                frontier_phi_78_pred_1 = _3629 * _3474.x;
                                frontier_phi_78_pred_2 = _3703 * _3486.z;
                                frontier_phi_78_pred_3 = _3703 * _3486.y;
                                frontier_phi_78_pred_4 = _3703 * _3486.x;
                                frontier_phi_78_pred_5 = _3629 * _3474.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3711 = frontier_phi_78_pred;
                            _3710 = frontier_phi_78_pred_1;
                            _3709 = frontier_phi_78_pred_2;
                            _3708 = frontier_phi_78_pred_3;
                            _3707 = frontier_phi_78_pred_4;
                            _3712 = frontier_phi_78_pred_5;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            _3413 = _3707 + _3426;
                            _3414 = _3708 + _3427;
                            _3415 = _3709 + _3428;
                            if (_3433 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3433;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3418;
                        frontier_phi_72_pred_1 = _3417;
                        frontier_phi_72_pred_2 = _3416;
                        frontier_phi_72_pred_3 = _3415;
                        frontier_phi_72_pred_4 = _3414;
                        frontier_phi_72_pred_5 = _3413;
                    }
                    _3086 = frontier_phi_72_pred;
                    _3084 = frontier_phi_72_pred_1;
                    _3082 = frontier_phi_72_pred_2;
                    _3080 = frontier_phi_72_pred_3;
                    _3078 = frontier_phi_72_pred_4;
                    _3076 = frontier_phi_72_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3076;
                        _3215 = _3078;
                        _3216 = _3080;
                        _3217 = _3082;
                        _3218 = _3084;
                        _3219 = _3086;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3086;
                frontier_phi_60_61_ladder_1 = _3084;
                frontier_phi_60_61_ladder_2 = _3080;
                frontier_phi_60_61_ladder_3 = _3078;
                frontier_phi_60_61_ladder_4 = _3076;
                frontier_phi_60_61_ladder_5 = _3082;
            }
            else
            {
                frontier_phi_60_61_ladder = _2972;
                frontier_phi_60_61_ladder_1 = _2970;
                frontier_phi_60_61_ladder_2 = _2966;
                frontier_phi_60_61_ladder_3 = _2964;
                frontier_phi_60_61_ladder_4 = _2962;
                frontier_phi_60_61_ladder_5 = _2968;
            }
            _3075 = frontier_phi_60_61_ladder_4;
            _3077 = frontier_phi_60_61_ladder_3;
            _3079 = frontier_phi_60_61_ladder_2;
            _3081 = frontier_phi_60_61_ladder_5;
            _3083 = frontier_phi_60_61_ladder_1;
            _3085 = frontier_phi_60_61_ladder;
        }
        float _3090 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2895 = (_3090 * _3081) + _2407;
        _2897 = (_3090 * _3083) + _2409;
        _2899 = (_3090 * _3085) + _2411;
        _2901 = ((_3075 * _849) * _3090) + _2745;
        _2903 = ((_3077 * _851) * _3090) + _2747;
        _2905 = ((_3079 * _852) * _3090) + _2749;
    }
    else
    {
        _2895 = _2407;
        _2897 = _2409;
        _2899 = _2411;
        _2901 = _2745;
        _2903 = _2747;
        _2905 = _2749;
    }
    float _4811 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4822 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4833 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    uint _2925 = _240 + 6u;
    float _2933 = _787 / cbSceneParam._m0[86u].x;
    float _2934 = _788 / cbSceneParam._m0[86u].y;
    vec4 _2948 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, (log2((isnan(cbSceneParam._m0[77u].w) ? _721 : (isnan(_721) ? cbSceneParam._m0[77u].w : min(_721, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2950 = _2948.x;
    float _2951 = _2948.y;
    float _2952 = _2948.z;
    float _2953 = _2948.w;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_721 > cbSceneParam._m0[78u].w)
    {
        float _2987 = isnan(_721) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _721 : min(cbSceneParam._m0[80u].w, _721));
        float _2988 = _2987 / _721;
        float _2999 = _2988 * _772;
        float _3000 = _773 * _2988;
        float _3001 = (-0.0) - _3000;
        float _3003 = _2988 * _774;
        float _3005 = (cbSceneParam._m0[77u].w * _3001) / _2987;
        float _3006 = _3005 + cbSceneParam._m0[79u].w;
        float _3007 = cbSceneParam._m0[79u].w - _3000;
        float _3013 = sqrt(((_2999 * _2999) + (_3000 * _3000)) + (_3003 * _3003));
        float _3016 = (1.0 - (cbSceneParam._m0[77u].w / _2987)) * _3013;
        float _3021 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3023 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_3001 - _3005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_3006 > 0.0) ? exp2(_3021 * _3006) : (2.0 - exp2(_3023 * _3006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3016;
        }
        else
        {
            float _3136 = 1.0 / cbSceneParam._m0[80u].x;
            float _3137 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : max(_3006, _3007));
            float _3138 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : min(_3006, _3007));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            _3176 = ((abs(_3013 / _3001) * cbSceneParam._m0[80u].y) * ((((_3147 - _3148) * 2.0) - ((exp2(_3021 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0)))) - exp2(_3021 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))))) * _3136)) - ((exp2(_3023 * _3147) - exp2(_3023 * _3148)) * _3136))) + (_3016 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2953);
        _3025 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2950;
        _3027 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2951;
        _3029 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2952;
        _3031 = _3187 * _2953;
    }
    else
    {
        _3025 = _2950;
        _3027 = _2951;
        _3029 = _2952;
        _3031 = _2953;
    }
    float _3043 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3044 = _3043 == 3.0;
    float _3045 = log2(_3031);
    float _3052 = exp2(_3045 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2895 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _865))) + ((_2901 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3053 = exp2(_3045 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2897 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _865))) + ((_2903 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3054 = exp2(_3045 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2899 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _865))) + ((_2905 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3063 = (_3043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3063 * (_3044 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.y = _3063 * (_3044 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.z = _3063 * (_3044 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3029)));
    SV_Target.w = cbInstanceData._m0[_2925].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2925].w;
}


