#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1771;
float _4148;
float _4149;
float _4150;
float _4151;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4160 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4171 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4182 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _477 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _494 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_465 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4193 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _502 = (_495 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _503 = (_495 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _504 = (_495 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _567 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[23u].w) + _553) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4204 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _575 = (_568 * ((_521.x * cbMtdParam._m0[13u].x) - _502)) + _502;
    float _576 = (_568 * ((_521.y * cbMtdParam._m0[13u].y) - _503)) + _503;
    float _577 = (_568 * ((_521.z * cbMtdParam._m0[13u].z) - _504)) + _504;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _625 = dot(vec4(_615, _613.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _637 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _428.z) * 2.0) - ((((_615 - _625) * cbMtdParam._m0[23u].w) + _625) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4215 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _648 = (_357.x * cbMtdParam._m0[9u].x) * ((_638 * ((_596.x * cbMtdParam._m0[14u].x) - _575)) + _575);
    float _649 = (_357.y * cbMtdParam._m0[9u].y) * ((_638 * ((_596.y * cbMtdParam._m0[14u].y) - _576)) + _576);
    float _650 = (_357.z * cbMtdParam._m0[9u].z) * ((_638 * ((_596.z * cbMtdParam._m0[14u].z) - _577)) + _577);
    float _654 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _648;
    float _657 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _649;
    float _660 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _650;
    float _668 = (((_648 - _654) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) + _654) * 4.55000019073486328125;
    float _670 = (((_649 - _657) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + _657) * 4.55000019073486328125;
    float _672 = (((_650 - _660) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) + _660) * 4.55000019073486328125;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    float _742 = ((_714.x - _733) * _495) + _733;
    float _743 = ((_714.y - _734) * _495) + _734;
    float _744 = ((_714.z - _735) * _495) + _735;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _767 = ((_756.x - _742) * _568) + _742;
    float _768 = ((_756.y - _743) * _568) + _743;
    float _769 = ((_756.z - _744) * _568) + _744;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _794 = ((_781.z - _769) * _638) + _769;
    float _797 = ((((_781.x - _767) * _638) + _767) * 2.0) + (-1.0);
    float _798 = ((((_781.y - _768) * _638) + _768) * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4226 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _804 = sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _834 = (_797 + ((((_689.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_822.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _835 = (_798 + ((((_689.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_822.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _838 = fma(_804, _270, fma(_835, _277, _834 * _263));
    float _841 = fma(_804, _271, fma(_835, _278, _834 * _264));
    float _844 = fma(_804, _272, fma(_835, _279, _834 * _265));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _877 = _875.x;
    float _878 = 1.0 - _877;
    float _886 = (cbMtdParam._m0[19u].x + dot(vec4(_848 * _838, _848 * _841, _848 * _844, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_877 - _878) * cbMtdParam._m0[24u].z) + _878) * cbMtdParam._m0[21u].z);
    float _4237 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _889 = (-0.0) - cbMtdParam._m0[24u].x;
    float _891 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
    float _899 = _887 - ((_887 * TEXCOORD_8.x) * _892);
    float _900 = _887 - ((_887 * TEXCOORD_8.y) * _892);
    float _901 = _887 - ((_887 * TEXCOORD_8.z) * _892);
    float _908 = (_899 * (cbMtdParam._m0[17u].x - _668)) + _668;
    float _909 = (_900 * (cbMtdParam._m0[17u].y - _670)) + _670;
    float _910 = (_901 * (cbMtdParam._m0[17u].z - _672)) + _672;
    float _925 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _926 = _925 * TEXCOORD.z;
    float _927 = _925 * TEXCOORD.w;
    vec4 _939 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _926) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _927) + cbTextureTilingScale._m0[19u].w));
    float _941 = _939.x;
    float _942 = 1.0 - _941;
    float _968 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_941 - _942) * cbMtdParam._m0[24u].w) + _942) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4258 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _969 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _977 = ((((cbMtdParam._m0[10u].x - _908) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _969) + _908;
    float _978 = ((((cbMtdParam._m0[10u].y - _909) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _969) + _909;
    float _979 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _910)) * _969) + _910;
    vec4 _1005 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1007 = _1005.x;
    float _1024 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _1007) * _495) + _1007;
    float _1041 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1024) * _568) + _1024;
    float _1058 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1041) * _638) + _1041;
    float _1064 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1058) * cbMtdParam._m0[19u].z) + _1058;
    float _1066 = _1064 - (_1064 * _899);
    float _1068 = _1066 - (_1066 * _969);
    float _1073 = (((_689.z - _794) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _794;
    float _1077 = ((_822.z - _1073) * cbMtdParam._m0[19u].w) + _1073;
    vec4 _1093 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1100 = (_1093.x * 2.0) + (-1.0);
    float _1101 = (_1093.y * 2.0) + (-1.0);
    float _1102 = dot(vec2(_1100, _1101), vec2(_1100, _1101));
    float _4269 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1110 = ((_1093.z - _1077) * _899) + _1077;
    float _1113 = ((cbMtdParam._m0[23u].x - _1110) * _969) + _1110;
    vec4 _1136 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _926) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _927) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1142 = (_1136.x * 2.0) + (-1.0);
    float _1143 = (_1136.y * 2.0) + (-1.0);
    float _1144 = dot(vec2(_1142, _1143), vec2(_1142, _1143));
    float _4280 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1159 = ((sqrt(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) - _804) * _901) + _804;
    float _1162 = (((_1100 - _834) * _899) + _834) + (cbMtdParam._m0[21u].x * _834);
    float _1163 = (((_1101 - _835) * _900) + _835) + (cbMtdParam._m0[21u].x * _835);
    float _1174 = (((_1142 - _1162) + (_1162 * cbMtdParam._m0[22u].z)) * _969) + _1162;
    float _1175 = (((_1143 - _1163) + (_1163 * cbMtdParam._m0[22u].z)) * _969) + _1163;
    float _1176 = (_969 * (sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) - _1159)) + _1159;
    float _1178 = cbMtdParam._m0[22u].x + _822.w;
    float _1181 = fma(_1176, _270, fma(_1175, _277, _1174 * _263));
    float _1184 = fma(_1176, _271, fma(_1175, _278, _1174 * _264));
    float _1187 = fma(_1176, _272, fma(_1175, _279, _1174 * _265));
    float _1191 = inversesqrt(dot(vec3(_1181, _1184, _1187), vec3(_1181, _1184, _1187)));
    float _1192 = _1191 * _1181;
    float _1193 = _1191 * _1184;
    float _1194 = _1191 * _1187;
    float _4291 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1195 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _4313 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4324 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4335 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4346 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1200 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _1214 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1254);
    float _1265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1254);
    float _1266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1254);
    float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
    float _1271 = _1264 * _1270;
    float _1272 = _1265 * _1270;
    float _1273 = _1266 * _1270;
    vec4 _1278 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1280 = _1278.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1452 = sqrt(((_1264 * _1264) + (_1265 * _1265)) + (_1266 * _1266));
        float _1458 = (cbMatDynParam._m0[5u].x * _1452) + cbMatDynParam._m0[5u].y;
        float _4357 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1463 = (cbMatDynParam._m0[5u].z * _1452) + cbMatDynParam._m0[5u].w;
        float _4368 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) - _1459)) + _1459) < ((_1280 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1291 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1292 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1310 = fma(_1194, cbSceneParam._m0[5u].z, fma(_1193, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1192));
    float _1313 = fma(_1194, cbSceneParam._m0[6u].z, fma(_1193, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1192));
    float _1316 = fma(_1194, cbSceneParam._m0[7u].z, fma(_1193, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1192));
    uint _1329 = _301 + 9u;
    uint _1330 = _1329 + uint(cbMatDynParam._m0[0u].w);
    float _1336 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1330].x;
    float _1337 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_1330].y;
    float _1338 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_1330].z;
    float _4379 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1339 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1340 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _1341 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _1342 = 1.0 - _1200;
    float _1343 = _1339 * _1342;
    float _1344 = _1340 * _1342;
    float _1345 = _1341 * _1342;
    float _1350 = (_1339 + (-0.039999999105930328369140625)) * _1200;
    float _1351 = (_1340 + (-0.039999999105930328369140625)) * _1200;
    float _1352 = (_1341 + (-0.039999999105930328369140625)) * _1200;
    float _1353 = _1350 + 0.039999999105930328369140625;
    float _1355 = _1351 + 0.039999999105930328369140625;
    float _1356 = _1352 + 0.039999999105930328369140625;
    vec4 _1365 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1291, cbSceneParam._m0[86u].y * _1292));
    float _1369 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * TEXCOORD_5.w) * _1365.x;
    float _1370 = dot(vec3(_1192, _1193, _1194), vec3(_1271, _1272, _1273));
    float _1373 = _1370 * 2.0;
    float _1377 = (_1373 * _1192) - _1271;
    float _1378 = (_1373 * _1193) - _1272;
    float _1379 = (_1373 * _1194) - _1273;
    float _1383 = abs(dot(vec3(_1271, _1272, _1273), vec3(_1192, _1193, _1194)));
    float _4412 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
    float _1385 = sqrt(_1195);
    float _1398 = exp2((_1385 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1385 * 3.0));
    float _1404 = (1.0 - _1398) * ((_1385 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1405 = _1398 * _1385;
    float _1433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1770;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1495 = fma(_1441, cbModelParam._m0[26u].z, fma(_1437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1433));
        float _1499 = fma(_1441, cbModelParam._m0[27u].z, fma(_1437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1433));
        float _1503 = fma(_1441, cbModelParam._m0[28u].z, fma(_1437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1433));
        float _1528 = _1433 + _1192;
        float _1529 = _1437 + _1193;
        float _1530 = _1441 + _1194;
        float _1540 = fma(_1530, cbModelParam._m0[26u].z, fma(_1529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1528)) - _1495;
        float _1541 = fma(_1530, cbModelParam._m0[27u].z, fma(_1529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1528)) - _1499;
        float _1542 = fma(_1530, cbModelParam._m0[28u].z, fma(_1529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1528)) - _1503;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[34u].z) + ((((((_1503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1598 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1564.x + (-0.5));
        float _1600 = _1598 * (_1564.y + (-0.5));
        float _1601 = _1598 * (_1564.z + (-0.5));
        float _1608 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1571.x + (-0.5));
        float _1610 = _1608 * (_1571.y + (-0.5));
        float _1611 = _1608 * (_1571.z + (-0.5));
        float _1618 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1578.x + (-0.5));
        float _1620 = _1618 * (_1578.y + (-0.5));
        float _1621 = _1618 * (_1578.z + (-0.5));
        float _1628 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1585.x + (-0.5));
        float _1630 = _1628 * (_1585.y + (-0.5));
        float _1631 = _1628 * (_1585.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1652 = (dot(vec3(_1192, _1193, _1194), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1662 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4460 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1664 + 1.0))) + _1669) * _1632;
        float _1679 = _1600 * 0.5;
        float _1680 = _1610 * 0.5;
        float _1681 = _1620 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_1192, _1193, _1194), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4493 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1706 + 1.0))) + _1711) * _1633;
        float _1721 = _1601 * 0.5;
        float _1722 = _1611 * 0.5;
        float _1723 = _1621 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_1192, _1193, _1194), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4526 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1748 + 1.0))) + _1753) * _1634;
        _1770 = _1601;
        _1772 = _1600;
        _1773 = _1599;
        _1774 = _1611;
        _1775 = _1610;
        _1776 = _1609;
        _1777 = _1621;
        _1778 = _1620;
        _1779 = _1619;
        _1780 = _1634;
        _1781 = _1633;
        _1782 = _1632;
        _1783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
    }
    else
    {
        _1770 = _1771;
        _1772 = _1771;
        _1773 = _1771;
        _1774 = _1771;
        _1775 = _1771;
        _1776 = _1771;
        _1777 = _1771;
        _1778 = _1771;
        _1779 = _1771;
        _1780 = _1771;
        _1781 = _1771;
        _1782 = _1771;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    float _2092;
    float _2093;
    float _2094;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1811 = fma(_1441, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433));
        float _1815 = fma(_1441, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433));
        float _1819 = fma(_1441, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433));
        float _1842 = _1433 + _1192;
        float _1843 = _1437 + _1193;
        float _1844 = _1441 + _1194;
        float _1854 = fma(_1844, cbModelParam._m0[30u].z, fma(_1843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1842)) - _1811;
        float _1855 = fma(_1844, cbModelParam._m0[31u].z, fma(_1843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1842)) - _1815;
        float _1856 = fma(_1844, cbModelParam._m0[32u].z, fma(_1843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1842)) - _1819;
        float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
        float _1873 = ((_1860 * _1854) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1811 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1874 = ((_1860 * _1855) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1815 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1875 = ((_1860 * _1856) / cbModelParam._m0[35u].z) + ((((((_1819 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1877 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1873, _1874, _1875), 0.0);
        vec4 _1884 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1873, _1874, _1875), 0.0);
        vec4 _1891 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1873, _1874, _1875), 0.0);
        vec4 _1898 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1873, _1874, _1875), 0.0);
        float _1910 = exp2((_1877.w + (-0.5)) * 20.0) * 2.0;
        float _1911 = _1910 * (_1877.x + (-0.5));
        float _1912 = _1910 * (_1877.y + (-0.5));
        float _1913 = _1910 * (_1877.z + (-0.5));
        float _1920 = exp2((_1884.w + (-0.5)) * 20.0) * 2.0;
        float _1921 = _1920 * (_1884.x + (-0.5));
        float _1922 = _1920 * (_1884.y + (-0.5));
        float _1923 = _1920 * (_1884.z + (-0.5));
        float _1930 = exp2((_1891.w + (-0.5)) * 20.0) * 2.0;
        float _1931 = _1930 * (_1891.x + (-0.5));
        float _1932 = _1930 * (_1891.y + (-0.5));
        float _1933 = _1930 * (_1891.z + (-0.5));
        float _1940 = exp2((_1898.w + (-0.5)) * 20.0) * 2.0;
        float _1941 = _1940 * (_1898.x + (-0.5));
        float _1942 = _1940 * (_1898.y + (-0.5));
        float _1943 = _1940 * (_1898.z + (-0.5));
        float _1944 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1945 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1946 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1911 * 0.5;
        float _1948 = _1921 * 0.5;
        float _1949 = _1931 * 0.5;
        float _1950 = dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949));
        float _1955 = (_1950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1950);
        float _1963 = (dot(vec3(_1192, _1193, _1194), vec3(_1955 * _1947, _1955 * _1948, _1955 * _1949)) + 1.0) * 0.5;
        float _4567 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1972 = sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949)) / (_1944 + 9.9999997473787516355514526367188e-06);
        float _4578 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1974 = _1973 * 2.0;
        float _1978 = (1.0 - _1973) / (_1973 + 1.0);
        float _4589 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1988 = ((((1.0 - _1979) * (_1974 + 2.0)) * exp2(log2(isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_1974 + 1.0))) + _1979) * _1944;
        float _1989 = _1912 * 0.5;
        float _1990 = _1922 * 0.5;
        float _1991 = _1932 * 0.5;
        float _1992 = dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991));
        float _1997 = (_1992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1992);
        float _2005 = (dot(vec3(_1192, _1193, _1194), vec3(_1997 * _1989, _1997 * _1990, _1997 * _1991)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2014 = sqrt(((_1990 * _1990) + (_1989 * _1989)) + (_1991 * _1991)) / (_1945 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2016 = _2015 * 2.0;
        float _2020 = (1.0 - _2015) / (_2015 + 1.0);
        float _4622 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2021 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2030 = ((((1.0 - _2021) * (_2016 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2016 + 1.0))) + _2021) * _1945;
        float _2031 = _1913 * 0.5;
        float _2032 = _1923 * 0.5;
        float _2033 = _1933 * 0.5;
        float _2034 = dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033));
        float _2039 = (_2034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2034);
        float _2047 = (dot(vec3(_1192, _1193, _1194), vec3(_2039 * _2031, _2039 * _2032, _2039 * _2033)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2056 = sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033)) / (_1946 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2058 = _2057 * 2.0;
        float _2062 = (1.0 - _2057) / (_2057 + 1.0);
        float _4655 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2072 = ((((1.0 - _2063) * (_2058 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2058 + 1.0))) + _2063) * _1946;
        _2080 = _1913;
        _2081 = _1912;
        _2082 = _1911;
        _2083 = _1923;
        _2084 = _1922;
        _2085 = _1921;
        _2086 = _1933;
        _2087 = _1932;
        _2088 = _1931;
        _2089 = _1946;
        _2090 = _1945;
        _2091 = _1944;
        _2092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)));
        _2093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)));
        _2094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)));
    }
    else
    {
        _2080 = _1771;
        _2081 = _1771;
        _2082 = _1771;
        _2083 = _1771;
        _2084 = _1771;
        _2085 = _1771;
        _2086 = _1771;
        _2087 = _1771;
        _2088 = _1771;
        _2089 = _1771;
        _2090 = _1771;
        _2091 = _1771;
        _2092 = 0.0;
        _2093 = 0.0;
        _2094 = 0.0;
    }
    float _2104 = (cbModelParam._m0[1u].x * (_2092 - _1783)) + _1783;
    float _2105 = (cbModelParam._m0[1u].x * (_2093 - _1784)) + _1784;
    float _2106 = (cbModelParam._m0[1u].x * (_2094 - _1785)) + _1785;
    float _2127 = fma(_2106, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2106, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2106, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2104));
    float _2148 = _1377 * 0.5;
    float _2149 = _1378 * 0.5;
    float _2150 = _1379 * 0.5;
    float _2151 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_2082, _2085, _2088, _2091));
    float _2154 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_2081, _2084, _2087, _2090));
    float _2157 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_2080, _2083, _2086, _2089));
    float _2191;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2164 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_1770, _1774, _1777, _1780));
        float _2168 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_1772, _1775, _1778, _1781));
        float _2172 = dot(vec4(_2148, _2149, _2150, 1.0), vec4(_1773, _1776, _1779, _1782));
        float _2179 = dot(vec4(cbModelParam._m0[39u]), vec4(_2148, _2149, _2150, 1.0));
        _2191 = dot(vec3(isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0)), isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0)), isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2179) ? 0.0 : (isnan(0.0) ? _2179 : max(0.0, _2179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2191 = 1.0;
    }
    float _2202;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2193 = dot(vec4(cbModelParam._m0[40u]), vec4(_2148, _2149, _2150, 1.0));
        _2202 = dot(vec3(isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)), isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0)), isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2193) ? 0.0 : (isnan(0.0) ? _2193 : max(0.0, _2193))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2202 = 1.0;
    }
    float _2206 = (_2202 * cbModelParam._m0[1u].x) + (_2191 * (1.0 - cbModelParam._m0[1u].x));
    float _2216 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1195);
    float _2217 = isnan(_2216) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2216 : min(cbModelParam._m0[25u].z, _2216));
    float _2297;
    float _2299;
    float _2301;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2264 = fma(_1441, cbModelParam._m0[13u].z, fma(_1437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1433)) + cbModelParam._m0[13u].w;
        float _2268 = fma(_1441, cbModelParam._m0[14u].z, fma(_1437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1433)) + cbModelParam._m0[14u].w;
        float _2272 = fma(_1441, cbModelParam._m0[15u].z, fma(_1437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1433)) + cbModelParam._m0[15u].w;
        float _2275 = fma(_1379, cbModelParam._m0[13u].z, fma(_1378, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1377));
        float _2278 = fma(_1379, cbModelParam._m0[14u].z, fma(_1378, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1377));
        float _2281 = fma(_1379, cbModelParam._m0[15u].z, fma(_1378, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1377));
        float _2309;
        if (_2275 > 0.0)
        {
            _2309 = abs((1.0 - _2264) / _2275);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2275 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2264 + 1.0) / _2275);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2309 = frontier_phi_17_15_ladder;
        }
        float _2512;
        if (_2278 > 0.0)
        {
            _2512 = abs((1.0 - _2268) / _2278);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2278 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2268 + 1.0) / _2278);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2512 = frontier_phi_26_22_ladder;
        }
        float _2766;
        if (_2281 > 0.0)
        {
            _2766 = abs((1.0 - _2272) / _2281);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2281 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2272 + 1.0) / _2281);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2766 = frontier_phi_38_33_ladder;
        }
        float _2768 = isnan(_2512) ? _2309 : (isnan(_2309) ? _2512 : min(_2309, _2512));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2275) + _2264;
        float _2774 = (_2769 * _2278) + _2268;
        float _2775 = (_2769 * _2281) + _2272;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2776;
        float _2780 = _2776 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 > _2780) || ((_2774 < _2778) || ((_2773 < _2778) || (_2773 > _2780))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2775, cbModelParam._m0[9u].z, fma(_2774, cbModelParam._m0[9u].y, _2773 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2775, cbModelParam._m0[10u].z, fma(_2774, cbModelParam._m0[10u].y, _2773 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2775, cbModelParam._m0[11u].z, fma(_2774, cbModelParam._m0[11u].y, _2773 * cbModelParam._m0[11u].x))), _2217);
            frontier_phi_16_38_ladder = _2903.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2903.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2903.x * cbModelParam._m0[1u].y;
        }
        _2297 = frontier_phi_16_38_ladder_2;
        _2299 = frontier_phi_16_38_ladder_1;
        _2301 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1377, _1378, _1379), _2217);
        _2297 = _2285.x * cbModelParam._m0[1u].y;
        _2299 = _2285.y * cbModelParam._m0[1u].y;
        _2301 = _2285.z * cbModelParam._m0[1u].y;
    }
    float _2305 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1195);
    float _2306 = isnan(_2305) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2305 : min(cbModelParam._m0[25u].w, _2305));
    float _2396;
    float _2398;
    float _2400;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2360 = fma(_1441, cbModelParam._m0[21u].z, fma(_1437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1433)) + cbModelParam._m0[21u].w;
        float _2364 = fma(_1441, cbModelParam._m0[22u].z, fma(_1437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1433)) + cbModelParam._m0[22u].w;
        float _2368 = fma(_1441, cbModelParam._m0[23u].z, fma(_1437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1433)) + cbModelParam._m0[23u].w;
        float _2371 = fma(_1379, cbModelParam._m0[21u].z, fma(_1378, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1377));
        float _2374 = fma(_1379, cbModelParam._m0[22u].z, fma(_1378, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1377));
        float _2377 = fma(_1379, cbModelParam._m0[23u].z, fma(_1378, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1377));
        float _2517;
        if (_2371 > 0.0)
        {
            _2517 = abs((1.0 - _2360) / _2371);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2371 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2360 + 1.0) / _2371);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2517 = frontier_phi_28_24_ladder;
        }
        float _2793;
        if (_2374 > 0.0)
        {
            _2793 = abs((1.0 - _2364) / _2374);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2374 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2364 + 1.0) / _2374);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2793 = frontier_phi_40_35_ladder;
        }
        float _3006;
        if (_2377 > 0.0)
        {
            _3006 = abs((1.0 - _2368) / _2377);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2377 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2368 + 1.0) / _2377);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3006 = frontier_phi_49_46_ladder;
        }
        float _3008 = isnan(_2793) ? _2517 : (isnan(_2517) ? _2793 : min(_2517, _2793));
        float _3009 = isnan(_3006) ? _3008 : (isnan(_3008) ? _3006 : min(_3008, _3006));
        float _3013 = (_3009 * _2371) + _2360;
        float _3014 = (_3009 * _2374) + _2364;
        float _3015 = (_3009 * _2377) + _2368;
        float _3016 = _3009 * 9.9999997473787516355514526367188e-05;
        float _3017 = (-1.0) - _3016;
        float _3019 = _3016 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3015 > _3019) || ((_3015 < _3017) || ((_3014 > _3019) || ((_3014 < _3017) || ((_3013 < _3017) || (_3013 > _3019))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3214 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3015, cbModelParam._m0[17u].z, fma(_3014, cbModelParam._m0[17u].y, _3013 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3015, cbModelParam._m0[18u].z, fma(_3014, cbModelParam._m0[18u].y, _3013 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3015, cbModelParam._m0[19u].z, fma(_3014, cbModelParam._m0[19u].y, _3013 * cbModelParam._m0[19u].x))), _2306);
            frontier_phi_25_49_ladder = _3214.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3214.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3214.x * cbModelParam._m0[1u].z;
        }
        _2396 = frontier_phi_25_49_ladder_2;
        _2398 = frontier_phi_25_49_ladder_1;
        _2400 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1377, _1378, _1379), _2306);
        _2396 = _2380.x * cbModelParam._m0[1u].z;
        _2398 = _2380.y * cbModelParam._m0[1u].z;
        _2400 = _2380.z * cbModelParam._m0[1u].z;
    }
    float _2413 = (((_1404 * _1353) + _1405) * _1369) * ((cbModelParam._m0[1u].w * (_2396 - _2297)) + _2297);
    float _2415 = (((_1404 * _1355) + _1405) * _1369) * ((cbModelParam._m0[1u].w * (_2398 - _2299)) + _2299);
    float _2417 = (((_1404 * _1356) + _1405) * _1369) * ((cbModelParam._m0[1u].w * (_2400 - _2301)) + _2301);
    float _2420 = fma(_2417, cbSceneParam._m0[89u].z, fma(_2415, cbSceneParam._m0[89u].y, _2413 * cbSceneParam._m0[89u].x));
    float _2423 = fma(_2417, cbSceneParam._m0[90u].z, fma(_2415, cbSceneParam._m0[90u].y, _2413 * cbSceneParam._m0[90u].x));
    float _2426 = fma(_2417, cbSceneParam._m0[91u].z, fma(_2415, cbSceneParam._m0[91u].y, _2413 * cbSceneParam._m0[91u].x));
    uvec4 _2436 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2438 = _2436.x * 14u;
    uint _2439 = _2438 + 13u;
    float _2446 = _1369 + (-1.0);
    float _2451 = (cbLight._m0[_2439].x * _2446) + 1.0;
    float _2452 = (cbLight._m0[_2439].y * _2446) + 1.0;
    float _2453 = (cbLight._m0[_2439].z * _2446) + 1.0;
    float _2454 = (cbLight._m0[_2439].w * _2446) + 1.0;
    uint _2455 = _2438 + 5u;
    float _2461 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
    uint _2465 = _2438 + 4u;
    float _2471 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
    uint _2475 = _2438 | 1u;
    float _2486 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_1192, _1193, _1194));
    float _2489 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_1192, _1193, _1194));
    float _4791 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _4802 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * 0.3183098733425140380859375;
    float _2496 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2503 = ((cbLight._m0[_2455].x * _2461) * _2496) + ((cbLight._m0[_2465].x * _2471) * _2494);
    float _2504 = ((_2461 * cbLight._m0[_2455].y) * _2496) + ((_2471 * cbLight._m0[_2465].y) * _2494);
    float _2505 = ((_2461 * cbLight._m0[_2455].z) * _2496) + ((_2471 * cbLight._m0[_2465].z) * _2494);
    uvec4 _2509 = floatBitsToUint(cbLight._m0[_2438 + 12u]);
    bool _2511 = _2509.x == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2511)
    {
        _2522 = _2503;
        _2524 = _2504;
        _2526 = _2505;
    }
    else
    {
        uint _2530 = _2438 + 6u;
        float _2546 = (dot(vec3(cbLight._m0[_2438 + 2u].xyz), vec3(_1192, _1193, _1194)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4813 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2549 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2522 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2503;
        _2524 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2504;
        _2526 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2505;
    }
    bool _2529 = _2509.y == 0u;
    float _2567;
    float _2569;
    float _2571;
    if (_2529)
    {
        _2567 = _2522;
        _2569 = _2524;
        _2571 = _2526;
    }
    else
    {
        uint _2737 = _2438 + 7u;
        float _2753 = (dot(vec3(cbLight._m0[_2438 + 3u].xyz), vec3(_1192, _1193, _1194)) * 0.5) + 0.5;
        float _2754 = _2753 * _2753;
        float _4829 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2755 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2756 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2567 = (((cbLight._m0[_2737].x * 0.3183098733425140380859375) * _2755) * _2756) + _2522;
        _2569 = (((cbLight._m0[_2737].y * 0.3183098733425140380859375) * _2755) * _2756) + _2524;
        _2571 = (((cbLight._m0[_2737].z * 0.3183098733425140380859375) * _2755) * _2756) + _2526;
    }
    uint _2574 = _2438 + 8u;
    float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _1195) * 0.949999988079071044921875);
    float _2588 = _2587 * _2587;
    float _2589 = cbLight._m0[_2438].x + _1271;
    float _2590 = cbLight._m0[_2438].y + _1272;
    float _2591 = cbLight._m0[_2438].z + _1273;
    float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
    float _2596 = _2595 * _2589;
    float _2597 = _2595 * _2590;
    float _2598 = _2595 * _2591;
    float _2599 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2438].xyz));
    float _4845 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _4856 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
    float _2603 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2604 = dot(vec3(_1192, _1193, _1194), vec3(_2596, _2597, _2598));
    float _4867 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2608 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2596, _2597, _2598));
    float _4878 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2612 = _2588 * _2588;
    float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
    float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
    float _2625 = 0.959999978542327880859375 - _1350;
    float _2627 = 0.959999978542327880859375 - _1351;
    float _2628 = 0.959999978542327880859375 - _1352;
    float _2635 = 1.0 - _2588;
    float _2646 = (0.5 / (((_2603 * ((_2602 * _2635) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2603 * _2635) + _2588) * _2602))) * _2602;
    float _4889 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
    uint _2659 = _2438 + 9u;
    float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _1195) * 0.949999988079071044921875);
    float _2671 = _2670 * _2670;
    float _2672 = cbLight._m0[_2475].x + _1271;
    float _2673 = cbLight._m0[_2475].y + _1272;
    float _2674 = cbLight._m0[_2475].z + _1273;
    float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
    float _2679 = _2678 * _2672;
    float _2680 = _2678 * _2673;
    float _2681 = _2678 * _2674;
    float _2682 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2475].xyz));
    float _4900 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2686 = dot(vec3(_1192, _1193, _1194), vec3(_2679, _2680, _2681));
    float _4911 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2679, _2680, _2681));
    float _4922 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2671 * _2671;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
    float _2712 = 1.0 - _2671;
    float _2722 = (0.5 / (((_2603 * ((_2685 * _2712) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2603 * _2712) + _2671) * _2685))) * _2685;
    float _4933 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2724 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    float _2734 = (((((_2705 * _2625) + _1353) * cbLight._m0[_2659].x) * _2724) * _2461) + (((((_2624 * _2625) + _1353) * cbLight._m0[_2574].x) * _2648) * _2471);
    float _2735 = (((((_2705 * _2627) + _1355) * cbLight._m0[_2659].y) * _2724) * _2461) + (((((_2624 * _2627) + _1355) * cbLight._m0[_2574].y) * _2648) * _2471);
    float _2736 = (((((_2705 * _2628) + _1356) * cbLight._m0[_2659].z) * _2724) * _2461) + (((((_2624 * _2628) + _1356) * cbLight._m0[_2574].z) * _2648) * _2471);
    float _2798;
    float _2800;
    float _2802;
    if (_2511)
    {
        _2798 = _2734;
        _2800 = _2735;
        _2802 = _2736;
    }
    else
    {
        uint _2804 = _2438 + 2u;
        uint _2808 = _2438 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _1195) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _1271;
        float _2825 = cbLight._m0[_2804].y + _1272;
        float _2826 = cbLight._m0[_2804].z + _1273;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2804].xyz));
        float _4944 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2838 = dot(vec3(_1192, _1193, _1194), vec3(_2831, _2832, _2833));
        float _4955 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4966 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2603 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2603 * _2864) + _2823) * _2837))) * _2837;
        float _4977 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2798 = (((((_2857 * _2625) + _1353) * cbLight._m0[_2808].x) * _2876) * _2877) + _2734;
        _2800 = (((((_2857 * _2627) + _1355) * cbLight._m0[_2808].y) * _2876) * _2877) + _2735;
        _2802 = (((((_2857 * _2628) + _1356) * cbLight._m0[_2808].z) * _2876) * _2877) + _2736;
    }
    float _2912;
    float _2914;
    float _2916;
    if (_2529)
    {
        _2912 = _2798;
        _2914 = _2800;
        _2916 = _2802;
    }
    else
    {
        uint _2923 = _2438 + 3u;
        uint _2927 = _2438 + 11u;
        float _2941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2923].w)) * _1195) * 0.949999988079071044921875);
        float _2942 = _2941 * _2941;
        float _2943 = cbLight._m0[_2923].x + _1271;
        float _2944 = cbLight._m0[_2923].y + _1272;
        float _2945 = cbLight._m0[_2923].z + _1273;
        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
        float _2950 = _2949 * _2943;
        float _2951 = _2949 * _2944;
        float _2952 = _2949 * _2945;
        float _2953 = dot(vec3(_1192, _1193, _1194), vec3(cbLight._m0[_2923].xyz));
        float _4993 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _2957 = dot(vec3(_1192, _1193, _1194), vec3(_2950, _2951, _2952));
        float _5004 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _2961 = dot(vec3(cbLight._m0[_2923].xyz), vec3(_2950, _2951, _2952));
        float _5015 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2965 = _2942 * _2942;
        float _2969 = ((_2960 * _2960) * (_2965 + (-1.0))) + 1.0;
        float _2976 = exp2(log2(1.0 - (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) * 5.0);
        float _2983 = 1.0 - _2942;
        float _2993 = (0.5 / (((_2603 * ((_2956 * _2983) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2603 * _2983) + _2942) * _2956))) * _2956;
        float _5026 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2995 = (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2965 / ((_2969 * _2969) * 3.141590118408203125));
        float _2996 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2912 = (((((_2976 * _2625) + _1353) * cbLight._m0[_2927].x) * _2995) * _2996) + _2798;
        _2914 = (((((_2976 * _2627) + _1355) * cbLight._m0[_2927].y) * _2995) * _2996) + _2800;
        _2916 = (((((_2976 * _2628) + _1356) * cbLight._m0[_2927].z) * _2995) * _2996) + _2802;
    }
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    if (_2436.y == 0u)
    {
        float _3071 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3071;
        float _3073 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3071;
        float _3074 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3071;
        uvec4 _3086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3087 = _3086.x;
        uint _3098 = uint((float(_3086.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1292) / _3087))) + floor(float(uint(cbSceneParam._m0[85u].x * _1291) / _3087)));
        float _3108 = (log2(_3074 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3109 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        uint _3112 = uint(isnan(14.0) ? _3109 : (isnan(_3109) ? 14.0 : min(_3109, 14.0)));
        uvec4 _3117 = texelFetch(g_lightClusterGridBuffer, int(((_3112 << 2u) + (_3098 << 6u)) >> 2u));
        uint _3118 = _3117.x;
        uint _3119 = _3086.z;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((((1u << ((_3119 >> 4u) & 15u)) + 4294967295u) & _3118) == 0u) || ((_3119 & 240u) == 0u))
        {
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
        }
        else
        {
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            uint _3377 = 0u;
            uint _3386;
            bool _3387;
            for (;;)
            {
                _3386 = texelFetch(g_lightClassification, int((((_3112 << 5u) + (_3098 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                _3387 = _3386 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3387)
                {
                    frontier_phi_66_pred = _3371;
                    frontier_phi_66_pred_1 = _3376;
                    frontier_phi_66_pred_2 = _3375;
                    frontier_phi_66_pred_3 = _3374;
                    frontier_phi_66_pred_4 = _3373;
                    frontier_phi_66_pred_5 = _3372;
                }
                else
                {
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    uint _3522;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3386;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    for (;;)
                    {
                        uint _3526 = uint(findLSB(_3522)) + (_3377 << 5u);
                        uint _3523 = (_3522 + 4294967295u) & _3522;
                        uint _3528 = _3526 * 48u;
                        vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3528)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 3u)).x));
                        uint _3548 = (_3526 * 48u) + 4u;
                        vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3548)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 3u)).x));
                        uint _3567 = (_3526 * 48u) + 8u;
                        vec3 _3578 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x));
                        float _3582 = _3542.x - _3072;
                        float _3583 = _3542.y - _3073;
                        float _3584 = _3542.z - _3074;
                        float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                        float _3588 = inversesqrt(_3585);
                        float _3589 = _3588 * _3582;
                        float _3590 = _3588 * _3583;
                        float _3591 = _3588 * _3584;
                        float _3592 = dot(vec3(_1310, _1313, _1316), vec3(_3589, _3590, _3591));
                        float _3597 = 1.0 - (_3585 * _3542.w);
                        float _5052 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3598 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                        float _3599 = sqrt(_3585) * _3561.w;
                        float _3602 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3592) + _3603;
                        float _3609 = _3599 * _3599;
                        float _3613 = ((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3598) / ((_3609 * 0.699999988079071044921875) + 1.0);
                        float _3617 = (-0.0) - _3072;
                        float _3618 = (-0.0) - _3073;
                        float _3619 = (-0.0) - _3074;
                        float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                        float _3624 = _3623 * _3617;
                        float _3625 = _3623 * _3618;
                        float _3626 = _3623 * _3619;
                        float _3634 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                        float _3635 = 1.0 - _1385;
                        float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                        float _3643 = _3642 * _3642;
                        float _3644 = _3643 * _3643;
                        float _3645 = _3624 + _3589;
                        float _3646 = _3625 + _3590;
                        float _3647 = _3626 + _3591;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3655 = dot(vec3(_1310, _1313, _1316), vec3(_3624, _3625, _3626));
                        float _5068 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3659 = dot(vec3(_1310, _1313, _1316), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                        float _5079 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                        float _3667 = _3602 * _3643;
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3592) + _3668;
                        float _5090 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3672 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3673 = 1.0 - _3643;
                        float _3683 = (0.5 / (((_3672 * ((_3658 * _3673) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3643) * _3658))) * _3672;
                        float _5101 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3694 = (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)))) / ((_3666 * _3666) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125))) * _3598;
                        _3446 = (_3613 * _3561.x) + _3519;
                        _3447 = (_3613 * _3561.y) + _3520;
                        _3448 = (_3613 * _3561.z) + _3521;
                        _3443 = (_3694 * _3578.x) + _3516;
                        _3444 = (_3694 * _3578.y) + _3517;
                        _3445 = (_3694 * _3578.z) + _3518;
                        if (_3523 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3523;
                        }
                    }
                    frontier_phi_66_pred = _3443;
                    frontier_phi_66_pred_1 = _3448;
                    frontier_phi_66_pred_2 = _3447;
                    frontier_phi_66_pred_3 = _3446;
                    frontier_phi_66_pred_4 = _3445;
                    frontier_phi_66_pred_5 = _3444;
                }
                _3220 = frontier_phi_66_pred;
                _3230 = frontier_phi_66_pred_1;
                _3228 = frontier_phi_66_pred_2;
                _3226 = frontier_phi_66_pred_3;
                _3224 = frontier_phi_66_pred_4;
                _3222 = frontier_phi_66_pred_5;
                uint _3378 = _3377 + 1u;
                if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3371 = _3220;
                    _3372 = _3222;
                    _3373 = _3224;
                    _3374 = _3226;
                    _3375 = _3228;
                    _3376 = _3230;
                    _3377 = _3378;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
        }
        uvec4 _3233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3234 = _3233.z;
        uint _3236 = (_3234 >> 8u) & 15u;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        if (((4294967295u << _3236) & _3118) == 0u)
        {
            _3339 = _3219;
            _3341 = _3221;
            _3343 = _3223;
            _3345 = _3225;
            _3347 = _3227;
            _3349 = _3229;
        }
        else
        {
            float _3364 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
            float _3365 = _3364 * _3072;
            float _3366 = _3364 * _3073;
            float _3367 = _3364 * _3074;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3236 < ((_3234 >> 12u) & 15u))
            {
                float _3340;
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3499 = _3219;
                float _3500 = _3221;
                float _3501 = _3223;
                float _3502 = _3225;
                float _3503 = _3227;
                float _3504 = _3229;
                uint _3505 = _3236;
                uint _3514;
                bool _3515;
                for (;;)
                {
                    _3514 = texelFetch(g_lightClassification, int((((_3112 << 5u) + (_3098 << 9u)) + (_3505 << 2u)) >> 2u)).x;
                    _3515 = _3514 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3515)
                    {
                        frontier_phi_77_pred = _3504;
                        frontier_phi_77_pred_1 = _3503;
                        frontier_phi_77_pred_2 = _3502;
                        frontier_phi_77_pred_3 = _3501;
                        frontier_phi_77_pred_4 = _3500;
                        frontier_phi_77_pred_5 = _3499;
                    }
                    else
                    {
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _3721 = _3499;
                        float _3722 = _3500;
                        float _3723 = _3501;
                        float _3724 = _3502;
                        float _3725 = _3503;
                        float _3726 = _3504;
                        uint _3727 = _3514;
                        uint _3728;
                        vec4 _3753;
                        float _3754;
                        vec4 _3769;
                        vec3 _3781;
                        vec4 _3796;
                        vec4 _3811;
                        float _3857;
                        bool _3858;
                        for (;;)
                        {
                            uint _3738 = ((_3505 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3727));
                            _3728 = (_3727 + 4294967295u) & _3727;
                            uint _3740 = _3738 * 40u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            _3754 = _3753.w;
                            uint _3756 = (_3738 * 40u) + 4u;
                            _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3771 = (_3738 * 40u) + 8u;
                            _3781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x));
                            uint _3783 = (_3738 * 40u) + 16u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3738 * 40u) + 20u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3738 * 40u) + 24u;
                            vec4 _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3832 = (_3738 * 40u) + 28u;
                            vec4 _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            _3857 = fma(_3074, _3845.z, fma(_3073, _3845.y, _3845.x * _3072)) + _3845.w;
                            _3858 = !((fma(_3074, _3826.z, fma(_3073, _3826.y, _3826.x * _3072)) + _3826.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3858)
                            {
                                float _3885 = _3753.x - _3072;
                                float _3886 = _3753.y - _3073;
                                float _3887 = _3753.z - _3074;
                                float _3888 = dot(vec3(_3885, _3886, _3887), vec3(_3885, _3886, _3887));
                                float _3891 = inversesqrt(_3888);
                                float _3892 = _3891 * _3885;
                                float _3893 = _3891 * _3886;
                                float _3894 = _3891 * _3887;
                                float _3898 = 1.0 - (_3888 / (_3754 * _3754));
                                float _5112 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3903 = sqrt(_3888) * _3769.w;
                                float _3905 = 1.39999997615814208984375 / (_3903 + 1.39999997615814208984375);
                                float _3906 = _3905 * _3905;
                                float _3909 = ((1.0 - _3906) * dot(vec3(_3892, _3893, _3894), vec3(_1310, _1313, _1316))) + _3906;
                                float _3912 = _3903 * _3903;
                                float _3916 = (fma(_3074, _3796.z, fma(_3073, _3796.y, _3796.x * _3072)) + _3796.w) / _3857;
                                float _3917 = (fma(_3074, _3811.z, fma(_3073, _3811.y, _3811.x * _3072)) + _3811.w) / _3857;
                                float _3921 = 1.0 - dot(vec2(_3916, _3917), vec2(_3916, _3917));
                                float _5128 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3923 = _3922 * (((isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0))) * _3899) / ((_3912 * 0.699999988079071044921875) + 1.0));
                                float _3935 = exp2(log2(1.0 / ((_3912 * 3.5) + 5.0)) * 0.25);
                                float _3936 = 1.0 - _1385;
                                float _3943 = sqrt(1.0 - ((1.0 - (_3936 * _3936)) * (1.0 - (_3935 * _3935))));
                                float _3944 = _3943 * _3943;
                                float _3945 = _3944 * _3944;
                                float _3946 = _3892 - _3365;
                                float _3947 = _3893 - _3366;
                                float _3948 = _3894 - _3367;
                                float _3952 = inversesqrt(dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948)));
                                float _3956 = dot(vec3(_1310, _1313, _1316), vec3((-0.0) - _3365, (-0.0) - _3366, (-0.0) - _3367));
                                float _5139 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3959 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3960 = dot(vec3(_1310, _1313, _1316), vec3(_3952 * _3946, _3952 * _3947, _3952 * _3948));
                                float _5150 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3963 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3967 = ((_3963 * _3963) * (_3945 + (-1.0))) + 1.0;
                                float _3968 = _3905 * _3944;
                                float _3969 = _3968 * _3968;
                                float _3975 = ((1.0 - _3969) * dot(vec3(_1310, _1313, _1316), vec3(_3892, _3893, _3894))) + _3969;
                                float _5161 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3976 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3977 = 1.0 - _3944;
                                float _3987 = (0.5 / (((_3976 * ((_3959 * _3977) + _3944)) + 9.9999999392252902907785028219223e-09) + (((_3976 * _3977) + _3944) * _3959))) * _3976;
                                float _5172 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3997 = (_3922 * _3899) * (((_3945 * 3.1415927410125732421875) * (isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0)))) / ((_3967 * _3967) * ((_3912 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3923 * _3769.y;
                                frontier_phi_83_pred_1 = _3923 * _3769.x;
                                frontier_phi_83_pred_2 = _3997 * _3781.z;
                                frontier_phi_83_pred_3 = _3997 * _3781.y;
                                frontier_phi_83_pred_4 = _3997 * _3781.x;
                                frontier_phi_83_pred_5 = _3923 * _3769.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4005 = frontier_phi_83_pred;
                            _4004 = frontier_phi_83_pred_1;
                            _4003 = frontier_phi_83_pred_2;
                            _4002 = frontier_phi_83_pred_3;
                            _4001 = frontier_phi_83_pred_4;
                            _4006 = frontier_phi_83_pred_5;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            if (_3728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3728;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3713;
                        frontier_phi_77_pred_1 = _3712;
                        frontier_phi_77_pred_2 = _3711;
                        frontier_phi_77_pred_3 = _3710;
                        frontier_phi_77_pred_4 = _3709;
                        frontier_phi_77_pred_5 = _3708;
                    }
                    _3350 = frontier_phi_77_pred;
                    _3348 = frontier_phi_77_pred_1;
                    _3346 = frontier_phi_77_pred_2;
                    _3344 = frontier_phi_77_pred_3;
                    _3342 = frontier_phi_77_pred_4;
                    _3340 = frontier_phi_77_pred_5;
                    uint _3506 = _3505 + 1u;
                    if (_3506 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3499 = _3340;
                        _3500 = _3342;
                        _3501 = _3344;
                        _3502 = _3346;
                        _3503 = _3348;
                        _3504 = _3350;
                        _3505 = _3506;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3344;
                frontier_phi_58_59_ladder_1 = _3350;
                frontier_phi_58_59_ladder_2 = _3348;
                frontier_phi_58_59_ladder_3 = _3346;
                frontier_phi_58_59_ladder_4 = _3342;
                frontier_phi_58_59_ladder_5 = _3340;
            }
            else
            {
                frontier_phi_58_59_ladder = _3223;
                frontier_phi_58_59_ladder_1 = _3229;
                frontier_phi_58_59_ladder_2 = _3227;
                frontier_phi_58_59_ladder_3 = _3225;
                frontier_phi_58_59_ladder_4 = _3221;
                frontier_phi_58_59_ladder_5 = _3219;
            }
            _3339 = frontier_phi_58_59_ladder_5;
            _3341 = frontier_phi_58_59_ladder_4;
            _3343 = frontier_phi_58_59_ladder;
            _3345 = frontier_phi_58_59_ladder_3;
            _3347 = frontier_phi_58_59_ladder_2;
            _3349 = frontier_phi_58_59_ladder_1;
        }
        float _3354 = isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0));
        _3131 = (_3354 * _3345) + _2567;
        _3133 = (_3354 * _3347) + _2569;
        _3135 = (_3354 * _3349) + _2571;
        _3137 = ((_3339 * _1353) * _3354) + _2912;
        _3139 = ((_3341 * _1355) * _3354) + _2914;
        _3141 = ((_3343 * _1356) * _3354) + _2916;
    }
    else
    {
        _3131 = _2567;
        _3133 = _2569;
        _3135 = _2571;
        _3137 = _2912;
        _3139 = _2914;
        _3141 = _2916;
    }
    float _5188 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _5199 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _5210 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _3158 = ((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3131 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1369))) + ((_3137 + ((isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0))) * _2206)) * cbPerFrame._m0[3u].x);
    float _3159 = ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3133 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1369))) + ((_3139 + ((isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0))) * _2206)) * cbPerFrame._m0[3u].x);
    float _3160 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3135 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1369))) + ((_3141 + ((isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0))) * _2206)) * cbPerFrame._m0[3u].x);
    uint _3161 = _301 + 6u;
    float _3169 = _1291 / cbSceneParam._m0[86u].x;
    float _3170 = _1292 / cbSceneParam._m0[86u].y;
    vec4 _3184 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3169, _3170, (log2((isnan(cbSceneParam._m0[77u].w) ? _1214 : (isnan(_1214) ? cbSceneParam._m0[77u].w : min(_1214, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3186 = _3184.x;
    float _3187 = _3184.y;
    float _3188 = _3184.z;
    float _3189 = _3184.w;
    float _3281;
    float _3283;
    float _3285;
    float _3287;
    if (_1214 > cbSceneParam._m0[78u].w)
    {
        float _3244 = isnan(_1214) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1214 : min(cbSceneParam._m0[80u].w, _1214));
        float _3245 = _3244 / _1214;
        float _3256 = _3245 * _1264;
        float _3257 = _1265 * _3245;
        float _3258 = (-0.0) - _3257;
        float _3259 = _3245 * _1266;
        float _3261 = (cbSceneParam._m0[77u].w * _3258) / _3244;
        float _3262 = _3261 + cbSceneParam._m0[79u].w;
        float _3263 = cbSceneParam._m0[79u].w - _3257;
        float _3269 = sqrt(((_3256 * _3256) + (_3257 * _3257)) + (_3259 * _3259));
        float _3272 = (1.0 - (cbSceneParam._m0[77u].w / _3244)) * _3269;
        float _3277 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3279 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3456;
        if (abs((_3258 - _3261) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3456 = ((((_3262 > 0.0) ? exp2(_3277 * _3262) : (2.0 - exp2(_3279 * _3262))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3272;
        }
        else
        {
            float _3400 = 1.0 / cbSceneParam._m0[80u].x;
            float _3401 = isnan(_3263) ? _3262 : (isnan(_3262) ? _3263 : max(_3262, _3263));
            float _3402 = isnan(_3263) ? _3262 : (isnan(_3262) ? _3263 : min(_3262, _3263));
            float _3411 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : min(_3401, 0.0));
            float _3412 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : min(_3402, 0.0));
            _3456 = ((abs(_3269 / _3258) * cbSceneParam._m0[80u].y) * ((((_3411 - _3412) * 2.0) - ((exp2(_3277 * (isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0)))) - exp2(_3277 * (isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))))) * _3400)) - ((exp2(_3279 * _3411) - exp2(_3279 * _3412)) * _3400))) + (_3272 * cbSceneParam._m0[80u].z);
        }
        vec4 _3458 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3169, _3170, 1.0), 0.0);
        float _3467 = exp2((_3456 * (-1.44269502162933349609375)) * (1.0 - _3458.w));
        float _3468 = log2(_3467);
        float _3484 = log2(_3189);
        _3281 = (exp2(_3484 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3468 * cbSceneParam._m0[78u].x)) * _3458.x) / cbSceneParam._m0[78u].x)) + _3186;
        _3283 = (exp2(_3484 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3468 * cbSceneParam._m0[78u].y)) * _3458.y) / cbSceneParam._m0[78u].y)) + _3187;
        _3285 = (exp2(_3484 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3468 * cbSceneParam._m0[78u].z)) * _3458.z) / cbSceneParam._m0[78u].z)) + _3188;
        _3287 = _3467 * _3189;
    }
    else
    {
        _3281 = _3186;
        _3283 = _3187;
        _3285 = _3188;
        _3287 = _3189;
    }
    bool _3494;
    vec4 _3297;
    vec4 _3319;
    float _3321;
    float _3325;
    float _3326;
    float _3327;
    float _3328;
    bool _3338;
    for (;;)
    {
        _3297 = cbMatDynParam._m0[0u];
        float _3299 = roundEven(_3297.y);
        bool _3300 = _3299 == 3.0;
        float _3301 = log2(_3287);
        float _3308 = exp2(_3301 * cbSceneParam._m0[78u].x) * _3158;
        float _3309 = exp2(_3301 * cbSceneParam._m0[78u].y) * _3159;
        float _3310 = exp2(_3301 * cbSceneParam._m0[78u].z) * _3160;
        float _3317 = _1280 + (-0.5);
        _3319 = cbMtdParam._m0[1u];
        _3321 = _3319.y * _3317;
        float _3324 = (_3299 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3325 = _3324 * (_3300 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3281)));
        _3326 = _3324 * (_3300 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3283)));
        _3327 = _3324 * (_3300 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3285)));
        _3328 = _3317 * 0.999000012874603271484375;
        _3338 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3338)
        {
            if ((cbInstanceData._m0[_301 + 7u].x + _3328) < 0.5)
            {
                _3494 = true;
                break;
            }
        }
        uint _3435 = _1329 + uint(_3297.w);
        if ((cbInstanceData._m0[_3435].w < 1.0) && ((cbInstanceData._m0[_3435].w + _3328) < 0.5))
        {
            _3494 = true;
            break;
        }
        if ((_3321 + 1.0) < _3319.x)
        {
            _3494 = true;
            break;
        }
        _3494 = false;
        break;
    }
    float _3699;
    if (_3494)
    {
        discard_state = true;
        _3699 = 0.0;
    }
    else
    {
        _3699 = cbInstanceData._m0[_3161].w;
    }
    SV_Target.x = _3325;
    SV_Target.y = _3326;
    SV_Target.z = _3327;
    SV_Target.w = _3699;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3161].w;
    discard_exit();
}


