#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _3913;
float _3914;
float _3915;
float _3916;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3925 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _450 = (_443 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _451 = (_443 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _452 = (_443 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3936 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _529 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450);
    float _532 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451);
    float _535 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452);
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    float _581 = ((_553.x - _572) * _443) + _572;
    float _582 = ((_553.y - _573) * _443) + _573;
    float _583 = ((_553.z - _574) * _443) + _574;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _608 = ((_595.z - _583) * _516) + _583;
    float _611 = ((((_595.x - _581) * _516) + _581) * 2.0) + (-1.0);
    float _613 = ((((_595.y - _582) * _516) + _582) * 2.0) + (-1.0);
    float _614 = dot(vec2(_611, _613), vec2(_611, _613));
    float _3947 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _670 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _673 = ((isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : min(_670, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _682 = (_673 - ((((((_660 - _661) * cbMtdParam._m0[24u].z) + _661) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _673))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3968 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _690 = (_683 * (cbMtdParam._m0[17u].x - _529)) + _529;
    float _691 = (_683 * (cbMtdParam._m0[17u].y - _532)) + _532;
    float _692 = (_683 * (cbMtdParam._m0[17u].z - _535)) + _535;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _706 = _704.x;
    float _707 = 1.0 - _706;
    float _732 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_706 - _707) * cbMtdParam._m0[24u].w) + _707) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3979 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _741 = ((((cbMtdParam._m0[10u].x - _690) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _733) + _690;
    float _742 = ((((cbMtdParam._m0[10u].y - _691) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _733) + _691;
    float _743 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _692)) * _733) + _692;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _788 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _771) * _443) + _771;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _788) * _516) + _788;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _805) * cbMtdParam._m0[19u].z) + _805;
    float _811 = _809 - (_809 * _683);
    float _813 = _811 - (_811 * _733);
    float _817 = (cbMtdParam._m0[19u].w * (_633.z - _608)) + _608;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _838 = (_831.x * 2.0) + (-1.0);
    float _839 = (_831.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3990 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _848 = (_683 * (_831.z - _817)) + _817;
    float _851 = ((cbMtdParam._m0[23u].x - _848) * _733) + _848;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _876 = (_870.x * 2.0) + (-1.0);
    float _877 = (_870.y * 2.0) + (-1.0);
    float _878 = dot(vec2(_876, _877), vec2(_876, _877));
    float _4001 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _886 = (((_633.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _611;
    float _887 = (((_633.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _613;
    float _899 = (((_838 - _886) + (cbMtdParam._m0[21u].x * _886)) * _683) + _886;
    float _900 = (((_839 - _887) + (cbMtdParam._m0[21u].x * _887)) * _683) + _887;
    float _901 = (_683 * (sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _619)) + _619;
    float _912 = (((_876 - _899) + (_899 * cbMtdParam._m0[22u].z)) * _733) + _899;
    float _913 = (((_877 - _900) + (_900 * cbMtdParam._m0[22u].z)) * _733) + _900;
    float _914 = ((sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) - _901) * _733) + _901;
    float _916 = cbMtdParam._m0[22u].x + _633.w;
    float _919 = fma(_914, _254 * NORMAL.x, fma(_913, _261 * TANGENT.x, (_247 * _239) * _912));
    float _922 = fma(_914, _254 * NORMAL.y, fma(_913, _261 * TANGENT.y, (_247 * _240) * _912));
    float _925 = fma(_914, _254 * NORMAL.z, fma(_913, _261 * TANGENT.z, (_247 * _241) * _912));
    float _929 = inversesqrt(dot(vec3(_919, _922, _925), vec3(_919, _922, _925)));
    float _930 = _929 * _919;
    float _931 = _929 * _922;
    float _932 = _929 * _925;
    float _4012 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _933 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4034 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4045 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4056 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4067 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _938 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _952 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1002 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _992);
    float _1003 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _992);
    float _1004 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _992);
    float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
    float _1009 = _1002 * _1008;
    float _1010 = _1003 * _1008;
    float _1011 = _1004 * _1008;
    vec4 _1016 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1018 = _1016.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_1002 * _1002) + (_1003 * _1003)) + (_1004 * _1004));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _4078 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _4089 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) - _1197)) + _1197) < ((_1018 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_932, cbSceneParam._m0[5u].z, fma(_931, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _930));
    float _1051 = fma(_932, cbSceneParam._m0[6u].z, fma(_931, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _930));
    float _1054 = fma(_932, cbSceneParam._m0[7u].z, fma(_931, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _930));
    uint _1067 = _267 + 9u;
    uint _1068 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _4100 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1080 = 1.0 - _938;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _938;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _938;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _938;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1107 = ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_930, _931, _932), vec3(_1009, _1010, _1011));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _930) - _1009;
    float _1116 = (_1111 * _931) - _1010;
    float _1117 = (_1111 * _932) - _1011;
    float _1121 = abs(dot(vec3(_1009, _1010, _1011), vec3(_930, _931, _932)));
    float _4133 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_933);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1142 = (1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1143 = _1136 * _1123;
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1237 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1241 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1266 = _1171 + _930;
        float _1267 = _1175 + _931;
        float _1268 = _1179 + _932;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_930, _931, _932), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4181 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_930, _931, _932), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4214 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_930, _931, _932), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4247 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1550 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1554 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1558 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1581 = _1171 + _930;
        float _1582 = _1175 + _931;
        float _1583 = _1179 + _932;
        float _1593 = fma(_1583, cbModelParam._m0[30u].z, fma(_1582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1581)) - _1550;
        float _1594 = fma(_1583, cbModelParam._m0[31u].z, fma(_1582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1581)) - _1554;
        float _1595 = fma(_1583, cbModelParam._m0[32u].z, fma(_1582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1581)) - _1558;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1612 = ((_1599 * _1593) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1550 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1599 * _1594) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1554 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1599 * _1595) / cbModelParam._m0[35u].z) + ((((((_1558 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        float _1649 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1616.x + (-0.5));
        float _1651 = _1649 * (_1616.y + (-0.5));
        float _1652 = _1649 * (_1616.z + (-0.5));
        float _1659 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1623.x + (-0.5));
        float _1661 = _1659 * (_1623.y + (-0.5));
        float _1662 = _1659 * (_1623.z + (-0.5));
        float _1669 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1630.x + (-0.5));
        float _1671 = _1669 * (_1630.y + (-0.5));
        float _1672 = _1669 * (_1630.z + (-0.5));
        float _1679 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1637.x + (-0.5));
        float _1681 = _1679 * (_1637.y + (-0.5));
        float _1682 = _1679 * (_1637.z + (-0.5));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = _1650 * 0.5;
        float _1687 = _1660 * 0.5;
        float _1688 = _1670 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_930, _931, _932), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4310 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1713 + 1.0))) + _1718) * _1683;
        float _1728 = _1651 * 0.5;
        float _1729 = _1661 * 0.5;
        float _1730 = _1671 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_930, _931, _932), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4343 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1755 + 1.0))) + _1760) * _1684;
        float _1770 = _1652 * 0.5;
        float _1771 = _1662 * 0.5;
        float _1772 = _1672 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_930, _931, _932), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4376 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1797 + 1.0))) + _1802) * _1685;
        _1819 = _1652;
        _1820 = _1651;
        _1821 = _1650;
        _1822 = _1662;
        _1823 = _1661;
        _1824 = _1660;
        _1825 = _1672;
        _1826 = _1671;
        _1827 = _1670;
        _1828 = _1685;
        _1829 = _1684;
        _1830 = _1683;
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
    }
    else
    {
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = _1509;
        _1831 = 0.0;
        _1832 = 0.0;
        _1833 = 0.0;
    }
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1521)) + _1521;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1522)) + _1522;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1523)) + _1523;
    float _1866 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1843));
    float _1887 = _1115 * 0.5;
    float _1888 = _1116 * 0.5;
    float _1889 = _1117 * 0.5;
    float _1890 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1893 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1896 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1930;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1903 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1907 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1911 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1918 = dot(vec4(cbModelParam._m0[39u]), vec4(_1887, _1888, _1889, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1941;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1932 = dot(vec4(cbModelParam._m0[40u]), vec4(_1887, _1888, _1889, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1945 = (_1941 * cbModelParam._m0[1u].x) + (_1930 * (1.0 - cbModelParam._m0[1u].x));
    float _1955 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1955 : min(cbModelParam._m0[25u].z, _1955));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2004 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2008 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2012 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2015 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2018 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2021 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2049;
        if (_2015 > 0.0)
        {
            _2049 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2049 = frontier_phi_17_15_ladder;
        }
        float _2273;
        if (_2018 > 0.0)
        {
            _2273 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2273 = frontier_phi_26_22_ladder;
        }
        float _2530;
        if (_2021 > 0.0)
        {
            _2530 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2530 = frontier_phi_38_33_ladder;
        }
        float _2532 = isnan(_2273) ? _2049 : (isnan(_2049) ? _2273 : min(_2049, _2273));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _2015) + _2004;
        float _2538 = (_2533 * _2018) + _2008;
        float _2539 = (_2533 * _2021) + _2012;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2540;
        float _2544 = _2540 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 > _2544) || ((_2538 < _2542) || ((_2537 < _2542) || (_2537 > _2544))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2539, cbModelParam._m0[9u].z, fma(_2538, cbModelParam._m0[9u].y, _2537 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2539, cbModelParam._m0[10u].z, fma(_2538, cbModelParam._m0[10u].y, _2537 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2539, cbModelParam._m0[11u].z, fma(_2538, cbModelParam._m0[11u].y, _2537 * cbModelParam._m0[11u].x))), _1956);
            frontier_phi_16_38_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2037 = frontier_phi_16_38_ladder_2;
        _2039 = frontier_phi_16_38_ladder_1;
        _2041 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1956);
        _2037 = _2025.x * cbModelParam._m0[1u].y;
        _2039 = _2025.y * cbModelParam._m0[1u].y;
        _2041 = _2025.z * cbModelParam._m0[1u].y;
    }
    float _2045 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _2046 = isnan(_2045) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2045 : min(cbModelParam._m0[25u].w, _2045));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2100 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2104 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2108 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2111 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2114 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2117 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2278;
        if (_2111 > 0.0)
        {
            _2278 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2278 = frontier_phi_28_24_ladder;
        }
        float _2557;
        if (_2114 > 0.0)
        {
            _2557 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2557 = frontier_phi_40_35_ladder;
        }
        float _2770;
        if (_2117 > 0.0)
        {
            _2770 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2770 = frontier_phi_49_46_ladder;
        }
        float _2772 = isnan(_2557) ? _2278 : (isnan(_2278) ? _2557 : min(_2278, _2557));
        float _2773 = isnan(_2770) ? _2772 : (isnan(_2772) ? _2770 : min(_2772, _2770));
        float _2777 = (_2773 * _2111) + _2100;
        float _2778 = (_2773 * _2114) + _2104;
        float _2779 = (_2773 * _2117) + _2108;
        float _2780 = _2773 * 9.9999997473787516355514526367188e-05;
        float _2781 = (-1.0) - _2780;
        float _2783 = _2780 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2779 > _2783) || ((_2779 < _2781) || ((_2778 > _2783) || ((_2778 < _2781) || ((_2777 < _2781) || (_2777 > _2783))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2779, cbModelParam._m0[17u].z, fma(_2778, cbModelParam._m0[17u].y, _2777 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2779, cbModelParam._m0[18u].z, fma(_2778, cbModelParam._m0[18u].y, _2777 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2779, cbModelParam._m0[19u].z, fma(_2778, cbModelParam._m0[19u].y, _2777 * cbModelParam._m0[19u].x))), _2046);
            frontier_phi_25_49_ladder = _2978.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2978.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2978.x * cbModelParam._m0[1u].z;
        }
        _2136 = frontier_phi_25_49_ladder_2;
        _2138 = frontier_phi_25_49_ladder_1;
        _2140 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2120 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2046);
        _2136 = _2120.x * cbModelParam._m0[1u].z;
        _2138 = _2120.y * cbModelParam._m0[1u].z;
        _2140 = _2120.z * cbModelParam._m0[1u].z;
    }
    float _2153 = (((_1142 * _1091) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2136 - _2037)) + _2037);
    float _2155 = (((_1142 * _1093) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2157 = (((_1142 * _1094) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2140 - _2041)) + _2041);
    float _2160 = fma(_2157, cbSceneParam._m0[89u].z, fma(_2155, cbSceneParam._m0[89u].y, _2153 * cbSceneParam._m0[89u].x));
    float _2163 = fma(_2157, cbSceneParam._m0[90u].z, fma(_2155, cbSceneParam._m0[90u].y, _2153 * cbSceneParam._m0[90u].x));
    float _2166 = fma(_2157, cbSceneParam._m0[91u].z, fma(_2155, cbSceneParam._m0[91u].y, _2153 * cbSceneParam._m0[91u].x));
    vec4 _2174 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1029, _1030));
    float _2176 = _2174.w;
    float _2188 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2176);
    float _2189 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2176);
    float _2190 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2176);
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2204 = _1107 + (-1.0);
    float _2209 = (cbLight._m0[_2197].x * _2204) + 1.0;
    float _2210 = (cbLight._m0[_2197].y * _2204) + 1.0;
    float _2211 = (cbLight._m0[_2197].z * _2204) + 1.0;
    float _2212 = (cbLight._m0[_2197].w * _2204) + 1.0;
    uint _2213 = _2196 + 5u;
    float _2219 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2223 = _2196 + 4u;
    float _2232 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2236 = _2196 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_930, _931, _932));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_930, _931, _932));
    float _4512 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4523 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2213].x * _2219) * _2257) + (((cbLight._m0[_2223].x * _2188) * _2232) * _2255);
    float _2265 = ((_2219 * cbLight._m0[_2213].y) * _2257) + (((cbLight._m0[_2223].y * _2189) * _2232) * _2255);
    float _2266 = ((_2219 * cbLight._m0[_2213].z) * _2257) + (((cbLight._m0[_2223].z * _2190) * _2232) * _2255);
    uvec4 _2270 = floatBitsToUint(cbLight._m0[_2196 + 12u]);
    bool _2272 = _2270.x == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2272)
    {
        _2283 = _2264;
        _2285 = _2265;
        _2287 = _2266;
    }
    else
    {
        uint _2291 = _2196 + 6u;
        float _2307 = (dot(vec3(cbLight._m0[_2196 + 2u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4534 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2310 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2283 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2264;
        _2285 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2265;
        _2287 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2266;
    }
    bool _2290 = _2270.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2290)
    {
        _2328 = _2283;
        _2330 = _2285;
        _2332 = _2287;
    }
    else
    {
        uint _2501 = _2196 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2196 + 3u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4550 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2520 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2328 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2283;
        _2330 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2285;
        _2332 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2287;
    }
    uint _2335 = _2196 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _933) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2196].x + _1009;
    float _2351 = cbLight._m0[_2196].y + _1010;
    float _2352 = cbLight._m0[_2196].z + _1011;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2196].xyz));
    float _4566 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _4577 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2364 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2365 = dot(vec3(_930, _931, _932), vec3(_2357, _2358, _2359));
    float _4588 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2357, _2358, _2359));
    float _4599 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2386 = 0.959999978542327880859375 - _1088;
    float _2388 = 0.959999978542327880859375 - _1089;
    float _2389 = 0.959999978542327880859375 - _1090;
    float _2396 = 1.0 - _2349;
    float _2407 = (0.5 / (((_2364 * ((_2363 * _2396) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2396) + _2349) * _2363))) * _2363;
    float _4610 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2423 = _2196 + 9u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _933) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2236].x + _1009;
    float _2437 = cbLight._m0[_2236].y + _1010;
    float _2438 = cbLight._m0[_2236].z + _1011;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2236].xyz));
    float _4621 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2450 = dot(vec3(_930, _931, _932), vec3(_2443, _2444, _2445));
    float _4632 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2443, _2444, _2445));
    float _4643 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2435 * _2435;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
    float _2476 = 1.0 - _2435;
    float _2486 = (0.5 / (((_2364 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2476) + _2435) * _2449))) * _2449;
    float _4654 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    float _2498 = (((((_2469 * _2386) + _1091) * cbLight._m0[_2423].x) * _2488) * _2219) + ((((cbLight._m0[_2335].x * _2188) * ((_2385 * _2386) + _1091)) * _2409) * _2232);
    float _2499 = (((((_2469 * _2388) + _1093) * cbLight._m0[_2423].y) * _2488) * _2219) + ((((cbLight._m0[_2335].y * _2189) * ((_2385 * _2388) + _1093)) * _2409) * _2232);
    float _2500 = (((((_2469 * _2389) + _1094) * cbLight._m0[_2423].z) * _2488) * _2219) + ((((cbLight._m0[_2335].z * _2190) * ((_2385 * _2389) + _1094)) * _2409) * _2232);
    float _2562;
    float _2564;
    float _2566;
    if (_2272)
    {
        _2562 = _2498;
        _2564 = _2499;
        _2566 = _2500;
    }
    else
    {
        uint _2568 = _2196 + 2u;
        uint _2572 = _2196 + 10u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _933) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _1009;
        float _2589 = cbLight._m0[_2568].y + _1010;
        float _2590 = cbLight._m0[_2568].z + _1011;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2568].xyz));
        float _4665 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2602 = dot(vec3(_930, _931, _932), vec3(_2595, _2596, _2597));
        float _4676 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4687 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2621 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2628 = 1.0 - _2587;
        float _2638 = (0.5 / (((_2364 * ((_2601 * _2628) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2628) + _2587) * _2601))) * _2601;
        float _4698 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2562 = (((((_2621 * _2386) + _1091) * cbLight._m0[_2572].x) * _2640) * _2641) + _2498;
        _2564 = (((((_2621 * _2388) + _1093) * cbLight._m0[_2572].y) * _2640) * _2641) + _2499;
        _2566 = (((((_2621 * _2389) + _1094) * cbLight._m0[_2572].z) * _2640) * _2641) + _2500;
    }
    float _2676;
    float _2678;
    float _2680;
    if (_2290)
    {
        _2676 = _2562;
        _2678 = _2564;
        _2680 = _2566;
    }
    else
    {
        uint _2687 = _2196 + 3u;
        uint _2691 = _2196 + 11u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _933) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _1009;
        float _2708 = cbLight._m0[_2687].y + _1010;
        float _2709 = cbLight._m0[_2687].z + _1011;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2687].xyz));
        float _4714 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2721 = dot(vec3(_930, _931, _932), vec3(_2714, _2715, _2716));
        float _4725 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4736 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2364 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2747) + _2706) * _2720))) * _2720;
        float _4747 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2676 = (((((_2740 * _2386) + _1091) * cbLight._m0[_2691].x) * _2759) * _2760) + _2562;
        _2678 = (((((_2740 * _2388) + _1093) * cbLight._m0[_2691].y) * _2759) * _2760) + _2564;
        _2680 = (((((_2740 * _2389) + _1094) * cbLight._m0[_2691].z) * _2759) * _2760) + _2566;
    }
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_2194.y == 0u)
    {
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2835;
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2835;
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2835;
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.x;
        uint _2862 = uint((float(_2850.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _2851))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _2851)));
        float _2872 = (log2(_2838 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2873 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        uint _2876 = uint(isnan(14.0) ? _2873 : (isnan(_2873) ? 14.0 : min(_2873, 14.0)));
        uvec4 _2881 = texelFetch(g_lightClusterGridBuffer, int(((_2876 << 2u) + (_2862 << 6u)) >> 2u));
        uint _2882 = _2881.x;
        uint _2883 = _2850.z;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((((1u << ((_2883 >> 4u) & 15u)) + 4294967295u) & _2882) == 0u) || ((_2883 & 240u) == 0u))
        {
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
        }
        else
        {
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3152)
                {
                    frontier_phi_66_pred = _3136;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3151;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3142 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _2836;
                        float _3348 = _3307.y - _2837;
                        float _3349 = _3307.z - _2838;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_1048, _1051, _1054), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4773 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _2836;
                        float _3383 = (-0.0) - _2837;
                        float _3384 = (-0.0) - _2838;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3399 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3400 = 1.0 - _1123;
                        float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                        float _3408 = _3407 * _3407;
                        float _3409 = _3408 * _3408;
                        float _3410 = _3389 + _3354;
                        float _3411 = _3390 + _3355;
                        float _3412 = _3391 + _3356;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3420 = dot(vec3(_1048, _1051, _1054), vec3(_3389, _3390, _3391));
                        float _4789 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3424 = dot(vec3(_1048, _1051, _1054), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                        float _4800 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                        float _3432 = _3367 * _3408;
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3357) + _3433;
                        float _4811 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3438 = 1.0 - _3408;
                        float _3448 = (0.5 / (((_3437 * ((_3423 * _3438) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3408) * _3423))) * _3437;
                        float _4822 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3459 = (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3431 * _3431) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3211 = (_3378 * _3326.x) + _3284;
                        _3212 = (_3378 * _3326.y) + _3285;
                        _3213 = (_3378 * _3326.z) + _3286;
                        _3208 = (_3459 * _3343.x) + _3281;
                        _3209 = (_3459 * _3343.y) + _3282;
                        _3210 = (_3459 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                _2984 = frontier_phi_66_pred;
                _2994 = frontier_phi_66_pred_1;
                _2992 = frontier_phi_66_pred_2;
                _2990 = frontier_phi_66_pred_3;
                _2988 = frontier_phi_66_pred_4;
                _2986 = frontier_phi_66_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2984;
                    _3137 = _2986;
                    _3138 = _2988;
                    _3139 = _2990;
                    _3140 = _2992;
                    _3141 = _2994;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
        }
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.z;
        uint _3000 = (_2998 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3000) & _2882) == 0u)
        {
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
            float _3130 = _3129 * _2836;
            float _3131 = _3129 * _2837;
            float _3132 = _3129 * _2838;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3000 < ((_2998 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3264 = _2983;
                float _3265 = _2985;
                float _3266 = _2987;
                float _3267 = _2989;
                float _3268 = _2991;
                float _3269 = _2993;
                uint _3270 = _3000;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3280)
                    {
                        frontier_phi_77_pred = _3269;
                        frontier_phi_77_pred_1 = _3268;
                        frontier_phi_77_pred_2 = _3267;
                        frontier_phi_77_pred_3 = _3266;
                        frontier_phi_77_pred_4 = _3265;
                        frontier_phi_77_pred_5 = _3264;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        uint _3492 = _3279;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3503 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3503 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3503 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_2838, _3610.z, fma(_2837, _3610.y, _3610.x * _2836)) + _3610.w;
                            _3623 = !((fma(_2838, _3591.z, fma(_2837, _3591.y, _3591.x * _2836)) + _3591.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3518.x - _2836;
                                float _3651 = _3518.y - _2837;
                                float _3652 = _3518.z - _2838;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3519 * _3519));
                                float _4833 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3668 = sqrt(_3653) * _3534.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_1048, _1051, _1054))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_2838, _3561.z, fma(_2837, _3561.y, _3561.x * _2836)) + _3561.w) / _3622;
                                float _3682 = (fma(_2838, _3576.z, fma(_2837, _3576.y, _3576.x * _2836)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4849 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _1123;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3130;
                                float _3712 = _3658 - _3131;
                                float _3713 = _3659 - _3132;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4860 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3725 = dot(vec3(_1048, _1051, _1054), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4871 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_1048, _1051, _1054), vec3(_3657, _3658, _3659))) + _3734;
                                float _4882 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4893 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3688 * _3534.y;
                                frontier_phi_83_pred_1 = _3688 * _3534.x;
                                frontier_phi_83_pred_2 = _3762 * _3546.z;
                                frontier_phi_83_pred_3 = _3762 * _3546.y;
                                frontier_phi_83_pred_4 = _3762 * _3546.x;
                                frontier_phi_83_pred_5 = _3688 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_83_pred;
                            _3769 = frontier_phi_83_pred_1;
                            _3768 = frontier_phi_83_pred_2;
                            _3767 = frontier_phi_83_pred_3;
                            _3766 = frontier_phi_83_pred_4;
                            _3771 = frontier_phi_83_pred_5;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3478;
                        frontier_phi_77_pred_1 = _3477;
                        frontier_phi_77_pred_2 = _3476;
                        frontier_phi_77_pred_3 = _3475;
                        frontier_phi_77_pred_4 = _3474;
                        frontier_phi_77_pred_5 = _3473;
                    }
                    _3115 = frontier_phi_77_pred;
                    _3113 = frontier_phi_77_pred_1;
                    _3111 = frontier_phi_77_pred_2;
                    _3109 = frontier_phi_77_pred_3;
                    _3107 = frontier_phi_77_pred_4;
                    _3105 = frontier_phi_77_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3105;
                        _3265 = _3107;
                        _3266 = _3109;
                        _3267 = _3111;
                        _3268 = _3113;
                        _3269 = _3115;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3109;
                frontier_phi_58_59_ladder_1 = _3115;
                frontier_phi_58_59_ladder_2 = _3113;
                frontier_phi_58_59_ladder_3 = _3111;
                frontier_phi_58_59_ladder_4 = _3107;
                frontier_phi_58_59_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_58_59_ladder = _2987;
                frontier_phi_58_59_ladder_1 = _2993;
                frontier_phi_58_59_ladder_2 = _2991;
                frontier_phi_58_59_ladder_3 = _2989;
                frontier_phi_58_59_ladder_4 = _2985;
                frontier_phi_58_59_ladder_5 = _2983;
            }
            _3104 = frontier_phi_58_59_ladder_5;
            _3106 = frontier_phi_58_59_ladder_4;
            _3108 = frontier_phi_58_59_ladder;
            _3110 = frontier_phi_58_59_ladder_3;
            _3112 = frontier_phi_58_59_ladder_2;
            _3114 = frontier_phi_58_59_ladder_1;
        }
        float _3119 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _2895 = (_3119 * _3110) + _2328;
        _2897 = (_3119 * _3112) + _2330;
        _2899 = (_3119 * _3114) + _2332;
        _2901 = ((_3104 * _1091) * _3119) + _2676;
        _2903 = ((_3106 * _1093) * _3119) + _2678;
        _2905 = ((_3108 * _1094) * _3119) + _2680;
    }
    else
    {
        _2895 = _2328;
        _2897 = _2330;
        _2899 = _2332;
        _2901 = _2676;
        _2903 = _2678;
        _2905 = _2680;
    }
    float _4909 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4920 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4931 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2922 = ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2895 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1107))) + ((_2901 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2897 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1107))) + ((_2903 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2899 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1107))) + ((_2905 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1945)) * cbPerFrame._m0[3u].x);
    uint _2925 = _267 + 6u;
    float _2933 = _1029 / cbSceneParam._m0[86u].x;
    float _2934 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _2948 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, (log2((isnan(cbSceneParam._m0[77u].w) ? _952 : (isnan(_952) ? cbSceneParam._m0[77u].w : min(_952, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2950 = _2948.x;
    float _2951 = _2948.y;
    float _2952 = _2948.z;
    float _2953 = _2948.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_952 > cbSceneParam._m0[78u].w)
    {
        float _3008 = isnan(_952) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _952 : min(cbSceneParam._m0[80u].w, _952));
        float _3009 = _3008 / _952;
        float _3020 = _3009 * _1002;
        float _3021 = _1003 * _3009;
        float _3022 = (-0.0) - _3021;
        float _3024 = _3009 * _1004;
        float _3026 = (cbSceneParam._m0[77u].w * _3022) / _3008;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3021;
        float _3034 = sqrt(((_3020 * _3020) + (_3021 * _3021)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3008)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3022 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3167 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3221 = ((abs(_3034 / _3022) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3044 * _3176) - exp2(_3044 * _3177)) * _3165))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2953);
        _3046 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2950;
        _3048 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2951;
        _3050 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2952;
        _3052 = _3232 * _2953;
    }
    else
    {
        _3046 = _2950;
        _3048 = _2951;
        _3050 = _2952;
        _3052 = _2953;
    }
    bool _3259;
    vec4 _3062;
    vec4 _3084;
    float _3086;
    float _3090;
    float _3091;
    float _3092;
    float _3093;
    bool _3103;
    for (;;)
    {
        _3062 = cbMatDynParam._m0[0u];
        float _3064 = roundEven(_3062.y);
        bool _3065 = _3064 == 3.0;
        float _3066 = log2(_3052);
        float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * _2922;
        float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * _2923;
        float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * _2924;
        float _3082 = _1018 + (-0.5);
        _3084 = cbMtdParam._m0[1u];
        _3086 = _3084.y * _3082;
        float _3089 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3090 = _3089 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
        _3091 = _3089 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
        _3092 = _3089 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
        _3093 = _3082 * 0.999000012874603271484375;
        _3103 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3103)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3093) < 0.5)
            {
                _3259 = true;
                break;
            }
        }
        uint _3200 = _1067 + uint(_3062.w);
        if ((cbInstanceData._m0[_3200].w < 1.0) && ((cbInstanceData._m0[_3200].w + _3093) < 0.5))
        {
            _3259 = true;
            break;
        }
        if ((_3086 + 1.0) < _3084.x)
        {
            _3259 = true;
            break;
        }
        _3259 = false;
        break;
    }
    float _3464;
    if (_3259)
    {
        discard_state = true;
        _3464 = 0.0;
    }
    else
    {
        _3464 = cbInstanceData._m0[_2925].w;
    }
    SV_Target.x = _3090;
    SV_Target.y = _3091;
    SV_Target.z = _3092;
    SV_Target.w = _3464;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2925].w;
    discard_exit();
}


