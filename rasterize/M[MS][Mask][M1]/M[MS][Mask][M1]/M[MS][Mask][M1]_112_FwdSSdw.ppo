#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1468;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _366.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3816 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _366.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _557 = _555.x;
    float _567 = dot(vec4(_557, _555.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _579 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _366.z) * 2.0) - ((((_557 - _567) * cbMtdParam._m0[23u].w) + _567) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3838 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _593 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_580 * ((_538.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _596 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_580 * ((_538.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _599 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_580 * ((_538.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    float _645 = ((_617.x - _636) * _437) + _636;
    float _646 = ((_617.y - _637) * _437) + _637;
    float _647 = ((_617.z - _638) * _437) + _638;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _670 = ((_659.x - _645) * _510) + _645;
    float _671 = ((_659.y - _646) * _510) + _646;
    float _672 = ((_659.z - _647) * _510) + _647;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _697 = ((_684.z - _672) * _580) + _672;
    float _700 = ((((_684.x - _670) * _580) + _670) * 2.0) + (-1.0);
    float _702 = ((((_684.y - _671) * _580) + _671) * 2.0) + (-1.0);
    float _703 = dot(vec2(_700, _702), vec2(_700, _702));
    float _3849 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _749 = _747.x;
    float _750 = 1.0 - _749;
    float _765 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_749 - _750) * cbMtdParam._m0[24u].z) + _750) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3860 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _773 = (_766 * (cbMtdParam._m0[17u].x - _593)) + _593;
    float _774 = (_766 * (cbMtdParam._m0[17u].y - _596)) + _596;
    float _775 = (_766 * (cbMtdParam._m0[17u].z - _599)) + _599;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _803 = _801.x;
    float _820 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _803) * _437) + _803;
    float _837 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _820) * _510) + _820;
    float _855 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _837) * _580) + _837;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _855) * cbMtdParam._m0[19u].z) + _855;
    float _861 = _859 - (_859 * _766);
    float _865 = (cbMtdParam._m0[19u].w * (_722.z - _697)) + _697;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _885 = (_878.x * 2.0) + (-1.0);
    float _886 = (_878.y * 2.0) + (-1.0);
    float _887 = dot(vec2(_885, _886), vec2(_885, _886));
    float _3871 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _895 = (_766 * (_878.z - _865)) + _865;
    float _898 = (((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    float _899 = (((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _911 = (((_885 - _898) + (cbMtdParam._m0[21u].x * _898)) * _766) + _898;
    float _912 = (((_886 - _899) + (cbMtdParam._m0[21u].x * _899)) * _766) + _899;
    float _913 = (_766 * (sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _708)) + _708;
    float _915 = cbMtdParam._m0[22u].x + _722.w;
    float _918 = fma(_913, _243 * NORMAL.x, fma(_912, _250 * TANGENT.x, (_236 * _228) * _911));
    float _921 = fma(_913, _243 * NORMAL.y, fma(_912, _250 * TANGENT.y, (_236 * _229) * _911));
    float _924 = fma(_913, _243 * NORMAL.z, fma(_912, _250 * TANGENT.z, (_236 * _230) * _911));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _3882 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _932 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _3904 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3915 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _3926 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3937 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _937 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _951 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1001 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _991);
    float _1002 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _991);
    float _1003 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _991);
    float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
    float _1008 = _1001 * _1007;
    float _1009 = _1002 * _1007;
    float _1010 = _1003 * _1007;
    float _1016 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1017 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1035 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1038 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1041 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1055 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _3948 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1067 = 1.0 - _937;
    float _1068 = _1064 * _1067;
    float _1069 = _1065 * _1067;
    float _1070 = _1066 * _1067;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _937;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _937;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _937;
    float _1078 = _1075 + 0.039999999105930328369140625;
    float _1080 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1016, cbSceneParam._m0[86u].y * _1017));
    float _1094 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _1090.x;
    float _1095 = dot(vec3(_929, _930, _931), vec3(_1008, _1009, _1010));
    float _1098 = _1095 * 2.0;
    float _1102 = (_1098 * _929) - _1008;
    float _1103 = (_1098 * _930) - _1009;
    float _1104 = (_1098 * _931) - _1010;
    float _1108 = abs(dot(vec3(_1008, _1009, _1010), vec3(_929, _930, _931)));
    float _3981 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1110 = sqrt(_932);
    float _1123 = exp2((_1110 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1110 * 3.0));
    float _1129 = (1.0 - _1123) * ((_1110 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1130 = _1123 * _1110;
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1467;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1192 = fma(_1166, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158));
        float _1196 = fma(_1166, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158));
        float _1200 = fma(_1166, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158));
        float _1225 = _1158 + _929;
        float _1226 = _1162 + _930;
        float _1227 = _1166 + _931;
        float _1237 = fma(_1227, cbModelParam._m0[26u].z, fma(_1226, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1225)) - _1192;
        float _1238 = fma(_1227, cbModelParam._m0[27u].z, fma(_1226, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1225)) - _1196;
        float _1239 = fma(_1227, cbModelParam._m0[28u].z, fma(_1226, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1225)) - _1200;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1192 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1196 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[34u].z) + ((((((_1200 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1295 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1261.x + (-0.5));
        float _1297 = _1295 * (_1261.y + (-0.5));
        float _1298 = _1295 * (_1261.z + (-0.5));
        float _1305 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1268.x + (-0.5));
        float _1307 = _1305 * (_1268.y + (-0.5));
        float _1308 = _1305 * (_1268.z + (-0.5));
        float _1315 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1275.x + (-0.5));
        float _1317 = _1315 * (_1275.y + (-0.5));
        float _1318 = _1315 * (_1275.z + (-0.5));
        float _1325 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1282.x + (-0.5));
        float _1327 = _1325 * (_1282.y + (-0.5));
        float _1328 = _1325 * (_1282.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1349 = (dot(vec3(_929, _930, _931), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1359 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4029 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1361 + 1.0))) + _1366) * _1329;
        float _1376 = _1297 * 0.5;
        float _1377 = _1307 * 0.5;
        float _1378 = _1317 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_929, _930, _931), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4062 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1403 + 1.0))) + _1408) * _1330;
        float _1418 = _1298 * 0.5;
        float _1419 = _1308 * 0.5;
        float _1420 = _1318 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_929, _930, _931), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4095 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1445 + 1.0))) + _1450) * _1331;
        _1467 = _1298;
        _1469 = _1297;
        _1470 = _1296;
        _1471 = _1308;
        _1472 = _1307;
        _1473 = _1306;
        _1474 = _1318;
        _1475 = _1317;
        _1476 = _1316;
        _1477 = _1331;
        _1478 = _1330;
        _1479 = _1329;
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1468;
        _1469 = _1468;
        _1470 = _1468;
        _1471 = _1468;
        _1472 = _1468;
        _1473 = _1468;
        _1474 = _1468;
        _1475 = _1468;
        _1476 = _1468;
        _1477 = _1468;
        _1478 = _1468;
        _1479 = _1468;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1505 = fma(_1166, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158));
        float _1509 = fma(_1166, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158));
        float _1513 = fma(_1166, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158));
        float _1536 = _1158 + _929;
        float _1537 = _1162 + _930;
        float _1538 = _1166 + _931;
        float _1548 = fma(_1538, cbModelParam._m0[30u].z, fma(_1537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1536)) - _1505;
        float _1549 = fma(_1538, cbModelParam._m0[31u].z, fma(_1537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1536)) - _1509;
        float _1550 = fma(_1538, cbModelParam._m0[32u].z, fma(_1537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1536)) - _1513;
        float _1554 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
        float _1567 = ((_1554 * _1548) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1505 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1554 * _1549) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1509 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1554 * _1550) / cbModelParam._m0[35u].z) + ((((((_1513 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        float _1604 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1571.x + (-0.5));
        float _1606 = _1604 * (_1571.y + (-0.5));
        float _1607 = _1604 * (_1571.z + (-0.5));
        float _1614 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1578.x + (-0.5));
        float _1616 = _1614 * (_1578.y + (-0.5));
        float _1617 = _1614 * (_1578.z + (-0.5));
        float _1624 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1585.x + (-0.5));
        float _1626 = _1624 * (_1585.y + (-0.5));
        float _1627 = _1624 * (_1585.z + (-0.5));
        float _1634 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1592.x + (-0.5));
        float _1636 = _1634 * (_1592.y + (-0.5));
        float _1637 = _1634 * (_1592.z + (-0.5));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = _1605 * 0.5;
        float _1642 = _1615 * 0.5;
        float _1643 = _1625 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_929, _930, _931), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4158 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1668 + 1.0))) + _1673) * _1638;
        float _1683 = _1606 * 0.5;
        float _1684 = _1616 * 0.5;
        float _1685 = _1626 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_929, _930, _931), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4191 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1710 + 1.0))) + _1715) * _1639;
        float _1725 = _1607 * 0.5;
        float _1726 = _1617 * 0.5;
        float _1727 = _1627 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_929, _930, _931), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4224 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1752 + 1.0))) + _1757) * _1640;
        _1774 = _1607;
        _1775 = _1606;
        _1776 = _1605;
        _1777 = _1617;
        _1778 = _1616;
        _1779 = _1615;
        _1780 = _1627;
        _1781 = _1626;
        _1782 = _1625;
        _1783 = _1640;
        _1784 = _1639;
        _1785 = _1638;
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
    }
    else
    {
        _1774 = _1468;
        _1775 = _1468;
        _1776 = _1468;
        _1777 = _1468;
        _1778 = _1468;
        _1779 = _1468;
        _1780 = _1468;
        _1781 = _1468;
        _1782 = _1468;
        _1783 = _1468;
        _1784 = _1468;
        _1785 = _1468;
        _1786 = 0.0;
        _1787 = 0.0;
        _1788 = 0.0;
    }
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1480)) + _1480;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1481)) + _1481;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1482)) + _1482;
    float _1821 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1798));
    float _1842 = _1102 * 0.5;
    float _1843 = _1103 * 0.5;
    float _1844 = _1104 * 0.5;
    float _1845 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1848 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1851 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1885;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1858 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1467, _1471, _1474, _1477));
        float _1862 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1469, _1472, _1475, _1478));
        float _1866 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1470, _1473, _1476, _1479));
        float _1873 = dot(vec4(cbModelParam._m0[39u]), vec4(_1842, _1843, _1844, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1896;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1887 = dot(vec4(cbModelParam._m0[40u]), vec4(_1842, _1843, _1844, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1900 = (_1896 * cbModelParam._m0[1u].x) + (_1885 * (1.0 - cbModelParam._m0[1u].x));
    float _1910 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1910 : min(cbModelParam._m0[25u].z, _1910));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1958 = fma(_1166, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1158)) + cbModelParam._m0[13u].w;
        float _1962 = fma(_1166, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1158)) + cbModelParam._m0[14u].w;
        float _1966 = fma(_1166, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1158)) + cbModelParam._m0[15u].w;
        float _1969 = fma(_1104, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102));
        float _1972 = fma(_1104, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102));
        float _1975 = fma(_1104, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102));
        float _2003;
        if (_1969 > 0.0)
        {
            _2003 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2003 = frontier_phi_14_12_ladder;
        }
        float _2227;
        if (_1972 > 0.0)
        {
            _2227 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2227 = frontier_phi_23_19_ladder;
        }
        float _2484;
        if (_1975 > 0.0)
        {
            _2484 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2484 = frontier_phi_35_30_ladder;
        }
        float _2486 = isnan(_2227) ? _2003 : (isnan(_2003) ? _2227 : min(_2003, _2227));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1969) + _1958;
        float _2492 = (_2487 * _1972) + _1962;
        float _2493 = (_2487 * _1975) + _1966;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2494;
        float _2498 = _2494 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 > _2498) || ((_2492 < _2496) || ((_2491 < _2496) || (_2491 > _2498))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2493, cbModelParam._m0[9u].z, fma(_2492, cbModelParam._m0[9u].y, _2491 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2493, cbModelParam._m0[10u].z, fma(_2492, cbModelParam._m0[10u].y, _2491 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2493, cbModelParam._m0[11u].z, fma(_2492, cbModelParam._m0[11u].y, _2491 * cbModelParam._m0[11u].x))), _1911);
            frontier_phi_13_35_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _1991 = frontier_phi_13_35_ladder_2;
        _1993 = frontier_phi_13_35_ladder_1;
        _1995 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1102, _1103, _1104), _1911);
        _1991 = _1979.x * cbModelParam._m0[1u].y;
        _1993 = _1979.y * cbModelParam._m0[1u].y;
        _1995 = _1979.z * cbModelParam._m0[1u].y;
    }
    float _1999 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1999 : min(cbModelParam._m0[25u].w, _1999));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2054 = fma(_1166, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1158)) + cbModelParam._m0[21u].w;
        float _2058 = fma(_1166, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1158)) + cbModelParam._m0[22u].w;
        float _2062 = fma(_1166, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1158)) + cbModelParam._m0[23u].w;
        float _2065 = fma(_1104, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102));
        float _2068 = fma(_1104, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102));
        float _2071 = fma(_1104, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102));
        float _2232;
        if (_2065 > 0.0)
        {
            _2232 = abs((1.0 - _2054) / _2065);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2054 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2232 = frontier_phi_25_21_ladder;
        }
        float _2511;
        if (_2068 > 0.0)
        {
            _2511 = abs((1.0 - _2058) / _2068);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2058 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2511 = frontier_phi_37_32_ladder;
        }
        float _2724;
        if (_2071 > 0.0)
        {
            _2724 = abs((1.0 - _2062) / _2071);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2062 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2724 = frontier_phi_46_43_ladder;
        }
        float _2726 = isnan(_2511) ? _2232 : (isnan(_2232) ? _2511 : min(_2232, _2511));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _2065) + _2054;
        float _2732 = (_2727 * _2068) + _2058;
        float _2733 = (_2727 * _2071) + _2062;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _2000);
            frontier_phi_22_46_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2090 = frontier_phi_22_46_ladder_2;
        _2092 = frontier_phi_22_46_ladder_1;
        _2094 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1102, _1103, _1104), _2000);
        _2090 = _2074.x * cbModelParam._m0[1u].z;
        _2092 = _2074.y * cbModelParam._m0[1u].z;
        _2094 = _2074.z * cbModelParam._m0[1u].z;
    }
    float _2107 = (((_1129 * _1078) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2109 = (((_1129 * _1080) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2092 - _1993)) + _1993);
    float _2111 = (((_1129 * _1081) + _1130) * _1094) * ((cbModelParam._m0[1u].w * (_2094 - _1995)) + _1995);
    float _2114 = fma(_2111, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2107 * cbSceneParam._m0[89u].x));
    float _2117 = fma(_2111, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2107 * cbSceneParam._m0[90u].x));
    float _2120 = fma(_2111, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, _2107 * cbSceneParam._m0[91u].x));
    vec4 _2128 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1016, _1017));
    float _2130 = _2128.w;
    float _2142 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2130);
    float _2143 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2130);
    float _2144 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2130);
    uvec4 _2148 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2150 = _2148.x * 14u;
    uint _2151 = _2150 + 13u;
    float _2158 = _1094 + (-1.0);
    float _2163 = (cbLight._m0[_2151].x * _2158) + 1.0;
    float _2164 = (cbLight._m0[_2151].y * _2158) + 1.0;
    float _2165 = (cbLight._m0[_2151].z * _2158) + 1.0;
    float _2166 = (cbLight._m0[_2151].w * _2158) + 1.0;
    uint _2167 = _2150 + 5u;
    float _2173 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2177 = _2150 + 4u;
    float _2186 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2190 = _2150 | 1u;
    float _2201 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_929, _930, _931));
    float _2204 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_929, _930, _931));
    float _4360 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _4371 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2209 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2211 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2218 = ((cbLight._m0[_2167].x * _2173) * _2211) + (((cbLight._m0[_2177].x * _2142) * _2186) * _2209);
    float _2219 = ((_2173 * cbLight._m0[_2167].y) * _2211) + (((cbLight._m0[_2177].y * _2143) * _2186) * _2209);
    float _2220 = ((_2173 * cbLight._m0[_2167].z) * _2211) + (((cbLight._m0[_2177].z * _2144) * _2186) * _2209);
    uvec4 _2224 = floatBitsToUint(cbLight._m0[_2150 + 12u]);
    bool _2226 = _2224.x == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2226)
    {
        _2237 = _2218;
        _2239 = _2219;
        _2241 = _2220;
    }
    else
    {
        uint _2245 = _2150 + 6u;
        float _2261 = (dot(vec3(cbLight._m0[_2150 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2262 = _2261 * _2261;
        float _4382 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2263 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2264 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2237 = (((cbLight._m0[_2245].x * 0.3183098733425140380859375) * _2263) * _2264) + _2218;
        _2239 = (((cbLight._m0[_2245].y * 0.3183098733425140380859375) * _2263) * _2264) + _2219;
        _2241 = (((cbLight._m0[_2245].z * 0.3183098733425140380859375) * _2263) * _2264) + _2220;
    }
    bool _2244 = _2224.y == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2244)
    {
        _2282 = _2237;
        _2284 = _2239;
        _2286 = _2241;
    }
    else
    {
        uint _2455 = _2150 + 7u;
        float _2471 = (dot(vec3(cbLight._m0[_2150 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4398 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2474 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2282 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2237;
        _2284 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2239;
        _2286 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2241;
    }
    uint _2289 = _2150 + 8u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _932) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2150].x + _1008;
    float _2305 = cbLight._m0[_2150].y + _1009;
    float _2306 = cbLight._m0[_2150].z + _1010;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2150].xyz));
    float _4414 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _2318 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2319 = dot(vec3(_929, _930, _931), vec3(_2311, _2312, _2313));
    float _4436 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2311, _2312, _2313));
    float _4447 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2303 * _2303;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2340 = 0.959999978542327880859375 - _1075;
    float _2342 = 0.959999978542327880859375 - _1076;
    float _2343 = 0.959999978542327880859375 - _1077;
    float _2350 = 1.0 - _2303;
    float _2361 = (0.5 / (((_2318 * ((_2317 * _2350) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2350) + _2303) * _2317))) * _2317;
    float _4458 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    uint _2377 = _2150 + 9u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _932) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2190].x + _1008;
    float _2391 = cbLight._m0[_2190].y + _1009;
    float _2392 = cbLight._m0[_2190].z + _1010;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2190].xyz));
    float _4469 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2404 = dot(vec3(_929, _930, _931), vec3(_2397, _2398, _2399));
    float _4480 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2408 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2397, _2398, _2399));
    float _4491 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2412 = _2389 * _2389;
    float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
    float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2430 = 1.0 - _2389;
    float _2440 = (0.5 / (((_2318 * ((_2403 * _2430) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2430) + _2389) * _2403))) * _2403;
    float _4502 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
    float _2452 = (((((_2423 * _2340) + _1078) * cbLight._m0[_2377].x) * _2442) * _2173) + ((((cbLight._m0[_2289].x * _2142) * ((_2339 * _2340) + _1078)) * _2363) * _2186);
    float _2453 = (((((_2423 * _2342) + _1080) * cbLight._m0[_2377].y) * _2442) * _2173) + ((((cbLight._m0[_2289].y * _2143) * ((_2339 * _2342) + _1080)) * _2363) * _2186);
    float _2454 = (((((_2423 * _2343) + _1081) * cbLight._m0[_2377].z) * _2442) * _2173) + ((((cbLight._m0[_2289].z * _2144) * ((_2339 * _2343) + _1081)) * _2363) * _2186);
    float _2516;
    float _2518;
    float _2520;
    if (_2226)
    {
        _2516 = _2452;
        _2518 = _2453;
        _2520 = _2454;
    }
    else
    {
        uint _2522 = _2150 + 2u;
        uint _2526 = _2150 + 10u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _932) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _1008;
        float _2543 = cbLight._m0[_2522].y + _1009;
        float _2544 = cbLight._m0[_2522].z + _1010;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2522].xyz));
        float _4513 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2556 = dot(vec3(_929, _930, _931), vec3(_2549, _2550, _2551));
        float _4524 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4535 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2318 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2582) + _2541) * _2555))) * _2555;
        float _4546 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2516 = (((((_2575 * _2340) + _1078) * cbLight._m0[_2526].x) * _2594) * _2595) + _2452;
        _2518 = (((((_2575 * _2342) + _1080) * cbLight._m0[_2526].y) * _2594) * _2595) + _2453;
        _2520 = (((((_2575 * _2343) + _1081) * cbLight._m0[_2526].z) * _2594) * _2595) + _2454;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2244)
    {
        _2630 = _2516;
        _2632 = _2518;
        _2634 = _2520;
    }
    else
    {
        uint _2641 = _2150 + 3u;
        uint _2645 = _2150 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _932) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1008;
        float _2662 = cbLight._m0[_2641].y + _1009;
        float _2663 = cbLight._m0[_2641].z + _1010;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2641].xyz));
        float _4562 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2675 = dot(vec3(_929, _930, _931), vec3(_2668, _2669, _2670));
        float _4573 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4584 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2318 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2701) + _2660) * _2674))) * _2674;
        float _4595 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2630 = (((((_2694 * _2340) + _1078) * cbLight._m0[_2645].x) * _2713) * _2714) + _2516;
        _2632 = (((((_2694 * _2342) + _1080) * cbLight._m0[_2645].y) * _2713) * _2714) + _2518;
        _2634 = (((((_2694 * _2343) + _1081) * cbLight._m0[_2645].z) * _2713) * _2714) + _2520;
    }
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_2148.y == 0u)
    {
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2789;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2789;
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2789;
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.x;
        uint _2816 = uint((float(_2804.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1017) / _2805))) + floor(float(uint(cbSceneParam._m0[85u].x * _1016) / _2805)));
        float _2826 = (log2(_2792 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2827 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        uint _2830 = uint(isnan(14.0) ? _2827 : (isnan(_2827) ? 14.0 : min(_2827, 14.0)));
        uvec4 _2835 = texelFetch(g_lightClusterGridBuffer, int(((_2830 << 2u) + (_2816 << 6u)) >> 2u));
        uint _2836 = _2835.x;
        uint _2837 = _2804.z;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((((1u << ((_2837 >> 4u) & 15u)) + 4294967295u) & _2836) == 0u) || ((_2837 & 240u) == 0u))
        {
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
        }
        else
        {
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            uint _3088 = 0u;
            uint _3097;
            bool _3098;
            for (;;)
            {
                _3097 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                _3098 = _3097 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3098)
                {
                    frontier_phi_61_pred = _3082;
                    frontier_phi_61_pred_1 = _3087;
                    frontier_phi_61_pred_2 = _3086;
                    frontier_phi_61_pred_3 = _3085;
                    frontier_phi_61_pred_4 = _3084;
                    frontier_phi_61_pred_5 = _3083;
                }
                else
                {
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    uint _3212;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3097;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    for (;;)
                    {
                        uint _3216 = uint(findLSB(_3212)) + (_3088 << 5u);
                        uint _3213 = (_3212 + 4294967295u) & _3212;
                        uint _3218 = _3216 * 48u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3238 = (_3216 * 48u) + 4u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3257 = (_3216 * 48u) + 8u;
                        vec3 _3268 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x));
                        float _3272 = _3232.x - _2790;
                        float _3273 = _3232.y - _2791;
                        float _3274 = _3232.z - _2792;
                        float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                        float _3278 = inversesqrt(_3275);
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3282 = dot(vec3(_1035, _1038, _1041), vec3(_3279, _3280, _3281));
                        float _3287 = 1.0 - (_3275 * _3232.w);
                        float _4621 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3289 = sqrt(_3275) * _3251.w;
                        float _3292 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3282) + _3293;
                        float _3299 = _3289 * _3289;
                        float _3303 = ((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3288) / ((_3299 * 0.699999988079071044921875) + 1.0);
                        float _3307 = (-0.0) - _2790;
                        float _3308 = (-0.0) - _2791;
                        float _3309 = (-0.0) - _2792;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3324 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _1110;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3337 = _3316 + _3281;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_1035, _1038, _1041), vec3(_3314, _3315, _3316));
                        float _4637 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3349 = dot(vec3(_1035, _1038, _1041), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4648 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3292 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3282) + _3358;
                        float _4659 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4670 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3356 * _3356) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125))) * _3288;
                        _3141 = (_3303 * _3251.x) + _3209;
                        _3142 = (_3303 * _3251.y) + _3210;
                        _3143 = (_3303 * _3251.z) + _3211;
                        _3138 = (_3384 * _3268.x) + _3206;
                        _3139 = (_3384 * _3268.y) + _3207;
                        _3140 = (_3384 * _3268.z) + _3208;
                        if (_3213 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3213;
                        }
                    }
                    frontier_phi_61_pred = _3138;
                    frontier_phi_61_pred_1 = _3143;
                    frontier_phi_61_pred_2 = _3142;
                    frontier_phi_61_pred_3 = _3141;
                    frontier_phi_61_pred_4 = _3140;
                    frontier_phi_61_pred_5 = _3139;
                }
                _2938 = frontier_phi_61_pred;
                _2948 = frontier_phi_61_pred_1;
                _2946 = frontier_phi_61_pred_2;
                _2944 = frontier_phi_61_pred_3;
                _2942 = frontier_phi_61_pred_4;
                _2940 = frontier_phi_61_pred_5;
                uint _3089 = _3088 + 1u;
                if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3082 = _2938;
                    _3083 = _2940;
                    _3084 = _2942;
                    _3085 = _2944;
                    _3086 = _2946;
                    _3087 = _2948;
                    _3088 = _3089;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
        }
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.z;
        uint _2954 = (_2952 >> 8u) & 15u;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2954) & _2836) == 0u)
        {
            _3050 = _2937;
            _3052 = _2939;
            _3054 = _2941;
            _3056 = _2943;
            _3058 = _2945;
            _3060 = _2947;
        }
        else
        {
            float _3075 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
            float _3076 = _3075 * _2790;
            float _3077 = _3075 * _2791;
            float _3078 = _3075 * _2792;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2954 < ((_2952 >> 12u) & 15u))
            {
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3189 = _2937;
                float _3190 = _2939;
                float _3191 = _2941;
                float _3192 = _2943;
                float _3193 = _2945;
                float _3194 = _2947;
                uint _3195 = _2954;
                uint _3204;
                bool _3205;
                for (;;)
                {
                    _3204 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                    _3205 = _3204 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3205)
                    {
                        frontier_phi_67_pred = _3192;
                        frontier_phi_67_pred_1 = _3193;
                        frontier_phi_67_pred_2 = _3194;
                        frontier_phi_67_pred_3 = _3191;
                        frontier_phi_67_pred_4 = _3190;
                        frontier_phi_67_pred_5 = _3189;
                    }
                    else
                    {
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        float _3405 = _3192;
                        float _3406 = _3193;
                        float _3407 = _3194;
                        uint _3408 = _3204;
                        uint _3409;
                        vec4 _3434;
                        float _3435;
                        vec4 _3450;
                        vec3 _3462;
                        vec4 _3477;
                        vec4 _3492;
                        float _3538;
                        bool _3539;
                        for (;;)
                        {
                            uint _3419 = ((_3195 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3408));
                            _3409 = (_3408 + 4294967295u) & _3408;
                            uint _3421 = _3419 * 40u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3435 = _3434.w;
                            uint _3437 = (_3419 * 40u) + 4u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3419 * 40u) + 8u;
                            _3462 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x));
                            uint _3464 = (_3419 * 40u) + 16u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3419 * 40u) + 20u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3419 * 40u) + 24u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3513 = (_3419 * 40u) + 28u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3538 = fma(_2792, _3526.z, fma(_2791, _3526.y, _3526.x * _2790)) + _3526.w;
                            _3539 = !((fma(_2792, _3507.z, fma(_2791, _3507.y, _3507.x * _2790)) + _3507.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3539)
                            {
                                float _3566 = _3434.x - _2790;
                                float _3567 = _3434.y - _2791;
                                float _3568 = _3434.z - _2792;
                                float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                                float _3572 = inversesqrt(_3569);
                                float _3573 = _3572 * _3566;
                                float _3574 = _3572 * _3567;
                                float _3575 = _3572 * _3568;
                                float _3579 = 1.0 - (_3569 / (_3435 * _3435));
                                float _4681 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3584 = sqrt(_3569) * _3450.w;
                                float _3586 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                                float _3587 = _3586 * _3586;
                                float _3590 = ((1.0 - _3587) * dot(vec3(_3573, _3574, _3575), vec3(_1035, _1038, _1041))) + _3587;
                                float _3593 = _3584 * _3584;
                                float _3597 = (fma(_2792, _3477.z, fma(_2791, _3477.y, _3477.x * _2790)) + _3477.w) / _3538;
                                float _3598 = (fma(_2792, _3492.z, fma(_2791, _3492.y, _3492.x * _2790)) + _3492.w) / _3538;
                                float _3602 = 1.0 - dot(vec2(_3597, _3598), vec2(_3597, _3598));
                                float _4697 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3604 = _3603 * (((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3580) / ((_3593 * 0.699999988079071044921875) + 1.0));
                                float _3616 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                                float _3617 = 1.0 - _1110;
                                float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                                float _3625 = _3624 * _3624;
                                float _3626 = _3625 * _3625;
                                float _3627 = _3573 - _3076;
                                float _3628 = _3574 - _3077;
                                float _3629 = _3575 - _3078;
                                float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                                float _3637 = dot(vec3(_1035, _1038, _1041), vec3((-0.0) - _3076, (-0.0) - _3077, (-0.0) - _3078));
                                float _4708 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3641 = dot(vec3(_1035, _1038, _1041), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                                float _4719 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                                float _3649 = _3586 * _3625;
                                float _3650 = _3649 * _3649;
                                float _3656 = ((1.0 - _3650) * dot(vec3(_1035, _1038, _1041), vec3(_3573, _3574, _3575))) + _3650;
                                float _4730 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3658 = 1.0 - _3625;
                                float _3668 = (0.5 / (((_3657 * ((_3640 * _3658) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3625) * _3640))) * _3657;
                                float _4741 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3678 = (_3603 * _3580) * (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3648 * _3648) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3678 * _3462.x;
                                frontier_phi_73_pred_1 = _3678 * _3462.y;
                                frontier_phi_73_pred_2 = _3604 * _3450.z;
                                frontier_phi_73_pred_3 = _3604 * _3450.y;
                                frontier_phi_73_pred_4 = _3604 * _3450.x;
                                frontier_phi_73_pred_5 = _3678 * _3462.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3682 = frontier_phi_73_pred;
                            _3683 = frontier_phi_73_pred_1;
                            _3687 = frontier_phi_73_pred_2;
                            _3686 = frontier_phi_73_pred_3;
                            _3685 = frontier_phi_73_pred_4;
                            _3684 = frontier_phi_73_pred_5;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            if (_3409 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3409;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3392;
                        frontier_phi_67_pred_1 = _3393;
                        frontier_phi_67_pred_2 = _3394;
                        frontier_phi_67_pred_3 = _3391;
                        frontier_phi_67_pred_4 = _3390;
                        frontier_phi_67_pred_5 = _3389;
                    }
                    _3057 = frontier_phi_67_pred;
                    _3059 = frontier_phi_67_pred_1;
                    _3061 = frontier_phi_67_pred_2;
                    _3055 = frontier_phi_67_pred_3;
                    _3053 = frontier_phi_67_pred_4;
                    _3051 = frontier_phi_67_pred_5;
                    uint _3196 = _3195 + 1u;
                    if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3189 = _3051;
                        _3190 = _3053;
                        _3191 = _3055;
                        _3192 = _3057;
                        _3193 = _3059;
                        _3194 = _3061;
                        _3195 = _3196;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3059;
                frontier_phi_55_56_ladder_1 = _3061;
                frontier_phi_55_56_ladder_2 = _3057;
                frontier_phi_55_56_ladder_3 = _3055;
                frontier_phi_55_56_ladder_4 = _3053;
                frontier_phi_55_56_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_55_56_ladder = _2945;
                frontier_phi_55_56_ladder_1 = _2947;
                frontier_phi_55_56_ladder_2 = _2943;
                frontier_phi_55_56_ladder_3 = _2941;
                frontier_phi_55_56_ladder_4 = _2939;
                frontier_phi_55_56_ladder_5 = _2937;
            }
            _3050 = frontier_phi_55_56_ladder_5;
            _3052 = frontier_phi_55_56_ladder_4;
            _3054 = frontier_phi_55_56_ladder_3;
            _3056 = frontier_phi_55_56_ladder_2;
            _3058 = frontier_phi_55_56_ladder;
            _3060 = frontier_phi_55_56_ladder_1;
        }
        float _3065 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
        _2849 = (_3065 * _3056) + _2282;
        _2851 = (_3065 * _3058) + _2284;
        _2853 = (_3065 * _3060) + _2286;
        _2855 = ((_3050 * _1078) * _3065) + _2630;
        _2857 = ((_3052 * _1080) * _3065) + _2632;
        _2859 = ((_3054 * _1081) * _3065) + _2634;
    }
    else
    {
        _2849 = _2282;
        _2851 = _2284;
        _2853 = _2286;
        _2855 = _2630;
        _2857 = _2632;
        _2859 = _2634;
    }
    float _4757 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4768 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4779 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    uint _2879 = _256 + 6u;
    float _2887 = _1016 / cbSceneParam._m0[86u].x;
    float _2888 = _1017 / cbSceneParam._m0[86u].y;
    vec4 _2902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, (log2((isnan(cbSceneParam._m0[77u].w) ? _951 : (isnan(_951) ? cbSceneParam._m0[77u].w : min(_951, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2904 = _2902.x;
    float _2905 = _2902.y;
    float _2906 = _2902.z;
    float _2907 = _2902.w;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_951 > cbSceneParam._m0[78u].w)
    {
        float _2962 = isnan(_951) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _951 : min(cbSceneParam._m0[80u].w, _951));
        float _2963 = _2962 / _951;
        float _2974 = _2963 * _1001;
        float _2975 = _1002 * _2963;
        float _2976 = (-0.0) - _2975;
        float _2978 = _2963 * _1003;
        float _2980 = (cbSceneParam._m0[77u].w * _2976) / _2962;
        float _2981 = _2980 + cbSceneParam._m0[79u].w;
        float _2982 = cbSceneParam._m0[79u].w - _2975;
        float _2988 = sqrt(((_2974 * _2974) + (_2975 * _2975)) + (_2978 * _2978));
        float _2991 = (1.0 - (cbSceneParam._m0[77u].w / _2962)) * _2988;
        float _2996 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2998 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3151;
        if (abs((_2976 - _2980) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3151 = ((((_2981 > 0.0) ? exp2(_2996 * _2981) : (2.0 - exp2(_2998 * _2981))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2991;
        }
        else
        {
            float _3111 = 1.0 / cbSceneParam._m0[80u].x;
            float _3112 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : max(_2981, _2982));
            float _3113 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : min(_2981, _2982));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            _3151 = ((abs(_2988 / _2976) * cbSceneParam._m0[80u].y) * ((((_3122 - _3123) * 2.0) - ((exp2(_2996 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)))) - exp2(_2996 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))))) * _3111)) - ((exp2(_2998 * _3122) - exp2(_2998 * _3123)) * _3111))) + (_2991 * cbSceneParam._m0[80u].z);
        }
        vec4 _3153 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, 1.0), 0.0);
        float _3162 = exp2((_3151 * (-1.44269502162933349609375)) * (1.0 - _3153.w));
        float _3163 = log2(_3162);
        float _3179 = log2(_2907);
        _3000 = (exp2(_3179 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].x)) * _3153.x) / cbSceneParam._m0[78u].x)) + _2904;
        _3002 = (exp2(_3179 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].y)) * _3153.y) / cbSceneParam._m0[78u].y)) + _2905;
        _3004 = (exp2(_3179 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].z)) * _3153.z) / cbSceneParam._m0[78u].z)) + _2906;
        _3006 = _3162 * _2907;
    }
    else
    {
        _3000 = _2904;
        _3002 = _2905;
        _3004 = _2906;
        _3006 = _2907;
    }
    float _3018 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3019 = _3018 == 3.0;
    float _3020 = log2(_3006);
    float _3027 = exp2(_3020 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2849 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1094))) + ((_2855 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3028 = exp2(_3020 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2851 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1094))) + ((_2857 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3029 = exp2(_3020 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2853 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1094))) + ((_2859 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3038 = (_3018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3038 * (_3019 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3000)));
    SV_Target.y = _3038 * (_3019 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3002)));
    SV_Target.z = _3038 * (_3019 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.w = cbInstanceData._m0[_2879].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2879].w;
}


