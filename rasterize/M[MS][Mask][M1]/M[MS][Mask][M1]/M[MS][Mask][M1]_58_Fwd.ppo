#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1423;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3750 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3761 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3772 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[23u].w) + _431) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3783 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _456 = (_449 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _457 = (_449 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _458 = (_449 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _497 = _495.x;
    float _507 = dot(vec4(_497, _495.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _521 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_497 - _507) * cbMtdParam._m0[23u].w) + _507) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3794 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _529 = (_522 * ((_475.x * cbMtdParam._m0[13u].x) - _456)) + _456;
    float _530 = (_522 * ((_475.y * cbMtdParam._m0[13u].y) - _457)) + _457;
    float _531 = (_522 * ((_475.z * cbMtdParam._m0[13u].z) - _458)) + _458;
    float _535 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _529;
    float _538 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _530;
    float _541 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _531;
    float _548 = ((_529 - _535) * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) + _535;
    float _549 = ((_530 - _538) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _538;
    float _550 = ((_531 - _541) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _541;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    float _613 = ((_585.x - _604) * _449) + _604;
    float _614 = ((_585.y - _605) * _449) + _605;
    float _615 = ((_585.z - _606) * _449) + _606;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _640 = ((_627.z - _615) * _522) + _615;
    float _643 = ((((_627.x - _613) * _522) + _613) * 2.0) + (-1.0);
    float _644 = ((((_627.y - _614) * _522) + _614) * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3805 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _682 = (_643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_562.x * 2.0) + (-1.0)))) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _683 = (_644 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_562.y * 2.0) + (-1.0)))) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _727 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_697 - _698) * cbMtdParam._m0[24u].w) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3816 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _736 = ((((cbMtdParam._m0[10u].x - _548) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _728) + _548;
    float _737 = ((((cbMtdParam._m0[10u].y - _549) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _728) + _549;
    float _738 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _550)) * _728) + _550;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _766 = _764.x;
    float _784 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _766) * _449) + _766;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _302) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _303) + cbTextureTilingScale._m0[21u].w)).x - _784) * _522) + _784;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _802) * cbMtdParam._m0[19u].z) + _802;
    float _808 = _806 - (_806 * _728);
    float _813 = (((_562.z - _640) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _640;
    float _817 = ((_670.z - _813) * cbMtdParam._m0[19u].w) + _813;
    float _821 = ((cbMtdParam._m0[23u].x - _817) * _728) + _817;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _846 = (_840.x * 2.0) + (-1.0);
    float _847 = (_840.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3827 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _864 = (_728 * (((cbMtdParam._m0[22u].z * _682) - _682) + _846)) + _682;
    float _865 = (_728 * (((cbMtdParam._m0[22u].z * _683) - _683) + _847)) + _683;
    float _866 = (_728 * (sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _650)) + _650;
    float _870 = cbMtdParam._m0[22u].x + _670.w;
    float _873 = fma(_866, _251 * NORMAL.x, fma(_865, _258 * TANGENT.x, (_244 * _236) * _864));
    float _876 = fma(_866, _251 * NORMAL.y, fma(_865, _258 * TANGENT.y, (_244 * _237) * _864));
    float _879 = fma(_866, _251 * NORMAL.z, fma(_865, _258 * TANGENT.z, (_244 * _238) * _864));
    float _883 = inversesqrt(dot(vec3(_873, _876, _879), vec3(_873, _876, _879)));
    float _884 = _883 * _873;
    float _885 = _883 * _876;
    float _886 = _883 * _879;
    float _3838 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _887 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _3860 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3871 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3882 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3893 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _892 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _906 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _956 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _946);
    float _957 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _946);
    float _958 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _946);
    float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
    float _963 = _956 * _962;
    float _964 = _957 * _962;
    float _965 = _958 * _962;
    float _971 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _972 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _990 = fma(_886, cbSceneParam._m0[5u].z, fma(_885, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _884));
    float _993 = fma(_886, cbSceneParam._m0[6u].z, fma(_885, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _884));
    float _996 = fma(_886, cbSceneParam._m0[7u].z, fma(_885, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _884));
    uint _1010 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1016 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_1010].x;
    float _1017 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_1010].y;
    float _1018 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_1010].z;
    float _3904 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1022 = 1.0 - _892;
    float _1023 = _1019 * _1022;
    float _1024 = _1020 * _1022;
    float _1025 = _1021 * _1022;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _892;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _892;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _892;
    float _1033 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    vec4 _1045 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _971, cbSceneParam._m0[86u].y * _972));
    float _1049 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _1045.x;
    float _1050 = dot(vec3(_884, _885, _886), vec3(_963, _964, _965));
    float _1053 = _1050 * 2.0;
    float _1057 = (_1053 * _884) - _963;
    float _1058 = (_1053 * _885) - _964;
    float _1059 = (_1053 * _886) - _965;
    float _1063 = abs(dot(vec3(_963, _964, _965), vec3(_884, _885, _886)));
    float _3937 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1065 = sqrt(_887);
    float _1078 = exp2((_1065 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1065 * 3.0));
    float _1084 = (1.0 - _1078) * ((_1065 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1085 = _1078 * _1065;
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1422;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1147 = fma(_1121, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113));
        float _1151 = fma(_1121, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113));
        float _1155 = fma(_1121, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113));
        float _1180 = _1113 + _884;
        float _1181 = _1117 + _885;
        float _1182 = _1121 + _886;
        float _1192 = fma(_1182, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180)) - _1147;
        float _1193 = fma(_1182, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180)) - _1151;
        float _1194 = fma(_1182, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180)) - _1155;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1147 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1151 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[34u].z) + ((((((_1155 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1250 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1216.x + (-0.5));
        float _1252 = _1250 * (_1216.y + (-0.5));
        float _1253 = _1250 * (_1216.z + (-0.5));
        float _1260 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1223.x + (-0.5));
        float _1262 = _1260 * (_1223.y + (-0.5));
        float _1263 = _1260 * (_1223.z + (-0.5));
        float _1270 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1230.x + (-0.5));
        float _1272 = _1270 * (_1230.y + (-0.5));
        float _1273 = _1270 * (_1230.z + (-0.5));
        float _1280 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1237.x + (-0.5));
        float _1282 = _1280 * (_1237.y + (-0.5));
        float _1283 = _1280 * (_1237.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1304 = (dot(vec3(_884, _885, _886), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1314 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3985 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1316 + 1.0))) + _1321) * _1284;
        float _1331 = _1252 * 0.5;
        float _1332 = _1262 * 0.5;
        float _1333 = _1272 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_884, _885, _886), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4018 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1358 + 1.0))) + _1363) * _1285;
        float _1373 = _1253 * 0.5;
        float _1374 = _1263 * 0.5;
        float _1375 = _1273 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_884, _885, _886), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4051 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1400 + 1.0))) + _1405) * _1286;
        _1422 = _1253;
        _1424 = _1252;
        _1425 = _1251;
        _1426 = _1263;
        _1427 = _1262;
        _1428 = _1261;
        _1429 = _1273;
        _1430 = _1272;
        _1431 = _1271;
        _1432 = _1286;
        _1433 = _1285;
        _1434 = _1284;
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1423;
        _1424 = _1423;
        _1425 = _1423;
        _1426 = _1423;
        _1427 = _1423;
        _1428 = _1423;
        _1429 = _1423;
        _1430 = _1423;
        _1431 = _1423;
        _1432 = _1423;
        _1433 = _1423;
        _1434 = _1423;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1461 = fma(_1121, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113));
        float _1465 = fma(_1121, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113));
        float _1469 = fma(_1121, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113));
        float _1492 = _1113 + _884;
        float _1493 = _1117 + _885;
        float _1494 = _1121 + _886;
        float _1504 = fma(_1494, cbModelParam._m0[30u].z, fma(_1493, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[31u].z, fma(_1493, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[32u].z, fma(_1493, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1523 = ((_1510 * _1504) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1461 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1505) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1465 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1510 * _1506) / cbModelParam._m0[35u].z) + ((((((_1469 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1560 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1527.x + (-0.5));
        float _1562 = _1560 * (_1527.y + (-0.5));
        float _1563 = _1560 * (_1527.z + (-0.5));
        float _1570 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1534.x + (-0.5));
        float _1572 = _1570 * (_1534.y + (-0.5));
        float _1573 = _1570 * (_1534.z + (-0.5));
        float _1580 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1541.x + (-0.5));
        float _1582 = _1580 * (_1541.y + (-0.5));
        float _1583 = _1580 * (_1541.z + (-0.5));
        float _1590 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1548.x + (-0.5));
        float _1592 = _1590 * (_1548.y + (-0.5));
        float _1593 = _1590 * (_1548.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_884, _885, _886), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4114 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1624 + 1.0))) + _1629) * _1594;
        float _1639 = _1562 * 0.5;
        float _1640 = _1572 * 0.5;
        float _1641 = _1582 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_884, _885, _886), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4147 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1666 + 1.0))) + _1671) * _1595;
        float _1681 = _1563 * 0.5;
        float _1682 = _1573 * 0.5;
        float _1683 = _1583 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_884, _885, _886), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4180 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1708 + 1.0))) + _1713) * _1596;
        _1730 = _1563;
        _1731 = _1562;
        _1732 = _1561;
        _1733 = _1573;
        _1734 = _1572;
        _1735 = _1571;
        _1736 = _1583;
        _1737 = _1582;
        _1738 = _1581;
        _1739 = _1596;
        _1740 = _1595;
        _1741 = _1594;
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1423;
        _1731 = _1423;
        _1732 = _1423;
        _1733 = _1423;
        _1734 = _1423;
        _1735 = _1423;
        _1736 = _1423;
        _1737 = _1423;
        _1738 = _1423;
        _1739 = _1423;
        _1740 = _1423;
        _1741 = _1423;
        _1742 = 0.0;
        _1743 = 0.0;
        _1744 = 0.0;
    }
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1435)) + _1435;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1436)) + _1436;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1437)) + _1437;
    float _1777 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1754));
    float _1798 = _1057 * 0.5;
    float _1799 = _1058 * 0.5;
    float _1800 = _1059 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1841;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1422, _1426, _1429, _1432));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1852;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1843 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1856 = (_1852 * cbModelParam._m0[1u].x) + (_1841 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1916 = fma(_1121, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113)) + cbModelParam._m0[13u].w;
        float _1920 = fma(_1121, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113)) + cbModelParam._m0[14u].w;
        float _1924 = fma(_1121, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113)) + cbModelParam._m0[15u].w;
        float _1927 = fma(_1059, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057));
        float _1930 = fma(_1059, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057));
        float _1933 = fma(_1059, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057));
        float _1961;
        if (_1927 > 0.0)
        {
            _1961 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1961 = frontier_phi_14_12_ladder;
        }
        float _2164;
        if (_1930 > 0.0)
        {
            _2164 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2164 = frontier_phi_23_19_ladder;
        }
        float _2418;
        if (_1933 > 0.0)
        {
            _2418 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2418 = frontier_phi_35_30_ladder;
        }
        float _2420 = isnan(_2164) ? _1961 : (isnan(_1961) ? _2164 : min(_1961, _2164));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1927) + _1916;
        float _2426 = (_2421 * _1930) + _1920;
        float _2427 = (_2421 * _1933) + _1924;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_13_35_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1949 = frontier_phi_13_35_ladder_2;
        _1951 = frontier_phi_13_35_ladder_1;
        _1953 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1057, _1058, _1059), _1867);
        _1949 = _1937.x * cbModelParam._m0[1u].y;
        _1951 = _1937.y * cbModelParam._m0[1u].y;
        _1953 = _1937.z * cbModelParam._m0[1u].y;
    }
    float _1957 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1957 : min(cbModelParam._m0[25u].w, _1957));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1121, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1121, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1121, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1059, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057));
        float _2026 = fma(_1059, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057));
        float _2029 = fma(_1059, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057));
        float _2169;
        if (_2023 > 0.0)
        {
            _2169 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2169 = frontier_phi_25_21_ladder;
        }
        float _2445;
        if (_2026 > 0.0)
        {
            _2445 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2445 = frontier_phi_37_32_ladder;
        }
        float _2658;
        if (_2029 > 0.0)
        {
            _2658 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2658 = frontier_phi_46_43_ladder;
        }
        float _2660 = isnan(_2445) ? _2169 : (isnan(_2169) ? _2445 : min(_2169, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _2023) + _2012;
        float _2666 = (_2661 * _2026) + _2016;
        float _2667 = (_2661 * _2029) + _2020;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1958);
            frontier_phi_22_46_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_22_46_ladder_2;
        _2050 = frontier_phi_22_46_ladder_1;
        _2052 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1057, _1058, _1059), _1958);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1084 * _1033) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2067 = (((_1084 * _1035) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2050 - _1951)) + _1951);
    float _2069 = (((_1084 * _1036) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _1049 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2123 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2127 = _2090 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_884, _885, _886));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_884, _885, _886));
    float _4316 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4327 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2107].x * _2113) * _2148) + ((cbLight._m0[_2117].x * _2123) * _2146);
    float _2156 = ((_2113 * cbLight._m0[_2107].y) * _2148) + ((_2123 * cbLight._m0[_2117].y) * _2146);
    float _2157 = ((_2113 * cbLight._m0[_2107].z) * _2148) + ((_2123 * cbLight._m0[_2117].z) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2090 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4338 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2201 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2389 = _2090 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4354 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2408 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2219 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2174;
        _2221 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2176;
        _2223 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2178;
    }
    uint _2226 = _2090 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _887) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2090].x + _963;
    float _2242 = cbLight._m0[_2090].y + _964;
    float _2243 = cbLight._m0[_2090].z + _965;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2090].xyz));
    float _4370 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _2255 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2256 = dot(vec3(_884, _885, _886), vec3(_2248, _2249, _2250));
    float _4392 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2248, _2249, _2250));
    float _4403 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
    float _2277 = 0.959999978542327880859375 - _1030;
    float _2279 = 0.959999978542327880859375 - _1031;
    float _2280 = 0.959999978542327880859375 - _1032;
    float _2287 = 1.0 - _2240;
    float _2298 = (0.5 / (((_2255 * ((_2254 * _2287) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2287) + _2240) * _2254))) * _2254;
    float _4414 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2311 = _2090 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _887) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2127].x + _963;
    float _2325 = cbLight._m0[_2127].y + _964;
    float _2326 = cbLight._m0[_2127].z + _965;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2127].xyz));
    float _4425 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2338 = dot(vec3(_884, _885, _886), vec3(_2331, _2332, _2333));
    float _4436 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2331, _2332, _2333));
    float _4447 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2255 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2364) + _2323) * _2337))) * _2337;
    float _4458 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2277) + _1033) * cbLight._m0[_2311].x) * _2376) * _2113) + (((((_2276 * _2277) + _1033) * cbLight._m0[_2226].x) * _2300) * _2123);
    float _2387 = (((((_2357 * _2279) + _1035) * cbLight._m0[_2311].y) * _2376) * _2113) + (((((_2276 * _2279) + _1035) * cbLight._m0[_2226].y) * _2300) * _2123);
    float _2388 = (((((_2357 * _2280) + _1036) * cbLight._m0[_2311].z) * _2376) * _2113) + (((((_2276 * _2280) + _1036) * cbLight._m0[_2226].z) * _2300) * _2123);
    float _2450;
    float _2452;
    float _2454;
    if (_2163)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2090 + 2u;
        uint _2460 = _2090 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _887) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _963;
        float _2477 = cbLight._m0[_2456].y + _964;
        float _2478 = cbLight._m0[_2456].z + _965;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2456].xyz));
        float _4469 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2490 = dot(vec3(_884, _885, _886), vec3(_2483, _2484, _2485));
        float _4480 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4491 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2255 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2516) + _2475) * _2489))) * _2489;
        float _4502 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2450 = (((((_2509 * _2277) + _1033) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2279) + _1035) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2280) + _1036) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2181)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2090 + 3u;
        uint _2579 = _2090 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _887) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _963;
        float _2596 = cbLight._m0[_2575].y + _964;
        float _2597 = cbLight._m0[_2575].z + _965;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2575].xyz));
        float _4518 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2609 = dot(vec3(_884, _885, _886), vec3(_2602, _2603, _2604));
        float _4529 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4540 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2255 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2635) + _2594) * _2608))) * _2608;
        float _4551 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2564 = (((((_2628 * _2277) + _1033) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2279) + _1035) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2280) + _1036) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2088.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _972) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _971) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3032)
                {
                    frontier_phi_61_pred = _3016;
                    frontier_phi_61_pred_1 = _3021;
                    frontier_phi_61_pred_2 = _3020;
                    frontier_phi_61_pred_3 = _3019;
                    frontier_phi_61_pred_4 = _3018;
                    frontier_phi_61_pred_5 = _3017;
                }
                else
                {
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    uint _3146;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3031;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3150 = uint(findLSB(_3146)) + (_3022 << 5u);
                        uint _3147 = (_3146 + 4294967295u) & _3146;
                        uint _3152 = _3150 * 48u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3172 = (_3150 * 48u) + 4u;
                        vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3191 = (_3150 * 48u) + 8u;
                        vec3 _3202 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x));
                        float _3206 = _3166.x - _2724;
                        float _3207 = _3166.y - _2725;
                        float _3208 = _3166.z - _2726;
                        float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                        float _3212 = inversesqrt(_3209);
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3216 = dot(vec3(_990, _993, _996), vec3(_3213, _3214, _3215));
                        float _3221 = 1.0 - (_3209 * _3166.w);
                        float _4577 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3223 = sqrt(_3209) * _3185.w;
                        float _3226 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3216) + _3227;
                        float _3233 = _3223 * _3223;
                        float _3237 = ((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3222) / ((_3233 * 0.699999988079071044921875) + 1.0);
                        float _3241 = (-0.0) - _2724;
                        float _3242 = (-0.0) - _2725;
                        float _3243 = (-0.0) - _2726;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3258 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                        float _3259 = 1.0 - _1065;
                        float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                        float _3267 = _3266 * _3266;
                        float _3268 = _3267 * _3267;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3279 = dot(vec3(_990, _993, _996), vec3(_3248, _3249, _3250));
                        float _4593 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3283 = dot(vec3(_990, _993, _996), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                        float _4604 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                        float _3291 = _3226 * _3267;
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3216) + _3292;
                        float _4615 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3297 = 1.0 - _3267;
                        float _3307 = (0.5 / (((_3296 * ((_3282 * _3297) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3267) * _3282))) * _3296;
                        float _4626 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3318 = (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) / ((_3290 * _3290) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125))) * _3222;
                        _3075 = (_3237 * _3185.x) + _3143;
                        _3076 = (_3237 * _3185.y) + _3144;
                        _3077 = (_3237 * _3185.z) + _3145;
                        _3072 = (_3318 * _3202.x) + _3140;
                        _3073 = (_3318 * _3202.y) + _3141;
                        _3074 = (_3318 * _3202.z) + _3142;
                        if (_3147 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3147;
                        }
                    }
                    frontier_phi_61_pred = _3072;
                    frontier_phi_61_pred_1 = _3077;
                    frontier_phi_61_pred_2 = _3076;
                    frontier_phi_61_pred_3 = _3075;
                    frontier_phi_61_pred_4 = _3074;
                    frontier_phi_61_pred_5 = _3073;
                }
                _2872 = frontier_phi_61_pred;
                _2882 = frontier_phi_61_pred_1;
                _2880 = frontier_phi_61_pred_2;
                _2878 = frontier_phi_61_pred_3;
                _2876 = frontier_phi_61_pred_4;
                _2874 = frontier_phi_61_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2872;
                    _3017 = _2874;
                    _3018 = _2876;
                    _3019 = _2878;
                    _3020 = _2880;
                    _3021 = _2882;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2888) & _2770) == 0u)
        {
            _2984 = _2871;
            _2986 = _2873;
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3010 = _3009 * _2724;
            float _3011 = _3009 * _2725;
            float _3012 = _3009 * _2726;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3123 = _2871;
                float _3124 = _2873;
                float _3125 = _2875;
                float _3126 = _2877;
                float _3127 = _2879;
                float _3128 = _2881;
                uint _3129 = _2888;
                uint _3138;
                bool _3139;
                for (;;)
                {
                    _3138 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                    _3139 = _3138 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3139)
                    {
                        frontier_phi_67_pred = _3126;
                        frontier_phi_67_pred_1 = _3127;
                        frontier_phi_67_pred_2 = _3128;
                        frontier_phi_67_pred_3 = _3125;
                        frontier_phi_67_pred_4 = _3124;
                        frontier_phi_67_pred_5 = _3123;
                    }
                    else
                    {
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3336 = _3123;
                        float _3337 = _3124;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        uint _3342 = _3138;
                        uint _3343;
                        vec4 _3368;
                        float _3369;
                        vec4 _3384;
                        vec3 _3396;
                        vec4 _3411;
                        vec4 _3426;
                        float _3472;
                        bool _3473;
                        for (;;)
                        {
                            uint _3353 = ((_3129 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3342));
                            _3343 = (_3342 + 4294967295u) & _3342;
                            uint _3355 = _3353 * 40u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3369 = _3368.w;
                            uint _3371 = (_3353 * 40u) + 4u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3353 * 40u) + 8u;
                            _3396 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x));
                            uint _3398 = (_3353 * 40u) + 16u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3353 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3353 * 40u) + 24u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3447 = (_3353 * 40u) + 28u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3472 = fma(_2726, _3460.z, fma(_2725, _3460.y, _3460.x * _2724)) + _3460.w;
                            _3473 = !((fma(_2726, _3441.z, fma(_2725, _3441.y, _3441.x * _2724)) + _3441.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3473)
                            {
                                float _3500 = _3368.x - _2724;
                                float _3501 = _3368.y - _2725;
                                float _3502 = _3368.z - _2726;
                                float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                                float _3506 = inversesqrt(_3503);
                                float _3507 = _3506 * _3500;
                                float _3508 = _3506 * _3501;
                                float _3509 = _3506 * _3502;
                                float _3513 = 1.0 - (_3503 / (_3369 * _3369));
                                float _4637 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3518 = sqrt(_3503) * _3384.w;
                                float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                                float _3521 = _3520 * _3520;
                                float _3524 = ((1.0 - _3521) * dot(vec3(_3507, _3508, _3509), vec3(_990, _993, _996))) + _3521;
                                float _3527 = _3518 * _3518;
                                float _3531 = (fma(_2726, _3411.z, fma(_2725, _3411.y, _3411.x * _2724)) + _3411.w) / _3472;
                                float _3532 = (fma(_2726, _3426.z, fma(_2725, _3426.y, _3426.x * _2724)) + _3426.w) / _3472;
                                float _3536 = 1.0 - dot(vec2(_3531, _3532), vec2(_3531, _3532));
                                float _4653 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3538 = _3537 * (((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3514) / ((_3527 * 0.699999988079071044921875) + 1.0));
                                float _3550 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                                float _3551 = 1.0 - _1065;
                                float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                                float _3559 = _3558 * _3558;
                                float _3560 = _3559 * _3559;
                                float _3561 = _3507 - _3010;
                                float _3562 = _3508 - _3011;
                                float _3563 = _3509 - _3012;
                                float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                                float _3571 = dot(vec3(_990, _993, _996), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4664 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3575 = dot(vec3(_990, _993, _996), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                                float _4675 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                                float _3583 = _3520 * _3559;
                                float _3584 = _3583 * _3583;
                                float _3590 = ((1.0 - _3584) * dot(vec3(_990, _993, _996), vec3(_3507, _3508, _3509))) + _3584;
                                float _4686 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3592 = 1.0 - _3559;
                                float _3602 = (0.5 / (((_3591 * ((_3574 * _3592) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3559) * _3574))) * _3591;
                                float _4697 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3612 = (_3537 * _3514) * (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3582 * _3582) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3612 * _3396.x;
                                frontier_phi_73_pred_1 = _3612 * _3396.y;
                                frontier_phi_73_pred_2 = _3538 * _3384.z;
                                frontier_phi_73_pred_3 = _3538 * _3384.y;
                                frontier_phi_73_pred_4 = _3538 * _3384.x;
                                frontier_phi_73_pred_5 = _3612 * _3396.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_73_pred;
                            _3617 = frontier_phi_73_pred_1;
                            _3621 = frontier_phi_73_pred_2;
                            _3620 = frontier_phi_73_pred_3;
                            _3619 = frontier_phi_73_pred_4;
                            _3618 = frontier_phi_73_pred_5;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            if (_3343 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3343;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3326;
                        frontier_phi_67_pred_1 = _3327;
                        frontier_phi_67_pred_2 = _3328;
                        frontier_phi_67_pred_3 = _3325;
                        frontier_phi_67_pred_4 = _3324;
                        frontier_phi_67_pred_5 = _3323;
                    }
                    _2991 = frontier_phi_67_pred;
                    _2993 = frontier_phi_67_pred_1;
                    _2995 = frontier_phi_67_pred_2;
                    _2989 = frontier_phi_67_pred_3;
                    _2987 = frontier_phi_67_pred_4;
                    _2985 = frontier_phi_67_pred_5;
                    uint _3130 = _3129 + 1u;
                    if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3123 = _2985;
                        _3124 = _2987;
                        _3125 = _2989;
                        _3126 = _2991;
                        _3127 = _2993;
                        _3128 = _2995;
                        _3129 = _3130;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2993;
                frontier_phi_55_56_ladder_1 = _2995;
                frontier_phi_55_56_ladder_2 = _2991;
                frontier_phi_55_56_ladder_3 = _2989;
                frontier_phi_55_56_ladder_4 = _2987;
                frontier_phi_55_56_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_55_56_ladder = _2879;
                frontier_phi_55_56_ladder_1 = _2881;
                frontier_phi_55_56_ladder_2 = _2877;
                frontier_phi_55_56_ladder_3 = _2875;
                frontier_phi_55_56_ladder_4 = _2873;
                frontier_phi_55_56_ladder_5 = _2871;
            }
            _2984 = frontier_phi_55_56_ladder_5;
            _2986 = frontier_phi_55_56_ladder_4;
            _2988 = frontier_phi_55_56_ladder_3;
            _2990 = frontier_phi_55_56_ladder_2;
            _2992 = frontier_phi_55_56_ladder;
            _2994 = frontier_phi_55_56_ladder_1;
        }
        float _2999 = isnan(1.0) ? _1049 : (isnan(_1049) ? 1.0 : min(_1049, 1.0));
        _2783 = (_2999 * _2990) + _2219;
        _2785 = (_2999 * _2992) + _2221;
        _2787 = (_2999 * _2994) + _2223;
        _2789 = ((_2984 * _1033) * _2999) + _2564;
        _2791 = ((_2986 * _1035) * _2999) + _2566;
        _2793 = ((_2988 * _1036) * _2999) + _2568;
    }
    else
    {
        _2783 = _2219;
        _2785 = _2221;
        _2787 = _2223;
        _2789 = _2564;
        _2791 = _2566;
        _2793 = _2568;
    }
    float _4713 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4724 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4735 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    uint _2813 = _283 + 6u;
    float _2821 = _971 / cbSceneParam._m0[86u].x;
    float _2822 = _972 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _906 : (isnan(_906) ? cbSceneParam._m0[77u].w : min(_906, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_906 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_906) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _906 : min(cbSceneParam._m0[80u].w, _906));
        float _2897 = _2896 / _906;
        float _2908 = _2897 * _956;
        float _2909 = _957 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2912 = _2897 * _958;
        float _2914 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2909;
        float _2922 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2910 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3047 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3085 = ((abs(_2922 / _2910) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2932 * _3056) - exp2(_2932 * _3057)) * _3045))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2841);
        _2934 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2936 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2938 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2940 = _3096 * _2841;
    }
    else
    {
        _2934 = _2838;
        _2936 = _2839;
        _2938 = _2840;
        _2940 = _2841;
    }
    float _2952 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2953 = _2952 == 3.0;
    float _2954 = log2(_2940);
    float _2961 = exp2(_2954 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2783 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1049))) + ((_2789 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2962 = exp2(_2954 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2785 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1049))) + ((_2791 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2963 = exp2(_2954 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2787 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1049))) + ((_2793 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2972 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2972 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.y = _2972 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.z = _2972 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.w = cbInstanceData._m0[_2813].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
}


