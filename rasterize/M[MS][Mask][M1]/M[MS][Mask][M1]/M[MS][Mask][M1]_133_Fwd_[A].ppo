#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1594;
float _3971;
float _3972;
float _3973;
float _3974;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3983 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3994 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4005 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _352 = _347.x * cbMtdParam._m0[11u].x;
    float _353 = _347.y * cbMtdParam._m0[11u].y;
    float _354 = _347.z * cbMtdParam._m0[11u].z;
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _392.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4016 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _466 = (_459 * ((_373.x * cbMtdParam._m0[12u].x) - _352)) + _352;
    float _467 = (_459 * ((_373.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _468 = (_459 * ((_373.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _392.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4027 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _579 = _577.x;
    float _589 = dot(vec4(_579, _577.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _601 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _392.z) * 2.0) - ((((_579 - _589) * cbMtdParam._m0[23u].w) + _589) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4038 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _609 = (_602 * ((_560.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _610 = (_602 * ((_560.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _611 = (_602 * ((_560.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _615 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _609;
    float _618 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _610;
    float _621 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _611;
    float _628 = ((_609 - _615) * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) + _615;
    float _629 = ((_610 - _618) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) + _618;
    float _630 = ((_611 - _621) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) + _621;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _309) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _310) + cbTextureTilingScale._m0[14u].w));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _711 = _707.z;
    float _718 = ((_690.x - _709) * _459) + _709;
    float _719 = ((_690.y - _710) * _459) + _710;
    float _720 = ((_690.z - _711) * _459) + _711;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _743 = ((_732.x - _718) * _532) + _718;
    float _744 = ((_732.y - _719) * _532) + _719;
    float _745 = ((_732.z - _720) * _532) + _720;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _770 = ((_757.z - _745) * _602) + _745;
    float _773 = ((((_757.x - _743) * _602) + _743) * 2.0) + (-1.0);
    float _774 = ((((_757.y - _744) * _602) + _744) * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4049 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _837 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_821 - _822) * cbMtdParam._m0[24u].z) + _822) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4060 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _838 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _845 = (_838 * ((_648.x * cbMtdParam._m0[18u].x) - _628)) + _628;
    float _846 = (_838 * ((_648.y * cbMtdParam._m0[18u].y) - _629)) + _629;
    float _847 = (_838 * ((_648.z * cbMtdParam._m0[18u].z) - _630)) + _630;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _875 = _873.x;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _875) * _459) + _875;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _893) * _532) + _893;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _910) * _602) + _910;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _928) * cbMtdParam._m0[19u].z) + _928;
    float _934 = _932 - (_932 * _838);
    float _939 = (((_667.z - _770) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _770;
    float _943 = ((_794.z - _939) * cbMtdParam._m0[19u].w) + _939;
    vec4 _956 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _963 = (_956.x * 2.0) + (-1.0);
    float _964 = (_956.y * 2.0) + (-1.0);
    float _965 = dot(vec2(_963, _964), vec2(_963, _964));
    float _4071 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _973 = (_838 * (_956.z - _943)) + _943;
    float _982 = (_773 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_667.x * 2.0) + (-1.0)))) + (((_794.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _983 = (_774 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_667.y * 2.0) + (-1.0)))) + (((_794.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _995 = (((_963 - _982) + (cbMtdParam._m0[21u].x * _982)) * _838) + _982;
    float _996 = (((_964 - _983) + (cbMtdParam._m0[21u].x * _983)) * _838) + _983;
    float _997 = (_838 * (sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) - _780)) + _780;
    float _1001 = cbMtdParam._m0[22u].x + _794.w;
    float _1004 = fma(_997, _256 * NORMAL.x, fma(_996, _263 * TANGENT.x, (_249 * _241) * _995));
    float _1007 = fma(_997, _256 * NORMAL.y, fma(_996, _263 * TANGENT.y, (_249 * _242) * _995));
    float _1010 = fma(_997, _256 * NORMAL.z, fma(_996, _263 * TANGENT.z, (_249 * _243) * _995));
    float _1014 = inversesqrt(dot(vec3(_1004, _1007, _1010), vec3(_1004, _1007, _1010)));
    float _1015 = _1014 * _1004;
    float _1016 = _1014 * _1007;
    float _1017 = _1014 * _1010;
    float _4082 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _1018 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4104 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4115 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4126 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4137 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1023 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1037 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1087 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1077);
    float _1088 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1077);
    float _1089 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1077);
    float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
    float _1094 = _1087 * _1093;
    float _1095 = _1088 * _1093;
    float _1096 = _1089 * _1093;
    vec4 _1101 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1103 = _1101.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1275 = sqrt(((_1087 * _1087) + (_1088 * _1088)) + (_1089 * _1089));
        float _1281 = (cbMatDynParam._m0[5u].x * _1275) + cbMatDynParam._m0[5u].y;
        float _4148 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1286 = (cbMatDynParam._m0[5u].z * _1275) + cbMatDynParam._m0[5u].w;
        float _4159 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) - _1282)) + _1282) < ((_1103 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1114 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1115 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1133 = fma(_1017, cbSceneParam._m0[5u].z, fma(_1016, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1015));
    float _1136 = fma(_1017, cbSceneParam._m0[6u].z, fma(_1016, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1015));
    float _1139 = fma(_1017, cbSceneParam._m0[7u].z, fma(_1016, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1015));
    uint _1152 = _290 + 9u;
    uint _1153 = _1152 + uint(cbMatDynParam._m0[0u].w);
    float _1159 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_1153].x;
    float _1160 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_1153].y;
    float _1161 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_1153].z;
    float _4170 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _1165 = 1.0 - _1023;
    float _1166 = _1162 * _1165;
    float _1167 = _1163 * _1165;
    float _1168 = _1164 * _1165;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1023;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1023;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1023;
    float _1176 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    float _1179 = _1175 + 0.039999999105930328369140625;
    vec4 _1188 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1114, cbSceneParam._m0[86u].y * _1115));
    float _1192 = ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * TEXCOORD_5.w) * _1188.x;
    float _1193 = dot(vec3(_1015, _1016, _1017), vec3(_1094, _1095, _1096));
    float _1196 = _1193 * 2.0;
    float _1200 = (_1196 * _1015) - _1094;
    float _1201 = (_1196 * _1016) - _1095;
    float _1202 = (_1196 * _1017) - _1096;
    float _1206 = abs(dot(vec3(_1094, _1095, _1096), vec3(_1015, _1016, _1017)));
    float _4203 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1208 = sqrt(_1018);
    float _1221 = exp2((_1208 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1208 * 3.0));
    float _1227 = (1.0 - _1221) * ((_1208 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1228 = _1221 * _1208;
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1593;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1318 = fma(_1264, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256));
        float _1322 = fma(_1264, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256));
        float _1326 = fma(_1264, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256));
        float _1351 = _1256 + _1015;
        float _1352 = _1260 + _1016;
        float _1353 = _1264 + _1017;
        float _1363 = fma(_1353, cbModelParam._m0[26u].z, fma(_1352, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1351)) - _1318;
        float _1364 = fma(_1353, cbModelParam._m0[27u].z, fma(_1352, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1351)) - _1322;
        float _1365 = fma(_1353, cbModelParam._m0[28u].z, fma(_1352, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1351)) - _1326;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1318 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1322 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[34u].z) + ((((((_1326 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1421 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1387.x + (-0.5));
        float _1423 = _1421 * (_1387.y + (-0.5));
        float _1424 = _1421 * (_1387.z + (-0.5));
        float _1431 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1394.x + (-0.5));
        float _1433 = _1431 * (_1394.y + (-0.5));
        float _1434 = _1431 * (_1394.z + (-0.5));
        float _1441 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1401.x + (-0.5));
        float _1443 = _1441 * (_1401.y + (-0.5));
        float _1444 = _1441 * (_1401.z + (-0.5));
        float _1451 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1408.x + (-0.5));
        float _1453 = _1451 * (_1408.y + (-0.5));
        float _1454 = _1451 * (_1408.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1475 = (dot(vec3(_1015, _1016, _1017), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1485 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4251 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1487 + 1.0))) + _1492) * _1455;
        float _1502 = _1423 * 0.5;
        float _1503 = _1433 * 0.5;
        float _1504 = _1443 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1015, _1016, _1017), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4284 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1529 + 1.0))) + _1534) * _1456;
        float _1544 = _1424 * 0.5;
        float _1545 = _1434 * 0.5;
        float _1546 = _1444 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_1015, _1016, _1017), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4317 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1571 + 1.0))) + _1576) * _1457;
        _1593 = _1424;
        _1595 = _1423;
        _1596 = _1422;
        _1597 = _1434;
        _1598 = _1433;
        _1599 = _1432;
        _1600 = _1444;
        _1601 = _1443;
        _1602 = _1442;
        _1603 = _1457;
        _1604 = _1456;
        _1605 = _1455;
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1607 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1594;
        _1595 = _1594;
        _1596 = _1594;
        _1597 = _1594;
        _1598 = _1594;
        _1599 = _1594;
        _1600 = _1594;
        _1601 = _1594;
        _1602 = _1594;
        _1603 = _1594;
        _1604 = _1594;
        _1605 = _1594;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1634 = fma(_1264, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256));
        float _1638 = fma(_1264, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256));
        float _1642 = fma(_1264, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256));
        float _1665 = _1256 + _1015;
        float _1666 = _1260 + _1016;
        float _1667 = _1264 + _1017;
        float _1677 = fma(_1667, cbModelParam._m0[30u].z, fma(_1666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1665)) - _1634;
        float _1678 = fma(_1667, cbModelParam._m0[31u].z, fma(_1666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1665)) - _1638;
        float _1679 = fma(_1667, cbModelParam._m0[32u].z, fma(_1666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1665)) - _1642;
        float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
        float _1696 = ((_1683 * _1677) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1634 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1697 = ((_1683 * _1678) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1638 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1683 * _1679) / cbModelParam._m0[35u].z) + ((((((_1642 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        float _1733 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1700.x + (-0.5));
        float _1735 = _1733 * (_1700.y + (-0.5));
        float _1736 = _1733 * (_1700.z + (-0.5));
        float _1743 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1707.x + (-0.5));
        float _1745 = _1743 * (_1707.y + (-0.5));
        float _1746 = _1743 * (_1707.z + (-0.5));
        float _1753 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1714.x + (-0.5));
        float _1755 = _1753 * (_1714.y + (-0.5));
        float _1756 = _1753 * (_1714.z + (-0.5));
        float _1763 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1721.x + (-0.5));
        float _1765 = _1763 * (_1721.y + (-0.5));
        float _1766 = _1763 * (_1721.z + (-0.5));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = _1734 * 0.5;
        float _1771 = _1744 * 0.5;
        float _1772 = _1754 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_1015, _1016, _1017), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4380 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1797 + 1.0))) + _1802) * _1767;
        float _1812 = _1735 * 0.5;
        float _1813 = _1745 * 0.5;
        float _1814 = _1755 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_1015, _1016, _1017), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4413 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1839 + 1.0))) + _1844) * _1768;
        float _1854 = _1736 * 0.5;
        float _1855 = _1746 * 0.5;
        float _1856 = _1756 * 0.5;
        float _1857 = dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856));
        float _1862 = (_1857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1857);
        float _1870 = (dot(vec3(_1015, _1016, _1017), vec3(_1862 * _1854, _1862 * _1855, _1862 * _1856)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1879 = sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1881 = _1880 * 2.0;
        float _1885 = (1.0 - _1880) / (_1880 + 1.0);
        float _4446 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1895 = ((((1.0 - _1886) * (_1881 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1881 + 1.0))) + _1886) * _1769;
        _1903 = _1736;
        _1904 = _1735;
        _1905 = _1734;
        _1906 = _1746;
        _1907 = _1745;
        _1908 = _1744;
        _1909 = _1756;
        _1910 = _1755;
        _1911 = _1754;
        _1912 = _1769;
        _1913 = _1768;
        _1914 = _1767;
        _1915 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)));
    }
    else
    {
        _1903 = _1594;
        _1904 = _1594;
        _1905 = _1594;
        _1906 = _1594;
        _1907 = _1594;
        _1908 = _1594;
        _1909 = _1594;
        _1910 = _1594;
        _1911 = _1594;
        _1912 = _1594;
        _1913 = _1594;
        _1914 = _1594;
        _1915 = 0.0;
        _1916 = 0.0;
        _1917 = 0.0;
    }
    float _1927 = (cbModelParam._m0[1u].x * (_1915 - _1606)) + _1606;
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1607)) + _1607;
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1608)) + _1608;
    float _1950 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1927));
    float _1971 = _1200 * 0.5;
    float _1972 = _1201 * 0.5;
    float _1973 = _1202 * 0.5;
    float _1974 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _1977 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _1980 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1903, _1906, _1909, _1912));
    float _2014;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1987 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1593, _1597, _1600, _1603));
        float _1991 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1595, _1598, _1601, _1604));
        float _1995 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1596, _1599, _1602, _1605));
        float _2002 = dot(vec4(cbModelParam._m0[39u]), vec4(_1971, _1972, _1973, 1.0));
        _2014 = dot(vec3(isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2002) ? 0.0 : (isnan(0.0) ? _2002 : max(0.0, _2002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2014 = 1.0;
    }
    float _2025;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2016 = dot(vec4(cbModelParam._m0[40u]), vec4(_1971, _1972, _1973, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2016) ? 0.0 : (isnan(0.0) ? _2016 : max(0.0, _2016))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2029 = (_2025 * cbModelParam._m0[1u].x) + (_2014 * (1.0 - cbModelParam._m0[1u].x));
    float _2039 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1018);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2039 : min(cbModelParam._m0[25u].z, _2039));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2087 = fma(_1264, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1256)) + cbModelParam._m0[13u].w;
        float _2091 = fma(_1264, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1256)) + cbModelParam._m0[14u].w;
        float _2095 = fma(_1264, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1256)) + cbModelParam._m0[15u].w;
        float _2098 = fma(_1202, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200));
        float _2101 = fma(_1202, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200));
        float _2104 = fma(_1202, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200));
        float _2132;
        if (_2098 > 0.0)
        {
            _2132 = abs((1.0 - _2087) / _2098);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2087 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2132 = frontier_phi_17_15_ladder;
        }
        float _2334;
        if (_2101 > 0.0)
        {
            _2334 = abs((1.0 - _2091) / _2101);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2091 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2334 = frontier_phi_26_22_ladder;
        }
        float _2588;
        if (_2104 > 0.0)
        {
            _2588 = abs((1.0 - _2095) / _2104);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2095 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2588 = frontier_phi_38_33_ladder;
        }
        float _2590 = isnan(_2334) ? _2132 : (isnan(_2132) ? _2334 : min(_2132, _2334));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _2098) + _2087;
        float _2596 = (_2591 * _2101) + _2091;
        float _2597 = (_2591 * _2104) + _2095;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2598;
        float _2602 = _2598 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 > _2602) || ((_2596 < _2600) || ((_2595 < _2600) || (_2595 > _2602))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2597, cbModelParam._m0[9u].z, fma(_2596, cbModelParam._m0[9u].y, _2595 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2597, cbModelParam._m0[10u].z, fma(_2596, cbModelParam._m0[10u].y, _2595 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2597, cbModelParam._m0[11u].z, fma(_2596, cbModelParam._m0[11u].y, _2595 * cbModelParam._m0[11u].x))), _2040);
            frontier_phi_16_38_ladder = _2725.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2725.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2725.x * cbModelParam._m0[1u].y;
        }
        _2120 = frontier_phi_16_38_ladder_2;
        _2122 = frontier_phi_16_38_ladder_1;
        _2124 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1200, _1201, _1202), _2040);
        _2120 = _2108.x * cbModelParam._m0[1u].y;
        _2122 = _2108.y * cbModelParam._m0[1u].y;
        _2124 = _2108.z * cbModelParam._m0[1u].y;
    }
    float _2128 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1018);
    float _2129 = isnan(_2128) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2128 : min(cbModelParam._m0[25u].w, _2128));
    float _2218;
    float _2220;
    float _2222;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2182 = fma(_1264, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1256)) + cbModelParam._m0[21u].w;
        float _2186 = fma(_1264, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1256)) + cbModelParam._m0[22u].w;
        float _2190 = fma(_1264, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1256)) + cbModelParam._m0[23u].w;
        float _2193 = fma(_1202, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200));
        float _2196 = fma(_1202, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200));
        float _2199 = fma(_1202, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200));
        float _2339;
        if (_2193 > 0.0)
        {
            _2339 = abs((1.0 - _2182) / _2193);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2182 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2339 = frontier_phi_28_24_ladder;
        }
        float _2615;
        if (_2196 > 0.0)
        {
            _2615 = abs((1.0 - _2186) / _2196);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2186 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2615 = frontier_phi_40_35_ladder;
        }
        float _2828;
        if (_2199 > 0.0)
        {
            _2828 = abs((1.0 - _2190) / _2199);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2190 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2828 = frontier_phi_49_46_ladder;
        }
        float _2830 = isnan(_2615) ? _2339 : (isnan(_2339) ? _2615 : min(_2339, _2615));
        float _2831 = isnan(_2828) ? _2830 : (isnan(_2830) ? _2828 : min(_2830, _2828));
        float _2835 = (_2831 * _2193) + _2182;
        float _2836 = (_2831 * _2196) + _2186;
        float _2837 = (_2831 * _2199) + _2190;
        float _2838 = _2831 * 9.9999997473787516355514526367188e-05;
        float _2839 = (-1.0) - _2838;
        float _2841 = _2838 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2837 > _2841) || ((_2837 < _2839) || ((_2836 > _2841) || ((_2836 < _2839) || ((_2835 < _2839) || (_2835 > _2841))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2837, cbModelParam._m0[17u].z, fma(_2836, cbModelParam._m0[17u].y, _2835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2837, cbModelParam._m0[18u].z, fma(_2836, cbModelParam._m0[18u].y, _2835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2837, cbModelParam._m0[19u].z, fma(_2836, cbModelParam._m0[19u].y, _2835 * cbModelParam._m0[19u].x))), _2129);
            frontier_phi_25_49_ladder = _3036.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3036.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3036.x * cbModelParam._m0[1u].z;
        }
        _2218 = frontier_phi_25_49_ladder_2;
        _2220 = frontier_phi_25_49_ladder_1;
        _2222 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2202 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1200, _1201, _1202), _2129);
        _2218 = _2202.x * cbModelParam._m0[1u].z;
        _2220 = _2202.y * cbModelParam._m0[1u].z;
        _2222 = _2202.z * cbModelParam._m0[1u].z;
    }
    float _2235 = (((_1227 * _1176) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2218 - _2120)) + _2120);
    float _2237 = (((_1227 * _1178) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2220 - _2122)) + _2122);
    float _2239 = (((_1227 * _1179) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2242 = fma(_2239, cbSceneParam._m0[89u].z, fma(_2237, cbSceneParam._m0[89u].y, _2235 * cbSceneParam._m0[89u].x));
    float _2245 = fma(_2239, cbSceneParam._m0[90u].z, fma(_2237, cbSceneParam._m0[90u].y, _2235 * cbSceneParam._m0[90u].x));
    float _2248 = fma(_2239, cbSceneParam._m0[91u].z, fma(_2237, cbSceneParam._m0[91u].y, _2235 * cbSceneParam._m0[91u].x));
    uvec4 _2258 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2260 = _2258.x * 14u;
    uint _2261 = _2260 + 13u;
    float _2268 = _1192 + (-1.0);
    float _2273 = (cbLight._m0[_2261].x * _2268) + 1.0;
    float _2274 = (cbLight._m0[_2261].y * _2268) + 1.0;
    float _2275 = (cbLight._m0[_2261].z * _2268) + 1.0;
    float _2276 = (cbLight._m0[_2261].w * _2268) + 1.0;
    uint _2277 = _2260 + 5u;
    float _2283 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2287 = _2260 + 4u;
    float _2293 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2297 = _2260 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_1015, _1016, _1017));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1015, _1016, _1017));
    float _4582 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4593 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2277].x * _2283) * _2318) + ((cbLight._m0[_2287].x * _2293) * _2316);
    float _2326 = ((_2283 * cbLight._m0[_2277].y) * _2318) + ((_2293 * cbLight._m0[_2287].y) * _2316);
    float _2327 = ((_2283 * cbLight._m0[_2277].z) * _2318) + ((_2293 * cbLight._m0[_2287].z) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2260 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2333)
    {
        _2344 = _2325;
        _2346 = _2326;
        _2348 = _2327;
    }
    else
    {
        uint _2352 = _2260 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2260 + 2u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4604 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2371 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2325;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2326;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2327;
    }
    bool _2351 = _2331.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2351)
    {
        _2389 = _2344;
        _2391 = _2346;
        _2393 = _2348;
    }
    else
    {
        uint _2559 = _2260 + 7u;
        float _2575 = (dot(vec3(cbLight._m0[_2260 + 3u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4620 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2578 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2389 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2344;
        _2391 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2346;
        _2393 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2348;
    }
    uint _2396 = _2260 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _1018) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2260].x + _1094;
    float _2412 = cbLight._m0[_2260].y + _1095;
    float _2413 = cbLight._m0[_2260].z + _1096;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2260].xyz));
    float _4636 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _4647 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _2425 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2426 = dot(vec3(_1015, _1016, _1017), vec3(_2418, _2419, _2420));
    float _4658 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2418, _2419, _2420));
    float _4669 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2447 = 0.959999978542327880859375 - _1173;
    float _2449 = 0.959999978542327880859375 - _1174;
    float _2450 = 0.959999978542327880859375 - _1175;
    float _2457 = 1.0 - _2410;
    float _2468 = (0.5 / (((_2425 * ((_2424 * _2457) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2457) + _2410) * _2424))) * _2424;
    float _4680 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2470 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2481 = _2260 + 9u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1018) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2297].x + _1094;
    float _2495 = cbLight._m0[_2297].y + _1095;
    float _2496 = cbLight._m0[_2297].z + _1096;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2297].xyz));
    float _4691 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2508 = dot(vec3(_1015, _1016, _1017), vec3(_2501, _2502, _2503));
    float _4702 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2501, _2502, _2503));
    float _4713 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2493 * _2493;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
    float _2534 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2425 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2534) + _2493) * _2507))) * _2507;
    float _4724 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    float _2556 = (((((_2527 * _2447) + _1176) * cbLight._m0[_2481].x) * _2546) * _2283) + (((((_2446 * _2447) + _1176) * cbLight._m0[_2396].x) * _2470) * _2293);
    float _2557 = (((((_2527 * _2449) + _1178) * cbLight._m0[_2481].y) * _2546) * _2283) + (((((_2446 * _2449) + _1178) * cbLight._m0[_2396].y) * _2470) * _2293);
    float _2558 = (((((_2527 * _2450) + _1179) * cbLight._m0[_2481].z) * _2546) * _2283) + (((((_2446 * _2450) + _1179) * cbLight._m0[_2396].z) * _2470) * _2293);
    float _2620;
    float _2622;
    float _2624;
    if (_2333)
    {
        _2620 = _2556;
        _2622 = _2557;
        _2624 = _2558;
    }
    else
    {
        uint _2626 = _2260 + 2u;
        uint _2630 = _2260 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _1018) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _1094;
        float _2647 = cbLight._m0[_2626].y + _1095;
        float _2648 = cbLight._m0[_2626].z + _1096;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2626].xyz));
        float _4735 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2660 = dot(vec3(_1015, _1016, _1017), vec3(_2653, _2654, _2655));
        float _4746 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4757 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2425 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2686) + _2645) * _2659))) * _2659;
        float _4768 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2620 = (((((_2679 * _2447) + _1176) * cbLight._m0[_2630].x) * _2698) * _2699) + _2556;
        _2622 = (((((_2679 * _2449) + _1178) * cbLight._m0[_2630].y) * _2698) * _2699) + _2557;
        _2624 = (((((_2679 * _2450) + _1179) * cbLight._m0[_2630].z) * _2698) * _2699) + _2558;
    }
    float _2734;
    float _2736;
    float _2738;
    if (_2351)
    {
        _2734 = _2620;
        _2736 = _2622;
        _2738 = _2624;
    }
    else
    {
        uint _2745 = _2260 + 3u;
        uint _2749 = _2260 + 11u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _1018) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _1094;
        float _2766 = cbLight._m0[_2745].y + _1095;
        float _2767 = cbLight._m0[_2745].z + _1096;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2745].xyz));
        float _4784 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2779 = dot(vec3(_1015, _1016, _1017), vec3(_2772, _2773, _2774));
        float _4795 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4806 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2798 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2805 = 1.0 - _2764;
        float _2815 = (0.5 / (((_2425 * ((_2778 * _2805) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2805) + _2764) * _2778))) * _2778;
        float _4817 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2734 = (((((_2798 * _2447) + _1176) * cbLight._m0[_2749].x) * _2817) * _2818) + _2620;
        _2736 = (((((_2798 * _2449) + _1178) * cbLight._m0[_2749].y) * _2817) * _2818) + _2622;
        _2738 = (((((_2798 * _2450) + _1179) * cbLight._m0[_2749].z) * _2817) * _2818) + _2624;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2258.y == 0u)
    {
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2893;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2893;
        float _2896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2893;
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1115) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _1114) / _2909)));
        float _2930 = (log2(_2896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
        }
        else
        {
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            uint _3200 = 0u;
            uint _3209;
            bool _3210;
            for (;;)
            {
                _3209 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                _3210 = _3209 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3210)
                {
                    frontier_phi_66_pred = _3194;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                else
                {
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    uint _3345;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3209;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    for (;;)
                    {
                        uint _3349 = uint(findLSB(_3345)) + (_3200 << 5u);
                        uint _3346 = (_3345 + 4294967295u) & _3345;
                        uint _3351 = _3349 * 48u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3371 = (_3349 * 48u) + 4u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3390 = (_3349 * 48u) + 8u;
                        vec3 _3401 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x));
                        float _3405 = _3365.x - _2894;
                        float _3406 = _3365.y - _2895;
                        float _3407 = _3365.z - _2896;
                        float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                        float _3411 = inversesqrt(_3408);
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3415 = dot(vec3(_1133, _1136, _1139), vec3(_3412, _3413, _3414));
                        float _3420 = 1.0 - (_3408 * _3365.w);
                        float _4843 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3422 = sqrt(_3408) * _3384.w;
                        float _3425 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3415) + _3426;
                        float _3432 = _3422 * _3422;
                        float _3436 = ((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3421) / ((_3432 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _2894;
                        float _3441 = (-0.0) - _2895;
                        float _3442 = (-0.0) - _2896;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3457 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                        float _3458 = 1.0 - _1208;
                        float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                        float _3466 = _3465 * _3465;
                        float _3467 = _3466 * _3466;
                        float _3468 = _3447 + _3412;
                        float _3469 = _3448 + _3413;
                        float _3470 = _3449 + _3414;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3478 = dot(vec3(_1133, _1136, _1139), vec3(_3447, _3448, _3449));
                        float _4859 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3482 = dot(vec3(_1133, _1136, _1139), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                        float _4870 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                        float _3490 = _3425 * _3466;
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3415) + _3491;
                        float _4881 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3496 = 1.0 - _3466;
                        float _3506 = (0.5 / (((_3495 * ((_3481 * _3496) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3466) * _3481))) * _3495;
                        float _4892 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3517 = (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) / ((_3489 * _3489) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125))) * _3421;
                        _3269 = (_3436 * _3384.x) + _3342;
                        _3270 = (_3436 * _3384.y) + _3343;
                        _3271 = (_3436 * _3384.z) + _3344;
                        _3266 = (_3517 * _3401.x) + _3339;
                        _3267 = (_3517 * _3401.y) + _3340;
                        _3268 = (_3517 * _3401.z) + _3341;
                        if (_3346 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3346;
                        }
                    }
                    frontier_phi_66_pred = _3266;
                    frontier_phi_66_pred_1 = _3271;
                    frontier_phi_66_pred_2 = _3270;
                    frontier_phi_66_pred_3 = _3269;
                    frontier_phi_66_pred_4 = _3268;
                    frontier_phi_66_pred_5 = _3267;
                }
                _3042 = frontier_phi_66_pred;
                _3052 = frontier_phi_66_pred_1;
                _3050 = frontier_phi_66_pred_2;
                _3048 = frontier_phi_66_pred_3;
                _3046 = frontier_phi_66_pred_4;
                _3044 = frontier_phi_66_pred_5;
                uint _3201 = _3200 + 1u;
                if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3194 = _3042;
                    _3195 = _3044;
                    _3196 = _3046;
                    _3197 = _3048;
                    _3198 = _3050;
                    _3199 = _3052;
                    _3200 = _3201;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
        }
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.z;
        uint _3058 = (_3056 >> 8u) & 15u;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((4294967295u << _3058) & _2940) == 0u)
        {
            _3162 = _3041;
            _3164 = _3043;
            _3166 = _3045;
            _3168 = _3047;
            _3170 = _3049;
            _3172 = _3051;
        }
        else
        {
            float _3187 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
            float _3188 = _3187 * _2894;
            float _3189 = _3187 * _2895;
            float _3190 = _3187 * _2896;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3058 < ((_3056 >> 12u) & 15u))
            {
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3322 = _3041;
                float _3323 = _3043;
                float _3324 = _3045;
                float _3325 = _3047;
                float _3326 = _3049;
                float _3327 = _3051;
                uint _3328 = _3058;
                uint _3337;
                bool _3338;
                for (;;)
                {
                    _3337 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                    _3338 = _3337 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3338)
                    {
                        frontier_phi_77_pred = _3327;
                        frontier_phi_77_pred_1 = _3326;
                        frontier_phi_77_pred_2 = _3325;
                        frontier_phi_77_pred_3 = _3324;
                        frontier_phi_77_pred_4 = _3323;
                        frontier_phi_77_pred_5 = _3322;
                    }
                    else
                    {
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3544 = _3322;
                        float _3545 = _3323;
                        float _3546 = _3324;
                        float _3547 = _3325;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        uint _3550 = _3337;
                        uint _3551;
                        vec4 _3576;
                        float _3577;
                        vec4 _3592;
                        vec3 _3604;
                        vec4 _3619;
                        vec4 _3634;
                        float _3680;
                        bool _3681;
                        for (;;)
                        {
                            uint _3561 = ((_3328 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3550));
                            _3551 = (_3550 + 4294967295u) & _3550;
                            uint _3563 = _3561 * 40u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3577 = _3576.w;
                            uint _3579 = (_3561 * 40u) + 4u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3594 = (_3561 * 40u) + 8u;
                            _3604 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x));
                            uint _3606 = (_3561 * 40u) + 16u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3561 * 40u) + 20u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3561 * 40u) + 24u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3655 = (_3561 * 40u) + 28u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3680 = fma(_2896, _3668.z, fma(_2895, _3668.y, _3668.x * _2894)) + _3668.w;
                            _3681 = !((fma(_2896, _3649.z, fma(_2895, _3649.y, _3649.x * _2894)) + _3649.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3681)
                            {
                                float _3708 = _3576.x - _2894;
                                float _3709 = _3576.y - _2895;
                                float _3710 = _3576.z - _2896;
                                float _3711 = dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710));
                                float _3714 = inversesqrt(_3711);
                                float _3715 = _3714 * _3708;
                                float _3716 = _3714 * _3709;
                                float _3717 = _3714 * _3710;
                                float _3721 = 1.0 - (_3711 / (_3577 * _3577));
                                float _4903 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3726 = sqrt(_3711) * _3592.w;
                                float _3728 = 1.39999997615814208984375 / (_3726 + 1.39999997615814208984375);
                                float _3729 = _3728 * _3728;
                                float _3732 = ((1.0 - _3729) * dot(vec3(_3715, _3716, _3717), vec3(_1133, _1136, _1139))) + _3729;
                                float _3735 = _3726 * _3726;
                                float _3739 = (fma(_2896, _3619.z, fma(_2895, _3619.y, _3619.x * _2894)) + _3619.w) / _3680;
                                float _3740 = (fma(_2896, _3634.z, fma(_2895, _3634.y, _3634.x * _2894)) + _3634.w) / _3680;
                                float _3744 = 1.0 - dot(vec2(_3739, _3740), vec2(_3739, _3740));
                                float _4919 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3746 = _3745 * (((isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0))) * _3722) / ((_3735 * 0.699999988079071044921875) + 1.0));
                                float _3758 = exp2(log2(1.0 / ((_3735 * 3.5) + 5.0)) * 0.25);
                                float _3759 = 1.0 - _1208;
                                float _3766 = sqrt(1.0 - ((1.0 - (_3759 * _3759)) * (1.0 - (_3758 * _3758))));
                                float _3767 = _3766 * _3766;
                                float _3768 = _3767 * _3767;
                                float _3769 = _3715 - _3188;
                                float _3770 = _3716 - _3189;
                                float _3771 = _3717 - _3190;
                                float _3775 = inversesqrt(dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771)));
                                float _3779 = dot(vec3(_1133, _1136, _1139), vec3((-0.0) - _3188, (-0.0) - _3189, (-0.0) - _3190));
                                float _4930 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3783 = dot(vec3(_1133, _1136, _1139), vec3(_3775 * _3769, _3775 * _3770, _3775 * _3771));
                                float _4941 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3790 = ((_3786 * _3786) * (_3768 + (-1.0))) + 1.0;
                                float _3791 = _3728 * _3767;
                                float _3792 = _3791 * _3791;
                                float _3798 = ((1.0 - _3792) * dot(vec3(_1133, _1136, _1139), vec3(_3715, _3716, _3717))) + _3792;
                                float _4952 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3800 = 1.0 - _3767;
                                float _3810 = (0.5 / (((_3799 * ((_3782 * _3800) + _3767)) + 9.9999999392252902907785028219223e-09) + (((_3799 * _3800) + _3767) * _3782))) * _3799;
                                float _4963 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3820 = (_3745 * _3722) * (((_3768 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3790 * _3790) * ((_3735 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3746 * _3592.y;
                                frontier_phi_83_pred_1 = _3746 * _3592.x;
                                frontier_phi_83_pred_2 = _3820 * _3604.z;
                                frontier_phi_83_pred_3 = _3820 * _3604.y;
                                frontier_phi_83_pred_4 = _3820 * _3604.x;
                                frontier_phi_83_pred_5 = _3746 * _3592.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3828 = frontier_phi_83_pred;
                            _3827 = frontier_phi_83_pred_1;
                            _3826 = frontier_phi_83_pred_2;
                            _3825 = frontier_phi_83_pred_3;
                            _3824 = frontier_phi_83_pred_4;
                            _3829 = frontier_phi_83_pred_5;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            if (_3551 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3551;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3536;
                        frontier_phi_77_pred_1 = _3535;
                        frontier_phi_77_pred_2 = _3534;
                        frontier_phi_77_pred_3 = _3533;
                        frontier_phi_77_pred_4 = _3532;
                        frontier_phi_77_pred_5 = _3531;
                    }
                    _3173 = frontier_phi_77_pred;
                    _3171 = frontier_phi_77_pred_1;
                    _3169 = frontier_phi_77_pred_2;
                    _3167 = frontier_phi_77_pred_3;
                    _3165 = frontier_phi_77_pred_4;
                    _3163 = frontier_phi_77_pred_5;
                    uint _3329 = _3328 + 1u;
                    if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3322 = _3163;
                        _3323 = _3165;
                        _3324 = _3167;
                        _3325 = _3169;
                        _3326 = _3171;
                        _3327 = _3173;
                        _3328 = _3329;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3167;
                frontier_phi_58_59_ladder_1 = _3173;
                frontier_phi_58_59_ladder_2 = _3171;
                frontier_phi_58_59_ladder_3 = _3169;
                frontier_phi_58_59_ladder_4 = _3165;
                frontier_phi_58_59_ladder_5 = _3163;
            }
            else
            {
                frontier_phi_58_59_ladder = _3045;
                frontier_phi_58_59_ladder_1 = _3051;
                frontier_phi_58_59_ladder_2 = _3049;
                frontier_phi_58_59_ladder_3 = _3047;
                frontier_phi_58_59_ladder_4 = _3043;
                frontier_phi_58_59_ladder_5 = _3041;
            }
            _3162 = frontier_phi_58_59_ladder_5;
            _3164 = frontier_phi_58_59_ladder_4;
            _3166 = frontier_phi_58_59_ladder;
            _3168 = frontier_phi_58_59_ladder_3;
            _3170 = frontier_phi_58_59_ladder_2;
            _3172 = frontier_phi_58_59_ladder_1;
        }
        float _3177 = isnan(1.0) ? _1192 : (isnan(_1192) ? 1.0 : min(_1192, 1.0));
        _2953 = (_3177 * _3168) + _2389;
        _2955 = (_3177 * _3170) + _2391;
        _2957 = (_3177 * _3172) + _2393;
        _2959 = ((_3162 * _1176) * _3177) + _2734;
        _2961 = ((_3164 * _1178) * _3177) + _2736;
        _2963 = ((_3166 * _1179) * _3177) + _2738;
    }
    else
    {
        _2953 = _2389;
        _2955 = _2391;
        _2957 = _2393;
        _2959 = _2734;
        _2961 = _2736;
        _2963 = _2738;
    }
    float _4979 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _4990 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _5001 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _2980 = ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2953 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1192))) + ((_2959 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2029)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2955 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1192))) + ((_2961 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2029)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2957 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1192))) + ((_2963 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2029)) * cbPerFrame._m0[3u].x);
    uint _2983 = _290 + 6u;
    float _2991 = _1114 / cbSceneParam._m0[86u].x;
    float _2992 = _1115 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _1037 : (isnan(_1037) ? cbSceneParam._m0[77u].w : min(_1037, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    if (_1037 > cbSceneParam._m0[78u].w)
    {
        float _3066 = isnan(_1037) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1037 : min(cbSceneParam._m0[80u].w, _1037));
        float _3067 = _3066 / _1037;
        float _3078 = _3067 * _1087;
        float _3079 = _1088 * _3067;
        float _3080 = (-0.0) - _3079;
        float _3082 = _3067 * _1089;
        float _3084 = (cbSceneParam._m0[77u].w * _3080) / _3066;
        float _3085 = _3084 + cbSceneParam._m0[79u].w;
        float _3086 = cbSceneParam._m0[79u].w - _3079;
        float _3092 = sqrt(((_3078 * _3078) + (_3079 * _3079)) + (_3082 * _3082));
        float _3095 = (1.0 - (cbSceneParam._m0[77u].w / _3066)) * _3092;
        float _3100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3102 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3279;
        if (abs((_3080 - _3084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3279 = ((((_3085 > 0.0) ? exp2(_3100 * _3085) : (2.0 - exp2(_3102 * _3085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3095;
        }
        else
        {
            float _3223 = 1.0 / cbSceneParam._m0[80u].x;
            float _3224 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : max(_3085, _3086));
            float _3225 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : min(_3085, _3086));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            _3279 = ((abs(_3092 / _3080) * cbSceneParam._m0[80u].y) * ((((_3234 - _3235) * 2.0) - ((exp2(_3100 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0)))) - exp2(_3100 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))))) * _3223)) - ((exp2(_3102 * _3234) - exp2(_3102 * _3235)) * _3223))) + (_3095 * cbSceneParam._m0[80u].z);
        }
        vec4 _3281 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3290 = exp2((_3279 * (-1.44269502162933349609375)) * (1.0 - _3281.w));
        float _3291 = log2(_3290);
        float _3307 = log2(_3011);
        _3104 = (exp2(_3307 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].x)) * _3281.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3106 = (exp2(_3307 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].y)) * _3281.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3108 = (exp2(_3307 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].z)) * _3281.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3110 = _3290 * _3011;
    }
    else
    {
        _3104 = _3008;
        _3106 = _3009;
        _3108 = _3010;
        _3110 = _3011;
    }
    bool _3317;
    vec4 _3120;
    vec4 _3142;
    float _3144;
    float _3148;
    float _3149;
    float _3150;
    float _3151;
    bool _3161;
    for (;;)
    {
        _3120 = cbMatDynParam._m0[0u];
        float _3122 = roundEven(_3120.y);
        bool _3123 = _3122 == 3.0;
        float _3124 = log2(_3110);
        float _3131 = exp2(_3124 * cbSceneParam._m0[78u].x) * _2980;
        float _3132 = exp2(_3124 * cbSceneParam._m0[78u].y) * _2981;
        float _3133 = exp2(_3124 * cbSceneParam._m0[78u].z) * _2982;
        float _3140 = _1103 + (-0.5);
        _3142 = cbMtdParam._m0[1u];
        _3144 = _3142.y * _3140;
        float _3147 = (_3122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3148 = _3147 * (_3123 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3104)));
        _3149 = _3147 * (_3123 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3106)));
        _3150 = _3147 * (_3123 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3108)));
        _3151 = _3140 * 0.999000012874603271484375;
        _3161 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3161)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3151) < 0.5)
            {
                _3317 = true;
                break;
            }
        }
        uint _3258 = _1152 + uint(_3120.w);
        if ((cbInstanceData._m0[_3258].w < 1.0) && ((cbInstanceData._m0[_3258].w + _3151) < 0.5))
        {
            _3317 = true;
            break;
        }
        if ((_3144 + 1.0) < _3142.x)
        {
            _3317 = true;
            break;
        }
        _3317 = false;
        break;
    }
    float _3522;
    if (_3317)
    {
        discard_state = true;
        _3522 = 0.0;
    }
    else
    {
        _3522 = cbInstanceData._m0[_2983].w;
    }
    SV_Target.x = _3148;
    SV_Target.y = _3149;
    SV_Target.z = _3150;
    SV_Target.w = _3522;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
    discard_exit();
}


