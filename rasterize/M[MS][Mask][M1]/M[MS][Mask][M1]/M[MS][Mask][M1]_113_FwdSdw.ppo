#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1532;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4139 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4150 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4161 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4172 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4183 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4194 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) + _619;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _689 = _685.z;
    float _696 = ((_668.x - _687) * _457) + _687;
    float _697 = ((_668.y - _688) * _457) + _688;
    float _698 = ((_668.z - _689) * _457) + _689;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _721 = ((_710.x - _696) * _530) + _696;
    float _722 = ((_710.y - _697) * _530) + _697;
    float _723 = ((_710.z - _698) * _530) + _698;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _748 = ((_735.z - _723) * _600) + _723;
    float _751 = ((((_735.x - _721) * _600) + _721) * 2.0) + (-1.0);
    float _752 = ((((_735.y - _722) * _600) + _722) * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4205 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _758 = sqrt(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _815 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_799 - _800) * cbMtdParam._m0[24u].z) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4216 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _823 = (_816 * (cbMtdParam._m0[17u].x - _626)) + _626;
    float _824 = (_816 * (cbMtdParam._m0[17u].y - _627)) + _627;
    float _825 = (_816 * (cbMtdParam._m0[17u].z - _628)) + _628;
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _853 = _851.x;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _853) * _457) + _853;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _871) * _530) + _871;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _888) * _600) + _888;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _906) * cbMtdParam._m0[19u].z) + _906;
    float _912 = _910 - (_910 * _816);
    float _917 = (((_645.z - _748) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _748;
    float _921 = ((_772.z - _917) * cbMtdParam._m0[19u].w) + _917;
    vec4 _934 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _941 = (_934.x * 2.0) + (-1.0);
    float _942 = (_934.y * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4227 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _951 = (_816 * (_934.z - _921)) + _921;
    float _960 = (_751 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_645.x * 2.0) + (-1.0)))) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _961 = (_752 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_645.y * 2.0) + (-1.0)))) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _973 = (((_941 - _960) + (cbMtdParam._m0[21u].x * _960)) * _816) + _960;
    float _974 = (((_942 - _961) + (cbMtdParam._m0[21u].x * _961)) * _816) + _961;
    float _975 = (_816 * (sqrt(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) - _758)) + _758;
    float _979 = cbMtdParam._m0[22u].x + _772.w;
    float _982 = fma(_975, _254 * NORMAL.x, fma(_974, _261 * TANGENT.x, (_247 * _239) * _973));
    float _985 = fma(_975, _254 * NORMAL.y, fma(_974, _261 * TANGENT.y, (_247 * _240) * _973));
    float _988 = fma(_975, _254 * NORMAL.z, fma(_974, _261 * TANGENT.z, (_247 * _241) * _973));
    float _992 = inversesqrt(dot(vec3(_982, _985, _988), vec3(_982, _985, _988)));
    float _993 = _992 * _982;
    float _994 = _992 * _985;
    float _995 = _992 * _988;
    float _4238 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _996 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4260 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4271 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4282 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4293 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _1001 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _1015 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1065 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1055);
    float _1066 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1055);
    float _1067 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1055);
    float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
    float _1072 = _1065 * _1071;
    float _1073 = _1066 * _1071;
    float _1074 = _1067 * _1071;
    float _1080 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1081 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1099 = fma(_995, cbSceneParam._m0[5u].z, fma(_994, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _993));
    float _1102 = fma(_995, cbSceneParam._m0[6u].z, fma(_994, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _993));
    float _1105 = fma(_995, cbSceneParam._m0[7u].z, fma(_994, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _993));
    uint _1119 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1125 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1119].x;
    float _1126 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1119].y;
    float _1127 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * cbInstanceData._m0[_1119].z;
    float _4304 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _1131 = 1.0 - _1001;
    float _1132 = _1128 * _1131;
    float _1133 = _1129 * _1131;
    float _1134 = _1130 * _1131;
    float _1139 = (_1128 + (-0.039999999105930328369140625)) * _1001;
    float _1140 = (_1129 + (-0.039999999105930328369140625)) * _1001;
    float _1141 = (_1130 + (-0.039999999105930328369140625)) * _1001;
    float _1142 = _1139 + 0.039999999105930328369140625;
    float _1144 = _1140 + 0.039999999105930328369140625;
    float _1145 = _1141 + 0.039999999105930328369140625;
    vec4 _1154 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1080, cbSceneParam._m0[86u].y * _1081));
    float _1158 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * TEXCOORD_5.w) * _1154.x;
    float _1159 = dot(vec3(_993, _994, _995), vec3(_1072, _1073, _1074));
    float _1162 = _1159 * 2.0;
    float _1166 = (_1162 * _993) - _1072;
    float _1167 = (_1162 * _994) - _1073;
    float _1168 = (_1162 * _995) - _1074;
    float _1172 = abs(dot(vec3(_1072, _1073, _1074), vec3(_993, _994, _995)));
    float _4337 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1174 = sqrt(_996);
    float _1187 = exp2((_1174 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1174 * 3.0));
    float _1193 = (1.0 - _1187) * ((_1174 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1194 = _1187 * _1174;
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1230 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1230, cbModelParam._m0[26u].z, fma(_1226, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222));
        float _1260 = fma(_1230, cbModelParam._m0[27u].z, fma(_1226, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222));
        float _1264 = fma(_1230, cbModelParam._m0[28u].z, fma(_1226, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222));
        float _1289 = _1222 + _993;
        float _1290 = _1226 + _994;
        float _1291 = _1230 + _995;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_993, _994, _995), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4385 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_993, _994, _995), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4418 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_993, _994, _995), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4451 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1569 = fma(_1230, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222));
        float _1573 = fma(_1230, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222));
        float _1577 = fma(_1230, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222));
        float _1600 = _1222 + _993;
        float _1601 = _1226 + _994;
        float _1602 = _1230 + _995;
        float _1612 = fma(_1602, cbModelParam._m0[30u].z, fma(_1601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1600)) - _1569;
        float _1613 = fma(_1602, cbModelParam._m0[31u].z, fma(_1601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1600)) - _1573;
        float _1614 = fma(_1602, cbModelParam._m0[32u].z, fma(_1601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1600)) - _1577;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1569 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1573 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[35u].z) + ((((((_1577 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1668 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1635.x + (-0.5));
        float _1670 = _1668 * (_1635.y + (-0.5));
        float _1671 = _1668 * (_1635.z + (-0.5));
        float _1678 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1642.x + (-0.5));
        float _1680 = _1678 * (_1642.y + (-0.5));
        float _1681 = _1678 * (_1642.z + (-0.5));
        float _1688 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1649.x + (-0.5));
        float _1690 = _1688 * (_1649.y + (-0.5));
        float _1691 = _1688 * (_1649.z + (-0.5));
        float _1698 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1656.x + (-0.5));
        float _1700 = _1698 * (_1656.y + (-0.5));
        float _1701 = _1698 * (_1656.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_993, _994, _995), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4514 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1732 + 1.0))) + _1737) * _1702;
        float _1747 = _1670 * 0.5;
        float _1748 = _1680 * 0.5;
        float _1749 = _1690 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_993, _994, _995), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4547 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1774 + 1.0))) + _1779) * _1703;
        float _1789 = _1671 * 0.5;
        float _1790 = _1681 * 0.5;
        float _1791 = _1691 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_993, _994, _995), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4580 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1816 + 1.0))) + _1821) * _1704;
        _1838 = _1671;
        _1839 = _1670;
        _1840 = _1669;
        _1841 = _1681;
        _1842 = _1680;
        _1843 = _1679;
        _1844 = _1691;
        _1845 = _1690;
        _1846 = _1689;
        _1847 = _1704;
        _1848 = _1703;
        _1849 = _1702;
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
    }
    else
    {
        _1838 = _1532;
        _1839 = _1532;
        _1840 = _1532;
        _1841 = _1532;
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
    }
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1544)) + _1544;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1545)) + _1545;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1546)) + _1546;
    float _1885 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1862));
    float _1906 = _1166 * 0.5;
    float _1907 = _1167 * 0.5;
    float _1908 = _1168 * 0.5;
    float _1909 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1912 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1915 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1922 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1926 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1930 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1937 = dot(vec4(cbModelParam._m0[39u]), vec4(_1906, _1907, _1908, 1.0));
        _1949 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1949 = 1.0;
    }
    float _1960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1951 = dot(vec4(cbModelParam._m0[40u]), vec4(_1906, _1907, _1908, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1951) ? 0.0 : (isnan(0.0) ? _1951 : max(0.0, _1951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1964 = (_1960 * cbModelParam._m0[1u].x) + (_1949 * (1.0 - cbModelParam._m0[1u].x));
    float _1974 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _996);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1974 : min(cbModelParam._m0[25u].z, _1974));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2022 = fma(_1230, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1222)) + cbModelParam._m0[13u].w;
        float _2026 = fma(_1230, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1222)) + cbModelParam._m0[14u].w;
        float _2030 = fma(_1230, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1222)) + cbModelParam._m0[15u].w;
        float _2033 = fma(_1168, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166));
        float _2036 = fma(_1168, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166));
        float _2039 = fma(_1168, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166));
        float _2067;
        if (_2033 > 0.0)
        {
            _2067 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2067 = frontier_phi_14_12_ladder;
        }
        float _2239;
        if (_2036 > 0.0)
        {
            _2239 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2239 = frontier_phi_23_19_ladder;
        }
        float _2534;
        if (_2039 > 0.0)
        {
            _2534 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2534 = frontier_phi_35_30_ladder;
        }
        float _2536 = isnan(_2239) ? _2067 : (isnan(_2067) ? _2239 : min(_2067, _2239));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _2033) + _2022;
        float _2542 = (_2537 * _2036) + _2026;
        float _2543 = (_2537 * _2039) + _2030;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2544;
        float _2548 = _2544 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 > _2548) || ((_2542 < _2546) || ((_2541 < _2546) || (_2541 > _2548))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2543, cbModelParam._m0[9u].z, fma(_2542, cbModelParam._m0[9u].y, _2541 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2543, cbModelParam._m0[10u].z, fma(_2542, cbModelParam._m0[10u].y, _2541 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2543, cbModelParam._m0[11u].z, fma(_2542, cbModelParam._m0[11u].y, _2541 * cbModelParam._m0[11u].x))), _1975);
            frontier_phi_13_35_ladder = _2688.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2688.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2688.x * cbModelParam._m0[1u].y;
        }
        _2055 = frontier_phi_13_35_ladder_2;
        _2057 = frontier_phi_13_35_ladder_1;
        _2059 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1166, _1167, _1168), _1975);
        _2055 = _2043.x * cbModelParam._m0[1u].y;
        _2057 = _2043.y * cbModelParam._m0[1u].y;
        _2059 = _2043.z * cbModelParam._m0[1u].y;
    }
    float _2063 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _996);
    float _2064 = isnan(_2063) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2063 : min(cbModelParam._m0[25u].w, _2063));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2118 = fma(_1230, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1222)) + cbModelParam._m0[21u].w;
        float _2122 = fma(_1230, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1222)) + cbModelParam._m0[22u].w;
        float _2126 = fma(_1230, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1222)) + cbModelParam._m0[23u].w;
        float _2129 = fma(_1168, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166));
        float _2132 = fma(_1168, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166));
        float _2135 = fma(_1168, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166));
        float _2244;
        if (_2129 > 0.0)
        {
            _2244 = abs((1.0 - _2118) / _2129);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2118 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2244 = frontier_phi_25_21_ladder;
        }
        float _2561;
        if (_2132 > 0.0)
        {
            _2561 = abs((1.0 - _2122) / _2132);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2122 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2561 = frontier_phi_37_32_ladder;
        }
        float _2899;
        if (_2135 > 0.0)
        {
            _2899 = abs((1.0 - _2126) / _2135);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2126 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2899 = frontier_phi_47_44_ladder;
        }
        float _2901 = isnan(_2561) ? _2244 : (isnan(_2244) ? _2561 : min(_2244, _2561));
        float _2902 = isnan(_2899) ? _2901 : (isnan(_2901) ? _2899 : min(_2901, _2899));
        float _2906 = (_2902 * _2129) + _2118;
        float _2907 = (_2902 * _2132) + _2122;
        float _2908 = (_2902 * _2135) + _2126;
        float _2909 = _2902 * 9.9999997473787516355514526367188e-05;
        float _2910 = (-1.0) - _2909;
        float _2912 = _2909 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2908 > _2912) || ((_2908 < _2910) || ((_2907 > _2912) || ((_2907 < _2910) || ((_2906 < _2910) || (_2906 > _2912))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2908, cbModelParam._m0[17u].z, fma(_2907, cbModelParam._m0[17u].y, _2906 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2908, cbModelParam._m0[18u].z, fma(_2907, cbModelParam._m0[18u].y, _2906 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2908, cbModelParam._m0[19u].z, fma(_2907, cbModelParam._m0[19u].y, _2906 * cbModelParam._m0[19u].x))), _2064);
            frontier_phi_22_47_ladder = _3030.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3030.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3030.x * cbModelParam._m0[1u].z;
        }
        _2154 = frontier_phi_22_47_ladder_2;
        _2156 = frontier_phi_22_47_ladder_1;
        _2158 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1166, _1167, _1168), _2064);
        _2154 = _2138.x * cbModelParam._m0[1u].z;
        _2156 = _2138.y * cbModelParam._m0[1u].z;
        _2158 = _2138.z * cbModelParam._m0[1u].z;
    }
    float _2171 = (((_1193 * _1142) + _1194) * _1158) * ((cbModelParam._m0[1u].w * (_2154 - _2055)) + _2055);
    float _2173 = (((_1193 * _1144) + _1194) * _1158) * ((cbModelParam._m0[1u].w * (_2156 - _2057)) + _2057);
    float _2175 = (((_1193 * _1145) + _1194) * _1158) * ((cbModelParam._m0[1u].w * (_2158 - _2059)) + _2059);
    float _2178 = fma(_2175, cbSceneParam._m0[89u].z, fma(_2173, cbSceneParam._m0[89u].y, _2171 * cbSceneParam._m0[89u].x));
    float _2181 = fma(_2175, cbSceneParam._m0[90u].z, fma(_2173, cbSceneParam._m0[90u].y, _2171 * cbSceneParam._m0[90u].x));
    float _2184 = fma(_2175, cbSceneParam._m0[91u].z, fma(_2173, cbSceneParam._m0[91u].y, _2171 * cbSceneParam._m0[91u].x));
    float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2231 = _2218 / _2230;
    float _2232 = _2222 / _2230;
    float _2233 = _2226 / _2230;
    float _2380;
    float _2381;
    float _2382;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2260 = ((uint(_2233 > cbSceneParam._m0[59u].y) + uint(_2233 > cbSceneParam._m0[59u].x)) + uint(_2233 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2261 = _2260 + 43u;
        uint _2269 = _2260 + 44u;
        uint _2277 = _2260 + 45u;
        uint _2285 = _2260 + 46u;
        float _2296 = fma(_2230, cbSceneParam._m0[_2261].w, fma(_2226, cbSceneParam._m0[_2261].z, fma(_2222, cbSceneParam._m0[_2261].y, _2218 * cbSceneParam._m0[_2261].x)));
        float _2300 = fma(_2230, cbSceneParam._m0[_2269].w, fma(_2226, cbSceneParam._m0[_2269].z, fma(_2222, cbSceneParam._m0[_2269].y, _2218 * cbSceneParam._m0[_2269].x)));
        float _2308 = fma(_2230, cbSceneParam._m0[_2285].w, fma(_2226, cbSceneParam._m0[_2285].z, fma(_2222, cbSceneParam._m0[_2285].y, _2218 * cbSceneParam._m0[_2285].x)));
        float _2313 = cbSceneParam._m0[33u].z * _2308;
        float _2315 = cbSceneParam._m0[33u].w * _2308;
        float _2318 = fma(_2230, cbSceneParam._m0[_2277].w, fma(_2226, cbSceneParam._m0[_2277].z, fma(_2222, cbSceneParam._m0[_2277].y, _2218 * cbSceneParam._m0[_2277].x))) / _2308;
        float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_2232 * _2232) + (_2231 * _2231)) + (_2233 * _2233))) * cbSceneParam._m0[33u].y;
        float _4706 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2373 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2313 + _2296) / _2308, (_2315 + _2300) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2315 + _2296) / _2308, (_2300 - _2313) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 - _2313) / _2308, (_2300 - _2315) / _2308), _2318), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 - _2315) / _2308, (_2313 + _2300) / _2308), _2318), 0.0)).x), vec4(0.25)));
        _2380 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
        _2381 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
        _2382 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2380 = 1.0;
        _2381 = 1.0;
        _2382 = 1.0;
    }
    float _2446;
    float _2448;
    float _2450;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2434 = fma(_2230, cbSceneParam._m0[63u].w, fma(_2226, cbSceneParam._m0[63u].z, fma(_2222, cbSceneParam._m0[63u].y, _2218 * cbSceneParam._m0[63u].x)));
        float _2435 = fma(_2230, cbSceneParam._m0[60u].w, fma(_2226, cbSceneParam._m0[60u].z, fma(_2222, cbSceneParam._m0[60u].y, _2218 * cbSceneParam._m0[60u].x))) / _2434;
        float _2436 = fma(_2230, cbSceneParam._m0[61u].w, fma(_2226, cbSceneParam._m0[61u].z, fma(_2222, cbSceneParam._m0[61u].y, _2218 * cbSceneParam._m0[61u].x))) / _2434;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2435 >= cbSceneParam._m0[64u].x) && (_2436 >= cbSceneParam._m0[64u].y)) && (_2435 <= cbSceneParam._m0[64u].z)) && (_2436 <= cbSceneParam._m0[64u].w))
        {
            float _2574 = fma(_2230, cbSceneParam._m0[62u].w, fma(_2226, cbSceneParam._m0[62u].z, fma(_2222, cbSceneParam._m0[62u].y, _2218 * cbSceneParam._m0[62u].x))) / _2434;
            float _2578 = isnan(cbSceneParam._m0[41u].w) ? _2574 : (isnan(_2574) ? cbSceneParam._m0[41u].w : max(_2574, cbSceneParam._m0[41u].w));
            float _2621 = (cbSceneParam._m0[33u].x - sqrt(((_2232 * _2232) + (_2231 * _2231)) + (_2233 * _2233))) * cbSceneParam._m0[33u].y;
            float _4722 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
            float _2628 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2435, cbSceneParam._m0[33u].w + _2436), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2435, _2436 - cbSceneParam._m0[33u].z), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].z, _2436 - cbSceneParam._m0[33u].w), _2578), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2435 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2436), _2578), 0.0)).x), vec4(0.25)));
            float _2632 = 1.0 - (_2628 * cbSceneParam._m0[34u].x);
            float _2633 = 1.0 - (_2628 * cbSceneParam._m0[34u].y);
            float _2634 = 1.0 - (_2628 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
            frontier_phi_34_33_ladder_1 = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_34_33_ladder_2 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
        }
        else
        {
            frontier_phi_34_33_ladder = _2382;
            frontier_phi_34_33_ladder_1 = _2381;
            frontier_phi_34_33_ladder_2 = _2380;
        }
        _2446 = frontier_phi_34_33_ladder_2;
        _2448 = frontier_phi_34_33_ladder_1;
        _2450 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2446 = _2380;
        _2448 = _2381;
        _2450 = _2382;
    }
    uvec4 _2455 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2457 = _2455.x * 14u;
    uint _2458 = _2457 + 13u;
    float _2465 = _1158 + (-1.0);
    float _2470 = (cbLight._m0[_2458].x * _2465) + 1.0;
    float _2471 = (cbLight._m0[_2458].y * _2465) + 1.0;
    float _2472 = (cbLight._m0[_2458].z * _2465) + 1.0;
    float _2473 = (cbLight._m0[_2458].w * _2465) + 1.0;
    uint _2474 = _2457 + 5u;
    float _2480 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2484 = _2457 + 4u;
    float _2493 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2497 = _2457 | 1u;
    float _2508 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_993, _994, _995));
    float _2511 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_993, _994, _995));
    float _4758 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _4769 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2516 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * 0.3183098733425140380859375;
    float _2518 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * 0.3183098733425140380859375;
    float _2525 = ((cbLight._m0[_2474].x * _2480) * _2518) + (((cbLight._m0[_2484].x * _2446) * _2493) * _2516);
    float _2526 = ((_2480 * cbLight._m0[_2474].y) * _2518) + (((cbLight._m0[_2484].y * _2448) * _2493) * _2516);
    float _2527 = ((_2480 * cbLight._m0[_2474].z) * _2518) + (((cbLight._m0[_2484].z * _2450) * _2493) * _2516);
    uvec4 _2531 = floatBitsToUint(cbLight._m0[_2457 + 12u]);
    bool _2533 = _2531.x == 0u;
    float _2635;
    float _2637;
    float _2639;
    if (_2533)
    {
        _2635 = _2525;
        _2637 = _2526;
        _2639 = _2527;
    }
    else
    {
        uint _2643 = _2457 + 6u;
        float _2659 = (dot(vec3(cbLight._m0[_2457 + 2u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4780 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2662 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2635 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2525;
        _2637 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2526;
        _2639 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2527;
    }
    bool _2642 = _2531.y == 0u;
    float _2697;
    float _2699;
    float _2701;
    if (_2642)
    {
        _2697 = _2635;
        _2699 = _2637;
        _2701 = _2639;
    }
    else
    {
        uint _2870 = _2457 + 7u;
        float _2886 = (dot(vec3(cbLight._m0[_2457 + 3u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2887 = _2886 * _2886;
        float _4796 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2888 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2889 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2697 = (((cbLight._m0[_2870].x * 0.3183098733425140380859375) * _2888) * _2889) + _2635;
        _2699 = (((cbLight._m0[_2870].y * 0.3183098733425140380859375) * _2888) * _2889) + _2637;
        _2701 = (((cbLight._m0[_2870].z * 0.3183098733425140380859375) * _2888) * _2889) + _2639;
    }
    uint _2704 = _2457 + 8u;
    float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _996) * 0.949999988079071044921875);
    float _2718 = _2717 * _2717;
    float _2719 = cbLight._m0[_2457].x + _1072;
    float _2720 = cbLight._m0[_2457].y + _1073;
    float _2721 = cbLight._m0[_2457].z + _1074;
    float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
    float _2726 = _2725 * _2719;
    float _2727 = _2725 * _2720;
    float _2728 = _2725 * _2721;
    float _2729 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2457].xyz));
    float _4812 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _4823 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _2733 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2734 = dot(vec3(_993, _994, _995), vec3(_2726, _2727, _2728));
    float _4834 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2738 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2726, _2727, _2728));
    float _4845 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2742 = _2718 * _2718;
    float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
    float _2755 = 0.959999978542327880859375 - _1139;
    float _2757 = 0.959999978542327880859375 - _1140;
    float _2758 = 0.959999978542327880859375 - _1141;
    float _2765 = 1.0 - _2718;
    float _2776 = (0.5 / (((_2733 * ((_2732 * _2765) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2765) + _2718) * _2732))) * _2732;
    float _4856 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2778 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
    uint _2792 = _2457 + 9u;
    float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _996) * 0.949999988079071044921875);
    float _2804 = _2803 * _2803;
    float _2805 = cbLight._m0[_2497].x + _1072;
    float _2806 = cbLight._m0[_2497].y + _1073;
    float _2807 = cbLight._m0[_2497].z + _1074;
    float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
    float _2812 = _2811 * _2805;
    float _2813 = _2811 * _2806;
    float _2814 = _2811 * _2807;
    float _2815 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2497].xyz));
    float _4867 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2818 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2819 = dot(vec3(_993, _994, _995), vec3(_2812, _2813, _2814));
    float _4878 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2823 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2812, _2813, _2814));
    float _4889 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2827 = _2804 * _2804;
    float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
    float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0);
    float _2845 = 1.0 - _2804;
    float _2855 = (0.5 / (((_2733 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2845) + _2804) * _2818))) * _2818;
    float _4900 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
    float _2867 = (((((_2838 * _2755) + _1142) * cbLight._m0[_2792].x) * _2857) * _2480) + ((((cbLight._m0[_2704].x * _2446) * ((_2754 * _2755) + _1142)) * _2778) * _2493);
    float _2868 = (((((_2838 * _2757) + _1144) * cbLight._m0[_2792].y) * _2857) * _2480) + ((((cbLight._m0[_2704].y * _2448) * ((_2754 * _2757) + _1144)) * _2778) * _2493);
    float _2869 = (((((_2838 * _2758) + _1145) * cbLight._m0[_2792].z) * _2857) * _2480) + ((((cbLight._m0[_2704].z * _2450) * ((_2754 * _2758) + _1145)) * _2778) * _2493);
    float _2925;
    float _2927;
    float _2929;
    if (_2533)
    {
        _2925 = _2867;
        _2927 = _2868;
        _2929 = _2869;
    }
    else
    {
        uint _2931 = _2457 + 2u;
        uint _2935 = _2457 + 10u;
        float _2949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _996) * 0.949999988079071044921875);
        float _2950 = _2949 * _2949;
        float _2951 = cbLight._m0[_2931].x + _1072;
        float _2952 = cbLight._m0[_2931].y + _1073;
        float _2953 = cbLight._m0[_2931].z + _1074;
        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
        float _2958 = _2957 * _2951;
        float _2959 = _2957 * _2952;
        float _2960 = _2957 * _2953;
        float _2961 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2931].xyz));
        float _4911 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2965 = dot(vec3(_993, _994, _995), vec3(_2958, _2959, _2960));
        float _4922 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2969 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_2958, _2959, _2960));
        float _4933 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2973 = _2950 * _2950;
        float _2977 = ((_2968 * _2968) * (_2973 + (-1.0))) + 1.0;
        float _2984 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
        float _2991 = 1.0 - _2950;
        float _3001 = (0.5 / (((_2733 * ((_2964 * _2991) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2991) + _2950) * _2964))) * _2964;
        float _4944 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3003 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2973 / ((_2977 * _2977) * 3.141590118408203125));
        float _3004 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2925 = (((((_2984 * _2755) + _1142) * cbLight._m0[_2935].x) * _3003) * _3004) + _2867;
        _2927 = (((((_2984 * _2757) + _1144) * cbLight._m0[_2935].y) * _3003) * _3004) + _2868;
        _2929 = (((((_2984 * _2758) + _1145) * cbLight._m0[_2935].z) * _3003) * _3004) + _2869;
    }
    float _3035;
    float _3037;
    float _3039;
    if (_2642)
    {
        _3035 = _2925;
        _3037 = _2927;
        _3039 = _2929;
    }
    else
    {
        uint _3046 = _2457 + 3u;
        uint _3050 = _2457 + 11u;
        float _3064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3046].w)) * _996) * 0.949999988079071044921875);
        float _3065 = _3064 * _3064;
        float _3066 = cbLight._m0[_3046].x + _1072;
        float _3067 = cbLight._m0[_3046].y + _1073;
        float _3068 = cbLight._m0[_3046].z + _1074;
        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
        float _3073 = _3072 * _3066;
        float _3074 = _3072 * _3067;
        float _3075 = _3072 * _3068;
        float _3076 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_3046].xyz));
        float _4960 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3079 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _3080 = dot(vec3(_993, _994, _995), vec3(_3073, _3074, _3075));
        float _4971 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3083 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _3084 = dot(vec3(cbLight._m0[_3046].xyz), vec3(_3073, _3074, _3075));
        float _4982 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        float _3088 = _3065 * _3065;
        float _3092 = ((_3083 * _3083) * (_3088 + (-1.0))) + 1.0;
        float _3099 = exp2(log2(1.0 - (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) * 5.0);
        float _3106 = 1.0 - _3065;
        float _3116 = (0.5 / (((_2733 * ((_3079 * _3106) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _3106) + _3065) * _3079))) * _3079;
        float _4993 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3118 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_3088 / ((_3092 * _3092) * 3.141590118408203125));
        float _3119 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _3035 = (((((_3099 * _2755) + _1142) * cbLight._m0[_3050].x) * _3118) * _3119) + _2925;
        _3037 = (((((_3099 * _2757) + _1144) * cbLight._m0[_3050].y) * _3118) * _3119) + _2927;
        _3039 = (((((_3099 * _2758) + _1145) * cbLight._m0[_3050].z) * _3118) * _3119) + _2929;
    }
    float _3185;
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    if (_2455.y == 0u)
    {
        uvec4 _3140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3141 = _3140.x;
        uint _3152 = uint((float(_3140.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1081) / _3141))) + floor(float(uint(cbSceneParam._m0[85u].x * _1080) / _3141)));
        float _3162 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3163 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
        uint _3166 = uint(isnan(14.0) ? _3163 : (isnan(_3163) ? 14.0 : min(_3163, 14.0)));
        uvec4 _3171 = texelFetch(g_lightClusterGridBuffer, int(((_3166 << 2u) + (_3152 << 6u)) >> 2u));
        uint _3172 = _3171.x;
        uint _3173 = _3140.z;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        if (((((1u << ((_3173 >> 4u) & 15u)) + 4294967295u) & _3172) == 0u) || ((_3173 & 240u) == 0u))
        {
            _3252 = 0.0;
            _3254 = 0.0;
            _3256 = 0.0;
            _3258 = 0.0;
            _3260 = 0.0;
            _3262 = 0.0;
        }
        else
        {
            float _3253;
            float _3255;
            float _3257;
            float _3259;
            float _3261;
            float _3263;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            float _3400 = 0.0;
            float _3401 = 0.0;
            float _3402 = 0.0;
            uint _3403 = 0u;
            uint _3412;
            bool _3413;
            for (;;)
            {
                _3412 = texelFetch(g_lightClassification, int((((_3166 << 5u) + (_3152 << 9u)) + (_3403 << 2u)) >> 2u)).x;
                _3413 = _3412 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3413)
                {
                    frontier_phi_66_pred = _3402;
                    frontier_phi_66_pred_1 = _3401;
                    frontier_phi_66_pred_2 = _3400;
                    frontier_phi_66_pred_3 = _3399;
                    frontier_phi_66_pred_4 = _3398;
                    frontier_phi_66_pred_5 = _3397;
                }
                else
                {
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    uint _3527;
                    _3521 = _3397;
                    _3522 = _3398;
                    _3523 = _3399;
                    _3524 = _3400;
                    _3525 = _3401;
                    _3526 = _3402;
                    _3527 = _3412;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    for (;;)
                    {
                        uint _3531 = uint(findLSB(_3527)) + (_3403 << 5u);
                        uint _3528 = (_3527 + 4294967295u) & _3527;
                        uint _3533 = _3531 * 48u;
                        vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 3u)).x));
                        uint _3553 = (_3531 * 48u) + 4u;
                        vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3572 = (_3531 * 48u) + 8u;
                        vec3 _3583 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3572)).x, texelFetch(g_PointLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3572 + 2u)).x));
                        float _3587 = _3547.x - _2231;
                        float _3588 = _3547.y - _2232;
                        float _3589 = _3547.z - _2233;
                        float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                        float _3593 = inversesqrt(_3590);
                        float _3594 = _3593 * _3587;
                        float _3595 = _3593 * _3588;
                        float _3596 = _3593 * _3589;
                        float _3597 = dot(vec3(_1099, _1102, _1105), vec3(_3594, _3595, _3596));
                        float _3602 = 1.0 - (_3590 * _3547.w);
                        float _5019 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3603 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3604 = sqrt(_3590) * _3566.w;
                        float _3607 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                        float _3608 = _3607 * _3607;
                        float _3611 = ((1.0 - _3608) * _3597) + _3608;
                        float _3614 = _3604 * _3604;
                        float _3618 = ((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3603) / ((_3614 * 0.699999988079071044921875) + 1.0);
                        float _3622 = (-0.0) - _2231;
                        float _3623 = (-0.0) - _2232;
                        float _3624 = (-0.0) - _2233;
                        float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                        float _3629 = _3628 * _3622;
                        float _3630 = _3628 * _3623;
                        float _3631 = _3628 * _3624;
                        float _3638 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                        float _3639 = 1.0 - _1174;
                        float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                        float _3647 = _3646 * _3646;
                        float _3648 = _3647 * _3647;
                        float _3649 = _3629 + _3594;
                        float _3650 = _3630 + _3595;
                        float _3651 = _3631 + _3596;
                        float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                        float _3659 = dot(vec3(_1099, _1102, _1105), vec3(_3629, _3630, _3631));
                        float _5035 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                        float _3663 = dot(vec3(_1099, _1102, _1105), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                        float _5046 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3666 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                        float _3671 = _3607 * _3647;
                        float _3672 = _3671 * _3671;
                        float _3675 = ((1.0 - _3672) * _3597) + _3672;
                        float _5057 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3676 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3677 = 1.0 - _3647;
                        float _3687 = (0.5 / (((_3676 * ((_3662 * _3677) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3676 * _3677) + _3647) * _3662))) * _3676;
                        float _5068 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                        float _3698 = (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0)))) / ((_3670 * _3670) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125))) * _3603;
                        _3456 = (_3618 * _3566.x) + _3524;
                        _3457 = (_3618 * _3566.y) + _3525;
                        _3458 = (_3618 * _3566.z) + _3526;
                        _3453 = (_3698 * _3583.x) + _3521;
                        _3454 = (_3698 * _3583.y) + _3522;
                        _3455 = (_3698 * _3583.z) + _3523;
                        if (_3528 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3521 = _3453;
                            _3522 = _3454;
                            _3523 = _3455;
                            _3524 = _3456;
                            _3525 = _3457;
                            _3526 = _3458;
                            _3527 = _3528;
                        }
                    }
                    frontier_phi_66_pred = _3458;
                    frontier_phi_66_pred_1 = _3457;
                    frontier_phi_66_pred_2 = _3456;
                    frontier_phi_66_pred_3 = _3455;
                    frontier_phi_66_pred_4 = _3454;
                    frontier_phi_66_pred_5 = _3453;
                }
                _3263 = frontier_phi_66_pred;
                _3261 = frontier_phi_66_pred_1;
                _3259 = frontier_phi_66_pred_2;
                _3257 = frontier_phi_66_pred_3;
                _3255 = frontier_phi_66_pred_4;
                _3253 = frontier_phi_66_pred_5;
                uint _3404 = _3403 + 1u;
                if (_3404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3397 = _3253;
                    _3398 = _3255;
                    _3399 = _3257;
                    _3400 = _3259;
                    _3401 = _3261;
                    _3402 = _3263;
                    _3403 = _3404;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3252 = _3253;
            _3254 = _3255;
            _3256 = _3257;
            _3258 = _3259;
            _3260 = _3261;
            _3262 = _3263;
        }
        uvec4 _3266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3267 = _3266.z;
        uint _3269 = (_3267 >> 8u) & 15u;
        float _3365;
        float _3367;
        float _3369;
        float _3371;
        float _3373;
        float _3375;
        if (((4294967295u << _3269) & _3172) == 0u)
        {
            _3365 = _3252;
            _3367 = _3254;
            _3369 = _3256;
            _3371 = _3258;
            _3373 = _3260;
            _3375 = _3262;
        }
        else
        {
            float _3390 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _3391 = _3390 * _2231;
            float _3392 = _3390 * _2232;
            float _3393 = _3390 * _2233;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3269 < ((_3267 >> 12u) & 15u))
            {
                float _3366;
                float _3368;
                float _3370;
                float _3372;
                float _3374;
                float _3376;
                float _3504 = _3252;
                float _3505 = _3254;
                float _3506 = _3256;
                float _3507 = _3258;
                float _3508 = _3260;
                float _3509 = _3262;
                uint _3510 = _3269;
                uint _3519;
                bool _3520;
                for (;;)
                {
                    _3519 = texelFetch(g_lightClassification, int((((_3166 << 5u) + (_3152 << 9u)) + (_3510 << 2u)) >> 2u)).x;
                    _3520 = _3519 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3520)
                    {
                        frontier_phi_72_pred = _3509;
                        frontier_phi_72_pred_1 = _3508;
                        frontier_phi_72_pred_2 = _3507;
                        frontier_phi_72_pred_3 = _3506;
                        frontier_phi_72_pred_4 = _3505;
                        frontier_phi_72_pred_5 = _3504;
                    }
                    else
                    {
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _3716 = _3504;
                        float _3717 = _3505;
                        float _3718 = _3506;
                        float _3719 = _3507;
                        float _3720 = _3508;
                        float _3721 = _3509;
                        uint _3722 = _3519;
                        uint _3723;
                        vec4 _3748;
                        float _3749;
                        vec4 _3764;
                        vec3 _3776;
                        vec4 _3791;
                        vec4 _3806;
                        float _3852;
                        bool _3853;
                        for (;;)
                        {
                            uint _3733 = ((_3510 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3722));
                            _3723 = (_3722 + 4294967295u) & _3722;
                            uint _3735 = _3733 * 40u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            _3749 = _3748.w;
                            uint _3751 = (_3733 * 40u) + 4u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3733 * 40u) + 8u;
                            _3776 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x));
                            uint _3778 = (_3733 * 40u) + 16u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3793 = (_3733 * 40u) + 20u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3733 * 40u) + 24u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            uint _3827 = (_3733 * 40u) + 28u;
                            vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            _3852 = fma(_2233, _3840.z, fma(_2232, _3840.y, _3840.x * _2231)) + _3840.w;
                            _3853 = !((fma(_2233, _3821.z, fma(_2232, _3821.y, _3821.x * _2231)) + _3821.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3853)
                            {
                                float _3880 = _3748.x - _2231;
                                float _3881 = _3748.y - _2232;
                                float _3882 = _3748.z - _2233;
                                float _3883 = dot(vec3(_3880, _3881, _3882), vec3(_3880, _3881, _3882));
                                float _3886 = inversesqrt(_3883);
                                float _3887 = _3886 * _3880;
                                float _3888 = _3886 * _3881;
                                float _3889 = _3886 * _3882;
                                float _3893 = 1.0 - (_3883 / (_3749 * _3749));
                                float _5079 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3898 = sqrt(_3883) * _3764.w;
                                float _3900 = 1.39999997615814208984375 / (_3898 + 1.39999997615814208984375);
                                float _3901 = _3900 * _3900;
                                float _3904 = ((1.0 - _3901) * dot(vec3(_3887, _3888, _3889), vec3(_1099, _1102, _1105))) + _3901;
                                float _3907 = _3898 * _3898;
                                float _3911 = (fma(_2233, _3791.z, fma(_2232, _3791.y, _3791.x * _2231)) + _3791.w) / _3852;
                                float _3912 = (fma(_2233, _3806.z, fma(_2232, _3806.y, _3806.x * _2231)) + _3806.w) / _3852;
                                float _3916 = 1.0 - dot(vec2(_3911, _3912), vec2(_3911, _3912));
                                float _5095 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3917 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3918 = _3917 * (((isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0))) * _3894) / ((_3907 * 0.699999988079071044921875) + 1.0));
                                float _3930 = exp2(log2(1.0 / ((_3907 * 3.5) + 5.0)) * 0.25);
                                float _3931 = 1.0 - _1174;
                                float _3938 = sqrt(1.0 - ((1.0 - (_3931 * _3931)) * (1.0 - (_3930 * _3930))));
                                float _3939 = _3938 * _3938;
                                float _3940 = _3939 * _3939;
                                float _3941 = _3887 - _3391;
                                float _3942 = _3888 - _3392;
                                float _3943 = _3889 - _3393;
                                float _3947 = inversesqrt(dot(vec3(_3941, _3942, _3943), vec3(_3941, _3942, _3943)));
                                float _3951 = dot(vec3(_1099, _1102, _1105), vec3((-0.0) - _3391, (-0.0) - _3392, (-0.0) - _3393));
                                float _5106 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3955 = dot(vec3(_1099, _1102, _1105), vec3(_3947 * _3941, _3947 * _3942, _3947 * _3943));
                                float _5117 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3958 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3962 = ((_3958 * _3958) * (_3940 + (-1.0))) + 1.0;
                                float _3963 = _3900 * _3939;
                                float _3964 = _3963 * _3963;
                                float _3970 = ((1.0 - _3964) * dot(vec3(_1099, _1102, _1105), vec3(_3887, _3888, _3889))) + _3964;
                                float _5128 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3972 = 1.0 - _3939;
                                float _3982 = (0.5 / (((_3971 * ((_3954 * _3972) + _3939)) + 9.9999999392252902907785028219223e-09) + (((_3971 * _3972) + _3939) * _3954))) * _3971;
                                float _5139 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3992 = (_3917 * _3894) * (((_3940 * 3.1415927410125732421875) * (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0)))) / ((_3962 * _3962) * ((_3907 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3918 * _3764.y;
                                frontier_phi_78_pred_1 = _3918 * _3764.x;
                                frontier_phi_78_pred_2 = _3992 * _3776.z;
                                frontier_phi_78_pred_3 = _3992 * _3776.y;
                                frontier_phi_78_pred_4 = _3992 * _3776.x;
                                frontier_phi_78_pred_5 = _3918 * _3764.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4000 = frontier_phi_78_pred;
                            _3999 = frontier_phi_78_pred_1;
                            _3998 = frontier_phi_78_pred_2;
                            _3997 = frontier_phi_78_pred_3;
                            _3996 = frontier_phi_78_pred_4;
                            _4001 = frontier_phi_78_pred_5;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3708 = _4001 + _3721;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            if (_3723 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3723;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3708;
                        frontier_phi_72_pred_1 = _3707;
                        frontier_phi_72_pred_2 = _3706;
                        frontier_phi_72_pred_3 = _3705;
                        frontier_phi_72_pred_4 = _3704;
                        frontier_phi_72_pred_5 = _3703;
                    }
                    _3376 = frontier_phi_72_pred;
                    _3374 = frontier_phi_72_pred_1;
                    _3372 = frontier_phi_72_pred_2;
                    _3370 = frontier_phi_72_pred_3;
                    _3368 = frontier_phi_72_pred_4;
                    _3366 = frontier_phi_72_pred_5;
                    uint _3511 = _3510 + 1u;
                    if (_3511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3504 = _3366;
                        _3505 = _3368;
                        _3506 = _3370;
                        _3507 = _3372;
                        _3508 = _3374;
                        _3509 = _3376;
                        _3510 = _3511;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3376;
                frontier_phi_60_61_ladder_1 = _3374;
                frontier_phi_60_61_ladder_2 = _3370;
                frontier_phi_60_61_ladder_3 = _3368;
                frontier_phi_60_61_ladder_4 = _3366;
                frontier_phi_60_61_ladder_5 = _3372;
            }
            else
            {
                frontier_phi_60_61_ladder = _3262;
                frontier_phi_60_61_ladder_1 = _3260;
                frontier_phi_60_61_ladder_2 = _3256;
                frontier_phi_60_61_ladder_3 = _3254;
                frontier_phi_60_61_ladder_4 = _3252;
                frontier_phi_60_61_ladder_5 = _3258;
            }
            _3365 = frontier_phi_60_61_ladder_4;
            _3367 = frontier_phi_60_61_ladder_3;
            _3369 = frontier_phi_60_61_ladder_2;
            _3371 = frontier_phi_60_61_ladder_5;
            _3373 = frontier_phi_60_61_ladder_1;
            _3375 = frontier_phi_60_61_ladder;
        }
        float _3380 = isnan(1.0) ? _1158 : (isnan(_1158) ? 1.0 : min(_1158, 1.0));
        _3185 = (_3380 * _3371) + _2697;
        _3187 = (_3380 * _3373) + _2699;
        _3189 = (_3380 * _3375) + _2701;
        _3191 = ((_3365 * _1142) * _3380) + _3035;
        _3193 = ((_3367 * _1144) * _3380) + _3037;
        _3195 = ((_3369 * _1145) * _3380) + _3039;
    }
    else
    {
        _3185 = _2697;
        _3187 = _2699;
        _3189 = _2701;
        _3191 = _3035;
        _3193 = _3037;
        _3195 = _3039;
    }
    float _5155 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _5166 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _5177 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    uint _3215 = _288 + 6u;
    float _3223 = _1080 / cbSceneParam._m0[86u].x;
    float _3224 = _1081 / cbSceneParam._m0[86u].y;
    vec4 _3238 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3223, _3224, (log2((isnan(cbSceneParam._m0[77u].w) ? _1015 : (isnan(_1015) ? cbSceneParam._m0[77u].w : min(_1015, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3240 = _3238.x;
    float _3241 = _3238.y;
    float _3242 = _3238.z;
    float _3243 = _3238.w;
    float _3315;
    float _3317;
    float _3319;
    float _3321;
    if (_1015 > cbSceneParam._m0[78u].w)
    {
        float _3277 = isnan(_1015) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1015 : min(cbSceneParam._m0[80u].w, _1015));
        float _3278 = _3277 / _1015;
        float _3289 = _3278 * _1065;
        float _3290 = _1066 * _3278;
        float _3291 = (-0.0) - _3290;
        float _3293 = _3278 * _1067;
        float _3295 = (cbSceneParam._m0[77u].w * _3291) / _3277;
        float _3296 = _3295 + cbSceneParam._m0[79u].w;
        float _3297 = cbSceneParam._m0[79u].w - _3290;
        float _3303 = sqrt(((_3289 * _3289) + (_3290 * _3290)) + (_3293 * _3293));
        float _3306 = (1.0 - (cbSceneParam._m0[77u].w / _3277)) * _3303;
        float _3311 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3313 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3466;
        if (abs((_3291 - _3295) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3466 = ((((_3296 > 0.0) ? exp2(_3311 * _3296) : (2.0 - exp2(_3313 * _3296))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3306;
        }
        else
        {
            float _3426 = 1.0 / cbSceneParam._m0[80u].x;
            float _3427 = isnan(_3297) ? _3296 : (isnan(_3296) ? _3297 : max(_3296, _3297));
            float _3428 = isnan(_3297) ? _3296 : (isnan(_3296) ? _3297 : min(_3296, _3297));
            float _3437 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : min(_3427, 0.0));
            float _3438 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : min(_3428, 0.0));
            _3466 = ((abs(_3303 / _3291) * cbSceneParam._m0[80u].y) * ((((_3437 - _3438) * 2.0) - ((exp2(_3311 * (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0)))) - exp2(_3311 * (isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))))) * _3426)) - ((exp2(_3313 * _3437) - exp2(_3313 * _3438)) * _3426))) + (_3306 * cbSceneParam._m0[80u].z);
        }
        vec4 _3468 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3223, _3224, 1.0), 0.0);
        float _3477 = exp2((_3466 * (-1.44269502162933349609375)) * (1.0 - _3468.w));
        float _3478 = log2(_3477);
        float _3494 = log2(_3243);
        _3315 = (exp2(_3494 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].x)) * _3468.x) / cbSceneParam._m0[78u].x)) + _3240;
        _3317 = (exp2(_3494 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].y)) * _3468.y) / cbSceneParam._m0[78u].y)) + _3241;
        _3319 = (exp2(_3494 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].z)) * _3468.z) / cbSceneParam._m0[78u].z)) + _3242;
        _3321 = _3477 * _3243;
    }
    else
    {
        _3315 = _3240;
        _3317 = _3241;
        _3319 = _3242;
        _3321 = _3243;
    }
    float _3333 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3334 = _3333 == 3.0;
    float _3335 = log2(_3321);
    float _3342 = exp2(_3335 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0))) * (_3185 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1158))) + ((_3191 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1964)) * cbPerFrame._m0[3u].x));
    float _3343 = exp2(_3335 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3187 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1158))) + ((_3193 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1964)) * cbPerFrame._m0[3u].x));
    float _3344 = exp2(_3335 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3189 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1158))) + ((_3195 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1964)) * cbPerFrame._m0[3u].x));
    float _3353 = (_3333 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3353 * (_3334 ? _3342 : (_3342 + (cbSceneParam._m0[72u].w * _3315)));
    SV_Target.y = _3353 * (_3334 ? _3343 : (_3343 + (cbSceneParam._m0[72u].w * _3317)));
    SV_Target.z = _3353 * (_3334 ? _3344 : (_3344 + (cbSceneParam._m0[72u].w * _3319)));
    SV_Target.w = cbInstanceData._m0[_3215].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3215].w;
}


