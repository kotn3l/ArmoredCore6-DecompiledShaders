#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1457;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3804 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3815 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3826 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _415) + _624;
    float _634 = ((_605.y - _625) * _415) + _625;
    float _635 = ((_605.z - _626) * _415) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _658 = ((_647.x - _633) * _488) + _633;
    float _659 = ((_647.y - _634) * _488) + _634;
    float _660 = ((_647.z - _635) * _488) + _635;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _685 = ((_672.z - _660) * _558) + _660;
    float _688 = ((((_672.x - _658) * _558) + _658) * 2.0) + (-1.0);
    float _690 = ((((_672.y - _659) * _558) + _659) * 2.0) + (-1.0);
    float _691 = dot(vec2(_688, _690), vec2(_688, _690));
    float _3837 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _737 = _735.x;
    float _738 = 1.0 - _737;
    float _753 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_737 - _738) * cbMtdParam._m0[24u].z) + _738) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3848 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _761 = (_754 * ((_585.x * cbMtdParam._m0[18u].x) - _565)) + _565;
    float _762 = (_754 * ((_585.y * cbMtdParam._m0[18u].y) - _566)) + _566;
    float _763 = (_754 * ((_585.z * cbMtdParam._m0[18u].z) - _567)) + _567;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _791 = _789.x;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _791) * _415) + _791;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _809) * _488) + _809;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _826) * _558) + _826;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _844) * cbMtdParam._m0[19u].z) + _844;
    float _850 = _848 - (_848 * _754);
    float _854 = (cbMtdParam._m0[19u].w * (_710.z - _685)) + _685;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _874 = (_867.x * 2.0) + (-1.0);
    float _875 = (_867.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _3859 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _884 = (_754 * (_867.z - _854)) + _854;
    float _887 = (((_710.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _688;
    float _888 = (((_710.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _900 = (((_874 - _887) + (cbMtdParam._m0[21u].x * _887)) * _754) + _887;
    float _901 = (((_875 - _888) + (cbMtdParam._m0[21u].x * _888)) * _754) + _888;
    float _902 = (_754 * (sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) - _696)) + _696;
    float _904 = cbMtdParam._m0[22u].x + _710.w;
    float _907 = fma(_902, _243 * NORMAL.x, fma(_901, _250 * TANGENT.x, (_236 * _228) * _900));
    float _910 = fma(_902, _243 * NORMAL.y, fma(_901, _250 * TANGENT.y, (_236 * _229) * _900));
    float _913 = fma(_902, _243 * NORMAL.z, fma(_901, _250 * TANGENT.z, (_236 * _230) * _900));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _3870 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _921 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _3892 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3903 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3914 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3925 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _926 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    float _1005 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1006 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1024 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1027 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1030 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1044 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1050 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_1044].x;
    float _1051 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_1044].y;
    float _1052 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_1044].z;
    float _3936 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1056 = 1.0 - _926;
    float _1057 = _1053 * _1056;
    float _1058 = _1054 * _1056;
    float _1059 = _1055 * _1056;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _926;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _926;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _926;
    float _1067 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1005, cbSceneParam._m0[86u].y * _1006));
    float _1083 = ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * TEXCOORD_5.w) * _1079.x;
    float _1084 = dot(vec3(_918, _919, _920), vec3(_997, _998, _999));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _918) - _997;
    float _1092 = (_1087 * _919) - _998;
    float _1093 = (_1087 * _920) - _999;
    float _1097 = abs(dot(vec3(_997, _998, _999), vec3(_918, _919, _920)));
    float _3969 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_921);
    float _1112 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1118 = (1.0 - _1112) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1119 = _1112 * _1099;
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1155, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147));
        float _1185 = fma(_1155, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147));
        float _1189 = fma(_1155, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147));
        float _1214 = _1147 + _918;
        float _1215 = _1151 + _919;
        float _1216 = _1155 + _920;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_918, _919, _920), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4017 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_918, _919, _920), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4050 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_918, _919, _920), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4083 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1494 = fma(_1155, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147));
        float _1498 = fma(_1155, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147));
        float _1502 = fma(_1155, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147));
        float _1525 = _1147 + _918;
        float _1526 = _1151 + _919;
        float _1527 = _1155 + _920;
        float _1537 = fma(_1527, cbModelParam._m0[30u].z, fma(_1526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1525)) - _1494;
        float _1538 = fma(_1527, cbModelParam._m0[31u].z, fma(_1526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1525)) - _1498;
        float _1539 = fma(_1527, cbModelParam._m0[32u].z, fma(_1526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1525)) - _1502;
        float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
        float _1556 = ((_1543 * _1537) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1494 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1543 * _1538) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1498 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1543 * _1539) / cbModelParam._m0[35u].z) + ((((((_1502 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        float _1593 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1560.x + (-0.5));
        float _1595 = _1593 * (_1560.y + (-0.5));
        float _1596 = _1593 * (_1560.z + (-0.5));
        float _1603 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1567.x + (-0.5));
        float _1605 = _1603 * (_1567.y + (-0.5));
        float _1606 = _1603 * (_1567.z + (-0.5));
        float _1613 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1574.x + (-0.5));
        float _1615 = _1613 * (_1574.y + (-0.5));
        float _1616 = _1613 * (_1574.z + (-0.5));
        float _1623 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1581.x + (-0.5));
        float _1625 = _1623 * (_1581.y + (-0.5));
        float _1626 = _1623 * (_1581.z + (-0.5));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = _1594 * 0.5;
        float _1631 = _1604 * 0.5;
        float _1632 = _1614 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_918, _919, _920), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4146 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1657 + 1.0))) + _1662) * _1627;
        float _1672 = _1595 * 0.5;
        float _1673 = _1605 * 0.5;
        float _1674 = _1615 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_918, _919, _920), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4179 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1699 + 1.0))) + _1704) * _1628;
        float _1714 = _1596 * 0.5;
        float _1715 = _1606 * 0.5;
        float _1716 = _1616 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_918, _919, _920), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4212 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1741 + 1.0))) + _1746) * _1629;
        _1763 = _1596;
        _1764 = _1595;
        _1765 = _1594;
        _1766 = _1606;
        _1767 = _1605;
        _1768 = _1604;
        _1769 = _1616;
        _1770 = _1615;
        _1771 = _1614;
        _1772 = _1629;
        _1773 = _1628;
        _1774 = _1627;
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
    }
    else
    {
        _1763 = _1457;
        _1764 = _1457;
        _1765 = _1457;
        _1766 = _1457;
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = 0.0;
        _1776 = 0.0;
        _1777 = 0.0;
    }
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1469)) + _1469;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1470)) + _1470;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1471)) + _1471;
    float _1810 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1787));
    float _1831 = _1091 * 0.5;
    float _1832 = _1092 * 0.5;
    float _1833 = _1093 * 0.5;
    float _1834 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1837 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1840 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1874;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1847 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1851 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1855 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1862 = dot(vec4(cbModelParam._m0[39u]), vec4(_1831, _1832, _1833, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1885;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1876 = dot(vec4(cbModelParam._m0[40u]), vec4(_1831, _1832, _1833, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1889 = (_1885 * cbModelParam._m0[1u].x) + (_1874 * (1.0 - cbModelParam._m0[1u].x));
    float _1899 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1899 : min(cbModelParam._m0[25u].z, _1899));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1947 = fma(_1155, cbModelParam._m0[13u].z, fma(_1151, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147)) + cbModelParam._m0[13u].w;
        float _1951 = fma(_1155, cbModelParam._m0[14u].z, fma(_1151, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147)) + cbModelParam._m0[14u].w;
        float _1955 = fma(_1155, cbModelParam._m0[15u].z, fma(_1151, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147)) + cbModelParam._m0[15u].w;
        float _1958 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1961 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1964 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _1992;
        if (_1958 > 0.0)
        {
            _1992 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1992 = frontier_phi_14_12_ladder;
        }
        float _2215;
        if (_1961 > 0.0)
        {
            _2215 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2215 = frontier_phi_23_19_ladder;
        }
        float _2472;
        if (_1964 > 0.0)
        {
            _2472 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2472 = frontier_phi_35_30_ladder;
        }
        float _2474 = isnan(_2215) ? _1992 : (isnan(_1992) ? _2215 : min(_1992, _2215));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1958) + _1947;
        float _2480 = (_2475 * _1961) + _1951;
        float _2481 = (_2475 * _1964) + _1955;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1900);
            frontier_phi_13_35_ladder = _2609.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2609.x * cbModelParam._m0[1u].y;
        }
        _1980 = frontier_phi_13_35_ladder_2;
        _1982 = frontier_phi_13_35_ladder_1;
        _1984 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1900);
        _1980 = _1968.x * cbModelParam._m0[1u].y;
        _1982 = _1968.y * cbModelParam._m0[1u].y;
        _1984 = _1968.z * cbModelParam._m0[1u].y;
    }
    float _1988 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _1989 = isnan(_1988) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1988 : min(cbModelParam._m0[25u].w, _1988));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2042 = fma(_1155, cbModelParam._m0[21u].z, fma(_1151, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147)) + cbModelParam._m0[21u].w;
        float _2046 = fma(_1155, cbModelParam._m0[22u].z, fma(_1151, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147)) + cbModelParam._m0[22u].w;
        float _2050 = fma(_1155, cbModelParam._m0[23u].z, fma(_1151, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147)) + cbModelParam._m0[23u].w;
        float _2053 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2056 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2059 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2220;
        if (_2053 > 0.0)
        {
            _2220 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2220 = frontier_phi_25_21_ladder;
        }
        float _2499;
        if (_2056 > 0.0)
        {
            _2499 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2499 = frontier_phi_37_32_ladder;
        }
        float _2712;
        if (_2059 > 0.0)
        {
            _2712 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2712 = frontier_phi_46_43_ladder;
        }
        float _2714 = isnan(_2499) ? _2220 : (isnan(_2220) ? _2499 : min(_2220, _2499));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _2053) + _2042;
        float _2720 = (_2715 * _2056) + _2046;
        float _2721 = (_2715 * _2059) + _2050;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1989);
            frontier_phi_22_46_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2078 = frontier_phi_22_46_ladder_2;
        _2080 = frontier_phi_22_46_ladder_1;
        _2082 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _1989);
        _2078 = _2062.x * cbModelParam._m0[1u].z;
        _2080 = _2062.y * cbModelParam._m0[1u].z;
        _2082 = _2062.z * cbModelParam._m0[1u].z;
    }
    float _2095 = (((_1118 * _1067) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2097 = (((_1118 * _1069) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2099 = (((_1118 * _1070) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2082 - _1984)) + _1984);
    float _2102 = fma(_2099, cbSceneParam._m0[89u].z, fma(_2097, cbSceneParam._m0[89u].y, _2095 * cbSceneParam._m0[89u].x));
    float _2105 = fma(_2099, cbSceneParam._m0[90u].z, fma(_2097, cbSceneParam._m0[90u].y, _2095 * cbSceneParam._m0[90u].x));
    float _2108 = fma(_2099, cbSceneParam._m0[91u].z, fma(_2097, cbSceneParam._m0[91u].y, _2095 * cbSceneParam._m0[91u].x));
    vec4 _2116 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1005, _1006));
    float _2118 = _2116.w;
    float _2130 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2118);
    float _2131 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2118);
    float _2132 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2118);
    uvec4 _2136 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2138 = _2136.x * 14u;
    uint _2139 = _2138 + 13u;
    float _2146 = _1083 + (-1.0);
    float _2151 = (cbLight._m0[_2139].x * _2146) + 1.0;
    float _2152 = (cbLight._m0[_2139].y * _2146) + 1.0;
    float _2153 = (cbLight._m0[_2139].z * _2146) + 1.0;
    float _2154 = (cbLight._m0[_2139].w * _2146) + 1.0;
    uint _2155 = _2138 + 5u;
    float _2161 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2165 = _2138 + 4u;
    float _2174 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2178 = _2138 | 1u;
    float _2189 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_918, _919, _920));
    float _2192 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_918, _919, _920));
    float _4348 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _4359 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2197 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2199 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2206 = ((cbLight._m0[_2155].x * _2161) * _2199) + (((cbLight._m0[_2165].x * _2130) * _2174) * _2197);
    float _2207 = ((_2161 * cbLight._m0[_2155].y) * _2199) + (((cbLight._m0[_2165].y * _2131) * _2174) * _2197);
    float _2208 = ((_2161 * cbLight._m0[_2155].z) * _2199) + (((cbLight._m0[_2165].z * _2132) * _2174) * _2197);
    uvec4 _2212 = floatBitsToUint(cbLight._m0[_2138 + 12u]);
    bool _2214 = _2212.x == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2214)
    {
        _2225 = _2206;
        _2227 = _2207;
        _2229 = _2208;
    }
    else
    {
        uint _2233 = _2138 + 6u;
        float _2249 = (dot(vec3(cbLight._m0[_2138 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4370 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2252 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2225 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2206;
        _2227 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2207;
        _2229 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2208;
    }
    bool _2232 = _2212.y == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2232)
    {
        _2270 = _2225;
        _2272 = _2227;
        _2274 = _2229;
    }
    else
    {
        uint _2443 = _2138 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2138 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4386 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2462 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2270 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2225;
        _2272 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2227;
        _2274 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2229;
    }
    uint _2277 = _2138 + 8u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _921) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2138].x + _997;
    float _2293 = cbLight._m0[_2138].y + _998;
    float _2294 = cbLight._m0[_2138].z + _999;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2138].xyz));
    float _4402 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2306 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2307 = dot(vec3(_918, _919, _920), vec3(_2299, _2300, _2301));
    float _4424 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2299, _2300, _2301));
    float _4435 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2291 * _2291;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2328 = 0.959999978542327880859375 - _1064;
    float _2330 = 0.959999978542327880859375 - _1065;
    float _2331 = 0.959999978542327880859375 - _1066;
    float _2338 = 1.0 - _2291;
    float _2349 = (0.5 / (((_2306 * ((_2305 * _2338) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2338) + _2291) * _2305))) * _2305;
    float _4446 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    uint _2365 = _2138 + 9u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _921) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2178].x + _997;
    float _2379 = cbLight._m0[_2178].y + _998;
    float _2380 = cbLight._m0[_2178].z + _999;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2178].xyz));
    float _4457 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2392 = dot(vec3(_918, _919, _920), vec3(_2385, _2386, _2387));
    float _4468 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2385, _2386, _2387));
    float _4479 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2377 * _2377;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2418 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2306 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2418) + _2377) * _2391))) * _2391;
    float _4490 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    float _2440 = (((((_2411 * _2328) + _1067) * cbLight._m0[_2365].x) * _2430) * _2161) + ((((cbLight._m0[_2277].x * _2130) * ((_2327 * _2328) + _1067)) * _2351) * _2174);
    float _2441 = (((((_2411 * _2330) + _1069) * cbLight._m0[_2365].y) * _2430) * _2161) + ((((cbLight._m0[_2277].y * _2131) * ((_2327 * _2330) + _1069)) * _2351) * _2174);
    float _2442 = (((((_2411 * _2331) + _1070) * cbLight._m0[_2365].z) * _2430) * _2161) + ((((cbLight._m0[_2277].z * _2132) * ((_2327 * _2331) + _1070)) * _2351) * _2174);
    float _2504;
    float _2506;
    float _2508;
    if (_2214)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2138 + 2u;
        uint _2514 = _2138 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _921) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _997;
        float _2531 = cbLight._m0[_2510].y + _998;
        float _2532 = cbLight._m0[_2510].z + _999;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2510].xyz));
        float _4501 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2544 = dot(vec3(_918, _919, _920), vec3(_2537, _2538, _2539));
        float _4512 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4523 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2306 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2570) + _2529) * _2543))) * _2543;
        float _4534 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2504 = (((((_2563 * _2328) + _1067) * cbLight._m0[_2514].x) * _2582) * _2583) + _2440;
        _2506 = (((((_2563 * _2330) + _1069) * cbLight._m0[_2514].y) * _2582) * _2583) + _2441;
        _2508 = (((((_2563 * _2331) + _1070) * cbLight._m0[_2514].z) * _2582) * _2583) + _2442;
    }
    float _2618;
    float _2620;
    float _2622;
    if (_2232)
    {
        _2618 = _2504;
        _2620 = _2506;
        _2622 = _2508;
    }
    else
    {
        uint _2629 = _2138 + 3u;
        uint _2633 = _2138 + 11u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _921) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _997;
        float _2650 = cbLight._m0[_2629].y + _998;
        float _2651 = cbLight._m0[_2629].z + _999;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2629].xyz));
        float _4550 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2663 = dot(vec3(_918, _919, _920), vec3(_2656, _2657, _2658));
        float _4561 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4572 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2306 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2689) + _2648) * _2662))) * _2662;
        float _4583 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2618 = (((((_2682 * _2328) + _1067) * cbLight._m0[_2633].x) * _2701) * _2702) + _2504;
        _2620 = (((((_2682 * _2330) + _1069) * cbLight._m0[_2633].y) * _2701) * _2702) + _2506;
        _2622 = (((((_2682 * _2331) + _1070) * cbLight._m0[_2633].z) * _2701) * _2702) + _2508;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2136.y == 0u)
    {
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2777;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2777;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2777;
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1006) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _1005) / _2793)));
        float _2814 = (log2(_2780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            uint _3076 = 0u;
            uint _3085;
            bool _3086;
            for (;;)
            {
                _3085 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                _3086 = _3085 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3086)
                {
                    frontier_phi_61_pred = _3070;
                    frontier_phi_61_pred_1 = _3075;
                    frontier_phi_61_pred_2 = _3074;
                    frontier_phi_61_pred_3 = _3073;
                    frontier_phi_61_pred_4 = _3072;
                    frontier_phi_61_pred_5 = _3071;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3085;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3076 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2778;
                        float _3261 = _3220.y - _2779;
                        float _3262 = _3220.z - _2780;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_1024, _1027, _1030), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4609 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _2778;
                        float _3296 = (-0.0) - _2779;
                        float _3297 = (-0.0) - _2780;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3312 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3313 = 1.0 - _1099;
                        float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                        float _3321 = _3320 * _3320;
                        float _3322 = _3321 * _3321;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3333 = dot(vec3(_1024, _1027, _1030), vec3(_3302, _3303, _3304));
                        float _4625 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3337 = dot(vec3(_1024, _1027, _1030), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                        float _4636 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                        float _3345 = _3280 * _3321;
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3270) + _3346;
                        float _4647 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3351 = 1.0 - _3321;
                        float _3361 = (0.5 / (((_3350 * ((_3336 * _3351) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3321) * _3336))) * _3350;
                        float _4658 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3372 = (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3344 * _3344) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3129 = (_3291 * _3239.x) + _3197;
                        _3130 = (_3291 * _3239.y) + _3198;
                        _3131 = (_3291 * _3239.z) + _3199;
                        _3126 = (_3372 * _3256.x) + _3194;
                        _3127 = (_3372 * _3256.y) + _3195;
                        _3128 = (_3372 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_61_pred = _3126;
                    frontier_phi_61_pred_1 = _3131;
                    frontier_phi_61_pred_2 = _3130;
                    frontier_phi_61_pred_3 = _3129;
                    frontier_phi_61_pred_4 = _3128;
                    frontier_phi_61_pred_5 = _3127;
                }
                _2926 = frontier_phi_61_pred;
                _2936 = frontier_phi_61_pred_1;
                _2934 = frontier_phi_61_pred_2;
                _2932 = frontier_phi_61_pred_3;
                _2930 = frontier_phi_61_pred_4;
                _2928 = frontier_phi_61_pred_5;
                uint _3077 = _3076 + 1u;
                if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3070 = _2926;
                    _3071 = _2928;
                    _3072 = _2930;
                    _3073 = _2932;
                    _3074 = _2934;
                    _3075 = _2936;
                    _3076 = _3077;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((4294967295u << _2942) & _2824) == 0u)
        {
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
            _3044 = _2931;
            _3046 = _2933;
            _3048 = _2935;
        }
        else
        {
            float _3063 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
            float _3064 = _3063 * _2778;
            float _3065 = _3063 * _2779;
            float _3066 = _3063 * _2780;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3177 = _2925;
                float _3178 = _2927;
                float _3179 = _2929;
                float _3180 = _2931;
                float _3181 = _2933;
                float _3182 = _2935;
                uint _3183 = _2942;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3193)
                    {
                        frontier_phi_67_pred = _3180;
                        frontier_phi_67_pred_1 = _3181;
                        frontier_phi_67_pred_2 = _3182;
                        frontier_phi_67_pred_3 = _3179;
                        frontier_phi_67_pred_4 = _3178;
                        frontier_phi_67_pred_5 = _3177;
                    }
                    else
                    {
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        uint _3396 = _3192;
                        uint _3397;
                        vec4 _3422;
                        float _3423;
                        vec4 _3438;
                        vec3 _3450;
                        vec4 _3465;
                        vec4 _3480;
                        float _3526;
                        bool _3527;
                        for (;;)
                        {
                            uint _3407 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3396));
                            _3397 = (_3396 + 4294967295u) & _3396;
                            uint _3409 = _3407 * 40u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3423 = _3422.w;
                            uint _3425 = (_3407 * 40u) + 4u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3407 * 40u) + 8u;
                            _3450 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x));
                            uint _3452 = (_3407 * 40u) + 16u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3407 * 40u) + 20u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3407 * 40u) + 24u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3501 = (_3407 * 40u) + 28u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3526 = fma(_2780, _3514.z, fma(_2779, _3514.y, _3514.x * _2778)) + _3514.w;
                            _3527 = !((fma(_2780, _3495.z, fma(_2779, _3495.y, _3495.x * _2778)) + _3495.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3527)
                            {
                                float _3554 = _3422.x - _2778;
                                float _3555 = _3422.y - _2779;
                                float _3556 = _3422.z - _2780;
                                float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                                float _3560 = inversesqrt(_3557);
                                float _3561 = _3560 * _3554;
                                float _3562 = _3560 * _3555;
                                float _3563 = _3560 * _3556;
                                float _3567 = 1.0 - (_3557 / (_3423 * _3423));
                                float _4669 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3572 = sqrt(_3557) * _3438.w;
                                float _3574 = 1.39999997615814208984375 / (_3572 + 1.39999997615814208984375);
                                float _3575 = _3574 * _3574;
                                float _3578 = ((1.0 - _3575) * dot(vec3(_3561, _3562, _3563), vec3(_1024, _1027, _1030))) + _3575;
                                float _3581 = _3572 * _3572;
                                float _3585 = (fma(_2780, _3465.z, fma(_2779, _3465.y, _3465.x * _2778)) + _3465.w) / _3526;
                                float _3586 = (fma(_2780, _3480.z, fma(_2779, _3480.y, _3480.x * _2778)) + _3480.w) / _3526;
                                float _3590 = 1.0 - dot(vec2(_3585, _3586), vec2(_3585, _3586));
                                float _4685 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3592 = _3591 * (((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3568) / ((_3581 * 0.699999988079071044921875) + 1.0));
                                float _3604 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                                float _3605 = 1.0 - _1099;
                                float _3612 = sqrt(1.0 - ((1.0 - (_3605 * _3605)) * (1.0 - (_3604 * _3604))));
                                float _3613 = _3612 * _3612;
                                float _3614 = _3613 * _3613;
                                float _3615 = _3561 - _3064;
                                float _3616 = _3562 - _3065;
                                float _3617 = _3563 - _3066;
                                float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                                float _3625 = dot(vec3(_1024, _1027, _1030), vec3((-0.0) - _3064, (-0.0) - _3065, (-0.0) - _3066));
                                float _4696 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3629 = dot(vec3(_1024, _1027, _1030), vec3(_3621 * _3615, _3621 * _3616, _3621 * _3617));
                                float _4707 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3636 = ((_3632 * _3632) * (_3614 + (-1.0))) + 1.0;
                                float _3637 = _3574 * _3613;
                                float _3638 = _3637 * _3637;
                                float _3644 = ((1.0 - _3638) * dot(vec3(_1024, _1027, _1030), vec3(_3561, _3562, _3563))) + _3638;
                                float _4718 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3646 = 1.0 - _3613;
                                float _3656 = (0.5 / (((_3645 * ((_3628 * _3646) + _3613)) + 9.9999999392252902907785028219223e-09) + (((_3645 * _3646) + _3613) * _3628))) * _3645;
                                float _4729 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3666 = (_3591 * _3568) * (((_3614 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3636 * _3636) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3666 * _3450.x;
                                frontier_phi_73_pred_1 = _3666 * _3450.y;
                                frontier_phi_73_pred_2 = _3592 * _3438.z;
                                frontier_phi_73_pred_3 = _3592 * _3438.y;
                                frontier_phi_73_pred_4 = _3592 * _3438.x;
                                frontier_phi_73_pred_5 = _3666 * _3450.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_73_pred;
                            _3671 = frontier_phi_73_pred_1;
                            _3675 = frontier_phi_73_pred_2;
                            _3674 = frontier_phi_73_pred_3;
                            _3673 = frontier_phi_73_pred_4;
                            _3672 = frontier_phi_73_pred_5;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            if (_3397 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3397;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3380;
                        frontier_phi_67_pred_1 = _3381;
                        frontier_phi_67_pred_2 = _3382;
                        frontier_phi_67_pred_3 = _3379;
                        frontier_phi_67_pred_4 = _3378;
                        frontier_phi_67_pred_5 = _3377;
                    }
                    _3045 = frontier_phi_67_pred;
                    _3047 = frontier_phi_67_pred_1;
                    _3049 = frontier_phi_67_pred_2;
                    _3043 = frontier_phi_67_pred_3;
                    _3041 = frontier_phi_67_pred_4;
                    _3039 = frontier_phi_67_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3039;
                        _3178 = _3041;
                        _3179 = _3043;
                        _3180 = _3045;
                        _3181 = _3047;
                        _3182 = _3049;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3047;
                frontier_phi_55_56_ladder_1 = _3049;
                frontier_phi_55_56_ladder_2 = _3045;
                frontier_phi_55_56_ladder_3 = _3043;
                frontier_phi_55_56_ladder_4 = _3041;
                frontier_phi_55_56_ladder_5 = _3039;
            }
            else
            {
                frontier_phi_55_56_ladder = _2933;
                frontier_phi_55_56_ladder_1 = _2935;
                frontier_phi_55_56_ladder_2 = _2931;
                frontier_phi_55_56_ladder_3 = _2929;
                frontier_phi_55_56_ladder_4 = _2927;
                frontier_phi_55_56_ladder_5 = _2925;
            }
            _3038 = frontier_phi_55_56_ladder_5;
            _3040 = frontier_phi_55_56_ladder_4;
            _3042 = frontier_phi_55_56_ladder_3;
            _3044 = frontier_phi_55_56_ladder_2;
            _3046 = frontier_phi_55_56_ladder;
            _3048 = frontier_phi_55_56_ladder_1;
        }
        float _3053 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _2837 = (_3053 * _3044) + _2270;
        _2839 = (_3053 * _3046) + _2272;
        _2841 = (_3053 * _3048) + _2274;
        _2843 = ((_3038 * _1067) * _3053) + _2618;
        _2845 = ((_3040 * _1069) * _3053) + _2620;
        _2847 = ((_3042 * _1070) * _3053) + _2622;
    }
    else
    {
        _2837 = _2270;
        _2839 = _2272;
        _2841 = _2274;
        _2843 = _2618;
        _2845 = _2620;
        _2847 = _2622;
    }
    float _4745 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _4756 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4767 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    uint _2867 = _256 + 6u;
    float _2875 = _1005 / cbSceneParam._m0[86u].x;
    float _2876 = _1006 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _2951 = _2950 / _940;
        float _2962 = _2951 * _990;
        float _2963 = _991 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2966 = _2951 * _992;
        float _2968 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2963;
        float _2976 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2964 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3099 = 1.0 / cbSceneParam._m0[80u].x;
            float _3100 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3101 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            _3139 = ((abs(_2976 / _2964) * cbSceneParam._m0[80u].y) * ((((_3110 - _3111) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))))) * _3099)) - ((exp2(_2986 * _3110) - exp2(_2986 * _3111)) * _3099))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2895);
        _2988 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2990 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2992 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2994 = _3150 * _2895;
    }
    else
    {
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
        _2994 = _2895;
    }
    float _3006 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3007 = _3006 == 3.0;
    float _3008 = log2(_2994);
    float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2837 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1083))) + ((_2843 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1889)) * cbPerFrame._m0[3u].x));
    float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2839 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1083))) + ((_2845 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1889)) * cbPerFrame._m0[3u].x));
    float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2841 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1083))) + ((_2847 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1889)) * cbPerFrame._m0[3u].x));
    float _3026 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3026 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.y = _3026 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.z = _3026 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.w = cbInstanceData._m0[_2867].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
}


