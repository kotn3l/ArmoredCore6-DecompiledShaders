#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1507;
float _3887;
float _3888;
float _3889;
float _3890;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3899 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3910 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _570 = _568.x;
    float _571 = _568.y;
    float _572 = _568.z;
    float _579 = ((_551.x - _570) * _441) + _570;
    float _580 = ((_551.y - _571) * _441) + _571;
    float _581 = ((_551.z - _572) * _441) + _572;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _606 = ((_593.z - _581) * _514) + _581;
    float _609 = ((((_593.x - _579) * _514) + _579) * 2.0) + (-1.0);
    float _611 = ((((_593.y - _580) * _514) + _580) * 2.0) + (-1.0);
    float _612 = dot(vec2(_609, _611), vec2(_609, _611));
    float _3921 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _671 = ((isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : min(_668, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _680 = (_671 - ((((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _671))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3942 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _688 = (_681 * (cbMtdParam._m0[17u].x - _527)) + _527;
    float _689 = (_681 * (cbMtdParam._m0[17u].y - _530)) + _530;
    float _690 = (_681 * (cbMtdParam._m0[17u].z - _533)) + _533;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_704 - _705) * cbMtdParam._m0[24u].w) + _705) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3953 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _688) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _731) + _688;
    float _740 = ((((cbMtdParam._m0[10u].y - _689) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _731) + _689;
    float _741 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _690)) * _731) + _690;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _769) * _441) + _769;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _786) * _514) + _786;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _803) * cbMtdParam._m0[19u].z) + _803;
    float _809 = _807 - (_807 * _681);
    float _811 = _809 - (_809 * _731);
    float _815 = (cbMtdParam._m0[19u].w * (_631.z - _606)) + _606;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _836 = (_829.x * 2.0) + (-1.0);
    float _837 = (_829.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _3964 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _846 = (_681 * (_829.z - _815)) + _815;
    float _849 = ((cbMtdParam._m0[23u].x - _846) * _731) + _846;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _874 = (_868.x * 2.0) + (-1.0);
    float _875 = (_868.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _3975 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _884 = (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _885 = (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _611;
    float _897 = (((_836 - _884) + (cbMtdParam._m0[21u].x * _884)) * _681) + _884;
    float _898 = (((_837 - _885) + (cbMtdParam._m0[21u].x * _885)) * _681) + _885;
    float _899 = (_681 * (sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _617)) + _617;
    float _910 = (((_874 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _731) + _897;
    float _911 = (((_875 - _898) + (_898 * cbMtdParam._m0[22u].z)) * _731) + _898;
    float _912 = ((sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _899) * _731) + _899;
    float _914 = cbMtdParam._m0[22u].x + _631.w;
    float _917 = fma(_912, _252 * NORMAL.x, fma(_911, _259 * TANGENT.x, (_245 * _237) * _910));
    float _920 = fma(_912, _252 * NORMAL.y, fma(_911, _259 * TANGENT.y, (_245 * _238) * _910));
    float _923 = fma(_912, _252 * NORMAL.z, fma(_911, _259 * TANGENT.z, (_245 * _239) * _910));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _3986 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _931 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4008 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4019 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4030 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4041 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _936 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1000 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _990);
    float _1001 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _990);
    float _1002 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _990);
    float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
    float _1007 = _1000 * _1006;
    float _1008 = _1001 * _1006;
    float _1009 = _1002 * _1006;
    vec4 _1014 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1016 = _1014.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1188 = sqrt(((_1000 * _1000) + (_1001 * _1001)) + (_1002 * _1002));
        float _1194 = (cbMatDynParam._m0[5u].x * _1188) + cbMatDynParam._m0[5u].y;
        float _4052 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1199 = (cbMatDynParam._m0[5u].z * _1188) + cbMatDynParam._m0[5u].w;
        float _4063 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) - _1195)) + _1195) < ((_1016 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1027 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1028 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1046 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1049 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1052 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1065 = _265 + 9u;
    uint _1066 = _1065 + uint(cbMatDynParam._m0[0u].w);
    float _1072 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1066].x;
    float _1073 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1066].y;
    float _1074 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1066].z;
    float _4074 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1078 = 1.0 - _936;
    float _1079 = _1075 * _1078;
    float _1080 = _1076 * _1078;
    float _1081 = _1077 * _1078;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _936;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _936;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _936;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1027, cbSceneParam._m0[86u].y * _1028));
    float _1105 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_928, _929, _930), vec3(_1007, _1008, _1009));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _928) - _1007;
    float _1114 = (_1109 * _929) - _1008;
    float _1115 = (_1109 * _930) - _1009;
    float _1119 = abs(dot(vec3(_1007, _1008, _1009), vec3(_928, _929, _930)));
    float _4107 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_931);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1140 = (1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1141 = _1134 * _1121;
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1506;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1231 = fma(_1177, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169));
        float _1235 = fma(_1177, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169));
        float _1239 = fma(_1177, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169));
        float _1264 = _1169 + _928;
        float _1265 = _1173 + _929;
        float _1266 = _1177 + _930;
        float _1276 = fma(_1266, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264)) - _1231;
        float _1277 = fma(_1266, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264)) - _1235;
        float _1278 = fma(_1266, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264)) - _1239;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1231 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1235 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[34u].z) + ((((((_1239 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1334 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1300.x + (-0.5));
        float _1336 = _1334 * (_1300.y + (-0.5));
        float _1337 = _1334 * (_1300.z + (-0.5));
        float _1344 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1307.x + (-0.5));
        float _1346 = _1344 * (_1307.y + (-0.5));
        float _1347 = _1344 * (_1307.z + (-0.5));
        float _1354 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1314.x + (-0.5));
        float _1356 = _1354 * (_1314.y + (-0.5));
        float _1357 = _1354 * (_1314.z + (-0.5));
        float _1364 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1321.x + (-0.5));
        float _1366 = _1364 * (_1321.y + (-0.5));
        float _1367 = _1364 * (_1321.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1388 = (dot(vec3(_928, _929, _930), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1398 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4155 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1400 + 1.0))) + _1405) * _1368;
        float _1415 = _1336 * 0.5;
        float _1416 = _1346 * 0.5;
        float _1417 = _1356 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_928, _929, _930), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4188 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1442 + 1.0))) + _1447) * _1369;
        float _1457 = _1337 * 0.5;
        float _1458 = _1347 * 0.5;
        float _1459 = _1357 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_928, _929, _930), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4221 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1484 + 1.0))) + _1489) * _1370;
        _1506 = _1337;
        _1508 = _1336;
        _1509 = _1335;
        _1510 = _1347;
        _1511 = _1346;
        _1512 = _1345;
        _1513 = _1357;
        _1514 = _1356;
        _1515 = _1355;
        _1516 = _1370;
        _1517 = _1369;
        _1518 = _1368;
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1507;
        _1508 = _1507;
        _1509 = _1507;
        _1510 = _1507;
        _1511 = _1507;
        _1512 = _1507;
        _1513 = _1507;
        _1514 = _1507;
        _1515 = _1507;
        _1516 = _1507;
        _1517 = _1507;
        _1518 = _1507;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1177, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169));
        float _1552 = fma(_1177, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169));
        float _1556 = fma(_1177, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169));
        float _1579 = _1169 + _928;
        float _1580 = _1173 + _929;
        float _1581 = _1177 + _930;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_928, _929, _930), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4284 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_928, _929, _930), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4317 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_928, _929, _930), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4350 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1507;
        _1818 = _1507;
        _1819 = _1507;
        _1820 = _1507;
        _1821 = _1507;
        _1822 = _1507;
        _1823 = _1507;
        _1824 = _1507;
        _1825 = _1507;
        _1826 = _1507;
        _1827 = _1507;
        _1828 = _1507;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1519)) + _1519;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1520)) + _1520;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1521)) + _1521;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1113 * 0.5;
    float _1886 = _1114 * 0.5;
    float _1887 = _1115 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1506, _1510, _1513, _1516));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1177, cbModelParam._m0[13u].z, fma(_1173, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1177, cbModelParam._m0[14u].z, fma(_1173, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1177, cbModelParam._m0[15u].z, fma(_1173, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2016 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2019 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2047 = frontier_phi_17_15_ladder;
        }
        float _2250;
        if (_2016 > 0.0)
        {
            _2250 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2250 = frontier_phi_26_22_ladder;
        }
        float _2504;
        if (_2019 > 0.0)
        {
            _2504 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2504 = frontier_phi_38_33_ladder;
        }
        float _2506 = isnan(_2250) ? _2047 : (isnan(_2047) ? _2250 : min(_2047, _2250));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _2013) + _2002;
        float _2512 = (_2507 * _2016) + _2006;
        float _2513 = (_2507 * _2019) + _2010;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2514;
        float _2518 = _2514 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 > _2518) || ((_2512 < _2516) || ((_2511 < _2516) || (_2511 > _2518))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2513, cbModelParam._m0[9u].z, fma(_2512, cbModelParam._m0[9u].y, _2511 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2513, cbModelParam._m0[10u].z, fma(_2512, cbModelParam._m0[10u].y, _2511 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2513, cbModelParam._m0[11u].z, fma(_2512, cbModelParam._m0[11u].y, _2511 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_16_38_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_16_38_ladder_2;
        _2037 = frontier_phi_16_38_ladder_1;
        _2039 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1954);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1177, cbModelParam._m0[21u].z, fma(_1173, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1177, cbModelParam._m0[22u].z, fma(_1173, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1177, cbModelParam._m0[23u].z, fma(_1173, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2112 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2115 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2255;
        if (_2109 > 0.0)
        {
            _2255 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2255 = frontier_phi_28_24_ladder;
        }
        float _2531;
        if (_2112 > 0.0)
        {
            _2531 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2531 = frontier_phi_40_35_ladder;
        }
        float _2744;
        if (_2115 > 0.0)
        {
            _2744 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2744 = frontier_phi_49_46_ladder;
        }
        float _2746 = isnan(_2531) ? _2255 : (isnan(_2255) ? _2531 : min(_2255, _2531));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _2109) + _2098;
        float _2752 = (_2747 * _2112) + _2102;
        float _2753 = (_2747 * _2115) + _2106;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_25_49_ladder = _2952.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2952.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2952.x * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_25_49_ladder_2;
        _2136 = frontier_phi_25_49_ladder_1;
        _2138 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2044);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2151 = (((_1140 * _1089) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2153 = (((_1140 * _1091) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2136 - _2037)) + _2037);
    float _2155 = (((_1140 * _1092) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2158 = fma(_2155, cbSceneParam._m0[89u].z, fma(_2153, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2161 = fma(_2155, cbSceneParam._m0[90u].z, fma(_2153, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2164 = fma(_2155, cbSceneParam._m0[91u].z, fma(_2153, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    uvec4 _2174 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2176 = _2174.x * 14u;
    uint _2177 = _2176 + 13u;
    float _2184 = _1105 + (-1.0);
    float _2189 = (cbLight._m0[_2177].x * _2184) + 1.0;
    float _2190 = (cbLight._m0[_2177].y * _2184) + 1.0;
    float _2191 = (cbLight._m0[_2177].z * _2184) + 1.0;
    float _2192 = (cbLight._m0[_2177].w * _2184) + 1.0;
    uint _2193 = _2176 + 5u;
    float _2199 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    uint _2203 = _2176 + 4u;
    float _2209 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2213 = _2176 | 1u;
    float _2224 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_928, _929, _930));
    float _2227 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_928, _929, _930));
    float _4486 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _4497 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2232 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2234 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2241 = ((cbLight._m0[_2193].x * _2199) * _2234) + ((cbLight._m0[_2203].x * _2209) * _2232);
    float _2242 = ((_2199 * cbLight._m0[_2193].y) * _2234) + ((_2209 * cbLight._m0[_2203].y) * _2232);
    float _2243 = ((_2199 * cbLight._m0[_2193].z) * _2234) + ((_2209 * cbLight._m0[_2203].z) * _2232);
    uvec4 _2247 = floatBitsToUint(cbLight._m0[_2176 + 12u]);
    bool _2249 = _2247.x == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2249)
    {
        _2260 = _2241;
        _2262 = _2242;
        _2264 = _2243;
    }
    else
    {
        uint _2268 = _2176 + 6u;
        float _2284 = (dot(vec3(cbLight._m0[_2176 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4508 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2287 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2260 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2241;
        _2262 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2242;
        _2264 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2243;
    }
    bool _2267 = _2247.y == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2267)
    {
        _2305 = _2260;
        _2307 = _2262;
        _2309 = _2264;
    }
    else
    {
        uint _2475 = _2176 + 7u;
        float _2491 = (dot(vec3(cbLight._m0[_2176 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4524 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2494 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2305 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2260;
        _2307 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2262;
        _2309 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2264;
    }
    uint _2312 = _2176 + 8u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _931) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2176].x + _1007;
    float _2328 = cbLight._m0[_2176].y + _1008;
    float _2329 = cbLight._m0[_2176].z + _1009;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2176].xyz));
    float _4540 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _4551 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2341 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2342 = dot(vec3(_928, _929, _930), vec3(_2334, _2335, _2336));
    float _4562 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2334, _2335, _2336));
    float _4573 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2326 * _2326;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
    float _2363 = 0.959999978542327880859375 - _1086;
    float _2365 = 0.959999978542327880859375 - _1087;
    float _2366 = 0.959999978542327880859375 - _1088;
    float _2373 = 1.0 - _2326;
    float _2384 = (0.5 / (((_2341 * ((_2340 * _2373) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2373) + _2326) * _2340))) * _2340;
    float _4584 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    uint _2397 = _2176 + 9u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _931) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2213].x + _1007;
    float _2411 = cbLight._m0[_2213].y + _1008;
    float _2412 = cbLight._m0[_2213].z + _1009;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2213].xyz));
    float _4595 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2424 = dot(vec3(_928, _929, _930), vec3(_2417, _2418, _2419));
    float _4606 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2417, _2418, _2419));
    float _4617 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2409 * _2409;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2450 = 1.0 - _2409;
    float _2460 = (0.5 / (((_2341 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2450) + _2409) * _2423))) * _2423;
    float _4628 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2462 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    float _2472 = (((((_2443 * _2363) + _1089) * cbLight._m0[_2397].x) * _2462) * _2199) + (((((_2362 * _2363) + _1089) * cbLight._m0[_2312].x) * _2386) * _2209);
    float _2473 = (((((_2443 * _2365) + _1091) * cbLight._m0[_2397].y) * _2462) * _2199) + (((((_2362 * _2365) + _1091) * cbLight._m0[_2312].y) * _2386) * _2209);
    float _2474 = (((((_2443 * _2366) + _1092) * cbLight._m0[_2397].z) * _2462) * _2199) + (((((_2362 * _2366) + _1092) * cbLight._m0[_2312].z) * _2386) * _2209);
    float _2536;
    float _2538;
    float _2540;
    if (_2249)
    {
        _2536 = _2472;
        _2538 = _2473;
        _2540 = _2474;
    }
    else
    {
        uint _2542 = _2176 + 2u;
        uint _2546 = _2176 + 10u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _931) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _1007;
        float _2563 = cbLight._m0[_2542].y + _1008;
        float _2564 = cbLight._m0[_2542].z + _1009;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2542].xyz));
        float _4639 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2576 = dot(vec3(_928, _929, _930), vec3(_2569, _2570, _2571));
        float _4650 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4661 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2341 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2602) + _2561) * _2575))) * _2575;
        float _4672 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2536 = (((((_2595 * _2363) + _1089) * cbLight._m0[_2546].x) * _2614) * _2615) + _2472;
        _2538 = (((((_2595 * _2365) + _1091) * cbLight._m0[_2546].y) * _2614) * _2615) + _2473;
        _2540 = (((((_2595 * _2366) + _1092) * cbLight._m0[_2546].z) * _2614) * _2615) + _2474;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2267)
    {
        _2650 = _2536;
        _2652 = _2538;
        _2654 = _2540;
    }
    else
    {
        uint _2661 = _2176 + 3u;
        uint _2665 = _2176 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _931) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _1007;
        float _2682 = cbLight._m0[_2661].y + _1008;
        float _2683 = cbLight._m0[_2661].z + _1009;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2661].xyz));
        float _4688 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2695 = dot(vec3(_928, _929, _930), vec3(_2688, _2689, _2690));
        float _4699 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4710 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
        float _2721 = 1.0 - _2680;
        float _2731 = (0.5 / (((_2341 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2721) + _2680) * _2694))) * _2694;
        float _4721 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2650 = (((((_2714 * _2363) + _1089) * cbLight._m0[_2665].x) * _2733) * _2734) + _2536;
        _2652 = (((((_2714 * _2365) + _1091) * cbLight._m0[_2665].y) * _2733) * _2734) + _2538;
        _2654 = (((((_2714 * _2366) + _1092) * cbLight._m0[_2665].z) * _2733) * _2734) + _2540;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2174.y == 0u)
    {
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2809;
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2809;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2809;
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.x;
        uint _2836 = uint((float(_2824.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1028) / _2825))) + floor(float(uint(cbSceneParam._m0[85u].x * _1027) / _2825)));
        float _2846 = (log2(_2812 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2847 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        uint _2850 = uint(isnan(14.0) ? _2847 : (isnan(_2847) ? 14.0 : min(_2847, 14.0)));
        uvec4 _2855 = texelFetch(g_lightClusterGridBuffer, int(((_2850 << 2u) + (_2836 << 6u)) >> 2u));
        uint _2856 = _2855.x;
        uint _2857 = _2824.z;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        if (((((1u << ((_2857 >> 4u) & 15u)) + 4294967295u) & _2856) == 0u) || ((_2857 & 240u) == 0u))
        {
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
        }
        else
        {
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3126)
                {
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                else
                {
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    uint _3261;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3125;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3265 = uint(findLSB(_3261)) + (_3116 << 5u);
                        uint _3262 = (_3261 + 4294967295u) & _3261;
                        uint _3267 = _3265 * 48u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3287 = (_3265 * 48u) + 4u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3306 = (_3265 * 48u) + 8u;
                        vec3 _3317 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x));
                        float _3321 = _3281.x - _2810;
                        float _3322 = _3281.y - _2811;
                        float _3323 = _3281.z - _2812;
                        float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                        float _3327 = inversesqrt(_3324);
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3331 = dot(vec3(_1046, _1049, _1052), vec3(_3328, _3329, _3330));
                        float _3336 = 1.0 - (_3324 * _3281.w);
                        float _4747 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3338 = sqrt(_3324) * _3300.w;
                        float _3341 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3331) + _3342;
                        float _3348 = _3338 * _3338;
                        float _3352 = ((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3337) / ((_3348 * 0.699999988079071044921875) + 1.0);
                        float _3356 = (-0.0) - _2810;
                        float _3357 = (-0.0) - _2811;
                        float _3358 = (-0.0) - _2812;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3373 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                        float _3374 = 1.0 - _1121;
                        float _3381 = sqrt(1.0 - ((1.0 - (_3374 * _3374)) * (1.0 - (_3373 * _3373))));
                        float _3382 = _3381 * _3381;
                        float _3383 = _3382 * _3382;
                        float _3384 = _3363 + _3328;
                        float _3385 = _3364 + _3329;
                        float _3386 = _3365 + _3330;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3394 = dot(vec3(_1046, _1049, _1052), vec3(_3363, _3364, _3365));
                        float _4763 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3397 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3398 = dot(vec3(_1046, _1049, _1052), vec3(_3390 * _3384, _3390 * _3385, _3390 * _3386));
                        float _4774 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3405 = ((_3401 * _3401) * (_3383 + (-1.0))) + 1.0;
                        float _3406 = _3341 * _3382;
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3331) + _3407;
                        float _4785 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3412 = 1.0 - _3382;
                        float _3422 = (0.5 / (((_3411 * ((_3397 * _3412) + _3382)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3382) * _3397))) * _3411;
                        float _4796 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3433 = (((_3383 * 3.1415927410125732421875) * (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) / ((_3405 * _3405) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125))) * _3337;
                        _3185 = (_3352 * _3300.x) + _3258;
                        _3186 = (_3352 * _3300.y) + _3259;
                        _3187 = (_3352 * _3300.z) + _3260;
                        _3182 = (_3433 * _3317.x) + _3255;
                        _3183 = (_3433 * _3317.y) + _3256;
                        _3184 = (_3433 * _3317.z) + _3257;
                        if (_3262 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3262;
                        }
                    }
                    frontier_phi_66_pred = _3182;
                    frontier_phi_66_pred_1 = _3187;
                    frontier_phi_66_pred_2 = _3186;
                    frontier_phi_66_pred_3 = _3185;
                    frontier_phi_66_pred_4 = _3184;
                    frontier_phi_66_pred_5 = _3183;
                }
                _2958 = frontier_phi_66_pred;
                _2968 = frontier_phi_66_pred_1;
                _2966 = frontier_phi_66_pred_2;
                _2964 = frontier_phi_66_pred_3;
                _2962 = frontier_phi_66_pred_4;
                _2960 = frontier_phi_66_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2958;
                    _3111 = _2960;
                    _3112 = _2962;
                    _3113 = _2964;
                    _3114 = _2966;
                    _3115 = _2968;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
        }
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.z;
        uint _2974 = (_2972 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2974) & _2856) == 0u)
        {
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
            float _3104 = _3103 * _2810;
            float _3105 = _3103 * _2811;
            float _3106 = _3103 * _2812;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2974 < ((_2972 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3238 = _2957;
                float _3239 = _2959;
                float _3240 = _2961;
                float _3241 = _2963;
                float _3242 = _2965;
                float _3243 = _2967;
                uint _3244 = _2974;
                uint _3253;
                bool _3254;
                for (;;)
                {
                    _3253 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                    _3254 = _3253 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3254)
                    {
                        frontier_phi_77_pred = _3243;
                        frontier_phi_77_pred_1 = _3242;
                        frontier_phi_77_pred_2 = _3241;
                        frontier_phi_77_pred_3 = _3240;
                        frontier_phi_77_pred_4 = _3239;
                        frontier_phi_77_pred_5 = _3238;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        uint _3466 = _3253;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3477 = ((_3244 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3477 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3477 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_2812, _3584.z, fma(_2811, _3584.y, _3584.x * _2810)) + _3584.w;
                            _3597 = !((fma(_2812, _3565.z, fma(_2811, _3565.y, _3565.x * _2810)) + _3565.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3492.x - _2810;
                                float _3625 = _3492.y - _2811;
                                float _3626 = _3492.z - _2812;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3493 * _3493));
                                float _4807 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3642 = sqrt(_3627) * _3508.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_1046, _1049, _1052))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_2812, _3535.z, fma(_2811, _3535.y, _3535.x * _2810)) + _3535.w) / _3596;
                                float _3656 = (fma(_2812, _3550.z, fma(_2811, _3550.y, _3550.x * _2810)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4823 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _1121;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3104;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_1046, _1049, _1052), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4834 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3699 = dot(vec3(_1046, _1049, _1052), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4845 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_1046, _1049, _1052), vec3(_3631, _3632, _3633))) + _3708;
                                float _4856 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4867 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3662 * _3508.y;
                                frontier_phi_83_pred_1 = _3662 * _3508.x;
                                frontier_phi_83_pred_2 = _3736 * _3520.z;
                                frontier_phi_83_pred_3 = _3736 * _3520.y;
                                frontier_phi_83_pred_4 = _3736 * _3520.x;
                                frontier_phi_83_pred_5 = _3662 * _3508.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_83_pred;
                            _3743 = frontier_phi_83_pred_1;
                            _3742 = frontier_phi_83_pred_2;
                            _3741 = frontier_phi_83_pred_3;
                            _3740 = frontier_phi_83_pred_4;
                            _3745 = frontier_phi_83_pred_5;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3452;
                        frontier_phi_77_pred_1 = _3451;
                        frontier_phi_77_pred_2 = _3450;
                        frontier_phi_77_pred_3 = _3449;
                        frontier_phi_77_pred_4 = _3448;
                        frontier_phi_77_pred_5 = _3447;
                    }
                    _3089 = frontier_phi_77_pred;
                    _3087 = frontier_phi_77_pred_1;
                    _3085 = frontier_phi_77_pred_2;
                    _3083 = frontier_phi_77_pred_3;
                    _3081 = frontier_phi_77_pred_4;
                    _3079 = frontier_phi_77_pred_5;
                    uint _3245 = _3244 + 1u;
                    if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3238 = _3079;
                        _3239 = _3081;
                        _3240 = _3083;
                        _3241 = _3085;
                        _3242 = _3087;
                        _3243 = _3089;
                        _3244 = _3245;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3083;
                frontier_phi_58_59_ladder_1 = _3089;
                frontier_phi_58_59_ladder_2 = _3087;
                frontier_phi_58_59_ladder_3 = _3085;
                frontier_phi_58_59_ladder_4 = _3081;
                frontier_phi_58_59_ladder_5 = _3079;
            }
            else
            {
                frontier_phi_58_59_ladder = _2961;
                frontier_phi_58_59_ladder_1 = _2967;
                frontier_phi_58_59_ladder_2 = _2965;
                frontier_phi_58_59_ladder_3 = _2963;
                frontier_phi_58_59_ladder_4 = _2959;
                frontier_phi_58_59_ladder_5 = _2957;
            }
            _3078 = frontier_phi_58_59_ladder_5;
            _3080 = frontier_phi_58_59_ladder_4;
            _3082 = frontier_phi_58_59_ladder;
            _3084 = frontier_phi_58_59_ladder_3;
            _3086 = frontier_phi_58_59_ladder_2;
            _3088 = frontier_phi_58_59_ladder_1;
        }
        float _3093 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2869 = (_3093 * _3084) + _2305;
        _2871 = (_3093 * _3086) + _2307;
        _2873 = (_3093 * _3088) + _2309;
        _2875 = ((_3078 * _1089) * _3093) + _2650;
        _2877 = ((_3080 * _1091) * _3093) + _2652;
        _2879 = ((_3082 * _1092) * _3093) + _2654;
    }
    else
    {
        _2869 = _2305;
        _2871 = _2307;
        _2873 = _2309;
        _2875 = _2650;
        _2877 = _2652;
        _2879 = _2654;
    }
    float _4883 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4894 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4905 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2896 = ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2869 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1105))) + ((_2875 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _2897 = ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2871 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1105))) + ((_2877 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _2898 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2873 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1105))) + ((_2879 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    uint _2899 = _265 + 6u;
    float _2907 = _1027 / cbSceneParam._m0[86u].x;
    float _2908 = _1028 / cbSceneParam._m0[86u].y;
    vec4 _2922 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2924 = _2922.x;
    float _2925 = _2922.y;
    float _2926 = _2922.z;
    float _2927 = _2922.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _2982 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _2983 = _2982 / _950;
        float _2994 = _2983 * _1000;
        float _2995 = _1001 * _2983;
        float _2996 = (-0.0) - _2995;
        float _2998 = _2983 * _1002;
        float _3000 = (cbSceneParam._m0[77u].w * _2996) / _2982;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2995;
        float _3008 = sqrt(((_2994 * _2994) + (_2995 * _2995)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2982)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_2996 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3141 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3195 = ((abs(_3008 / _2996) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3018 * _3150) - exp2(_3018 * _3151)) * _3139))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2927);
        _3020 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2924;
        _3022 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2925;
        _3024 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2926;
        _3026 = _3206 * _2927;
    }
    else
    {
        _3020 = _2924;
        _3022 = _2925;
        _3024 = _2926;
        _3026 = _2927;
    }
    bool _3233;
    vec4 _3036;
    vec4 _3058;
    float _3060;
    float _3064;
    float _3065;
    float _3066;
    float _3067;
    bool _3077;
    for (;;)
    {
        _3036 = cbMatDynParam._m0[0u];
        float _3038 = roundEven(_3036.y);
        bool _3039 = _3038 == 3.0;
        float _3040 = log2(_3026);
        float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * _2896;
        float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * _2897;
        float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * _2898;
        float _3056 = _1016 + (-0.5);
        _3058 = cbMtdParam._m0[1u];
        _3060 = _3058.y * _3056;
        float _3063 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3064 = _3063 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
        _3065 = _3063 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
        _3066 = _3063 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
        _3067 = _3056 * 0.999000012874603271484375;
        _3077 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3077)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3067) < 0.5)
            {
                _3233 = true;
                break;
            }
        }
        uint _3174 = _1065 + uint(_3036.w);
        if ((cbInstanceData._m0[_3174].w < 1.0) && ((cbInstanceData._m0[_3174].w + _3067) < 0.5))
        {
            _3233 = true;
            break;
        }
        if ((_3060 + 1.0) < _3058.x)
        {
            _3233 = true;
            break;
        }
        _3233 = false;
        break;
    }
    float _3438;
    if (_3233)
    {
        discard_state = true;
        _3438 = 0.0;
    }
    else
    {
        _3438 = cbInstanceData._m0[_2899].w;
    }
    SV_Target.x = _3064;
    SV_Target.y = _3065;
    SV_Target.z = _3066;
    SV_Target.w = _3438;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2899].w;
    discard_exit();
}


