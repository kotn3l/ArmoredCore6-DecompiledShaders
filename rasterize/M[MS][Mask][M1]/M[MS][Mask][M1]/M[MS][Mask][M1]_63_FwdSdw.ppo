#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1410;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4019 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4030 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4041 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _453 = (_446 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _454 = (_446 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _455 = (_446 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _538;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _446) + _606;
    float _616 = ((_587.y - _607) * _446) + _607;
    float _617 = ((_587.z - _608) * _446) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _519) + _617;
    float _645 = ((((_629.x - _615) * _519) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _519) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _4074 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _710 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_693 - _694) * cbMtdParam._m0[24u].z) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4085 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _718 = (_711 * (cbMtdParam._m0[17u].x - _545)) + _545;
    float _719 = (_711 * (cbMtdParam._m0[17u].y - _546)) + _546;
    float _720 = (_711 * (cbMtdParam._m0[17u].z - _547)) + _547;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _748) * _446) + _748;
    float _783 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _766) * _519) + _766;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _783) * cbMtdParam._m0[19u].z) + _783;
    float _789 = _787 - (_787 * _711);
    float _794 = (((_564.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _798 = ((_666.z - _794) * cbMtdParam._m0[19u].w) + _794;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _818 = (_811.x * 2.0) + (-1.0);
    float _819 = (_811.y * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _4096 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _828 = (_711 * (_811.z - _798)) + _798;
    float _837 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_564.x * 2.0) + (-1.0)))) + (((_666.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _838 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_564.y * 2.0) + (-1.0)))) + (((_666.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _850 = (((_818 - _837) + (cbMtdParam._m0[21u].x * _837)) * _711) + _837;
    float _851 = (((_819 - _838) + (cbMtdParam._m0[21u].x * _838)) * _711) + _838;
    float _852 = (_711 * (sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) - _652)) + _652;
    float _856 = cbMtdParam._m0[22u].x + _666.w;
    float _859 = fma(_852, _246 * NORMAL.x, fma(_851, _253 * TANGENT.x, (_239 * _231) * _850));
    float _862 = fma(_852, _246 * NORMAL.y, fma(_851, _253 * TANGENT.y, (_239 * _232) * _850));
    float _865 = fma(_852, _246 * NORMAL.z, fma(_851, _253 * TANGENT.z, (_239 * _233) * _850));
    float _869 = inversesqrt(dot(vec3(_859, _862, _865), vec3(_859, _862, _865)));
    float _870 = _869 * _859;
    float _871 = _869 * _862;
    float _872 = _869 * _865;
    float _4107 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _873 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4129 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4140 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4151 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4162 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _878 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _943 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _933);
    float _944 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _933);
    float _945 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _933);
    float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
    float _950 = _943 * _949;
    float _951 = _944 * _949;
    float _952 = _945 * _949;
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_872, cbSceneParam._m0[5u].z, fma(_871, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _870));
    float _980 = fma(_872, cbSceneParam._m0[6u].z, fma(_871, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _870));
    float _983 = fma(_872, cbSceneParam._m0[7u].z, fma(_871, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _870));
    uint _997 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4173 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _1009 = 1.0 - _878;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _878;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _878;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _878;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_870, _871, _872), vec3(_950, _951, _952));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _870) - _950;
    float _1045 = (_1040 * _871) - _951;
    float _1046 = (_1040 * _872) - _952;
    float _1050 = abs(dot(vec3(_950, _951, _952), vec3(_870, _871, _872)));
    float _4206 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_873);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1052;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1138 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1142 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1167 = _1100 + _870;
        float _1168 = _1104 + _871;
        float _1169 = _1108 + _872;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_870, _871, _872), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4254 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_870, _871, _872), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4287 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_870, _871, _872), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4320 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1452 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1456 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1479 = _1100 + _870;
        float _1480 = _1104 + _871;
        float _1481 = _1108 + _872;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_870, _871, _872), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4383 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_870, _871, _872), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4416 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_870, _871, _872), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4449 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1410;
        _1718 = _1410;
        _1719 = _1410;
        _1720 = _1410;
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1422)) + _1422;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1423)) + _1423;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1424)) + _1424;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1044 * 0.5;
    float _1786 = _1045 * 0.5;
    float _1787 = _1046 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _873);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1916 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1919 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1947 = frontier_phi_14_12_ladder;
        }
        float _2119;
        if (_1916 > 0.0)
        {
            _2119 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2119 = frontier_phi_23_19_ladder;
        }
        float _2414;
        if (_1919 > 0.0)
        {
            _2414 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2414 = frontier_phi_35_30_ladder;
        }
        float _2416 = isnan(_2119) ? _1947 : (isnan(_1947) ? _2119 : min(_1947, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1913) + _1902;
        float _2422 = (_2417 * _1916) + _1906;
        float _2423 = (_2417 * _1919) + _1910;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_13_35_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_13_35_ladder_2;
        _1937 = frontier_phi_13_35_ladder_1;
        _1939 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1854);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _873);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2012 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2015 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2124;
        if (_2009 > 0.0)
        {
            _2124 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2124 = frontier_phi_25_21_ladder;
        }
        float _2441;
        if (_2012 > 0.0)
        {
            _2441 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2441 = frontier_phi_37_32_ladder;
        }
        float _2779;
        if (_2015 > 0.0)
        {
            _2779 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2779 = frontier_phi_47_44_ladder;
        }
        float _2781 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2009) + _1998;
        float _2787 = (_2782 * _2012) + _2002;
        float _2788 = (_2782 * _2015) + _2006;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_22_47_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_22_47_ladder_2;
        _2036 = frontier_phi_22_47_ladder_1;
        _2038 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1944);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1071 * _1020) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2034 - _1935)) + _1935);
    float _2053 = (((_1071 * _1022) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2036 - _1937)) + _1937);
    float _2055 = (((_1071 * _1023) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2038 - _1939)) + _1939);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_34_33_ladder_1 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_34_33_ladder_2 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
        }
        else
        {
            frontier_phi_34_33_ladder = _2262;
            frontier_phi_34_33_ladder_1 = _2261;
            frontier_phi_34_33_ladder_2 = _2260;
        }
        _2326 = frontier_phi_34_33_ladder_2;
        _2328 = frontier_phi_34_33_ladder_1;
        _2330 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1036 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_870, _871, _872));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_870, _871, _872));
    float _4627 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4638 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4649 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2750 = _2337 + 7u;
        float _2766 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4665 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2769 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2515;
        _2579 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2517;
        _2581 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _873) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _950;
    float _2600 = cbLight._m0[_2337].y + _951;
    float _2601 = cbLight._m0[_2337].z + _952;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2337].xyz));
    float _4681 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2613 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2614 = dot(vec3(_870, _871, _872), vec3(_2606, _2607, _2608));
    float _4703 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4714 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2635 = 0.959999978542327880859375 - _1017;
    float _2637 = 0.959999978542327880859375 - _1018;
    float _2638 = 0.959999978542327880859375 - _1019;
    float _2645 = 1.0 - _2598;
    float _2656 = (0.5 / (((_2613 * ((_2612 * _2645) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2645) + _2598) * _2612))) * _2612;
    float _4725 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2672 = _2337 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _873) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2377].x + _950;
    float _2686 = cbLight._m0[_2377].y + _951;
    float _2687 = cbLight._m0[_2377].z + _952;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2377].xyz));
    float _4736 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2699 = dot(vec3(_870, _871, _872), vec3(_2692, _2693, _2694));
    float _4747 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2692, _2693, _2694));
    float _4758 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2725 = 1.0 - _2684;
    float _2735 = (0.5 / (((_2613 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2725) + _2684) * _2698))) * _2698;
    float _4769 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2747 = (((((_2718 * _2635) + _1020) * cbLight._m0[_2672].x) * _2737) * _2360) + ((((cbLight._m0[_2584].x * _2326) * ((_2634 * _2635) + _1020)) * _2658) * _2373);
    float _2748 = (((((_2718 * _2637) + _1022) * cbLight._m0[_2672].y) * _2737) * _2360) + ((((cbLight._m0[_2584].y * _2328) * ((_2634 * _2637) + _1022)) * _2658) * _2373);
    float _2749 = (((((_2718 * _2638) + _1023) * cbLight._m0[_2672].z) * _2737) * _2360) + ((((cbLight._m0[_2584].z * _2330) * ((_2634 * _2638) + _1023)) * _2658) * _2373);
    float _2805;
    float _2807;
    float _2809;
    if (_2413)
    {
        _2805 = _2747;
        _2807 = _2748;
        _2809 = _2749;
    }
    else
    {
        uint _2811 = _2337 + 2u;
        uint _2815 = _2337 + 10u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _873) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _950;
        float _2832 = cbLight._m0[_2811].y + _951;
        float _2833 = cbLight._m0[_2811].z + _952;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2811].xyz));
        float _4780 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2845 = dot(vec3(_870, _871, _872), vec3(_2838, _2839, _2840));
        float _4791 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4802 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2613 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2871) + _2830) * _2844))) * _2844;
        float _4813 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2805 = (((((_2864 * _2635) + _1020) * cbLight._m0[_2815].x) * _2883) * _2884) + _2747;
        _2807 = (((((_2864 * _2637) + _1022) * cbLight._m0[_2815].y) * _2883) * _2884) + _2748;
        _2809 = (((((_2864 * _2638) + _1023) * cbLight._m0[_2815].z) * _2883) * _2884) + _2749;
    }
    float _2915;
    float _2917;
    float _2919;
    if (_2522)
    {
        _2915 = _2805;
        _2917 = _2807;
        _2919 = _2809;
    }
    else
    {
        uint _2926 = _2337 + 3u;
        uint _2930 = _2337 + 11u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _873) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _950;
        float _2947 = cbLight._m0[_2926].y + _951;
        float _2948 = cbLight._m0[_2926].z + _952;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2926].xyz));
        float _4829 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2960 = dot(vec3(_870, _871, _872), vec3(_2953, _2954, _2955));
        float _4840 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _4851 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2613 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2986) + _2945) * _2959))) * _2959;
        float _4862 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2915 = (((((_2979 * _2635) + _1020) * cbLight._m0[_2930].x) * _2998) * _2999) + _2805;
        _2917 = (((((_2979 * _2637) + _1022) * cbLight._m0[_2930].y) * _2998) * _2999) + _2807;
        _2919 = (((((_2979 * _2638) + _1023) * cbLight._m0[_2930].z) * _2998) * _2999) + _2809;
    }
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_2335.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _3021)));
        float _3042 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            uint _3283 = 0u;
            uint _3292;
            bool _3293;
            for (;;)
            {
                _3292 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                _3293 = _3292 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3293)
                {
                    frontier_phi_66_pred = _3282;
                    frontier_phi_66_pred_1 = _3281;
                    frontier_phi_66_pred_2 = _3280;
                    frontier_phi_66_pred_3 = _3279;
                    frontier_phi_66_pred_4 = _3278;
                    frontier_phi_66_pred_5 = _3277;
                }
                else
                {
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    uint _3407;
                    _3401 = _3277;
                    _3402 = _3278;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3292;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    for (;;)
                    {
                        uint _3411 = uint(findLSB(_3407)) + (_3283 << 5u);
                        uint _3408 = (_3407 + 4294967295u) & _3407;
                        uint _3413 = _3411 * 48u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3433 = (_3411 * 48u) + 4u;
                        vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3452 = (_3411 * 48u) + 8u;
                        vec3 _3463 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x));
                        float _3467 = _3427.x - _2111;
                        float _3468 = _3427.y - _2112;
                        float _3469 = _3427.z - _2113;
                        float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                        float _3473 = inversesqrt(_3470);
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3477 = dot(vec3(_977, _980, _983), vec3(_3474, _3475, _3476));
                        float _3482 = 1.0 - (_3470 * _3427.w);
                        float _4888 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3484 = sqrt(_3470) * _3446.w;
                        float _3487 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3477) + _3488;
                        float _3494 = _3484 * _3484;
                        float _3498 = ((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3483) / ((_3494 * 0.699999988079071044921875) + 1.0);
                        float _3502 = (-0.0) - _2111;
                        float _3503 = (-0.0) - _2112;
                        float _3504 = (-0.0) - _2113;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3518 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                        float _3519 = 1.0 - _1052;
                        float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                        float _3527 = _3526 * _3526;
                        float _3528 = _3527 * _3527;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3531 = _3511 + _3476;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3539 = dot(vec3(_977, _980, _983), vec3(_3509, _3510, _3511));
                        float _4904 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3543 = dot(vec3(_977, _980, _983), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                        float _4915 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                        float _3551 = _3487 * _3527;
                        float _3552 = _3551 * _3551;
                        float _3555 = ((1.0 - _3552) * _3477) + _3552;
                        float _4926 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3556 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3557 = 1.0 - _3527;
                        float _3567 = (0.5 / (((_3556 * ((_3542 * _3557) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3527) * _3542))) * _3556;
                        float _4937 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3578 = (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3550 * _3550) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125))) * _3483;
                        _3336 = (_3498 * _3446.x) + _3404;
                        _3337 = (_3498 * _3446.y) + _3405;
                        _3338 = (_3498 * _3446.z) + _3406;
                        _3333 = (_3578 * _3463.x) + _3401;
                        _3334 = (_3578 * _3463.y) + _3402;
                        _3335 = (_3578 * _3463.z) + _3403;
                        if (_3408 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3401 = _3333;
                            _3402 = _3334;
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3408;
                        }
                    }
                    frontier_phi_66_pred = _3338;
                    frontier_phi_66_pred_1 = _3337;
                    frontier_phi_66_pred_2 = _3336;
                    frontier_phi_66_pred_3 = _3335;
                    frontier_phi_66_pred_4 = _3334;
                    frontier_phi_66_pred_5 = _3333;
                }
                _3143 = frontier_phi_66_pred;
                _3141 = frontier_phi_66_pred_1;
                _3139 = frontier_phi_66_pred_2;
                _3137 = frontier_phi_66_pred_3;
                _3135 = frontier_phi_66_pred_4;
                _3133 = frontier_phi_66_pred_5;
                uint _3284 = _3283 + 1u;
                if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3277 = _3133;
                    _3278 = _3135;
                    _3279 = _3137;
                    _3280 = _3139;
                    _3281 = _3141;
                    _3282 = _3143;
                    _3283 = _3284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((4294967295u << _3149) & _3052) == 0u)
        {
            _3245 = _3132;
            _3247 = _3134;
            _3249 = _3136;
            _3251 = _3138;
            _3253 = _3140;
            _3255 = _3142;
        }
        else
        {
            float _3270 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3271 = _3270 * _2111;
            float _3272 = _3270 * _2112;
            float _3273 = _3270 * _2113;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3384 = _3132;
                float _3385 = _3134;
                float _3386 = _3136;
                float _3387 = _3138;
                float _3388 = _3140;
                float _3389 = _3142;
                uint _3390 = _3149;
                uint _3399;
                bool _3400;
                for (;;)
                {
                    _3399 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                    _3400 = _3399 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3400)
                    {
                        frontier_phi_72_pred = _3389;
                        frontier_phi_72_pred_1 = _3388;
                        frontier_phi_72_pred_2 = _3387;
                        frontier_phi_72_pred_3 = _3386;
                        frontier_phi_72_pred_4 = _3385;
                        frontier_phi_72_pred_5 = _3384;
                    }
                    else
                    {
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3596 = _3384;
                        float _3597 = _3385;
                        float _3598 = _3386;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        uint _3602 = _3399;
                        uint _3603;
                        vec4 _3628;
                        float _3629;
                        vec4 _3644;
                        vec3 _3656;
                        vec4 _3671;
                        vec4 _3686;
                        float _3732;
                        bool _3733;
                        for (;;)
                        {
                            uint _3613 = ((_3390 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3602));
                            _3603 = (_3602 + 4294967295u) & _3602;
                            uint _3615 = _3613 * 40u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3629 = _3628.w;
                            uint _3631 = (_3613 * 40u) + 4u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3613 * 40u) + 8u;
                            _3656 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x));
                            uint _3658 = (_3613 * 40u) + 16u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3613 * 40u) + 20u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3613 * 40u) + 24u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3707 = (_3613 * 40u) + 28u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            _3732 = fma(_2113, _3720.z, fma(_2112, _3720.y, _3720.x * _2111)) + _3720.w;
                            _3733 = !((fma(_2113, _3701.z, fma(_2112, _3701.y, _3701.x * _2111)) + _3701.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3733)
                            {
                                float _3760 = _3628.x - _2111;
                                float _3761 = _3628.y - _2112;
                                float _3762 = _3628.z - _2113;
                                float _3763 = dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762));
                                float _3766 = inversesqrt(_3763);
                                float _3767 = _3766 * _3760;
                                float _3768 = _3766 * _3761;
                                float _3769 = _3766 * _3762;
                                float _3773 = 1.0 - (_3763 / (_3629 * _3629));
                                float _4948 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3778 = sqrt(_3763) * _3644.w;
                                float _3780 = 1.39999997615814208984375 / (_3778 + 1.39999997615814208984375);
                                float _3781 = _3780 * _3780;
                                float _3784 = ((1.0 - _3781) * dot(vec3(_3767, _3768, _3769), vec3(_977, _980, _983))) + _3781;
                                float _3787 = _3778 * _3778;
                                float _3791 = (fma(_2113, _3671.z, fma(_2112, _3671.y, _3671.x * _2111)) + _3671.w) / _3732;
                                float _3792 = (fma(_2113, _3686.z, fma(_2112, _3686.y, _3686.x * _2111)) + _3686.w) / _3732;
                                float _3796 = 1.0 - dot(vec2(_3791, _3792), vec2(_3791, _3792));
                                float _4964 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3798 = _3797 * (((isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0))) * _3774) / ((_3787 * 0.699999988079071044921875) + 1.0));
                                float _3810 = exp2(log2(1.0 / ((_3787 * 3.5) + 5.0)) * 0.25);
                                float _3811 = 1.0 - _1052;
                                float _3818 = sqrt(1.0 - ((1.0 - (_3811 * _3811)) * (1.0 - (_3810 * _3810))));
                                float _3819 = _3818 * _3818;
                                float _3820 = _3819 * _3819;
                                float _3821 = _3767 - _3271;
                                float _3822 = _3768 - _3272;
                                float _3823 = _3769 - _3273;
                                float _3827 = inversesqrt(dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823)));
                                float _3831 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3271, (-0.0) - _3272, (-0.0) - _3273));
                                float _4975 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3835 = dot(vec3(_977, _980, _983), vec3(_3827 * _3821, _3827 * _3822, _3827 * _3823));
                                float _4986 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3838 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3842 = ((_3838 * _3838) * (_3820 + (-1.0))) + 1.0;
                                float _3843 = _3780 * _3819;
                                float _3844 = _3843 * _3843;
                                float _3850 = ((1.0 - _3844) * dot(vec3(_977, _980, _983), vec3(_3767, _3768, _3769))) + _3844;
                                float _4997 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3852 = 1.0 - _3819;
                                float _3862 = (0.5 / (((_3851 * ((_3834 * _3852) + _3819)) + 9.9999999392252902907785028219223e-09) + (((_3851 * _3852) + _3819) * _3834))) * _3851;
                                float _5008 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3872 = (_3797 * _3774) * (((_3820 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3842 * _3842) * ((_3787 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3798 * _3644.y;
                                frontier_phi_78_pred_1 = _3798 * _3644.x;
                                frontier_phi_78_pred_2 = _3872 * _3656.z;
                                frontier_phi_78_pred_3 = _3872 * _3656.y;
                                frontier_phi_78_pred_4 = _3872 * _3656.x;
                                frontier_phi_78_pred_5 = _3798 * _3644.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3880 = frontier_phi_78_pred;
                            _3879 = frontier_phi_78_pred_1;
                            _3878 = frontier_phi_78_pred_2;
                            _3877 = frontier_phi_78_pred_3;
                            _3876 = frontier_phi_78_pred_4;
                            _3881 = frontier_phi_78_pred_5;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            if (_3603 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3603;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3588;
                        frontier_phi_72_pred_1 = _3587;
                        frontier_phi_72_pred_2 = _3586;
                        frontier_phi_72_pred_3 = _3585;
                        frontier_phi_72_pred_4 = _3584;
                        frontier_phi_72_pred_5 = _3583;
                    }
                    _3256 = frontier_phi_72_pred;
                    _3254 = frontier_phi_72_pred_1;
                    _3252 = frontier_phi_72_pred_2;
                    _3250 = frontier_phi_72_pred_3;
                    _3248 = frontier_phi_72_pred_4;
                    _3246 = frontier_phi_72_pred_5;
                    uint _3391 = _3390 + 1u;
                    if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3384 = _3246;
                        _3385 = _3248;
                        _3386 = _3250;
                        _3387 = _3252;
                        _3388 = _3254;
                        _3389 = _3256;
                        _3390 = _3391;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3256;
                frontier_phi_60_61_ladder_1 = _3254;
                frontier_phi_60_61_ladder_2 = _3250;
                frontier_phi_60_61_ladder_3 = _3248;
                frontier_phi_60_61_ladder_4 = _3246;
                frontier_phi_60_61_ladder_5 = _3252;
            }
            else
            {
                frontier_phi_60_61_ladder = _3142;
                frontier_phi_60_61_ladder_1 = _3140;
                frontier_phi_60_61_ladder_2 = _3136;
                frontier_phi_60_61_ladder_3 = _3134;
                frontier_phi_60_61_ladder_4 = _3132;
                frontier_phi_60_61_ladder_5 = _3138;
            }
            _3245 = frontier_phi_60_61_ladder_4;
            _3247 = frontier_phi_60_61_ladder_3;
            _3249 = frontier_phi_60_61_ladder_2;
            _3251 = frontier_phi_60_61_ladder_5;
            _3253 = frontier_phi_60_61_ladder_1;
            _3255 = frontier_phi_60_61_ladder;
        }
        float _3260 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _3065 = (_3260 * _3251) + _2577;
        _3067 = (_3260 * _3253) + _2579;
        _3069 = (_3260 * _3255) + _2581;
        _3071 = ((_3245 * _1020) * _3260) + _2915;
        _3073 = ((_3247 * _1022) * _3260) + _2917;
        _3075 = ((_3249 * _1023) * _3260) + _2919;
    }
    else
    {
        _3065 = _2577;
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2915;
        _3073 = _2917;
        _3075 = _2919;
    }
    float _5024 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _5035 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _5046 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    uint _3095 = _280 + 6u;
    float _3103 = _958 / cbSceneParam._m0[86u].x;
    float _3104 = _959 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _3158 = _3157 / _892;
        float _3169 = _3158 * _943;
        float _3170 = _944 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3173 = _3158 * _945;
        float _3175 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3176 = _3175 + cbSceneParam._m0[79u].w;
        float _3177 = cbSceneParam._m0[79u].w - _3170;
        float _3183 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3173 * _3173));
        float _3186 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3183;
        float _3191 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3193 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3346;
        if (abs((_3171 - _3175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3346 = ((((_3176 > 0.0) ? exp2(_3191 * _3176) : (2.0 - exp2(_3193 * _3176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3186;
        }
        else
        {
            float _3306 = 1.0 / cbSceneParam._m0[80u].x;
            float _3307 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : max(_3176, _3177));
            float _3308 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : min(_3176, _3177));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            _3346 = ((abs(_3183 / _3171) * cbSceneParam._m0[80u].y) * ((((_3317 - _3318) * 2.0) - ((exp2(_3191 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0)))) - exp2(_3191 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))))) * _3306)) - ((exp2(_3193 * _3317) - exp2(_3193 * _3318)) * _3306))) + (_3186 * cbSceneParam._m0[80u].z);
        }
        vec4 _3348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3357 = exp2((_3346 * (-1.44269502162933349609375)) * (1.0 - _3348.w));
        float _3358 = log2(_3357);
        float _3374 = log2(_3123);
        _3195 = (exp2(_3374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].x)) * _3348.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3197 = (exp2(_3374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].y)) * _3348.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3199 = (exp2(_3374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].z)) * _3348.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3201 = _3357 * _3123;
    }
    else
    {
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
        _3201 = _3123;
    }
    float _3213 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3214 = _3213 == 3.0;
    float _3215 = log2(_3201);
    float _3222 = exp2(_3215 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3065 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1036))) + ((_3071 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _3223 = exp2(_3215 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3067 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1036))) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _3224 = exp2(_3215 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3069 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1036))) + ((_3075 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _3233 = (_3213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3233 * (_3214 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.y = _3233 * (_3214 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.z = _3233 * (_3214 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3199)));
    SV_Target.w = cbInstanceData._m0[_3095].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
}


