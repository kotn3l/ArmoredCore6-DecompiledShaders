#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1693;
float _4093;
float _4094;
float _4095;
float _4096;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _256 = _255 * _247;
    float _257 = _255 * _248;
    float _258 = _255 * _249;
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = _262 * NORMAL.x;
    float _264 = _262 * NORMAL.y;
    float _265 = _262 * NORMAL.z;
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = _269 * TANGENT.x;
    float _271 = _269 * TANGENT.y;
    float _272 = _269 * TANGENT.z;
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _289 = cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x;
    float _291 = cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x;
    float _293 = sqrt((_289 + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + _291);
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4105 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _461 = (_454 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _462 = (_454 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _463 = (_454 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[23u].w) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4116 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _383.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[23u].w) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4127 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _610 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _314.x) * ((_597 * ((_555.x * cbMtdParam._m0[14u].x) - _534)) + _534);
    float _613 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _314.y) * ((_597 * ((_555.y * cbMtdParam._m0[14u].y) - _535)) + _535);
    float _616 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _314.z) * ((_597 * ((_555.z * cbMtdParam._m0[14u].z) - _536)) + _536);
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    float _682 = ((_654.x - _673) * _454) + _673;
    float _683 = ((_654.y - _674) * _454) + _674;
    float _684 = ((_654.z - _675) * _454) + _675;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _707 = ((_696.x - _682) * _527) + _682;
    float _708 = ((_696.y - _683) * _527) + _683;
    float _709 = ((_696.z - _684) * _527) + _684;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _734 = ((_721.z - _709) * _597) + _709;
    float _737 = ((((_721.x - _707) * _597) + _707) * 2.0) + (-1.0);
    float _739 = ((((_721.y - _708) * _597) + _708) * 2.0) + (-1.0);
    float _740 = dot(vec2(_737, _739), vec2(_737, _739));
    float _4138 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _771 = (((_759.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _772 = (((_759.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _739;
    float _775 = fma(_745, _263, fma(_772, _270, _771 * _256));
    float _778 = fma(_745, _264, fma(_772, _271, _771 * _257));
    float _781 = fma(_745, _265, fma(_772, _272, _771 * _258));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    vec4 _812 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _814 = _812.x;
    float _815 = 1.0 - _814;
    float _823 = (cbMtdParam._m0[19u].x + dot(vec4(_785 * _775, _785 * _778, _785 * _781, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_814 - _815) * cbMtdParam._m0[24u].z) + _815) * cbMtdParam._m0[21u].z);
    float _4149 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _826 = (-0.0) - cbMtdParam._m0[24u].x;
    float _828 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
    float _836 = _824 - ((_824 * TEXCOORD_8.x) * _829);
    float _837 = _824 - ((_824 * TEXCOORD_8.y) * _829);
    float _838 = _824 - ((_824 * TEXCOORD_8.z) * _829);
    float _845 = (_836 * ((_634.x * cbMtdParam._m0[18u].x) - _610)) + _610;
    float _846 = (_837 * ((_634.y * cbMtdParam._m0[18u].y) - _613)) + _613;
    float _847 = (_838 * ((_634.z * cbMtdParam._m0[18u].z) - _616)) + _616;
    float _854 = sqrt((_289 + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + _291);
    float _855 = _854 * TEXCOORD.z;
    float _856 = _854 * TEXCOORD.w;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _855) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _856) + cbTextureTilingScale._m0[19u].w));
    float _870 = _868.x;
    float _871 = 1.0 - _870;
    float _897 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_870 - _871) * cbMtdParam._m0[24u].w) + _871) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4170 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _898 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _906 = ((((cbMtdParam._m0[10u].x - _845) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _898) + _845;
    float _907 = ((((cbMtdParam._m0[10u].y - _846) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _898) + _846;
    float _908 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _847)) * _898) + _847;
    vec4 _934 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _936 = _934.x;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _936) * _454) + _936;
    float _970 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _953) * _527) + _953;
    float _987 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _970) * _597) + _970;
    float _991 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _987) * cbMtdParam._m0[19u].z) + _987;
    float _993 = _991 - (_991 * _836);
    float _995 = _993 - (_993 * _898);
    float _999 = (cbMtdParam._m0[19u].w * (_759.z - _734)) + _734;
    vec4 _1015 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _1022 = (_1015.x * 2.0) + (-1.0);
    float _1023 = (_1015.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4181 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1032 = ((_1015.z - _999) * _836) + _999;
    float _1035 = ((cbMtdParam._m0[23u].x - _1032) * _898) + _1032;
    vec4 _1058 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _855) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _856) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1064 = (_1058.x * 2.0) + (-1.0);
    float _1065 = (_1058.y * 2.0) + (-1.0);
    float _1066 = dot(vec2(_1064, _1065), vec2(_1064, _1065));
    float _4192 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1081 = ((sqrt(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) - _745) * _838) + _745;
    float _1084 = (((_1022 - _771) * _836) + _771) + (cbMtdParam._m0[21u].x * _771);
    float _1085 = (((_1023 - _772) * _837) + _772) + (cbMtdParam._m0[21u].x * _772);
    float _1096 = (((_1064 - _1084) + (_1084 * cbMtdParam._m0[22u].z)) * _898) + _1084;
    float _1097 = (((_1065 - _1085) + (_1085 * cbMtdParam._m0[22u].z)) * _898) + _1085;
    float _1098 = (_898 * (sqrt(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) - _1081)) + _1081;
    float _1100 = cbMtdParam._m0[22u].x + _759.w;
    float _1103 = fma(_1098, _263, fma(_1097, _270, _1096 * _256));
    float _1106 = fma(_1098, _264, fma(_1097, _271, _1096 * _257));
    float _1109 = fma(_1098, _265, fma(_1097, _272, _1096 * _258));
    float _1113 = inversesqrt(dot(vec3(_1103, _1106, _1109), vec3(_1103, _1106, _1109)));
    float _1114 = _1113 * _1103;
    float _1115 = _1113 * _1106;
    float _1116 = _1113 * _1109;
    float _4203 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1117 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4225 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4236 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4247 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4258 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1122 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _1136 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1186 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1176);
    float _1187 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1176);
    float _1188 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1176);
    float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
    float _1193 = _1186 * _1192;
    float _1194 = _1187 * _1192;
    float _1195 = _1188 * _1192;
    vec4 _1200 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1202 = _1200.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1374 = sqrt(((_1186 * _1186) + (_1187 * _1187)) + (_1188 * _1188));
        float _1380 = (cbMatDynParam._m0[5u].x * _1374) + cbMatDynParam._m0[5u].y;
        float _4269 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1385 = (cbMatDynParam._m0[5u].z * _1374) + cbMatDynParam._m0[5u].w;
        float _4280 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) - _1381)) + _1381) < ((_1202 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1213 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1214 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1232 = fma(_1116, cbSceneParam._m0[5u].z, fma(_1115, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1114));
    float _1235 = fma(_1116, cbSceneParam._m0[6u].z, fma(_1115, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1114));
    float _1238 = fma(_1116, cbSceneParam._m0[7u].z, fma(_1115, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1114));
    uint _1251 = _275 + 9u;
    uint _1252 = _1251 + uint(cbMatDynParam._m0[0u].w);
    float _1258 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1252].x;
    float _1259 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * cbInstanceData._m0[_1252].y;
    float _1260 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * cbInstanceData._m0[_1252].z;
    float _4291 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1261 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1262 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _4313 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1263 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _1264 = 1.0 - _1122;
    float _1265 = _1261 * _1264;
    float _1266 = _1262 * _1264;
    float _1267 = _1263 * _1264;
    float _1272 = (_1261 + (-0.039999999105930328369140625)) * _1122;
    float _1273 = (_1262 + (-0.039999999105930328369140625)) * _1122;
    float _1274 = (_1263 + (-0.039999999105930328369140625)) * _1122;
    float _1275 = _1272 + 0.039999999105930328369140625;
    float _1277 = _1273 + 0.039999999105930328369140625;
    float _1278 = _1274 + 0.039999999105930328369140625;
    vec4 _1287 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1213, cbSceneParam._m0[86u].y * _1214));
    float _1291 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * TEXCOORD_5.w) * _1287.x;
    float _1292 = dot(vec3(_1114, _1115, _1116), vec3(_1193, _1194, _1195));
    float _1295 = _1292 * 2.0;
    float _1299 = (_1295 * _1114) - _1193;
    float _1300 = (_1295 * _1115) - _1194;
    float _1301 = (_1295 * _1116) - _1195;
    float _1305 = abs(dot(vec3(_1193, _1194, _1195), vec3(_1114, _1115, _1116)));
    float _4324 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _1307 = sqrt(_1117);
    float _1320 = exp2((_1307 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1307 * 3.0));
    float _1326 = (1.0 - _1320) * ((_1307 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1327 = _1320 * _1307;
    float _1355 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1359 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1363 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1692;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1417 = fma(_1363, cbModelParam._m0[26u].z, fma(_1359, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1355));
        float _1421 = fma(_1363, cbModelParam._m0[27u].z, fma(_1359, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1355));
        float _1425 = fma(_1363, cbModelParam._m0[28u].z, fma(_1359, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1355));
        float _1450 = _1355 + _1114;
        float _1451 = _1359 + _1115;
        float _1452 = _1363 + _1116;
        float _1462 = fma(_1452, cbModelParam._m0[26u].z, fma(_1451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1450)) - _1417;
        float _1463 = fma(_1452, cbModelParam._m0[27u].z, fma(_1451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1450)) - _1421;
        float _1464 = fma(_1452, cbModelParam._m0[28u].z, fma(_1451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1450)) - _1425;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1417 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1421 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[34u].z) + ((((((_1425 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1520 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1486.x + (-0.5));
        float _1522 = _1520 * (_1486.y + (-0.5));
        float _1523 = _1520 * (_1486.z + (-0.5));
        float _1530 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1493.x + (-0.5));
        float _1532 = _1530 * (_1493.y + (-0.5));
        float _1533 = _1530 * (_1493.z + (-0.5));
        float _1540 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1500.x + (-0.5));
        float _1542 = _1540 * (_1500.y + (-0.5));
        float _1543 = _1540 * (_1500.z + (-0.5));
        float _1550 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1507.x + (-0.5));
        float _1552 = _1550 * (_1507.y + (-0.5));
        float _1553 = _1550 * (_1507.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1574 = (dot(vec3(_1114, _1115, _1116), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1584 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4372 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1586 + 1.0))) + _1591) * _1554;
        float _1601 = _1522 * 0.5;
        float _1602 = _1532 * 0.5;
        float _1603 = _1542 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1114, _1115, _1116), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4405 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1628 + 1.0))) + _1633) * _1555;
        float _1643 = _1523 * 0.5;
        float _1644 = _1533 * 0.5;
        float _1645 = _1543 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_1114, _1115, _1116), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4438 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1670 + 1.0))) + _1675) * _1556;
        _1692 = _1523;
        _1694 = _1522;
        _1695 = _1521;
        _1696 = _1533;
        _1697 = _1532;
        _1698 = _1531;
        _1699 = _1543;
        _1700 = _1542;
        _1701 = _1541;
        _1702 = _1556;
        _1703 = _1555;
        _1704 = _1554;
        _1705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1706 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1693;
        _1694 = _1693;
        _1695 = _1693;
        _1696 = _1693;
        _1697 = _1693;
        _1698 = _1693;
        _1699 = _1693;
        _1700 = _1693;
        _1701 = _1693;
        _1702 = _1693;
        _1703 = _1693;
        _1704 = _1693;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _2002;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1733 = fma(_1363, cbModelParam._m0[30u].z, fma(_1359, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355));
        float _1737 = fma(_1363, cbModelParam._m0[31u].z, fma(_1359, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355));
        float _1741 = fma(_1363, cbModelParam._m0[32u].z, fma(_1359, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355));
        float _1764 = _1355 + _1114;
        float _1765 = _1359 + _1115;
        float _1766 = _1363 + _1116;
        float _1776 = fma(_1766, cbModelParam._m0[30u].z, fma(_1765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1764)) - _1733;
        float _1777 = fma(_1766, cbModelParam._m0[31u].z, fma(_1765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1764)) - _1737;
        float _1778 = fma(_1766, cbModelParam._m0[32u].z, fma(_1765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1764)) - _1741;
        float _1782 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
        float _1795 = ((_1782 * _1776) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1733 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1796 = ((_1782 * _1777) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1737 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1797 = ((_1782 * _1778) / cbModelParam._m0[35u].z) + ((((((_1741 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1799 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1795, _1796, _1797), 0.0);
        vec4 _1806 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1795, _1796, _1797), 0.0);
        vec4 _1813 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1795, _1796, _1797), 0.0);
        vec4 _1820 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1795, _1796, _1797), 0.0);
        float _1832 = exp2((_1799.w + (-0.5)) * 20.0) * 2.0;
        float _1833 = _1832 * (_1799.x + (-0.5));
        float _1834 = _1832 * (_1799.y + (-0.5));
        float _1835 = _1832 * (_1799.z + (-0.5));
        float _1842 = exp2((_1806.w + (-0.5)) * 20.0) * 2.0;
        float _1843 = _1842 * (_1806.x + (-0.5));
        float _1844 = _1842 * (_1806.y + (-0.5));
        float _1845 = _1842 * (_1806.z + (-0.5));
        float _1852 = exp2((_1813.w + (-0.5)) * 20.0) * 2.0;
        float _1853 = _1852 * (_1813.x + (-0.5));
        float _1854 = _1852 * (_1813.y + (-0.5));
        float _1855 = _1852 * (_1813.z + (-0.5));
        float _1862 = exp2((_1820.w + (-0.5)) * 20.0) * 2.0;
        float _1863 = _1862 * (_1820.x + (-0.5));
        float _1864 = _1862 * (_1820.y + (-0.5));
        float _1865 = _1862 * (_1820.z + (-0.5));
        float _1866 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1867 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1868 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1869 = _1833 * 0.5;
        float _1870 = _1843 * 0.5;
        float _1871 = _1853 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1114, _1115, _1116), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1866 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4501 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1896 + 1.0))) + _1901) * _1866;
        float _1911 = _1834 * 0.5;
        float _1912 = _1844 * 0.5;
        float _1913 = _1854 * 0.5;
        float _1914 = dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913));
        float _1919 = (_1914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1914);
        float _1927 = (dot(vec3(_1114, _1115, _1116), vec3(_1919 * _1911, _1919 * _1912, _1919 * _1913)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1936 = sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913)) / (_1867 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1938 = _1937 * 2.0;
        float _1942 = (1.0 - _1937) / (_1937 + 1.0);
        float _4534 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1952 = ((((1.0 - _1943) * (_1938 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1938 + 1.0))) + _1943) * _1867;
        float _1953 = _1835 * 0.5;
        float _1954 = _1845 * 0.5;
        float _1955 = _1855 * 0.5;
        float _1956 = dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955));
        float _1961 = (_1956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1956);
        float _1969 = (dot(vec3(_1114, _1115, _1116), vec3(_1961 * _1953, _1961 * _1954, _1961 * _1955)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1978 = sqrt(((_1954 * _1954) + (_1953 * _1953)) + (_1955 * _1955)) / (_1868 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1980 = _1979 * 2.0;
        float _1984 = (1.0 - _1979) / (_1979 + 1.0);
        float _4567 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1994 = ((((1.0 - _1985) * (_1980 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1980 + 1.0))) + _1985) * _1868;
        _2002 = _1835;
        _2003 = _1834;
        _2004 = _1833;
        _2005 = _1845;
        _2006 = _1844;
        _2007 = _1843;
        _2008 = _1855;
        _2009 = _1854;
        _2010 = _1853;
        _2011 = _1868;
        _2012 = _1867;
        _2013 = _1866;
        _2014 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
        _2015 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)));
        _2016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)));
    }
    else
    {
        _2002 = _1693;
        _2003 = _1693;
        _2004 = _1693;
        _2005 = _1693;
        _2006 = _1693;
        _2007 = _1693;
        _2008 = _1693;
        _2009 = _1693;
        _2010 = _1693;
        _2011 = _1693;
        _2012 = _1693;
        _2013 = _1693;
        _2014 = 0.0;
        _2015 = 0.0;
        _2016 = 0.0;
    }
    float _2026 = (cbModelParam._m0[1u].x * (_2014 - _1705)) + _1705;
    float _2027 = (cbModelParam._m0[1u].x * (_2015 - _1706)) + _1706;
    float _2028 = (cbModelParam._m0[1u].x * (_2016 - _1707)) + _1707;
    float _2049 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2026));
    float _2070 = _1299 * 0.5;
    float _2071 = _1300 * 0.5;
    float _2072 = _1301 * 0.5;
    float _2073 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_2004, _2007, _2010, _2013));
    float _2076 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_2003, _2006, _2009, _2012));
    float _2079 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_2002, _2005, _2008, _2011));
    float _2113;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2086 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_1692, _1696, _1699, _1702));
        float _2090 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_1694, _1697, _1700, _1703));
        float _2094 = dot(vec4(_2070, _2071, _2072, 1.0), vec4(_1695, _1698, _1701, _1704));
        float _2101 = dot(vec4(cbModelParam._m0[39u]), vec4(_2070, _2071, _2072, 1.0));
        _2113 = dot(vec3(isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)), isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0)), isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2101) ? 0.0 : (isnan(0.0) ? _2101 : max(0.0, _2101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2113 = 1.0;
    }
    float _2124;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2115 = dot(vec4(cbModelParam._m0[40u]), vec4(_2070, _2071, _2072, 1.0));
        _2124 = dot(vec3(isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)), isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)), isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2115) ? 0.0 : (isnan(0.0) ? _2115 : max(0.0, _2115))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2124 = 1.0;
    }
    float _2128 = (_2124 * cbModelParam._m0[1u].x) + (_2113 * (1.0 - cbModelParam._m0[1u].x));
    float _2138 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1117);
    float _2139 = isnan(_2138) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2138 : min(cbModelParam._m0[25u].z, _2138));
    float _2219;
    float _2221;
    float _2223;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2186 = fma(_1363, cbModelParam._m0[13u].z, fma(_1359, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1355)) + cbModelParam._m0[13u].w;
        float _2190 = fma(_1363, cbModelParam._m0[14u].z, fma(_1359, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1355)) + cbModelParam._m0[14u].w;
        float _2194 = fma(_1363, cbModelParam._m0[15u].z, fma(_1359, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1355)) + cbModelParam._m0[15u].w;
        float _2197 = fma(_1301, cbModelParam._m0[13u].z, fma(_1300, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1299));
        float _2200 = fma(_1301, cbModelParam._m0[14u].z, fma(_1300, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1299));
        float _2203 = fma(_1301, cbModelParam._m0[15u].z, fma(_1300, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1299));
        float _2231;
        if (_2197 > 0.0)
        {
            _2231 = abs((1.0 - _2186) / _2197);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2186 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2231 = frontier_phi_17_15_ladder;
        }
        float _2454;
        if (_2200 > 0.0)
        {
            _2454 = abs((1.0 - _2190) / _2200);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2190 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2454 = frontier_phi_26_22_ladder;
        }
        float _2711;
        if (_2203 > 0.0)
        {
            _2711 = abs((1.0 - _2194) / _2203);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2194 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2711 = frontier_phi_38_33_ladder;
        }
        float _2713 = isnan(_2454) ? _2231 : (isnan(_2231) ? _2454 : min(_2231, _2454));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2197) + _2186;
        float _2719 = (_2714 * _2200) + _2190;
        float _2720 = (_2714 * _2203) + _2194;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2721;
        float _2725 = _2721 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 > _2725) || ((_2719 < _2723) || ((_2718 < _2723) || (_2718 > _2725))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2720, cbModelParam._m0[9u].z, fma(_2719, cbModelParam._m0[9u].y, _2718 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2720, cbModelParam._m0[10u].z, fma(_2719, cbModelParam._m0[10u].y, _2718 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2720, cbModelParam._m0[11u].z, fma(_2719, cbModelParam._m0[11u].y, _2718 * cbModelParam._m0[11u].x))), _2139);
            frontier_phi_16_38_ladder = _2848.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2848.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2848.x * cbModelParam._m0[1u].y;
        }
        _2219 = frontier_phi_16_38_ladder_2;
        _2221 = frontier_phi_16_38_ladder_1;
        _2223 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1299, _1300, _1301), _2139);
        _2219 = _2207.x * cbModelParam._m0[1u].y;
        _2221 = _2207.y * cbModelParam._m0[1u].y;
        _2223 = _2207.z * cbModelParam._m0[1u].y;
    }
    float _2227 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1117);
    float _2228 = isnan(_2227) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2227 : min(cbModelParam._m0[25u].w, _2227));
    float _2317;
    float _2319;
    float _2321;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2281 = fma(_1363, cbModelParam._m0[21u].z, fma(_1359, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1355)) + cbModelParam._m0[21u].w;
        float _2285 = fma(_1363, cbModelParam._m0[22u].z, fma(_1359, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1355)) + cbModelParam._m0[22u].w;
        float _2289 = fma(_1363, cbModelParam._m0[23u].z, fma(_1359, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1355)) + cbModelParam._m0[23u].w;
        float _2292 = fma(_1301, cbModelParam._m0[21u].z, fma(_1300, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1299));
        float _2295 = fma(_1301, cbModelParam._m0[22u].z, fma(_1300, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1299));
        float _2298 = fma(_1301, cbModelParam._m0[23u].z, fma(_1300, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1299));
        float _2459;
        if (_2292 > 0.0)
        {
            _2459 = abs((1.0 - _2281) / _2292);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2292 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2281 + 1.0) / _2292);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2459 = frontier_phi_28_24_ladder;
        }
        float _2738;
        if (_2295 > 0.0)
        {
            _2738 = abs((1.0 - _2285) / _2295);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2295 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2285 + 1.0) / _2295);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2738 = frontier_phi_40_35_ladder;
        }
        float _2951;
        if (_2298 > 0.0)
        {
            _2951 = abs((1.0 - _2289) / _2298);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2298 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2289 + 1.0) / _2298);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2951 = frontier_phi_49_46_ladder;
        }
        float _2953 = isnan(_2738) ? _2459 : (isnan(_2459) ? _2738 : min(_2459, _2738));
        float _2954 = isnan(_2951) ? _2953 : (isnan(_2953) ? _2951 : min(_2953, _2951));
        float _2958 = (_2954 * _2292) + _2281;
        float _2959 = (_2954 * _2295) + _2285;
        float _2960 = (_2954 * _2298) + _2289;
        float _2961 = _2954 * 9.9999997473787516355514526367188e-05;
        float _2962 = (-1.0) - _2961;
        float _2964 = _2961 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2960 > _2964) || ((_2960 < _2962) || ((_2959 > _2964) || ((_2959 < _2962) || ((_2958 < _2962) || (_2958 > _2964))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3159 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2960, cbModelParam._m0[17u].z, fma(_2959, cbModelParam._m0[17u].y, _2958 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2960, cbModelParam._m0[18u].z, fma(_2959, cbModelParam._m0[18u].y, _2958 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2960, cbModelParam._m0[19u].z, fma(_2959, cbModelParam._m0[19u].y, _2958 * cbModelParam._m0[19u].x))), _2228);
            frontier_phi_25_49_ladder = _3159.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3159.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3159.x * cbModelParam._m0[1u].z;
        }
        _2317 = frontier_phi_25_49_ladder_2;
        _2319 = frontier_phi_25_49_ladder_1;
        _2321 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2301 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1299, _1300, _1301), _2228);
        _2317 = _2301.x * cbModelParam._m0[1u].z;
        _2319 = _2301.y * cbModelParam._m0[1u].z;
        _2321 = _2301.z * cbModelParam._m0[1u].z;
    }
    float _2334 = (((_1326 * _1275) + _1327) * _1291) * ((cbModelParam._m0[1u].w * (_2317 - _2219)) + _2219);
    float _2336 = (((_1326 * _1277) + _1327) * _1291) * ((cbModelParam._m0[1u].w * (_2319 - _2221)) + _2221);
    float _2338 = (((_1326 * _1278) + _1327) * _1291) * ((cbModelParam._m0[1u].w * (_2321 - _2223)) + _2223);
    float _2341 = fma(_2338, cbSceneParam._m0[89u].z, fma(_2336, cbSceneParam._m0[89u].y, _2334 * cbSceneParam._m0[89u].x));
    float _2344 = fma(_2338, cbSceneParam._m0[90u].z, fma(_2336, cbSceneParam._m0[90u].y, _2334 * cbSceneParam._m0[90u].x));
    float _2347 = fma(_2338, cbSceneParam._m0[91u].z, fma(_2336, cbSceneParam._m0[91u].y, _2334 * cbSceneParam._m0[91u].x));
    vec4 _2355 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1213, _1214));
    float _2357 = _2355.w;
    float _2369 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2357);
    float _2370 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2357);
    float _2371 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2357);
    uvec4 _2375 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2377 = _2375.x * 14u;
    uint _2378 = _2377 + 13u;
    float _2385 = _1291 + (-1.0);
    float _2390 = (cbLight._m0[_2378].x * _2385) + 1.0;
    float _2391 = (cbLight._m0[_2378].y * _2385) + 1.0;
    float _2392 = (cbLight._m0[_2378].z * _2385) + 1.0;
    float _2393 = (cbLight._m0[_2378].w * _2385) + 1.0;
    uint _2394 = _2377 + 5u;
    float _2400 = isnan(1.0) ? _2391 : (isnan(_2391) ? 1.0 : min(_2391, 1.0));
    uint _2404 = _2377 + 4u;
    float _2413 = isnan(1.0) ? _2390 : (isnan(_2390) ? 1.0 : min(_2390, 1.0));
    uint _2417 = _2377 | 1u;
    float _2428 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_1114, _1115, _1116));
    float _2431 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_1114, _1115, _1116));
    float _4703 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _4714 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2436 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2438 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * 0.3183098733425140380859375;
    float _2445 = ((cbLight._m0[_2394].x * _2400) * _2438) + (((cbLight._m0[_2404].x * _2369) * _2413) * _2436);
    float _2446 = ((_2400 * cbLight._m0[_2394].y) * _2438) + (((cbLight._m0[_2404].y * _2370) * _2413) * _2436);
    float _2447 = ((_2400 * cbLight._m0[_2394].z) * _2438) + (((cbLight._m0[_2404].z * _2371) * _2413) * _2436);
    uvec4 _2451 = floatBitsToUint(cbLight._m0[_2377 + 12u]);
    bool _2453 = _2451.x == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2453)
    {
        _2464 = _2445;
        _2466 = _2446;
        _2468 = _2447;
    }
    else
    {
        uint _2472 = _2377 + 6u;
        float _2488 = (dot(vec3(cbLight._m0[_2377 + 2u].xyz), vec3(_1114, _1115, _1116)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4725 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2491 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2464 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2445;
        _2466 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2446;
        _2468 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2447;
    }
    bool _2471 = _2451.y == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2471)
    {
        _2509 = _2464;
        _2511 = _2466;
        _2513 = _2468;
    }
    else
    {
        uint _2682 = _2377 + 7u;
        float _2698 = (dot(vec3(cbLight._m0[_2377 + 3u].xyz), vec3(_1114, _1115, _1116)) * 0.5) + 0.5;
        float _2699 = _2698 * _2698;
        float _4741 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2700 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2701 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2509 = (((cbLight._m0[_2682].x * 0.3183098733425140380859375) * _2700) * _2701) + _2464;
        _2511 = (((cbLight._m0[_2682].y * 0.3183098733425140380859375) * _2700) * _2701) + _2466;
        _2513 = (((cbLight._m0[_2682].z * 0.3183098733425140380859375) * _2700) * _2701) + _2468;
    }
    uint _2516 = _2377 + 8u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _1117) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2377].x + _1193;
    float _2532 = cbLight._m0[_2377].y + _1194;
    float _2533 = cbLight._m0[_2377].z + _1195;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2377].xyz));
    float _4757 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _4768 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _2545 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2546 = dot(vec3(_1114, _1115, _1116), vec3(_2538, _2539, _2540));
    float _4779 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2538, _2539, _2540));
    float _4790 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2530 * _2530;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
    float _2567 = 0.959999978542327880859375 - _1272;
    float _2569 = 0.959999978542327880859375 - _1273;
    float _2570 = 0.959999978542327880859375 - _1274;
    float _2577 = 1.0 - _2530;
    float _2588 = (0.5 / (((_2545 * ((_2544 * _2577) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2577) + _2530) * _2544))) * _2544;
    float _4801 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    uint _2604 = _2377 + 9u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _1117) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2417].x + _1193;
    float _2618 = cbLight._m0[_2417].y + _1194;
    float _2619 = cbLight._m0[_2417].z + _1195;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2417].xyz));
    float _4812 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2631 = dot(vec3(_1114, _1115, _1116), vec3(_2624, _2625, _2626));
    float _4823 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2624, _2625, _2626));
    float _4834 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2616 * _2616;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
    float _2657 = 1.0 - _2616;
    float _2667 = (0.5 / (((_2545 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2657) + _2616) * _2630))) * _2630;
    float _4845 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2669 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    float _2679 = (((((_2650 * _2567) + _1275) * cbLight._m0[_2604].x) * _2669) * _2400) + ((((cbLight._m0[_2516].x * _2369) * ((_2566 * _2567) + _1275)) * _2590) * _2413);
    float _2680 = (((((_2650 * _2569) + _1277) * cbLight._m0[_2604].y) * _2669) * _2400) + ((((cbLight._m0[_2516].y * _2370) * ((_2566 * _2569) + _1277)) * _2590) * _2413);
    float _2681 = (((((_2650 * _2570) + _1278) * cbLight._m0[_2604].z) * _2669) * _2400) + ((((cbLight._m0[_2516].z * _2371) * ((_2566 * _2570) + _1278)) * _2590) * _2413);
    float _2743;
    float _2745;
    float _2747;
    if (_2453)
    {
        _2743 = _2679;
        _2745 = _2680;
        _2747 = _2681;
    }
    else
    {
        uint _2749 = _2377 + 2u;
        uint _2753 = _2377 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _1117) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _1193;
        float _2770 = cbLight._m0[_2749].y + _1194;
        float _2771 = cbLight._m0[_2749].z + _1195;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2749].xyz));
        float _4856 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2783 = dot(vec3(_1114, _1115, _1116), vec3(_2776, _2777, _2778));
        float _4867 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4878 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2545 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2809) + _2768) * _2782))) * _2782;
        float _4889 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        _2743 = (((((_2802 * _2567) + _1275) * cbLight._m0[_2753].x) * _2821) * _2822) + _2679;
        _2745 = (((((_2802 * _2569) + _1277) * cbLight._m0[_2753].y) * _2821) * _2822) + _2680;
        _2747 = (((((_2802 * _2570) + _1278) * cbLight._m0[_2753].z) * _2821) * _2822) + _2681;
    }
    float _2857;
    float _2859;
    float _2861;
    if (_2471)
    {
        _2857 = _2743;
        _2859 = _2745;
        _2861 = _2747;
    }
    else
    {
        uint _2868 = _2377 + 3u;
        uint _2872 = _2377 + 11u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _1117) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _1193;
        float _2889 = cbLight._m0[_2868].y + _1194;
        float _2890 = cbLight._m0[_2868].z + _1195;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2868].xyz));
        float _4905 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _2902 = dot(vec3(_1114, _1115, _1116), vec3(_2895, _2896, _2897));
        float _4916 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4927 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) * 5.0);
        float _2928 = 1.0 - _2887;
        float _2938 = (0.5 / (((_2545 * ((_2901 * _2928) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2928) + _2887) * _2901))) * _2901;
        float _4938 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2857 = (((((_2921 * _2567) + _1275) * cbLight._m0[_2872].x) * _2940) * _2941) + _2743;
        _2859 = (((((_2921 * _2569) + _1277) * cbLight._m0[_2872].y) * _2940) * _2941) + _2745;
        _2861 = (((((_2921 * _2570) + _1278) * cbLight._m0[_2872].z) * _2940) * _2941) + _2747;
    }
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_2375.y == 0u)
    {
        float _3016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3016;
        float _3018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3016;
        float _3019 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3016;
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.x;
        uint _3043 = uint((float(_3031.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1214) / _3032))) + floor(float(uint(cbSceneParam._m0[85u].x * _1213) / _3032)));
        float _3053 = (log2(_3019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3054 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        uint _3057 = uint(isnan(14.0) ? _3054 : (isnan(_3054) ? 14.0 : min(_3054, 14.0)));
        uvec4 _3062 = texelFetch(g_lightClusterGridBuffer, int(((_3057 << 2u) + (_3043 << 6u)) >> 2u));
        uint _3063 = _3062.x;
        uint _3064 = _3031.z;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((((1u << ((_3064 >> 4u) & 15u)) + 4294967295u) & _3063) == 0u) || ((_3064 & 240u) == 0u))
        {
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
        }
        else
        {
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            uint _3322 = 0u;
            uint _3331;
            bool _3332;
            for (;;)
            {
                _3331 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                _3332 = _3331 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3332)
                {
                    frontier_phi_66_pred = _3316;
                    frontier_phi_66_pred_1 = _3321;
                    frontier_phi_66_pred_2 = _3320;
                    frontier_phi_66_pred_3 = _3319;
                    frontier_phi_66_pred_4 = _3318;
                    frontier_phi_66_pred_5 = _3317;
                }
                else
                {
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    uint _3467;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3331;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    for (;;)
                    {
                        uint _3471 = uint(findLSB(_3467)) + (_3322 << 5u);
                        uint _3468 = (_3467 + 4294967295u) & _3467;
                        uint _3473 = _3471 * 48u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3493 = (_3471 * 48u) + 4u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3512 = (_3471 * 48u) + 8u;
                        vec3 _3523 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x));
                        float _3527 = _3487.x - _3017;
                        float _3528 = _3487.y - _3018;
                        float _3529 = _3487.z - _3019;
                        float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                        float _3533 = inversesqrt(_3530);
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3537 = dot(vec3(_1232, _1235, _1238), vec3(_3534, _3535, _3536));
                        float _3542 = 1.0 - (_3530 * _3487.w);
                        float _4964 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3544 = sqrt(_3530) * _3506.w;
                        float _3547 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3537) + _3548;
                        float _3554 = _3544 * _3544;
                        float _3558 = ((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3543) / ((_3554 * 0.699999988079071044921875) + 1.0);
                        float _3562 = (-0.0) - _3017;
                        float _3563 = (-0.0) - _3018;
                        float _3564 = (-0.0) - _3019;
                        float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                        float _3569 = _3568 * _3562;
                        float _3570 = _3568 * _3563;
                        float _3571 = _3568 * _3564;
                        float _3579 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                        float _3580 = 1.0 - _1307;
                        float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                        float _3588 = _3587 * _3587;
                        float _3589 = _3588 * _3588;
                        float _3590 = _3569 + _3534;
                        float _3591 = _3570 + _3535;
                        float _3592 = _3571 + _3536;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3600 = dot(vec3(_1232, _1235, _1238), vec3(_3569, _3570, _3571));
                        float _4980 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3604 = dot(vec3(_1232, _1235, _1238), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                        float _4991 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                        float _3612 = _3547 * _3588;
                        float _3613 = _3612 * _3612;
                        float _3616 = ((1.0 - _3613) * _3537) + _3613;
                        float _5002 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3618 = 1.0 - _3588;
                        float _3628 = (0.5 / (((_3617 * ((_3603 * _3618) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3588) * _3603))) * _3617;
                        float _5013 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3639 = (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3611 * _3611) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125))) * _3543;
                        _3391 = (_3558 * _3506.x) + _3464;
                        _3392 = (_3558 * _3506.y) + _3465;
                        _3393 = (_3558 * _3506.z) + _3466;
                        _3388 = (_3639 * _3523.x) + _3461;
                        _3389 = (_3639 * _3523.y) + _3462;
                        _3390 = (_3639 * _3523.z) + _3463;
                        if (_3468 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3468;
                        }
                    }
                    frontier_phi_66_pred = _3388;
                    frontier_phi_66_pred_1 = _3393;
                    frontier_phi_66_pred_2 = _3392;
                    frontier_phi_66_pred_3 = _3391;
                    frontier_phi_66_pred_4 = _3390;
                    frontier_phi_66_pred_5 = _3389;
                }
                _3165 = frontier_phi_66_pred;
                _3175 = frontier_phi_66_pred_1;
                _3173 = frontier_phi_66_pred_2;
                _3171 = frontier_phi_66_pred_3;
                _3169 = frontier_phi_66_pred_4;
                _3167 = frontier_phi_66_pred_5;
                uint _3323 = _3322 + 1u;
                if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3316 = _3165;
                    _3317 = _3167;
                    _3318 = _3169;
                    _3319 = _3171;
                    _3320 = _3173;
                    _3321 = _3175;
                    _3322 = _3323;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
        }
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.z;
        uint _3181 = (_3179 >> 8u) & 15u;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((4294967295u << _3181) & _3063) == 0u)
        {
            _3284 = _3164;
            _3286 = _3166;
            _3288 = _3168;
            _3290 = _3170;
            _3292 = _3172;
            _3294 = _3174;
        }
        else
        {
            float _3309 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
            float _3310 = _3309 * _3017;
            float _3311 = _3309 * _3018;
            float _3312 = _3309 * _3019;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3181 < ((_3179 >> 12u) & 15u))
            {
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3444 = _3164;
                float _3445 = _3166;
                float _3446 = _3168;
                float _3447 = _3170;
                float _3448 = _3172;
                float _3449 = _3174;
                uint _3450 = _3181;
                uint _3459;
                bool _3460;
                for (;;)
                {
                    _3459 = texelFetch(g_lightClassification, int((((_3057 << 5u) + (_3043 << 9u)) + (_3450 << 2u)) >> 2u)).x;
                    _3460 = _3459 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3460)
                    {
                        frontier_phi_77_pred = _3449;
                        frontier_phi_77_pred_1 = _3448;
                        frontier_phi_77_pred_2 = _3447;
                        frontier_phi_77_pred_3 = _3446;
                        frontier_phi_77_pred_4 = _3445;
                        frontier_phi_77_pred_5 = _3444;
                    }
                    else
                    {
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3666 = _3444;
                        float _3667 = _3445;
                        float _3668 = _3446;
                        float _3669 = _3447;
                        float _3670 = _3448;
                        float _3671 = _3449;
                        uint _3672 = _3459;
                        uint _3673;
                        vec4 _3698;
                        float _3699;
                        vec4 _3714;
                        vec3 _3726;
                        vec4 _3741;
                        vec4 _3756;
                        float _3802;
                        bool _3803;
                        for (;;)
                        {
                            uint _3683 = ((_3450 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3672));
                            _3673 = (_3672 + 4294967295u) & _3672;
                            uint _3685 = _3683 * 40u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3699 = _3698.w;
                            uint _3701 = (_3683 * 40u) + 4u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3683 * 40u) + 8u;
                            _3726 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x));
                            uint _3728 = (_3683 * 40u) + 16u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3683 * 40u) + 20u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3683 * 40u) + 24u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3777 = (_3683 * 40u) + 28u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3802 = fma(_3019, _3790.z, fma(_3018, _3790.y, _3790.x * _3017)) + _3790.w;
                            _3803 = !((fma(_3019, _3771.z, fma(_3018, _3771.y, _3771.x * _3017)) + _3771.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3803)
                            {
                                float _3830 = _3698.x - _3017;
                                float _3831 = _3698.y - _3018;
                                float _3832 = _3698.z - _3019;
                                float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                                float _3836 = inversesqrt(_3833);
                                float _3837 = _3836 * _3830;
                                float _3838 = _3836 * _3831;
                                float _3839 = _3836 * _3832;
                                float _3843 = 1.0 - (_3833 / (_3699 * _3699));
                                float _5024 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3848 = sqrt(_3833) * _3714.w;
                                float _3850 = 1.39999997615814208984375 / (_3848 + 1.39999997615814208984375);
                                float _3851 = _3850 * _3850;
                                float _3854 = ((1.0 - _3851) * dot(vec3(_3837, _3838, _3839), vec3(_1232, _1235, _1238))) + _3851;
                                float _3857 = _3848 * _3848;
                                float _3861 = (fma(_3019, _3741.z, fma(_3018, _3741.y, _3741.x * _3017)) + _3741.w) / _3802;
                                float _3862 = (fma(_3019, _3756.z, fma(_3018, _3756.y, _3756.x * _3017)) + _3756.w) / _3802;
                                float _3866 = 1.0 - dot(vec2(_3861, _3862), vec2(_3861, _3862));
                                float _5040 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3868 = _3867 * (((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3844) / ((_3857 * 0.699999988079071044921875) + 1.0));
                                float _3880 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                                float _3881 = 1.0 - _1307;
                                float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                                float _3889 = _3888 * _3888;
                                float _3890 = _3889 * _3889;
                                float _3891 = _3837 - _3310;
                                float _3892 = _3838 - _3311;
                                float _3893 = _3839 - _3312;
                                float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                                float _3901 = dot(vec3(_1232, _1235, _1238), vec3((-0.0) - _3310, (-0.0) - _3311, (-0.0) - _3312));
                                float _5051 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3905 = dot(vec3(_1232, _1235, _1238), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                                float _5062 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                                float _3913 = _3850 * _3889;
                                float _3914 = _3913 * _3913;
                                float _3920 = ((1.0 - _3914) * dot(vec3(_1232, _1235, _1238), vec3(_3837, _3838, _3839))) + _3914;
                                float _5073 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3922 = 1.0 - _3889;
                                float _3932 = (0.5 / (((_3921 * ((_3904 * _3922) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3921 * _3922) + _3889) * _3904))) * _3921;
                                float _5084 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3942 = (_3867 * _3844) * (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0)))) / ((_3912 * _3912) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3868 * _3714.y;
                                frontier_phi_83_pred_1 = _3868 * _3714.x;
                                frontier_phi_83_pred_2 = _3942 * _3726.z;
                                frontier_phi_83_pred_3 = _3942 * _3726.y;
                                frontier_phi_83_pred_4 = _3942 * _3726.x;
                                frontier_phi_83_pred_5 = _3868 * _3714.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3950 = frontier_phi_83_pred;
                            _3949 = frontier_phi_83_pred_1;
                            _3948 = frontier_phi_83_pred_2;
                            _3947 = frontier_phi_83_pred_3;
                            _3946 = frontier_phi_83_pred_4;
                            _3951 = frontier_phi_83_pred_5;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            if (_3673 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3673;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3658;
                        frontier_phi_77_pred_1 = _3657;
                        frontier_phi_77_pred_2 = _3656;
                        frontier_phi_77_pred_3 = _3655;
                        frontier_phi_77_pred_4 = _3654;
                        frontier_phi_77_pred_5 = _3653;
                    }
                    _3295 = frontier_phi_77_pred;
                    _3293 = frontier_phi_77_pred_1;
                    _3291 = frontier_phi_77_pred_2;
                    _3289 = frontier_phi_77_pred_3;
                    _3287 = frontier_phi_77_pred_4;
                    _3285 = frontier_phi_77_pred_5;
                    uint _3451 = _3450 + 1u;
                    if (_3451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3444 = _3285;
                        _3445 = _3287;
                        _3446 = _3289;
                        _3447 = _3291;
                        _3448 = _3293;
                        _3449 = _3295;
                        _3450 = _3451;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3289;
                frontier_phi_58_59_ladder_1 = _3295;
                frontier_phi_58_59_ladder_2 = _3293;
                frontier_phi_58_59_ladder_3 = _3291;
                frontier_phi_58_59_ladder_4 = _3287;
                frontier_phi_58_59_ladder_5 = _3285;
            }
            else
            {
                frontier_phi_58_59_ladder = _3168;
                frontier_phi_58_59_ladder_1 = _3174;
                frontier_phi_58_59_ladder_2 = _3172;
                frontier_phi_58_59_ladder_3 = _3170;
                frontier_phi_58_59_ladder_4 = _3166;
                frontier_phi_58_59_ladder_5 = _3164;
            }
            _3284 = frontier_phi_58_59_ladder_5;
            _3286 = frontier_phi_58_59_ladder_4;
            _3288 = frontier_phi_58_59_ladder;
            _3290 = frontier_phi_58_59_ladder_3;
            _3292 = frontier_phi_58_59_ladder_2;
            _3294 = frontier_phi_58_59_ladder_1;
        }
        float _3299 = isnan(1.0) ? _1291 : (isnan(_1291) ? 1.0 : min(_1291, 1.0));
        _3076 = (_3299 * _3290) + _2509;
        _3078 = (_3299 * _3292) + _2511;
        _3080 = (_3299 * _3294) + _2513;
        _3082 = ((_3284 * _1275) * _3299) + _2857;
        _3084 = ((_3286 * _1277) * _3299) + _2859;
        _3086 = ((_3288 * _1278) * _3299) + _2861;
    }
    else
    {
        _3076 = _2509;
        _3078 = _2511;
        _3080 = _2513;
        _3082 = _2857;
        _3084 = _2859;
        _3086 = _2861;
    }
    float _5100 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _5111 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _5122 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _3103 = ((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3076 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1291))) + ((_3082 + ((isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0))) * _2128)) * cbPerFrame._m0[3u].x);
    float _3104 = ((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3078 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1291))) + ((_3084 + ((isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0))) * _2128)) * cbPerFrame._m0[3u].x);
    float _3105 = ((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3080 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1291))) + ((_3086 + ((isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0))) * _2128)) * cbPerFrame._m0[3u].x);
    uint _3106 = _275 + 6u;
    float _3114 = _1213 / cbSceneParam._m0[86u].x;
    float _3115 = _1214 / cbSceneParam._m0[86u].y;
    vec4 _3129 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, (log2((isnan(cbSceneParam._m0[77u].w) ? _1136 : (isnan(_1136) ? cbSceneParam._m0[77u].w : min(_1136, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3131 = _3129.x;
    float _3132 = _3129.y;
    float _3133 = _3129.z;
    float _3134 = _3129.w;
    float _3226;
    float _3228;
    float _3230;
    float _3232;
    if (_1136 > cbSceneParam._m0[78u].w)
    {
        float _3189 = isnan(_1136) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1136 : min(cbSceneParam._m0[80u].w, _1136));
        float _3190 = _3189 / _1136;
        float _3201 = _3190 * _1186;
        float _3202 = _1187 * _3190;
        float _3203 = (-0.0) - _3202;
        float _3204 = _3190 * _1188;
        float _3206 = (cbSceneParam._m0[77u].w * _3203) / _3189;
        float _3207 = _3206 + cbSceneParam._m0[79u].w;
        float _3208 = cbSceneParam._m0[79u].w - _3202;
        float _3214 = sqrt(((_3201 * _3201) + (_3202 * _3202)) + (_3204 * _3204));
        float _3217 = (1.0 - (cbSceneParam._m0[77u].w / _3189)) * _3214;
        float _3222 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3224 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3401;
        if (abs((_3203 - _3206) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3401 = ((((_3207 > 0.0) ? exp2(_3222 * _3207) : (2.0 - exp2(_3224 * _3207))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3217;
        }
        else
        {
            float _3345 = 1.0 / cbSceneParam._m0[80u].x;
            float _3346 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : max(_3207, _3208));
            float _3347 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : min(_3207, _3208));
            float _3356 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : min(_3346, 0.0));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            _3401 = ((abs(_3214 / _3203) * cbSceneParam._m0[80u].y) * ((((_3356 - _3357) * 2.0) - ((exp2(_3222 * (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0)))) - exp2(_3222 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))))) * _3345)) - ((exp2(_3224 * _3356) - exp2(_3224 * _3357)) * _3345))) + (_3217 * cbSceneParam._m0[80u].z);
        }
        vec4 _3403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3114, _3115, 1.0), 0.0);
        float _3412 = exp2((_3401 * (-1.44269502162933349609375)) * (1.0 - _3403.w));
        float _3413 = log2(_3412);
        float _3429 = log2(_3134);
        _3226 = (exp2(_3429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].x)) * _3403.x) / cbSceneParam._m0[78u].x)) + _3131;
        _3228 = (exp2(_3429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].y)) * _3403.y) / cbSceneParam._m0[78u].y)) + _3132;
        _3230 = (exp2(_3429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].z)) * _3403.z) / cbSceneParam._m0[78u].z)) + _3133;
        _3232 = _3412 * _3134;
    }
    else
    {
        _3226 = _3131;
        _3228 = _3132;
        _3230 = _3133;
        _3232 = _3134;
    }
    bool _3439;
    vec4 _3242;
    vec4 _3264;
    float _3266;
    float _3270;
    float _3271;
    float _3272;
    float _3273;
    bool _3283;
    for (;;)
    {
        _3242 = cbMatDynParam._m0[0u];
        float _3244 = roundEven(_3242.y);
        bool _3245 = _3244 == 3.0;
        float _3246 = log2(_3232);
        float _3253 = exp2(_3246 * cbSceneParam._m0[78u].x) * _3103;
        float _3254 = exp2(_3246 * cbSceneParam._m0[78u].y) * _3104;
        float _3255 = exp2(_3246 * cbSceneParam._m0[78u].z) * _3105;
        float _3262 = _1202 + (-0.5);
        _3264 = cbMtdParam._m0[1u];
        _3266 = _3264.y * _3262;
        float _3269 = (_3244 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3270 = _3269 * (_3245 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3226)));
        _3271 = _3269 * (_3245 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3228)));
        _3272 = _3269 * (_3245 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3230)));
        _3273 = _3262 * 0.999000012874603271484375;
        _3283 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3283)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3273) < 0.5)
            {
                _3439 = true;
                break;
            }
        }
        uint _3380 = _1251 + uint(_3242.w);
        if ((cbInstanceData._m0[_3380].w < 1.0) && ((cbInstanceData._m0[_3380].w + _3273) < 0.5))
        {
            _3439 = true;
            break;
        }
        if ((_3266 + 1.0) < _3264.x)
        {
            _3439 = true;
            break;
        }
        _3439 = false;
        break;
    }
    float _3644;
    if (_3439)
    {
        discard_state = true;
        _3644 = 0.0;
    }
    else
    {
        _3644 = cbInstanceData._m0[_3106].w;
    }
    SV_Target.x = _3270;
    SV_Target.y = _3271;
    SV_Target.z = _3272;
    SV_Target.w = _3644;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3106].w;
    discard_exit();
}


