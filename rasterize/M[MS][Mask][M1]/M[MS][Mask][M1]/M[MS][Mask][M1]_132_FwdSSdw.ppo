#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1490;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3837 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3848 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _559 = _557.x;
    float _569 = dot(vec4(_559, _557.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _581 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _368.z) * 2.0) - ((((_559 - _569) * cbMtdParam._m0[23u].w) + _569) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3859 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_582 * ((_540.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_582 * ((_540.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_582 * ((_540.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _660 = _656.z;
    float _667 = ((_639.x - _658) * _439) + _658;
    float _668 = ((_639.y - _659) * _439) + _659;
    float _669 = ((_639.z - _660) * _439) + _660;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _692 = ((_681.x - _667) * _512) + _667;
    float _693 = ((_681.y - _668) * _512) + _668;
    float _694 = ((_681.z - _669) * _512) + _669;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _719 = ((_706.z - _694) * _582) + _694;
    float _722 = ((((_706.x - _692) * _582) + _692) * 2.0) + (-1.0);
    float _724 = ((((_706.y - _693) * _582) + _693) * 2.0) + (-1.0);
    float _725 = dot(vec2(_722, _724), vec2(_722, _724));
    float _3870 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _730 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _787 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_771 - _772) * cbMtdParam._m0[24u].z) + _772) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3881 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _795 = (_788 * ((_619.x * cbMtdParam._m0[18u].x) - _595)) + _595;
    float _796 = (_788 * ((_619.y * cbMtdParam._m0[18u].y) - _598)) + _598;
    float _797 = (_788 * ((_619.z * cbMtdParam._m0[18u].z) - _601)) + _601;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _825 = _823.x;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _825) * _439) + _825;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _842) * _512) + _842;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _859) * _582) + _859;
    float _881 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _877) * cbMtdParam._m0[19u].z) + _877;
    float _883 = _881 - (_881 * _788);
    float _887 = (cbMtdParam._m0[19u].w * (_744.z - _719)) + _719;
    vec4 _900 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _907 = (_900.x * 2.0) + (-1.0);
    float _908 = (_900.y * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _3892 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _917 = (_788 * (_900.z - _887)) + _887;
    float _920 = (((_744.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _722;
    float _921 = (((_744.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _724;
    float _933 = (((_907 - _920) + (cbMtdParam._m0[21u].x * _920)) * _788) + _920;
    float _934 = (((_908 - _921) + (cbMtdParam._m0[21u].x * _921)) * _788) + _921;
    float _935 = (_788 * (sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) - _730)) + _730;
    float _937 = cbMtdParam._m0[22u].x + _744.w;
    float _940 = fma(_935, _245 * NORMAL.x, fma(_934, _252 * TANGENT.x, (_238 * _230) * _933));
    float _943 = fma(_935, _245 * NORMAL.y, fma(_934, _252 * TANGENT.y, (_238 * _231) * _933));
    float _946 = fma(_935, _245 * NORMAL.z, fma(_934, _252 * TANGENT.z, (_238 * _232) * _933));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _3903 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _954 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3925 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _3936 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3947 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3958 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _959 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1057 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1060 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1063 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1077 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1083 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_1077].x;
    float _1084 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1077].y;
    float _1085 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_1077].z;
    float _3969 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1089 = 1.0 - _959;
    float _1090 = _1086 * _1089;
    float _1091 = _1087 * _1089;
    float _1092 = _1088 * _1089;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _959;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _959;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _959;
    float _1100 = _1097 + 0.039999999105930328369140625;
    float _1102 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1116 = ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _951) - _1030;
    float _1125 = (_1120 * _952) - _1031;
    float _1126 = (_1120 * _953) - _1032;
    float _1130 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4002 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_954);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1151 = (1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1152 = _1145 * _1132;
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1489;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1214 = fma(_1188, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180));
        float _1218 = fma(_1188, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180));
        float _1222 = fma(_1188, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180));
        float _1247 = _1180 + _951;
        float _1248 = _1184 + _952;
        float _1249 = _1188 + _953;
        float _1259 = fma(_1249, cbModelParam._m0[26u].z, fma(_1248, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247)) - _1214;
        float _1260 = fma(_1249, cbModelParam._m0[27u].z, fma(_1248, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247)) - _1218;
        float _1261 = fma(_1249, cbModelParam._m0[28u].z, fma(_1248, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247)) - _1222;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1214 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1218 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[34u].z) + ((((((_1222 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1317 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1283.x + (-0.5));
        float _1319 = _1317 * (_1283.y + (-0.5));
        float _1320 = _1317 * (_1283.z + (-0.5));
        float _1327 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1290.x + (-0.5));
        float _1329 = _1327 * (_1290.y + (-0.5));
        float _1330 = _1327 * (_1290.z + (-0.5));
        float _1337 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1297.x + (-0.5));
        float _1339 = _1337 * (_1297.y + (-0.5));
        float _1340 = _1337 * (_1297.z + (-0.5));
        float _1347 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1304.x + (-0.5));
        float _1349 = _1347 * (_1304.y + (-0.5));
        float _1350 = _1347 * (_1304.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1371 = (dot(vec3(_951, _952, _953), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1381 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4050 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1383 + 1.0))) + _1388) * _1351;
        float _1398 = _1319 * 0.5;
        float _1399 = _1329 * 0.5;
        float _1400 = _1339 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_951, _952, _953), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4083 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1425 + 1.0))) + _1430) * _1352;
        float _1440 = _1320 * 0.5;
        float _1441 = _1330 * 0.5;
        float _1442 = _1340 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_951, _952, _953), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4116 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1467 + 1.0))) + _1472) * _1353;
        _1489 = _1320;
        _1491 = _1319;
        _1492 = _1318;
        _1493 = _1330;
        _1494 = _1329;
        _1495 = _1328;
        _1496 = _1340;
        _1497 = _1339;
        _1498 = _1338;
        _1499 = _1353;
        _1500 = _1352;
        _1501 = _1351;
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1490;
        _1491 = _1490;
        _1492 = _1490;
        _1493 = _1490;
        _1494 = _1490;
        _1495 = _1490;
        _1496 = _1490;
        _1497 = _1490;
        _1498 = _1490;
        _1499 = _1490;
        _1500 = _1490;
        _1501 = _1490;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1527 = fma(_1188, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180));
        float _1531 = fma(_1188, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180));
        float _1535 = fma(_1188, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180));
        float _1558 = _1180 + _951;
        float _1559 = _1184 + _952;
        float _1560 = _1188 + _953;
        float _1570 = fma(_1560, cbModelParam._m0[30u].z, fma(_1559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1558)) - _1527;
        float _1571 = fma(_1560, cbModelParam._m0[31u].z, fma(_1559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1558)) - _1531;
        float _1572 = fma(_1560, cbModelParam._m0[32u].z, fma(_1559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1558)) - _1535;
        float _1576 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
        float _1589 = ((_1576 * _1570) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1527 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1576 * _1571) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1531 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1576 * _1572) / cbModelParam._m0[35u].z) + ((((((_1535 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        float _1626 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1593.x + (-0.5));
        float _1628 = _1626 * (_1593.y + (-0.5));
        float _1629 = _1626 * (_1593.z + (-0.5));
        float _1636 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1600.x + (-0.5));
        float _1638 = _1636 * (_1600.y + (-0.5));
        float _1639 = _1636 * (_1600.z + (-0.5));
        float _1646 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1607.x + (-0.5));
        float _1648 = _1646 * (_1607.y + (-0.5));
        float _1649 = _1646 * (_1607.z + (-0.5));
        float _1656 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1614.x + (-0.5));
        float _1658 = _1656 * (_1614.y + (-0.5));
        float _1659 = _1656 * (_1614.z + (-0.5));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = _1627 * 0.5;
        float _1664 = _1637 * 0.5;
        float _1665 = _1647 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_951, _952, _953), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4179 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1690 + 1.0))) + _1695) * _1660;
        float _1705 = _1628 * 0.5;
        float _1706 = _1638 * 0.5;
        float _1707 = _1648 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_951, _952, _953), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4212 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1732 + 1.0))) + _1737) * _1661;
        float _1747 = _1629 * 0.5;
        float _1748 = _1639 * 0.5;
        float _1749 = _1649 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_951, _952, _953), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4245 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1774 + 1.0))) + _1779) * _1662;
        _1796 = _1629;
        _1797 = _1628;
        _1798 = _1627;
        _1799 = _1639;
        _1800 = _1638;
        _1801 = _1637;
        _1802 = _1649;
        _1803 = _1648;
        _1804 = _1647;
        _1805 = _1662;
        _1806 = _1661;
        _1807 = _1660;
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
    }
    else
    {
        _1796 = _1490;
        _1797 = _1490;
        _1798 = _1490;
        _1799 = _1490;
        _1800 = _1490;
        _1801 = _1490;
        _1802 = _1490;
        _1803 = _1490;
        _1804 = _1490;
        _1805 = _1490;
        _1806 = _1490;
        _1807 = _1490;
        _1808 = 0.0;
        _1809 = 0.0;
        _1810 = 0.0;
    }
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1502)) + _1502;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1503)) + _1503;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1504)) + _1504;
    float _1843 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1820));
    float _1864 = _1124 * 0.5;
    float _1865 = _1125 * 0.5;
    float _1866 = _1126 * 0.5;
    float _1867 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1870 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1873 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1907;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1880 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1489, _1493, _1496, _1499));
        float _1884 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1888 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1895 = dot(vec4(cbModelParam._m0[39u]), vec4(_1864, _1865, _1866, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1918;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1909 = dot(vec4(cbModelParam._m0[40u]), vec4(_1864, _1865, _1866, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1922 = (_1918 * cbModelParam._m0[1u].x) + (_1907 * (1.0 - cbModelParam._m0[1u].x));
    float _1932 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1932 : min(cbModelParam._m0[25u].z, _1932));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1980 = fma(_1188, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180)) + cbModelParam._m0[13u].w;
        float _1984 = fma(_1188, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180)) + cbModelParam._m0[14u].w;
        float _1988 = fma(_1188, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180)) + cbModelParam._m0[15u].w;
        float _1991 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1994 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1997 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2025;
        if (_1991 > 0.0)
        {
            _2025 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2025 = frontier_phi_14_12_ladder;
        }
        float _2248;
        if (_1994 > 0.0)
        {
            _2248 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2248 = frontier_phi_23_19_ladder;
        }
        float _2505;
        if (_1997 > 0.0)
        {
            _2505 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2505 = frontier_phi_35_30_ladder;
        }
        float _2507 = isnan(_2248) ? _2025 : (isnan(_2025) ? _2248 : min(_2025, _2248));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1991) + _1980;
        float _2513 = (_2508 * _1994) + _1984;
        float _2514 = (_2508 * _1997) + _1988;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2515;
        float _2519 = _2515 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 > _2519) || ((_2513 < _2517) || ((_2512 < _2517) || (_2512 > _2519))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2514, cbModelParam._m0[9u].z, fma(_2513, cbModelParam._m0[9u].y, _2512 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2514, cbModelParam._m0[10u].z, fma(_2513, cbModelParam._m0[10u].y, _2512 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2514, cbModelParam._m0[11u].z, fma(_2513, cbModelParam._m0[11u].y, _2512 * cbModelParam._m0[11u].x))), _1933);
            frontier_phi_13_35_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2013 = frontier_phi_13_35_ladder_2;
        _2015 = frontier_phi_13_35_ladder_1;
        _2017 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1933);
        _2013 = _2001.x * cbModelParam._m0[1u].y;
        _2015 = _2001.y * cbModelParam._m0[1u].y;
        _2017 = _2001.z * cbModelParam._m0[1u].y;
    }
    float _2021 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2021 : min(cbModelParam._m0[25u].w, _2021));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1188, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1188, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1188, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2089 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2092 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2253;
        if (_2086 > 0.0)
        {
            _2253 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2253 = frontier_phi_25_21_ladder;
        }
        float _2532;
        if (_2089 > 0.0)
        {
            _2532 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2532 = frontier_phi_37_32_ladder;
        }
        float _2745;
        if (_2092 > 0.0)
        {
            _2745 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2745 = frontier_phi_46_43_ladder;
        }
        float _2747 = isnan(_2532) ? _2253 : (isnan(_2253) ? _2532 : min(_2253, _2532));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2086) + _2075;
        float _2753 = (_2748 * _2089) + _2079;
        float _2754 = (_2748 * _2092) + _2083;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2022);
            frontier_phi_22_46_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_22_46_ladder_2;
        _2113 = frontier_phi_22_46_ladder_1;
        _2115 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2022);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1151 * _1100) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2130 = (((_1151 * _1102) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2113 - _2015)) + _2015);
    float _2132 = (((_1151 * _1103) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2115 - _2017)) + _2017);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    vec4 _2149 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1038, _1039));
    float _2151 = _2149.w;
    float _2163 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2151);
    float _2164 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2151);
    float _2165 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2151);
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _1116 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2207 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2211 = _2171 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_951, _952, _953));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_951, _952, _953));
    float _4381 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4392 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2163) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2164) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2165) * _2207) * _2230);
    uvec4 _2245 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2247 = _2245.x == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2247)
    {
        _2258 = _2239;
        _2260 = _2240;
        _2262 = _2241;
    }
    else
    {
        uint _2266 = _2171 + 6u;
        float _2282 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4403 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2285 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2258 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2239;
        _2260 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2240;
        _2262 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2241;
    }
    bool _2265 = _2245.y == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2265)
    {
        _2303 = _2258;
        _2305 = _2260;
        _2307 = _2262;
    }
    else
    {
        uint _2476 = _2171 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4419 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2495 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2303 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2258;
        _2305 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2260;
        _2307 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2262;
    }
    uint _2310 = _2171 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _954) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2171].x + _1030;
    float _2326 = cbLight._m0[_2171].y + _1031;
    float _2327 = cbLight._m0[_2171].z + _1032;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2171].xyz));
    float _4435 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2339 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2340 = dot(vec3(_951, _952, _953), vec3(_2332, _2333, _2334));
    float _4457 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2332, _2333, _2334));
    float _4468 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2361 = 0.959999978542327880859375 - _1097;
    float _2363 = 0.959999978542327880859375 - _1098;
    float _2364 = 0.959999978542327880859375 - _1099;
    float _2371 = 1.0 - _2324;
    float _2382 = (0.5 / (((_2339 * ((_2338 * _2371) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2371) + _2324) * _2338))) * _2338;
    float _4479 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2384 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2398 = _2171 + 9u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _954) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2211].x + _1030;
    float _2412 = cbLight._m0[_2211].y + _1031;
    float _2413 = cbLight._m0[_2211].z + _1032;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2211].xyz));
    float _4490 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2425 = dot(vec3(_951, _952, _953), vec3(_2418, _2419, _2420));
    float _4501 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2418, _2419, _2420));
    float _4512 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2410 * _2410;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2451 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2339 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2451) + _2410) * _2424))) * _2424;
    float _4523 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    float _2473 = (((((_2444 * _2361) + _1100) * cbLight._m0[_2398].x) * _2463) * _2194) + ((((cbLight._m0[_2310].x * _2163) * ((_2360 * _2361) + _1100)) * _2384) * _2207);
    float _2474 = (((((_2444 * _2363) + _1102) * cbLight._m0[_2398].y) * _2463) * _2194) + ((((cbLight._m0[_2310].y * _2164) * ((_2360 * _2363) + _1102)) * _2384) * _2207);
    float _2475 = (((((_2444 * _2364) + _1103) * cbLight._m0[_2398].z) * _2463) * _2194) + ((((cbLight._m0[_2310].z * _2165) * ((_2360 * _2364) + _1103)) * _2384) * _2207);
    float _2537;
    float _2539;
    float _2541;
    if (_2247)
    {
        _2537 = _2473;
        _2539 = _2474;
        _2541 = _2475;
    }
    else
    {
        uint _2543 = _2171 + 2u;
        uint _2547 = _2171 + 10u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _954) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _1030;
        float _2564 = cbLight._m0[_2543].y + _1031;
        float _2565 = cbLight._m0[_2543].z + _1032;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2543].xyz));
        float _4534 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2577 = dot(vec3(_951, _952, _953), vec3(_2570, _2571, _2572));
        float _4545 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4556 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2339 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2603) + _2562) * _2576))) * _2576;
        float _4567 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2537 = (((((_2596 * _2361) + _1100) * cbLight._m0[_2547].x) * _2615) * _2616) + _2473;
        _2539 = (((((_2596 * _2363) + _1102) * cbLight._m0[_2547].y) * _2615) * _2616) + _2474;
        _2541 = (((((_2596 * _2364) + _1103) * cbLight._m0[_2547].z) * _2615) * _2616) + _2475;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2265)
    {
        _2651 = _2537;
        _2653 = _2539;
        _2655 = _2541;
    }
    else
    {
        uint _2662 = _2171 + 3u;
        uint _2666 = _2171 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _954) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1030;
        float _2683 = cbLight._m0[_2662].y + _1031;
        float _2684 = cbLight._m0[_2662].z + _1032;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2662].xyz));
        float _4583 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2696 = dot(vec3(_951, _952, _953), vec3(_2689, _2690, _2691));
        float _4594 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4605 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2339 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2722) + _2681) * _2695))) * _2695;
        float _4616 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2651 = (((((_2715 * _2361) + _1100) * cbLight._m0[_2666].x) * _2734) * _2735) + _2537;
        _2653 = (((((_2715 * _2363) + _1102) * cbLight._m0[_2666].y) * _2734) * _2735) + _2539;
        _2655 = (((((_2715 * _2364) + _1103) * cbLight._m0[_2666].z) * _2734) * _2735) + _2541;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2169.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3119)
                {
                    frontier_phi_61_pred = _3103;
                    frontier_phi_61_pred_1 = _3108;
                    frontier_phi_61_pred_2 = _3107;
                    frontier_phi_61_pred_3 = _3106;
                    frontier_phi_61_pred_4 = _3105;
                    frontier_phi_61_pred_5 = _3104;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3118;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3109 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2811;
                        float _3294 = _3253.y - _2812;
                        float _3295 = _3253.z - _2813;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_1057, _1060, _1063), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4642 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2811;
                        float _3329 = (-0.0) - _2812;
                        float _3330 = (-0.0) - _2813;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1132;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_1057, _1060, _1063), vec3(_3335, _3336, _3337));
                        float _4658 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3370 = dot(vec3(_1057, _1060, _1063), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4669 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4680 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4691 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3162 = (_3324 * _3272.x) + _3230;
                        _3163 = (_3324 * _3272.y) + _3231;
                        _3164 = (_3324 * _3272.z) + _3232;
                        _3159 = (_3405 * _3289.x) + _3227;
                        _3160 = (_3405 * _3289.y) + _3228;
                        _3161 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_61_pred = _3159;
                    frontier_phi_61_pred_1 = _3164;
                    frontier_phi_61_pred_2 = _3163;
                    frontier_phi_61_pred_3 = _3162;
                    frontier_phi_61_pred_4 = _3161;
                    frontier_phi_61_pred_5 = _3160;
                }
                _2959 = frontier_phi_61_pred;
                _2969 = frontier_phi_61_pred_1;
                _2967 = frontier_phi_61_pred_2;
                _2965 = frontier_phi_61_pred_3;
                _2963 = frontier_phi_61_pred_4;
                _2961 = frontier_phi_61_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2959;
                    _3104 = _2961;
                    _3105 = _2963;
                    _3106 = _2965;
                    _3107 = _2967;
                    _3108 = _2969;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3071 = _2958;
            _3073 = _2960;
            _3075 = _2962;
            _3077 = _2964;
            _3079 = _2966;
            _3081 = _2968;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3097 = _3096 * _2811;
            float _3098 = _3096 * _2812;
            float _3099 = _3096 * _2813;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3210 = _2958;
                float _3211 = _2960;
                float _3212 = _2962;
                float _3213 = _2964;
                float _3214 = _2966;
                float _3215 = _2968;
                uint _3216 = _2975;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3226)
                    {
                        frontier_phi_67_pred = _3213;
                        frontier_phi_67_pred_1 = _3214;
                        frontier_phi_67_pred_2 = _3215;
                        frontier_phi_67_pred_3 = _3212;
                        frontier_phi_67_pred_4 = _3211;
                        frontier_phi_67_pred_5 = _3210;
                    }
                    else
                    {
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        float _3428 = _3215;
                        uint _3429 = _3225;
                        uint _3430;
                        vec4 _3455;
                        float _3456;
                        vec4 _3471;
                        vec3 _3483;
                        vec4 _3498;
                        vec4 _3513;
                        float _3559;
                        bool _3560;
                        for (;;)
                        {
                            uint _3440 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3429));
                            _3430 = (_3429 + 4294967295u) & _3429;
                            uint _3442 = _3440 * 40u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3456 = _3455.w;
                            uint _3458 = (_3440 * 40u) + 4u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3440 * 40u) + 8u;
                            _3483 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x));
                            uint _3485 = (_3440 * 40u) + 16u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3440 * 40u) + 20u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3440 * 40u) + 24u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3534 = (_3440 * 40u) + 28u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3559 = fma(_2813, _3547.z, fma(_2812, _3547.y, _3547.x * _2811)) + _3547.w;
                            _3560 = !((fma(_2813, _3528.z, fma(_2812, _3528.y, _3528.x * _2811)) + _3528.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3560)
                            {
                                float _3587 = _3455.x - _2811;
                                float _3588 = _3455.y - _2812;
                                float _3589 = _3455.z - _2813;
                                float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                                float _3593 = inversesqrt(_3590);
                                float _3594 = _3593 * _3587;
                                float _3595 = _3593 * _3588;
                                float _3596 = _3593 * _3589;
                                float _3600 = 1.0 - (_3590 / (_3456 * _3456));
                                float _4702 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3605 = sqrt(_3590) * _3471.w;
                                float _3607 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                                float _3608 = _3607 * _3607;
                                float _3611 = ((1.0 - _3608) * dot(vec3(_3594, _3595, _3596), vec3(_1057, _1060, _1063))) + _3608;
                                float _3614 = _3605 * _3605;
                                float _3618 = (fma(_2813, _3498.z, fma(_2812, _3498.y, _3498.x * _2811)) + _3498.w) / _3559;
                                float _3619 = (fma(_2813, _3513.z, fma(_2812, _3513.y, _3513.x * _2811)) + _3513.w) / _3559;
                                float _3623 = 1.0 - dot(vec2(_3618, _3619), vec2(_3618, _3619));
                                float _4718 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3625 = _3624 * (((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3601) / ((_3614 * 0.699999988079071044921875) + 1.0));
                                float _3637 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                                float _3638 = 1.0 - _1132;
                                float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                                float _3646 = _3645 * _3645;
                                float _3647 = _3646 * _3646;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3650 = _3596 - _3099;
                                float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                                float _3658 = dot(vec3(_1057, _1060, _1063), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4729 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3662 = dot(vec3(_1057, _1060, _1063), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                                float _4740 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                                float _3670 = _3607 * _3646;
                                float _3671 = _3670 * _3670;
                                float _3677 = ((1.0 - _3671) * dot(vec3(_1057, _1060, _1063), vec3(_3594, _3595, _3596))) + _3671;
                                float _4751 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3679 = 1.0 - _3646;
                                float _3689 = (0.5 / (((_3678 * ((_3661 * _3679) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3646) * _3661))) * _3678;
                                float _4762 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3699 = (_3624 * _3601) * (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3669 * _3669) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3699 * _3483.x;
                                frontier_phi_73_pred_1 = _3699 * _3483.y;
                                frontier_phi_73_pred_2 = _3625 * _3471.z;
                                frontier_phi_73_pred_3 = _3625 * _3471.y;
                                frontier_phi_73_pred_4 = _3625 * _3471.x;
                                frontier_phi_73_pred_5 = _3699 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_73_pred;
                            _3704 = frontier_phi_73_pred_1;
                            _3708 = frontier_phi_73_pred_2;
                            _3707 = frontier_phi_73_pred_3;
                            _3706 = frontier_phi_73_pred_4;
                            _3705 = frontier_phi_73_pred_5;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            if (_3430 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3430;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3413;
                        frontier_phi_67_pred_1 = _3414;
                        frontier_phi_67_pred_2 = _3415;
                        frontier_phi_67_pred_3 = _3412;
                        frontier_phi_67_pred_4 = _3411;
                        frontier_phi_67_pred_5 = _3410;
                    }
                    _3078 = frontier_phi_67_pred;
                    _3080 = frontier_phi_67_pred_1;
                    _3082 = frontier_phi_67_pred_2;
                    _3076 = frontier_phi_67_pred_3;
                    _3074 = frontier_phi_67_pred_4;
                    _3072 = frontier_phi_67_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3072;
                        _3211 = _3074;
                        _3212 = _3076;
                        _3213 = _3078;
                        _3214 = _3080;
                        _3215 = _3082;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3080;
                frontier_phi_55_56_ladder_1 = _3082;
                frontier_phi_55_56_ladder_2 = _3078;
                frontier_phi_55_56_ladder_3 = _3076;
                frontier_phi_55_56_ladder_4 = _3074;
                frontier_phi_55_56_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_55_56_ladder = _2966;
                frontier_phi_55_56_ladder_1 = _2968;
                frontier_phi_55_56_ladder_2 = _2964;
                frontier_phi_55_56_ladder_3 = _2962;
                frontier_phi_55_56_ladder_4 = _2960;
                frontier_phi_55_56_ladder_5 = _2958;
            }
            _3071 = frontier_phi_55_56_ladder_5;
            _3073 = frontier_phi_55_56_ladder_4;
            _3075 = frontier_phi_55_56_ladder_3;
            _3077 = frontier_phi_55_56_ladder_2;
            _3079 = frontier_phi_55_56_ladder;
            _3081 = frontier_phi_55_56_ladder_1;
        }
        float _3086 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2870 = (_3086 * _3077) + _2303;
        _2872 = (_3086 * _3079) + _2305;
        _2874 = (_3086 * _3081) + _2307;
        _2876 = ((_3071 * _1100) * _3086) + _2651;
        _2878 = ((_3073 * _1102) * _3086) + _2653;
        _2880 = ((_3075 * _1103) * _3086) + _2655;
    }
    else
    {
        _2870 = _2303;
        _2872 = _2305;
        _2874 = _2307;
        _2876 = _2651;
        _2878 = _2653;
        _2880 = _2655;
    }
    float _4778 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _4789 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4800 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    uint _2900 = _258 + 6u;
    float _2908 = _1038 / cbSceneParam._m0[86u].x;
    float _2909 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _2984 = _2983 / _973;
        float _2995 = _2984 * _1023;
        float _2996 = _1024 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2999 = _2984 * _1025;
        float _3001 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2996;
        float _3009 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3172;
        if (abs((_2997 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3172 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3134 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3172 = ((abs(_3009 / _2997) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3019 * _3143) - exp2(_3019 * _3144)) * _3132))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3183 = exp2((_3172 * (-1.44269502162933349609375)) * (1.0 - _3174.w));
        float _3184 = log2(_3183);
        float _3200 = log2(_2928);
        _3021 = (exp2(_3200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].x)) * _3174.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3023 = (exp2(_3200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].y)) * _3174.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3025 = (exp2(_3200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].z)) * _3174.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3027 = _3183 * _2928;
    }
    else
    {
        _3021 = _2925;
        _3023 = _2926;
        _3025 = _2927;
        _3027 = _2928;
    }
    float _3039 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3040 = _3039 == 3.0;
    float _3041 = log2(_3027);
    float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2870 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1116))) + ((_2876 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2872 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1116))) + ((_2878 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2874 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1116))) + ((_2880 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3059 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3059 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
    SV_Target.y = _3059 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.z = _3059 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.w = cbInstanceData._m0[_2900].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
}


