#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1600;
float _3978;
float _3979;
float _3980;
float _3981;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _357.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3990 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _435 = (_428 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _436 = (_428 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _437 = (_428 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _357.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4001 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _548 = _546.x;
    float _558 = dot(vec4(_548, _546.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _570 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _357.z) * 2.0) - ((((_548 - _558) * cbMtdParam._m0[23u].w) + _558) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4012 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _578 = (_571 * ((_529.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _579 = (_571 * ((_529.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _580 = (_571 * ((_529.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _428) + _617;
    float _627 = ((_598.y - _618) * _428) + _618;
    float _628 = ((_598.z - _619) * _428) + _619;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_640.x - _626) * _501) + _626;
    float _652 = ((_640.y - _627) * _501) + _627;
    float _653 = ((_640.z - _628) * _501) + _628;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _678 = ((_665.z - _653) * _571) + _653;
    float _681 = ((((_665.x - _651) * _571) + _651) * 2.0) + (-1.0);
    float _683 = ((((_665.y - _652) * _571) + _652) * 2.0) + (-1.0);
    float _684 = dot(vec2(_681, _683), vec2(_681, _683));
    float _4023 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _739 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _742 = ((isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : min(_739, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _751 = (_742 - ((((((_730 - _731) * cbMtdParam._m0[24u].z) + _731) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _742))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4044 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _759 = (_752 * (cbMtdParam._m0[17u].x - _578)) + _578;
    float _760 = (_752 * (cbMtdParam._m0[17u].y - _579)) + _579;
    float _761 = (_752 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _801 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_775 - _776) * cbMtdParam._m0[24u].w) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4055 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _810 = ((((cbMtdParam._m0[10u].x - _759) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _802) + _759;
    float _811 = ((((cbMtdParam._m0[10u].y - _760) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _802) + _760;
    float _812 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _761)) * _802) + _761;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _840 = _838.x;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _840) * _428) + _840;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _858) * _501) + _858;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _875) * _571) + _875;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _892) * cbMtdParam._m0[19u].z) + _892;
    float _898 = _896 - (_896 * _752);
    float _900 = _898 - (_898 * _802);
    float _904 = (cbMtdParam._m0[19u].w * (_703.z - _678)) + _678;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _925 = (_918.x * 2.0) + (-1.0);
    float _926 = (_918.y * 2.0) + (-1.0);
    float _927 = dot(vec2(_925, _926), vec2(_925, _926));
    float _4066 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _935 = (_752 * (_918.z - _904)) + _904;
    float _938 = ((cbMtdParam._m0[23u].x - _935) * _802) + _935;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _967 = (_961.x * 2.0) + (-1.0);
    float _968 = (_961.y * 2.0) + (-1.0);
    float _969 = dot(vec2(_967, _968), vec2(_967, _968));
    float _4077 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _977 = (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _978 = (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _990 = (((_925 - _977) + (cbMtdParam._m0[21u].x * _977)) * _752) + _977;
    float _991 = (((_926 - _978) + (cbMtdParam._m0[21u].x * _978)) * _752) + _978;
    float _992 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) - _689)) + _689;
    float _1003 = (((_967 - _990) + (_990 * cbMtdParam._m0[22u].z)) * _802) + _990;
    float _1004 = (((_968 - _991) + (_991 * cbMtdParam._m0[22u].z)) * _802) + _991;
    float _1005 = ((sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _992) * _802) + _992;
    float _1007 = cbMtdParam._m0[22u].x + _703.w;
    float _1010 = fma(_1005, _258 * NORMAL.x, fma(_1004, _265 * TANGENT.x, (_251 * _243) * _1003));
    float _1013 = fma(_1005, _258 * NORMAL.y, fma(_1004, _265 * TANGENT.y, (_251 * _244) * _1003));
    float _1016 = fma(_1005, _258 * NORMAL.z, fma(_1004, _265 * TANGENT.z, (_251 * _245) * _1003));
    float _1020 = inversesqrt(dot(vec3(_1010, _1013, _1016), vec3(_1010, _1013, _1016)));
    float _1021 = _1020 * _1010;
    float _1022 = _1020 * _1013;
    float _1023 = _1020 * _1016;
    float _4088 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1024 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4110 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4121 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4132 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4143 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _1029 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1043 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1093 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1083);
    float _1094 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1083);
    float _1095 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1083);
    float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
    float _1100 = _1093 * _1099;
    float _1101 = _1094 * _1099;
    float _1102 = _1095 * _1099;
    vec4 _1107 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1109 = _1107.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1281 = sqrt(((_1093 * _1093) + (_1094 * _1094)) + (_1095 * _1095));
        float _1287 = (cbMatDynParam._m0[5u].x * _1281) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1292 = (cbMatDynParam._m0[5u].z * _1281) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1288)) + _1288) < ((_1109 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1120 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1121 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1139 = fma(_1023, cbSceneParam._m0[5u].z, fma(_1022, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1021));
    float _1142 = fma(_1023, cbSceneParam._m0[6u].z, fma(_1022, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1021));
    float _1145 = fma(_1023, cbSceneParam._m0[7u].z, fma(_1022, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1021));
    uint _1158 = _271 + 9u;
    uint _1159 = _1158 + uint(cbMatDynParam._m0[0u].w);
    float _1165 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_1159].x;
    float _1166 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_1159].y;
    float _1167 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_1159].z;
    float _4176 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1168 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1169 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1170 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _1171 = 1.0 - _1029;
    float _1172 = _1168 * _1171;
    float _1173 = _1169 * _1171;
    float _1174 = _1170 * _1171;
    float _1179 = (_1168 + (-0.039999999105930328369140625)) * _1029;
    float _1180 = (_1169 + (-0.039999999105930328369140625)) * _1029;
    float _1181 = (_1170 + (-0.039999999105930328369140625)) * _1029;
    float _1182 = _1179 + 0.039999999105930328369140625;
    float _1184 = _1180 + 0.039999999105930328369140625;
    float _1185 = _1181 + 0.039999999105930328369140625;
    vec4 _1194 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1120, cbSceneParam._m0[86u].y * _1121));
    float _1198 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _1194.x;
    float _1199 = dot(vec3(_1021, _1022, _1023), vec3(_1100, _1101, _1102));
    float _1202 = _1199 * 2.0;
    float _1206 = (_1202 * _1021) - _1100;
    float _1207 = (_1202 * _1022) - _1101;
    float _1208 = (_1202 * _1023) - _1102;
    float _1212 = abs(dot(vec3(_1100, _1101, _1102), vec3(_1021, _1022, _1023)));
    float _4209 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1214 = sqrt(_1024);
    float _1227 = exp2((_1214 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1214 * 3.0));
    float _1233 = (1.0 - _1227) * ((_1214 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1234 = _1227 * _1214;
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1599;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1324 = fma(_1270, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1262));
        float _1328 = fma(_1270, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1262));
        float _1332 = fma(_1270, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1262));
        float _1357 = _1262 + _1021;
        float _1358 = _1266 + _1022;
        float _1359 = _1270 + _1023;
        float _1369 = fma(_1359, cbModelParam._m0[26u].z, fma(_1358, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1357)) - _1324;
        float _1370 = fma(_1359, cbModelParam._m0[27u].z, fma(_1358, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1357)) - _1328;
        float _1371 = fma(_1359, cbModelParam._m0[28u].z, fma(_1358, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1357)) - _1332;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1324 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1328 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[34u].z) + ((((((_1332 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1427 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1393.x + (-0.5));
        float _1429 = _1427 * (_1393.y + (-0.5));
        float _1430 = _1427 * (_1393.z + (-0.5));
        float _1437 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1400.x + (-0.5));
        float _1439 = _1437 * (_1400.y + (-0.5));
        float _1440 = _1437 * (_1400.z + (-0.5));
        float _1447 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1407.x + (-0.5));
        float _1449 = _1447 * (_1407.y + (-0.5));
        float _1450 = _1447 * (_1407.z + (-0.5));
        float _1457 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1414.x + (-0.5));
        float _1459 = _1457 * (_1414.y + (-0.5));
        float _1460 = _1457 * (_1414.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1481 = (dot(vec3(_1021, _1022, _1023), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1491 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4257 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1493 + 1.0))) + _1498) * _1461;
        float _1508 = _1429 * 0.5;
        float _1509 = _1439 * 0.5;
        float _1510 = _1449 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_1021, _1022, _1023), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4290 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1535 + 1.0))) + _1540) * _1462;
        float _1550 = _1430 * 0.5;
        float _1551 = _1440 * 0.5;
        float _1552 = _1450 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_1021, _1022, _1023), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4323 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1577 + 1.0))) + _1582) * _1463;
        _1599 = _1430;
        _1601 = _1429;
        _1602 = _1428;
        _1603 = _1440;
        _1604 = _1439;
        _1605 = _1438;
        _1606 = _1450;
        _1607 = _1449;
        _1608 = _1448;
        _1609 = _1463;
        _1610 = _1462;
        _1611 = _1461;
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1600;
        _1601 = _1600;
        _1602 = _1600;
        _1603 = _1600;
        _1604 = _1600;
        _1605 = _1600;
        _1606 = _1600;
        _1607 = _1600;
        _1608 = _1600;
        _1609 = _1600;
        _1610 = _1600;
        _1611 = _1600;
        _1612 = 0.0;
        _1613 = 0.0;
        _1614 = 0.0;
    }
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1640 = fma(_1270, cbModelParam._m0[30u].z, fma(_1266, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1262));
        float _1644 = fma(_1270, cbModelParam._m0[31u].z, fma(_1266, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1262));
        float _1648 = fma(_1270, cbModelParam._m0[32u].z, fma(_1266, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1262));
        float _1671 = _1262 + _1021;
        float _1672 = _1266 + _1022;
        float _1673 = _1270 + _1023;
        float _1683 = fma(_1673, cbModelParam._m0[30u].z, fma(_1672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1671)) - _1640;
        float _1684 = fma(_1673, cbModelParam._m0[31u].z, fma(_1672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1671)) - _1644;
        float _1685 = fma(_1673, cbModelParam._m0[32u].z, fma(_1672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1671)) - _1648;
        float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
        float _1702 = ((_1689 * _1683) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1640 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1703 = ((_1689 * _1684) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1644 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1704 = ((_1689 * _1685) / cbModelParam._m0[35u].z) + ((((((_1648 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1702, _1703, _1704), 0.0);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1702, _1703, _1704), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1702, _1703, _1704), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1702, _1703, _1704), 0.0);
        float _1739 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1706.x + (-0.5));
        float _1741 = _1739 * (_1706.y + (-0.5));
        float _1742 = _1739 * (_1706.z + (-0.5));
        float _1749 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1713.x + (-0.5));
        float _1751 = _1749 * (_1713.y + (-0.5));
        float _1752 = _1749 * (_1713.z + (-0.5));
        float _1759 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1720.x + (-0.5));
        float _1761 = _1759 * (_1720.y + (-0.5));
        float _1762 = _1759 * (_1720.z + (-0.5));
        float _1769 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1727.x + (-0.5));
        float _1771 = _1769 * (_1727.y + (-0.5));
        float _1772 = _1769 * (_1727.z + (-0.5));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = _1740 * 0.5;
        float _1777 = _1750 * 0.5;
        float _1778 = _1760 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1792 = (dot(vec3(_1021, _1022, _1023), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1803 = _1802 * 2.0;
        float _1807 = (1.0 - _1802) / (_1802 + 1.0);
        float _4386 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1817 = ((((1.0 - _1808) * (_1803 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1803 + 1.0))) + _1808) * _1773;
        float _1818 = _1741 * 0.5;
        float _1819 = _1751 * 0.5;
        float _1820 = _1761 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_1021, _1022, _1023), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4419 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1845 + 1.0))) + _1850) * _1774;
        float _1860 = _1742 * 0.5;
        float _1861 = _1752 * 0.5;
        float _1862 = _1762 * 0.5;
        float _1863 = dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862));
        float _1868 = (_1863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1863);
        float _1876 = (dot(vec3(_1021, _1022, _1023), vec3(_1868 * _1860, _1868 * _1861, _1868 * _1862)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1885 = sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1887 = _1886 * 2.0;
        float _1891 = (1.0 - _1886) / (_1886 + 1.0);
        float _4452 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1901 = ((((1.0 - _1892) * (_1887 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1887 + 1.0))) + _1892) * _1775;
        _1909 = _1742;
        _1910 = _1741;
        _1911 = _1740;
        _1912 = _1752;
        _1913 = _1751;
        _1914 = _1750;
        _1915 = _1762;
        _1916 = _1761;
        _1917 = _1760;
        _1918 = _1775;
        _1919 = _1774;
        _1920 = _1773;
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
        _1922 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)));
    }
    else
    {
        _1909 = _1600;
        _1910 = _1600;
        _1911 = _1600;
        _1912 = _1600;
        _1913 = _1600;
        _1914 = _1600;
        _1915 = _1600;
        _1916 = _1600;
        _1917 = _1600;
        _1918 = _1600;
        _1919 = _1600;
        _1920 = _1600;
        _1921 = 0.0;
        _1922 = 0.0;
        _1923 = 0.0;
    }
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1612)) + _1612;
    float _1934 = (cbModelParam._m0[1u].x * (_1922 - _1613)) + _1613;
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1614)) + _1614;
    float _1956 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1933));
    float _1977 = _1206 * 0.5;
    float _1978 = _1207 * 0.5;
    float _1979 = _1208 * 0.5;
    float _1980 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _1983 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1910, _1913, _1916, _1919));
    float _1986 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _2020;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1993 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1599, _1603, _1606, _1609));
        float _1997 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _2001 = dot(vec4(_1977, _1978, _1979, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _2008 = dot(vec4(cbModelParam._m0[39u]), vec4(_1977, _1978, _1979, 1.0));
        _2020 = dot(vec3(isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2008) ? 0.0 : (isnan(0.0) ? _2008 : max(0.0, _2008))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2020 = 1.0;
    }
    float _2031;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2022 = dot(vec4(cbModelParam._m0[40u]), vec4(_1977, _1978, _1979, 1.0));
        _2031 = dot(vec3(isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2022) ? 0.0 : (isnan(0.0) ? _2022 : max(0.0, _2022))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2031 = 1.0;
    }
    float _2035 = (_2031 * cbModelParam._m0[1u].x) + (_2020 * (1.0 - cbModelParam._m0[1u].x));
    float _2045 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1024);
    float _2046 = isnan(_2045) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2045 : min(cbModelParam._m0[25u].z, _2045));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2093 = fma(_1270, cbModelParam._m0[13u].z, fma(_1266, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1262)) + cbModelParam._m0[13u].w;
        float _2097 = fma(_1270, cbModelParam._m0[14u].z, fma(_1266, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1262)) + cbModelParam._m0[14u].w;
        float _2101 = fma(_1270, cbModelParam._m0[15u].z, fma(_1266, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1262)) + cbModelParam._m0[15u].w;
        float _2104 = fma(_1208, cbModelParam._m0[13u].z, fma(_1207, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1206));
        float _2107 = fma(_1208, cbModelParam._m0[14u].z, fma(_1207, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1206));
        float _2110 = fma(_1208, cbModelParam._m0[15u].z, fma(_1207, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1206));
        float _2138;
        if (_2104 > 0.0)
        {
            _2138 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2138 = frontier_phi_17_15_ladder;
        }
        float _2341;
        if (_2107 > 0.0)
        {
            _2341 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2341 = frontier_phi_26_22_ladder;
        }
        float _2595;
        if (_2110 > 0.0)
        {
            _2595 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2595 = frontier_phi_38_33_ladder;
        }
        float _2597 = isnan(_2341) ? _2138 : (isnan(_2138) ? _2341 : min(_2138, _2341));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _2104) + _2093;
        float _2603 = (_2598 * _2107) + _2097;
        float _2604 = (_2598 * _2110) + _2101;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2605;
        float _2609 = _2605 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 > _2609) || ((_2603 < _2607) || ((_2602 < _2607) || (_2602 > _2609))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2604, cbModelParam._m0[9u].z, fma(_2603, cbModelParam._m0[9u].y, _2602 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2604, cbModelParam._m0[10u].z, fma(_2603, cbModelParam._m0[10u].y, _2602 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2604, cbModelParam._m0[11u].z, fma(_2603, cbModelParam._m0[11u].y, _2602 * cbModelParam._m0[11u].x))), _2046);
            frontier_phi_16_38_ladder = _2732.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2732.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2732.x * cbModelParam._m0[1u].y;
        }
        _2126 = frontier_phi_16_38_ladder_2;
        _2128 = frontier_phi_16_38_ladder_1;
        _2130 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1206, _1207, _1208), _2046);
        _2126 = _2114.x * cbModelParam._m0[1u].y;
        _2128 = _2114.y * cbModelParam._m0[1u].y;
        _2130 = _2114.z * cbModelParam._m0[1u].y;
    }
    float _2134 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1024);
    float _2135 = isnan(_2134) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2134 : min(cbModelParam._m0[25u].w, _2134));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2189 = fma(_1270, cbModelParam._m0[21u].z, fma(_1266, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1262)) + cbModelParam._m0[21u].w;
        float _2193 = fma(_1270, cbModelParam._m0[22u].z, fma(_1266, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1262)) + cbModelParam._m0[22u].w;
        float _2197 = fma(_1270, cbModelParam._m0[23u].z, fma(_1266, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1262)) + cbModelParam._m0[23u].w;
        float _2200 = fma(_1208, cbModelParam._m0[21u].z, fma(_1207, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1206));
        float _2203 = fma(_1208, cbModelParam._m0[22u].z, fma(_1207, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1206));
        float _2206 = fma(_1208, cbModelParam._m0[23u].z, fma(_1207, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1206));
        float _2346;
        if (_2200 > 0.0)
        {
            _2346 = abs((1.0 - _2189) / _2200);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2189 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2346 = frontier_phi_28_24_ladder;
        }
        float _2622;
        if (_2203 > 0.0)
        {
            _2622 = abs((1.0 - _2193) / _2203);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2193 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2622 = frontier_phi_40_35_ladder;
        }
        float _2835;
        if (_2206 > 0.0)
        {
            _2835 = abs((1.0 - _2197) / _2206);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2197 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2835 = frontier_phi_49_46_ladder;
        }
        float _2837 = isnan(_2622) ? _2346 : (isnan(_2346) ? _2622 : min(_2346, _2622));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2200) + _2189;
        float _2843 = (_2838 * _2203) + _2193;
        float _2844 = (_2838 * _2206) + _2197;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2135);
            frontier_phi_25_49_ladder = _3043.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3043.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3043.x * cbModelParam._m0[1u].z;
        }
        _2225 = frontier_phi_25_49_ladder_2;
        _2227 = frontier_phi_25_49_ladder_1;
        _2229 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1206, _1207, _1208), _2135);
        _2225 = _2209.x * cbModelParam._m0[1u].z;
        _2227 = _2209.y * cbModelParam._m0[1u].z;
        _2229 = _2209.z * cbModelParam._m0[1u].z;
    }
    float _2242 = (((_1233 * _1182) + _1234) * _1198) * ((cbModelParam._m0[1u].w * (_2225 - _2126)) + _2126);
    float _2244 = (((_1233 * _1184) + _1234) * _1198) * ((cbModelParam._m0[1u].w * (_2227 - _2128)) + _2128);
    float _2246 = (((_1233 * _1185) + _1234) * _1198) * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2249 = fma(_2246, cbSceneParam._m0[89u].z, fma(_2244, cbSceneParam._m0[89u].y, _2242 * cbSceneParam._m0[89u].x));
    float _2252 = fma(_2246, cbSceneParam._m0[90u].z, fma(_2244, cbSceneParam._m0[90u].y, _2242 * cbSceneParam._m0[90u].x));
    float _2255 = fma(_2246, cbSceneParam._m0[91u].z, fma(_2244, cbSceneParam._m0[91u].y, _2242 * cbSceneParam._m0[91u].x));
    uvec4 _2265 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2267 = _2265.x * 14u;
    uint _2268 = _2267 + 13u;
    float _2275 = _1198 + (-1.0);
    float _2280 = (cbLight._m0[_2268].x * _2275) + 1.0;
    float _2281 = (cbLight._m0[_2268].y * _2275) + 1.0;
    float _2282 = (cbLight._m0[_2268].z * _2275) + 1.0;
    float _2283 = (cbLight._m0[_2268].w * _2275) + 1.0;
    uint _2284 = _2267 + 5u;
    float _2290 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2294 = _2267 + 4u;
    float _2300 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2304 = _2267 | 1u;
    float _2315 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_1021, _1022, _1023));
    float _2318 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_1021, _1022, _1023));
    float _4588 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _4599 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * 0.3183098733425140380859375;
    float _2325 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2332 = ((cbLight._m0[_2284].x * _2290) * _2325) + ((cbLight._m0[_2294].x * _2300) * _2323);
    float _2333 = ((_2290 * cbLight._m0[_2284].y) * _2325) + ((_2300 * cbLight._m0[_2294].y) * _2323);
    float _2334 = ((_2290 * cbLight._m0[_2284].z) * _2325) + ((_2300 * cbLight._m0[_2294].z) * _2323);
    uvec4 _2338 = floatBitsToUint(cbLight._m0[_2267 + 12u]);
    bool _2340 = _2338.x == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2340)
    {
        _2351 = _2332;
        _2353 = _2333;
        _2355 = _2334;
    }
    else
    {
        uint _2359 = _2267 + 6u;
        float _2375 = (dot(vec3(cbLight._m0[_2267 + 2u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4610 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2378 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2351 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2332;
        _2353 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2333;
        _2355 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2334;
    }
    bool _2358 = _2338.y == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2358)
    {
        _2396 = _2351;
        _2398 = _2353;
        _2400 = _2355;
    }
    else
    {
        uint _2566 = _2267 + 7u;
        float _2582 = (dot(vec3(cbLight._m0[_2267 + 3u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4626 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2585 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2396 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2351;
        _2398 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2353;
        _2400 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2355;
    }
    uint _2403 = _2267 + 8u;
    float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _1024) * 0.949999988079071044921875);
    float _2417 = _2416 * _2416;
    float _2418 = cbLight._m0[_2267].x + _1100;
    float _2419 = cbLight._m0[_2267].y + _1101;
    float _2420 = cbLight._m0[_2267].z + _1102;
    float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
    float _2425 = _2424 * _2418;
    float _2426 = _2424 * _2419;
    float _2427 = _2424 * _2420;
    float _2428 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2267].xyz));
    float _4642 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _4653 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _2432 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2433 = dot(vec3(_1021, _1022, _1023), vec3(_2425, _2426, _2427));
    float _4664 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2425, _2426, _2427));
    float _4675 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2417 * _2417;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2454 = 0.959999978542327880859375 - _1179;
    float _2456 = 0.959999978542327880859375 - _1180;
    float _2457 = 0.959999978542327880859375 - _1181;
    float _2464 = 1.0 - _2417;
    float _2475 = (0.5 / (((_2432 * ((_2431 * _2464) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2464) + _2417) * _2431))) * _2431;
    float _4686 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    uint _2488 = _2267 + 9u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _1024) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2304].x + _1100;
    float _2502 = cbLight._m0[_2304].y + _1101;
    float _2503 = cbLight._m0[_2304].z + _1102;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2304].xyz));
    float _4697 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2515 = dot(vec3(_1021, _1022, _1023), vec3(_2508, _2509, _2510));
    float _4708 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2508, _2509, _2510));
    float _4719 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2500 * _2500;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2541 = 1.0 - _2500;
    float _2551 = (0.5 / (((_2432 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2541) + _2500) * _2514))) * _2514;
    float _4730 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2553 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    float _2563 = (((((_2534 * _2454) + _1182) * cbLight._m0[_2488].x) * _2553) * _2290) + (((((_2453 * _2454) + _1182) * cbLight._m0[_2403].x) * _2477) * _2300);
    float _2564 = (((((_2534 * _2456) + _1184) * cbLight._m0[_2488].y) * _2553) * _2290) + (((((_2453 * _2456) + _1184) * cbLight._m0[_2403].y) * _2477) * _2300);
    float _2565 = (((((_2534 * _2457) + _1185) * cbLight._m0[_2488].z) * _2553) * _2290) + (((((_2453 * _2457) + _1185) * cbLight._m0[_2403].z) * _2477) * _2300);
    float _2627;
    float _2629;
    float _2631;
    if (_2340)
    {
        _2627 = _2563;
        _2629 = _2564;
        _2631 = _2565;
    }
    else
    {
        uint _2633 = _2267 + 2u;
        uint _2637 = _2267 + 10u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _1024) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _1100;
        float _2654 = cbLight._m0[_2633].y + _1101;
        float _2655 = cbLight._m0[_2633].z + _1102;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2633].xyz));
        float _4741 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2667 = dot(vec3(_1021, _1022, _1023), vec3(_2660, _2661, _2662));
        float _4752 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4763 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2432 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2693) + _2652) * _2666))) * _2666;
        float _4774 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2627 = (((((_2686 * _2454) + _1182) * cbLight._m0[_2637].x) * _2705) * _2706) + _2563;
        _2629 = (((((_2686 * _2456) + _1184) * cbLight._m0[_2637].y) * _2705) * _2706) + _2564;
        _2631 = (((((_2686 * _2457) + _1185) * cbLight._m0[_2637].z) * _2705) * _2706) + _2565;
    }
    float _2741;
    float _2743;
    float _2745;
    if (_2358)
    {
        _2741 = _2627;
        _2743 = _2629;
        _2745 = _2631;
    }
    else
    {
        uint _2752 = _2267 + 3u;
        uint _2756 = _2267 + 11u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _1024) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _1100;
        float _2773 = cbLight._m0[_2752].y + _1101;
        float _2774 = cbLight._m0[_2752].z + _1102;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2752].xyz));
        float _4790 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2786 = dot(vec3(_1021, _1022, _1023), vec3(_2779, _2780, _2781));
        float _4801 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4812 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2432 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2812) + _2771) * _2785))) * _2785;
        float _4823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2741 = (((((_2805 * _2454) + _1182) * cbLight._m0[_2756].x) * _2824) * _2825) + _2627;
        _2743 = (((((_2805 * _2456) + _1184) * cbLight._m0[_2756].y) * _2824) * _2825) + _2629;
        _2745 = (((((_2805 * _2457) + _1185) * cbLight._m0[_2756].z) * _2824) * _2825) + _2631;
    }
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_2265.y == 0u)
    {
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2900;
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2900;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2900;
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.x;
        uint _2927 = uint((float(_2915.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1121) / _2916))) + floor(float(uint(cbSceneParam._m0[85u].x * _1120) / _2916)));
        float _2937 = (log2(_2903 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2938 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        uint _2941 = uint(isnan(14.0) ? _2938 : (isnan(_2938) ? 14.0 : min(_2938, 14.0)));
        uvec4 _2946 = texelFetch(g_lightClusterGridBuffer, int(((_2941 << 2u) + (_2927 << 6u)) >> 2u));
        uint _2947 = _2946.x;
        uint _2948 = _2915.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2948 >> 4u) & 15u)) + 4294967295u) & _2947) == 0u) || ((_2948 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            uint _3207 = 0u;
            uint _3216;
            bool _3217;
            for (;;)
            {
                _3216 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3207 << 2u)) >> 2u)).x;
                _3217 = _3216 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3217)
                {
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3216;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3207 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2901;
                        float _3413 = _3372.y - _2902;
                        float _3414 = _3372.z - _2903;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_1139, _1142, _1145), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4849 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3432 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3422) + _3433;
                        float _3439 = _3429 * _3429;
                        float _3443 = ((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3428) / ((_3439 * 0.699999988079071044921875) + 1.0);
                        float _3447 = (-0.0) - _2901;
                        float _3448 = (-0.0) - _2902;
                        float _3449 = (-0.0) - _2903;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3464 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _1214;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3454 + _3419;
                        float _3476 = _3455 + _3420;
                        float _3477 = _3456 + _3421;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_1139, _1142, _1145), vec3(_3454, _3455, _3456));
                        float _4865 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3489 = dot(vec3(_1139, _1142, _1145), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4876 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3432 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3422) + _3498;
                        float _4887 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4898 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3496 * _3496) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3276 = (_3443 * _3391.x) + _3349;
                        _3277 = (_3443 * _3391.y) + _3350;
                        _3278 = (_3443 * _3391.z) + _3351;
                        _3273 = (_3524 * _3408.x) + _3346;
                        _3274 = (_3524 * _3408.y) + _3347;
                        _3275 = (_3524 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_66_pred = _3273;
                    frontier_phi_66_pred_1 = _3278;
                    frontier_phi_66_pred_2 = _3277;
                    frontier_phi_66_pred_3 = _3276;
                    frontier_phi_66_pred_4 = _3275;
                    frontier_phi_66_pred_5 = _3274;
                }
                _3049 = frontier_phi_66_pred;
                _3059 = frontier_phi_66_pred_1;
                _3057 = frontier_phi_66_pred_2;
                _3055 = frontier_phi_66_pred_3;
                _3053 = frontier_phi_66_pred_4;
                _3051 = frontier_phi_66_pred_5;
                uint _3208 = _3207 + 1u;
                if (_3208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3201 = _3049;
                    _3202 = _3051;
                    _3203 = _3053;
                    _3204 = _3055;
                    _3205 = _3057;
                    _3206 = _3059;
                    _3207 = _3208;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((4294967295u << _3065) & _2947) == 0u)
        {
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
            _3179 = _3058;
        }
        else
        {
            float _3194 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
            float _3195 = _3194 * _2901;
            float _3196 = _3194 * _2902;
            float _3197 = _3194 * _2903;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3329 = _3048;
                float _3330 = _3050;
                float _3331 = _3052;
                float _3332 = _3054;
                float _3333 = _3056;
                float _3334 = _3058;
                uint _3335 = _3065;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3345)
                    {
                        frontier_phi_77_pred = _3334;
                        frontier_phi_77_pred_1 = _3333;
                        frontier_phi_77_pred_2 = _3332;
                        frontier_phi_77_pred_3 = _3331;
                        frontier_phi_77_pred_4 = _3330;
                        frontier_phi_77_pred_5 = _3329;
                    }
                    else
                    {
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        float _3554 = _3332;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        uint _3557 = _3344;
                        uint _3558;
                        vec4 _3583;
                        float _3584;
                        vec4 _3599;
                        vec3 _3611;
                        vec4 _3626;
                        vec4 _3641;
                        float _3687;
                        bool _3688;
                        for (;;)
                        {
                            uint _3568 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3557));
                            _3558 = (_3557 + 4294967295u) & _3557;
                            uint _3570 = _3568 * 40u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3584 = _3583.w;
                            uint _3586 = (_3568 * 40u) + 4u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3568 * 40u) + 8u;
                            _3611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x));
                            uint _3613 = (_3568 * 40u) + 16u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3568 * 40u) + 20u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3568 * 40u) + 24u;
                            vec4 _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3662 = (_3568 * 40u) + 28u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3687 = fma(_2903, _3675.z, fma(_2902, _3675.y, _3675.x * _2901)) + _3675.w;
                            _3688 = !((fma(_2903, _3656.z, fma(_2902, _3656.y, _3656.x * _2901)) + _3656.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3688)
                            {
                                float _3715 = _3583.x - _2901;
                                float _3716 = _3583.y - _2902;
                                float _3717 = _3583.z - _2903;
                                float _3718 = dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717));
                                float _3721 = inversesqrt(_3718);
                                float _3722 = _3721 * _3715;
                                float _3723 = _3721 * _3716;
                                float _3724 = _3721 * _3717;
                                float _3728 = 1.0 - (_3718 / (_3584 * _3584));
                                float _4909 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3733 = sqrt(_3718) * _3599.w;
                                float _3735 = 1.39999997615814208984375 / (_3733 + 1.39999997615814208984375);
                                float _3736 = _3735 * _3735;
                                float _3739 = ((1.0 - _3736) * dot(vec3(_3722, _3723, _3724), vec3(_1139, _1142, _1145))) + _3736;
                                float _3742 = _3733 * _3733;
                                float _3746 = (fma(_2903, _3626.z, fma(_2902, _3626.y, _3626.x * _2901)) + _3626.w) / _3687;
                                float _3747 = (fma(_2903, _3641.z, fma(_2902, _3641.y, _3641.x * _2901)) + _3641.w) / _3687;
                                float _3751 = 1.0 - dot(vec2(_3746, _3747), vec2(_3746, _3747));
                                float _4925 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3753 = _3752 * (((isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0))) * _3729) / ((_3742 * 0.699999988079071044921875) + 1.0));
                                float _3765 = exp2(log2(1.0 / ((_3742 * 3.5) + 5.0)) * 0.25);
                                float _3766 = 1.0 - _1214;
                                float _3773 = sqrt(1.0 - ((1.0 - (_3766 * _3766)) * (1.0 - (_3765 * _3765))));
                                float _3774 = _3773 * _3773;
                                float _3775 = _3774 * _3774;
                                float _3776 = _3722 - _3195;
                                float _3777 = _3723 - _3196;
                                float _3778 = _3724 - _3197;
                                float _3782 = inversesqrt(dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778)));
                                float _3786 = dot(vec3(_1139, _1142, _1145), vec3((-0.0) - _3195, (-0.0) - _3196, (-0.0) - _3197));
                                float _4936 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3790 = dot(vec3(_1139, _1142, _1145), vec3(_3782 * _3776, _3782 * _3777, _3782 * _3778));
                                float _4947 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3797 = ((_3793 * _3793) * (_3775 + (-1.0))) + 1.0;
                                float _3798 = _3735 * _3774;
                                float _3799 = _3798 * _3798;
                                float _3805 = ((1.0 - _3799) * dot(vec3(_1139, _1142, _1145), vec3(_3722, _3723, _3724))) + _3799;
                                float _4958 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3807 = 1.0 - _3774;
                                float _3817 = (0.5 / (((_3806 * ((_3789 * _3807) + _3774)) + 9.9999999392252902907785028219223e-09) + (((_3806 * _3807) + _3774) * _3789))) * _3806;
                                float _4969 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3827 = (_3752 * _3729) * (((_3775 * 3.1415927410125732421875) * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) / ((_3797 * _3797) * ((_3742 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3753 * _3599.y;
                                frontier_phi_83_pred_1 = _3753 * _3599.x;
                                frontier_phi_83_pred_2 = _3827 * _3611.z;
                                frontier_phi_83_pred_3 = _3827 * _3611.y;
                                frontier_phi_83_pred_4 = _3827 * _3611.x;
                                frontier_phi_83_pred_5 = _3753 * _3599.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3835 = frontier_phi_83_pred;
                            _3834 = frontier_phi_83_pred_1;
                            _3833 = frontier_phi_83_pred_2;
                            _3832 = frontier_phi_83_pred_3;
                            _3831 = frontier_phi_83_pred_4;
                            _3836 = frontier_phi_83_pred_5;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            if (_3558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3558;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3543;
                        frontier_phi_77_pred_1 = _3542;
                        frontier_phi_77_pred_2 = _3541;
                        frontier_phi_77_pred_3 = _3540;
                        frontier_phi_77_pred_4 = _3539;
                        frontier_phi_77_pred_5 = _3538;
                    }
                    _3180 = frontier_phi_77_pred;
                    _3178 = frontier_phi_77_pred_1;
                    _3176 = frontier_phi_77_pred_2;
                    _3174 = frontier_phi_77_pred_3;
                    _3172 = frontier_phi_77_pred_4;
                    _3170 = frontier_phi_77_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3170;
                        _3330 = _3172;
                        _3331 = _3174;
                        _3332 = _3176;
                        _3333 = _3178;
                        _3334 = _3180;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3174;
                frontier_phi_58_59_ladder_1 = _3180;
                frontier_phi_58_59_ladder_2 = _3178;
                frontier_phi_58_59_ladder_3 = _3176;
                frontier_phi_58_59_ladder_4 = _3172;
                frontier_phi_58_59_ladder_5 = _3170;
            }
            else
            {
                frontier_phi_58_59_ladder = _3052;
                frontier_phi_58_59_ladder_1 = _3058;
                frontier_phi_58_59_ladder_2 = _3056;
                frontier_phi_58_59_ladder_3 = _3054;
                frontier_phi_58_59_ladder_4 = _3050;
                frontier_phi_58_59_ladder_5 = _3048;
            }
            _3169 = frontier_phi_58_59_ladder_5;
            _3171 = frontier_phi_58_59_ladder_4;
            _3173 = frontier_phi_58_59_ladder;
            _3175 = frontier_phi_58_59_ladder_3;
            _3177 = frontier_phi_58_59_ladder_2;
            _3179 = frontier_phi_58_59_ladder_1;
        }
        float _3184 = isnan(1.0) ? _1198 : (isnan(_1198) ? 1.0 : min(_1198, 1.0));
        _2960 = (_3184 * _3175) + _2396;
        _2962 = (_3184 * _3177) + _2398;
        _2964 = (_3184 * _3179) + _2400;
        _2966 = ((_3169 * _1182) * _3184) + _2741;
        _2968 = ((_3171 * _1184) * _3184) + _2743;
        _2970 = ((_3173 * _1185) * _3184) + _2745;
    }
    else
    {
        _2960 = _2396;
        _2962 = _2398;
        _2964 = _2400;
        _2966 = _2741;
        _2968 = _2743;
        _2970 = _2745;
    }
    float _4985 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _4996 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _5007 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _2987 = ((isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2960 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1198))) + ((_2966 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2035)) * cbPerFrame._m0[3u].x);
    float _2988 = ((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2962 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1198))) + ((_2968 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2035)) * cbPerFrame._m0[3u].x);
    float _2989 = ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2964 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1198))) + ((_2970 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2035)) * cbPerFrame._m0[3u].x);
    uint _2990 = _271 + 6u;
    float _2998 = _1120 / cbSceneParam._m0[86u].x;
    float _2999 = _1121 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _1043 : (isnan(_1043) ? cbSceneParam._m0[77u].w : min(_1043, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_1043 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_1043) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1043 : min(cbSceneParam._m0[80u].w, _1043));
        float _3074 = _3073 / _1043;
        float _3085 = _3074 * _1093;
        float _3086 = _1094 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3089 = _3074 * _1095;
        float _3091 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3086;
        float _3099 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3286;
        if (abs((_3087 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3286 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3230 = 1.0 / cbSceneParam._m0[80u].x;
            float _3231 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3232 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            _3286 = ((abs(_3099 / _3087) * cbSceneParam._m0[80u].y) * ((((_3241 - _3242) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))))) * _3230)) - ((exp2(_3109 * _3241) - exp2(_3109 * _3242)) * _3230))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3288 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3297 = exp2((_3286 * (-1.44269502162933349609375)) * (1.0 - _3288.w));
        float _3298 = log2(_3297);
        float _3314 = log2(_3018);
        _3111 = (exp2(_3314 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].x)) * _3288.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3113 = (exp2(_3314 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].y)) * _3288.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3115 = (exp2(_3314 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].z)) * _3288.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3117 = _3297 * _3018;
    }
    else
    {
        _3111 = _3015;
        _3113 = _3016;
        _3115 = _3017;
        _3117 = _3018;
    }
    bool _3324;
    vec4 _3127;
    vec4 _3149;
    float _3151;
    float _3155;
    float _3156;
    float _3157;
    float _3158;
    bool _3168;
    for (;;)
    {
        _3127 = cbMatDynParam._m0[0u];
        float _3129 = roundEven(_3127.y);
        bool _3130 = _3129 == 3.0;
        float _3131 = log2(_3117);
        float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * _2987;
        float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * _2988;
        float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * _2989;
        float _3147 = _1109 + (-0.5);
        _3149 = cbMtdParam._m0[1u];
        _3151 = _3149.y * _3147;
        float _3154 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3155 = _3154 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
        _3156 = _3154 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
        _3157 = _3154 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
        _3158 = _3147 * 0.999000012874603271484375;
        _3168 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3168)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3158) < 0.5)
            {
                _3324 = true;
                break;
            }
        }
        uint _3265 = _1158 + uint(_3127.w);
        if ((cbInstanceData._m0[_3265].w < 1.0) && ((cbInstanceData._m0[_3265].w + _3158) < 0.5))
        {
            _3324 = true;
            break;
        }
        if ((_3151 + 1.0) < _3149.x)
        {
            _3324 = true;
            break;
        }
        _3324 = false;
        break;
    }
    float _3529;
    if (_3324)
    {
        discard_state = true;
        _3529 = 0.0;
    }
    else
    {
        _3529 = cbInstanceData._m0[_2990].w;
    }
    SV_Target.x = _3155;
    SV_Target.y = _3156;
    SV_Target.z = _3157;
    SV_Target.w = _3529;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2990].w;
    discard_exit();
}


