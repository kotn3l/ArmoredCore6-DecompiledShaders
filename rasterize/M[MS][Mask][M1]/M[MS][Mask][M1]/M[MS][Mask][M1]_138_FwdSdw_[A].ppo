#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1721;
float _4381;
float _4382;
float _4383;
float _4384;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _260 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _261 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _262 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _268 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _275 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _282 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _296 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _297 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4393 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4404 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _4415 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    uint _307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _312 = _307 + 1u;
    uint _316 = _307 + 2u;
    float _325 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _326 = _325 * TEXCOORD.z;
    float _327 = _325 * TEXCOORD.w;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _326) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _327) + cbTextureTilingScale._m0[13u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _326) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _327) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _446 = _444.x;
    float _458 = dot(vec4(_446, _444.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _475 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_446 - _458) * cbMtdParam._m0[23u].w) + _458) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4426 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _483 = (_476 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _484 = (_476 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _485 = (_476 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _524 = _522.x;
    float _534 = dot(vec4(_524, _522.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _548 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_524 - _534) * cbMtdParam._m0[23u].w) + _534) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4437 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _556 = (_549 * ((_502.x * cbMtdParam._m0[13u].x) - _483)) + _483;
    float _557 = (_549 * ((_502.y * cbMtdParam._m0[13u].y) - _484)) + _484;
    float _558 = (_549 * ((_502.z * cbMtdParam._m0[13u].z) - _485)) + _485;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _326) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _327) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _409.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[23u].w) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4448 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _626 = (_619 * ((_577.x * cbMtdParam._m0[14u].x) - _556)) + _556;
    float _627 = (_619 * ((_577.y * cbMtdParam._m0[14u].y) - _557)) + _557;
    float _628 = (_619 * ((_577.z * cbMtdParam._m0[14u].z) - _558)) + _558;
    float _632 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _340.x) * _626;
    float _635 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _340.y) * _627;
    float _638 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _340.z) * _628;
    float _645 = ((_626 - _632) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) + _632;
    float _646 = ((_627 - _635) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) + _635;
    float _647 = ((_628 - _638) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) + _638;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _326) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _327) + cbTextureTilingScale._m0[14u].w));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _326) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _327) + cbTextureTilingScale._m0[20u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _326) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _327) + cbTextureTilingScale._m0[4u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _726 = _724.x;
    float _727 = _724.y;
    float _728 = _724.z;
    float _735 = ((_707.x - _726) * _476) + _726;
    float _736 = ((_707.y - _727) * _476) + _727;
    float _737 = ((_707.z - _728) * _476) + _728;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _326) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _327) + cbTextureTilingScale._m0[2u].w));
    float _760 = ((_749.x - _735) * _549) + _735;
    float _761 = ((_749.y - _736) * _549) + _736;
    float _762 = ((_749.z - _737) * _549) + _737;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _326) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _327) + cbTextureTilingScale._m0[23u].w));
    float _787 = ((_774.z - _762) * _619) + _762;
    float _790 = ((((_774.x - _760) * _619) + _760) * 2.0) + (-1.0);
    float _791 = ((((_774.y - _761) * _619) + _761) * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4459 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _797 = sqrt(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _326) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _327) + cbTextureTilingScale._m0[11u].w));
    float _838 = _836.x;
    float _839 = 1.0 - _838;
    float _847 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _850 = ((isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : min(_847, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _859 = (_850 - ((((((_838 - _839) * cbMtdParam._m0[24u].z) + _839) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _850))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4480 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _867 = (_860 * ((_665.x * cbMtdParam._m0[18u].x) - _645)) + _645;
    float _868 = (_860 * ((_665.y * cbMtdParam._m0[18u].y) - _646)) + _646;
    float _869 = (_860 * ((_665.z * cbMtdParam._m0[18u].z) - _647)) + _647;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _326) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _327) + cbTextureTilingScale._m0[19u].w));
    float _883 = _881.x;
    float _884 = 1.0 - _883;
    float _909 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_883 - _884) * cbMtdParam._m0[24u].w) + _884) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4491 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _910 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _918 = ((((cbMtdParam._m0[10u].x - _867) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _910) + _867;
    float _919 = ((((cbMtdParam._m0[10u].y - _868) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _910) + _868;
    float _920 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _869)) * _910) + _869;
    vec4 _946 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _948 = _946.x;
    float _966 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _326) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _327) + cbTextureTilingScale._m0[9u].w)).x - _948) * _476) + _948;
    float _983 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _326) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _327) + cbTextureTilingScale._m0[21u].w)).x - _966) * _549) + _966;
    float _1000 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _326) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _327) + cbTextureTilingScale._m0[10u].w)).x - _983) * _619) + _983;
    float _1004 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1000) * cbMtdParam._m0[19u].z) + _1000;
    float _1006 = _1004 - (_1004 * _860);
    float _1008 = _1006 - (_1006 * _910);
    float _1013 = (((_684.z - _787) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _787;
    float _1017 = ((_811.z - _1013) * cbMtdParam._m0[19u].w) + _1013;
    vec4 _1033 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _326) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _327) + cbTextureTilingScale._m0[15u].w));
    float _1040 = (_1033.x * 2.0) + (-1.0);
    float _1041 = (_1033.y * 2.0) + (-1.0);
    float _1042 = dot(vec2(_1040, _1041), vec2(_1040, _1041));
    float _4502 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1050 = (_860 * (_1033.z - _1017)) + _1017;
    float _1053 = ((cbMtdParam._m0[23u].x - _1050) * _910) + _1050;
    vec4 _1076 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _326) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _327) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1082 = (_1076.x * 2.0) + (-1.0);
    float _1083 = (_1076.y * 2.0) + (-1.0);
    float _1084 = dot(vec2(_1082, _1083), vec2(_1082, _1083));
    float _4513 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1098 = (_790 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_684.x * 2.0) + (-1.0)))) + (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1099 = (_791 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_684.y * 2.0) + (-1.0)))) + (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1111 = (((_1040 - _1098) + (cbMtdParam._m0[21u].x * _1098)) * _860) + _1098;
    float _1112 = (((_1041 - _1099) + (cbMtdParam._m0[21u].x * _1099)) * _860) + _1099;
    float _1113 = (_860 * (sqrt(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) - _797)) + _797;
    float _1124 = (((_1082 - _1111) + (_1111 * cbMtdParam._m0[22u].z)) * _910) + _1111;
    float _1125 = (((_1083 - _1112) + (_1112 * cbMtdParam._m0[22u].z)) * _910) + _1112;
    float _1126 = ((sqrt(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) - _1113) * _910) + _1113;
    float _1128 = cbMtdParam._m0[22u].x + _811.w;
    float _1131 = fma(_1126, _275 * NORMAL.x, fma(_1125, _282 * TANGENT.x, (_268 * _260) * _1124));
    float _1134 = fma(_1126, _275 * NORMAL.y, fma(_1125, _282 * TANGENT.y, (_268 * _261) * _1124));
    float _1137 = fma(_1126, _275 * NORMAL.z, fma(_1125, _282 * TANGENT.z, (_268 * _262) * _1124));
    float _1141 = inversesqrt(dot(vec3(_1131, _1134, _1137), vec3(_1131, _1134, _1137)));
    float _1142 = _1141 * _1131;
    float _1143 = _1141 * _1134;
    float _1144 = _1141 * _1137;
    float _4524 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1145 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _4535 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4546 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4557 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4568 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4579 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1150 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _1164 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1214 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1204);
    float _1215 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1204);
    float _1216 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1204);
    float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
    float _1221 = _1214 * _1220;
    float _1222 = _1215 * _1220;
    float _1223 = _1216 * _1220;
    vec4 _1228 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1230 = _1228.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1402 = sqrt(((_1214 * _1214) + (_1215 * _1215)) + (_1216 * _1216));
        float _1408 = (cbMatDynParam._m0[5u].x * _1402) + cbMatDynParam._m0[5u].y;
        float _4590 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1413 = (cbMatDynParam._m0[5u].z * _1402) + cbMatDynParam._m0[5u].w;
        float _4601 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) - _1409)) + _1409) < ((_1230 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1241 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1242 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1260 = fma(_1144, cbSceneParam._m0[5u].z, fma(_1143, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1142));
    float _1263 = fma(_1144, cbSceneParam._m0[6u].z, fma(_1143, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1142));
    float _1266 = fma(_1144, cbSceneParam._m0[7u].z, fma(_1143, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1142));
    uint _1279 = _307 + 9u;
    uint _1280 = _1279 + uint(cbMatDynParam._m0[0u].w);
    float _1286 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * cbInstanceData._m0[_1280].x;
    float _1287 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * cbInstanceData._m0[_1280].y;
    float _1288 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * cbInstanceData._m0[_1280].z;
    float _4612 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1289 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _4623 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
    float _1290 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _4634 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
    float _1291 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _1292 = 1.0 - _1150;
    float _1293 = _1289 * _1292;
    float _1294 = _1290 * _1292;
    float _1295 = _1291 * _1292;
    float _1300 = (_1289 + (-0.039999999105930328369140625)) * _1150;
    float _1301 = (_1290 + (-0.039999999105930328369140625)) * _1150;
    float _1302 = (_1291 + (-0.039999999105930328369140625)) * _1150;
    float _1303 = _1300 + 0.039999999105930328369140625;
    float _1305 = _1301 + 0.039999999105930328369140625;
    float _1306 = _1302 + 0.039999999105930328369140625;
    vec4 _1315 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1241, cbSceneParam._m0[86u].y * _1242));
    float _1319 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * TEXCOORD_5.w) * _1315.x;
    float _1320 = dot(vec3(_1142, _1143, _1144), vec3(_1221, _1222, _1223));
    float _1323 = _1320 * 2.0;
    float _1327 = (_1323 * _1142) - _1221;
    float _1328 = (_1323 * _1143) - _1222;
    float _1329 = (_1323 * _1144) - _1223;
    float _1333 = abs(dot(vec3(_1221, _1222, _1223), vec3(_1142, _1143, _1144)));
    float _4645 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1335 = sqrt(_1145);
    float _1348 = exp2((_1335 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1335 * 3.0));
    float _1354 = (1.0 - _1348) * ((_1335 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1355 = _1348 * _1335;
    float _1383 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1391 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1720;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1445 = fma(_1391, cbModelParam._m0[26u].z, fma(_1387, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383));
        float _1449 = fma(_1391, cbModelParam._m0[27u].z, fma(_1387, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383));
        float _1453 = fma(_1391, cbModelParam._m0[28u].z, fma(_1387, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383));
        float _1478 = _1383 + _1142;
        float _1479 = _1387 + _1143;
        float _1480 = _1391 + _1144;
        float _1490 = fma(_1480, cbModelParam._m0[26u].z, fma(_1479, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1478)) - _1445;
        float _1491 = fma(_1480, cbModelParam._m0[27u].z, fma(_1479, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1478)) - _1449;
        float _1492 = fma(_1480, cbModelParam._m0[28u].z, fma(_1479, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1478)) - _1453;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1445 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1449 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[34u].z) + ((((((_1453 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1548 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1514.x + (-0.5));
        float _1550 = _1548 * (_1514.y + (-0.5));
        float _1551 = _1548 * (_1514.z + (-0.5));
        float _1558 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1521.x + (-0.5));
        float _1560 = _1558 * (_1521.y + (-0.5));
        float _1561 = _1558 * (_1521.z + (-0.5));
        float _1568 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1528.x + (-0.5));
        float _1570 = _1568 * (_1528.y + (-0.5));
        float _1571 = _1568 * (_1528.z + (-0.5));
        float _1578 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1535.x + (-0.5));
        float _1580 = _1578 * (_1535.y + (-0.5));
        float _1581 = _1578 * (_1535.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1602 = (dot(vec3(_1142, _1143, _1144), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4671 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1612 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4682 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4693 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_1614 + 1.0))) + _1619) * _1582;
        float _1629 = _1550 * 0.5;
        float _1630 = _1560 * 0.5;
        float _1631 = _1570 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_1142, _1143, _1144), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4704 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4715 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4726 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_1656 + 1.0))) + _1661) * _1583;
        float _1671 = _1551 * 0.5;
        float _1672 = _1561 * 0.5;
        float _1673 = _1571 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_1142, _1143, _1144), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4737 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4748 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4759 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_1698 + 1.0))) + _1703) * _1584;
        _1720 = _1551;
        _1722 = _1550;
        _1723 = _1549;
        _1724 = _1561;
        _1725 = _1560;
        _1726 = _1559;
        _1727 = _1571;
        _1728 = _1570;
        _1729 = _1569;
        _1730 = _1584;
        _1731 = _1583;
        _1732 = _1582;
        _1733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1721;
        _1722 = _1721;
        _1723 = _1721;
        _1724 = _1721;
        _1725 = _1721;
        _1726 = _1721;
        _1727 = _1721;
        _1728 = _1721;
        _1729 = _1721;
        _1730 = _1721;
        _1731 = _1721;
        _1732 = _1721;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1761 = fma(_1391, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383));
        float _1765 = fma(_1391, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383));
        float _1769 = fma(_1391, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383));
        float _1792 = _1383 + _1142;
        float _1793 = _1387 + _1143;
        float _1794 = _1391 + _1144;
        float _1804 = fma(_1794, cbModelParam._m0[30u].z, fma(_1793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1792)) - _1761;
        float _1805 = fma(_1794, cbModelParam._m0[31u].z, fma(_1793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1792)) - _1765;
        float _1806 = fma(_1794, cbModelParam._m0[32u].z, fma(_1793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1792)) - _1769;
        float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
        float _1823 = ((_1810 * _1804) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1761 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1824 = ((_1810 * _1805) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1765 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1825 = ((_1810 * _1806) / cbModelParam._m0[35u].z) + ((((((_1769 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1827 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1834 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1841 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1848 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        float _1860 = exp2((_1827.w + (-0.5)) * 20.0) * 2.0;
        float _1861 = _1860 * (_1827.x + (-0.5));
        float _1862 = _1860 * (_1827.y + (-0.5));
        float _1863 = _1860 * (_1827.z + (-0.5));
        float _1870 = exp2((_1834.w + (-0.5)) * 20.0) * 2.0;
        float _1871 = _1870 * (_1834.x + (-0.5));
        float _1872 = _1870 * (_1834.y + (-0.5));
        float _1873 = _1870 * (_1834.z + (-0.5));
        float _1880 = exp2((_1841.w + (-0.5)) * 20.0) * 2.0;
        float _1881 = _1880 * (_1841.x + (-0.5));
        float _1882 = _1880 * (_1841.y + (-0.5));
        float _1883 = _1880 * (_1841.z + (-0.5));
        float _1890 = exp2((_1848.w + (-0.5)) * 20.0) * 2.0;
        float _1891 = _1890 * (_1848.x + (-0.5));
        float _1892 = _1890 * (_1848.y + (-0.5));
        float _1893 = _1890 * (_1848.z + (-0.5));
        float _1894 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1895 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1896 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1897 = _1861 * 0.5;
        float _1898 = _1871 * 0.5;
        float _1899 = _1881 * 0.5;
        float _1900 = dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899));
        float _1905 = (_1900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1900);
        float _1913 = (dot(vec3(_1142, _1143, _1144), vec3(_1905 * _1897, _1905 * _1898, _1905 * _1899)) + 1.0) * 0.5;
        float _4800 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1922 = sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899)) / (_1894 + 9.9999997473787516355514526367188e-06);
        float _4811 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _1924 = _1923 * 2.0;
        float _1928 = (1.0 - _1923) / (_1923 + 1.0);
        float _4822 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _1938 = ((((1.0 - _1929) * (_1924 + 2.0)) * exp2(log2(isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_1924 + 1.0))) + _1929) * _1894;
        float _1939 = _1862 * 0.5;
        float _1940 = _1872 * 0.5;
        float _1941 = _1882 * 0.5;
        float _1942 = dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941));
        float _1947 = (_1942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1942);
        float _1955 = (dot(vec3(_1142, _1143, _1144), vec3(_1947 * _1939, _1947 * _1940, _1947 * _1941)) + 1.0) * 0.5;
        float _4833 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941)) / (_1895 + 9.9999997473787516355514526367188e-06);
        float _4844 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _1966 = _1965 * 2.0;
        float _1970 = (1.0 - _1965) / (_1965 + 1.0);
        float _4855 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _1980 = ((((1.0 - _1971) * (_1966 + 2.0)) * exp2(log2(isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_1966 + 1.0))) + _1971) * _1895;
        float _1981 = _1863 * 0.5;
        float _1982 = _1873 * 0.5;
        float _1983 = _1883 * 0.5;
        float _1984 = dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983));
        float _1989 = (_1984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1984);
        float _1997 = (dot(vec3(_1142, _1143, _1144), vec3(_1989 * _1981, _1989 * _1982, _1989 * _1983)) + 1.0) * 0.5;
        float _4866 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2006 = sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983)) / (_1896 + 9.9999997473787516355514526367188e-06);
        float _4877 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2008 = _2007 * 2.0;
        float _2012 = (1.0 - _2007) / (_2007 + 1.0);
        float _4888 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2022 = ((((1.0 - _2013) * (_2008 + 2.0)) * exp2(log2(isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2008 + 1.0))) + _2013) * _1896;
        _2030 = _1863;
        _2031 = _1862;
        _2032 = _1861;
        _2033 = _1873;
        _2034 = _1872;
        _2035 = _1871;
        _2036 = _1883;
        _2037 = _1882;
        _2038 = _1881;
        _2039 = _1896;
        _2040 = _1895;
        _2041 = _1894;
        _2042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)));
        _2043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
        _2044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
    }
    else
    {
        _2030 = _1721;
        _2031 = _1721;
        _2032 = _1721;
        _2033 = _1721;
        _2034 = _1721;
        _2035 = _1721;
        _2036 = _1721;
        _2037 = _1721;
        _2038 = _1721;
        _2039 = _1721;
        _2040 = _1721;
        _2041 = _1721;
        _2042 = 0.0;
        _2043 = 0.0;
        _2044 = 0.0;
    }
    float _2054 = (cbModelParam._m0[1u].x * (_2042 - _1733)) + _1733;
    float _2055 = (cbModelParam._m0[1u].x * (_2043 - _1734)) + _1734;
    float _2056 = (cbModelParam._m0[1u].x * (_2044 - _1735)) + _1735;
    float _2077 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2054));
    float _2098 = _1327 * 0.5;
    float _2099 = _1328 * 0.5;
    float _2100 = _1329 * 0.5;
    float _2101 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2032, _2035, _2038, _2041));
    float _2104 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2031, _2034, _2037, _2040));
    float _2107 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2030, _2033, _2036, _2039));
    float _2141;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2114 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1720, _1724, _1727, _1730));
        float _2118 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1722, _1725, _1728, _1731));
        float _2122 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1723, _1726, _1729, _1732));
        float _2129 = dot(vec4(cbModelParam._m0[39u]), vec4(_2098, _2099, _2100, 1.0));
        _2141 = dot(vec3(isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0)), isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)), isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2129) ? 0.0 : (isnan(0.0) ? _2129 : max(0.0, _2129))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2141 = 1.0;
    }
    float _2152;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2143 = dot(vec4(cbModelParam._m0[40u]), vec4(_2098, _2099, _2100, 1.0));
        _2152 = dot(vec3(isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)), isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)), isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2143) ? 0.0 : (isnan(0.0) ? _2143 : max(0.0, _2143))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2152 = 1.0;
    }
    float _2156 = (_2152 * cbModelParam._m0[1u].x) + (_2141 * (1.0 - cbModelParam._m0[1u].x));
    float _2166 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1145);
    float _2167 = isnan(_2166) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2166 : min(cbModelParam._m0[25u].z, _2166));
    float _2247;
    float _2249;
    float _2251;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2214 = fma(_1391, cbModelParam._m0[13u].z, fma(_1387, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1383)) + cbModelParam._m0[13u].w;
        float _2218 = fma(_1391, cbModelParam._m0[14u].z, fma(_1387, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1383)) + cbModelParam._m0[14u].w;
        float _2222 = fma(_1391, cbModelParam._m0[15u].z, fma(_1387, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1383)) + cbModelParam._m0[15u].w;
        float _2225 = fma(_1329, cbModelParam._m0[13u].z, fma(_1328, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1327));
        float _2228 = fma(_1329, cbModelParam._m0[14u].z, fma(_1328, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1327));
        float _2231 = fma(_1329, cbModelParam._m0[15u].z, fma(_1328, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1327));
        float _2259;
        if (_2225 > 0.0)
        {
            _2259 = abs((1.0 - _2214) / _2225);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2214 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2259 = frontier_phi_17_15_ladder;
        }
        float _2430;
        if (_2228 > 0.0)
        {
            _2430 = abs((1.0 - _2218) / _2228);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2218 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2430 = frontier_phi_26_22_ladder;
        }
        float _2725;
        if (_2231 > 0.0)
        {
            _2725 = abs((1.0 - _2222) / _2231);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2222 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2725 = frontier_phi_38_33_ladder;
        }
        float _2727 = isnan(_2430) ? _2259 : (isnan(_2259) ? _2430 : min(_2259, _2430));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _2225) + _2214;
        float _2733 = (_2728 * _2228) + _2218;
        float _2734 = (_2728 * _2231) + _2222;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2737 = (-1.0) - _2735;
        float _2739 = _2735 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2734 > _2739) || ((_2734 < _2737) || ((_2733 > _2739) || ((_2733 < _2737) || ((_2732 < _2737) || (_2732 > _2739))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2734, cbModelParam._m0[9u].z, fma(_2733, cbModelParam._m0[9u].y, _2732 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2734, cbModelParam._m0[10u].z, fma(_2733, cbModelParam._m0[10u].y, _2732 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2734, cbModelParam._m0[11u].z, fma(_2733, cbModelParam._m0[11u].y, _2732 * cbModelParam._m0[11u].x))), _2167);
            frontier_phi_16_38_ladder = _2879.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2879.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2879.x * cbModelParam._m0[1u].y;
        }
        _2247 = frontier_phi_16_38_ladder_2;
        _2249 = frontier_phi_16_38_ladder_1;
        _2251 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1327, _1328, _1329), _2167);
        _2247 = _2235.x * cbModelParam._m0[1u].y;
        _2249 = _2235.y * cbModelParam._m0[1u].y;
        _2251 = _2235.z * cbModelParam._m0[1u].y;
    }
    float _2255 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1145);
    float _2256 = isnan(_2255) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2255 : min(cbModelParam._m0[25u].w, _2255));
    float _2345;
    float _2347;
    float _2349;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2309 = fma(_1391, cbModelParam._m0[21u].z, fma(_1387, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1383)) + cbModelParam._m0[21u].w;
        float _2313 = fma(_1391, cbModelParam._m0[22u].z, fma(_1387, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1383)) + cbModelParam._m0[22u].w;
        float _2317 = fma(_1391, cbModelParam._m0[23u].z, fma(_1387, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1383)) + cbModelParam._m0[23u].w;
        float _2320 = fma(_1329, cbModelParam._m0[21u].z, fma(_1328, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1327));
        float _2323 = fma(_1329, cbModelParam._m0[22u].z, fma(_1328, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1327));
        float _2326 = fma(_1329, cbModelParam._m0[23u].z, fma(_1328, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1327));
        float _2435;
        if (_2320 > 0.0)
        {
            _2435 = abs((1.0 - _2309) / _2320);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2320 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2309 + 1.0) / _2320);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2435 = frontier_phi_28_24_ladder;
        }
        float _2752;
        if (_2323 > 0.0)
        {
            _2752 = abs((1.0 - _2313) / _2323);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2323 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2313 + 1.0) / _2323);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2752 = frontier_phi_40_35_ladder;
        }
        float _3090;
        if (_2326 > 0.0)
        {
            _3090 = abs((1.0 - _2317) / _2326);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2326 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2317 + 1.0) / _2326);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3090 = frontier_phi_50_47_ladder;
        }
        float _3092 = isnan(_2752) ? _2435 : (isnan(_2435) ? _2752 : min(_2435, _2752));
        float _3093 = isnan(_3090) ? _3092 : (isnan(_3092) ? _3090 : min(_3092, _3090));
        float _3097 = (_3093 * _2320) + _2309;
        float _3098 = (_3093 * _2323) + _2313;
        float _3099 = (_3093 * _2326) + _2317;
        float _3100 = _3093 * 9.9999997473787516355514526367188e-05;
        float _3101 = (-1.0) - _3100;
        float _3103 = _3100 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3099 > _3103) || ((_3099 < _3101) || ((_3098 > _3103) || ((_3098 < _3101) || ((_3097 < _3101) || (_3097 > _3103))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3221 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3099, cbModelParam._m0[17u].z, fma(_3098, cbModelParam._m0[17u].y, _3097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3099, cbModelParam._m0[18u].z, fma(_3098, cbModelParam._m0[18u].y, _3097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3099, cbModelParam._m0[19u].z, fma(_3098, cbModelParam._m0[19u].y, _3097 * cbModelParam._m0[19u].x))), _2256);
            frontier_phi_25_50_ladder = _3221.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3221.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3221.x * cbModelParam._m0[1u].z;
        }
        _2345 = frontier_phi_25_50_ladder_2;
        _2347 = frontier_phi_25_50_ladder_1;
        _2349 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2329 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1327, _1328, _1329), _2256);
        _2345 = _2329.x * cbModelParam._m0[1u].z;
        _2347 = _2329.y * cbModelParam._m0[1u].z;
        _2349 = _2329.z * cbModelParam._m0[1u].z;
    }
    float _2362 = (((_1354 * _1303) + _1355) * _1319) * ((cbModelParam._m0[1u].w * (_2345 - _2247)) + _2247);
    float _2364 = (((_1354 * _1305) + _1355) * _1319) * ((cbModelParam._m0[1u].w * (_2347 - _2249)) + _2249);
    float _2366 = (((_1354 * _1306) + _1355) * _1319) * ((cbModelParam._m0[1u].w * (_2349 - _2251)) + _2251);
    float _2369 = fma(_2366, cbSceneParam._m0[89u].z, fma(_2364, cbSceneParam._m0[89u].y, _2362 * cbSceneParam._m0[89u].x));
    float _2372 = fma(_2366, cbSceneParam._m0[90u].z, fma(_2364, cbSceneParam._m0[90u].y, _2362 * cbSceneParam._m0[90u].x));
    float _2375 = fma(_2366, cbSceneParam._m0[91u].z, fma(_2364, cbSceneParam._m0[91u].y, _2362 * cbSceneParam._m0[91u].x));
    float _2409 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2421 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2422 = _2409 / _2421;
    float _2423 = _2413 / _2421;
    float _2424 = _2417 / _2421;
    float _2571;
    float _2572;
    float _2573;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2451 = ((uint(_2424 > cbSceneParam._m0[59u].y) + uint(_2424 > cbSceneParam._m0[59u].x)) + uint(_2424 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2452 = _2451 + 43u;
        uint _2460 = _2451 + 44u;
        uint _2468 = _2451 + 45u;
        uint _2476 = _2451 + 46u;
        float _2487 = fma(_2421, cbSceneParam._m0[_2452].w, fma(_2417, cbSceneParam._m0[_2452].z, fma(_2413, cbSceneParam._m0[_2452].y, _2409 * cbSceneParam._m0[_2452].x)));
        float _2491 = fma(_2421, cbSceneParam._m0[_2460].w, fma(_2417, cbSceneParam._m0[_2460].z, fma(_2413, cbSceneParam._m0[_2460].y, _2409 * cbSceneParam._m0[_2460].x)));
        float _2499 = fma(_2421, cbSceneParam._m0[_2476].w, fma(_2417, cbSceneParam._m0[_2476].z, fma(_2413, cbSceneParam._m0[_2476].y, _2409 * cbSceneParam._m0[_2476].x)));
        float _2504 = cbSceneParam._m0[33u].z * _2499;
        float _2506 = cbSceneParam._m0[33u].w * _2499;
        float _2509 = fma(_2421, cbSceneParam._m0[_2468].w, fma(_2417, cbSceneParam._m0[_2468].z, fma(_2413, cbSceneParam._m0[_2468].y, _2409 * cbSceneParam._m0[_2468].x))) / _2499;
        float _2557 = (cbSceneParam._m0[33u].x - sqrt(((_2423 * _2423) + (_2422 * _2422)) + (_2424 * _2424))) * cbSceneParam._m0[33u].y;
        float _5014 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2564 = (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2504 + _2487) / _2499, (_2506 + _2491) / _2499), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2506 + _2487) / _2499, (_2491 - _2504) / _2499), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2487 - _2504) / _2499, (_2491 - _2506) / _2499), _2509), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2487 - _2506) / _2499, (_2504 + _2491) / _2499), _2509), 0.0)).x), vec4(0.25)));
        _2571 = 1.0 - (_2564 * cbSceneParam._m0[34u].x);
        _2572 = 1.0 - (_2564 * cbSceneParam._m0[34u].y);
        _2573 = 1.0 - (_2564 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2571 = 1.0;
        _2572 = 1.0;
        _2573 = 1.0;
    }
    float _2637;
    float _2639;
    float _2641;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2625 = fma(_2421, cbSceneParam._m0[63u].w, fma(_2417, cbSceneParam._m0[63u].z, fma(_2413, cbSceneParam._m0[63u].y, _2409 * cbSceneParam._m0[63u].x)));
        float _2626 = fma(_2421, cbSceneParam._m0[60u].w, fma(_2417, cbSceneParam._m0[60u].z, fma(_2413, cbSceneParam._m0[60u].y, _2409 * cbSceneParam._m0[60u].x))) / _2625;
        float _2627 = fma(_2421, cbSceneParam._m0[61u].w, fma(_2417, cbSceneParam._m0[61u].z, fma(_2413, cbSceneParam._m0[61u].y, _2409 * cbSceneParam._m0[61u].x))) / _2625;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2626 >= cbSceneParam._m0[64u].x) && (_2627 >= cbSceneParam._m0[64u].y)) && (_2626 <= cbSceneParam._m0[64u].z)) && (_2627 <= cbSceneParam._m0[64u].w))
        {
            float _2765 = fma(_2421, cbSceneParam._m0[62u].w, fma(_2417, cbSceneParam._m0[62u].z, fma(_2413, cbSceneParam._m0[62u].y, _2409 * cbSceneParam._m0[62u].x))) / _2625;
            float _2769 = isnan(cbSceneParam._m0[41u].w) ? _2765 : (isnan(_2765) ? cbSceneParam._m0[41u].w : max(_2765, cbSceneParam._m0[41u].w));
            float _2812 = (cbSceneParam._m0[33u].x - sqrt(((_2423 * _2423) + (_2422 * _2422)) + (_2424 * _2424))) * cbSceneParam._m0[33u].y;
            float _5030 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
            float _2819 = (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2626, cbSceneParam._m0[33u].w + _2627), _2769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2626, _2627 - cbSceneParam._m0[33u].z), _2769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2626 - cbSceneParam._m0[33u].z, _2627 - cbSceneParam._m0[33u].w), _2769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2626 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2627), _2769), 0.0)).x), vec4(0.25)));
            float _2823 = 1.0 - (_2819 * cbSceneParam._m0[34u].x);
            float _2824 = 1.0 - (_2819 * cbSceneParam._m0[34u].y);
            float _2825 = 1.0 - (_2819 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2825) ? _2573 : (isnan(_2573) ? _2825 : min(_2573, _2825));
            frontier_phi_37_36_ladder_1 = isnan(_2824) ? _2572 : (isnan(_2572) ? _2824 : min(_2572, _2824));
            frontier_phi_37_36_ladder_2 = isnan(_2823) ? _2571 : (isnan(_2571) ? _2823 : min(_2571, _2823));
        }
        else
        {
            frontier_phi_37_36_ladder = _2573;
            frontier_phi_37_36_ladder_1 = _2572;
            frontier_phi_37_36_ladder_2 = _2571;
        }
        _2637 = frontier_phi_37_36_ladder_2;
        _2639 = frontier_phi_37_36_ladder_1;
        _2641 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2637 = _2571;
        _2639 = _2572;
        _2641 = _2573;
    }
    uvec4 _2646 = floatBitsToUint(cbInstanceData._m0[_307 + 5u]);
    uint _2648 = _2646.x * 14u;
    uint _2649 = _2648 + 13u;
    float _2656 = _1319 + (-1.0);
    float _2661 = (cbLight._m0[_2649].x * _2656) + 1.0;
    float _2662 = (cbLight._m0[_2649].y * _2656) + 1.0;
    float _2663 = (cbLight._m0[_2649].z * _2656) + 1.0;
    float _2664 = (cbLight._m0[_2649].w * _2656) + 1.0;
    uint _2665 = _2648 + 5u;
    float _2671 = isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0));
    uint _2675 = _2648 + 4u;
    float _2684 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    uint _2688 = _2648 | 1u;
    float _2699 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_1142, _1143, _1144));
    float _2702 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_1142, _1143, _1144));
    float _5066 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _5077 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2707 = (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * 0.3183098733425140380859375;
    float _2709 = (isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * 0.3183098733425140380859375;
    float _2716 = ((cbLight._m0[_2665].x * _2671) * _2709) + (((cbLight._m0[_2675].x * _2637) * _2684) * _2707);
    float _2717 = ((_2671 * cbLight._m0[_2665].y) * _2709) + (((cbLight._m0[_2675].y * _2639) * _2684) * _2707);
    float _2718 = ((_2671 * cbLight._m0[_2665].z) * _2709) + (((cbLight._m0[_2675].z * _2641) * _2684) * _2707);
    uvec4 _2722 = floatBitsToUint(cbLight._m0[_2648 + 12u]);
    bool _2724 = _2722.x == 0u;
    float _2826;
    float _2828;
    float _2830;
    if (_2724)
    {
        _2826 = _2716;
        _2828 = _2717;
        _2830 = _2718;
    }
    else
    {
        uint _2834 = _2648 + 6u;
        float _2850 = (dot(vec3(cbLight._m0[_2648 + 2u].xyz), vec3(_1142, _1143, _1144)) * 0.5) + 0.5;
        float _2851 = _2850 * _2850;
        float _5088 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2852 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
        float _2853 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
        _2826 = (((cbLight._m0[_2834].x * 0.3183098733425140380859375) * _2852) * _2853) + _2716;
        _2828 = (((cbLight._m0[_2834].y * 0.3183098733425140380859375) * _2852) * _2853) + _2717;
        _2830 = (((cbLight._m0[_2834].z * 0.3183098733425140380859375) * _2852) * _2853) + _2718;
    }
    bool _2833 = _2722.y == 0u;
    float _2888;
    float _2890;
    float _2892;
    if (_2833)
    {
        _2888 = _2826;
        _2890 = _2828;
        _2892 = _2830;
    }
    else
    {
        uint _3061 = _2648 + 7u;
        float _3077 = (dot(vec3(cbLight._m0[_2648 + 3u].xyz), vec3(_1142, _1143, _1144)) * 0.5) + 0.5;
        float _3078 = _3077 * _3077;
        float _5104 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3079 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
        float _3080 = isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0));
        _2888 = (((cbLight._m0[_3061].x * 0.3183098733425140380859375) * _3079) * _3080) + _2826;
        _2890 = (((cbLight._m0[_3061].y * 0.3183098733425140380859375) * _3079) * _3080) + _2828;
        _2892 = (((cbLight._m0[_3061].z * 0.3183098733425140380859375) * _3079) * _3080) + _2830;
    }
    uint _2895 = _2648 + 8u;
    float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _1145) * 0.949999988079071044921875);
    float _2909 = _2908 * _2908;
    float _2910 = cbLight._m0[_2648].x + _1221;
    float _2911 = cbLight._m0[_2648].y + _1222;
    float _2912 = cbLight._m0[_2648].z + _1223;
    float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
    float _2917 = _2916 * _2910;
    float _2918 = _2916 * _2911;
    float _2919 = _2916 * _2912;
    float _2920 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2648].xyz));
    float _5120 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
    float _2923 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
    float _5131 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _2924 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
    float _2925 = dot(vec3(_1142, _1143, _1144), vec3(_2917, _2918, _2919));
    float _5142 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
    float _2928 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
    float _2929 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2917, _2918, _2919));
    float _5153 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
    float _2933 = _2909 * _2909;
    float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
    float _2945 = exp2(log2(1.0 - (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0)))) * 5.0);
    float _2946 = 0.959999978542327880859375 - _1300;
    float _2948 = 0.959999978542327880859375 - _1301;
    float _2949 = 0.959999978542327880859375 - _1302;
    float _2956 = 1.0 - _2909;
    float _2967 = (0.5 / (((_2924 * ((_2923 * _2956) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _2956) + _2909) * _2923))) * _2923;
    float _5164 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
    float _2969 = (isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
    uint _2983 = _2648 + 9u;
    float _2994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _1145) * 0.949999988079071044921875);
    float _2995 = _2994 * _2994;
    float _2996 = cbLight._m0[_2688].x + _1221;
    float _2997 = cbLight._m0[_2688].y + _1222;
    float _2998 = cbLight._m0[_2688].z + _1223;
    float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
    float _3003 = _3002 * _2996;
    float _3004 = _3002 * _2997;
    float _3005 = _3002 * _2998;
    float _3006 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2688].xyz));
    float _5175 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
    float _3009 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
    float _3010 = dot(vec3(_1142, _1143, _1144), vec3(_3003, _3004, _3005));
    float _5186 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
    float _3013 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
    float _3014 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_3003, _3004, _3005));
    float _5197 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
    float _3018 = _2995 * _2995;
    float _3022 = ((_3013 * _3013) * (_3018 + (-1.0))) + 1.0;
    float _3029 = exp2(log2(1.0 - (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0)))) * 5.0);
    float _3036 = 1.0 - _2995;
    float _3046 = (0.5 / (((_2924 * ((_3009 * _3036) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _3036) + _2995) * _3009))) * _3009;
    float _5208 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
    float _3048 = (isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3018 / ((_3022 * _3022) * 3.141590118408203125));
    float _3058 = (((((_3029 * _2946) + _1303) * cbLight._m0[_2983].x) * _3048) * _2671) + ((((cbLight._m0[_2895].x * _2637) * ((_2945 * _2946) + _1303)) * _2969) * _2684);
    float _3059 = (((((_3029 * _2948) + _1305) * cbLight._m0[_2983].y) * _3048) * _2671) + ((((cbLight._m0[_2895].y * _2639) * ((_2945 * _2948) + _1305)) * _2969) * _2684);
    float _3060 = (((((_3029 * _2949) + _1306) * cbLight._m0[_2983].z) * _3048) * _2671) + ((((cbLight._m0[_2895].z * _2641) * ((_2945 * _2949) + _1306)) * _2969) * _2684);
    float _3116;
    float _3118;
    float _3120;
    if (_2724)
    {
        _3116 = _3058;
        _3118 = _3059;
        _3120 = _3060;
    }
    else
    {
        uint _3122 = _2648 + 2u;
        uint _3126 = _2648 + 10u;
        float _3140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3122].w)) * _1145) * 0.949999988079071044921875);
        float _3141 = _3140 * _3140;
        float _3142 = cbLight._m0[_3122].x + _1221;
        float _3143 = cbLight._m0[_3122].y + _1222;
        float _3144 = cbLight._m0[_3122].z + _1223;
        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
        float _3149 = _3148 * _3142;
        float _3150 = _3148 * _3143;
        float _3151 = _3148 * _3144;
        float _3152 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_3122].xyz));
        float _5219 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
        float _3155 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
        float _3156 = dot(vec3(_1142, _1143, _1144), vec3(_3149, _3150, _3151));
        float _5230 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
        float _3159 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
        float _3160 = dot(vec3(cbLight._m0[_3122].xyz), vec3(_3149, _3150, _3151));
        float _5241 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
        float _3164 = _3141 * _3141;
        float _3168 = ((_3159 * _3159) * (_3164 + (-1.0))) + 1.0;
        float _3175 = exp2(log2(1.0 - (isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0)))) * 5.0);
        float _3182 = 1.0 - _3141;
        float _3192 = (0.5 / (((_2924 * ((_3155 * _3182) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _3182) + _3141) * _3155))) * _3155;
        float _5252 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
        float _3194 = (isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3164 / ((_3168 * _3168) * 3.141590118408203125));
        float _3195 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
        _3116 = (((((_3175 * _2946) + _1303) * cbLight._m0[_3126].x) * _3194) * _3195) + _3058;
        _3118 = (((((_3175 * _2948) + _1305) * cbLight._m0[_3126].y) * _3194) * _3195) + _3059;
        _3120 = (((((_3175 * _2949) + _1306) * cbLight._m0[_3126].z) * _3194) * _3195) + _3060;
    }
    float _3226;
    float _3228;
    float _3230;
    if (_2833)
    {
        _3226 = _3116;
        _3228 = _3118;
        _3230 = _3120;
    }
    else
    {
        uint _3237 = _2648 + 3u;
        uint _3241 = _2648 + 11u;
        float _3255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3237].w)) * _1145) * 0.949999988079071044921875);
        float _3256 = _3255 * _3255;
        float _3257 = cbLight._m0[_3237].x + _1221;
        float _3258 = cbLight._m0[_3237].y + _1222;
        float _3259 = cbLight._m0[_3237].z + _1223;
        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
        float _3264 = _3263 * _3257;
        float _3265 = _3263 * _3258;
        float _3266 = _3263 * _3259;
        float _3267 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_3237].xyz));
        float _5268 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
        float _3270 = isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0));
        float _3271 = dot(vec3(_1142, _1143, _1144), vec3(_3264, _3265, _3266));
        float _5279 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
        float _3274 = isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0));
        float _3275 = dot(vec3(cbLight._m0[_3237].xyz), vec3(_3264, _3265, _3266));
        float _5290 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
        float _3279 = _3256 * _3256;
        float _3283 = ((_3274 * _3274) * (_3279 + (-1.0))) + 1.0;
        float _3290 = exp2(log2(1.0 - (isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0)))) * 5.0);
        float _3297 = 1.0 - _3256;
        float _3307 = (0.5 / (((_2924 * ((_3270 * _3297) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _3297) + _3256) * _3270))) * _3270;
        float _5301 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
        float _3309 = (isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0))) * (_3279 / ((_3283 * _3283) * 3.141590118408203125));
        float _3310 = isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0));
        _3226 = (((((_3290 * _2946) + _1303) * cbLight._m0[_3241].x) * _3309) * _3310) + _3116;
        _3228 = (((((_3290 * _2948) + _1305) * cbLight._m0[_3241].y) * _3309) * _3310) + _3118;
        _3230 = (((((_3290 * _2949) + _1306) * cbLight._m0[_3241].z) * _3309) * _3310) + _3120;
    }
    float _3376;
    float _3378;
    float _3380;
    float _3382;
    float _3384;
    float _3386;
    if (_2646.y == 0u)
    {
        uvec4 _3331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3332 = _3331.x;
        uint _3343 = uint((float(_3331.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1242) / _3332))) + floor(float(uint(cbSceneParam._m0[85u].x * _1241) / _3332)));
        float _3353 = (log2(_2424 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3354 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
        uint _3357 = uint(isnan(14.0) ? _3354 : (isnan(_3354) ? 14.0 : min(_3354, 14.0)));
        uvec4 _3362 = texelFetch(g_lightClusterGridBuffer, int(((_3357 << 2u) + (_3343 << 6u)) >> 2u));
        uint _3363 = _3362.x;
        uint _3364 = _3331.z;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        if (((((1u << ((_3364 >> 4u) & 15u)) + 4294967295u) & _3363) == 0u) || ((_3364 & 240u) == 0u))
        {
            _3443 = 0.0;
            _3445 = 0.0;
            _3447 = 0.0;
            _3449 = 0.0;
            _3451 = 0.0;
            _3453 = 0.0;
        }
        else
        {
            float _3444;
            float _3446;
            float _3448;
            float _3450;
            float _3452;
            float _3454;
            float _3596 = 0.0;
            float _3597 = 0.0;
            float _3598 = 0.0;
            float _3599 = 0.0;
            float _3600 = 0.0;
            float _3601 = 0.0;
            uint _3602 = 0u;
            uint _3611;
            bool _3612;
            for (;;)
            {
                _3611 = texelFetch(g_lightClassification, int((((_3357 << 5u) + (_3343 << 9u)) + (_3602 << 2u)) >> 2u)).x;
                _3612 = _3611 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3612)
                {
                    frontier_phi_71_pred = _3601;
                    frontier_phi_71_pred_1 = _3600;
                    frontier_phi_71_pred_2 = _3599;
                    frontier_phi_71_pred_3 = _3598;
                    frontier_phi_71_pred_4 = _3597;
                    frontier_phi_71_pred_5 = _3596;
                }
                else
                {
                    float _3741;
                    float _3742;
                    float _3743;
                    float _3744;
                    float _3745;
                    float _3746;
                    uint _3747;
                    _3741 = _3596;
                    _3742 = _3597;
                    _3743 = _3598;
                    _3744 = _3599;
                    _3745 = _3600;
                    _3746 = _3601;
                    _3747 = _3611;
                    float _3668;
                    float _3669;
                    float _3670;
                    float _3671;
                    float _3672;
                    float _3673;
                    for (;;)
                    {
                        uint _3751 = uint(findLSB(_3747)) + (_3602 << 5u);
                        uint _3748 = (_3747 + 4294967295u) & _3747;
                        uint _3753 = _3751 * 48u;
                        vec4 _3767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3753)).x, texelFetch(g_PointLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3753 + 3u)).x));
                        uint _3773 = (_3751 * 48u) + 4u;
                        vec4 _3786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3773)).x, texelFetch(g_PointLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3773 + 3u)).x));
                        uint _3792 = (_3751 * 48u) + 8u;
                        vec3 _3803 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3792)).x, texelFetch(g_PointLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3792 + 2u)).x));
                        float _3807 = _3767.x - _2422;
                        float _3808 = _3767.y - _2423;
                        float _3809 = _3767.z - _2424;
                        float _3810 = dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809));
                        float _3813 = inversesqrt(_3810);
                        float _3814 = _3813 * _3807;
                        float _3815 = _3813 * _3808;
                        float _3816 = _3813 * _3809;
                        float _3817 = dot(vec3(_1260, _1263, _1266), vec3(_3814, _3815, _3816));
                        float _3822 = 1.0 - (_3810 * _3767.w);
                        float _5327 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                        float _3823 = isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0));
                        float _3824 = sqrt(_3810) * _3786.w;
                        float _3827 = 1.39999997615814208984375 / (_3824 + 1.39999997615814208984375);
                        float _3828 = _3827 * _3827;
                        float _3831 = ((1.0 - _3828) * _3817) + _3828;
                        float _3834 = _3824 * _3824;
                        float _3838 = ((isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0))) * _3823) / ((_3834 * 0.699999988079071044921875) + 1.0);
                        float _3842 = (-0.0) - _2422;
                        float _3843 = (-0.0) - _2423;
                        float _3844 = (-0.0) - _2424;
                        float _3848 = inversesqrt(dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844)));
                        float _3849 = _3848 * _3842;
                        float _3850 = _3848 * _3843;
                        float _3851 = _3848 * _3844;
                        float _3858 = exp2(log2(1.0 / ((_3834 * 3.5) + 5.0)) * 0.25);
                        float _3859 = 1.0 - _1335;
                        float _3866 = sqrt(1.0 - ((1.0 - (_3859 * _3859)) * (1.0 - (_3858 * _3858))));
                        float _3867 = _3866 * _3866;
                        float _3868 = _3867 * _3867;
                        float _3869 = _3849 + _3814;
                        float _3870 = _3850 + _3815;
                        float _3871 = _3851 + _3816;
                        float _3875 = inversesqrt(dot(vec3(_3869, _3870, _3871), vec3(_3869, _3870, _3871)));
                        float _3879 = dot(vec3(_1260, _1263, _1266), vec3(_3849, _3850, _3851));
                        float _5343 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                        float _3882 = isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0));
                        float _3883 = dot(vec3(_1260, _1263, _1266), vec3(_3875 * _3869, _3875 * _3870, _3875 * _3871));
                        float _5354 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                        float _3886 = isnan(1.0) ? _5354 : (isnan(_5354) ? 1.0 : min(_5354, 1.0));
                        float _3890 = ((_3886 * _3886) * (_3868 + (-1.0))) + 1.0;
                        float _3891 = _3827 * _3867;
                        float _3892 = _3891 * _3891;
                        float _3895 = ((1.0 - _3892) * _3817) + _3892;
                        float _5365 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                        float _3896 = isnan(1.0) ? _5365 : (isnan(_5365) ? 1.0 : min(_5365, 1.0));
                        float _3897 = 1.0 - _3867;
                        float _3907 = (0.5 / (((_3896 * ((_3882 * _3897) + _3867)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3867) * _3882))) * _3896;
                        float _5376 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                        float _3918 = (((_3868 * 3.1415927410125732421875) * (isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0)))) / ((_3890 * _3890) * ((_3834 * 2.1991131305694580078125) + 3.141590118408203125))) * _3823;
                        _3671 = (_3838 * _3786.x) + _3744;
                        _3672 = (_3838 * _3786.y) + _3745;
                        _3673 = (_3838 * _3786.z) + _3746;
                        _3668 = (_3918 * _3803.x) + _3741;
                        _3669 = (_3918 * _3803.y) + _3742;
                        _3670 = (_3918 * _3803.z) + _3743;
                        if (_3748 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3741 = _3668;
                            _3742 = _3669;
                            _3743 = _3670;
                            _3744 = _3671;
                            _3745 = _3672;
                            _3746 = _3673;
                            _3747 = _3748;
                        }
                    }
                    frontier_phi_71_pred = _3673;
                    frontier_phi_71_pred_1 = _3672;
                    frontier_phi_71_pred_2 = _3671;
                    frontier_phi_71_pred_3 = _3670;
                    frontier_phi_71_pred_4 = _3669;
                    frontier_phi_71_pred_5 = _3668;
                }
                _3454 = frontier_phi_71_pred;
                _3452 = frontier_phi_71_pred_1;
                _3450 = frontier_phi_71_pred_2;
                _3448 = frontier_phi_71_pred_3;
                _3446 = frontier_phi_71_pred_4;
                _3444 = frontier_phi_71_pred_5;
                uint _3603 = _3602 + 1u;
                if (_3603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3596 = _3444;
                    _3597 = _3446;
                    _3598 = _3448;
                    _3599 = _3450;
                    _3600 = _3452;
                    _3601 = _3454;
                    _3602 = _3603;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3443 = _3444;
            _3445 = _3446;
            _3447 = _3448;
            _3449 = _3450;
            _3451 = _3452;
            _3453 = _3454;
        }
        uvec4 _3457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3458 = _3457.z;
        uint _3460 = (_3458 >> 8u) & 15u;
        float _3564;
        float _3566;
        float _3568;
        float _3570;
        float _3572;
        float _3574;
        if (((4294967295u << _3460) & _3363) == 0u)
        {
            _3564 = _3443;
            _3566 = _3445;
            _3568 = _3447;
            _3570 = _3449;
            _3572 = _3451;
            _3574 = _3453;
        }
        else
        {
            float _3589 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
            float _3590 = _3589 * _2422;
            float _3591 = _3589 * _2423;
            float _3592 = _3589 * _2424;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3460 < ((_3458 >> 12u) & 15u))
            {
                float _3565;
                float _3567;
                float _3569;
                float _3571;
                float _3573;
                float _3575;
                float _3724 = _3443;
                float _3725 = _3445;
                float _3726 = _3447;
                float _3727 = _3449;
                float _3728 = _3451;
                float _3729 = _3453;
                uint _3730 = _3460;
                uint _3739;
                bool _3740;
                for (;;)
                {
                    _3739 = texelFetch(g_lightClassification, int((((_3357 << 5u) + (_3343 << 9u)) + (_3730 << 2u)) >> 2u)).x;
                    _3740 = _3739 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3740)
                    {
                        frontier_phi_82_pred = _3729;
                        frontier_phi_82_pred_1 = _3728;
                        frontier_phi_82_pred_2 = _3727;
                        frontier_phi_82_pred_3 = _3726;
                        frontier_phi_82_pred_4 = _3725;
                        frontier_phi_82_pred_5 = _3724;
                    }
                    else
                    {
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _4225;
                        float _4226;
                        float _4227;
                        float _4228;
                        float _4229;
                        float _4230;
                        float _3945 = _3724;
                        float _3946 = _3725;
                        float _3947 = _3726;
                        float _3948 = _3727;
                        float _3949 = _3728;
                        float _3950 = _3729;
                        uint _3951 = _3739;
                        uint _3952;
                        vec4 _3977;
                        float _3978;
                        vec4 _3993;
                        vec3 _4005;
                        vec4 _4020;
                        vec4 _4035;
                        float _4081;
                        bool _4082;
                        for (;;)
                        {
                            uint _3962 = ((_3730 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3951));
                            _3952 = (_3951 + 4294967295u) & _3951;
                            uint _3964 = _3962 * 40u;
                            _3977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3964 + 3u)).x));
                            _3978 = _3977.w;
                            uint _3980 = (_3962 * 40u) + 4u;
                            _3993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 3u)).x));
                            uint _3995 = (_3962 * 40u) + 8u;
                            _4005 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3995 + 2u)).x));
                            uint _4007 = (_3962 * 40u) + 16u;
                            _4020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 3u)).x));
                            uint _4022 = (_3962 * 40u) + 20u;
                            _4035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 3u)).x));
                            uint _4037 = (_3962 * 40u) + 24u;
                            vec4 _4050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 3u)).x));
                            uint _4056 = (_3962 * 40u) + 28u;
                            vec4 _4069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4056 + 3u)).x));
                            _4081 = fma(_2424, _4069.z, fma(_2423, _4069.y, _4069.x * _2422)) + _4069.w;
                            _4082 = !((fma(_2424, _4050.z, fma(_2423, _4050.y, _4050.x * _2422)) + _4050.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4082)
                            {
                                float _4109 = _3977.x - _2422;
                                float _4110 = _3977.y - _2423;
                                float _4111 = _3977.z - _2424;
                                float _4112 = dot(vec3(_4109, _4110, _4111), vec3(_4109, _4110, _4111));
                                float _4115 = inversesqrt(_4112);
                                float _4116 = _4115 * _4109;
                                float _4117 = _4115 * _4110;
                                float _4118 = _4115 * _4111;
                                float _4122 = 1.0 - (_4112 / (_3978 * _3978));
                                float _5387 = isnan(0.0) ? _4122 : (isnan(_4122) ? 0.0 : max(_4122, 0.0));
                                float _4123 = isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0));
                                float _4127 = sqrt(_4112) * _3993.w;
                                float _4129 = 1.39999997615814208984375 / (_4127 + 1.39999997615814208984375);
                                float _4130 = _4129 * _4129;
                                float _4133 = ((1.0 - _4130) * dot(vec3(_4116, _4117, _4118), vec3(_1260, _1263, _1266))) + _4130;
                                float _4136 = _4127 * _4127;
                                float _4140 = (fma(_2424, _4020.z, fma(_2423, _4020.y, _4020.x * _2422)) + _4020.w) / _4081;
                                float _4141 = (fma(_2424, _4035.z, fma(_2423, _4035.y, _4035.x * _2422)) + _4035.w) / _4081;
                                float _4145 = 1.0 - dot(vec2(_4140, _4141), vec2(_4140, _4141));
                                float _5403 = isnan(0.0) ? _4145 : (isnan(_4145) ? 0.0 : max(_4145, 0.0));
                                float _4146 = isnan(1.0) ? _5403 : (isnan(_5403) ? 1.0 : min(_5403, 1.0));
                                float _4147 = _4146 * (((isnan(0.0) ? _4133 : (isnan(_4133) ? 0.0 : max(_4133, 0.0))) * _4123) / ((_4136 * 0.699999988079071044921875) + 1.0));
                                float _4159 = exp2(log2(1.0 / ((_4136 * 3.5) + 5.0)) * 0.25);
                                float _4160 = 1.0 - _1335;
                                float _4167 = sqrt(1.0 - ((1.0 - (_4160 * _4160)) * (1.0 - (_4159 * _4159))));
                                float _4168 = _4167 * _4167;
                                float _4169 = _4168 * _4168;
                                float _4170 = _4116 - _3590;
                                float _4171 = _4117 - _3591;
                                float _4172 = _4118 - _3592;
                                float _4176 = inversesqrt(dot(vec3(_4170, _4171, _4172), vec3(_4170, _4171, _4172)));
                                float _4180 = dot(vec3(_1260, _1263, _1266), vec3((-0.0) - _3590, (-0.0) - _3591, (-0.0) - _3592));
                                float _5414 = isnan(0.0) ? _4180 : (isnan(_4180) ? 0.0 : max(_4180, 0.0));
                                float _4183 = isnan(1.0) ? _5414 : (isnan(_5414) ? 1.0 : min(_5414, 1.0));
                                float _4184 = dot(vec3(_1260, _1263, _1266), vec3(_4176 * _4170, _4176 * _4171, _4176 * _4172));
                                float _5425 = isnan(0.0) ? _4184 : (isnan(_4184) ? 0.0 : max(_4184, 0.0));
                                float _4187 = isnan(1.0) ? _5425 : (isnan(_5425) ? 1.0 : min(_5425, 1.0));
                                float _4191 = ((_4187 * _4187) * (_4169 + (-1.0))) + 1.0;
                                float _4192 = _4129 * _4168;
                                float _4193 = _4192 * _4192;
                                float _4199 = ((1.0 - _4193) * dot(vec3(_1260, _1263, _1266), vec3(_4116, _4117, _4118))) + _4193;
                                float _5436 = isnan(0.0) ? _4199 : (isnan(_4199) ? 0.0 : max(_4199, 0.0));
                                float _4200 = isnan(1.0) ? _5436 : (isnan(_5436) ? 1.0 : min(_5436, 1.0));
                                float _4201 = 1.0 - _4168;
                                float _4211 = (0.5 / (((_4200 * ((_4183 * _4201) + _4168)) + 9.9999999392252902907785028219223e-09) + (((_4200 * _4201) + _4168) * _4183))) * _4200;
                                float _5447 = isnan(0.0) ? _4211 : (isnan(_4211) ? 0.0 : max(_4211, 0.0));
                                float _4221 = (_4146 * _4123) * (((_4169 * 3.1415927410125732421875) * (isnan(1.0) ? _5447 : (isnan(_5447) ? 1.0 : min(_5447, 1.0)))) / ((_4191 * _4191) * ((_4136 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4147 * _3993.z;
                                frontier_phi_88_pred_1 = _4147 * _3993.y;
                                frontier_phi_88_pred_2 = _4147 * _3993.x;
                                frontier_phi_88_pred_3 = _4221 * _4005.z;
                                frontier_phi_88_pred_4 = _4221 * _4005.y;
                                frontier_phi_88_pred_5 = _4221 * _4005.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4230 = frontier_phi_88_pred;
                            _4229 = frontier_phi_88_pred_1;
                            _4228 = frontier_phi_88_pred_2;
                            _4227 = frontier_phi_88_pred_3;
                            _4226 = frontier_phi_88_pred_4;
                            _4225 = frontier_phi_88_pred_5;
                            _3935 = _4228 + _3948;
                            _3936 = _4229 + _3949;
                            _3937 = _4230 + _3950;
                            _3932 = _4225 + _3945;
                            _3933 = _4226 + _3946;
                            _3934 = _4227 + _3947;
                            if (_3952 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3945 = _3932;
                                _3946 = _3933;
                                _3947 = _3934;
                                _3948 = _3935;
                                _3949 = _3936;
                                _3950 = _3937;
                                _3951 = _3952;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3937;
                        frontier_phi_82_pred_1 = _3936;
                        frontier_phi_82_pred_2 = _3935;
                        frontier_phi_82_pred_3 = _3934;
                        frontier_phi_82_pred_4 = _3933;
                        frontier_phi_82_pred_5 = _3932;
                    }
                    _3575 = frontier_phi_82_pred;
                    _3573 = frontier_phi_82_pred_1;
                    _3571 = frontier_phi_82_pred_2;
                    _3569 = frontier_phi_82_pred_3;
                    _3567 = frontier_phi_82_pred_4;
                    _3565 = frontier_phi_82_pred_5;
                    uint _3731 = _3730 + 1u;
                    if (_3731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3724 = _3565;
                        _3725 = _3567;
                        _3726 = _3569;
                        _3727 = _3571;
                        _3728 = _3573;
                        _3729 = _3575;
                        _3730 = _3731;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3571;
                frontier_phi_63_64_ladder_1 = _3575;
                frontier_phi_63_64_ladder_2 = _3573;
                frontier_phi_63_64_ladder_3 = _3569;
                frontier_phi_63_64_ladder_4 = _3567;
                frontier_phi_63_64_ladder_5 = _3565;
            }
            else
            {
                frontier_phi_63_64_ladder = _3449;
                frontier_phi_63_64_ladder_1 = _3453;
                frontier_phi_63_64_ladder_2 = _3451;
                frontier_phi_63_64_ladder_3 = _3447;
                frontier_phi_63_64_ladder_4 = _3445;
                frontier_phi_63_64_ladder_5 = _3443;
            }
            _3564 = frontier_phi_63_64_ladder_5;
            _3566 = frontier_phi_63_64_ladder_4;
            _3568 = frontier_phi_63_64_ladder_3;
            _3570 = frontier_phi_63_64_ladder;
            _3572 = frontier_phi_63_64_ladder_2;
            _3574 = frontier_phi_63_64_ladder_1;
        }
        float _3579 = isnan(1.0) ? _1319 : (isnan(_1319) ? 1.0 : min(_1319, 1.0));
        _3376 = (_3579 * _3570) + _2888;
        _3378 = (_3579 * _3572) + _2890;
        _3380 = (_3579 * _3574) + _2892;
        _3382 = ((_3564 * _1303) * _3579) + _3226;
        _3384 = ((_3566 * _1305) * _3579) + _3228;
        _3386 = ((_3568 * _1306) * _3579) + _3230;
    }
    else
    {
        _3376 = _2888;
        _3378 = _2890;
        _3380 = _2892;
        _3382 = _3226;
        _3384 = _3228;
        _3386 = _3230;
    }
    float _5463 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _5474 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _5485 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    float _3403 = ((isnan(1.0) ? _5463 : (isnan(_5463) ? 1.0 : min(_5463, 1.0))) * (_3376 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1319))) + ((_3382 + ((isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))) * _2156)) * cbPerFrame._m0[3u].x);
    float _3404 = ((isnan(1.0) ? _5474 : (isnan(_5474) ? 1.0 : min(_5474, 1.0))) * (_3378 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1319))) + ((_3384 + ((isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0))) * _2156)) * cbPerFrame._m0[3u].x);
    float _3405 = ((isnan(1.0) ? _5485 : (isnan(_5485) ? 1.0 : min(_5485, 1.0))) * (_3380 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1319))) + ((_3386 + ((isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0))) * _2156)) * cbPerFrame._m0[3u].x);
    uint _3406 = _307 + 6u;
    float _3414 = _1241 / cbSceneParam._m0[86u].x;
    float _3415 = _1242 / cbSceneParam._m0[86u].y;
    vec4 _3429 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3414, _3415, (log2((isnan(cbSceneParam._m0[77u].w) ? _1164 : (isnan(_1164) ? cbSceneParam._m0[77u].w : min(_1164, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3431 = _3429.x;
    float _3432 = _3429.y;
    float _3433 = _3429.z;
    float _3434 = _3429.w;
    float _3506;
    float _3508;
    float _3510;
    float _3512;
    if (_1164 > cbSceneParam._m0[78u].w)
    {
        float _3468 = isnan(_1164) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1164 : min(cbSceneParam._m0[80u].w, _1164));
        float _3469 = _3468 / _1164;
        float _3480 = _3469 * _1214;
        float _3481 = _1215 * _3469;
        float _3482 = (-0.0) - _3481;
        float _3484 = _3469 * _1216;
        float _3486 = (cbSceneParam._m0[77u].w * _3482) / _3468;
        float _3487 = _3486 + cbSceneParam._m0[79u].w;
        float _3488 = cbSceneParam._m0[79u].w - _3481;
        float _3494 = sqrt(((_3480 * _3480) + (_3481 * _3481)) + (_3484 * _3484));
        float _3497 = (1.0 - (cbSceneParam._m0[77u].w / _3468)) * _3494;
        float _3502 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3504 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3681;
        if (abs((_3482 - _3486) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3681 = ((((_3487 > 0.0) ? exp2(_3502 * _3487) : (2.0 - exp2(_3504 * _3487))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3497;
        }
        else
        {
            float _3625 = 1.0 / cbSceneParam._m0[80u].x;
            float _3626 = isnan(_3488) ? _3487 : (isnan(_3487) ? _3488 : max(_3487, _3488));
            float _3627 = isnan(_3488) ? _3487 : (isnan(_3487) ? _3488 : min(_3487, _3488));
            float _3636 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : min(_3626, 0.0));
            float _3637 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : min(_3627, 0.0));
            _3681 = ((abs(_3494 / _3482) * cbSceneParam._m0[80u].y) * ((((_3636 - _3637) * 2.0) - ((exp2(_3502 * (isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0)))) - exp2(_3502 * (isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))))) * _3625)) - ((exp2(_3504 * _3636) - exp2(_3504 * _3637)) * _3625))) + (_3497 * cbSceneParam._m0[80u].z);
        }
        vec4 _3683 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3414, _3415, 1.0), 0.0);
        float _3692 = exp2((_3681 * (-1.44269502162933349609375)) * (1.0 - _3683.w));
        float _3693 = log2(_3692);
        float _3709 = log2(_3434);
        _3506 = (exp2(_3709 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3693 * cbSceneParam._m0[78u].x)) * _3683.x) / cbSceneParam._m0[78u].x)) + _3431;
        _3508 = (exp2(_3709 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3693 * cbSceneParam._m0[78u].y)) * _3683.y) / cbSceneParam._m0[78u].y)) + _3432;
        _3510 = (exp2(_3709 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3693 * cbSceneParam._m0[78u].z)) * _3683.z) / cbSceneParam._m0[78u].z)) + _3433;
        _3512 = _3692 * _3434;
    }
    else
    {
        _3506 = _3431;
        _3508 = _3432;
        _3510 = _3433;
        _3512 = _3434;
    }
    bool _3719;
    vec4 _3522;
    vec4 _3544;
    float _3546;
    float _3550;
    float _3551;
    float _3552;
    float _3553;
    bool _3563;
    for (;;)
    {
        _3522 = cbMatDynParam._m0[0u];
        float _3524 = roundEven(_3522.y);
        bool _3525 = _3524 == 3.0;
        float _3526 = log2(_3512);
        float _3533 = exp2(_3526 * cbSceneParam._m0[78u].x) * _3403;
        float _3534 = exp2(_3526 * cbSceneParam._m0[78u].y) * _3404;
        float _3535 = exp2(_3526 * cbSceneParam._m0[78u].z) * _3405;
        float _3542 = _1230 + (-0.5);
        _3544 = cbMtdParam._m0[1u];
        _3546 = _3544.y * _3542;
        float _3549 = (_3524 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3550 = _3549 * (_3525 ? _3533 : (_3533 + (cbSceneParam._m0[72u].w * _3506)));
        _3551 = _3549 * (_3525 ? _3534 : (_3534 + (cbSceneParam._m0[72u].w * _3508)));
        _3552 = _3549 * (_3525 ? _3535 : (_3535 + (cbSceneParam._m0[72u].w * _3510)));
        _3553 = _3542 * 0.999000012874603271484375;
        _3563 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3563)
        {
            if ((cbInstanceData._m0[_307 + 7u].x + _3553) < 0.5)
            {
                _3719 = true;
                break;
            }
        }
        uint _3660 = _1279 + uint(_3522.w);
        if ((cbInstanceData._m0[_3660].w < 1.0) && ((cbInstanceData._m0[_3660].w + _3553) < 0.5))
        {
            _3719 = true;
            break;
        }
        if ((_3546 + 1.0) < _3544.x)
        {
            _3719 = true;
            break;
        }
        _3719 = false;
        break;
    }
    float _3923;
    if (_3719)
    {
        discard_state = true;
        _3923 = 0.0;
    }
    else
    {
        _3923 = cbInstanceData._m0[_3406].w;
    }
    SV_Target.x = _3550;
    SV_Target.y = _3551;
    SV_Target.z = _3552;
    SV_Target.w = _3923;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3406].w;
    discard_exit();
}


