#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _2928 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))));
    float _273 = fma(_266, _207, fma(_259, _199 * TANGENT.x, (_185 * _178) * _257));
    float _276 = fma(_266, _208, fma(_259, _199 * TANGENT.y, (_185 * _179) * _257));
    float _279 = fma(_266, _209, fma(_259, _199 * TANGENT.z, (_185 * _180) * _257));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _2939 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _287 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    float _2950 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _2961 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _2972 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _347 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _357 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _347);
    float _358 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _347);
    float _359 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _347);
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _357 * _363;
    float _365 = _358 * _363;
    float _366 = _359 * _363;
    float _372 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _373 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _394 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _397 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _400 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _413 = uint(roundEven(NORMAL.w)) * 13u;
    uint _416 = (_413 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _422 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0)))) * cbInstanceData._m0[_416].x;
    float _423 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_416].y;
    float _424 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_416].z;
    float _2983 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _2994 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    float _3005 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    vec4 _436 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _372, cbSceneParam._m0[86u].y * _373));
    float _439 = _436.x * TEXCOORD.z;
    float _443 = abs(dot(vec3(_364, _365, _366), vec3(_284, _285, _286)));
    float _3016 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _450 = exp2(log2(1.0 - (isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0)))) * 5.0) * 0.959999978542327880859375;
    float _452 = _450 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_306 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_284, _285, _286), vec3(1.0, 0.0, 0.0))) + (_372 / cbSceneParam._m0[86u].x), 1.0 - (_373 / cbSceneParam._m0[86u].y)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _817;
    float _818;
    float _819;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _542 = fma(_515, cbModelParam._m0[26u].z, fma(_511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507));
        float _546 = fma(_515, cbModelParam._m0[27u].z, fma(_511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507));
        float _550 = fma(_515, cbModelParam._m0[28u].z, fma(_511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507));
        float _575 = _507 + _284;
        float _576 = _511 + _285;
        float _577 = _515 + _286;
        float _587 = fma(_577, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _575)) - _542;
        float _588 = fma(_577, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _575)) - _546;
        float _589 = fma(_577, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _575)) - _550;
        float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
        float _606 = ((_593 * _587) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_542 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _607 = ((_593 * _588) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_546 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _608 = ((_593 * _589) / cbModelParam._m0[34u].z) + ((((((_550 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        float _645 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _652 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _666 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_632.x + (-0.5));
        float _668 = _666 * (_632.y + (-0.5));
        float _669 = _666 * (_632.z + (-0.5));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _674 = ((_611.x + (-0.5)) * 0.5) * _645;
        float _676 = ((_618.x + (-0.5)) * 0.5) * _652;
        float _678 = ((_625.x + (-0.5)) * 0.5) * _659;
        float _679 = dot(vec3(_674, _676, _678), vec3(_674, _676, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _693 = (dot(vec3(_284, _285, _286), vec3(_684 * _674, _684 * _676, _684 * _678)) + 1.0) * 0.5;
        float _3042 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _703 = sqrt(((_676 * _676) + (_674 * _674)) + (_678 * _678)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3053 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3064 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_705 + 1.0))) + _710) * _670;
        float _721 = ((_611.y + (-0.5)) * 0.5) * _645;
        float _723 = ((_618.y + (-0.5)) * 0.5) * _652;
        float _725 = ((_625.y + (-0.5)) * 0.5) * _659;
        float _726 = dot(vec3(_721, _723, _725), vec3(_721, _723, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_284, _285, _286), vec3(_731 * _721, _731 * _723, _731 * _725)) + 1.0) * 0.5;
        float _3075 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_723 * _723) + (_721 * _721)) + (_725 * _725)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3086 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3097 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) * (_750 + 1.0))) + _755) * _671;
        float _766 = ((_611.z + (-0.5)) * 0.5) * _645;
        float _768 = ((_618.z + (-0.5)) * 0.5) * _652;
        float _770 = ((_625.z + (-0.5)) * 0.5) * _659;
        float _771 = dot(vec3(_766, _768, _770), vec3(_766, _768, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_284, _285, _286), vec3(_776 * _766, _776 * _768, _776 * _770)) + 1.0) * 0.5;
        float _3108 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_768 * _768) + (_766 * _766)) + (_770 * _770)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3119 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3130 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) * (_795 + 1.0))) + _800) * _672;
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
    }
    else
    {
        _817 = 0.0;
        _818 = 0.0;
        _819 = 0.0;
    }
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _845 = fma(_515, cbModelParam._m0[30u].z, fma(_511, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _507));
        float _849 = fma(_515, cbModelParam._m0[31u].z, fma(_511, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _507));
        float _853 = fma(_515, cbModelParam._m0[32u].z, fma(_511, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _507));
        float _876 = _507 + _284;
        float _877 = _511 + _285;
        float _878 = _515 + _286;
        float _888 = fma(_878, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876)) - _845;
        float _889 = fma(_878, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876)) - _849;
        float _890 = fma(_878, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876)) - _853;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_845 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_849 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[35u].z) + ((((((_853 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _944 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _951 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _965 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_932.x + (-0.5));
        float _967 = _965 * (_932.y + (-0.5));
        float _968 = _965 * (_932.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _973 = ((_911.x + (-0.5)) * 0.5) * _944;
        float _975 = ((_918.x + (-0.5)) * 0.5) * _951;
        float _977 = ((_925.x + (-0.5)) * 0.5) * _958;
        float _978 = dot(vec3(_973, _975, _977), vec3(_973, _975, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_284, _285, _286), vec3(_983 * _973, _983 * _975, _983 * _977)) + 1.0) * 0.5;
        float _3171 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_975 * _975) + (_973 * _973)) + (_977 * _977)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3182 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3193 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_1002 + 1.0))) + _1007) * _969;
        float _1018 = ((_911.y + (-0.5)) * 0.5) * _944;
        float _1020 = ((_918.y + (-0.5)) * 0.5) * _951;
        float _1022 = ((_925.y + (-0.5)) * 0.5) * _958;
        float _1023 = dot(vec3(_1018, _1020, _1022), vec3(_1018, _1020, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_284, _285, _286), vec3(_1028 * _1018, _1028 * _1020, _1028 * _1022)) + 1.0) * 0.5;
        float _3204 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1020 * _1020) + (_1018 * _1018)) + (_1022 * _1022)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3215 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3226 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0))) * (_1047 + 1.0))) + _1052) * _970;
        float _1063 = ((_911.z + (-0.5)) * 0.5) * _944;
        float _1065 = ((_918.z + (-0.5)) * 0.5) * _951;
        float _1067 = ((_925.z + (-0.5)) * 0.5) * _958;
        float _1068 = dot(vec3(_1063, _1065, _1067), vec3(_1063, _1065, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_284, _285, _286), vec3(_1073 * _1063, _1073 * _1065, _1073 * _1067)) + 1.0) * 0.5;
        float _3237 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1065 * _1065) + (_1063 * _1063)) + (_1067 * _1067)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3248 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3259 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * (_1092 + 1.0))) + _1097) * _971;
        _1114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1126 = (cbModelParam._m0[1u].x * (_1114 - _817)) + _817;
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _818)) + _818;
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _819)) + _819;
    float _1149 = fma(_1128, cbSceneParam._m0[89u].z, fma(_1127, cbSceneParam._m0[89u].y, _1126 * cbSceneParam._m0[89u].x));
    float _1152 = fma(_1128, cbSceneParam._m0[90u].z, fma(_1127, cbSceneParam._m0[90u].y, _1126 * cbSceneParam._m0[90u].x));
    float _1155 = fma(_1128, cbSceneParam._m0[91u].z, fma(_1127, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1126));
    float _1160 = (0.959999978542327880859375 - _450) * _439;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1207 = _1194 / _1206;
    float _1208 = _1198 / _1206;
    float _1209 = _1202 / _1206;
    float _1346;
    float _1347;
    float _1348;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1226 = ((uint(_1209 > cbSceneParam._m0[59u].y) + uint(_1209 > cbSceneParam._m0[59u].x)) + uint(_1209 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1227 = _1226 + 43u;
        uint _1235 = _1226 + 44u;
        uint _1243 = _1226 + 45u;
        uint _1251 = _1226 + 46u;
        float _1262 = fma(_1206, cbSceneParam._m0[_1227].w, fma(_1202, cbSceneParam._m0[_1227].z, fma(_1198, cbSceneParam._m0[_1227].y, _1194 * cbSceneParam._m0[_1227].x)));
        float _1266 = fma(_1206, cbSceneParam._m0[_1235].w, fma(_1202, cbSceneParam._m0[_1235].z, fma(_1198, cbSceneParam._m0[_1235].y, _1194 * cbSceneParam._m0[_1235].x)));
        float _1274 = fma(_1206, cbSceneParam._m0[_1251].w, fma(_1202, cbSceneParam._m0[_1251].z, fma(_1198, cbSceneParam._m0[_1251].y, _1194 * cbSceneParam._m0[_1251].x)));
        float _1279 = cbSceneParam._m0[33u].z * _1274;
        float _1281 = cbSceneParam._m0[33u].w * _1274;
        float _1284 = fma(_1206, cbSceneParam._m0[_1243].w, fma(_1202, cbSceneParam._m0[_1243].z, fma(_1198, cbSceneParam._m0[_1243].y, _1194 * cbSceneParam._m0[_1243].x))) / _1274;
        float _1332 = (cbSceneParam._m0[33u].x - sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209))) * cbSceneParam._m0[33u].y;
        float _3300 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1339 = (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1279 + _1262) / _1274, (_1281 + _1266) / _1274), _1284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1281 + _1262) / _1274, (_1266 - _1279) / _1274), _1284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1262 - _1279) / _1274, (_1266 - _1281) / _1274), _1284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1262 - _1281) / _1274, (_1279 + _1266) / _1274), _1284), 0.0)).x), vec4(0.25)));
        _1346 = 1.0 - (_1339 * cbSceneParam._m0[34u].x);
        _1347 = 1.0 - (_1339 * cbSceneParam._m0[34u].y);
        _1348 = 1.0 - (_1339 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1346 = 1.0;
        _1347 = 1.0;
        _1348 = 1.0;
    }
    float _1404;
    float _1406;
    float _1408;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1392 = fma(_1206, cbSceneParam._m0[63u].w, fma(_1202, cbSceneParam._m0[63u].z, fma(_1198, cbSceneParam._m0[63u].y, _1194 * cbSceneParam._m0[63u].x)));
        float _1393 = fma(_1206, cbSceneParam._m0[60u].w, fma(_1202, cbSceneParam._m0[60u].z, fma(_1198, cbSceneParam._m0[60u].y, _1194 * cbSceneParam._m0[60u].x))) / _1392;
        float _1394 = fma(_1206, cbSceneParam._m0[61u].w, fma(_1202, cbSceneParam._m0[61u].z, fma(_1198, cbSceneParam._m0[61u].y, _1194 * cbSceneParam._m0[61u].x))) / _1392;
        float frontier_phi_10_9_ladder;
        float frontier_phi_10_9_ladder_1;
        float frontier_phi_10_9_ladder_2;
        if ((((_1393 >= cbSceneParam._m0[64u].x) && (_1394 >= cbSceneParam._m0[64u].y)) && (_1393 <= cbSceneParam._m0[64u].z)) && (_1394 <= cbSceneParam._m0[64u].w))
        {
            float _1501 = fma(_1206, cbSceneParam._m0[62u].w, fma(_1202, cbSceneParam._m0[62u].z, fma(_1198, cbSceneParam._m0[62u].y, _1194 * cbSceneParam._m0[62u].x))) / _1392;
            float _1505 = isnan(cbSceneParam._m0[41u].w) ? _1501 : (isnan(_1501) ? cbSceneParam._m0[41u].w : max(_1501, cbSceneParam._m0[41u].w));
            float _1548 = (cbSceneParam._m0[33u].x - sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209))) * cbSceneParam._m0[33u].y;
            float _3316 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
            float _1555 = (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1393, cbSceneParam._m0[33u].w + _1394), _1505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1393, _1394 - cbSceneParam._m0[33u].z), _1505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1393 - cbSceneParam._m0[33u].z, _1394 - cbSceneParam._m0[33u].w), _1505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1393 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1394), _1505), 0.0)).x), vec4(0.25)));
            float _1559 = 1.0 - (_1555 * cbSceneParam._m0[34u].x);
            float _1560 = 1.0 - (_1555 * cbSceneParam._m0[34u].y);
            float _1561 = 1.0 - (_1555 * cbSceneParam._m0[34u].z);
            frontier_phi_10_9_ladder = isnan(_1560) ? _1347 : (isnan(_1347) ? _1560 : min(_1347, _1560));
            frontier_phi_10_9_ladder_1 = isnan(_1559) ? _1346 : (isnan(_1346) ? _1559 : min(_1346, _1559));
            frontier_phi_10_9_ladder_2 = isnan(_1561) ? _1348 : (isnan(_1348) ? _1561 : min(_1348, _1561));
        }
        else
        {
            frontier_phi_10_9_ladder = _1347;
            frontier_phi_10_9_ladder_1 = _1346;
            frontier_phi_10_9_ladder_2 = _1348;
        }
        _1404 = frontier_phi_10_9_ladder_1;
        _1406 = frontier_phi_10_9_ladder;
        _1408 = frontier_phi_10_9_ladder_2;
    }
    else
    {
        _1404 = _1346;
        _1406 = _1347;
        _1408 = _1348;
    }
    uvec4 _1413 = floatBitsToUint(cbInstanceData._m0[_413 + 5u]);
    uint _1415 = _1413.x * 14u;
    uint _1416 = _1415 + 13u;
    float _1423 = _439 + (-1.0);
    float _1428 = (cbLight._m0[_1416].x * _1423) + 1.0;
    float _1429 = (cbLight._m0[_1416].y * _1423) + 1.0;
    float _1430 = (cbLight._m0[_1416].z * _1423) + 1.0;
    float _1431 = (cbLight._m0[_1416].w * _1423) + 1.0;
    uint _1432 = _1415 + 5u;
    float _1438 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
    uint _1442 = _1415 + 4u;
    float _1452 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
    uint _1456 = _1415 | 1u;
    float _1467 = dot(vec3(cbLight._m0[_1415].xyz), vec3(_284, _285, _286));
    float _1470 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_284, _285, _286));
    float _3352 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _3363 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1475 = (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.3183098733425140380859375;
    float _1477 = (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * 0.3183098733425140380859375;
    float _1484 = ((cbLight._m0[_1432].x * _1438) * _1477) + (((cbLight._m0[_1442].x * _1404) * _1452) * _1475);
    float _1485 = ((_1438 * cbLight._m0[_1432].y) * _1477) + (((cbLight._m0[_1442].y * _1406) * _1452) * _1475);
    float _1486 = ((_1438 * cbLight._m0[_1432].z) * _1477) + (((cbLight._m0[_1442].z * _1408) * _1452) * _1475);
    uvec4 _1490 = floatBitsToUint(cbLight._m0[_1415 + 12u]);
    bool _1492 = _1490.x == 0u;
    float _1562;
    float _1564;
    float _1566;
    if (_1492)
    {
        _1562 = _1484;
        _1564 = _1485;
        _1566 = _1486;
    }
    else
    {
        uint _1570 = _1415 + 6u;
        float _1586 = (dot(vec3(cbLight._m0[_1415 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1587 = _1586 * _1586;
        float _3374 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1589 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1562 = (((cbLight._m0[_1570].x * 0.3183098733425140380859375) * _1588) * _1589) + _1484;
        _1564 = (((cbLight._m0[_1570].y * 0.3183098733425140380859375) * _1588) * _1589) + _1485;
        _1566 = (((cbLight._m0[_1570].z * 0.3183098733425140380859375) * _1588) * _1589) + _1486;
    }
    bool _1569 = _1490.y == 0u;
    float _1599;
    float _1601;
    float _1603;
    if (_1569)
    {
        _1599 = _1562;
        _1601 = _1564;
        _1603 = _1566;
    }
    else
    {
        uint _1763 = _1415 + 7u;
        float _1779 = (dot(vec3(cbLight._m0[_1415 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1780 = _1779 * _1779;
        float _3390 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1782 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1599 = (((cbLight._m0[_1763].x * 0.3183098733425140380859375) * _1781) * _1782) + _1562;
        _1601 = (((cbLight._m0[_1763].y * 0.3183098733425140380859375) * _1781) * _1782) + _1564;
        _1603 = (((cbLight._m0[_1763].z * 0.3183098733425140380859375) * _1781) * _1782) + _1566;
    }
    uint _1606 = _1415 + 8u;
    float _1619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1415].w)) * _287) * 0.949999988079071044921875);
    float _1620 = _1619 * _1619;
    float _1621 = cbLight._m0[_1415].x + _364;
    float _1622 = cbLight._m0[_1415].y + _365;
    float _1623 = cbLight._m0[_1415].z + _366;
    float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
    float _1628 = _1627 * _1621;
    float _1629 = _1627 * _1622;
    float _1630 = _1627 * _1623;
    float _1631 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1415].xyz));
    float _3406 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1634 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _1635 = dot(vec3(_284, _285, _286), vec3(_364, _365, _366));
    float _3417 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1638 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _1639 = dot(vec3(_284, _285, _286), vec3(_1628, _1629, _1630));
    float _3428 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1415].xyz), vec3(_1628, _1629, _1630));
    float _3439 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1647 = _1620 * _1620;
    float _1651 = ((_1642 * _1642) * (_1647 + (-1.0))) + 1.0;
    float _1661 = (exp2(log2(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1662 = 1.0 - _1620;
    float _1673 = (0.5 / (((_1638 * ((_1634 * _1662) + _1620)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1662) + _1620) * _1634))) * _1634;
    float _3450 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1675 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1647 / ((_1651 * _1651) * 3.141590118408203125));
    uint _1689 = _1415 + 9u;
    float _1700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1456].w)) * _287) * 0.949999988079071044921875);
    float _1701 = _1700 * _1700;
    float _1702 = cbLight._m0[_1456].x + _364;
    float _1703 = cbLight._m0[_1456].y + _365;
    float _1704 = cbLight._m0[_1456].z + _366;
    float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
    float _1709 = _1708 * _1702;
    float _1710 = _1708 * _1703;
    float _1711 = _1708 * _1704;
    float _1712 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1456].xyz));
    float _3461 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1715 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _1716 = dot(vec3(_284, _285, _286), vec3(_1709, _1710, _1711));
    float _3472 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1720 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_1709, _1710, _1711));
    float _3483 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1724 = _1701 * _1701;
    float _1728 = ((_1719 * _1719) * (_1724 + (-1.0))) + 1.0;
    float _1737 = (exp2(log2(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1738 = 1.0 - _1701;
    float _1748 = (0.5 / (((_1638 * ((_1715 * _1738) + _1701)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1738) + _1701) * _1715))) * _1715;
    float _3494 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1724 / ((_1728 * _1728) * 3.141590118408203125));
    float _1760 = (((_1737 * cbLight._m0[_1689].x) * _1750) * _1438) + ((((cbLight._m0[_1606].x * _1404) * _1661) * _1675) * _1452);
    float _1761 = (((_1737 * cbLight._m0[_1689].y) * _1750) * _1438) + ((((cbLight._m0[_1606].y * _1406) * _1661) * _1675) * _1452);
    float _1762 = (((_1737 * cbLight._m0[_1689].z) * _1750) * _1438) + ((((cbLight._m0[_1606].z * _1408) * _1661) * _1675) * _1452);
    float _1792;
    float _1794;
    float _1796;
    if (_1492)
    {
        _1792 = _1760;
        _1794 = _1761;
        _1796 = _1762;
    }
    else
    {
        uint _1798 = _1415 + 2u;
        uint _1802 = _1415 + 10u;
        float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _287) * 0.949999988079071044921875);
        float _1817 = _1816 * _1816;
        float _1818 = cbLight._m0[_1798].x + _364;
        float _1819 = cbLight._m0[_1798].y + _365;
        float _1820 = cbLight._m0[_1798].z + _366;
        float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
        float _1825 = _1824 * _1818;
        float _1826 = _1824 * _1819;
        float _1827 = _1824 * _1820;
        float _1828 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1798].xyz));
        float _3505 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1831 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1832 = dot(vec3(_284, _285, _286), vec3(_1825, _1826, _1827));
        float _3516 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1835 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1836 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1825, _1826, _1827));
        float _3527 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1840 = _1817 * _1817;
        float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
        float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1854 = 1.0 - _1817;
        float _1864 = (0.5 / (((_1638 * ((_1831 * _1854) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1854) + _1817) * _1831))) * _1831;
        float _3538 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1866 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
        float _1867 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1792 = (((_1853 * cbLight._m0[_1802].x) * _1866) * _1867) + _1760;
        _1794 = (((_1853 * cbLight._m0[_1802].y) * _1866) * _1867) + _1761;
        _1796 = (((_1853 * cbLight._m0[_1802].z) * _1866) * _1867) + _1762;
    }
    float _1877;
    float _1879;
    float _1881;
    if (_1569)
    {
        _1877 = _1792;
        _1879 = _1794;
        _1881 = _1796;
    }
    else
    {
        uint _1888 = _1415 + 3u;
        uint _1892 = _1415 + 11u;
        float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _287) * 0.949999988079071044921875);
        float _1907 = _1906 * _1906;
        float _1908 = cbLight._m0[_1888].x + _364;
        float _1909 = cbLight._m0[_1888].y + _365;
        float _1910 = cbLight._m0[_1888].z + _366;
        float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
        float _1915 = _1914 * _1908;
        float _1916 = _1914 * _1909;
        float _1917 = _1914 * _1910;
        float _1918 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1888].xyz));
        float _3554 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1922 = dot(vec3(_284, _285, _286), vec3(_1915, _1916, _1917));
        float _3565 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_1915, _1916, _1917));
        float _3576 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1907 * _1907;
        float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
        float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1944 = 1.0 - _1907;
        float _1954 = (0.5 / (((_1638 * ((_1921 * _1944) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1944) + _1907) * _1921))) * _1921;
        float _3587 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1956 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
        float _1957 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1877 = (((_1943 * cbLight._m0[_1892].x) * _1956) * _1957) + _1792;
        _1879 = (((_1943 * cbLight._m0[_1892].y) * _1956) * _1957) + _1794;
        _1881 = (((_1943 * cbLight._m0[_1892].z) * _1956) * _1957) + _1796;
    }
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    if (_1413.y == 0u)
    {
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _373) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _372) / _1979)));
        float _2000 = (log2(_1209 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2089 = 0.0;
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
        }
        else
        {
            float _2090;
            float _2092;
            float _2094;
            float _2096;
            float _2098;
            float _2100;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            float _2239 = 0.0;
            uint _2240 = 0u;
            uint _2249;
            bool _2250;
            for (;;)
            {
                _2249 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2240 << 2u)) >> 2u)).x;
                _2250 = _2249 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2250)
                {
                    frontier_phi_32_pred = _2239;
                    frontier_phi_32_pred_1 = _2238;
                    frontier_phi_32_pred_2 = _2237;
                    frontier_phi_32_pred_3 = _2236;
                    frontier_phi_32_pred_4 = _2234;
                    frontier_phi_32_pred_5 = _2235;
                }
                else
                {
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    uint _2364;
                    _2358 = _2234;
                    _2359 = _2235;
                    _2360 = _2236;
                    _2361 = _2237;
                    _2362 = _2238;
                    _2363 = _2239;
                    _2364 = _2249;
                    float _2290;
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    float _2295;
                    for (;;)
                    {
                        uint _2368 = uint(findLSB(_2364)) + (_2240 << 5u);
                        uint _2365 = (_2364 + 4294967295u) & _2364;
                        uint _2370 = _2368 * 48u;
                        vec4 _2384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2370)).x, texelFetch(g_PointLightRenderingBuffer, int(_2370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2370 + 3u)).x));
                        uint _2390 = (_2368 * 48u) + 4u;
                        vec4 _2403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2390)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 3u)).x));
                        uint _2409 = (_2368 * 48u) + 8u;
                        vec3 _2420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2409)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 2u)).x));
                        float _2424 = _2384.x - _1207;
                        float _2425 = _2384.y - _1208;
                        float _2426 = _2384.z - _1209;
                        float _2427 = dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426));
                        float _2430 = inversesqrt(_2427);
                        float _2431 = _2430 * _2424;
                        float _2432 = _2430 * _2425;
                        float _2433 = _2430 * _2426;
                        float _2434 = dot(vec3(_394, _397, _400), vec3(_2431, _2432, _2433));
                        float _2439 = 1.0 - (_2427 * _2384.w);
                        float _3613 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
                        float _2440 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
                        float _2441 = sqrt(_2427) * _2403.w;
                        float _2444 = 1.39999997615814208984375 / (_2441 + 1.39999997615814208984375);
                        float _2445 = _2444 * _2444;
                        float _2448 = ((1.0 - _2445) * _2434) + _2445;
                        float _2451 = _2441 * _2441;
                        float _2455 = ((isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0))) * _2440) / ((_2451 * 0.699999988079071044921875) + 1.0);
                        float _2459 = (-0.0) - _1207;
                        float _2460 = (-0.0) - _1208;
                        float _2461 = (-0.0) - _1209;
                        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
                        float _2466 = _2465 * _2459;
                        float _2467 = _2465 * _2460;
                        float _2468 = _2465 * _2461;
                        float _2475 = exp2(log2(1.0 / ((_2451 * 3.5) + 5.0)) * 0.25);
                        float _2477 = 1.0 - sqrt(_287);
                        float _2484 = sqrt(1.0 - ((1.0 - (_2477 * _2477)) * (1.0 - (_2475 * _2475))));
                        float _2485 = _2484 * _2484;
                        float _2486 = _2485 * _2485;
                        float _2487 = _2466 + _2431;
                        float _2488 = _2467 + _2432;
                        float _2489 = _2468 + _2433;
                        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
                        float _2497 = dot(vec3(_394, _397, _400), vec3(_2466, _2467, _2468));
                        float _3629 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2500 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                        float _2501 = dot(vec3(_394, _397, _400), vec3(_2493 * _2487, _2493 * _2488, _2493 * _2489));
                        float _3640 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _2504 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
                        float _2508 = ((_2504 * _2504) * (_2486 + (-1.0))) + 1.0;
                        float _2509 = _2444 * _2485;
                        float _2510 = _2509 * _2509;
                        float _2513 = ((1.0 - _2510) * _2434) + _2510;
                        float _3651 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2514 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
                        float _2515 = 1.0 - _2485;
                        float _2525 = (0.5 / (((_2514 * ((_2500 * _2515) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2515) + _2485) * _2500))) * _2514;
                        float _3662 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _2536 = (((_2486 * 3.1415927410125732421875) * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) / ((_2508 * _2508) * ((_2451 * 2.1991131305694580078125) + 3.141590118408203125))) * _2440;
                        _2293 = (_2455 * _2403.x) + _2361;
                        _2294 = (_2455 * _2403.y) + _2362;
                        _2295 = (_2455 * _2403.z) + _2363;
                        _2290 = (_2536 * _2420.x) + _2358;
                        _2291 = (_2536 * _2420.y) + _2359;
                        _2292 = (_2536 * _2420.z) + _2360;
                        if (_2365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2358 = _2290;
                            _2359 = _2291;
                            _2360 = _2292;
                            _2361 = _2293;
                            _2362 = _2294;
                            _2363 = _2295;
                            _2364 = _2365;
                        }
                    }
                    frontier_phi_32_pred = _2295;
                    frontier_phi_32_pred_1 = _2294;
                    frontier_phi_32_pred_2 = _2293;
                    frontier_phi_32_pred_3 = _2292;
                    frontier_phi_32_pred_4 = _2290;
                    frontier_phi_32_pred_5 = _2291;
                }
                _2100 = frontier_phi_32_pred;
                _2098 = frontier_phi_32_pred_1;
                _2096 = frontier_phi_32_pred_2;
                _2094 = frontier_phi_32_pred_3;
                _2090 = frontier_phi_32_pred_4;
                _2092 = frontier_phi_32_pred_5;
                uint _2241 = _2240 + 1u;
                if (_2241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2234 = _2090;
                    _2235 = _2092;
                    _2236 = _2094;
                    _2237 = _2096;
                    _2238 = _2098;
                    _2239 = _2100;
                    _2240 = _2241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2089 = _2090;
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
        }
        uvec4 _2103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2104 = _2103.z;
        uint _2106 = (_2104 >> 8u) & 15u;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        if (((4294967295u << _2106) & _2010) == 0u)
        {
            _2202 = _2089;
            _2204 = _2091;
            _2206 = _2093;
            _2208 = _2095;
            _2210 = _2097;
            _2212 = _2099;
        }
        else
        {
            float _2227 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
            float _2228 = _2227 * _1207;
            float _2229 = _2227 * _1208;
            float _2230 = _2227 * _1209;
            float frontier_phi_26_27_ladder;
            float frontier_phi_26_27_ladder_1;
            float frontier_phi_26_27_ladder_2;
            float frontier_phi_26_27_ladder_3;
            float frontier_phi_26_27_ladder_4;
            float frontier_phi_26_27_ladder_5;
            if (_2106 < ((_2104 >> 12u) & 15u))
            {
                float _2203;
                float _2205;
                float _2207;
                float _2209;
                float _2211;
                float _2213;
                float _2341 = _2089;
                float _2342 = _2091;
                float _2343 = _2093;
                float _2344 = _2095;
                float _2345 = _2097;
                float _2346 = _2099;
                uint _2347 = _2106;
                uint _2356;
                bool _2357;
                for (;;)
                {
                    _2356 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2347 << 2u)) >> 2u)).x;
                    _2357 = _2356 == 0u;
                    float frontier_phi_38_pred;
                    float frontier_phi_38_pred_1;
                    float frontier_phi_38_pred_2;
                    float frontier_phi_38_pred_3;
                    float frontier_phi_38_pred_4;
                    float frontier_phi_38_pred_5;
                    if (_2357)
                    {
                        frontier_phi_38_pred = _2342;
                        frontier_phi_38_pred_1 = _2341;
                        frontier_phi_38_pred_2 = _2346;
                        frontier_phi_38_pred_3 = _2345;
                        frontier_phi_38_pred_4 = _2344;
                        frontier_phi_38_pred_5 = _2343;
                    }
                    else
                    {
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2545;
                        float _2546;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2554 = _2341;
                        float _2555 = _2342;
                        float _2556 = _2343;
                        float _2557 = _2344;
                        float _2558 = _2345;
                        float _2559 = _2346;
                        uint _2560 = _2356;
                        uint _2561;
                        vec4 _2587;
                        float _2588;
                        vec4 _2603;
                        vec3 _2615;
                        vec4 _2631;
                        vec4 _2647;
                        float _2694;
                        bool _2695;
                        for (;;)
                        {
                            uint _2571 = ((_2347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2560));
                            _2561 = (_2560 + 4294967295u) & _2560;
                            uint _2573 = _2571 * 40u;
                            _2587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 3u)).x));
                            _2588 = _2587.w;
                            uint _2590 = (_2571 * 40u) + 4u;
                            _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            uint _2605 = (_2571 * 40u) + 8u;
                            _2615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x));
                            uint _2618 = (_2571 * 40u) + 16u;
                            _2631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 3u)).x));
                            uint _2634 = (_2571 * 40u) + 20u;
                            _2647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 3u)).x));
                            uint _2650 = (_2571 * 40u) + 24u;
                            vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            uint _2669 = (_2571 * 40u) + 28u;
                            vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            _2694 = fma(_1209, _2682.z, fma(_1208, _2682.y, _2682.x * _1207)) + _2682.w;
                            _2695 = !((fma(_1209, _2663.z, fma(_1208, _2663.y, _2663.x * _1207)) + _2663.w) <= 0.0);
                            float frontier_phi_44_pred;
                            float frontier_phi_44_pred_1;
                            float frontier_phi_44_pred_2;
                            float frontier_phi_44_pred_3;
                            float frontier_phi_44_pred_4;
                            float frontier_phi_44_pred_5;
                            if (_2695)
                            {
                                float _2722 = _2587.x - _1207;
                                float _2723 = _2587.y - _1208;
                                float _2724 = _2587.z - _1209;
                                float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                                float _2728 = inversesqrt(_2725);
                                float _2729 = _2728 * _2722;
                                float _2730 = _2728 * _2723;
                                float _2731 = _2728 * _2724;
                                float _2735 = 1.0 - (_2725 / (_2588 * _2588));
                                float _3673 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                                float _2736 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2740 = sqrt(_2725) * _2603.w;
                                float _2742 = 1.39999997615814208984375 / (_2740 + 1.39999997615814208984375);
                                float _2743 = _2742 * _2742;
                                float _2746 = ((1.0 - _2743) * dot(vec3(_2729, _2730, _2731), vec3(_394, _397, _400))) + _2743;
                                float _2749 = _2740 * _2740;
                                float _2753 = (fma(_1209, _2631.z, fma(_1208, _2631.y, _2631.x * _1207)) + _2631.w) / _2694;
                                float _2754 = (fma(_1209, _2647.z, fma(_1208, _2647.y, _2647.x * _1207)) + _2647.w) / _2694;
                                float _2758 = 1.0 - dot(vec2(_2753, _2754), vec2(_2753, _2754));
                                float _3689 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2759 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
                                float _2760 = _2759 * (((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2736) / ((_2749 * 0.699999988079071044921875) + 1.0));
                                float _2772 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                                float _2774 = 1.0 - sqrt(_287);
                                float _2781 = sqrt(1.0 - ((1.0 - (_2774 * _2774)) * (1.0 - (_2772 * _2772))));
                                float _2782 = _2781 * _2781;
                                float _2783 = _2782 * _2782;
                                float _2784 = _2729 - _2228;
                                float _2785 = _2730 - _2229;
                                float _2786 = _2731 - _2230;
                                float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                                float _2794 = dot(vec3(_394, _397, _400), vec3((-0.0) - _2228, (-0.0) - _2229, (-0.0) - _2230));
                                float _3700 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2797 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                                float _2798 = dot(vec3(_394, _397, _400), vec3(_2790 * _2784, _2790 * _2785, _2790 * _2786));
                                float _3711 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                                float _2801 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
                                float _2805 = ((_2801 * _2801) * (_2783 + (-1.0))) + 1.0;
                                float _2806 = _2742 * _2782;
                                float _2807 = _2806 * _2806;
                                float _2813 = ((1.0 - _2807) * dot(vec3(_394, _397, _400), vec3(_2729, _2730, _2731))) + _2807;
                                float _3722 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                                float _2814 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                                float _2815 = 1.0 - _2782;
                                float _2825 = (0.5 / (((_2814 * ((_2797 * _2815) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2814 * _2815) + _2782) * _2797))) * _2814;
                                float _3733 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2835 = (_2759 * _2736) * (((_2783 * 3.1415927410125732421875) * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) / ((_2805 * _2805) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_44_pred = _2760 * _2603.z;
                                frontier_phi_44_pred_1 = _2760 * _2603.y;
                                frontier_phi_44_pred_2 = _2760 * _2603.x;
                                frontier_phi_44_pred_3 = _2835 * _2615.z;
                                frontier_phi_44_pred_4 = _2835 * _2615.x;
                                frontier_phi_44_pred_5 = _2835 * _2615.y;
                            }
                            else
                            {
                                frontier_phi_44_pred = 0.0;
                                frontier_phi_44_pred_1 = 0.0;
                                frontier_phi_44_pred_2 = 0.0;
                                frontier_phi_44_pred_3 = 0.0;
                                frontier_phi_44_pred_4 = 0.0;
                                frontier_phi_44_pred_5 = 0.0;
                            }
                            _2844 = frontier_phi_44_pred;
                            _2843 = frontier_phi_44_pred_1;
                            _2842 = frontier_phi_44_pred_2;
                            _2841 = frontier_phi_44_pred_3;
                            _2839 = frontier_phi_44_pred_4;
                            _2840 = frontier_phi_44_pred_5;
                            _2544 = _2842 + _2557;
                            _2545 = _2843 + _2558;
                            _2546 = _2844 + _2559;
                            _2541 = _2839 + _2554;
                            _2542 = _2840 + _2555;
                            _2543 = _2841 + _2556;
                            if (_2561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2545;
                                _2559 = _2546;
                                _2560 = _2561;
                                continue;
                            }
                        }
                        frontier_phi_38_pred = _2542;
                        frontier_phi_38_pred_1 = _2541;
                        frontier_phi_38_pred_2 = _2546;
                        frontier_phi_38_pred_3 = _2545;
                        frontier_phi_38_pred_4 = _2544;
                        frontier_phi_38_pred_5 = _2543;
                    }
                    _2205 = frontier_phi_38_pred;
                    _2203 = frontier_phi_38_pred_1;
                    _2213 = frontier_phi_38_pred_2;
                    _2211 = frontier_phi_38_pred_3;
                    _2209 = frontier_phi_38_pred_4;
                    _2207 = frontier_phi_38_pred_5;
                    uint _2348 = _2347 + 1u;
                    if (_2348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2341 = _2203;
                        _2342 = _2205;
                        _2343 = _2207;
                        _2344 = _2209;
                        _2345 = _2211;
                        _2346 = _2213;
                        _2347 = _2348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_26_27_ladder = _2203;
                frontier_phi_26_27_ladder_1 = _2205;
                frontier_phi_26_27_ladder_2 = _2213;
                frontier_phi_26_27_ladder_3 = _2211;
                frontier_phi_26_27_ladder_4 = _2209;
                frontier_phi_26_27_ladder_5 = _2207;
            }
            else
            {
                frontier_phi_26_27_ladder = _2089;
                frontier_phi_26_27_ladder_1 = _2091;
                frontier_phi_26_27_ladder_2 = _2099;
                frontier_phi_26_27_ladder_3 = _2097;
                frontier_phi_26_27_ladder_4 = _2095;
                frontier_phi_26_27_ladder_5 = _2093;
            }
            _2202 = frontier_phi_26_27_ladder;
            _2204 = frontier_phi_26_27_ladder_1;
            _2206 = frontier_phi_26_27_ladder_5;
            _2208 = frontier_phi_26_27_ladder_4;
            _2210 = frontier_phi_26_27_ladder_3;
            _2212 = frontier_phi_26_27_ladder_2;
        }
        float _2217 = isnan(1.0) ? _439 : (isnan(_439) ? 1.0 : min(_439, 1.0));
        _2022 = (_2217 * _2208) + _1599;
        _2024 = (_2217 * _2210) + _1601;
        _2026 = (_2217 * _2212) + _1603;
        _2028 = ((_2202 * 0.039999999105930328369140625) * _2217) + _1877;
        _2030 = ((_2204 * 0.039999999105930328369140625) * _2217) + _1879;
        _2032 = ((_2206 * 0.039999999105930328369140625) * _2217) + _1881;
    }
    else
    {
        _2022 = _1599;
        _2024 = _1601;
        _2026 = _1603;
        _2028 = _1877;
        _2030 = _1879;
        _2032 = _1881;
    }
    float _3749 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3760 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3771 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    uint _2052 = _413 + 6u;
    float _2060 = _372 / cbSceneParam._m0[86u].x;
    float _2061 = _373 / cbSceneParam._m0[86u].y;
    vec4 _2075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2077 = _2075.x;
    float _2078 = _2075.y;
    float _2079 = _2075.z;
    float _2080 = _2075.w;
    float _2152;
    float _2154;
    float _2156;
    float _2158;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2114 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2115 = _2114 / _306;
        float _2126 = _2115 * _357;
        float _2127 = _358 * _2115;
        float _2128 = (-0.0) - _2127;
        float _2129 = _2115 * _359;
        float _2131 = (cbSceneParam._m0[77u].w * _2128) / _2114;
        float _2132 = _2131 + cbSceneParam._m0[79u].w;
        float _2133 = cbSceneParam._m0[79u].w - _2127;
        float _2139 = sqrt(((_2126 * _2126) + (_2127 * _2127)) + (_2129 * _2129));
        float _2142 = (1.0 - (cbSceneParam._m0[77u].w / _2114)) * _2139;
        float _2148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2303;
        if (abs((_2128 - _2131) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2303 = ((((_2132 > 0.0) ? exp2(_2148 * _2132) : (2.0 - exp2(_2150 * _2132))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2142;
        }
        else
        {
            float _2263 = 1.0 / cbSceneParam._m0[80u].x;
            float _2264 = isnan(_2133) ? _2132 : (isnan(_2132) ? _2133 : max(_2132, _2133));
            float _2265 = isnan(_2133) ? _2132 : (isnan(_2132) ? _2133 : min(_2132, _2133));
            float _2274 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : min(_2264, 0.0));
            float _2275 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : min(_2265, 0.0));
            _2303 = ((abs(_2139 / _2128) * cbSceneParam._m0[80u].y) * ((((_2274 - _2275) * 2.0) - ((exp2(_2148 * (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0)))) - exp2(_2148 * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))))) * _2263)) - ((exp2(_2150 * _2274) - exp2(_2150 * _2275)) * _2263))) + (_2142 * cbSceneParam._m0[80u].z);
        }
        vec4 _2305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, 1.0), 0.0);
        float _2314 = exp2((_2303 * (-1.44269502162933349609375)) * (1.0 - _2305.w));
        float _2315 = log2(_2314);
        float _2331 = log2(_2080);
        _2152 = (exp2(_2331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].x)) * _2305.x) / cbSceneParam._m0[78u].x)) + _2077;
        _2154 = (exp2(_2331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].y)) * _2305.y) / cbSceneParam._m0[78u].y)) + _2078;
        _2156 = (exp2(_2331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].z)) * _2305.z) / cbSceneParam._m0[78u].z)) + _2079;
        _2158 = _2314 * _2080;
    }
    else
    {
        _2152 = _2077;
        _2154 = _2078;
        _2156 = _2079;
        _2158 = _2080;
    }
    float _2169 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2170 = _2169 == 3.0;
    float _2172 = log2(_2158);
    float _2179 = exp2(_2172 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_2022 + (_1160 * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)))))) + ((_2028 + ((_471.x * _452) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2180 = exp2(_2172 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_2024 + (_1160 * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)))))) + ((_2030 + ((_471.y * _452) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2181 = exp2(_2172 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_2026 + (_1160 * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)))))) + ((_2032 + ((_471.z * _452) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2190 = (_2169 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2190 * (_2170 ? _2179 : (_2179 + (cbSceneParam._m0[72u].w * _2152)));
    SV_Target.y = _2190 * (_2170 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2154)));
    SV_Target.z = _2190 * (_2170 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2156)));
    SV_Target.w = cbInstanceData._m0[_2052].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2052].w;
}


