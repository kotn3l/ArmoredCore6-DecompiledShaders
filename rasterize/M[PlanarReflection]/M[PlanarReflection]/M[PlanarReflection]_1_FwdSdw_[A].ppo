#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _3028;
float _3029;
float _3030;
float _3031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3040 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0))));
    float _277 = fma(_270, _211, fma(_263, _203 * TANGENT.x, (_189 * _182) * _261));
    float _280 = fma(_270, _212, fma(_263, _203 * TANGENT.y, (_189 * _183) * _261));
    float _283 = fma(_270, _213, fma(_263, _203 * TANGENT.z, (_189 * _184) * _261));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3051 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _291 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _3062 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3073 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3084 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _361 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _351);
    float _362 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _351);
    float _363 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _351);
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _361 * _367;
    float _369 = _362 * _367;
    float _370 = _363 * _367;
    vec4 _375 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _377 = _375.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _542 = sqrt(((_361 * _361) + (_362 * _362)) + (_363 * _363));
        float _548 = (cbMatDynParam._m0[5u].x * _542) + cbMatDynParam._m0[5u].y;
        float _3095 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
        float _549 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _553 = (cbMatDynParam._m0[5u].z * _542) + cbMatDynParam._m0[5u].w;
        float _3106 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) - _549)) + _549) < ((_377 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _413 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _416 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = _429 + 9u;
    uint _432 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3117 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _3128 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _455 = _452.x * TEXCOORD.z;
    float _459 = abs(dot(vec3(_368, _369, _370), vec3(_288, _289, _290)));
    float _3150 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _466 = exp2(log2(1.0 - (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * 5.0) * 0.959999978542327880859375;
    float _468 = _466 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_310 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_288, _289, _290), vec3(1.0, 0.0, 0.0))) + (_389 / cbSceneParam._m0[86u].x), 1.0 - (_390 / cbSceneParam._m0[86u].y)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _591 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _595 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _620 = _523 + _288;
        float _621 = _527 + _289;
        float _622 = _531 + _290;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_677.x + (-0.5));
        float _713 = _711 * (_677.y + (-0.5));
        float _714 = _711 * (_677.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _719 = ((_656.x + (-0.5)) * 0.5) * _690;
        float _721 = ((_663.x + (-0.5)) * 0.5) * _697;
        float _723 = ((_670.x + (-0.5)) * 0.5) * _704;
        float _724 = dot(vec3(_719, _721, _723), vec3(_719, _721, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_288, _289, _290), vec3(_729 * _719, _729 * _721, _729 * _723)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_721 * _721) + (_719 * _719)) + (_723 * _723)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3198 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_750 + 1.0))) + _755) * _715;
        float _766 = ((_656.y + (-0.5)) * 0.5) * _690;
        float _768 = ((_663.y + (-0.5)) * 0.5) * _697;
        float _770 = ((_670.y + (-0.5)) * 0.5) * _704;
        float _771 = dot(vec3(_766, _768, _770), vec3(_766, _768, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_288, _289, _290), vec3(_776 * _766, _776 * _768, _776 * _770)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_768 * _768) + (_766 * _766)) + (_770 * _770)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3231 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_795 + 1.0))) + _800) * _716;
        float _811 = ((_656.z + (-0.5)) * 0.5) * _690;
        float _813 = ((_663.z + (-0.5)) * 0.5) * _697;
        float _815 = ((_670.z + (-0.5)) * 0.5) * _704;
        float _816 = dot(vec3(_811, _813, _815), vec3(_811, _813, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_288, _289, _290), vec3(_821 * _811, _821 * _813, _821 * _815)) + 1.0) * 0.5;
        float _3242 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_813 * _813) + (_811 * _811)) + (_815 * _815)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3253 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3264 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * (_840 + 1.0))) + _845) * _717;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _897 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _901 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _924 = _523 + _288;
        float _925 = _527 + _289;
        float _926 = _531 + _290;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_980.x + (-0.5));
        float _1015 = _1013 * (_980.y + (-0.5));
        float _1016 = _1013 * (_980.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1021 = ((_959.x + (-0.5)) * 0.5) * _992;
        float _1023 = ((_966.x + (-0.5)) * 0.5) * _999;
        float _1025 = ((_973.x + (-0.5)) * 0.5) * _1006;
        float _1026 = dot(vec3(_1021, _1023, _1025), vec3(_1021, _1023, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_288, _289, _290), vec3(_1031 * _1021, _1031 * _1023, _1031 * _1025)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1023 * _1023) + (_1021 * _1021)) + (_1025 * _1025)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3327 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1050 + 1.0))) + _1055) * _1017;
        float _1066 = ((_959.y + (-0.5)) * 0.5) * _992;
        float _1068 = ((_966.y + (-0.5)) * 0.5) * _999;
        float _1070 = ((_973.y + (-0.5)) * 0.5) * _1006;
        float _1071 = dot(vec3(_1066, _1068, _1070), vec3(_1066, _1068, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_288, _289, _290), vec3(_1076 * _1066, _1076 * _1068, _1076 * _1070)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1068 * _1068) + (_1066 * _1066)) + (_1070 * _1070)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3360 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1095 + 1.0))) + _1100) * _1018;
        float _1111 = ((_959.z + (-0.5)) * 0.5) * _992;
        float _1113 = ((_966.z + (-0.5)) * 0.5) * _999;
        float _1115 = ((_973.z + (-0.5)) * 0.5) * _1006;
        float _1116 = dot(vec3(_1111, _1113, _1115), vec3(_1111, _1113, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_288, _289, _290), vec3(_1121 * _1111, _1121 * _1113, _1121 * _1115)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1113 * _1113) + (_1111 * _1111)) + (_1115 * _1115)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3393 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1140 + 1.0))) + _1145) * _1019;
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _862)) + _862;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _863)) + _863;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _864)) + _864;
    float _1197 = fma(_1176, cbSceneParam._m0[89u].z, fma(_1175, cbSceneParam._m0[89u].y, _1174 * cbSceneParam._m0[89u].x));
    float _1200 = fma(_1176, cbSceneParam._m0[90u].z, fma(_1175, cbSceneParam._m0[90u].y, _1174 * cbSceneParam._m0[90u].x));
    float _1203 = fma(_1176, cbSceneParam._m0[91u].z, fma(_1175, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1174));
    float _1208 = (0.959999978542327880859375 - _466) * _455;
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1255 = _1242 / _1254;
    float _1256 = _1246 / _1254;
    float _1257 = _1250 / _1254;
    float _1394;
    float _1395;
    float _1396;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1274 = ((uint(_1257 > cbSceneParam._m0[59u].y) + uint(_1257 > cbSceneParam._m0[59u].x)) + uint(_1257 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1275 = _1274 + 43u;
        uint _1283 = _1274 + 44u;
        uint _1291 = _1274 + 45u;
        uint _1299 = _1274 + 46u;
        float _1310 = fma(_1254, cbSceneParam._m0[_1275].w, fma(_1250, cbSceneParam._m0[_1275].z, fma(_1246, cbSceneParam._m0[_1275].y, _1242 * cbSceneParam._m0[_1275].x)));
        float _1314 = fma(_1254, cbSceneParam._m0[_1283].w, fma(_1250, cbSceneParam._m0[_1283].z, fma(_1246, cbSceneParam._m0[_1283].y, _1242 * cbSceneParam._m0[_1283].x)));
        float _1322 = fma(_1254, cbSceneParam._m0[_1299].w, fma(_1250, cbSceneParam._m0[_1299].z, fma(_1246, cbSceneParam._m0[_1299].y, _1242 * cbSceneParam._m0[_1299].x)));
        float _1327 = cbSceneParam._m0[33u].z * _1322;
        float _1329 = cbSceneParam._m0[33u].w * _1322;
        float _1332 = fma(_1254, cbSceneParam._m0[_1291].w, fma(_1250, cbSceneParam._m0[_1291].z, fma(_1246, cbSceneParam._m0[_1291].y, _1242 * cbSceneParam._m0[_1291].x))) / _1322;
        float _1380 = (cbSceneParam._m0[33u].x - sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257))) * cbSceneParam._m0[33u].y;
        float _3434 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1387 = (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1327 + _1310) / _1322, (_1329 + _1314) / _1322), _1332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1329 + _1310) / _1322, (_1314 - _1327) / _1322), _1332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1310 - _1327) / _1322, (_1314 - _1329) / _1322), _1332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1310 - _1329) / _1322, (_1327 + _1314) / _1322), _1332), 0.0)).x), vec4(0.25)));
        _1394 = 1.0 - (_1387 * cbSceneParam._m0[34u].x);
        _1395 = 1.0 - (_1387 * cbSceneParam._m0[34u].y);
        _1396 = 1.0 - (_1387 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1394 = 1.0;
        _1395 = 1.0;
        _1396 = 1.0;
    }
    float _1452;
    float _1454;
    float _1456;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1440 = fma(_1254, cbSceneParam._m0[63u].w, fma(_1250, cbSceneParam._m0[63u].z, fma(_1246, cbSceneParam._m0[63u].y, _1242 * cbSceneParam._m0[63u].x)));
        float _1441 = fma(_1254, cbSceneParam._m0[60u].w, fma(_1250, cbSceneParam._m0[60u].z, fma(_1246, cbSceneParam._m0[60u].y, _1242 * cbSceneParam._m0[60u].x))) / _1440;
        float _1442 = fma(_1254, cbSceneParam._m0[61u].w, fma(_1250, cbSceneParam._m0[61u].z, fma(_1246, cbSceneParam._m0[61u].y, _1242 * cbSceneParam._m0[61u].x))) / _1440;
        float frontier_phi_13_12_ladder;
        float frontier_phi_13_12_ladder_1;
        float frontier_phi_13_12_ladder_2;
        if ((((_1441 >= cbSceneParam._m0[64u].x) && (_1442 >= cbSceneParam._m0[64u].y)) && (_1441 <= cbSceneParam._m0[64u].z)) && (_1442 <= cbSceneParam._m0[64u].w))
        {
            float _1549 = fma(_1254, cbSceneParam._m0[62u].w, fma(_1250, cbSceneParam._m0[62u].z, fma(_1246, cbSceneParam._m0[62u].y, _1242 * cbSceneParam._m0[62u].x))) / _1440;
            float _1553 = isnan(cbSceneParam._m0[41u].w) ? _1549 : (isnan(_1549) ? cbSceneParam._m0[41u].w : max(_1549, cbSceneParam._m0[41u].w));
            float _1596 = (cbSceneParam._m0[33u].x - sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257))) * cbSceneParam._m0[33u].y;
            float _3450 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
            float _1603 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1441, cbSceneParam._m0[33u].w + _1442), _1553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1441, _1442 - cbSceneParam._m0[33u].z), _1553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1441 - cbSceneParam._m0[33u].z, _1442 - cbSceneParam._m0[33u].w), _1553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1441 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1442), _1553), 0.0)).x), vec4(0.25)));
            float _1607 = 1.0 - (_1603 * cbSceneParam._m0[34u].x);
            float _1608 = 1.0 - (_1603 * cbSceneParam._m0[34u].y);
            float _1609 = 1.0 - (_1603 * cbSceneParam._m0[34u].z);
            frontier_phi_13_12_ladder = isnan(_1608) ? _1395 : (isnan(_1395) ? _1608 : min(_1395, _1608));
            frontier_phi_13_12_ladder_1 = isnan(_1607) ? _1394 : (isnan(_1394) ? _1607 : min(_1394, _1607));
            frontier_phi_13_12_ladder_2 = isnan(_1609) ? _1396 : (isnan(_1396) ? _1609 : min(_1396, _1609));
        }
        else
        {
            frontier_phi_13_12_ladder = _1395;
            frontier_phi_13_12_ladder_1 = _1394;
            frontier_phi_13_12_ladder_2 = _1396;
        }
        _1452 = frontier_phi_13_12_ladder_1;
        _1454 = frontier_phi_13_12_ladder;
        _1456 = frontier_phi_13_12_ladder_2;
    }
    else
    {
        _1452 = _1394;
        _1454 = _1395;
        _1456 = _1396;
    }
    uvec4 _1461 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1463 = _1461.x * 14u;
    uint _1464 = _1463 + 13u;
    float _1471 = _455 + (-1.0);
    float _1476 = (cbLight._m0[_1464].x * _1471) + 1.0;
    float _1477 = (cbLight._m0[_1464].y * _1471) + 1.0;
    float _1478 = (cbLight._m0[_1464].z * _1471) + 1.0;
    float _1479 = (cbLight._m0[_1464].w * _1471) + 1.0;
    uint _1480 = _1463 + 5u;
    float _1486 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
    uint _1490 = _1463 + 4u;
    float _1500 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1504 = _1463 | 1u;
    float _1515 = dot(vec3(cbLight._m0[_1463].xyz), vec3(_288, _289, _290));
    float _1518 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_288, _289, _290));
    float _3486 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _3497 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1523 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.3183098733425140380859375;
    float _1525 = (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.3183098733425140380859375;
    float _1532 = ((cbLight._m0[_1480].x * _1486) * _1525) + (((cbLight._m0[_1490].x * _1452) * _1500) * _1523);
    float _1533 = ((_1486 * cbLight._m0[_1480].y) * _1525) + (((cbLight._m0[_1490].y * _1454) * _1500) * _1523);
    float _1534 = ((_1486 * cbLight._m0[_1480].z) * _1525) + (((cbLight._m0[_1490].z * _1456) * _1500) * _1523);
    uvec4 _1538 = floatBitsToUint(cbLight._m0[_1463 + 12u]);
    bool _1540 = _1538.x == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1540)
    {
        _1610 = _1532;
        _1612 = _1533;
        _1614 = _1534;
    }
    else
    {
        uint _1618 = _1463 + 6u;
        float _1634 = (dot(vec3(cbLight._m0[_1463 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1635 = _1634 * _1634;
        float _3508 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1637 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1610 = (((cbLight._m0[_1618].x * 0.3183098733425140380859375) * _1636) * _1637) + _1532;
        _1612 = (((cbLight._m0[_1618].y * 0.3183098733425140380859375) * _1636) * _1637) + _1533;
        _1614 = (((cbLight._m0[_1618].z * 0.3183098733425140380859375) * _1636) * _1637) + _1534;
    }
    bool _1617 = _1538.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1617)
    {
        _1647 = _1610;
        _1649 = _1612;
        _1651 = _1614;
    }
    else
    {
        uint _1811 = _1463 + 7u;
        float _1827 = (dot(vec3(cbLight._m0[_1463 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1828 = _1827 * _1827;
        float _3524 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1830 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1647 = (((cbLight._m0[_1811].x * 0.3183098733425140380859375) * _1829) * _1830) + _1610;
        _1649 = (((cbLight._m0[_1811].y * 0.3183098733425140380859375) * _1829) * _1830) + _1612;
        _1651 = (((cbLight._m0[_1811].z * 0.3183098733425140380859375) * _1829) * _1830) + _1614;
    }
    uint _1654 = _1463 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1463].w)) * _291) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1463].x + _368;
    float _1670 = cbLight._m0[_1463].y + _369;
    float _1671 = cbLight._m0[_1463].z + _370;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1463].xyz));
    float _3540 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _1683 = dot(vec3(_288, _289, _290), vec3(_368, _369, _370));
    float _3551 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _1687 = dot(vec3(_288, _289, _290), vec3(_1676, _1677, _1678));
    float _3562 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1463].xyz), vec3(_1676, _1677, _1678));
    float _3573 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1695 = _1668 * _1668;
    float _1699 = ((_1690 * _1690) * (_1695 + (-1.0))) + 1.0;
    float _1709 = (exp2(log2(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1710 = 1.0 - _1668;
    float _1721 = (0.5 / (((_1686 * ((_1682 * _1710) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1710) + _1668) * _1682))) * _1682;
    float _3584 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1723 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1695 / ((_1699 * _1699) * 3.141590118408203125));
    uint _1737 = _1463 + 9u;
    float _1748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1504].w)) * _291) * 0.949999988079071044921875);
    float _1749 = _1748 * _1748;
    float _1750 = cbLight._m0[_1504].x + _368;
    float _1751 = cbLight._m0[_1504].y + _369;
    float _1752 = cbLight._m0[_1504].z + _370;
    float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
    float _1757 = _1756 * _1750;
    float _1758 = _1756 * _1751;
    float _1759 = _1756 * _1752;
    float _1760 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1504].xyz));
    float _3595 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _1764 = dot(vec3(_288, _289, _290), vec3(_1757, _1758, _1759));
    float _3606 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1768 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1757, _1758, _1759));
    float _3617 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1772 = _1749 * _1749;
    float _1776 = ((_1767 * _1767) * (_1772 + (-1.0))) + 1.0;
    float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1786 = 1.0 - _1749;
    float _1796 = (0.5 / (((_1686 * ((_1763 * _1786) + _1749)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1786) + _1749) * _1763))) * _1763;
    float _3628 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1772 / ((_1776 * _1776) * 3.141590118408203125));
    float _1808 = (((_1785 * cbLight._m0[_1737].x) * _1798) * _1486) + ((((cbLight._m0[_1654].x * _1452) * _1709) * _1723) * _1500);
    float _1809 = (((_1785 * cbLight._m0[_1737].y) * _1798) * _1486) + ((((cbLight._m0[_1654].y * _1454) * _1709) * _1723) * _1500);
    float _1810 = (((_1785 * cbLight._m0[_1737].z) * _1798) * _1486) + ((((cbLight._m0[_1654].z * _1456) * _1709) * _1723) * _1500);
    float _1840;
    float _1842;
    float _1844;
    if (_1540)
    {
        _1840 = _1808;
        _1842 = _1809;
        _1844 = _1810;
    }
    else
    {
        uint _1846 = _1463 + 2u;
        uint _1850 = _1463 + 10u;
        float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _291) * 0.949999988079071044921875);
        float _1865 = _1864 * _1864;
        float _1866 = cbLight._m0[_1846].x + _368;
        float _1867 = cbLight._m0[_1846].y + _369;
        float _1868 = cbLight._m0[_1846].z + _370;
        float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
        float _1873 = _1872 * _1866;
        float _1874 = _1872 * _1867;
        float _1875 = _1872 * _1868;
        float _1876 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1846].xyz));
        float _3639 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1879 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1880 = dot(vec3(_288, _289, _290), vec3(_1873, _1874, _1875));
        float _3650 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1884 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1873, _1874, _1875));
        float _3661 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1888 = _1865 * _1865;
        float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
        float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1902 = 1.0 - _1865;
        float _1912 = (0.5 / (((_1686 * ((_1879 * _1902) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1902) + _1865) * _1879))) * _1879;
        float _3672 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1914 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
        float _1915 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1840 = (((_1901 * cbLight._m0[_1850].x) * _1914) * _1915) + _1808;
        _1842 = (((_1901 * cbLight._m0[_1850].y) * _1914) * _1915) + _1809;
        _1844 = (((_1901 * cbLight._m0[_1850].z) * _1914) * _1915) + _1810;
    }
    float _1925;
    float _1927;
    float _1929;
    if (_1617)
    {
        _1925 = _1840;
        _1927 = _1842;
        _1929 = _1844;
    }
    else
    {
        uint _1936 = _1463 + 3u;
        uint _1940 = _1463 + 11u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _291) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _368;
        float _1957 = cbLight._m0[_1936].y + _369;
        float _1958 = cbLight._m0[_1936].z + _370;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1936].xyz));
        float _3688 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1970 = dot(vec3(_288, _289, _290), vec3(_1963, _1964, _1965));
        float _3699 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3710 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1992 = 1.0 - _1955;
        float _2002 = (0.5 / (((_1686 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1992) + _1955) * _1969))) * _1969;
        float _3721 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2004 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2005 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1925 = (((_1991 * cbLight._m0[_1940].x) * _2004) * _2005) + _1840;
        _1927 = (((_1991 * cbLight._m0[_1940].y) * _2004) * _2005) + _1842;
        _1929 = (((_1991 * cbLight._m0[_1940].z) * _2004) * _2005) + _1844;
    }
    float _2070;
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    float _2080;
    if (_1461.y == 0u)
    {
        uvec4 _2026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2027 = _2026.x;
        uint _2038 = uint((float(_2026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2027))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2027)));
        float _2048 = (log2(_1257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2049 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        uint _2052 = uint(isnan(14.0) ? _2049 : (isnan(_2049) ? 14.0 : min(_2049, 14.0)));
        uvec4 _2057 = texelFetch(g_lightClusterGridBuffer, int(((_2052 << 2u) + (_2038 << 6u)) >> 2u));
        uint _2058 = _2057.x;
        uint _2059 = _2026.z;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        if (((((1u << ((_2059 >> 4u) & 15u)) + 4294967295u) & _2058) == 0u) || ((_2059 & 240u) == 0u))
        {
            _2137 = 0.0;
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
        }
        else
        {
            float _2138;
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            uint _2297 = 0u;
            uint _2306;
            bool _2307;
            for (;;)
            {
                _2306 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2297 << 2u)) >> 2u)).x;
                _2307 = _2306 == 0u;
                float frontier_phi_37_pred;
                float frontier_phi_37_pred_1;
                float frontier_phi_37_pred_2;
                float frontier_phi_37_pred_3;
                float frontier_phi_37_pred_4;
                float frontier_phi_37_pred_5;
                if (_2307)
                {
                    frontier_phi_37_pred = _2296;
                    frontier_phi_37_pred_1 = _2295;
                    frontier_phi_37_pred_2 = _2293;
                    frontier_phi_37_pred_3 = _2292;
                    frontier_phi_37_pred_4 = _2291;
                    frontier_phi_37_pred_5 = _2294;
                }
                else
                {
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    uint _2442;
                    _2436 = _2291;
                    _2437 = _2292;
                    _2438 = _2293;
                    _2439 = _2294;
                    _2440 = _2295;
                    _2441 = _2296;
                    _2442 = _2306;
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    for (;;)
                    {
                        uint _2446 = uint(findLSB(_2442)) + (_2297 << 5u);
                        uint _2443 = (_2442 + 4294967295u) & _2442;
                        uint _2448 = _2446 * 48u;
                        vec4 _2462 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2448)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 3u)).x));
                        uint _2468 = (_2446 * 48u) + 4u;
                        vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2468)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 3u)).x));
                        uint _2487 = (_2446 * 48u) + 8u;
                        vec3 _2498 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2487)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 2u)).x));
                        float _2502 = _2462.x - _1255;
                        float _2503 = _2462.y - _1256;
                        float _2504 = _2462.z - _1257;
                        float _2505 = dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504));
                        float _2508 = inversesqrt(_2505);
                        float _2509 = _2508 * _2502;
                        float _2510 = _2508 * _2503;
                        float _2511 = _2508 * _2504;
                        float _2512 = dot(vec3(_410, _413, _416), vec3(_2509, _2510, _2511));
                        float _2517 = 1.0 - (_2505 * _2462.w);
                        float _3747 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _2518 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                        float _2519 = sqrt(_2505) * _2481.w;
                        float _2522 = 1.39999997615814208984375 / (_2519 + 1.39999997615814208984375);
                        float _2523 = _2522 * _2522;
                        float _2526 = ((1.0 - _2523) * _2512) + _2523;
                        float _2529 = _2519 * _2519;
                        float _2533 = ((isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))) * _2518) / ((_2529 * 0.699999988079071044921875) + 1.0);
                        float _2537 = (-0.0) - _1255;
                        float _2538 = (-0.0) - _1256;
                        float _2539 = (-0.0) - _1257;
                        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
                        float _2544 = _2543 * _2537;
                        float _2545 = _2543 * _2538;
                        float _2546 = _2543 * _2539;
                        float _2553 = exp2(log2(1.0 / ((_2529 * 3.5) + 5.0)) * 0.25);
                        float _2555 = 1.0 - sqrt(_291);
                        float _2562 = sqrt(1.0 - ((1.0 - (_2555 * _2555)) * (1.0 - (_2553 * _2553))));
                        float _2563 = _2562 * _2562;
                        float _2564 = _2563 * _2563;
                        float _2565 = _2544 + _2509;
                        float _2566 = _2545 + _2510;
                        float _2567 = _2546 + _2511;
                        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
                        float _2575 = dot(vec3(_410, _413, _416), vec3(_2544, _2545, _2546));
                        float _3763 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2578 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                        float _2579 = dot(vec3(_410, _413, _416), vec3(_2571 * _2565, _2571 * _2566, _2571 * _2567));
                        float _3774 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _2582 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                        float _2586 = ((_2582 * _2582) * (_2564 + (-1.0))) + 1.0;
                        float _2587 = _2522 * _2563;
                        float _2588 = _2587 * _2587;
                        float _2591 = ((1.0 - _2588) * _2512) + _2588;
                        float _3785 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2592 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                        float _2593 = 1.0 - _2563;
                        float _2603 = (0.5 / (((_2592 * ((_2578 * _2593) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2592 * _2593) + _2563) * _2578))) * _2592;
                        float _3796 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _2614 = (((_2564 * 3.1415927410125732421875) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) / ((_2586 * _2586) * ((_2529 * 2.1991131305694580078125) + 3.141590118408203125))) * _2518;
                        _2366 = (_2533 * _2481.x) + _2439;
                        _2367 = (_2533 * _2481.y) + _2440;
                        _2368 = (_2533 * _2481.z) + _2441;
                        _2363 = (_2614 * _2498.x) + _2436;
                        _2364 = (_2614 * _2498.y) + _2437;
                        _2365 = (_2614 * _2498.z) + _2438;
                        if (_2443 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2436 = _2363;
                            _2437 = _2364;
                            _2438 = _2365;
                            _2439 = _2366;
                            _2440 = _2367;
                            _2441 = _2368;
                            _2442 = _2443;
                        }
                    }
                    frontier_phi_37_pred = _2368;
                    frontier_phi_37_pred_1 = _2367;
                    frontier_phi_37_pred_2 = _2365;
                    frontier_phi_37_pred_3 = _2364;
                    frontier_phi_37_pred_4 = _2363;
                    frontier_phi_37_pred_5 = _2366;
                }
                _2148 = frontier_phi_37_pred;
                _2146 = frontier_phi_37_pred_1;
                _2142 = frontier_phi_37_pred_2;
                _2140 = frontier_phi_37_pred_3;
                _2138 = frontier_phi_37_pred_4;
                _2144 = frontier_phi_37_pred_5;
                uint _2298 = _2297 + 1u;
                if (_2298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2291 = _2138;
                    _2292 = _2140;
                    _2293 = _2142;
                    _2294 = _2144;
                    _2295 = _2146;
                    _2296 = _2148;
                    _2297 = _2298;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2137 = _2138;
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
        }
        uvec4 _2151 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2152 = _2151.z;
        uint _2154 = (_2152 >> 8u) & 15u;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        if (((4294967295u << _2154) & _2058) == 0u)
        {
            _2259 = _2137;
            _2261 = _2139;
            _2263 = _2141;
            _2265 = _2143;
            _2267 = _2145;
            _2269 = _2147;
        }
        else
        {
            float _2284 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
            float _2285 = _2284 * _1255;
            float _2286 = _2284 * _1256;
            float _2287 = _2284 * _1257;
            float frontier_phi_29_30_ladder;
            float frontier_phi_29_30_ladder_1;
            float frontier_phi_29_30_ladder_2;
            float frontier_phi_29_30_ladder_3;
            float frontier_phi_29_30_ladder_4;
            float frontier_phi_29_30_ladder_5;
            if (_2154 < ((_2152 >> 12u) & 15u))
            {
                float _2260;
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2419 = _2137;
                float _2420 = _2139;
                float _2421 = _2141;
                float _2422 = _2143;
                float _2423 = _2145;
                float _2424 = _2147;
                uint _2425 = _2154;
                uint _2434;
                bool _2435;
                for (;;)
                {
                    _2434 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2425 << 2u)) >> 2u)).x;
                    _2435 = _2434 == 0u;
                    float frontier_phi_48_pred;
                    float frontier_phi_48_pred_1;
                    float frontier_phi_48_pred_2;
                    float frontier_phi_48_pred_3;
                    float frontier_phi_48_pred_4;
                    float frontier_phi_48_pred_5;
                    if (_2435)
                    {
                        frontier_phi_48_pred = _2422;
                        frontier_phi_48_pred_1 = _2421;
                        frontier_phi_48_pred_2 = _2420;
                        frontier_phi_48_pred_3 = _2419;
                        frontier_phi_48_pred_4 = _2424;
                        frontier_phi_48_pred_5 = _2423;
                    }
                    else
                    {
                        float _2628;
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2641 = _2419;
                        float _2642 = _2420;
                        float _2643 = _2421;
                        float _2644 = _2422;
                        float _2645 = _2423;
                        float _2646 = _2424;
                        uint _2647 = _2434;
                        uint _2648;
                        vec4 _2674;
                        float _2675;
                        vec4 _2690;
                        vec3 _2702;
                        vec4 _2718;
                        vec4 _2734;
                        float _2781;
                        bool _2782;
                        for (;;)
                        {
                            uint _2658 = ((_2425 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2647));
                            _2648 = (_2647 + 4294967295u) & _2647;
                            uint _2660 = _2658 * 40u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            _2675 = _2674.w;
                            uint _2677 = (_2658 * 40u) + 4u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2692 = (_2658 * 40u) + 8u;
                            _2702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x));
                            uint _2705 = (_2658 * 40u) + 16u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2721 = (_2658 * 40u) + 20u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2737 = (_2658 * 40u) + 24u;
                            vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2756 = (_2658 * 40u) + 28u;
                            vec4 _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            _2781 = fma(_1257, _2769.z, fma(_1256, _2769.y, _2769.x * _1255)) + _2769.w;
                            _2782 = !((fma(_1257, _2750.z, fma(_1256, _2750.y, _2750.x * _1255)) + _2750.w) <= 0.0);
                            float frontier_phi_54_pred;
                            float frontier_phi_54_pred_1;
                            float frontier_phi_54_pred_2;
                            float frontier_phi_54_pred_3;
                            float frontier_phi_54_pred_4;
                            float frontier_phi_54_pred_5;
                            if (_2782)
                            {
                                float _2809 = _2674.x - _1255;
                                float _2810 = _2674.y - _1256;
                                float _2811 = _2674.z - _1257;
                                float _2812 = dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811));
                                float _2815 = inversesqrt(_2812);
                                float _2816 = _2815 * _2809;
                                float _2817 = _2815 * _2810;
                                float _2818 = _2815 * _2811;
                                float _2822 = 1.0 - (_2812 / (_2675 * _2675));
                                float _3807 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                                float _2827 = sqrt(_2812) * _2690.w;
                                float _2829 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                                float _2830 = _2829 * _2829;
                                float _2833 = ((1.0 - _2830) * dot(vec3(_2816, _2817, _2818), vec3(_410, _413, _416))) + _2830;
                                float _2836 = _2827 * _2827;
                                float _2840 = (fma(_1257, _2718.z, fma(_1256, _2718.y, _2718.x * _1255)) + _2718.w) / _2781;
                                float _2841 = (fma(_1257, _2734.z, fma(_1256, _2734.y, _2734.x * _1255)) + _2734.w) / _2781;
                                float _2845 = 1.0 - dot(vec2(_2840, _2841), vec2(_2840, _2841));
                                float _3823 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                                float _2846 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                                float _2847 = _2846 * (((isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))) * _2823) / ((_2836 * 0.699999988079071044921875) + 1.0));
                                float _2859 = exp2(log2(1.0 / ((_2836 * 3.5) + 5.0)) * 0.25);
                                float _2861 = 1.0 - sqrt(_291);
                                float _2868 = sqrt(1.0 - ((1.0 - (_2861 * _2861)) * (1.0 - (_2859 * _2859))));
                                float _2869 = _2868 * _2868;
                                float _2870 = _2869 * _2869;
                                float _2871 = _2816 - _2285;
                                float _2872 = _2817 - _2286;
                                float _2873 = _2818 - _2287;
                                float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                                float _2881 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2285, (-0.0) - _2286, (-0.0) - _2287));
                                float _3834 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2884 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                                float _2885 = dot(vec3(_410, _413, _416), vec3(_2877 * _2871, _2877 * _2872, _2877 * _2873));
                                float _3845 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2888 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                                float _2892 = ((_2888 * _2888) * (_2870 + (-1.0))) + 1.0;
                                float _2893 = _2829 * _2869;
                                float _2894 = _2893 * _2893;
                                float _2900 = ((1.0 - _2894) * dot(vec3(_410, _413, _416), vec3(_2816, _2817, _2818))) + _2894;
                                float _3856 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                                float _2901 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                                float _2902 = 1.0 - _2869;
                                float _2912 = (0.5 / (((_2901 * ((_2884 * _2902) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2869) * _2884))) * _2901;
                                float _3867 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2922 = (_2846 * _2823) * (((_2870 * 3.1415927410125732421875) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) / ((_2892 * _2892) * ((_2836 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_54_pred = _2847 * _2690.z;
                                frontier_phi_54_pred_1 = _2847 * _2690.y;
                                frontier_phi_54_pred_2 = _2847 * _2690.x;
                                frontier_phi_54_pred_3 = _2922 * _2702.z;
                                frontier_phi_54_pred_4 = _2922 * _2702.y;
                                frontier_phi_54_pred_5 = _2922 * _2702.x;
                            }
                            else
                            {
                                frontier_phi_54_pred = 0.0;
                                frontier_phi_54_pred_1 = 0.0;
                                frontier_phi_54_pred_2 = 0.0;
                                frontier_phi_54_pred_3 = 0.0;
                                frontier_phi_54_pred_4 = 0.0;
                                frontier_phi_54_pred_5 = 0.0;
                            }
                            _2931 = frontier_phi_54_pred;
                            _2930 = frontier_phi_54_pred_1;
                            _2929 = frontier_phi_54_pred_2;
                            _2928 = frontier_phi_54_pred_3;
                            _2927 = frontier_phi_54_pred_4;
                            _2926 = frontier_phi_54_pred_5;
                            _2631 = _2929 + _2644;
                            _2632 = _2930 + _2645;
                            _2633 = _2931 + _2646;
                            _2628 = _2926 + _2641;
                            _2629 = _2927 + _2642;
                            _2630 = _2928 + _2643;
                            if (_2648 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2648;
                                continue;
                            }
                        }
                        frontier_phi_48_pred = _2631;
                        frontier_phi_48_pred_1 = _2630;
                        frontier_phi_48_pred_2 = _2629;
                        frontier_phi_48_pred_3 = _2628;
                        frontier_phi_48_pred_4 = _2633;
                        frontier_phi_48_pred_5 = _2632;
                    }
                    _2266 = frontier_phi_48_pred;
                    _2264 = frontier_phi_48_pred_1;
                    _2262 = frontier_phi_48_pred_2;
                    _2260 = frontier_phi_48_pred_3;
                    _2270 = frontier_phi_48_pred_4;
                    _2268 = frontier_phi_48_pred_5;
                    uint _2426 = _2425 + 1u;
                    if (_2426 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2419 = _2260;
                        _2420 = _2262;
                        _2421 = _2264;
                        _2422 = _2266;
                        _2423 = _2268;
                        _2424 = _2270;
                        _2425 = _2426;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_29_30_ladder = _2266;
                frontier_phi_29_30_ladder_1 = _2264;
                frontier_phi_29_30_ladder_2 = _2262;
                frontier_phi_29_30_ladder_3 = _2260;
                frontier_phi_29_30_ladder_4 = _2270;
                frontier_phi_29_30_ladder_5 = _2268;
            }
            else
            {
                frontier_phi_29_30_ladder = _2143;
                frontier_phi_29_30_ladder_1 = _2141;
                frontier_phi_29_30_ladder_2 = _2139;
                frontier_phi_29_30_ladder_3 = _2137;
                frontier_phi_29_30_ladder_4 = _2147;
                frontier_phi_29_30_ladder_5 = _2145;
            }
            _2259 = frontier_phi_29_30_ladder_3;
            _2261 = frontier_phi_29_30_ladder_2;
            _2263 = frontier_phi_29_30_ladder_1;
            _2265 = frontier_phi_29_30_ladder;
            _2267 = frontier_phi_29_30_ladder_5;
            _2269 = frontier_phi_29_30_ladder_4;
        }
        float _2274 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2070 = (_2274 * _2265) + _1647;
        _2072 = (_2274 * _2267) + _1649;
        _2074 = (_2274 * _2269) + _1651;
        _2076 = ((_2259 * 0.039999999105930328369140625) * _2274) + _1925;
        _2078 = ((_2261 * 0.039999999105930328369140625) * _2274) + _1927;
        _2080 = ((_2263 * 0.039999999105930328369140625) * _2274) + _1929;
    }
    else
    {
        _2070 = _1647;
        _2072 = _1649;
        _2074 = _1651;
        _2076 = _1925;
        _2078 = _1927;
        _2080 = _1929;
    }
    float _3883 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3894 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3905 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2097 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_2070 + (_1208 * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)))))) + ((_2076 + ((_487.x * _468) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _2098 = ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_2072 + (_1208 * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)))))) + ((_2078 + ((_487.y * _468) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _2099 = ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_2074 + (_1208 * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)))))) + ((_2080 + ((_487.z * _468) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _2100 = _429 + 6u;
    float _2108 = _389 / cbSceneParam._m0[86u].x;
    float _2109 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2123 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2108, _2109, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2125 = _2123.x;
    float _2126 = _2123.y;
    float _2127 = _2123.z;
    float _2128 = _2123.w;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2162 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2163 = _2162 / _310;
        float _2174 = _2163 * _361;
        float _2175 = _362 * _2163;
        float _2176 = (-0.0) - _2175;
        float _2177 = _2163 * _363;
        float _2179 = (cbSceneParam._m0[77u].w * _2176) / _2162;
        float _2180 = _2179 + cbSceneParam._m0[79u].w;
        float _2181 = cbSceneParam._m0[79u].w - _2175;
        float _2187 = sqrt(((_2174 * _2174) + (_2175 * _2175)) + (_2177 * _2177));
        float _2190 = (1.0 - (cbSceneParam._m0[77u].w / _2162)) * _2187;
        float _2196 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2198 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2376;
        if (abs((_2176 - _2179) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2376 = ((((_2180 > 0.0) ? exp2(_2196 * _2180) : (2.0 - exp2(_2198 * _2180))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2190;
        }
        else
        {
            float _2320 = 1.0 / cbSceneParam._m0[80u].x;
            float _2321 = isnan(_2181) ? _2180 : (isnan(_2180) ? _2181 : max(_2180, _2181));
            float _2322 = isnan(_2181) ? _2180 : (isnan(_2180) ? _2181 : min(_2180, _2181));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            float _2332 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : min(_2322, 0.0));
            _2376 = ((abs(_2187 / _2176) * cbSceneParam._m0[80u].y) * ((((_2331 - _2332) * 2.0) - ((exp2(_2196 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)))) - exp2(_2196 * (isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0))))) * _2320)) - ((exp2(_2198 * _2331) - exp2(_2198 * _2332)) * _2320))) + (_2190 * cbSceneParam._m0[80u].z);
        }
        vec4 _2378 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2108, _2109, 1.0), 0.0);
        float _2387 = exp2((_2376 * (-1.44269502162933349609375)) * (1.0 - _2378.w));
        float _2388 = log2(_2387);
        float _2404 = log2(_2128);
        _2200 = (exp2(_2404 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].x)) * _2378.x) / cbSceneParam._m0[78u].x)) + _2125;
        _2202 = (exp2(_2404 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].y)) * _2378.y) / cbSceneParam._m0[78u].y)) + _2126;
        _2204 = (exp2(_2404 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].z)) * _2378.z) / cbSceneParam._m0[78u].z)) + _2127;
        _2206 = _2387 * _2128;
    }
    else
    {
        _2200 = _2125;
        _2202 = _2126;
        _2204 = _2127;
        _2206 = _2128;
    }
    bool _2414;
    vec4 _2215;
    vec4 _2238;
    float _2240;
    float _2244;
    float _2245;
    float _2246;
    float _2247;
    bool _2258;
    for (;;)
    {
        _2215 = cbMatDynParam._m0[0u];
        float _2217 = roundEven(_2215.y);
        bool _2218 = _2217 == 3.0;
        float _2220 = log2(_2206);
        float _2227 = exp2(_2220 * cbSceneParam._m0[78u].x) * _2097;
        float _2228 = exp2(_2220 * cbSceneParam._m0[78u].y) * _2098;
        float _2229 = exp2(_2220 * cbSceneParam._m0[78u].z) * _2099;
        float _2236 = _377 + (-0.5);
        _2238 = cbMtdParam._m0[1u];
        _2240 = _2238.y * _2236;
        float _2243 = (_2217 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2244 = _2243 * (_2218 ? _2227 : (_2227 + (cbSceneParam._m0[72u].w * _2200)));
        _2245 = _2243 * (_2218 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2202)));
        _2246 = _2243 * (_2218 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2204)));
        _2247 = _2236 * 0.999000012874603271484375;
        _2258 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2258)
        {
            if ((cbInstanceData._m0[_429 + 7u].x + _2247) < 0.5)
            {
                _2414 = true;
                break;
            }
        }
        uint _2355 = _431 + uint(_2215.w);
        if ((cbInstanceData._m0[_2355].w < 1.0) && ((cbInstanceData._m0[_2355].w + _2247) < 0.5))
        {
            _2414 = true;
            break;
        }
        if ((_2240 + 1.0) < _2238.x)
        {
            _2414 = true;
            break;
        }
        _2414 = false;
        break;
    }
    float _2619;
    if (_2414)
    {
        discard_state = true;
        _2619 = 0.0;
    }
    else
    {
        _2619 = cbInstanceData._m0[_2100].w;
    }
    SV_Target.x = _2244;
    SV_Target.y = _2245;
    SV_Target.z = _2246;
    SV_Target.w = _2619;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2100].w;
    discard_exit();
}


