#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2741;
float _2742;
float _2743;
float _2744;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _2753 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0))));
    float _273 = fma(_266, _207, fma(_259, _199 * TANGENT.x, (_185 * _178) * _257));
    float _276 = fma(_266, _208, fma(_259, _199 * TANGENT.y, (_185 * _179) * _257));
    float _279 = fma(_266, _209, fma(_259, _199 * TANGENT.z, (_185 * _180) * _257));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _2764 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _287 = isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0));
    float _2775 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _2786 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _2797 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _347 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _357 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _347);
    float _358 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _347);
    float _359 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _347);
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _357 * _363;
    float _365 = _358 * _363;
    float _366 = _359 * _363;
    vec4 _371 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _373 = _371.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _538 = sqrt(((_357 * _357) + (_358 * _358)) + (_359 * _359));
        float _544 = (cbMatDynParam._m0[5u].x * _538) + cbMatDynParam._m0[5u].y;
        float _2808 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        float _545 = isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0));
        float _549 = (cbMatDynParam._m0[5u].z * _538) + cbMatDynParam._m0[5u].w;
        float _2819 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0))) - _545)) + _545) < ((_373 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _409 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _412 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _425 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2786 : (isnan(_2786) ? 1.0 : min(_2786, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0)))) * cbInstanceData._m0[_428].z;
    float _2830 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0));
    float _2841 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2841 : (isnan(_2841) ? 1.0 : min(_2841, 1.0));
    float _2852 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _2852 : (isnan(_2852) ? 1.0 : min(_2852, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _451 = _448.x * TEXCOORD.z;
    float _455 = abs(dot(vec3(_364, _365, _366), vec3(_284, _285, _286)));
    float _2863 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _462 = exp2(log2(1.0 - (isnan(1.0) ? _2863 : (isnan(_2863) ? 1.0 : min(_2863, 1.0)))) * 5.0) * 0.959999978542327880859375;
    float _464 = _462 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_306 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_284, _285, _286), vec3(1.0, 0.0, 0.0))) + (_385 / cbSceneParam._m0[86u].x), 1.0 - (_386 / cbSceneParam._m0[86u].y)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519));
        float _587 = fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519));
        float _591 = fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519));
        float _616 = _519 + _284;
        float _617 = _523 + _285;
        float _618 = _527 + _286;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_673.x + (-0.5));
        float _709 = _707 * (_673.y + (-0.5));
        float _710 = _707 * (_673.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _715 = ((_652.x + (-0.5)) * 0.5) * _686;
        float _717 = ((_659.x + (-0.5)) * 0.5) * _693;
        float _719 = ((_666.x + (-0.5)) * 0.5) * _700;
        float _720 = dot(vec3(_715, _717, _719), vec3(_715, _717, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_284, _285, _286), vec3(_725 * _715, _725 * _717, _725 * _719)) + 1.0) * 0.5;
        float _2889 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_717 * _717) + (_715 * _715)) + (_719 * _719)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _2900 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _2911 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0))) * (_746 + 1.0))) + _751) * _711;
        float _762 = ((_652.y + (-0.5)) * 0.5) * _686;
        float _764 = ((_659.y + (-0.5)) * 0.5) * _693;
        float _766 = ((_666.y + (-0.5)) * 0.5) * _700;
        float _767 = dot(vec3(_762, _764, _766), vec3(_762, _764, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_284, _285, _286), vec3(_772 * _762, _772 * _764, _772 * _766)) + 1.0) * 0.5;
        float _2922 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_764 * _764) + (_762 * _762)) + (_766 * _766)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _2933 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _2944 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0))) * (_791 + 1.0))) + _796) * _712;
        float _807 = ((_652.z + (-0.5)) * 0.5) * _686;
        float _809 = ((_659.z + (-0.5)) * 0.5) * _693;
        float _811 = ((_666.z + (-0.5)) * 0.5) * _700;
        float _812 = dot(vec3(_807, _809, _811), vec3(_807, _809, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_284, _285, _286), vec3(_817 * _807, _817 * _809, _817 * _811)) + 1.0) * 0.5;
        float _2955 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_809 * _809) + (_807 * _807)) + (_811 * _811)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _2966 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _2977 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0))) * (_836 + 1.0))) + _841) * _713;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519));
        float _893 = fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519));
        float _897 = fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519));
        float _920 = _519 + _284;
        float _921 = _523 + _285;
        float _922 = _527 + _286;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_976.x + (-0.5));
        float _1011 = _1009 * (_976.y + (-0.5));
        float _1012 = _1009 * (_976.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1017 = ((_955.x + (-0.5)) * 0.5) * _988;
        float _1019 = ((_962.x + (-0.5)) * 0.5) * _995;
        float _1021 = ((_969.x + (-0.5)) * 0.5) * _1002;
        float _1022 = dot(vec3(_1017, _1019, _1021), vec3(_1017, _1019, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_284, _285, _286), vec3(_1027 * _1017, _1027 * _1019, _1027 * _1021)) + 1.0) * 0.5;
        float _3018 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1019 * _1019) + (_1017 * _1017)) + (_1021 * _1021)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3029 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3040 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0))) * (_1046 + 1.0))) + _1051) * _1013;
        float _1062 = ((_955.y + (-0.5)) * 0.5) * _988;
        float _1064 = ((_962.y + (-0.5)) * 0.5) * _995;
        float _1066 = ((_969.y + (-0.5)) * 0.5) * _1002;
        float _1067 = dot(vec3(_1062, _1064, _1066), vec3(_1062, _1064, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_284, _285, _286), vec3(_1072 * _1062, _1072 * _1064, _1072 * _1066)) + 1.0) * 0.5;
        float _3051 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1064 * _1064) + (_1062 * _1062)) + (_1066 * _1066)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3062 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3073 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) * (_1091 + 1.0))) + _1096) * _1014;
        float _1107 = ((_955.z + (-0.5)) * 0.5) * _988;
        float _1109 = ((_962.z + (-0.5)) * 0.5) * _995;
        float _1111 = ((_969.z + (-0.5)) * 0.5) * _1002;
        float _1112 = dot(vec3(_1107, _1109, _1111), vec3(_1107, _1109, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_284, _285, _286), vec3(_1117 * _1107, _1117 * _1109, _1117 * _1111)) + 1.0) * 0.5;
        float _3084 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1109 * _1109) + (_1107 * _1107)) + (_1111 * _1111)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3095 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3106 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0))) * (_1136 + 1.0))) + _1141) * _1015;
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _858)) + _858;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _859)) + _859;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _860)) + _860;
    float _1193 = fma(_1172, cbSceneParam._m0[89u].z, fma(_1171, cbSceneParam._m0[89u].y, _1170 * cbSceneParam._m0[89u].x));
    float _1196 = fma(_1172, cbSceneParam._m0[90u].z, fma(_1171, cbSceneParam._m0[90u].y, _1170 * cbSceneParam._m0[90u].x));
    float _1199 = fma(_1172, cbSceneParam._m0[91u].z, fma(_1171, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1170));
    float _1204 = (0.959999978542327880859375 - _462) * _451;
    uvec4 _1211 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1213 = _1211.x * 14u;
    uint _1215 = _1213 + 13u;
    float _1222 = _451 + (-1.0);
    float _1227 = (cbLight._m0[_1215].x * _1222) + 1.0;
    float _1228 = (cbLight._m0[_1215].y * _1222) + 1.0;
    float _1229 = (cbLight._m0[_1215].z * _1222) + 1.0;
    float _1230 = (cbLight._m0[_1215].w * _1222) + 1.0;
    uint _1231 = _1213 + 5u;
    float _1237 = isnan(1.0) ? _1228 : (isnan(_1228) ? 1.0 : min(_1228, 1.0));
    uint _1241 = _1213 + 4u;
    float _1248 = isnan(1.0) ? _1227 : (isnan(_1227) ? 1.0 : min(_1227, 1.0));
    uint _1252 = _1213 | 1u;
    float _1263 = dot(vec3(cbLight._m0[_1213].xyz), vec3(_284, _285, _286));
    float _1266 = dot(vec3(cbLight._m0[_1252].xyz), vec3(_284, _285, _286));
    float _3157 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _3168 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _1271 = (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * 0.3183098733425140380859375;
    float _1273 = (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0))) * 0.3183098733425140380859375;
    float _1280 = ((cbLight._m0[_1231].x * _1237) * _1273) + ((cbLight._m0[_1241].x * _1248) * _1271);
    float _1281 = ((_1237 * cbLight._m0[_1231].y) * _1273) + ((_1248 * cbLight._m0[_1241].y) * _1271);
    float _1282 = ((_1237 * cbLight._m0[_1231].z) * _1273) + ((_1248 * cbLight._m0[_1241].z) * _1271);
    uvec4 _1287 = floatBitsToUint(cbLight._m0[_1213 + 12u]);
    bool _1289 = _1287.x == 0u;
    float _1290;
    float _1292;
    float _1294;
    if (_1289)
    {
        _1290 = _1280;
        _1292 = _1281;
        _1294 = _1282;
    }
    else
    {
        uint _1298 = _1213 + 6u;
        float _1314 = (dot(vec3(cbLight._m0[_1213 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1315 = _1314 * _1314;
        float _3179 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _1317 = isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0));
        _1290 = (((cbLight._m0[_1298].x * 0.3183098733425140380859375) * _1316) * _1317) + _1280;
        _1292 = (((cbLight._m0[_1298].y * 0.3183098733425140380859375) * _1316) * _1317) + _1281;
        _1294 = (((cbLight._m0[_1298].z * 0.3183098733425140380859375) * _1316) * _1317) + _1282;
    }
    bool _1297 = _1287.y == 0u;
    float _1327;
    float _1329;
    float _1331;
    if (_1297)
    {
        _1327 = _1290;
        _1329 = _1292;
        _1331 = _1294;
    }
    else
    {
        uint _1488 = _1213 + 7u;
        float _1504 = (dot(vec3(cbLight._m0[_1213 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1505 = _1504 * _1504;
        float _3195 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _1507 = isnan(1.0) ? _1230 : (isnan(_1230) ? 1.0 : min(_1230, 1.0));
        _1327 = (((cbLight._m0[_1488].x * 0.3183098733425140380859375) * _1506) * _1507) + _1290;
        _1329 = (((cbLight._m0[_1488].y * 0.3183098733425140380859375) * _1506) * _1507) + _1292;
        _1331 = (((cbLight._m0[_1488].z * 0.3183098733425140380859375) * _1506) * _1507) + _1294;
    }
    uint _1334 = _1213 + 8u;
    float _1347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1213].w)) * _287) * 0.949999988079071044921875);
    float _1348 = _1347 * _1347;
    float _1349 = cbLight._m0[_1213].x + _364;
    float _1350 = cbLight._m0[_1213].y + _365;
    float _1351 = cbLight._m0[_1213].z + _366;
    float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
    float _1356 = _1355 * _1349;
    float _1357 = _1355 * _1350;
    float _1358 = _1355 * _1351;
    float _1359 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1213].xyz));
    float _3211 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
    float _1362 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _1363 = dot(vec3(_284, _285, _286), vec3(_364, _365, _366));
    float _3222 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
    float _1366 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _1367 = dot(vec3(_284, _285, _286), vec3(_1356, _1357, _1358));
    float _3233 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _1370 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _1371 = dot(vec3(cbLight._m0[_1213].xyz), vec3(_1356, _1357, _1358));
    float _3244 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1375 = _1348 * _1348;
    float _1379 = ((_1370 * _1370) * (_1375 + (-1.0))) + 1.0;
    float _1389 = (exp2(log2(1.0 - (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1390 = 1.0 - _1348;
    float _1401 = (0.5 / (((_1366 * ((_1362 * _1390) + _1348)) + 9.9999999392252902907785028219223e-09) + (((_1366 * _1390) + _1348) * _1362))) * _1362;
    float _3255 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1403 = (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * (_1375 / ((_1379 * _1379) * 3.141590118408203125));
    uint _1414 = _1213 + 9u;
    float _1425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1252].w)) * _287) * 0.949999988079071044921875);
    float _1426 = _1425 * _1425;
    float _1427 = cbLight._m0[_1252].x + _364;
    float _1428 = cbLight._m0[_1252].y + _365;
    float _1429 = cbLight._m0[_1252].z + _366;
    float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
    float _1434 = _1433 * _1427;
    float _1435 = _1433 * _1428;
    float _1436 = _1433 * _1429;
    float _1437 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1252].xyz));
    float _3266 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _1440 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _1441 = dot(vec3(_284, _285, _286), vec3(_1434, _1435, _1436));
    float _3277 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    float _1444 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _1445 = dot(vec3(cbLight._m0[_1252].xyz), vec3(_1434, _1435, _1436));
    float _3288 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1449 = _1426 * _1426;
    float _1453 = ((_1444 * _1444) * (_1449 + (-1.0))) + 1.0;
    float _1462 = (exp2(log2(1.0 - (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1463 = 1.0 - _1426;
    float _1473 = (0.5 / (((_1366 * ((_1440 * _1463) + _1426)) + 9.9999999392252902907785028219223e-09) + (((_1366 * _1463) + _1426) * _1440))) * _1440;
    float _3299 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1475 = (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))) * (_1449 / ((_1453 * _1453) * 3.141590118408203125));
    float _1485 = (((_1462 * cbLight._m0[_1414].x) * _1475) * _1237) + (((_1389 * cbLight._m0[_1334].x) * _1403) * _1248);
    float _1486 = (((_1462 * cbLight._m0[_1414].y) * _1475) * _1237) + (((_1389 * cbLight._m0[_1334].y) * _1403) * _1248);
    float _1487 = (((_1462 * cbLight._m0[_1414].z) * _1475) * _1237) + (((_1389 * cbLight._m0[_1334].z) * _1403) * _1248);
    float _1517;
    float _1519;
    float _1521;
    if (_1289)
    {
        _1517 = _1485;
        _1519 = _1486;
        _1521 = _1487;
    }
    else
    {
        uint _1523 = _1213 + 2u;
        uint _1527 = _1213 + 10u;
        float _1541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1523].w)) * _287) * 0.949999988079071044921875);
        float _1542 = _1541 * _1541;
        float _1543 = cbLight._m0[_1523].x + _364;
        float _1544 = cbLight._m0[_1523].y + _365;
        float _1545 = cbLight._m0[_1523].z + _366;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1550 = _1549 * _1543;
        float _1551 = _1549 * _1544;
        float _1552 = _1549 * _1545;
        float _1553 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1523].xyz));
        float _3310 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1556 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1557 = dot(vec3(_284, _285, _286), vec3(_1550, _1551, _1552));
        float _3321 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1560 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1561 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_1550, _1551, _1552));
        float _3332 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1542 * _1542;
        float _1569 = ((_1560 * _1560) * (_1565 + (-1.0))) + 1.0;
        float _1578 = (exp2(log2(1.0 - (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1579 = 1.0 - _1542;
        float _1589 = (0.5 / (((_1366 * ((_1556 * _1579) + _1542)) + 9.9999999392252902907785028219223e-09) + (((_1366 * _1579) + _1542) * _1556))) * _1556;
        float _3343 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1591 = (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_1565 / ((_1569 * _1569) * 3.141590118408203125));
        float _1592 = isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0));
        _1517 = (((_1578 * cbLight._m0[_1527].x) * _1591) * _1592) + _1485;
        _1519 = (((_1578 * cbLight._m0[_1527].y) * _1591) * _1592) + _1486;
        _1521 = (((_1578 * cbLight._m0[_1527].z) * _1591) * _1592) + _1487;
    }
    float _1602;
    float _1604;
    float _1606;
    if (_1297)
    {
        _1602 = _1517;
        _1604 = _1519;
        _1606 = _1521;
    }
    else
    {
        uint _1613 = _1213 + 3u;
        uint _1617 = _1213 + 11u;
        float _1631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _287) * 0.949999988079071044921875);
        float _1632 = _1631 * _1631;
        float _1633 = cbLight._m0[_1613].x + _364;
        float _1634 = cbLight._m0[_1613].y + _365;
        float _1635 = cbLight._m0[_1613].z + _366;
        float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
        float _1640 = _1639 * _1633;
        float _1641 = _1639 * _1634;
        float _1642 = _1639 * _1635;
        float _1643 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1613].xyz));
        float _3359 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1646 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _1647 = dot(vec3(_284, _285, _286), vec3(_1640, _1641, _1642));
        float _3370 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1650 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1651 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1640, _1641, _1642));
        float _3381 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = _1632 * _1632;
        float _1659 = ((_1650 * _1650) * (_1655 + (-1.0))) + 1.0;
        float _1668 = (exp2(log2(1.0 - (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1669 = 1.0 - _1632;
        float _1679 = (0.5 / (((_1366 * ((_1646 * _1669) + _1632)) + 9.9999999392252902907785028219223e-09) + (((_1366 * _1669) + _1632) * _1646))) * _1646;
        float _3392 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1681 = (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_1655 / ((_1659 * _1659) * 3.141590118408203125));
        float _1682 = isnan(1.0) ? _1230 : (isnan(_1230) ? 1.0 : min(_1230, 1.0));
        _1602 = (((_1668 * cbLight._m0[_1617].x) * _1681) * _1682) + _1517;
        _1604 = (((_1668 * cbLight._m0[_1617].y) * _1681) * _1682) + _1519;
        _1606 = (((_1668 * cbLight._m0[_1617].z) * _1681) * _1682) + _1521;
    }
    float _1791;
    float _1793;
    float _1795;
    float _1797;
    float _1799;
    float _1801;
    if (_1211.y == 0u)
    {
        float _1732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1732;
        float _1734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1732;
        float _1735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1732;
        uvec4 _1747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1748 = _1747.x;
        uint _1759 = uint((float(_1747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _1748))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _1748)));
        float _1769 = (log2(_1735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1770 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        uint _1773 = uint(isnan(14.0) ? _1770 : (isnan(_1770) ? 14.0 : min(_1770, 14.0)));
        uvec4 _1778 = texelFetch(g_lightClusterGridBuffer, int(((_1773 << 2u) + (_1759 << 6u)) >> 2u));
        uint _1779 = _1778.x;
        uint _1780 = _1747.z;
        float _1858;
        float _1860;
        float _1862;
        float _1864;
        float _1866;
        float _1868;
        if (((((1u << ((_1780 >> 4u) & 15u)) + 4294967295u) & _1779) == 0u) || ((_1780 & 240u) == 0u))
        {
            _1858 = 0.0;
            _1860 = 0.0;
            _1862 = 0.0;
            _1864 = 0.0;
            _1866 = 0.0;
            _1868 = 0.0;
        }
        else
        {
            float _1859;
            float _1861;
            float _1863;
            float _1865;
            float _1867;
            float _1869;
            float _2012 = 0.0;
            float _2013 = 0.0;
            float _2014 = 0.0;
            float _2015 = 0.0;
            float _2016 = 0.0;
            float _2017 = 0.0;
            uint _2018 = 0u;
            uint _2027;
            bool _2028;
            for (;;)
            {
                _2027 = texelFetch(g_lightClassification, int((((_1773 << 5u) + (_1759 << 9u)) + (_2018 << 2u)) >> 2u)).x;
                _2028 = _2027 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2028)
                {
                    frontier_phi_32_pred = _2012;
                    frontier_phi_32_pred_1 = _2015;
                    frontier_phi_32_pred_2 = _2014;
                    frontier_phi_32_pred_3 = _2013;
                    frontier_phi_32_pred_4 = _2017;
                    frontier_phi_32_pred_5 = _2016;
                }
                else
                {
                    float _2157;
                    float _2158;
                    float _2159;
                    float _2160;
                    float _2161;
                    float _2162;
                    uint _2163;
                    _2157 = _2012;
                    _2158 = _2013;
                    _2159 = _2014;
                    _2160 = _2015;
                    _2161 = _2016;
                    _2162 = _2017;
                    _2163 = _2027;
                    float _2084;
                    float _2085;
                    float _2086;
                    float _2087;
                    float _2088;
                    float _2089;
                    for (;;)
                    {
                        uint _2167 = uint(findLSB(_2163)) + (_2018 << 5u);
                        uint _2164 = (_2163 + 4294967295u) & _2163;
                        uint _2169 = _2167 * 48u;
                        vec4 _2183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2169)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 3u)).x));
                        uint _2189 = (_2167 * 48u) + 4u;
                        vec4 _2202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2189)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2189 + 3u)).x));
                        uint _2208 = (_2167 * 48u) + 8u;
                        vec3 _2219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2208)).x, texelFetch(g_PointLightRenderingBuffer, int(_2208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2208 + 2u)).x));
                        float _2223 = _2183.x - _1733;
                        float _2224 = _2183.y - _1734;
                        float _2225 = _2183.z - _1735;
                        float _2226 = dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225));
                        float _2229 = inversesqrt(_2226);
                        float _2230 = _2229 * _2223;
                        float _2231 = _2229 * _2224;
                        float _2232 = _2229 * _2225;
                        float _2233 = dot(vec3(_406, _409, _412), vec3(_2230, _2231, _2232));
                        float _2238 = 1.0 - (_2226 * _2183.w);
                        float _3418 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
                        float _2239 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
                        float _2240 = sqrt(_2226) * _2202.w;
                        float _2243 = 1.39999997615814208984375 / (_2240 + 1.39999997615814208984375);
                        float _2244 = _2243 * _2243;
                        float _2247 = ((1.0 - _2244) * _2233) + _2244;
                        float _2250 = _2240 * _2240;
                        float _2254 = ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2239) / ((_2250 * 0.699999988079071044921875) + 1.0);
                        float _2258 = (-0.0) - _1733;
                        float _2259 = (-0.0) - _1734;
                        float _2260 = (-0.0) - _1735;
                        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
                        float _2265 = _2264 * _2258;
                        float _2266 = _2264 * _2259;
                        float _2267 = _2264 * _2260;
                        float _2275 = exp2(log2(1.0 / ((_2250 * 3.5) + 5.0)) * 0.25);
                        float _2277 = 1.0 - sqrt(_287);
                        float _2284 = sqrt(1.0 - ((1.0 - (_2277 * _2277)) * (1.0 - (_2275 * _2275))));
                        float _2285 = _2284 * _2284;
                        float _2286 = _2285 * _2285;
                        float _2287 = _2265 + _2230;
                        float _2288 = _2266 + _2231;
                        float _2289 = _2267 + _2232;
                        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
                        float _2297 = dot(vec3(_406, _409, _412), vec3(_2265, _2266, _2267));
                        float _3434 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
                        float _2300 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
                        float _2301 = dot(vec3(_406, _409, _412), vec3(_2293 * _2287, _2293 * _2288, _2293 * _2289));
                        float _3445 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
                        float _2304 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
                        float _2308 = ((_2304 * _2304) * (_2286 + (-1.0))) + 1.0;
                        float _2309 = _2243 * _2285;
                        float _2310 = _2309 * _2309;
                        float _2313 = ((1.0 - _2310) * _2233) + _2310;
                        float _3456 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
                        float _2314 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
                        float _2315 = 1.0 - _2285;
                        float _2325 = (0.5 / (((_2314 * ((_2300 * _2315) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2315) + _2285) * _2300))) * _2314;
                        float _3467 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
                        float _2336 = (((_2286 * 3.1415927410125732421875) * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) / ((_2308 * _2308) * ((_2250 * 2.1991131305694580078125) + 3.141590118408203125))) * _2239;
                        _2087 = (_2254 * _2202.x) + _2160;
                        _2088 = (_2254 * _2202.y) + _2161;
                        _2089 = (_2254 * _2202.z) + _2162;
                        _2084 = (_2336 * _2219.x) + _2157;
                        _2085 = (_2336 * _2219.y) + _2158;
                        _2086 = (_2336 * _2219.z) + _2159;
                        if (_2164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2157 = _2084;
                            _2158 = _2085;
                            _2159 = _2086;
                            _2160 = _2087;
                            _2161 = _2088;
                            _2162 = _2089;
                            _2163 = _2164;
                        }
                    }
                    frontier_phi_32_pred = _2084;
                    frontier_phi_32_pred_1 = _2087;
                    frontier_phi_32_pred_2 = _2086;
                    frontier_phi_32_pred_3 = _2085;
                    frontier_phi_32_pred_4 = _2089;
                    frontier_phi_32_pred_5 = _2088;
                }
                _1859 = frontier_phi_32_pred;
                _1865 = frontier_phi_32_pred_1;
                _1863 = frontier_phi_32_pred_2;
                _1861 = frontier_phi_32_pred_3;
                _1869 = frontier_phi_32_pred_4;
                _1867 = frontier_phi_32_pred_5;
                uint _2019 = _2018 + 1u;
                if (_2019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2012 = _1859;
                    _2013 = _1861;
                    _2014 = _1863;
                    _2015 = _1865;
                    _2016 = _1867;
                    _2017 = _1869;
                    _2018 = _2019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1858 = _1859;
            _1860 = _1861;
            _1862 = _1863;
            _1864 = _1865;
            _1866 = _1867;
            _1868 = _1869;
        }
        uvec4 _1872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1873 = _1872.z;
        uint _1875 = (_1873 >> 8u) & 15u;
        float _1980;
        float _1982;
        float _1984;
        float _1986;
        float _1988;
        float _1990;
        if (((4294967295u << _1875) & _1779) == 0u)
        {
            _1980 = _1858;
            _1982 = _1860;
            _1984 = _1862;
            _1986 = _1864;
            _1988 = _1866;
            _1990 = _1868;
        }
        else
        {
            float _2005 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
            float _2006 = _2005 * _1733;
            float _2007 = _2005 * _1734;
            float _2008 = _2005 * _1735;
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            float frontier_phi_24_25_ladder_3;
            float frontier_phi_24_25_ladder_4;
            float frontier_phi_24_25_ladder_5;
            if (_1875 < ((_1873 >> 12u) & 15u))
            {
                float _1981;
                float _1983;
                float _1985;
                float _1987;
                float _1989;
                float _1991;
                float _2140 = _1858;
                float _2141 = _1860;
                float _2142 = _1862;
                float _2143 = _1864;
                float _2144 = _1866;
                float _2145 = _1868;
                uint _2146 = _1875;
                uint _2155;
                bool _2156;
                for (;;)
                {
                    _2155 = texelFetch(g_lightClassification, int((((_1773 << 5u) + (_1759 << 9u)) + (_2146 << 2u)) >> 2u)).x;
                    _2156 = _2155 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    float frontier_phi_43_pred_3;
                    float frontier_phi_43_pred_4;
                    float frontier_phi_43_pred_5;
                    if (_2156)
                    {
                        frontier_phi_43_pred = _2143;
                        frontier_phi_43_pred_1 = _2145;
                        frontier_phi_43_pred_2 = _2144;
                        frontier_phi_43_pred_3 = _2142;
                        frontier_phi_43_pred_4 = _2141;
                        frontier_phi_43_pred_5 = _2140;
                    }
                    else
                    {
                        float _2350;
                        float _2351;
                        float _2352;
                        float _2353;
                        float _2354;
                        float _2355;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2363 = _2140;
                        float _2364 = _2141;
                        float _2365 = _2142;
                        float _2366 = _2143;
                        float _2367 = _2144;
                        float _2368 = _2145;
                        uint _2369 = _2155;
                        uint _2370;
                        vec4 _2396;
                        float _2397;
                        vec4 _2412;
                        vec3 _2424;
                        vec4 _2440;
                        vec4 _2456;
                        float _2503;
                        bool _2504;
                        for (;;)
                        {
                            uint _2380 = ((_2146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2369));
                            _2370 = (_2369 + 4294967295u) & _2369;
                            uint _2382 = _2380 * 40u;
                            _2396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2382 + 3u)).x));
                            _2397 = _2396.w;
                            uint _2399 = (_2380 * 40u) + 4u;
                            _2412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 3u)).x));
                            uint _2414 = (_2380 * 40u) + 8u;
                            _2424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 2u)).x));
                            uint _2427 = (_2380 * 40u) + 16u;
                            _2440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2427 + 3u)).x));
                            uint _2443 = (_2380 * 40u) + 20u;
                            _2456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 3u)).x));
                            uint _2459 = (_2380 * 40u) + 24u;
                            vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2459 + 3u)).x));
                            uint _2478 = (_2380 * 40u) + 28u;
                            vec4 _2491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2478 + 3u)).x));
                            _2503 = fma(_1735, _2491.z, fma(_1734, _2491.y, _2491.x * _1733)) + _2491.w;
                            _2504 = !((fma(_1735, _2472.z, fma(_1734, _2472.y, _2472.x * _1733)) + _2472.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            float frontier_phi_49_pred_3;
                            float frontier_phi_49_pred_4;
                            float frontier_phi_49_pred_5;
                            if (_2504)
                            {
                                float _2531 = _2396.x - _1733;
                                float _2532 = _2396.y - _1734;
                                float _2533 = _2396.z - _1735;
                                float _2534 = dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533));
                                float _2537 = inversesqrt(_2534);
                                float _2538 = _2537 * _2531;
                                float _2539 = _2537 * _2532;
                                float _2540 = _2537 * _2533;
                                float _2544 = 1.0 - (_2534 / (_2397 * _2397));
                                float _3478 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                                float _2545 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
                                float _2549 = sqrt(_2534) * _2412.w;
                                float _2551 = 1.39999997615814208984375 / (_2549 + 1.39999997615814208984375);
                                float _2552 = _2551 * _2551;
                                float _2555 = ((1.0 - _2552) * dot(vec3(_2538, _2539, _2540), vec3(_406, _409, _412))) + _2552;
                                float _2558 = _2549 * _2549;
                                float _2562 = (fma(_1735, _2440.z, fma(_1734, _2440.y, _2440.x * _1733)) + _2440.w) / _2503;
                                float _2563 = (fma(_1735, _2456.z, fma(_1734, _2456.y, _2456.x * _1733)) + _2456.w) / _2503;
                                float _2567 = 1.0 - dot(vec2(_2562, _2563), vec2(_2562, _2563));
                                float _3494 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                                float _2568 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
                                float _2569 = _2568 * (((isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))) * _2545) / ((_2558 * 0.699999988079071044921875) + 1.0));
                                float _2581 = exp2(log2(1.0 / ((_2558 * 3.5) + 5.0)) * 0.25);
                                float _2583 = 1.0 - sqrt(_287);
                                float _2590 = sqrt(1.0 - ((1.0 - (_2583 * _2583)) * (1.0 - (_2581 * _2581))));
                                float _2591 = _2590 * _2590;
                                float _2592 = _2591 * _2591;
                                float _2593 = _2538 - _2006;
                                float _2594 = _2539 - _2007;
                                float _2595 = _2540 - _2008;
                                float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
                                float _2603 = dot(vec3(_406, _409, _412), vec3((-0.0) - _2006, (-0.0) - _2007, (-0.0) - _2008));
                                float _3505 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                                float _2606 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
                                float _2607 = dot(vec3(_406, _409, _412), vec3(_2599 * _2593, _2599 * _2594, _2599 * _2595));
                                float _3516 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                                float _2610 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
                                float _2614 = ((_2610 * _2610) * (_2592 + (-1.0))) + 1.0;
                                float _2615 = _2551 * _2591;
                                float _2616 = _2615 * _2615;
                                float _2622 = ((1.0 - _2616) * dot(vec3(_406, _409, _412), vec3(_2538, _2539, _2540))) + _2616;
                                float _3527 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                                float _2623 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
                                float _2624 = 1.0 - _2591;
                                float _2634 = (0.5 / (((_2623 * ((_2606 * _2624) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2624) + _2591) * _2606))) * _2623;
                                float _3538 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                                float _2644 = (_2568 * _2545) * (((_2592 * 3.1415927410125732421875) * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) / ((_2614 * _2614) * ((_2558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_49_pred = _2569 * _2412.x;
                                frontier_phi_49_pred_1 = _2644 * _2424.z;
                                frontier_phi_49_pred_2 = _2644 * _2424.y;
                                frontier_phi_49_pred_3 = _2644 * _2424.x;
                                frontier_phi_49_pred_4 = _2569 * _2412.z;
                                frontier_phi_49_pred_5 = _2569 * _2412.y;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                                frontier_phi_49_pred_3 = 0.0;
                                frontier_phi_49_pred_4 = 0.0;
                                frontier_phi_49_pred_5 = 0.0;
                            }
                            _2651 = frontier_phi_49_pred;
                            _2650 = frontier_phi_49_pred_1;
                            _2649 = frontier_phi_49_pred_2;
                            _2648 = frontier_phi_49_pred_3;
                            _2653 = frontier_phi_49_pred_4;
                            _2652 = frontier_phi_49_pred_5;
                            _2353 = _2651 + _2366;
                            _2354 = _2652 + _2367;
                            _2355 = _2653 + _2368;
                            _2350 = _2648 + _2363;
                            _2351 = _2649 + _2364;
                            _2352 = _2650 + _2365;
                            if (_2370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2363 = _2350;
                                _2364 = _2351;
                                _2365 = _2352;
                                _2366 = _2353;
                                _2367 = _2354;
                                _2368 = _2355;
                                _2369 = _2370;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2353;
                        frontier_phi_43_pred_1 = _2355;
                        frontier_phi_43_pred_2 = _2354;
                        frontier_phi_43_pred_3 = _2352;
                        frontier_phi_43_pred_4 = _2351;
                        frontier_phi_43_pred_5 = _2350;
                    }
                    _1987 = frontier_phi_43_pred;
                    _1991 = frontier_phi_43_pred_1;
                    _1989 = frontier_phi_43_pred_2;
                    _1985 = frontier_phi_43_pred_3;
                    _1983 = frontier_phi_43_pred_4;
                    _1981 = frontier_phi_43_pred_5;
                    uint _2147 = _2146 + 1u;
                    if (_2147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2140 = _1981;
                        _2141 = _1983;
                        _2142 = _1985;
                        _2143 = _1987;
                        _2144 = _1989;
                        _2145 = _1991;
                        _2146 = _2147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _1991;
                frontier_phi_24_25_ladder_1 = _1989;
                frontier_phi_24_25_ladder_2 = _1987;
                frontier_phi_24_25_ladder_3 = _1985;
                frontier_phi_24_25_ladder_4 = _1983;
                frontier_phi_24_25_ladder_5 = _1981;
            }
            else
            {
                frontier_phi_24_25_ladder = _1868;
                frontier_phi_24_25_ladder_1 = _1866;
                frontier_phi_24_25_ladder_2 = _1864;
                frontier_phi_24_25_ladder_3 = _1862;
                frontier_phi_24_25_ladder_4 = _1860;
                frontier_phi_24_25_ladder_5 = _1858;
            }
            _1980 = frontier_phi_24_25_ladder_5;
            _1982 = frontier_phi_24_25_ladder_4;
            _1984 = frontier_phi_24_25_ladder_3;
            _1986 = frontier_phi_24_25_ladder_2;
            _1988 = frontier_phi_24_25_ladder_1;
            _1990 = frontier_phi_24_25_ladder;
        }
        float _1995 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _1791 = (_1995 * _1986) + _1327;
        _1793 = (_1995 * _1988) + _1329;
        _1795 = (_1995 * _1990) + _1331;
        _1797 = ((_1980 * 0.039999999105930328369140625) * _1995) + _1602;
        _1799 = ((_1982 * 0.039999999105930328369140625) * _1995) + _1604;
        _1801 = ((_1984 * 0.039999999105930328369140625) * _1995) + _1606;
    }
    else
    {
        _1791 = _1327;
        _1793 = _1329;
        _1795 = _1331;
        _1797 = _1602;
        _1799 = _1604;
        _1801 = _1606;
    }
    float _3554 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3565 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3576 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _1818 = ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1791 + (_1204 * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)))))) + ((_1797 + ((_483.x * _464) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1819 = ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1793 + (_1204 * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)))))) + ((_1799 + ((_483.y * _464) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1820 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1795 + (_1204 * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)))))) + ((_1801 + ((_483.z * _464) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _1821 = _425 + 6u;
    float _1829 = _385 / cbSceneParam._m0[86u].x;
    float _1830 = _386 / cbSceneParam._m0[86u].y;
    vec4 _1844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1829, _1830, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1846 = _1844.x;
    float _1847 = _1844.y;
    float _1848 = _1844.z;
    float _1849 = _1844.w;
    float _1921;
    float _1923;
    float _1925;
    float _1927;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _1883 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _1884 = _1883 / _306;
        float _1895 = _1884 * _357;
        float _1896 = _358 * _1884;
        float _1897 = (-0.0) - _1896;
        float _1898 = _1884 * _359;
        float _1900 = (cbSceneParam._m0[77u].w * _1897) / _1883;
        float _1901 = _1900 + cbSceneParam._m0[79u].w;
        float _1902 = cbSceneParam._m0[79u].w - _1896;
        float _1908 = sqrt(((_1895 * _1895) + (_1896 * _1896)) + (_1898 * _1898));
        float _1911 = (1.0 - (cbSceneParam._m0[77u].w / _1883)) * _1908;
        float _1917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2097;
        if (abs((_1897 - _1900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2097 = ((((_1901 > 0.0) ? exp2(_1917 * _1901) : (2.0 - exp2(_1919 * _1901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1911;
        }
        else
        {
            float _2041 = 1.0 / cbSceneParam._m0[80u].x;
            float _2042 = isnan(_1902) ? _1901 : (isnan(_1901) ? _1902 : max(_1901, _1902));
            float _2043 = isnan(_1902) ? _1901 : (isnan(_1901) ? _1902 : min(_1901, _1902));
            float _2052 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : min(_2042, 0.0));
            float _2053 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : min(_2043, 0.0));
            _2097 = ((abs(_1908 / _1897) * cbSceneParam._m0[80u].y) * ((((_2052 - _2053) * 2.0) - ((exp2(_1917 * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)))) - exp2(_1917 * (isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))))) * _2041)) - ((exp2(_1919 * _2052) - exp2(_1919 * _2053)) * _2041))) + (_1911 * cbSceneParam._m0[80u].z);
        }
        vec4 _2099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1829, _1830, 1.0), 0.0);
        float _2108 = exp2((_2097 * (-1.44269502162933349609375)) * (1.0 - _2099.w));
        float _2109 = log2(_2108);
        float _2125 = log2(_1849);
        _1921 = (exp2(_2125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2109 * cbSceneParam._m0[78u].x)) * _2099.x) / cbSceneParam._m0[78u].x)) + _1846;
        _1923 = (exp2(_2125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2109 * cbSceneParam._m0[78u].y)) * _2099.y) / cbSceneParam._m0[78u].y)) + _1847;
        _1925 = (exp2(_2125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2109 * cbSceneParam._m0[78u].z)) * _2099.z) / cbSceneParam._m0[78u].z)) + _1848;
        _1927 = _2108 * _1849;
    }
    else
    {
        _1921 = _1846;
        _1923 = _1847;
        _1925 = _1848;
        _1927 = _1849;
    }
    bool _2135;
    vec4 _1936;
    vec4 _1959;
    float _1961;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    bool _1979;
    for (;;)
    {
        _1936 = cbMatDynParam._m0[0u];
        float _1938 = roundEven(_1936.y);
        bool _1939 = _1938 == 3.0;
        float _1941 = log2(_1927);
        float _1948 = exp2(_1941 * cbSceneParam._m0[78u].x) * _1818;
        float _1949 = exp2(_1941 * cbSceneParam._m0[78u].y) * _1819;
        float _1950 = exp2(_1941 * cbSceneParam._m0[78u].z) * _1820;
        float _1957 = _373 + (-0.5);
        _1959 = cbMtdParam._m0[1u];
        _1961 = _1959.y * _1957;
        float _1964 = (_1938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1965 = _1964 * (_1939 ? _1948 : (_1948 + (cbSceneParam._m0[72u].w * _1921)));
        _1966 = _1964 * (_1939 ? _1949 : (_1949 + (cbSceneParam._m0[72u].w * _1923)));
        _1967 = _1964 * (_1939 ? _1950 : (_1950 + (cbSceneParam._m0[72u].w * _1925)));
        _1968 = _1957 * 0.999000012874603271484375;
        _1979 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1979)
        {
            if ((cbInstanceData._m0[_425 + 7u].x + _1968) < 0.5)
            {
                _2135 = true;
                break;
            }
        }
        uint _2076 = _427 + uint(_1936.w);
        if ((cbInstanceData._m0[_2076].w < 1.0) && ((cbInstanceData._m0[_2076].w + _1968) < 0.5))
        {
            _2135 = true;
            break;
        }
        if ((_1961 + 1.0) < _1959.x)
        {
            _2135 = true;
            break;
        }
        _2135 = false;
        break;
    }
    float _2341;
    if (_2135)
    {
        discard_state = true;
        _2341 = 0.0;
    }
    else
    {
        _2341 = cbInstanceData._m0[_1821].w;
    }
    SV_Target.x = _1965;
    SV_Target.y = _1966;
    SV_Target.z = _1967;
    SV_Target.w = _2341;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1821].w;
    discard_exit();
}


