#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _3086;
float _3087;
float _3088;
float _3089;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _255.x;
    vec4 _269 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3098 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))));
    float _293 = fma(_286, _213, fma(_279, _205 * TANGENT.x, (_191 * _184) * _277));
    float _296 = fma(_286, _214, fma(_279, _205 * TANGENT.y, (_191 * _185) * _277));
    float _299 = fma(_286, _215, fma(_279, _205 * TANGENT.z, (_191 * _186) * _277));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3109 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _307 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
    float _3120 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3131 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3142 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3153 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _311 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _580 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _586 = (cbMatDynParam._m0[5u].x * _580) + cbMatDynParam._m0[5u].y;
        float _3164 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _587 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _591 = (cbMatDynParam._m0[5u].z * _580) + cbMatDynParam._m0[5u].w;
        float _3175 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) - _587)) + _587) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _430 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3186 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _3197 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _461 = 1.0 - _311;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _311;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _311;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _487 = _484.x * TEXCOORD.z;
    float _491 = abs(dot(vec3(_385, _386, _387), vec3(_304, _305, _306)));
    float _3219 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _497 = exp2(log2(1.0 - (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * 5.0);
    float _498 = 0.959999978542327880859375 - _469;
    float _500 = 0.959999978542327880859375 - _470;
    float _501 = 0.959999978542327880859375 - _471;
    float _505 = (_497 * _498) + _472;
    float _506 = (_497 * _500) + _474;
    float _507 = (_497 * _501) + _475;
    vec4 _525 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_327 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_304, _305, _306), vec3(1.0, 0.0, 0.0))) + (_406 / cbSceneParam._m0[86u].x), 1.0 - (_407 / cbSceneParam._m0[86u].y)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _901;
    float _902;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _629 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _633 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _658 = _561 + _304;
        float _659 = _565 + _305;
        float _660 = _569 + _306;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _757 = ((_694.x + (-0.5)) * 0.5) * _728;
        float _759 = ((_701.x + (-0.5)) * 0.5) * _735;
        float _761 = ((_708.x + (-0.5)) * 0.5) * _742;
        float _762 = dot(vec3(_757, _759, _761), vec3(_757, _759, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_304, _305, _306), vec3(_767 * _757, _767 * _759, _767 * _761)) + 1.0) * 0.5;
        float _3245 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_759 * _759) + (_757 * _757)) + (_761 * _761)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3256 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3267 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * (_788 + 1.0))) + _793) * _753;
        float _804 = ((_694.y + (-0.5)) * 0.5) * _728;
        float _806 = ((_701.y + (-0.5)) * 0.5) * _735;
        float _808 = ((_708.y + (-0.5)) * 0.5) * _742;
        float _809 = dot(vec3(_804, _806, _808), vec3(_804, _806, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_304, _305, _306), vec3(_814 * _804, _814 * _806, _814 * _808)) + 1.0) * 0.5;
        float _3278 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_806 * _806) + (_804 * _804)) + (_808 * _808)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3289 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3300 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * (_833 + 1.0))) + _838) * _754;
        float _849 = ((_694.z + (-0.5)) * 0.5) * _728;
        float _851 = ((_701.z + (-0.5)) * 0.5) * _735;
        float _853 = ((_708.z + (-0.5)) * 0.5) * _742;
        float _854 = dot(vec3(_849, _851, _853), vec3(_849, _851, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_304, _305, _306), vec3(_859 * _849, _859 * _851, _859 * _853)) + 1.0) * 0.5;
        float _3311 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_851 * _851) + (_849 * _849)) + (_853 * _853)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3322 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3333 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) * (_878 + 1.0))) + _883) * _755;
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = 0.0;
        _901 = 0.0;
        _902 = 0.0;
    }
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _931 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _935 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _939 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _962 = _561 + _304;
        float _963 = _565 + _305;
        float _964 = _569 + _306;
        float _974 = fma(_964, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962)) - _931;
        float _975 = fma(_964, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962)) - _935;
        float _976 = fma(_964, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962)) - _939;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_931 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_935 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[35u].z) + ((((((_939 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1018.x + (-0.5));
        float _1053 = _1051 * (_1018.y + (-0.5));
        float _1054 = _1051 * (_1018.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1059 = ((_997.x + (-0.5)) * 0.5) * _1030;
        float _1061 = ((_1004.x + (-0.5)) * 0.5) * _1037;
        float _1063 = ((_1011.x + (-0.5)) * 0.5) * _1044;
        float _1064 = dot(vec3(_1059, _1061, _1063), vec3(_1059, _1061, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_304, _305, _306), vec3(_1069 * _1059, _1069 * _1061, _1069 * _1063)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1061 * _1061) + (_1059 * _1059)) + (_1063 * _1063)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3396 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_1088 + 1.0))) + _1093) * _1055;
        float _1104 = ((_997.y + (-0.5)) * 0.5) * _1030;
        float _1106 = ((_1004.y + (-0.5)) * 0.5) * _1037;
        float _1108 = ((_1011.y + (-0.5)) * 0.5) * _1044;
        float _1109 = dot(vec3(_1104, _1106, _1108), vec3(_1104, _1106, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_304, _305, _306), vec3(_1114 * _1104, _1114 * _1106, _1114 * _1108)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1106 * _1106) + (_1104 * _1104)) + (_1108 * _1108)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3429 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_1133 + 1.0))) + _1138) * _1056;
        float _1149 = ((_997.z + (-0.5)) * 0.5) * _1030;
        float _1151 = ((_1004.z + (-0.5)) * 0.5) * _1037;
        float _1153 = ((_1011.z + (-0.5)) * 0.5) * _1044;
        float _1154 = dot(vec3(_1149, _1151, _1153), vec3(_1149, _1151, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_304, _305, _306), vec3(_1159 * _1149, _1159 * _1151, _1159 * _1153)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1151 * _1151) + (_1149 * _1149)) + (_1153 * _1153)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3462 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_1178 + 1.0))) + _1183) * _1057;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _900)) + _900;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _901)) + _901;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _902)) + _902;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1284 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1297 = _1284 / _1296;
    float _1298 = _1288 / _1296;
    float _1299 = _1292 / _1296;
    float _1436;
    float _1437;
    float _1438;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1316 = ((uint(_1299 > cbSceneParam._m0[59u].y) + uint(_1299 > cbSceneParam._m0[59u].x)) + uint(_1299 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1317 = _1316 + 43u;
        uint _1325 = _1316 + 44u;
        uint _1333 = _1316 + 45u;
        uint _1341 = _1316 + 46u;
        float _1352 = fma(_1296, cbSceneParam._m0[_1317].w, fma(_1292, cbSceneParam._m0[_1317].z, fma(_1288, cbSceneParam._m0[_1317].y, _1284 * cbSceneParam._m0[_1317].x)));
        float _1356 = fma(_1296, cbSceneParam._m0[_1325].w, fma(_1292, cbSceneParam._m0[_1325].z, fma(_1288, cbSceneParam._m0[_1325].y, _1284 * cbSceneParam._m0[_1325].x)));
        float _1364 = fma(_1296, cbSceneParam._m0[_1341].w, fma(_1292, cbSceneParam._m0[_1341].z, fma(_1288, cbSceneParam._m0[_1341].y, _1284 * cbSceneParam._m0[_1341].x)));
        float _1369 = cbSceneParam._m0[33u].z * _1364;
        float _1371 = cbSceneParam._m0[33u].w * _1364;
        float _1374 = fma(_1296, cbSceneParam._m0[_1333].w, fma(_1292, cbSceneParam._m0[_1333].z, fma(_1288, cbSceneParam._m0[_1333].y, _1284 * cbSceneParam._m0[_1333].x))) / _1364;
        float _1422 = (cbSceneParam._m0[33u].x - sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299))) * cbSceneParam._m0[33u].y;
        float _3503 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1429 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1369 + _1352) / _1364, (_1371 + _1356) / _1364), _1374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1371 + _1352) / _1364, (_1356 - _1369) / _1364), _1374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1352 - _1369) / _1364, (_1356 - _1371) / _1364), _1374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1352 - _1371) / _1364, (_1369 + _1356) / _1364), _1374), 0.0)).x), vec4(0.25)));
        _1436 = 1.0 - (_1429 * cbSceneParam._m0[34u].x);
        _1437 = 1.0 - (_1429 * cbSceneParam._m0[34u].y);
        _1438 = 1.0 - (_1429 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1436 = 1.0;
        _1437 = 1.0;
        _1438 = 1.0;
    }
    float _1494;
    float _1496;
    float _1498;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1482 = fma(_1296, cbSceneParam._m0[63u].w, fma(_1292, cbSceneParam._m0[63u].z, fma(_1288, cbSceneParam._m0[63u].y, _1284 * cbSceneParam._m0[63u].x)));
        float _1483 = fma(_1296, cbSceneParam._m0[60u].w, fma(_1292, cbSceneParam._m0[60u].z, fma(_1288, cbSceneParam._m0[60u].y, _1284 * cbSceneParam._m0[60u].x))) / _1482;
        float _1484 = fma(_1296, cbSceneParam._m0[61u].w, fma(_1292, cbSceneParam._m0[61u].z, fma(_1288, cbSceneParam._m0[61u].y, _1284 * cbSceneParam._m0[61u].x))) / _1482;
        float frontier_phi_13_12_ladder;
        float frontier_phi_13_12_ladder_1;
        float frontier_phi_13_12_ladder_2;
        if ((((_1483 >= cbSceneParam._m0[64u].x) && (_1484 >= cbSceneParam._m0[64u].y)) && (_1483 <= cbSceneParam._m0[64u].z)) && (_1484 <= cbSceneParam._m0[64u].w))
        {
            float _1591 = fma(_1296, cbSceneParam._m0[62u].w, fma(_1292, cbSceneParam._m0[62u].z, fma(_1288, cbSceneParam._m0[62u].y, _1284 * cbSceneParam._m0[62u].x))) / _1482;
            float _1595 = isnan(cbSceneParam._m0[41u].w) ? _1591 : (isnan(_1591) ? cbSceneParam._m0[41u].w : max(_1591, cbSceneParam._m0[41u].w));
            float _1638 = (cbSceneParam._m0[33u].x - sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299))) * cbSceneParam._m0[33u].y;
            float _3519 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
            float _1645 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1483, cbSceneParam._m0[33u].w + _1484), _1595), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1483, _1484 - cbSceneParam._m0[33u].z), _1595), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1483 - cbSceneParam._m0[33u].z, _1484 - cbSceneParam._m0[33u].w), _1595), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1483 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1484), _1595), 0.0)).x), vec4(0.25)));
            float _1649 = 1.0 - (_1645 * cbSceneParam._m0[34u].x);
            float _1650 = 1.0 - (_1645 * cbSceneParam._m0[34u].y);
            float _1651 = 1.0 - (_1645 * cbSceneParam._m0[34u].z);
            frontier_phi_13_12_ladder = isnan(_1650) ? _1437 : (isnan(_1437) ? _1650 : min(_1437, _1650));
            frontier_phi_13_12_ladder_1 = isnan(_1649) ? _1436 : (isnan(_1436) ? _1649 : min(_1436, _1649));
            frontier_phi_13_12_ladder_2 = isnan(_1651) ? _1438 : (isnan(_1438) ? _1651 : min(_1438, _1651));
        }
        else
        {
            frontier_phi_13_12_ladder = _1437;
            frontier_phi_13_12_ladder_1 = _1436;
            frontier_phi_13_12_ladder_2 = _1438;
        }
        _1494 = frontier_phi_13_12_ladder_1;
        _1496 = frontier_phi_13_12_ladder;
        _1498 = frontier_phi_13_12_ladder_2;
    }
    else
    {
        _1494 = _1436;
        _1496 = _1437;
        _1498 = _1438;
    }
    uvec4 _1503 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1505 = _1503.x * 14u;
    uint _1506 = _1505 + 13u;
    float _1513 = _487 + (-1.0);
    float _1518 = (cbLight._m0[_1506].x * _1513) + 1.0;
    float _1519 = (cbLight._m0[_1506].y * _1513) + 1.0;
    float _1520 = (cbLight._m0[_1506].z * _1513) + 1.0;
    float _1521 = (cbLight._m0[_1506].w * _1513) + 1.0;
    uint _1522 = _1505 + 5u;
    float _1528 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
    uint _1532 = _1505 + 4u;
    float _1542 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1546 = _1505 | 1u;
    float _1557 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_304, _305, _306));
    float _1560 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_304, _305, _306));
    float _3555 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _3566 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1565 = (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.3183098733425140380859375;
    float _1567 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.3183098733425140380859375;
    float _1574 = ((cbLight._m0[_1522].x * _1528) * _1567) + (((cbLight._m0[_1532].x * _1494) * _1542) * _1565);
    float _1575 = ((_1528 * cbLight._m0[_1522].y) * _1567) + (((cbLight._m0[_1532].y * _1496) * _1542) * _1565);
    float _1576 = ((_1528 * cbLight._m0[_1522].z) * _1567) + (((cbLight._m0[_1532].z * _1498) * _1542) * _1565);
    uvec4 _1580 = floatBitsToUint(cbLight._m0[_1505 + 12u]);
    bool _1582 = _1580.x == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1582)
    {
        _1652 = _1574;
        _1654 = _1575;
        _1656 = _1576;
    }
    else
    {
        uint _1660 = _1505 + 6u;
        float _1676 = (dot(vec3(cbLight._m0[_1505 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3577 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1679 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1652 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1574;
        _1654 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1575;
        _1656 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1576;
    }
    bool _1659 = _1580.y == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1659)
    {
        _1689 = _1652;
        _1691 = _1654;
        _1693 = _1656;
    }
    else
    {
        uint _1861 = _1505 + 7u;
        float _1877 = (dot(vec3(cbLight._m0[_1505 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3593 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1880 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1689 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1652;
        _1691 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1654;
        _1693 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1656;
    }
    uint _1696 = _1505 + 8u;
    float _1709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1505].w)) * _307) * 0.949999988079071044921875);
    float _1710 = _1709 * _1709;
    float _1711 = cbLight._m0[_1505].x + _385;
    float _1712 = cbLight._m0[_1505].y + _386;
    float _1713 = cbLight._m0[_1505].z + _387;
    float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
    float _1718 = _1717 * _1711;
    float _1719 = _1717 * _1712;
    float _1720 = _1717 * _1713;
    float _1721 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1505].xyz));
    float _3609 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1725 = dot(vec3(_304, _305, _306), vec3(_385, _386, _387));
    float _3620 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _1729 = dot(vec3(_304, _305, _306), vec3(_1718, _1719, _1720));
    float _3631 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_1718, _1719, _1720));
    float _3642 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1710 * _1710;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1749 = exp2(log2(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * 5.0);
    float _1756 = 1.0 - _1710;
    float _1767 = (0.5 / (((_1728 * ((_1724 * _1756) + _1710)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1756) + _1710) * _1724))) * _1724;
    float _3653 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1783 = _1505 + 9u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _307) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1546].x + _385;
    float _1797 = cbLight._m0[_1546].y + _386;
    float _1798 = cbLight._m0[_1546].z + _387;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1546].xyz));
    float _3664 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1810 = dot(vec3(_304, _305, _306), vec3(_1803, _1804, _1805));
    float _3675 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1803, _1804, _1805));
    float _3686 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1795 * _1795;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * 5.0);
    float _1836 = 1.0 - _1795;
    float _1846 = (0.5 / (((_1728 * ((_1809 * _1836) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1836) + _1795) * _1809))) * _1809;
    float _3697 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    float _1858 = (((((_1829 * _498) + _472) * cbLight._m0[_1783].x) * _1848) * _1528) + ((((cbLight._m0[_1696].x * _1494) * ((_1749 * _498) + _472)) * _1769) * _1542);
    float _1859 = (((((_1829 * _500) + _474) * cbLight._m0[_1783].y) * _1848) * _1528) + ((((cbLight._m0[_1696].y * _1496) * ((_1749 * _500) + _474)) * _1769) * _1542);
    float _1860 = (((((_1829 * _501) + _475) * cbLight._m0[_1783].z) * _1848) * _1528) + ((((cbLight._m0[_1696].z * _1498) * ((_1749 * _501) + _475)) * _1769) * _1542);
    float _1890;
    float _1892;
    float _1894;
    if (_1582)
    {
        _1890 = _1858;
        _1892 = _1859;
        _1894 = _1860;
    }
    else
    {
        uint _1896 = _1505 + 2u;
        uint _1900 = _1505 + 10u;
        float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _307) * 0.949999988079071044921875);
        float _1915 = _1914 * _1914;
        float _1916 = cbLight._m0[_1896].x + _385;
        float _1917 = cbLight._m0[_1896].y + _386;
        float _1918 = cbLight._m0[_1896].z + _387;
        float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
        float _1923 = _1922 * _1916;
        float _1924 = _1922 * _1917;
        float _1925 = _1922 * _1918;
        float _1926 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1896].xyz));
        float _3708 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1930 = dot(vec3(_304, _305, _306), vec3(_1923, _1924, _1925));
        float _3719 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1934 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_1923, _1924, _1925));
        float _3730 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = _1915 * _1915;
        float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
        float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * 5.0);
        float _1956 = 1.0 - _1915;
        float _1966 = (0.5 / (((_1728 * ((_1929 * _1956) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1956) + _1915) * _1929))) * _1929;
        float _3741 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1968 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
        float _1969 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1890 = (((((_1949 * _498) + _472) * cbLight._m0[_1900].x) * _1968) * _1969) + _1858;
        _1892 = (((((_1949 * _500) + _474) * cbLight._m0[_1900].y) * _1968) * _1969) + _1859;
        _1894 = (((((_1949 * _501) + _475) * cbLight._m0[_1900].z) * _1968) * _1969) + _1860;
    }
    float _1979;
    float _1981;
    float _1983;
    if (_1659)
    {
        _1979 = _1890;
        _1981 = _1892;
        _1983 = _1894;
    }
    else
    {
        uint _1990 = _1505 + 3u;
        uint _1994 = _1505 + 11u;
        float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _307) * 0.949999988079071044921875);
        float _2009 = _2008 * _2008;
        float _2010 = cbLight._m0[_1990].x + _385;
        float _2011 = cbLight._m0[_1990].y + _386;
        float _2012 = cbLight._m0[_1990].z + _387;
        float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
        float _2017 = _2016 * _2010;
        float _2018 = _2016 * _2011;
        float _2019 = _2016 * _2012;
        float _2020 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1990].xyz));
        float _3757 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _2024 = dot(vec3(_304, _305, _306), vec3(_2017, _2018, _2019));
        float _3768 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _2028 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2017, _2018, _2019));
        float _3779 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2032 = _2009 * _2009;
        float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
        float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * 5.0);
        float _2050 = 1.0 - _2009;
        float _2060 = (0.5 / (((_1728 * ((_2023 * _2050) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2050) + _2009) * _2023))) * _2023;
        float _3790 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2062 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
        float _2063 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1979 = (((((_2043 * _498) + _472) * cbLight._m0[_1994].x) * _2062) * _2063) + _1890;
        _1981 = (((((_2043 * _500) + _474) * cbLight._m0[_1994].y) * _2062) * _2063) + _1892;
        _1983 = (((((_2043 * _501) + _475) * cbLight._m0[_1994].z) * _2062) * _2063) + _1894;
    }
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_1503.y == 0u)
    {
        uvec4 _2084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2085 = _2084.x;
        uint _2096 = uint((float(_2084.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2085))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2085)));
        float _2106 = (log2(_1299 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2107 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        uint _2110 = uint(isnan(14.0) ? _2107 : (isnan(_2107) ? 14.0 : min(_2107, 14.0)));
        uvec4 _2115 = texelFetch(g_lightClusterGridBuffer, int(((_2110 << 2u) + (_2096 << 6u)) >> 2u));
        uint _2116 = _2115.x;
        uint _2117 = _2084.z;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        if (((((1u << ((_2117 >> 4u) & 15u)) + 4294967295u) & _2116) == 0u) || ((_2117 & 240u) == 0u))
        {
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
            _2203 = 0.0;
            _2205 = 0.0;
        }
        else
        {
            float _2196;
            float _2198;
            float _2200;
            float _2202;
            float _2204;
            float _2206;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            float _2353 = 0.0;
            float _2354 = 0.0;
            uint _2355 = 0u;
            uint _2364;
            bool _2365;
            for (;;)
            {
                _2364 = texelFetch(g_lightClassification, int((((_2110 << 5u) + (_2096 << 9u)) + (_2355 << 2u)) >> 2u)).x;
                _2365 = _2364 == 0u;
                float frontier_phi_37_pred;
                float frontier_phi_37_pred_1;
                float frontier_phi_37_pred_2;
                float frontier_phi_37_pred_3;
                float frontier_phi_37_pred_4;
                float frontier_phi_37_pred_5;
                if (_2365)
                {
                    frontier_phi_37_pred = _2354;
                    frontier_phi_37_pred_1 = _2353;
                    frontier_phi_37_pred_2 = _2351;
                    frontier_phi_37_pred_3 = _2350;
                    frontier_phi_37_pred_4 = _2349;
                    frontier_phi_37_pred_5 = _2352;
                }
                else
                {
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    uint _2500;
                    _2494 = _2349;
                    _2495 = _2350;
                    _2496 = _2351;
                    _2497 = _2352;
                    _2498 = _2353;
                    _2499 = _2354;
                    _2500 = _2364;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    for (;;)
                    {
                        uint _2504 = uint(findLSB(_2500)) + (_2355 << 5u);
                        uint _2501 = (_2500 + 4294967295u) & _2500;
                        uint _2506 = _2504 * 48u;
                        vec4 _2520 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 3u)).x));
                        uint _2526 = (_2504 * 48u) + 4u;
                        vec4 _2539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 3u)).x));
                        uint _2545 = (_2504 * 48u) + 8u;
                        vec3 _2556 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x));
                        float _2560 = _2520.x - _1297;
                        float _2561 = _2520.y - _1298;
                        float _2562 = _2520.z - _1299;
                        float _2563 = dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562));
                        float _2566 = inversesqrt(_2563);
                        float _2567 = _2566 * _2560;
                        float _2568 = _2566 * _2561;
                        float _2569 = _2566 * _2562;
                        float _2570 = dot(vec3(_427, _430, _433), vec3(_2567, _2568, _2569));
                        float _2575 = 1.0 - (_2563 * _2520.w);
                        float _3816 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2576 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2577 = sqrt(_2563) * _2539.w;
                        float _2580 = 1.39999997615814208984375 / (_2577 + 1.39999997615814208984375);
                        float _2581 = _2580 * _2580;
                        float _2584 = ((1.0 - _2581) * _2570) + _2581;
                        float _2587 = _2577 * _2577;
                        float _2591 = ((isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))) * _2576) / ((_2587 * 0.699999988079071044921875) + 1.0);
                        float _2595 = (-0.0) - _1297;
                        float _2596 = (-0.0) - _1298;
                        float _2597 = (-0.0) - _1299;
                        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
                        float _2602 = _2601 * _2595;
                        float _2603 = _2601 * _2596;
                        float _2604 = _2601 * _2597;
                        float _2611 = exp2(log2(1.0 / ((_2587 * 3.5) + 5.0)) * 0.25);
                        float _2613 = 1.0 - sqrt(_307);
                        float _2620 = sqrt(1.0 - ((1.0 - (_2613 * _2613)) * (1.0 - (_2611 * _2611))));
                        float _2621 = _2620 * _2620;
                        float _2622 = _2621 * _2621;
                        float _2623 = _2602 + _2567;
                        float _2624 = _2603 + _2568;
                        float _2625 = _2604 + _2569;
                        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
                        float _2633 = dot(vec3(_427, _430, _433), vec3(_2602, _2603, _2604));
                        float _3832 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2636 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                        float _2637 = dot(vec3(_427, _430, _433), vec3(_2629 * _2623, _2629 * _2624, _2629 * _2625));
                        float _3843 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                        float _2640 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                        float _2644 = ((_2640 * _2640) * (_2622 + (-1.0))) + 1.0;
                        float _2645 = _2580 * _2621;
                        float _2646 = _2645 * _2645;
                        float _2649 = ((1.0 - _2646) * _2570) + _2646;
                        float _3854 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _2650 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2651 = 1.0 - _2621;
                        float _2661 = (0.5 / (((_2650 * ((_2636 * _2651) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _2651) + _2621) * _2636))) * _2650;
                        float _3865 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2672 = (((_2622 * 3.1415927410125732421875) * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) / ((_2644 * _2644) * ((_2587 * 2.1991131305694580078125) + 3.141590118408203125))) * _2576;
                        _2424 = (_2591 * _2539.x) + _2497;
                        _2425 = (_2591 * _2539.y) + _2498;
                        _2426 = (_2591 * _2539.z) + _2499;
                        _2421 = (_2672 * _2556.x) + _2494;
                        _2422 = (_2672 * _2556.y) + _2495;
                        _2423 = (_2672 * _2556.z) + _2496;
                        if (_2501 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2494 = _2421;
                            _2495 = _2422;
                            _2496 = _2423;
                            _2497 = _2424;
                            _2498 = _2425;
                            _2499 = _2426;
                            _2500 = _2501;
                        }
                    }
                    frontier_phi_37_pred = _2426;
                    frontier_phi_37_pred_1 = _2425;
                    frontier_phi_37_pred_2 = _2423;
                    frontier_phi_37_pred_3 = _2422;
                    frontier_phi_37_pred_4 = _2421;
                    frontier_phi_37_pred_5 = _2424;
                }
                _2206 = frontier_phi_37_pred;
                _2204 = frontier_phi_37_pred_1;
                _2200 = frontier_phi_37_pred_2;
                _2198 = frontier_phi_37_pred_3;
                _2196 = frontier_phi_37_pred_4;
                _2202 = frontier_phi_37_pred_5;
                uint _2356 = _2355 + 1u;
                if (_2356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2349 = _2196;
                    _2350 = _2198;
                    _2351 = _2200;
                    _2352 = _2202;
                    _2353 = _2204;
                    _2354 = _2206;
                    _2355 = _2356;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
            _2203 = _2204;
            _2205 = _2206;
        }
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.z;
        uint _2212 = (_2210 >> 8u) & 15u;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        if (((4294967295u << _2212) & _2116) == 0u)
        {
            _2317 = _2195;
            _2319 = _2197;
            _2321 = _2199;
            _2323 = _2201;
            _2325 = _2203;
            _2327 = _2205;
        }
        else
        {
            float _2342 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
            float _2343 = _2342 * _1297;
            float _2344 = _2342 * _1298;
            float _2345 = _2342 * _1299;
            float frontier_phi_29_30_ladder;
            float frontier_phi_29_30_ladder_1;
            float frontier_phi_29_30_ladder_2;
            float frontier_phi_29_30_ladder_3;
            float frontier_phi_29_30_ladder_4;
            float frontier_phi_29_30_ladder_5;
            if (_2212 < ((_2210 >> 12u) & 15u))
            {
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2326;
                float _2328;
                float _2477 = _2195;
                float _2478 = _2197;
                float _2479 = _2199;
                float _2480 = _2201;
                float _2481 = _2203;
                float _2482 = _2205;
                uint _2483 = _2212;
                uint _2492;
                bool _2493;
                for (;;)
                {
                    _2492 = texelFetch(g_lightClassification, int((((_2110 << 5u) + (_2096 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                    _2493 = _2492 == 0u;
                    float frontier_phi_48_pred;
                    float frontier_phi_48_pred_1;
                    float frontier_phi_48_pred_2;
                    float frontier_phi_48_pred_3;
                    float frontier_phi_48_pred_4;
                    float frontier_phi_48_pred_5;
                    if (_2493)
                    {
                        frontier_phi_48_pred = _2480;
                        frontier_phi_48_pred_1 = _2479;
                        frontier_phi_48_pred_2 = _2478;
                        frontier_phi_48_pred_3 = _2477;
                        frontier_phi_48_pred_4 = _2482;
                        frontier_phi_48_pred_5 = _2481;
                    }
                    else
                    {
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2699 = _2477;
                        float _2700 = _2478;
                        float _2701 = _2479;
                        float _2702 = _2480;
                        float _2703 = _2481;
                        float _2704 = _2482;
                        uint _2705 = _2492;
                        uint _2706;
                        vec4 _2732;
                        float _2733;
                        vec4 _2748;
                        vec3 _2760;
                        vec4 _2776;
                        vec4 _2792;
                        float _2839;
                        bool _2840;
                        for (;;)
                        {
                            uint _2716 = ((_2483 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2705));
                            _2706 = (_2705 + 4294967295u) & _2705;
                            uint _2718 = _2716 * 40u;
                            _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2733 = _2732.w;
                            uint _2735 = (_2716 * 40u) + 4u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2750 = (_2716 * 40u) + 8u;
                            _2760 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x));
                            uint _2763 = (_2716 * 40u) + 16u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2779 = (_2716 * 40u) + 20u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2795 = (_2716 * 40u) + 24u;
                            vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2814 = (_2716 * 40u) + 28u;
                            vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2839 = fma(_1299, _2827.z, fma(_1298, _2827.y, _2827.x * _1297)) + _2827.w;
                            _2840 = !((fma(_1299, _2808.z, fma(_1298, _2808.y, _2808.x * _1297)) + _2808.w) <= 0.0);
                            float frontier_phi_54_pred;
                            float frontier_phi_54_pred_1;
                            float frontier_phi_54_pred_2;
                            float frontier_phi_54_pred_3;
                            float frontier_phi_54_pred_4;
                            float frontier_phi_54_pred_5;
                            if (_2840)
                            {
                                float _2867 = _2732.x - _1297;
                                float _2868 = _2732.y - _1298;
                                float _2869 = _2732.z - _1299;
                                float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                                float _2873 = inversesqrt(_2870);
                                float _2874 = _2873 * _2867;
                                float _2875 = _2873 * _2868;
                                float _2876 = _2873 * _2869;
                                float _2880 = 1.0 - (_2870 / (_2733 * _2733));
                                float _3876 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _2885 = sqrt(_2870) * _2748.w;
                                float _2887 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                                float _2888 = _2887 * _2887;
                                float _2891 = ((1.0 - _2888) * dot(vec3(_2874, _2875, _2876), vec3(_427, _430, _433))) + _2888;
                                float _2894 = _2885 * _2885;
                                float _2898 = (fma(_1299, _2776.z, fma(_1298, _2776.y, _2776.x * _1297)) + _2776.w) / _2839;
                                float _2899 = (fma(_1299, _2792.z, fma(_1298, _2792.y, _2792.x * _1297)) + _2792.w) / _2839;
                                float _2903 = 1.0 - dot(vec2(_2898, _2899), vec2(_2898, _2899));
                                float _3892 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2904 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                                float _2905 = _2904 * (((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2881) / ((_2894 * 0.699999988079071044921875) + 1.0));
                                float _2917 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                                float _2919 = 1.0 - sqrt(_307);
                                float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2917 * _2917))));
                                float _2927 = _2926 * _2926;
                                float _2928 = _2927 * _2927;
                                float _2929 = _2874 - _2343;
                                float _2930 = _2875 - _2344;
                                float _2931 = _2876 - _2345;
                                float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                                float _2939 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2343, (-0.0) - _2344, (-0.0) - _2345));
                                float _3903 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2942 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2943 = dot(vec3(_427, _430, _433), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                                float _3914 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2946 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                                float _2951 = _2887 * _2927;
                                float _2952 = _2951 * _2951;
                                float _2958 = ((1.0 - _2952) * dot(vec3(_427, _430, _433), vec3(_2874, _2875, _2876))) + _2952;
                                float _3925 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2959 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2960 = 1.0 - _2927;
                                float _2970 = (0.5 / (((_2959 * ((_2942 * _2960) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2927) * _2942))) * _2959;
                                float _3936 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2980 = (_2904 * _2881) * (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) / ((_2950 * _2950) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_54_pred = _2905 * _2748.z;
                                frontier_phi_54_pred_1 = _2905 * _2748.y;
                                frontier_phi_54_pred_2 = _2905 * _2748.x;
                                frontier_phi_54_pred_3 = _2980 * _2760.z;
                                frontier_phi_54_pred_4 = _2980 * _2760.y;
                                frontier_phi_54_pred_5 = _2980 * _2760.x;
                            }
                            else
                            {
                                frontier_phi_54_pred = 0.0;
                                frontier_phi_54_pred_1 = 0.0;
                                frontier_phi_54_pred_2 = 0.0;
                                frontier_phi_54_pred_3 = 0.0;
                                frontier_phi_54_pred_4 = 0.0;
                                frontier_phi_54_pred_5 = 0.0;
                            }
                            _2989 = frontier_phi_54_pred;
                            _2988 = frontier_phi_54_pred_1;
                            _2987 = frontier_phi_54_pred_2;
                            _2986 = frontier_phi_54_pred_3;
                            _2985 = frontier_phi_54_pred_4;
                            _2984 = frontier_phi_54_pred_5;
                            _2689 = _2987 + _2702;
                            _2690 = _2988 + _2703;
                            _2691 = _2989 + _2704;
                            _2686 = _2984 + _2699;
                            _2687 = _2985 + _2700;
                            _2688 = _2986 + _2701;
                            if (_2706 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2706;
                                continue;
                            }
                        }
                        frontier_phi_48_pred = _2689;
                        frontier_phi_48_pred_1 = _2688;
                        frontier_phi_48_pred_2 = _2687;
                        frontier_phi_48_pred_3 = _2686;
                        frontier_phi_48_pred_4 = _2691;
                        frontier_phi_48_pred_5 = _2690;
                    }
                    _2324 = frontier_phi_48_pred;
                    _2322 = frontier_phi_48_pred_1;
                    _2320 = frontier_phi_48_pred_2;
                    _2318 = frontier_phi_48_pred_3;
                    _2328 = frontier_phi_48_pred_4;
                    _2326 = frontier_phi_48_pred_5;
                    uint _2484 = _2483 + 1u;
                    if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2477 = _2318;
                        _2478 = _2320;
                        _2479 = _2322;
                        _2480 = _2324;
                        _2481 = _2326;
                        _2482 = _2328;
                        _2483 = _2484;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_29_30_ladder = _2324;
                frontier_phi_29_30_ladder_1 = _2322;
                frontier_phi_29_30_ladder_2 = _2320;
                frontier_phi_29_30_ladder_3 = _2318;
                frontier_phi_29_30_ladder_4 = _2328;
                frontier_phi_29_30_ladder_5 = _2326;
            }
            else
            {
                frontier_phi_29_30_ladder = _2201;
                frontier_phi_29_30_ladder_1 = _2199;
                frontier_phi_29_30_ladder_2 = _2197;
                frontier_phi_29_30_ladder_3 = _2195;
                frontier_phi_29_30_ladder_4 = _2205;
                frontier_phi_29_30_ladder_5 = _2203;
            }
            _2317 = frontier_phi_29_30_ladder_3;
            _2319 = frontier_phi_29_30_ladder_2;
            _2321 = frontier_phi_29_30_ladder_1;
            _2323 = frontier_phi_29_30_ladder;
            _2325 = frontier_phi_29_30_ladder_5;
            _2327 = frontier_phi_29_30_ladder_4;
        }
        float _2332 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2128 = (_2332 * _2323) + _1689;
        _2130 = (_2332 * _2325) + _1691;
        _2132 = (_2332 * _2327) + _1693;
        _2134 = ((_2317 * _472) * _2332) + _1979;
        _2136 = ((_2319 * _474) * _2332) + _1981;
        _2138 = ((_2321 * _475) * _2332) + _1983;
    }
    else
    {
        _2128 = _1689;
        _2130 = _1691;
        _2132 = _1693;
        _2134 = _1979;
        _2136 = _1981;
        _2138 = _1983;
    }
    float _3952 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3963 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3974 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2155 = ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2128 + (((1.0 - _505) * _487) * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)))))) + ((_2134 + ((_525.x * _505) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _2156 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2130 + (((1.0 - _506) * _487) * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)))))) + ((_2136 + ((_525.y * _506) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _2157 = ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2132 + (((1.0 - _507) * _487) * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)))))) + ((_2138 + ((_525.z * _507) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _2158 = _446 + 6u;
    float _2166 = _406 / cbSceneParam._m0[86u].x;
    float _2167 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2181 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2166, _2167, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2183 = _2181.x;
    float _2184 = _2181.y;
    float _2185 = _2181.z;
    float _2186 = _2181.w;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2220 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2221 = _2220 / _327;
        float _2232 = _2221 * _378;
        float _2233 = _379 * _2221;
        float _2234 = (-0.0) - _2233;
        float _2235 = _2221 * _380;
        float _2237 = (cbSceneParam._m0[77u].w * _2234) / _2220;
        float _2238 = _2237 + cbSceneParam._m0[79u].w;
        float _2239 = cbSceneParam._m0[79u].w - _2233;
        float _2245 = sqrt(((_2232 * _2232) + (_2233 * _2233)) + (_2235 * _2235));
        float _2248 = (1.0 - (cbSceneParam._m0[77u].w / _2220)) * _2245;
        float _2254 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2256 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2434;
        if (abs((_2234 - _2237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2434 = ((((_2238 > 0.0) ? exp2(_2254 * _2238) : (2.0 - exp2(_2256 * _2238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2248;
        }
        else
        {
            float _2378 = 1.0 / cbSceneParam._m0[80u].x;
            float _2379 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : max(_2238, _2239));
            float _2380 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : min(_2238, _2239));
            float _2389 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : min(_2379, 0.0));
            float _2390 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : min(_2380, 0.0));
            _2434 = ((abs(_2245 / _2234) * cbSceneParam._m0[80u].y) * ((((_2389 - _2390) * 2.0) - ((exp2(_2254 * (isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0)))) - exp2(_2254 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))))) * _2378)) - ((exp2(_2256 * _2389) - exp2(_2256 * _2390)) * _2378))) + (_2248 * cbSceneParam._m0[80u].z);
        }
        vec4 _2436 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2166, _2167, 1.0), 0.0);
        float _2445 = exp2((_2434 * (-1.44269502162933349609375)) * (1.0 - _2436.w));
        float _2446 = log2(_2445);
        float _2462 = log2(_2186);
        _2258 = (exp2(_2462 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].x)) * _2436.x) / cbSceneParam._m0[78u].x)) + _2183;
        _2260 = (exp2(_2462 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].y)) * _2436.y) / cbSceneParam._m0[78u].y)) + _2184;
        _2262 = (exp2(_2462 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].z)) * _2436.z) / cbSceneParam._m0[78u].z)) + _2185;
        _2264 = _2445 * _2186;
    }
    else
    {
        _2258 = _2183;
        _2260 = _2184;
        _2262 = _2185;
        _2264 = _2186;
    }
    bool _2472;
    vec4 _2273;
    vec4 _2296;
    float _2298;
    float _2302;
    float _2303;
    float _2304;
    float _2305;
    bool _2316;
    for (;;)
    {
        _2273 = cbMatDynParam._m0[0u];
        float _2275 = roundEven(_2273.y);
        bool _2276 = _2275 == 3.0;
        float _2278 = log2(_2264);
        float _2285 = exp2(_2278 * cbSceneParam._m0[78u].x) * _2155;
        float _2286 = exp2(_2278 * cbSceneParam._m0[78u].y) * _2156;
        float _2287 = exp2(_2278 * cbSceneParam._m0[78u].z) * _2157;
        float _2294 = _394 + (-0.5);
        _2296 = cbMtdParam._m0[1u];
        _2298 = _2296.y * _2294;
        float _2301 = (_2275 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2302 = _2301 * (_2276 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2258)));
        _2303 = _2301 * (_2276 ? _2286 : (_2286 + (cbSceneParam._m0[72u].w * _2260)));
        _2304 = _2301 * (_2276 ? _2287 : (_2287 + (cbSceneParam._m0[72u].w * _2262)));
        _2305 = _2294 * 0.999000012874603271484375;
        _2316 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2316)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2305) < 0.5)
            {
                _2472 = true;
                break;
            }
        }
        uint _2413 = _448 + uint(_2273.w);
        if ((cbInstanceData._m0[_2413].w < 1.0) && ((cbInstanceData._m0[_2413].w + _2305) < 0.5))
        {
            _2472 = true;
            break;
        }
        if ((_2298 + 1.0) < _2296.x)
        {
            _2472 = true;
            break;
        }
        _2472 = false;
        break;
    }
    float _2677;
    if (_2472)
    {
        discard_state = true;
        _2677 = 0.0;
    }
    else
    {
        _2677 = cbInstanceData._m0[_2158].w;
    }
    SV_Target.x = _2302;
    SV_Target.y = _2303;
    SV_Target.z = _2304;
    SV_Target.w = _2677;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2158].w;
    discard_exit();
}


