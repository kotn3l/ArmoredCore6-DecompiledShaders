#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _2986 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0))));
    float _289 = fma(_282, _209, fma(_275, _201 * TANGENT.x, (_187 * _180) * _273));
    float _292 = fma(_282, _210, fma(_275, _201 * TANGENT.y, (_187 * _181) * _273));
    float _295 = fma(_282, _211, fma(_275, _201 * TANGENT.z, (_187 * _182) * _273));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _2997 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _303 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
    float _3008 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3019 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3030 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3041 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _307 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _414 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _417 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = (_430 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3052 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
    float _3063 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _445 = 1.0 - _307;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _307;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _471 = _468.x * TEXCOORD.z;
    float _475 = abs(dot(vec3(_381, _382, _383), vec3(_300, _301, _302)));
    float _3085 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _481 = exp2(log2(1.0 - (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0)))) * 5.0);
    float _482 = 0.959999978542327880859375 - _453;
    float _484 = 0.959999978542327880859375 - _454;
    float _485 = 0.959999978542327880859375 - _455;
    float _489 = (_481 * _482) + _456;
    float _490 = (_481 * _484) + _458;
    float _491 = (_481 * _485) + _459;
    vec4 _509 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_323 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_300, _301, _302), vec3(1.0, 0.0, 0.0))) + (_389 / cbSceneParam._m0[86u].x), 1.0 - (_390 / cbSceneParam._m0[86u].y)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _856;
    float _857;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _584 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _588 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _613 = _545 + _300;
        float _614 = _549 + _301;
        float _615 = _553 + _302;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _580;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _584;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _588;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _712 = ((_649.x + (-0.5)) * 0.5) * _683;
        float _714 = ((_656.x + (-0.5)) * 0.5) * _690;
        float _716 = ((_663.x + (-0.5)) * 0.5) * _697;
        float _717 = dot(vec3(_712, _714, _716), vec3(_712, _714, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_300, _301, _302), vec3(_722 * _712, _722 * _714, _722 * _716)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_714 * _714) + (_712 * _712)) + (_716 * _716)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3133 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_743 + 1.0))) + _748) * _708;
        float _759 = ((_649.y + (-0.5)) * 0.5) * _683;
        float _761 = ((_656.y + (-0.5)) * 0.5) * _690;
        float _763 = ((_663.y + (-0.5)) * 0.5) * _697;
        float _764 = dot(vec3(_759, _761, _763), vec3(_759, _761, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_300, _301, _302), vec3(_769 * _759, _769 * _761, _769 * _763)) + 1.0) * 0.5;
        float _3144 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_761 * _761) + (_759 * _759)) + (_763 * _763)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3155 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3166 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))) * (_788 + 1.0))) + _793) * _709;
        float _804 = ((_649.z + (-0.5)) * 0.5) * _683;
        float _806 = ((_656.z + (-0.5)) * 0.5) * _690;
        float _808 = ((_663.z + (-0.5)) * 0.5) * _697;
        float _809 = dot(vec3(_804, _806, _808), vec3(_804, _806, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_300, _301, _302), vec3(_814 * _804, _814 * _806, _814 * _808)) + 1.0) * 0.5;
        float _3177 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_806 * _806) + (_804 * _804)) + (_808 * _808)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3188 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3199 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))) * (_833 + 1.0))) + _838) * _710;
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = 0.0;
        _856 = 0.0;
        _857 = 0.0;
    }
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _883 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _887 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _891 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _914 = _545 + _300;
        float _915 = _549 + _301;
        float _916 = _553 + _302;
        float _926 = fma(_916, cbModelParam._m0[30u].z, fma(_915, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914)) - _883;
        float _927 = fma(_916, cbModelParam._m0[31u].z, fma(_915, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914)) - _887;
        float _928 = fma(_916, cbModelParam._m0[32u].z, fma(_915, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914)) - _891;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_883 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_887 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[35u].z) + ((((((_891 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _982 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_970.x + (-0.5));
        float _1005 = _1003 * (_970.y + (-0.5));
        float _1006 = _1003 * (_970.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1011 = ((_949.x + (-0.5)) * 0.5) * _982;
        float _1013 = ((_956.x + (-0.5)) * 0.5) * _989;
        float _1015 = ((_963.x + (-0.5)) * 0.5) * _996;
        float _1016 = dot(vec3(_1011, _1013, _1015), vec3(_1011, _1013, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_300, _301, _302), vec3(_1021 * _1011, _1021 * _1013, _1021 * _1015)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1013 * _1013) + (_1011 * _1011)) + (_1015 * _1015)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3262 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_1040 + 1.0))) + _1045) * _1007;
        float _1056 = ((_949.y + (-0.5)) * 0.5) * _982;
        float _1058 = ((_956.y + (-0.5)) * 0.5) * _989;
        float _1060 = ((_963.y + (-0.5)) * 0.5) * _996;
        float _1061 = dot(vec3(_1056, _1058, _1060), vec3(_1056, _1058, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_300, _301, _302), vec3(_1066 * _1056, _1066 * _1058, _1066 * _1060)) + 1.0) * 0.5;
        float _3273 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1058 * _1058) + (_1056 * _1056)) + (_1060 * _1060)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3284 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3295 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_1085 + 1.0))) + _1090) * _1008;
        float _1101 = ((_949.z + (-0.5)) * 0.5) * _982;
        float _1103 = ((_956.z + (-0.5)) * 0.5) * _989;
        float _1105 = ((_963.z + (-0.5)) * 0.5) * _996;
        float _1106 = dot(vec3(_1101, _1103, _1105), vec3(_1101, _1103, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_300, _301, _302), vec3(_1111 * _1101, _1111 * _1103, _1111 * _1105)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1103 * _1103) + (_1101 * _1101)) + (_1105 * _1105)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3328 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_1130 + 1.0))) + _1135) * _1009;
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _855)) + _855;
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _856)) + _856;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _857)) + _857;
    float _1187 = fma(_1166, cbSceneParam._m0[89u].z, fma(_1165, cbSceneParam._m0[89u].y, _1164 * cbSceneParam._m0[89u].x));
    float _1190 = fma(_1166, cbSceneParam._m0[90u].z, fma(_1165, cbSceneParam._m0[90u].y, _1164 * cbSceneParam._m0[90u].x));
    float _1193 = fma(_1166, cbSceneParam._m0[91u].z, fma(_1165, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1164));
    float _1236 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1249 = _1236 / _1248;
    float _1250 = _1240 / _1248;
    float _1251 = _1244 / _1248;
    float _1388;
    float _1389;
    float _1390;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1268 = ((uint(_1251 > cbSceneParam._m0[59u].y) + uint(_1251 > cbSceneParam._m0[59u].x)) + uint(_1251 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1269 = _1268 + 43u;
        uint _1277 = _1268 + 44u;
        uint _1285 = _1268 + 45u;
        uint _1293 = _1268 + 46u;
        float _1304 = fma(_1248, cbSceneParam._m0[_1269].w, fma(_1244, cbSceneParam._m0[_1269].z, fma(_1240, cbSceneParam._m0[_1269].y, _1236 * cbSceneParam._m0[_1269].x)));
        float _1308 = fma(_1248, cbSceneParam._m0[_1277].w, fma(_1244, cbSceneParam._m0[_1277].z, fma(_1240, cbSceneParam._m0[_1277].y, _1236 * cbSceneParam._m0[_1277].x)));
        float _1316 = fma(_1248, cbSceneParam._m0[_1293].w, fma(_1244, cbSceneParam._m0[_1293].z, fma(_1240, cbSceneParam._m0[_1293].y, _1236 * cbSceneParam._m0[_1293].x)));
        float _1321 = cbSceneParam._m0[33u].z * _1316;
        float _1323 = cbSceneParam._m0[33u].w * _1316;
        float _1326 = fma(_1248, cbSceneParam._m0[_1285].w, fma(_1244, cbSceneParam._m0[_1285].z, fma(_1240, cbSceneParam._m0[_1285].y, _1236 * cbSceneParam._m0[_1285].x))) / _1316;
        float _1374 = (cbSceneParam._m0[33u].x - sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251))) * cbSceneParam._m0[33u].y;
        float _3369 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1381 = (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1321 + _1304) / _1316, (_1323 + _1308) / _1316), _1326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1323 + _1304) / _1316, (_1308 - _1321) / _1316), _1326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1304 - _1321) / _1316, (_1308 - _1323) / _1316), _1326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1304 - _1323) / _1316, (_1321 + _1308) / _1316), _1326), 0.0)).x), vec4(0.25)));
        _1388 = 1.0 - (_1381 * cbSceneParam._m0[34u].x);
        _1389 = 1.0 - (_1381 * cbSceneParam._m0[34u].y);
        _1390 = 1.0 - (_1381 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1388 = 1.0;
        _1389 = 1.0;
        _1390 = 1.0;
    }
    float _1446;
    float _1448;
    float _1450;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1434 = fma(_1248, cbSceneParam._m0[63u].w, fma(_1244, cbSceneParam._m0[63u].z, fma(_1240, cbSceneParam._m0[63u].y, _1236 * cbSceneParam._m0[63u].x)));
        float _1435 = fma(_1248, cbSceneParam._m0[60u].w, fma(_1244, cbSceneParam._m0[60u].z, fma(_1240, cbSceneParam._m0[60u].y, _1236 * cbSceneParam._m0[60u].x))) / _1434;
        float _1436 = fma(_1248, cbSceneParam._m0[61u].w, fma(_1244, cbSceneParam._m0[61u].z, fma(_1240, cbSceneParam._m0[61u].y, _1236 * cbSceneParam._m0[61u].x))) / _1434;
        float frontier_phi_10_9_ladder;
        float frontier_phi_10_9_ladder_1;
        float frontier_phi_10_9_ladder_2;
        if ((((_1435 >= cbSceneParam._m0[64u].x) && (_1436 >= cbSceneParam._m0[64u].y)) && (_1435 <= cbSceneParam._m0[64u].z)) && (_1436 <= cbSceneParam._m0[64u].w))
        {
            float _1543 = fma(_1248, cbSceneParam._m0[62u].w, fma(_1244, cbSceneParam._m0[62u].z, fma(_1240, cbSceneParam._m0[62u].y, _1236 * cbSceneParam._m0[62u].x))) / _1434;
            float _1547 = isnan(cbSceneParam._m0[41u].w) ? _1543 : (isnan(_1543) ? cbSceneParam._m0[41u].w : max(_1543, cbSceneParam._m0[41u].w));
            float _1590 = (cbSceneParam._m0[33u].x - sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251))) * cbSceneParam._m0[33u].y;
            float _3385 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
            float _1597 = (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1435, cbSceneParam._m0[33u].w + _1436), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1435, _1436 - cbSceneParam._m0[33u].z), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1435 - cbSceneParam._m0[33u].z, _1436 - cbSceneParam._m0[33u].w), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1435 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1436), _1547), 0.0)).x), vec4(0.25)));
            float _1601 = 1.0 - (_1597 * cbSceneParam._m0[34u].x);
            float _1602 = 1.0 - (_1597 * cbSceneParam._m0[34u].y);
            float _1603 = 1.0 - (_1597 * cbSceneParam._m0[34u].z);
            frontier_phi_10_9_ladder = isnan(_1602) ? _1389 : (isnan(_1389) ? _1602 : min(_1389, _1602));
            frontier_phi_10_9_ladder_1 = isnan(_1601) ? _1388 : (isnan(_1388) ? _1601 : min(_1388, _1601));
            frontier_phi_10_9_ladder_2 = isnan(_1603) ? _1390 : (isnan(_1390) ? _1603 : min(_1390, _1603));
        }
        else
        {
            frontier_phi_10_9_ladder = _1389;
            frontier_phi_10_9_ladder_1 = _1388;
            frontier_phi_10_9_ladder_2 = _1390;
        }
        _1446 = frontier_phi_10_9_ladder_1;
        _1448 = frontier_phi_10_9_ladder;
        _1450 = frontier_phi_10_9_ladder_2;
    }
    else
    {
        _1446 = _1388;
        _1448 = _1389;
        _1450 = _1390;
    }
    uvec4 _1455 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1457 = _1455.x * 14u;
    uint _1458 = _1457 + 13u;
    float _1465 = _471 + (-1.0);
    float _1470 = (cbLight._m0[_1458].x * _1465) + 1.0;
    float _1471 = (cbLight._m0[_1458].y * _1465) + 1.0;
    float _1472 = (cbLight._m0[_1458].z * _1465) + 1.0;
    float _1473 = (cbLight._m0[_1458].w * _1465) + 1.0;
    uint _1474 = _1457 + 5u;
    float _1480 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
    uint _1484 = _1457 + 4u;
    float _1494 = isnan(1.0) ? _1470 : (isnan(_1470) ? 1.0 : min(_1470, 1.0));
    uint _1498 = _1457 | 1u;
    float _1509 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_300, _301, _302));
    float _1512 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_300, _301, _302));
    float _3421 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _3432 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1517 = (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * 0.3183098733425140380859375;
    float _1519 = (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * 0.3183098733425140380859375;
    float _1526 = ((cbLight._m0[_1474].x * _1480) * _1519) + (((cbLight._m0[_1484].x * _1446) * _1494) * _1517);
    float _1527 = ((_1480 * cbLight._m0[_1474].y) * _1519) + (((cbLight._m0[_1484].y * _1448) * _1494) * _1517);
    float _1528 = ((_1480 * cbLight._m0[_1474].z) * _1519) + (((cbLight._m0[_1484].z * _1450) * _1494) * _1517);
    uvec4 _1532 = floatBitsToUint(cbLight._m0[_1457 + 12u]);
    bool _1534 = _1532.x == 0u;
    float _1604;
    float _1606;
    float _1608;
    if (_1534)
    {
        _1604 = _1526;
        _1606 = _1527;
        _1608 = _1528;
    }
    else
    {
        uint _1612 = _1457 + 6u;
        float _1628 = (dot(vec3(cbLight._m0[_1457 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1629 = _1628 * _1628;
        float _3443 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1631 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1604 = (((cbLight._m0[_1612].x * 0.3183098733425140380859375) * _1630) * _1631) + _1526;
        _1606 = (((cbLight._m0[_1612].y * 0.3183098733425140380859375) * _1630) * _1631) + _1527;
        _1608 = (((cbLight._m0[_1612].z * 0.3183098733425140380859375) * _1630) * _1631) + _1528;
    }
    bool _1611 = _1532.y == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1611)
    {
        _1641 = _1604;
        _1643 = _1606;
        _1645 = _1608;
    }
    else
    {
        uint _1813 = _1457 + 7u;
        float _1829 = (dot(vec3(cbLight._m0[_1457 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1830 = _1829 * _1829;
        float _3459 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1832 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1641 = (((cbLight._m0[_1813].x * 0.3183098733425140380859375) * _1831) * _1832) + _1604;
        _1643 = (((cbLight._m0[_1813].y * 0.3183098733425140380859375) * _1831) * _1832) + _1606;
        _1645 = (((cbLight._m0[_1813].z * 0.3183098733425140380859375) * _1831) * _1832) + _1608;
    }
    uint _1648 = _1457 + 8u;
    float _1661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1457].w)) * _303) * 0.949999988079071044921875);
    float _1662 = _1661 * _1661;
    float _1663 = cbLight._m0[_1457].x + _381;
    float _1664 = cbLight._m0[_1457].y + _382;
    float _1665 = cbLight._m0[_1457].z + _383;
    float _1669 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
    float _1670 = _1669 * _1663;
    float _1671 = _1669 * _1664;
    float _1672 = _1669 * _1665;
    float _1673 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1457].xyz));
    float _3475 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1676 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _1677 = dot(vec3(_300, _301, _302), vec3(_381, _382, _383));
    float _3486 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _1681 = dot(vec3(_300, _301, _302), vec3(_1670, _1671, _1672));
    float _3497 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _1685 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_1670, _1671, _1672));
    float _3508 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1689 = _1662 * _1662;
    float _1693 = ((_1684 * _1684) * (_1689 + (-1.0))) + 1.0;
    float _1701 = exp2(log2(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * 5.0);
    float _1708 = 1.0 - _1662;
    float _1719 = (0.5 / (((_1680 * ((_1676 * _1708) + _1662)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1708) + _1662) * _1676))) * _1676;
    float _3519 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1689 / ((_1693 * _1693) * 3.141590118408203125));
    uint _1735 = _1457 + 9u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1498].w)) * _303) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1498].x + _381;
    float _1749 = cbLight._m0[_1498].y + _382;
    float _1750 = cbLight._m0[_1498].z + _383;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1498].xyz));
    float _3530 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _1762 = dot(vec3(_300, _301, _302), vec3(_1755, _1756, _1757));
    float _3541 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1755, _1756, _1757));
    float _3552 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1747 * _1747;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1781 = exp2(log2(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * 5.0);
    float _1788 = 1.0 - _1747;
    float _1798 = (0.5 / (((_1680 * ((_1761 * _1788) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1788) + _1747) * _1761))) * _1761;
    float _3563 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1800 = (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    float _1810 = (((((_1781 * _482) + _456) * cbLight._m0[_1735].x) * _1800) * _1480) + ((((cbLight._m0[_1648].x * _1446) * ((_1701 * _482) + _456)) * _1721) * _1494);
    float _1811 = (((((_1781 * _484) + _458) * cbLight._m0[_1735].y) * _1800) * _1480) + ((((cbLight._m0[_1648].y * _1448) * ((_1701 * _484) + _458)) * _1721) * _1494);
    float _1812 = (((((_1781 * _485) + _459) * cbLight._m0[_1735].z) * _1800) * _1480) + ((((cbLight._m0[_1648].z * _1450) * ((_1701 * _485) + _459)) * _1721) * _1494);
    float _1842;
    float _1844;
    float _1846;
    if (_1534)
    {
        _1842 = _1810;
        _1844 = _1811;
        _1846 = _1812;
    }
    else
    {
        uint _1848 = _1457 + 2u;
        uint _1852 = _1457 + 10u;
        float _1866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _303) * 0.949999988079071044921875);
        float _1867 = _1866 * _1866;
        float _1868 = cbLight._m0[_1848].x + _381;
        float _1869 = cbLight._m0[_1848].y + _382;
        float _1870 = cbLight._m0[_1848].z + _383;
        float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
        float _1875 = _1874 * _1868;
        float _1876 = _1874 * _1869;
        float _1877 = _1874 * _1870;
        float _1878 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1848].xyz));
        float _3574 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1881 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1882 = dot(vec3(_300, _301, _302), vec3(_1875, _1876, _1877));
        float _3585 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1885 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1886 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_1875, _1876, _1877));
        float _3596 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1890 = _1867 * _1867;
        float _1894 = ((_1885 * _1885) * (_1890 + (-1.0))) + 1.0;
        float _1901 = exp2(log2(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * 5.0);
        float _1908 = 1.0 - _1867;
        float _1918 = (0.5 / (((_1680 * ((_1881 * _1908) + _1867)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1908) + _1867) * _1881))) * _1881;
        float _3607 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1920 = (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1890 / ((_1894 * _1894) * 3.141590118408203125));
        float _1921 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1842 = (((((_1901 * _482) + _456) * cbLight._m0[_1852].x) * _1920) * _1921) + _1810;
        _1844 = (((((_1901 * _484) + _458) * cbLight._m0[_1852].y) * _1920) * _1921) + _1811;
        _1846 = (((((_1901 * _485) + _459) * cbLight._m0[_1852].z) * _1920) * _1921) + _1812;
    }
    float _1931;
    float _1933;
    float _1935;
    if (_1611)
    {
        _1931 = _1842;
        _1933 = _1844;
        _1935 = _1846;
    }
    else
    {
        uint _1942 = _1457 + 3u;
        uint _1946 = _1457 + 11u;
        float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _303) * 0.949999988079071044921875);
        float _1961 = _1960 * _1960;
        float _1962 = cbLight._m0[_1942].x + _381;
        float _1963 = cbLight._m0[_1942].y + _382;
        float _1964 = cbLight._m0[_1942].z + _383;
        float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
        float _1969 = _1968 * _1962;
        float _1970 = _1968 * _1963;
        float _1971 = _1968 * _1964;
        float _1972 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1942].xyz));
        float _3623 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1976 = dot(vec3(_300, _301, _302), vec3(_1969, _1970, _1971));
        float _3634 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1980 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_1969, _1970, _1971));
        float _3645 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1984 = _1961 * _1961;
        float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
        float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * 5.0);
        float _2002 = 1.0 - _1961;
        float _2012 = (0.5 / (((_1680 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _2002) + _1961) * _1975))) * _1975;
        float _3656 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1931 = (((((_1995 * _482) + _456) * cbLight._m0[_1946].x) * _2014) * _2015) + _1842;
        _1933 = (((((_1995 * _484) + _458) * cbLight._m0[_1946].y) * _2014) * _2015) + _1844;
        _1935 = (((((_1995 * _485) + _459) * cbLight._m0[_1946].z) * _2014) * _2015) + _1846;
    }
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    if (_1455.y == 0u)
    {
        uvec4 _2036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2037 = _2036.x;
        uint _2048 = uint((float(_2036.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2037))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2037)));
        float _2058 = (log2(_1251 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2059 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        uint _2062 = uint(isnan(14.0) ? _2059 : (isnan(_2059) ? 14.0 : min(_2059, 14.0)));
        uvec4 _2067 = texelFetch(g_lightClusterGridBuffer, int(((_2062 << 2u) + (_2048 << 6u)) >> 2u));
        uint _2068 = _2067.x;
        uint _2069 = _2036.z;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        if (((((1u << ((_2069 >> 4u) & 15u)) + 4294967295u) & _2068) == 0u) || ((_2069 & 240u) == 0u))
        {
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
        }
        else
        {
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2158;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            uint _2298 = 0u;
            uint _2307;
            bool _2308;
            for (;;)
            {
                _2307 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2298 << 2u)) >> 2u)).x;
                _2308 = _2307 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2308)
                {
                    frontier_phi_32_pred = _2297;
                    frontier_phi_32_pred_1 = _2296;
                    frontier_phi_32_pred_2 = _2295;
                    frontier_phi_32_pred_3 = _2294;
                    frontier_phi_32_pred_4 = _2292;
                    frontier_phi_32_pred_5 = _2293;
                }
                else
                {
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    float _2420;
                    float _2421;
                    uint _2422;
                    _2416 = _2292;
                    _2417 = _2293;
                    _2418 = _2294;
                    _2419 = _2295;
                    _2420 = _2296;
                    _2421 = _2297;
                    _2422 = _2307;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    float _2353;
                    for (;;)
                    {
                        uint _2426 = uint(findLSB(_2422)) + (_2298 << 5u);
                        uint _2423 = (_2422 + 4294967295u) & _2422;
                        uint _2428 = _2426 * 48u;
                        vec4 _2442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 3u)).x));
                        uint _2448 = (_2426 * 48u) + 4u;
                        vec4 _2461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2448)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 3u)).x));
                        uint _2467 = (_2426 * 48u) + 8u;
                        vec3 _2478 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2467)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 2u)).x));
                        float _2482 = _2442.x - _1249;
                        float _2483 = _2442.y - _1250;
                        float _2484 = _2442.z - _1251;
                        float _2485 = dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484));
                        float _2488 = inversesqrt(_2485);
                        float _2489 = _2488 * _2482;
                        float _2490 = _2488 * _2483;
                        float _2491 = _2488 * _2484;
                        float _2492 = dot(vec3(_411, _414, _417), vec3(_2489, _2490, _2491));
                        float _2497 = 1.0 - (_2485 * _2442.w);
                        float _3682 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2498 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
                        float _2499 = sqrt(_2485) * _2461.w;
                        float _2502 = 1.39999997615814208984375 / (_2499 + 1.39999997615814208984375);
                        float _2503 = _2502 * _2502;
                        float _2506 = ((1.0 - _2503) * _2492) + _2503;
                        float _2509 = _2499 * _2499;
                        float _2513 = ((isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0))) * _2498) / ((_2509 * 0.699999988079071044921875) + 1.0);
                        float _2517 = (-0.0) - _1249;
                        float _2518 = (-0.0) - _1250;
                        float _2519 = (-0.0) - _1251;
                        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
                        float _2524 = _2523 * _2517;
                        float _2525 = _2523 * _2518;
                        float _2526 = _2523 * _2519;
                        float _2533 = exp2(log2(1.0 / ((_2509 * 3.5) + 5.0)) * 0.25);
                        float _2535 = 1.0 - sqrt(_303);
                        float _2542 = sqrt(1.0 - ((1.0 - (_2535 * _2535)) * (1.0 - (_2533 * _2533))));
                        float _2543 = _2542 * _2542;
                        float _2544 = _2543 * _2543;
                        float _2545 = _2524 + _2489;
                        float _2546 = _2525 + _2490;
                        float _2547 = _2526 + _2491;
                        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
                        float _2555 = dot(vec3(_411, _414, _417), vec3(_2524, _2525, _2526));
                        float _3698 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
                        float _2558 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                        float _2559 = dot(vec3(_411, _414, _417), vec3(_2551 * _2545, _2551 * _2546, _2551 * _2547));
                        float _3709 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2562 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                        float _2566 = ((_2562 * _2562) * (_2544 + (-1.0))) + 1.0;
                        float _2567 = _2502 * _2543;
                        float _2568 = _2567 * _2567;
                        float _2571 = ((1.0 - _2568) * _2492) + _2568;
                        float _3720 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                        float _2572 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2573 = 1.0 - _2543;
                        float _2583 = (0.5 / (((_2572 * ((_2558 * _2573) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2573) + _2543) * _2558))) * _2572;
                        float _3731 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2594 = (((_2544 * 3.1415927410125732421875) * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) / ((_2566 * _2566) * ((_2509 * 2.1991131305694580078125) + 3.141590118408203125))) * _2498;
                        _2351 = (_2513 * _2461.x) + _2419;
                        _2352 = (_2513 * _2461.y) + _2420;
                        _2353 = (_2513 * _2461.z) + _2421;
                        _2348 = (_2594 * _2478.x) + _2416;
                        _2349 = (_2594 * _2478.y) + _2417;
                        _2350 = (_2594 * _2478.z) + _2418;
                        if (_2423 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2416 = _2348;
                            _2417 = _2349;
                            _2418 = _2350;
                            _2419 = _2351;
                            _2420 = _2352;
                            _2421 = _2353;
                            _2422 = _2423;
                        }
                    }
                    frontier_phi_32_pred = _2353;
                    frontier_phi_32_pred_1 = _2352;
                    frontier_phi_32_pred_2 = _2351;
                    frontier_phi_32_pred_3 = _2350;
                    frontier_phi_32_pred_4 = _2348;
                    frontier_phi_32_pred_5 = _2349;
                }
                _2158 = frontier_phi_32_pred;
                _2156 = frontier_phi_32_pred_1;
                _2154 = frontier_phi_32_pred_2;
                _2152 = frontier_phi_32_pred_3;
                _2148 = frontier_phi_32_pred_4;
                _2150 = frontier_phi_32_pred_5;
                uint _2299 = _2298 + 1u;
                if (_2299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2292 = _2148;
                    _2293 = _2150;
                    _2294 = _2152;
                    _2295 = _2154;
                    _2296 = _2156;
                    _2297 = _2158;
                    _2298 = _2299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
        }
        uvec4 _2161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2162 = _2161.z;
        uint _2164 = (_2162 >> 8u) & 15u;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        if (((4294967295u << _2164) & _2068) == 0u)
        {
            _2260 = _2147;
            _2262 = _2149;
            _2264 = _2151;
            _2266 = _2153;
            _2268 = _2155;
            _2270 = _2157;
        }
        else
        {
            float _2285 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
            float _2286 = _2285 * _1249;
            float _2287 = _2285 * _1250;
            float _2288 = _2285 * _1251;
            float frontier_phi_26_27_ladder;
            float frontier_phi_26_27_ladder_1;
            float frontier_phi_26_27_ladder_2;
            float frontier_phi_26_27_ladder_3;
            float frontier_phi_26_27_ladder_4;
            float frontier_phi_26_27_ladder_5;
            if (_2164 < ((_2162 >> 12u) & 15u))
            {
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2269;
                float _2271;
                float _2399 = _2147;
                float _2400 = _2149;
                float _2401 = _2151;
                float _2402 = _2153;
                float _2403 = _2155;
                float _2404 = _2157;
                uint _2405 = _2164;
                uint _2414;
                bool _2415;
                for (;;)
                {
                    _2414 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2405 << 2u)) >> 2u)).x;
                    _2415 = _2414 == 0u;
                    float frontier_phi_38_pred;
                    float frontier_phi_38_pred_1;
                    float frontier_phi_38_pred_2;
                    float frontier_phi_38_pred_3;
                    float frontier_phi_38_pred_4;
                    float frontier_phi_38_pred_5;
                    if (_2415)
                    {
                        frontier_phi_38_pred = _2400;
                        frontier_phi_38_pred_1 = _2399;
                        frontier_phi_38_pred_2 = _2404;
                        frontier_phi_38_pred_3 = _2403;
                        frontier_phi_38_pred_4 = _2402;
                        frontier_phi_38_pred_5 = _2401;
                    }
                    else
                    {
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2602;
                        float _2603;
                        float _2604;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2612 = _2399;
                        float _2613 = _2400;
                        float _2614 = _2401;
                        float _2615 = _2402;
                        float _2616 = _2403;
                        float _2617 = _2404;
                        uint _2618 = _2414;
                        uint _2619;
                        vec4 _2645;
                        float _2646;
                        vec4 _2661;
                        vec3 _2673;
                        vec4 _2689;
                        vec4 _2705;
                        float _2752;
                        bool _2753;
                        for (;;)
                        {
                            uint _2629 = ((_2405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2618));
                            _2619 = (_2618 + 4294967295u) & _2618;
                            uint _2631 = _2629 * 40u;
                            _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            _2646 = _2645.w;
                            uint _2648 = (_2629 * 40u) + 4u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2663 = (_2629 * 40u) + 8u;
                            _2673 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 2u)).x));
                            uint _2676 = (_2629 * 40u) + 16u;
                            _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            uint _2692 = (_2629 * 40u) + 20u;
                            _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            uint _2708 = (_2629 * 40u) + 24u;
                            vec4 _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2727 = (_2629 * 40u) + 28u;
                            vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 3u)).x));
                            _2752 = fma(_1251, _2740.z, fma(_1250, _2740.y, _2740.x * _1249)) + _2740.w;
                            _2753 = !((fma(_1251, _2721.z, fma(_1250, _2721.y, _2721.x * _1249)) + _2721.w) <= 0.0);
                            float frontier_phi_44_pred;
                            float frontier_phi_44_pred_1;
                            float frontier_phi_44_pred_2;
                            float frontier_phi_44_pred_3;
                            float frontier_phi_44_pred_4;
                            float frontier_phi_44_pred_5;
                            if (_2753)
                            {
                                float _2780 = _2645.x - _1249;
                                float _2781 = _2645.y - _1250;
                                float _2782 = _2645.z - _1251;
                                float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                                float _2786 = inversesqrt(_2783);
                                float _2787 = _2786 * _2780;
                                float _2788 = _2786 * _2781;
                                float _2789 = _2786 * _2782;
                                float _2793 = 1.0 - (_2783 / (_2646 * _2646));
                                float _3742 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                                float _2794 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
                                float _2798 = sqrt(_2783) * _2661.w;
                                float _2800 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                                float _2801 = _2800 * _2800;
                                float _2804 = ((1.0 - _2801) * dot(vec3(_2787, _2788, _2789), vec3(_411, _414, _417))) + _2801;
                                float _2807 = _2798 * _2798;
                                float _2811 = (fma(_1251, _2689.z, fma(_1250, _2689.y, _2689.x * _1249)) + _2689.w) / _2752;
                                float _2812 = (fma(_1251, _2705.z, fma(_1250, _2705.y, _2705.x * _1249)) + _2705.w) / _2752;
                                float _2816 = 1.0 - dot(vec2(_2811, _2812), vec2(_2811, _2812));
                                float _3758 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2817 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                                float _2818 = _2817 * (((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2794) / ((_2807 * 0.699999988079071044921875) + 1.0));
                                float _2830 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                                float _2832 = 1.0 - sqrt(_303);
                                float _2839 = sqrt(1.0 - ((1.0 - (_2832 * _2832)) * (1.0 - (_2830 * _2830))));
                                float _2840 = _2839 * _2839;
                                float _2841 = _2840 * _2840;
                                float _2842 = _2787 - _2286;
                                float _2843 = _2788 - _2287;
                                float _2844 = _2789 - _2288;
                                float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                                float _2852 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2286, (-0.0) - _2287, (-0.0) - _2288));
                                float _3769 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2855 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2856 = dot(vec3(_411, _414, _417), vec3(_2848 * _2842, _2848 * _2843, _2848 * _2844));
                                float _3780 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2859 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
                                float _2863 = ((_2859 * _2859) * (_2841 + (-1.0))) + 1.0;
                                float _2864 = _2800 * _2840;
                                float _2865 = _2864 * _2864;
                                float _2871 = ((1.0 - _2865) * dot(vec3(_411, _414, _417), vec3(_2787, _2788, _2789))) + _2865;
                                float _3791 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                                float _2872 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                                float _2873 = 1.0 - _2840;
                                float _2883 = (0.5 / (((_2872 * ((_2855 * _2873) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2840) * _2855))) * _2872;
                                float _3802 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2893 = (_2817 * _2794) * (((_2841 * 3.1415927410125732421875) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) / ((_2863 * _2863) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_44_pred = _2818 * _2661.z;
                                frontier_phi_44_pred_1 = _2818 * _2661.y;
                                frontier_phi_44_pred_2 = _2818 * _2661.x;
                                frontier_phi_44_pred_3 = _2893 * _2673.z;
                                frontier_phi_44_pred_4 = _2893 * _2673.x;
                                frontier_phi_44_pred_5 = _2893 * _2673.y;
                            }
                            else
                            {
                                frontier_phi_44_pred = 0.0;
                                frontier_phi_44_pred_1 = 0.0;
                                frontier_phi_44_pred_2 = 0.0;
                                frontier_phi_44_pred_3 = 0.0;
                                frontier_phi_44_pred_4 = 0.0;
                                frontier_phi_44_pred_5 = 0.0;
                            }
                            _2902 = frontier_phi_44_pred;
                            _2901 = frontier_phi_44_pred_1;
                            _2900 = frontier_phi_44_pred_2;
                            _2899 = frontier_phi_44_pred_3;
                            _2897 = frontier_phi_44_pred_4;
                            _2898 = frontier_phi_44_pred_5;
                            _2602 = _2900 + _2615;
                            _2603 = _2901 + _2616;
                            _2604 = _2902 + _2617;
                            _2599 = _2897 + _2612;
                            _2600 = _2898 + _2613;
                            _2601 = _2899 + _2614;
                            if (_2619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2601;
                                _2615 = _2602;
                                _2616 = _2603;
                                _2617 = _2604;
                                _2618 = _2619;
                                continue;
                            }
                        }
                        frontier_phi_38_pred = _2600;
                        frontier_phi_38_pred_1 = _2599;
                        frontier_phi_38_pred_2 = _2604;
                        frontier_phi_38_pred_3 = _2603;
                        frontier_phi_38_pred_4 = _2602;
                        frontier_phi_38_pred_5 = _2601;
                    }
                    _2263 = frontier_phi_38_pred;
                    _2261 = frontier_phi_38_pred_1;
                    _2271 = frontier_phi_38_pred_2;
                    _2269 = frontier_phi_38_pred_3;
                    _2267 = frontier_phi_38_pred_4;
                    _2265 = frontier_phi_38_pred_5;
                    uint _2406 = _2405 + 1u;
                    if (_2406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2399 = _2261;
                        _2400 = _2263;
                        _2401 = _2265;
                        _2402 = _2267;
                        _2403 = _2269;
                        _2404 = _2271;
                        _2405 = _2406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_26_27_ladder = _2261;
                frontier_phi_26_27_ladder_1 = _2263;
                frontier_phi_26_27_ladder_2 = _2271;
                frontier_phi_26_27_ladder_3 = _2269;
                frontier_phi_26_27_ladder_4 = _2267;
                frontier_phi_26_27_ladder_5 = _2265;
            }
            else
            {
                frontier_phi_26_27_ladder = _2147;
                frontier_phi_26_27_ladder_1 = _2149;
                frontier_phi_26_27_ladder_2 = _2157;
                frontier_phi_26_27_ladder_3 = _2155;
                frontier_phi_26_27_ladder_4 = _2153;
                frontier_phi_26_27_ladder_5 = _2151;
            }
            _2260 = frontier_phi_26_27_ladder;
            _2262 = frontier_phi_26_27_ladder_1;
            _2264 = frontier_phi_26_27_ladder_5;
            _2266 = frontier_phi_26_27_ladder_4;
            _2268 = frontier_phi_26_27_ladder_3;
            _2270 = frontier_phi_26_27_ladder_2;
        }
        float _2275 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2080 = (_2275 * _2266) + _1641;
        _2082 = (_2275 * _2268) + _1643;
        _2084 = (_2275 * _2270) + _1645;
        _2086 = ((_2260 * _456) * _2275) + _1931;
        _2088 = ((_2262 * _458) * _2275) + _1933;
        _2090 = ((_2264 * _459) * _2275) + _1935;
    }
    else
    {
        _2080 = _1641;
        _2082 = _1643;
        _2084 = _1645;
        _2086 = _1931;
        _2088 = _1933;
        _2090 = _1935;
    }
    float _3818 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3829 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3840 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _2110 = _430 + 6u;
    float _2118 = _389 / cbSceneParam._m0[86u].x;
    float _2119 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2135 = _2133.x;
    float _2136 = _2133.y;
    float _2137 = _2133.z;
    float _2138 = _2133.w;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2172 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2173 = _2172 / _323;
        float _2184 = _2173 * _374;
        float _2185 = _375 * _2173;
        float _2186 = (-0.0) - _2185;
        float _2187 = _2173 * _376;
        float _2189 = (cbSceneParam._m0[77u].w * _2186) / _2172;
        float _2190 = _2189 + cbSceneParam._m0[79u].w;
        float _2191 = cbSceneParam._m0[79u].w - _2185;
        float _2197 = sqrt(((_2184 * _2184) + (_2185 * _2185)) + (_2187 * _2187));
        float _2200 = (1.0 - (cbSceneParam._m0[77u].w / _2172)) * _2197;
        float _2206 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2208 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2361;
        if (abs((_2186 - _2189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2361 = ((((_2190 > 0.0) ? exp2(_2206 * _2190) : (2.0 - exp2(_2208 * _2190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2200;
        }
        else
        {
            float _2321 = 1.0 / cbSceneParam._m0[80u].x;
            float _2322 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : max(_2190, _2191));
            float _2323 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : min(_2190, _2191));
            float _2332 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : min(_2322, 0.0));
            float _2333 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : min(_2323, 0.0));
            _2361 = ((abs(_2197 / _2186) * cbSceneParam._m0[80u].y) * ((((_2332 - _2333) * 2.0) - ((exp2(_2206 * (isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0)))) - exp2(_2206 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0))))) * _2321)) - ((exp2(_2208 * _2332) - exp2(_2208 * _2333)) * _2321))) + (_2200 * cbSceneParam._m0[80u].z);
        }
        vec4 _2363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, 1.0), 0.0);
        float _2372 = exp2((_2361 * (-1.44269502162933349609375)) * (1.0 - _2363.w));
        float _2373 = log2(_2372);
        float _2389 = log2(_2138);
        _2210 = (exp2(_2389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].x)) * _2363.x) / cbSceneParam._m0[78u].x)) + _2135;
        _2212 = (exp2(_2389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].y)) * _2363.y) / cbSceneParam._m0[78u].y)) + _2136;
        _2214 = (exp2(_2389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].z)) * _2363.z) / cbSceneParam._m0[78u].z)) + _2137;
        _2216 = _2372 * _2138;
    }
    else
    {
        _2210 = _2135;
        _2212 = _2136;
        _2214 = _2137;
        _2216 = _2138;
    }
    float _2227 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2228 = _2227 == 3.0;
    float _2230 = log2(_2216);
    float _2237 = exp2(_2230 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_2080 + (((1.0 - _489) * _471) * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)))))) + ((_2086 + ((_509.x * _489) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2238 = exp2(_2230 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_2082 + (((1.0 - _490) * _471) * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)))))) + ((_2088 + ((_509.y * _490) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2239 = exp2(_2230 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_2084 + (((1.0 - _491) * _471) * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)))))) + ((_2090 + ((_509.z * _491) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _2248 = (_2227 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2248 * (_2228 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2210)));
    SV_Target.y = _2248 * (_2228 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2212)));
    SV_Target.z = _2248 * (_2228 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2214)));
    SV_Target.w = cbInstanceData._m0[_2110].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2110].w;
}


