#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2767;
float _2768;
float _2769;
float _2770;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _2779 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _2779 : (isnan(_2779) ? 1.0 : min(_2779, 1.0))));
    float _275 = fma(_268, _209, fma(_261, _201 * TANGENT.x, (_187 * _180) * _259));
    float _278 = fma(_268, _210, fma(_261, _201 * TANGENT.y, (_187 * _181) * _259));
    float _281 = fma(_268, _211, fma(_261, _201 * TANGENT.z, (_187 * _182) * _259));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _2790 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _289 = isnan(1.0) ? _2790 : (isnan(_2790) ? 1.0 : min(_2790, 1.0));
    float _2801 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _2812 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _2823 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _349 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _359 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _349);
    float _360 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _349);
    float _361 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _349);
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _359 * _365;
    float _367 = _360 * _365;
    float _368 = _361 * _365;
    vec4 _373 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _375 = _373.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _540 = sqrt(((_359 * _359) + (_360 * _360)) + (_361 * _361));
        float _546 = (cbMatDynParam._m0[5u].x * _540) + cbMatDynParam._m0[5u].y;
        float _2834 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
        float _547 = isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0));
        float _551 = (cbMatDynParam._m0[5u].z * _540) + cbMatDynParam._m0[5u].w;
        float _2845 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0))) - _547)) + _547) < ((_375 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _411 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _414 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _427 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2801 : (isnan(_2801) ? 1.0 : min(_2801, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0)))) * cbInstanceData._m0[_430].z;
    float _2856 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0));
    float _2867 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0));
    float _2878 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0));
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _453 = _450.x * TEXCOORD.z;
    float _457 = abs(dot(vec3(_366, _367, _368), vec3(_286, _287, _288)));
    float _2889 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _464 = exp2(log2(1.0 - (isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0)))) * 5.0) * 0.959999978542327880859375;
    float _466 = _464 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_308 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_286, _287, _288), vec3(1.0, 0.0, 0.0))) + (_387 / cbSceneParam._m0[86u].x), 1.0 - (_388 / cbSceneParam._m0[86u].y)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _589 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _593 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _618 = _521 + _286;
        float _619 = _525 + _287;
        float _620 = _529 + _288;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_675.x + (-0.5));
        float _711 = _709 * (_675.y + (-0.5));
        float _712 = _709 * (_675.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _717 = ((_654.x + (-0.5)) * 0.5) * _688;
        float _719 = ((_661.x + (-0.5)) * 0.5) * _695;
        float _721 = ((_668.x + (-0.5)) * 0.5) * _702;
        float _722 = dot(vec3(_717, _719, _721), vec3(_717, _719, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_286, _287, _288), vec3(_727 * _717, _727 * _719, _727 * _721)) + 1.0) * 0.5;
        float _2915 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_719 * _719) + (_717 * _717)) + (_721 * _721)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _2926 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _2937 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0))) * (_748 + 1.0))) + _753) * _713;
        float _764 = ((_654.y + (-0.5)) * 0.5) * _688;
        float _766 = ((_661.y + (-0.5)) * 0.5) * _695;
        float _768 = ((_668.y + (-0.5)) * 0.5) * _702;
        float _769 = dot(vec3(_764, _766, _768), vec3(_764, _766, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_286, _287, _288), vec3(_774 * _764, _774 * _766, _774 * _768)) + 1.0) * 0.5;
        float _2948 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_766 * _766) + (_764 * _764)) + (_768 * _768)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _2959 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _2970 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0))) * (_793 + 1.0))) + _798) * _714;
        float _809 = ((_654.z + (-0.5)) * 0.5) * _688;
        float _811 = ((_661.z + (-0.5)) * 0.5) * _695;
        float _813 = ((_668.z + (-0.5)) * 0.5) * _702;
        float _814 = dot(vec3(_809, _811, _813), vec3(_809, _811, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_286, _287, _288), vec3(_819 * _809, _819 * _811, _819 * _813)) + 1.0) * 0.5;
        float _2981 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_811 * _811) + (_809 * _809)) + (_813 * _813)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _2992 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3003 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0))) * (_838 + 1.0))) + _843) * _715;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _895 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _899 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _922 = _521 + _286;
        float _923 = _525 + _287;
        float _924 = _529 + _288;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1019 = ((_957.x + (-0.5)) * 0.5) * _990;
        float _1021 = ((_964.x + (-0.5)) * 0.5) * _997;
        float _1023 = ((_971.x + (-0.5)) * 0.5) * _1004;
        float _1024 = dot(vec3(_1019, _1021, _1023), vec3(_1019, _1021, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_286, _287, _288), vec3(_1029 * _1019, _1029 * _1021, _1029 * _1023)) + 1.0) * 0.5;
        float _3044 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1021 * _1021) + (_1019 * _1019)) + (_1023 * _1023)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3055 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3066 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0))) * (_1048 + 1.0))) + _1053) * _1015;
        float _1064 = ((_957.y + (-0.5)) * 0.5) * _990;
        float _1066 = ((_964.y + (-0.5)) * 0.5) * _997;
        float _1068 = ((_971.y + (-0.5)) * 0.5) * _1004;
        float _1069 = dot(vec3(_1064, _1066, _1068), vec3(_1064, _1066, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_286, _287, _288), vec3(_1074 * _1064, _1074 * _1066, _1074 * _1068)) + 1.0) * 0.5;
        float _3077 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1066 * _1066) + (_1064 * _1064)) + (_1068 * _1068)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3088 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3099 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))) * (_1093 + 1.0))) + _1098) * _1016;
        float _1109 = ((_957.z + (-0.5)) * 0.5) * _990;
        float _1111 = ((_964.z + (-0.5)) * 0.5) * _997;
        float _1113 = ((_971.z + (-0.5)) * 0.5) * _1004;
        float _1114 = dot(vec3(_1109, _1111, _1113), vec3(_1109, _1111, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_286, _287, _288), vec3(_1119 * _1109, _1119 * _1111, _1119 * _1113)) + 1.0) * 0.5;
        float _3110 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1111 * _1111) + (_1109 * _1109)) + (_1113 * _1113)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3121 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3132 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * (_1138 + 1.0))) + _1143) * _1017;
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _860)) + _860;
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _861)) + _861;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _862)) + _862;
    float _1195 = fma(_1174, cbSceneParam._m0[89u].z, fma(_1173, cbSceneParam._m0[89u].y, _1172 * cbSceneParam._m0[89u].x));
    float _1198 = fma(_1174, cbSceneParam._m0[90u].z, fma(_1173, cbSceneParam._m0[90u].y, _1172 * cbSceneParam._m0[90u].x));
    float _1201 = fma(_1174, cbSceneParam._m0[91u].z, fma(_1173, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1172));
    float _1206 = (0.959999978542327880859375 - _464) * _453;
    vec4 _1211 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1213 = _1211.w;
    float _1225 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1213);
    float _1226 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1213);
    float _1227 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1213);
    uvec4 _1231 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1233 = _1231.x * 14u;
    uint _1235 = _1233 + 13u;
    float _1242 = _453 + (-1.0);
    float _1247 = (cbLight._m0[_1235].x * _1242) + 1.0;
    float _1248 = (cbLight._m0[_1235].y * _1242) + 1.0;
    float _1249 = (cbLight._m0[_1235].z * _1242) + 1.0;
    float _1250 = (cbLight._m0[_1235].w * _1242) + 1.0;
    uint _1251 = _1233 + 5u;
    float _1257 = isnan(1.0) ? _1248 : (isnan(_1248) ? 1.0 : min(_1248, 1.0));
    uint _1261 = _1233 + 4u;
    float _1271 = isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0));
    uint _1275 = _1233 | 1u;
    float _1286 = dot(vec3(cbLight._m0[_1233].xyz), vec3(_286, _287, _288));
    float _1289 = dot(vec3(cbLight._m0[_1275].xyz), vec3(_286, _287, _288));
    float _3183 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _3194 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1294 = (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * 0.3183098733425140380859375;
    float _1296 = (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))) * 0.3183098733425140380859375;
    float _1303 = ((cbLight._m0[_1251].x * _1257) * _1296) + (((cbLight._m0[_1261].x * _1225) * _1271) * _1294);
    float _1304 = ((_1257 * cbLight._m0[_1251].y) * _1296) + (((cbLight._m0[_1261].y * _1226) * _1271) * _1294);
    float _1305 = ((_1257 * cbLight._m0[_1251].z) * _1296) + (((cbLight._m0[_1261].z * _1227) * _1271) * _1294);
    uvec4 _1310 = floatBitsToUint(cbLight._m0[_1233 + 12u]);
    bool _1312 = _1310.x == 0u;
    float _1313;
    float _1315;
    float _1317;
    if (_1312)
    {
        _1313 = _1303;
        _1315 = _1304;
        _1317 = _1305;
    }
    else
    {
        uint _1321 = _1233 + 6u;
        float _1337 = (dot(vec3(cbLight._m0[_1233 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1338 = _1337 * _1337;
        float _3205 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _1340 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _1313 = (((cbLight._m0[_1321].x * 0.3183098733425140380859375) * _1339) * _1340) + _1303;
        _1315 = (((cbLight._m0[_1321].y * 0.3183098733425140380859375) * _1339) * _1340) + _1304;
        _1317 = (((cbLight._m0[_1321].z * 0.3183098733425140380859375) * _1339) * _1340) + _1305;
    }
    bool _1320 = _1310.y == 0u;
    float _1350;
    float _1352;
    float _1354;
    if (_1320)
    {
        _1350 = _1313;
        _1352 = _1315;
        _1354 = _1317;
    }
    else
    {
        uint _1514 = _1233 + 7u;
        float _1530 = (dot(vec3(cbLight._m0[_1233 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1531 = _1530 * _1530;
        float _3221 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _1533 = isnan(1.0) ? _1250 : (isnan(_1250) ? 1.0 : min(_1250, 1.0));
        _1350 = (((cbLight._m0[_1514].x * 0.3183098733425140380859375) * _1532) * _1533) + _1313;
        _1352 = (((cbLight._m0[_1514].y * 0.3183098733425140380859375) * _1532) * _1533) + _1315;
        _1354 = (((cbLight._m0[_1514].z * 0.3183098733425140380859375) * _1532) * _1533) + _1317;
    }
    uint _1357 = _1233 + 8u;
    float _1370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1233].w)) * _289) * 0.949999988079071044921875);
    float _1371 = _1370 * _1370;
    float _1372 = cbLight._m0[_1233].x + _366;
    float _1373 = cbLight._m0[_1233].y + _367;
    float _1374 = cbLight._m0[_1233].z + _368;
    float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
    float _1379 = _1378 * _1372;
    float _1380 = _1378 * _1373;
    float _1381 = _1378 * _1374;
    float _1382 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1233].xyz));
    float _3237 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
    float _1385 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _1386 = dot(vec3(_286, _287, _288), vec3(_366, _367, _368));
    float _3248 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
    float _1389 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _1390 = dot(vec3(_286, _287, _288), vec3(_1379, _1380, _1381));
    float _3259 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
    float _1393 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _1394 = dot(vec3(cbLight._m0[_1233].xyz), vec3(_1379, _1380, _1381));
    float _3270 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
    float _1398 = _1371 * _1371;
    float _1402 = ((_1393 * _1393) * (_1398 + (-1.0))) + 1.0;
    float _1412 = (exp2(log2(1.0 - (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1413 = 1.0 - _1371;
    float _1424 = (0.5 / (((_1389 * ((_1385 * _1413) + _1371)) + 9.9999999392252902907785028219223e-09) + (((_1389 * _1413) + _1371) * _1385))) * _1385;
    float _3281 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1426 = (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_1398 / ((_1402 * _1402) * 3.141590118408203125));
    uint _1440 = _1233 + 9u;
    float _1451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1275].w)) * _289) * 0.949999988079071044921875);
    float _1452 = _1451 * _1451;
    float _1453 = cbLight._m0[_1275].x + _366;
    float _1454 = cbLight._m0[_1275].y + _367;
    float _1455 = cbLight._m0[_1275].z + _368;
    float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
    float _1460 = _1459 * _1453;
    float _1461 = _1459 * _1454;
    float _1462 = _1459 * _1455;
    float _1463 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1275].xyz));
    float _3292 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1466 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _1467 = dot(vec3(_286, _287, _288), vec3(_1460, _1461, _1462));
    float _3303 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1470 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _1471 = dot(vec3(cbLight._m0[_1275].xyz), vec3(_1460, _1461, _1462));
    float _3314 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
    float _1475 = _1452 * _1452;
    float _1479 = ((_1470 * _1470) * (_1475 + (-1.0))) + 1.0;
    float _1488 = (exp2(log2(1.0 - (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1489 = 1.0 - _1452;
    float _1499 = (0.5 / (((_1389 * ((_1466 * _1489) + _1452)) + 9.9999999392252902907785028219223e-09) + (((_1389 * _1489) + _1452) * _1466))) * _1466;
    float _3325 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _1501 = (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_1475 / ((_1479 * _1479) * 3.141590118408203125));
    float _1511 = (((_1488 * cbLight._m0[_1440].x) * _1501) * _1257) + ((((cbLight._m0[_1357].x * _1225) * _1412) * _1426) * _1271);
    float _1512 = (((_1488 * cbLight._m0[_1440].y) * _1501) * _1257) + ((((cbLight._m0[_1357].y * _1226) * _1412) * _1426) * _1271);
    float _1513 = (((_1488 * cbLight._m0[_1440].z) * _1501) * _1257) + ((((cbLight._m0[_1357].z * _1227) * _1412) * _1426) * _1271);
    float _1543;
    float _1545;
    float _1547;
    if (_1312)
    {
        _1543 = _1511;
        _1545 = _1512;
        _1547 = _1513;
    }
    else
    {
        uint _1549 = _1233 + 2u;
        uint _1553 = _1233 + 10u;
        float _1567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1549].w)) * _289) * 0.949999988079071044921875);
        float _1568 = _1567 * _1567;
        float _1569 = cbLight._m0[_1549].x + _366;
        float _1570 = cbLight._m0[_1549].y + _367;
        float _1571 = cbLight._m0[_1549].z + _368;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1576 = _1575 * _1569;
        float _1577 = _1575 * _1570;
        float _1578 = _1575 * _1571;
        float _1579 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1549].xyz));
        float _3336 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1582 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1583 = dot(vec3(_286, _287, _288), vec3(_1576, _1577, _1578));
        float _3347 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1586 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1587 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_1576, _1577, _1578));
        float _3358 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1568 * _1568;
        float _1595 = ((_1586 * _1586) * (_1591 + (-1.0))) + 1.0;
        float _1604 = (exp2(log2(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1605 = 1.0 - _1568;
        float _1615 = (0.5 / (((_1389 * ((_1582 * _1605) + _1568)) + 9.9999999392252902907785028219223e-09) + (((_1389 * _1605) + _1568) * _1582))) * _1582;
        float _3369 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1617 = (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_1591 / ((_1595 * _1595) * 3.141590118408203125));
        float _1618 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _1543 = (((_1604 * cbLight._m0[_1553].x) * _1617) * _1618) + _1511;
        _1545 = (((_1604 * cbLight._m0[_1553].y) * _1617) * _1618) + _1512;
        _1547 = (((_1604 * cbLight._m0[_1553].z) * _1617) * _1618) + _1513;
    }
    float _1628;
    float _1630;
    float _1632;
    if (_1320)
    {
        _1628 = _1543;
        _1630 = _1545;
        _1632 = _1547;
    }
    else
    {
        uint _1639 = _1233 + 3u;
        uint _1643 = _1233 + 11u;
        float _1657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _289) * 0.949999988079071044921875);
        float _1658 = _1657 * _1657;
        float _1659 = cbLight._m0[_1639].x + _366;
        float _1660 = cbLight._m0[_1639].y + _367;
        float _1661 = cbLight._m0[_1639].z + _368;
        float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
        float _1666 = _1665 * _1659;
        float _1667 = _1665 * _1660;
        float _1668 = _1665 * _1661;
        float _1669 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1639].xyz));
        float _3385 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1672 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1673 = dot(vec3(_286, _287, _288), vec3(_1666, _1667, _1668));
        float _3396 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1676 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1677 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1666, _1667, _1668));
        float _3407 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1658 * _1658;
        float _1685 = ((_1676 * _1676) * (_1681 + (-1.0))) + 1.0;
        float _1694 = (exp2(log2(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1695 = 1.0 - _1658;
        float _1705 = (0.5 / (((_1389 * ((_1672 * _1695) + _1658)) + 9.9999999392252902907785028219223e-09) + (((_1389 * _1695) + _1658) * _1672))) * _1672;
        float _3418 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1707 = (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1681 / ((_1685 * _1685) * 3.141590118408203125));
        float _1708 = isnan(1.0) ? _1250 : (isnan(_1250) ? 1.0 : min(_1250, 1.0));
        _1628 = (((_1694 * cbLight._m0[_1643].x) * _1707) * _1708) + _1543;
        _1630 = (((_1694 * cbLight._m0[_1643].y) * _1707) * _1708) + _1545;
        _1632 = (((_1694 * cbLight._m0[_1643].z) * _1707) * _1708) + _1547;
    }
    float _1817;
    float _1819;
    float _1821;
    float _1823;
    float _1825;
    float _1827;
    if (_1231.y == 0u)
    {
        float _1758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1759 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1758;
        float _1760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1758;
        float _1761 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1758;
        uvec4 _1773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1774 = _1773.x;
        uint _1785 = uint((float(_1773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _1774))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _1774)));
        float _1795 = (log2(_1761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1796 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        uint _1799 = uint(isnan(14.0) ? _1796 : (isnan(_1796) ? 14.0 : min(_1796, 14.0)));
        uvec4 _1804 = texelFetch(g_lightClusterGridBuffer, int(((_1799 << 2u) + (_1785 << 6u)) >> 2u));
        uint _1805 = _1804.x;
        uint _1806 = _1773.z;
        float _1884;
        float _1886;
        float _1888;
        float _1890;
        float _1892;
        float _1894;
        if (((((1u << ((_1806 >> 4u) & 15u)) + 4294967295u) & _1805) == 0u) || ((_1806 & 240u) == 0u))
        {
            _1884 = 0.0;
            _1886 = 0.0;
            _1888 = 0.0;
            _1890 = 0.0;
            _1892 = 0.0;
            _1894 = 0.0;
        }
        else
        {
            float _1885;
            float _1887;
            float _1889;
            float _1891;
            float _1893;
            float _1895;
            float _2038 = 0.0;
            float _2039 = 0.0;
            float _2040 = 0.0;
            float _2041 = 0.0;
            float _2042 = 0.0;
            float _2043 = 0.0;
            uint _2044 = 0u;
            uint _2053;
            bool _2054;
            for (;;)
            {
                _2053 = texelFetch(g_lightClassification, int((((_1799 << 5u) + (_1785 << 9u)) + (_2044 << 2u)) >> 2u)).x;
                _2054 = _2053 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2054)
                {
                    frontier_phi_32_pred = _2038;
                    frontier_phi_32_pred_1 = _2041;
                    frontier_phi_32_pred_2 = _2040;
                    frontier_phi_32_pred_3 = _2039;
                    frontier_phi_32_pred_4 = _2043;
                    frontier_phi_32_pred_5 = _2042;
                }
                else
                {
                    float _2183;
                    float _2184;
                    float _2185;
                    float _2186;
                    float _2187;
                    float _2188;
                    uint _2189;
                    _2183 = _2038;
                    _2184 = _2039;
                    _2185 = _2040;
                    _2186 = _2041;
                    _2187 = _2042;
                    _2188 = _2043;
                    _2189 = _2053;
                    float _2110;
                    float _2111;
                    float _2112;
                    float _2113;
                    float _2114;
                    float _2115;
                    for (;;)
                    {
                        uint _2193 = uint(findLSB(_2189)) + (_2044 << 5u);
                        uint _2190 = (_2189 + 4294967295u) & _2189;
                        uint _2195 = _2193 * 48u;
                        vec4 _2209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2195)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 3u)).x));
                        uint _2215 = (_2193 * 48u) + 4u;
                        vec4 _2228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2215)).x, texelFetch(g_PointLightRenderingBuffer, int(_2215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2215 + 3u)).x));
                        uint _2234 = (_2193 * 48u) + 8u;
                        vec3 _2245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2234)).x, texelFetch(g_PointLightRenderingBuffer, int(_2234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2234 + 2u)).x));
                        float _2249 = _2209.x - _1759;
                        float _2250 = _2209.y - _1760;
                        float _2251 = _2209.z - _1761;
                        float _2252 = dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251));
                        float _2255 = inversesqrt(_2252);
                        float _2256 = _2255 * _2249;
                        float _2257 = _2255 * _2250;
                        float _2258 = _2255 * _2251;
                        float _2259 = dot(vec3(_408, _411, _414), vec3(_2256, _2257, _2258));
                        float _2264 = 1.0 - (_2252 * _2209.w);
                        float _3444 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
                        float _2265 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
                        float _2266 = sqrt(_2252) * _2228.w;
                        float _2269 = 1.39999997615814208984375 / (_2266 + 1.39999997615814208984375);
                        float _2270 = _2269 * _2269;
                        float _2273 = ((1.0 - _2270) * _2259) + _2270;
                        float _2276 = _2266 * _2266;
                        float _2280 = ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2265) / ((_2276 * 0.699999988079071044921875) + 1.0);
                        float _2284 = (-0.0) - _1759;
                        float _2285 = (-0.0) - _1760;
                        float _2286 = (-0.0) - _1761;
                        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
                        float _2291 = _2290 * _2284;
                        float _2292 = _2290 * _2285;
                        float _2293 = _2290 * _2286;
                        float _2301 = exp2(log2(1.0 / ((_2276 * 3.5) + 5.0)) * 0.25);
                        float _2303 = 1.0 - sqrt(_289);
                        float _2310 = sqrt(1.0 - ((1.0 - (_2303 * _2303)) * (1.0 - (_2301 * _2301))));
                        float _2311 = _2310 * _2310;
                        float _2312 = _2311 * _2311;
                        float _2313 = _2291 + _2256;
                        float _2314 = _2292 + _2257;
                        float _2315 = _2293 + _2258;
                        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
                        float _2323 = dot(vec3(_408, _411, _414), vec3(_2291, _2292, _2293));
                        float _3460 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                        float _2326 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
                        float _2327 = dot(vec3(_408, _411, _414), vec3(_2319 * _2313, _2319 * _2314, _2319 * _2315));
                        float _3471 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
                        float _2330 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
                        float _2334 = ((_2330 * _2330) * (_2312 + (-1.0))) + 1.0;
                        float _2335 = _2269 * _2311;
                        float _2336 = _2335 * _2335;
                        float _2339 = ((1.0 - _2336) * _2259) + _2336;
                        float _3482 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
                        float _2340 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
                        float _2341 = 1.0 - _2311;
                        float _2351 = (0.5 / (((_2340 * ((_2326 * _2341) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2341) + _2311) * _2326))) * _2340;
                        float _3493 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
                        float _2362 = (((_2312 * 3.1415927410125732421875) * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) / ((_2334 * _2334) * ((_2276 * 2.1991131305694580078125) + 3.141590118408203125))) * _2265;
                        _2113 = (_2280 * _2228.x) + _2186;
                        _2114 = (_2280 * _2228.y) + _2187;
                        _2115 = (_2280 * _2228.z) + _2188;
                        _2110 = (_2362 * _2245.x) + _2183;
                        _2111 = (_2362 * _2245.y) + _2184;
                        _2112 = (_2362 * _2245.z) + _2185;
                        if (_2190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2183 = _2110;
                            _2184 = _2111;
                            _2185 = _2112;
                            _2186 = _2113;
                            _2187 = _2114;
                            _2188 = _2115;
                            _2189 = _2190;
                        }
                    }
                    frontier_phi_32_pred = _2110;
                    frontier_phi_32_pred_1 = _2113;
                    frontier_phi_32_pred_2 = _2112;
                    frontier_phi_32_pred_3 = _2111;
                    frontier_phi_32_pred_4 = _2115;
                    frontier_phi_32_pred_5 = _2114;
                }
                _1885 = frontier_phi_32_pred;
                _1891 = frontier_phi_32_pred_1;
                _1889 = frontier_phi_32_pred_2;
                _1887 = frontier_phi_32_pred_3;
                _1895 = frontier_phi_32_pred_4;
                _1893 = frontier_phi_32_pred_5;
                uint _2045 = _2044 + 1u;
                if (_2045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2038 = _1885;
                    _2039 = _1887;
                    _2040 = _1889;
                    _2041 = _1891;
                    _2042 = _1893;
                    _2043 = _1895;
                    _2044 = _2045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1884 = _1885;
            _1886 = _1887;
            _1888 = _1889;
            _1890 = _1891;
            _1892 = _1893;
            _1894 = _1895;
        }
        uvec4 _1898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1899 = _1898.z;
        uint _1901 = (_1899 >> 8u) & 15u;
        float _2006;
        float _2008;
        float _2010;
        float _2012;
        float _2014;
        float _2016;
        if (((4294967295u << _1901) & _1805) == 0u)
        {
            _2006 = _1884;
            _2008 = _1886;
            _2010 = _1888;
            _2012 = _1890;
            _2014 = _1892;
            _2016 = _1894;
        }
        else
        {
            float _2031 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
            float _2032 = _2031 * _1759;
            float _2033 = _2031 * _1760;
            float _2034 = _2031 * _1761;
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            float frontier_phi_24_25_ladder_3;
            float frontier_phi_24_25_ladder_4;
            float frontier_phi_24_25_ladder_5;
            if (_1901 < ((_1899 >> 12u) & 15u))
            {
                float _2007;
                float _2009;
                float _2011;
                float _2013;
                float _2015;
                float _2017;
                float _2166 = _1884;
                float _2167 = _1886;
                float _2168 = _1888;
                float _2169 = _1890;
                float _2170 = _1892;
                float _2171 = _1894;
                uint _2172 = _1901;
                uint _2181;
                bool _2182;
                for (;;)
                {
                    _2181 = texelFetch(g_lightClassification, int((((_1799 << 5u) + (_1785 << 9u)) + (_2172 << 2u)) >> 2u)).x;
                    _2182 = _2181 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    float frontier_phi_43_pred_3;
                    float frontier_phi_43_pred_4;
                    float frontier_phi_43_pred_5;
                    if (_2182)
                    {
                        frontier_phi_43_pred = _2169;
                        frontier_phi_43_pred_1 = _2171;
                        frontier_phi_43_pred_2 = _2170;
                        frontier_phi_43_pred_3 = _2168;
                        frontier_phi_43_pred_4 = _2167;
                        frontier_phi_43_pred_5 = _2166;
                    }
                    else
                    {
                        float _2376;
                        float _2377;
                        float _2378;
                        float _2379;
                        float _2380;
                        float _2381;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2389 = _2166;
                        float _2390 = _2167;
                        float _2391 = _2168;
                        float _2392 = _2169;
                        float _2393 = _2170;
                        float _2394 = _2171;
                        uint _2395 = _2181;
                        uint _2396;
                        vec4 _2422;
                        float _2423;
                        vec4 _2438;
                        vec3 _2450;
                        vec4 _2466;
                        vec4 _2482;
                        float _2529;
                        bool _2530;
                        for (;;)
                        {
                            uint _2406 = ((_2172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2395));
                            _2396 = (_2395 + 4294967295u) & _2395;
                            uint _2408 = _2406 * 40u;
                            _2422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 3u)).x));
                            _2423 = _2422.w;
                            uint _2425 = (_2406 * 40u) + 4u;
                            _2438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 3u)).x));
                            uint _2440 = (_2406 * 40u) + 8u;
                            _2450 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 2u)).x));
                            uint _2453 = (_2406 * 40u) + 16u;
                            _2466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 3u)).x));
                            uint _2469 = (_2406 * 40u) + 20u;
                            _2482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 3u)).x));
                            uint _2485 = (_2406 * 40u) + 24u;
                            vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 3u)).x));
                            uint _2504 = (_2406 * 40u) + 28u;
                            vec4 _2517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 3u)).x));
                            _2529 = fma(_1761, _2517.z, fma(_1760, _2517.y, _2517.x * _1759)) + _2517.w;
                            _2530 = !((fma(_1761, _2498.z, fma(_1760, _2498.y, _2498.x * _1759)) + _2498.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            float frontier_phi_49_pred_3;
                            float frontier_phi_49_pred_4;
                            float frontier_phi_49_pred_5;
                            if (_2530)
                            {
                                float _2557 = _2422.x - _1759;
                                float _2558 = _2422.y - _1760;
                                float _2559 = _2422.z - _1761;
                                float _2560 = dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559));
                                float _2563 = inversesqrt(_2560);
                                float _2564 = _2563 * _2557;
                                float _2565 = _2563 * _2558;
                                float _2566 = _2563 * _2559;
                                float _2570 = 1.0 - (_2560 / (_2423 * _2423));
                                float _3504 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                                float _2571 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
                                float _2575 = sqrt(_2560) * _2438.w;
                                float _2577 = 1.39999997615814208984375 / (_2575 + 1.39999997615814208984375);
                                float _2578 = _2577 * _2577;
                                float _2581 = ((1.0 - _2578) * dot(vec3(_2564, _2565, _2566), vec3(_408, _411, _414))) + _2578;
                                float _2584 = _2575 * _2575;
                                float _2588 = (fma(_1761, _2466.z, fma(_1760, _2466.y, _2466.x * _1759)) + _2466.w) / _2529;
                                float _2589 = (fma(_1761, _2482.z, fma(_1760, _2482.y, _2482.x * _1759)) + _2482.w) / _2529;
                                float _2593 = 1.0 - dot(vec2(_2588, _2589), vec2(_2588, _2589));
                                float _3520 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                                float _2594 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
                                float _2595 = _2594 * (((isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0))) * _2571) / ((_2584 * 0.699999988079071044921875) + 1.0));
                                float _2607 = exp2(log2(1.0 / ((_2584 * 3.5) + 5.0)) * 0.25);
                                float _2609 = 1.0 - sqrt(_289);
                                float _2616 = sqrt(1.0 - ((1.0 - (_2609 * _2609)) * (1.0 - (_2607 * _2607))));
                                float _2617 = _2616 * _2616;
                                float _2618 = _2617 * _2617;
                                float _2619 = _2564 - _2032;
                                float _2620 = _2565 - _2033;
                                float _2621 = _2566 - _2034;
                                float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
                                float _2629 = dot(vec3(_408, _411, _414), vec3((-0.0) - _2032, (-0.0) - _2033, (-0.0) - _2034));
                                float _3531 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
                                float _2632 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
                                float _2633 = dot(vec3(_408, _411, _414), vec3(_2625 * _2619, _2625 * _2620, _2625 * _2621));
                                float _3542 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                                float _2636 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
                                float _2640 = ((_2636 * _2636) * (_2618 + (-1.0))) + 1.0;
                                float _2641 = _2577 * _2617;
                                float _2642 = _2641 * _2641;
                                float _2648 = ((1.0 - _2642) * dot(vec3(_408, _411, _414), vec3(_2564, _2565, _2566))) + _2642;
                                float _3553 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                                float _2649 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
                                float _2650 = 1.0 - _2617;
                                float _2660 = (0.5 / (((_2649 * ((_2632 * _2650) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2650) + _2617) * _2632))) * _2649;
                                float _3564 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                                float _2670 = (_2594 * _2571) * (((_2618 * 3.1415927410125732421875) * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) / ((_2640 * _2640) * ((_2584 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_49_pred = _2595 * _2438.x;
                                frontier_phi_49_pred_1 = _2670 * _2450.z;
                                frontier_phi_49_pred_2 = _2670 * _2450.y;
                                frontier_phi_49_pred_3 = _2670 * _2450.x;
                                frontier_phi_49_pred_4 = _2595 * _2438.z;
                                frontier_phi_49_pred_5 = _2595 * _2438.y;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                                frontier_phi_49_pred_3 = 0.0;
                                frontier_phi_49_pred_4 = 0.0;
                                frontier_phi_49_pred_5 = 0.0;
                            }
                            _2677 = frontier_phi_49_pred;
                            _2676 = frontier_phi_49_pred_1;
                            _2675 = frontier_phi_49_pred_2;
                            _2674 = frontier_phi_49_pred_3;
                            _2679 = frontier_phi_49_pred_4;
                            _2678 = frontier_phi_49_pred_5;
                            _2379 = _2677 + _2392;
                            _2380 = _2678 + _2393;
                            _2381 = _2679 + _2394;
                            _2376 = _2674 + _2389;
                            _2377 = _2675 + _2390;
                            _2378 = _2676 + _2391;
                            if (_2396 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2389 = _2376;
                                _2390 = _2377;
                                _2391 = _2378;
                                _2392 = _2379;
                                _2393 = _2380;
                                _2394 = _2381;
                                _2395 = _2396;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2379;
                        frontier_phi_43_pred_1 = _2381;
                        frontier_phi_43_pred_2 = _2380;
                        frontier_phi_43_pred_3 = _2378;
                        frontier_phi_43_pred_4 = _2377;
                        frontier_phi_43_pred_5 = _2376;
                    }
                    _2013 = frontier_phi_43_pred;
                    _2017 = frontier_phi_43_pred_1;
                    _2015 = frontier_phi_43_pred_2;
                    _2011 = frontier_phi_43_pred_3;
                    _2009 = frontier_phi_43_pred_4;
                    _2007 = frontier_phi_43_pred_5;
                    uint _2173 = _2172 + 1u;
                    if (_2173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2166 = _2007;
                        _2167 = _2009;
                        _2168 = _2011;
                        _2169 = _2013;
                        _2170 = _2015;
                        _2171 = _2017;
                        _2172 = _2173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _2017;
                frontier_phi_24_25_ladder_1 = _2015;
                frontier_phi_24_25_ladder_2 = _2013;
                frontier_phi_24_25_ladder_3 = _2011;
                frontier_phi_24_25_ladder_4 = _2009;
                frontier_phi_24_25_ladder_5 = _2007;
            }
            else
            {
                frontier_phi_24_25_ladder = _1894;
                frontier_phi_24_25_ladder_1 = _1892;
                frontier_phi_24_25_ladder_2 = _1890;
                frontier_phi_24_25_ladder_3 = _1888;
                frontier_phi_24_25_ladder_4 = _1886;
                frontier_phi_24_25_ladder_5 = _1884;
            }
            _2006 = frontier_phi_24_25_ladder_5;
            _2008 = frontier_phi_24_25_ladder_4;
            _2010 = frontier_phi_24_25_ladder_3;
            _2012 = frontier_phi_24_25_ladder_2;
            _2014 = frontier_phi_24_25_ladder_1;
            _2016 = frontier_phi_24_25_ladder;
        }
        float _2021 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _1817 = (_2021 * _2012) + _1350;
        _1819 = (_2021 * _2014) + _1352;
        _1821 = (_2021 * _2016) + _1354;
        _1823 = ((_2006 * 0.039999999105930328369140625) * _2021) + _1628;
        _1825 = ((_2008 * 0.039999999105930328369140625) * _2021) + _1630;
        _1827 = ((_2010 * 0.039999999105930328369140625) * _2021) + _1632;
    }
    else
    {
        _1817 = _1350;
        _1819 = _1352;
        _1821 = _1354;
        _1823 = _1628;
        _1825 = _1630;
        _1827 = _1632;
    }
    float _3580 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3591 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3602 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _1844 = ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1817 + (_1206 * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)))))) + ((_1823 + ((_485.x * _466) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1845 = ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1819 + (_1206 * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)))))) + ((_1825 + ((_485.y * _466) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1846 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1821 + (_1206 * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)))))) + ((_1827 + ((_485.z * _466) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _1847 = _427 + 6u;
    float _1855 = _387 / cbSceneParam._m0[86u].x;
    float _1856 = _388 / cbSceneParam._m0[86u].y;
    vec4 _1870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1855, _1856, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1872 = _1870.x;
    float _1873 = _1870.y;
    float _1874 = _1870.z;
    float _1875 = _1870.w;
    float _1947;
    float _1949;
    float _1951;
    float _1953;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _1909 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _1910 = _1909 / _308;
        float _1921 = _1910 * _359;
        float _1922 = _360 * _1910;
        float _1923 = (-0.0) - _1922;
        float _1924 = _1910 * _361;
        float _1926 = (cbSceneParam._m0[77u].w * _1923) / _1909;
        float _1927 = _1926 + cbSceneParam._m0[79u].w;
        float _1928 = cbSceneParam._m0[79u].w - _1922;
        float _1934 = sqrt(((_1921 * _1921) + (_1922 * _1922)) + (_1924 * _1924));
        float _1937 = (1.0 - (cbSceneParam._m0[77u].w / _1909)) * _1934;
        float _1943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2123;
        if (abs((_1923 - _1926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2123 = ((((_1927 > 0.0) ? exp2(_1943 * _1927) : (2.0 - exp2(_1945 * _1927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1937;
        }
        else
        {
            float _2067 = 1.0 / cbSceneParam._m0[80u].x;
            float _2068 = isnan(_1928) ? _1927 : (isnan(_1927) ? _1928 : max(_1927, _1928));
            float _2069 = isnan(_1928) ? _1927 : (isnan(_1927) ? _1928 : min(_1927, _1928));
            float _2078 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : min(_2068, 0.0));
            float _2079 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : min(_2069, 0.0));
            _2123 = ((abs(_1934 / _1923) * cbSceneParam._m0[80u].y) * ((((_2078 - _2079) * 2.0) - ((exp2(_1943 * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)))) - exp2(_1943 * (isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))))) * _2067)) - ((exp2(_1945 * _2078) - exp2(_1945 * _2079)) * _2067))) + (_1937 * cbSceneParam._m0[80u].z);
        }
        vec4 _2125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1855, _1856, 1.0), 0.0);
        float _2134 = exp2((_2123 * (-1.44269502162933349609375)) * (1.0 - _2125.w));
        float _2135 = log2(_2134);
        float _2151 = log2(_1875);
        _1947 = (exp2(_2151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].x)) * _2125.x) / cbSceneParam._m0[78u].x)) + _1872;
        _1949 = (exp2(_2151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].y)) * _2125.y) / cbSceneParam._m0[78u].y)) + _1873;
        _1951 = (exp2(_2151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2135 * cbSceneParam._m0[78u].z)) * _2125.z) / cbSceneParam._m0[78u].z)) + _1874;
        _1953 = _2134 * _1875;
    }
    else
    {
        _1947 = _1872;
        _1949 = _1873;
        _1951 = _1874;
        _1953 = _1875;
    }
    bool _2161;
    vec4 _1962;
    vec4 _1985;
    float _1987;
    float _1991;
    float _1992;
    float _1993;
    float _1994;
    bool _2005;
    for (;;)
    {
        _1962 = cbMatDynParam._m0[0u];
        float _1964 = roundEven(_1962.y);
        bool _1965 = _1964 == 3.0;
        float _1967 = log2(_1953);
        float _1974 = exp2(_1967 * cbSceneParam._m0[78u].x) * _1844;
        float _1975 = exp2(_1967 * cbSceneParam._m0[78u].y) * _1845;
        float _1976 = exp2(_1967 * cbSceneParam._m0[78u].z) * _1846;
        float _1983 = _375 + (-0.5);
        _1985 = cbMtdParam._m0[1u];
        _1987 = _1985.y * _1983;
        float _1990 = (_1964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1991 = _1990 * (_1965 ? _1974 : (_1974 + (cbSceneParam._m0[72u].w * _1947)));
        _1992 = _1990 * (_1965 ? _1975 : (_1975 + (cbSceneParam._m0[72u].w * _1949)));
        _1993 = _1990 * (_1965 ? _1976 : (_1976 + (cbSceneParam._m0[72u].w * _1951)));
        _1994 = _1983 * 0.999000012874603271484375;
        _2005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2005)
        {
            if ((cbInstanceData._m0[_427 + 7u].x + _1994) < 0.5)
            {
                _2161 = true;
                break;
            }
        }
        uint _2102 = _429 + uint(_1962.w);
        if ((cbInstanceData._m0[_2102].w < 1.0) && ((cbInstanceData._m0[_2102].w + _1994) < 0.5))
        {
            _2161 = true;
            break;
        }
        if ((_1987 + 1.0) < _1985.x)
        {
            _2161 = true;
            break;
        }
        _2161 = false;
        break;
    }
    float _2367;
    if (_2161)
    {
        discard_state = true;
        _2367 = 0.0;
    }
    else
    {
        _2367 = cbInstanceData._m0[_1847].w;
    }
    SV_Target.x = _1991;
    SV_Target.y = _1992;
    SV_Target.z = _1993;
    SV_Target.w = _2367;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1847].w;
    discard_exit();
}


