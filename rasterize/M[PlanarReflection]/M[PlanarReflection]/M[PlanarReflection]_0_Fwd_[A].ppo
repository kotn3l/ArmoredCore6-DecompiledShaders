#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2799;
float _2800;
float _2801;
float _2802;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _2811 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _2811 : (isnan(_2811) ? 1.0 : min(_2811, 1.0))));
    float _289 = fma(_282, _209, fma(_275, _201 * TANGENT.x, (_187 * _180) * _273));
    float _292 = fma(_282, _210, fma(_275, _201 * TANGENT.y, (_187 * _181) * _273));
    float _295 = fma(_282, _211, fma(_275, _201 * TANGENT.z, (_187 * _182) * _273));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _2822 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _303 = isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0));
    float _2833 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _2844 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _2855 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _2866 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _307 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    vec4 _388 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _390 = _388.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_374 * _374) + (_375 * _375)) + (_376 * _376));
        float _582 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _2877 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0));
        float _587 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _2888 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0))) - _583)) + _583) < ((_390 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _426 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _429 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _442 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0)))) * cbInstanceData._m0[_445].z;
    float _2899 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0));
    float _2910 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0));
    float _2921 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0));
    float _457 = 1.0 - _307;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _307;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _307;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _307;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _483 = _480.x * TEXCOORD.z;
    float _487 = abs(dot(vec3(_381, _382, _383), vec3(_300, _301, _302)));
    float _2932 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _493 = exp2(log2(1.0 - (isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0)))) * 5.0);
    float _494 = 0.959999978542327880859375 - _465;
    float _496 = 0.959999978542327880859375 - _466;
    float _497 = 0.959999978542327880859375 - _467;
    float _501 = (_493 * _494) + _468;
    float _502 = (_493 * _496) + _470;
    float _503 = (_493 * _497) + _471;
    vec4 _521 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_323 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_300, _301, _302), vec3(1.0, 0.0, 0.0))) + (_402 / cbSceneParam._m0[86u].x), 1.0 - (_403 / cbSceneParam._m0[86u].y)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _897;
    float _898;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _625 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _629 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _654 = _557 + _300;
        float _655 = _561 + _301;
        float _656 = _565 + _302;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_711.x + (-0.5));
        float _747 = _745 * (_711.y + (-0.5));
        float _748 = _745 * (_711.z + (-0.5));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _753 = ((_690.x + (-0.5)) * 0.5) * _724;
        float _755 = ((_697.x + (-0.5)) * 0.5) * _731;
        float _757 = ((_704.x + (-0.5)) * 0.5) * _738;
        float _758 = dot(vec3(_753, _755, _757), vec3(_753, _755, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_300, _301, _302), vec3(_763 * _753, _763 * _755, _763 * _757)) + 1.0) * 0.5;
        float _2958 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_755 * _755) + (_753 * _753)) + (_757 * _757)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _2969 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _2980 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0))) * (_784 + 1.0))) + _789) * _749;
        float _800 = ((_690.y + (-0.5)) * 0.5) * _724;
        float _802 = ((_697.y + (-0.5)) * 0.5) * _731;
        float _804 = ((_704.y + (-0.5)) * 0.5) * _738;
        float _805 = dot(vec3(_800, _802, _804), vec3(_800, _802, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_300, _301, _302), vec3(_810 * _800, _810 * _802, _810 * _804)) + 1.0) * 0.5;
        float _2991 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_802 * _802) + (_800 * _800)) + (_804 * _804)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3002 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3013 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0))) * (_829 + 1.0))) + _834) * _750;
        float _845 = ((_690.z + (-0.5)) * 0.5) * _724;
        float _847 = ((_697.z + (-0.5)) * 0.5) * _731;
        float _849 = ((_704.z + (-0.5)) * 0.5) * _738;
        float _850 = dot(vec3(_845, _847, _849), vec3(_845, _847, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_300, _301, _302), vec3(_855 * _845, _855 * _847, _855 * _849)) + 1.0) * 0.5;
        float _3024 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_847 * _847) + (_845 * _845)) + (_849 * _849)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3035 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3046 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * (_874 + 1.0))) + _879) * _751;
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = 0.0;
        _897 = 0.0;
        _898 = 0.0;
    }
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _927 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _931 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _935 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _958 = _557 + _300;
        float _959 = _561 + _301;
        float _960 = _565 + _302;
        float _970 = fma(_960, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958)) - _927;
        float _971 = fma(_960, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958)) - _931;
        float _972 = fma(_960, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958)) - _935;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_927 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_931 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[35u].z) + ((((((_935 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1026 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1014.x + (-0.5));
        float _1049 = _1047 * (_1014.y + (-0.5));
        float _1050 = _1047 * (_1014.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1055 = ((_993.x + (-0.5)) * 0.5) * _1026;
        float _1057 = ((_1000.x + (-0.5)) * 0.5) * _1033;
        float _1059 = ((_1007.x + (-0.5)) * 0.5) * _1040;
        float _1060 = dot(vec3(_1055, _1057, _1059), vec3(_1055, _1057, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_300, _301, _302), vec3(_1065 * _1055, _1065 * _1057, _1065 * _1059)) + 1.0) * 0.5;
        float _3087 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1057 * _1057) + (_1055 * _1055)) + (_1059 * _1059)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3098 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3109 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0))) * (_1084 + 1.0))) + _1089) * _1051;
        float _1100 = ((_993.y + (-0.5)) * 0.5) * _1026;
        float _1102 = ((_1000.y + (-0.5)) * 0.5) * _1033;
        float _1104 = ((_1007.y + (-0.5)) * 0.5) * _1040;
        float _1105 = dot(vec3(_1100, _1102, _1104), vec3(_1100, _1102, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_300, _301, _302), vec3(_1110 * _1100, _1110 * _1102, _1110 * _1104)) + 1.0) * 0.5;
        float _3120 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1102 * _1102) + (_1100 * _1100)) + (_1104 * _1104)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3131 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3142 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) * (_1129 + 1.0))) + _1134) * _1052;
        float _1145 = ((_993.z + (-0.5)) * 0.5) * _1026;
        float _1147 = ((_1000.z + (-0.5)) * 0.5) * _1033;
        float _1149 = ((_1007.z + (-0.5)) * 0.5) * _1040;
        float _1150 = dot(vec3(_1145, _1147, _1149), vec3(_1145, _1147, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_300, _301, _302), vec3(_1155 * _1145, _1155 * _1147, _1155 * _1149)) + 1.0) * 0.5;
        float _3153 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1147 * _1147) + (_1145 * _1145)) + (_1149 * _1149)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3164 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3175 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * (_1174 + 1.0))) + _1179) * _1053;
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _896)) + _896;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _897)) + _897;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _898)) + _898;
    float _1231 = fma(_1210, cbSceneParam._m0[89u].z, fma(_1209, cbSceneParam._m0[89u].y, _1208 * cbSceneParam._m0[89u].x));
    float _1234 = fma(_1210, cbSceneParam._m0[90u].z, fma(_1209, cbSceneParam._m0[90u].y, _1208 * cbSceneParam._m0[90u].x));
    float _1237 = fma(_1210, cbSceneParam._m0[91u].z, fma(_1209, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1208));
    uvec4 _1253 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1255 = _1253.x * 14u;
    uint _1257 = _1255 + 13u;
    float _1264 = _483 + (-1.0);
    float _1269 = (cbLight._m0[_1257].x * _1264) + 1.0;
    float _1270 = (cbLight._m0[_1257].y * _1264) + 1.0;
    float _1271 = (cbLight._m0[_1257].z * _1264) + 1.0;
    float _1272 = (cbLight._m0[_1257].w * _1264) + 1.0;
    uint _1273 = _1255 + 5u;
    float _1279 = isnan(1.0) ? _1270 : (isnan(_1270) ? 1.0 : min(_1270, 1.0));
    uint _1283 = _1255 + 4u;
    float _1290 = isnan(1.0) ? _1269 : (isnan(_1269) ? 1.0 : min(_1269, 1.0));
    uint _1294 = _1255 | 1u;
    float _1305 = dot(vec3(cbLight._m0[_1255].xyz), vec3(_300, _301, _302));
    float _1308 = dot(vec3(cbLight._m0[_1294].xyz), vec3(_300, _301, _302));
    float _3226 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _3237 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1313 = (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * 0.3183098733425140380859375;
    float _1315 = (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * 0.3183098733425140380859375;
    float _1322 = ((cbLight._m0[_1273].x * _1279) * _1315) + ((cbLight._m0[_1283].x * _1290) * _1313);
    float _1323 = ((_1279 * cbLight._m0[_1273].y) * _1315) + ((_1290 * cbLight._m0[_1283].y) * _1313);
    float _1324 = ((_1279 * cbLight._m0[_1273].z) * _1315) + ((_1290 * cbLight._m0[_1283].z) * _1313);
    uvec4 _1329 = floatBitsToUint(cbLight._m0[_1255 + 12u]);
    bool _1331 = _1329.x == 0u;
    float _1332;
    float _1334;
    float _1336;
    if (_1331)
    {
        _1332 = _1322;
        _1334 = _1323;
        _1336 = _1324;
    }
    else
    {
        uint _1340 = _1255 + 6u;
        float _1356 = (dot(vec3(cbLight._m0[_1255 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1357 = _1356 * _1356;
        float _3248 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1359 = isnan(1.0) ? _1271 : (isnan(_1271) ? 1.0 : min(_1271, 1.0));
        _1332 = (((cbLight._m0[_1340].x * 0.3183098733425140380859375) * _1358) * _1359) + _1322;
        _1334 = (((cbLight._m0[_1340].y * 0.3183098733425140380859375) * _1358) * _1359) + _1323;
        _1336 = (((cbLight._m0[_1340].z * 0.3183098733425140380859375) * _1358) * _1359) + _1324;
    }
    bool _1339 = _1329.y == 0u;
    float _1369;
    float _1371;
    float _1373;
    if (_1339)
    {
        _1369 = _1332;
        _1371 = _1334;
        _1373 = _1336;
    }
    else
    {
        uint _1538 = _1255 + 7u;
        float _1554 = (dot(vec3(cbLight._m0[_1255 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1555 = _1554 * _1554;
        float _3264 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _1557 = isnan(1.0) ? _1272 : (isnan(_1272) ? 1.0 : min(_1272, 1.0));
        _1369 = (((cbLight._m0[_1538].x * 0.3183098733425140380859375) * _1556) * _1557) + _1332;
        _1371 = (((cbLight._m0[_1538].y * 0.3183098733425140380859375) * _1556) * _1557) + _1334;
        _1373 = (((cbLight._m0[_1538].z * 0.3183098733425140380859375) * _1556) * _1557) + _1336;
    }
    uint _1376 = _1255 + 8u;
    float _1389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1255].w)) * _303) * 0.949999988079071044921875);
    float _1390 = _1389 * _1389;
    float _1391 = cbLight._m0[_1255].x + _381;
    float _1392 = cbLight._m0[_1255].y + _382;
    float _1393 = cbLight._m0[_1255].z + _383;
    float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
    float _1398 = _1397 * _1391;
    float _1399 = _1397 * _1392;
    float _1400 = _1397 * _1393;
    float _1401 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1255].xyz));
    float _3280 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1404 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _1405 = dot(vec3(_300, _301, _302), vec3(_381, _382, _383));
    float _3291 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1408 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _1409 = dot(vec3(_300, _301, _302), vec3(_1398, _1399, _1400));
    float _3302 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _1413 = dot(vec3(cbLight._m0[_1255].xyz), vec3(_1398, _1399, _1400));
    float _3313 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _1417 = _1390 * _1390;
    float _1421 = ((_1412 * _1412) * (_1417 + (-1.0))) + 1.0;
    float _1429 = exp2(log2(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * 5.0);
    float _1436 = 1.0 - _1390;
    float _1447 = (0.5 / (((_1408 * ((_1404 * _1436) + _1390)) + 9.9999999392252902907785028219223e-09) + (((_1408 * _1436) + _1390) * _1404))) * _1404;
    float _3324 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _1449 = (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_1417 / ((_1421 * _1421) * 3.141590118408203125));
    uint _1460 = _1255 + 9u;
    float _1471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1294].w)) * _303) * 0.949999988079071044921875);
    float _1472 = _1471 * _1471;
    float _1473 = cbLight._m0[_1294].x + _381;
    float _1474 = cbLight._m0[_1294].y + _382;
    float _1475 = cbLight._m0[_1294].z + _383;
    float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
    float _1480 = _1479 * _1473;
    float _1481 = _1479 * _1474;
    float _1482 = _1479 * _1475;
    float _1483 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1294].xyz));
    float _3335 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
    float _1486 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _1487 = dot(vec3(_300, _301, _302), vec3(_1480, _1481, _1482));
    float _3346 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1490 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _1491 = dot(vec3(cbLight._m0[_1294].xyz), vec3(_1480, _1481, _1482));
    float _3357 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1495 = _1472 * _1472;
    float _1499 = ((_1490 * _1490) * (_1495 + (-1.0))) + 1.0;
    float _1506 = exp2(log2(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * 5.0);
    float _1513 = 1.0 - _1472;
    float _1523 = (0.5 / (((_1408 * ((_1486 * _1513) + _1472)) + 9.9999999392252902907785028219223e-09) + (((_1408 * _1513) + _1472) * _1486))) * _1486;
    float _3368 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1525 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1495 / ((_1499 * _1499) * 3.141590118408203125));
    float _1535 = (((((_1506 * _494) + _468) * cbLight._m0[_1460].x) * _1525) * _1279) + (((((_1429 * _494) + _468) * cbLight._m0[_1376].x) * _1449) * _1290);
    float _1536 = (((((_1506 * _496) + _470) * cbLight._m0[_1460].y) * _1525) * _1279) + (((((_1429 * _496) + _470) * cbLight._m0[_1376].y) * _1449) * _1290);
    float _1537 = (((((_1506 * _497) + _471) * cbLight._m0[_1460].z) * _1525) * _1279) + (((((_1429 * _497) + _471) * cbLight._m0[_1376].z) * _1449) * _1290);
    float _1567;
    float _1569;
    float _1571;
    if (_1331)
    {
        _1567 = _1535;
        _1569 = _1536;
        _1571 = _1537;
    }
    else
    {
        uint _1573 = _1255 + 2u;
        uint _1577 = _1255 + 10u;
        float _1591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1573].w)) * _303) * 0.949999988079071044921875);
        float _1592 = _1591 * _1591;
        float _1593 = cbLight._m0[_1573].x + _381;
        float _1594 = cbLight._m0[_1573].y + _382;
        float _1595 = cbLight._m0[_1573].z + _383;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1600 = _1599 * _1593;
        float _1601 = _1599 * _1594;
        float _1602 = _1599 * _1595;
        float _1603 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1573].xyz));
        float _3379 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1606 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1607 = dot(vec3(_300, _301, _302), vec3(_1600, _1601, _1602));
        float _3390 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1610 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1611 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_1600, _1601, _1602));
        float _3401 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = _1592 * _1592;
        float _1619 = ((_1610 * _1610) * (_1615 + (-1.0))) + 1.0;
        float _1626 = exp2(log2(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * 5.0);
        float _1633 = 1.0 - _1592;
        float _1643 = (0.5 / (((_1408 * ((_1606 * _1633) + _1592)) + 9.9999999392252902907785028219223e-09) + (((_1408 * _1633) + _1592) * _1606))) * _1606;
        float _3412 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1645 = (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_1615 / ((_1619 * _1619) * 3.141590118408203125));
        float _1646 = isnan(1.0) ? _1271 : (isnan(_1271) ? 1.0 : min(_1271, 1.0));
        _1567 = (((((_1626 * _494) + _468) * cbLight._m0[_1577].x) * _1645) * _1646) + _1535;
        _1569 = (((((_1626 * _496) + _470) * cbLight._m0[_1577].y) * _1645) * _1646) + _1536;
        _1571 = (((((_1626 * _497) + _471) * cbLight._m0[_1577].z) * _1645) * _1646) + _1537;
    }
    float _1656;
    float _1658;
    float _1660;
    if (_1339)
    {
        _1656 = _1567;
        _1658 = _1569;
        _1660 = _1571;
    }
    else
    {
        uint _1667 = _1255 + 3u;
        uint _1671 = _1255 + 11u;
        float _1685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1667].w)) * _303) * 0.949999988079071044921875);
        float _1686 = _1685 * _1685;
        float _1687 = cbLight._m0[_1667].x + _381;
        float _1688 = cbLight._m0[_1667].y + _382;
        float _1689 = cbLight._m0[_1667].z + _383;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1694 = _1693 * _1687;
        float _1695 = _1693 * _1688;
        float _1696 = _1693 * _1689;
        float _1697 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1667].xyz));
        float _3428 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1700 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1701 = dot(vec3(_300, _301, _302), vec3(_1694, _1695, _1696));
        float _3439 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1704 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1705 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1694, _1695, _1696));
        float _3450 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1686 * _1686;
        float _1713 = ((_1704 * _1704) * (_1709 + (-1.0))) + 1.0;
        float _1720 = exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0);
        float _1727 = 1.0 - _1686;
        float _1737 = (0.5 / (((_1408 * ((_1700 * _1727) + _1686)) + 9.9999999392252902907785028219223e-09) + (((_1408 * _1727) + _1686) * _1700))) * _1700;
        float _3461 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1739 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_1709 / ((_1713 * _1713) * 3.141590118408203125));
        float _1740 = isnan(1.0) ? _1272 : (isnan(_1272) ? 1.0 : min(_1272, 1.0));
        _1656 = (((((_1720 * _494) + _468) * cbLight._m0[_1671].x) * _1739) * _1740) + _1567;
        _1658 = (((((_1720 * _496) + _470) * cbLight._m0[_1671].y) * _1739) * _1740) + _1569;
        _1660 = (((((_1720 * _497) + _471) * cbLight._m0[_1671].z) * _1739) * _1740) + _1571;
    }
    float _1849;
    float _1851;
    float _1853;
    float _1855;
    float _1857;
    float _1859;
    if (_1253.y == 0u)
    {
        float _1790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1790;
        float _1792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1790;
        float _1793 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1790;
        uvec4 _1805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1806 = _1805.x;
        uint _1817 = uint((float(_1805.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _1806))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _1806)));
        float _1827 = (log2(_1793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1828 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        uint _1831 = uint(isnan(14.0) ? _1828 : (isnan(_1828) ? 14.0 : min(_1828, 14.0)));
        uvec4 _1836 = texelFetch(g_lightClusterGridBuffer, int(((_1831 << 2u) + (_1817 << 6u)) >> 2u));
        uint _1837 = _1836.x;
        uint _1838 = _1805.z;
        float _1916;
        float _1918;
        float _1920;
        float _1922;
        float _1924;
        float _1926;
        if (((((1u << ((_1838 >> 4u) & 15u)) + 4294967295u) & _1837) == 0u) || ((_1838 & 240u) == 0u))
        {
            _1916 = 0.0;
            _1918 = 0.0;
            _1920 = 0.0;
            _1922 = 0.0;
            _1924 = 0.0;
            _1926 = 0.0;
        }
        else
        {
            float _1917;
            float _1919;
            float _1921;
            float _1923;
            float _1925;
            float _1927;
            float _2070 = 0.0;
            float _2071 = 0.0;
            float _2072 = 0.0;
            float _2073 = 0.0;
            float _2074 = 0.0;
            float _2075 = 0.0;
            uint _2076 = 0u;
            uint _2085;
            bool _2086;
            for (;;)
            {
                _2085 = texelFetch(g_lightClassification, int((((_1831 << 5u) + (_1817 << 9u)) + (_2076 << 2u)) >> 2u)).x;
                _2086 = _2085 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2086)
                {
                    frontier_phi_32_pred = _2070;
                    frontier_phi_32_pred_1 = _2073;
                    frontier_phi_32_pred_2 = _2072;
                    frontier_phi_32_pred_3 = _2071;
                    frontier_phi_32_pred_4 = _2075;
                    frontier_phi_32_pred_5 = _2074;
                }
                else
                {
                    float _2215;
                    float _2216;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    uint _2221;
                    _2215 = _2070;
                    _2216 = _2071;
                    _2217 = _2072;
                    _2218 = _2073;
                    _2219 = _2074;
                    _2220 = _2075;
                    _2221 = _2085;
                    float _2142;
                    float _2143;
                    float _2144;
                    float _2145;
                    float _2146;
                    float _2147;
                    for (;;)
                    {
                        uint _2225 = uint(findLSB(_2221)) + (_2076 << 5u);
                        uint _2222 = (_2221 + 4294967295u) & _2221;
                        uint _2227 = _2225 * 48u;
                        vec4 _2241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2227)).x, texelFetch(g_PointLightRenderingBuffer, int(_2227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2227 + 3u)).x));
                        uint _2247 = (_2225 * 48u) + 4u;
                        vec4 _2260 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2247)).x, texelFetch(g_PointLightRenderingBuffer, int(_2247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2247 + 3u)).x));
                        uint _2266 = (_2225 * 48u) + 8u;
                        vec3 _2277 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2266)).x, texelFetch(g_PointLightRenderingBuffer, int(_2266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2266 + 2u)).x));
                        float _2281 = _2241.x - _1791;
                        float _2282 = _2241.y - _1792;
                        float _2283 = _2241.z - _1793;
                        float _2284 = dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283));
                        float _2287 = inversesqrt(_2284);
                        float _2288 = _2287 * _2281;
                        float _2289 = _2287 * _2282;
                        float _2290 = _2287 * _2283;
                        float _2291 = dot(vec3(_423, _426, _429), vec3(_2288, _2289, _2290));
                        float _2296 = 1.0 - (_2284 * _2241.w);
                        float _3487 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
                        float _2297 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
                        float _2298 = sqrt(_2284) * _2260.w;
                        float _2301 = 1.39999997615814208984375 / (_2298 + 1.39999997615814208984375);
                        float _2302 = _2301 * _2301;
                        float _2305 = ((1.0 - _2302) * _2291) + _2302;
                        float _2308 = _2298 * _2298;
                        float _2312 = ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2297) / ((_2308 * 0.699999988079071044921875) + 1.0);
                        float _2316 = (-0.0) - _1791;
                        float _2317 = (-0.0) - _1792;
                        float _2318 = (-0.0) - _1793;
                        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
                        float _2323 = _2322 * _2316;
                        float _2324 = _2322 * _2317;
                        float _2325 = _2322 * _2318;
                        float _2333 = exp2(log2(1.0 / ((_2308 * 3.5) + 5.0)) * 0.25);
                        float _2335 = 1.0 - sqrt(_303);
                        float _2342 = sqrt(1.0 - ((1.0 - (_2335 * _2335)) * (1.0 - (_2333 * _2333))));
                        float _2343 = _2342 * _2342;
                        float _2344 = _2343 * _2343;
                        float _2345 = _2323 + _2288;
                        float _2346 = _2324 + _2289;
                        float _2347 = _2325 + _2290;
                        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
                        float _2355 = dot(vec3(_423, _426, _429), vec3(_2323, _2324, _2325));
                        float _3503 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                        float _2358 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
                        float _2359 = dot(vec3(_423, _426, _429), vec3(_2351 * _2345, _2351 * _2346, _2351 * _2347));
                        float _3514 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
                        float _2362 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
                        float _2366 = ((_2362 * _2362) * (_2344 + (-1.0))) + 1.0;
                        float _2367 = _2301 * _2343;
                        float _2368 = _2367 * _2367;
                        float _2371 = ((1.0 - _2368) * _2291) + _2368;
                        float _3525 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
                        float _2372 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
                        float _2373 = 1.0 - _2343;
                        float _2383 = (0.5 / (((_2372 * ((_2358 * _2373) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2373) + _2343) * _2358))) * _2372;
                        float _3536 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
                        float _2394 = (((_2344 * 3.1415927410125732421875) * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) / ((_2366 * _2366) * ((_2308 * 2.1991131305694580078125) + 3.141590118408203125))) * _2297;
                        _2145 = (_2312 * _2260.x) + _2218;
                        _2146 = (_2312 * _2260.y) + _2219;
                        _2147 = (_2312 * _2260.z) + _2220;
                        _2142 = (_2394 * _2277.x) + _2215;
                        _2143 = (_2394 * _2277.y) + _2216;
                        _2144 = (_2394 * _2277.z) + _2217;
                        if (_2222 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2215 = _2142;
                            _2216 = _2143;
                            _2217 = _2144;
                            _2218 = _2145;
                            _2219 = _2146;
                            _2220 = _2147;
                            _2221 = _2222;
                        }
                    }
                    frontier_phi_32_pred = _2142;
                    frontier_phi_32_pred_1 = _2145;
                    frontier_phi_32_pred_2 = _2144;
                    frontier_phi_32_pred_3 = _2143;
                    frontier_phi_32_pred_4 = _2147;
                    frontier_phi_32_pred_5 = _2146;
                }
                _1917 = frontier_phi_32_pred;
                _1923 = frontier_phi_32_pred_1;
                _1921 = frontier_phi_32_pred_2;
                _1919 = frontier_phi_32_pred_3;
                _1927 = frontier_phi_32_pred_4;
                _1925 = frontier_phi_32_pred_5;
                uint _2077 = _2076 + 1u;
                if (_2077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2070 = _1917;
                    _2071 = _1919;
                    _2072 = _1921;
                    _2073 = _1923;
                    _2074 = _1925;
                    _2075 = _1927;
                    _2076 = _2077;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1916 = _1917;
            _1918 = _1919;
            _1920 = _1921;
            _1922 = _1923;
            _1924 = _1925;
            _1926 = _1927;
        }
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.z;
        uint _1933 = (_1931 >> 8u) & 15u;
        float _2038;
        float _2040;
        float _2042;
        float _2044;
        float _2046;
        float _2048;
        if (((4294967295u << _1933) & _1837) == 0u)
        {
            _2038 = _1916;
            _2040 = _1918;
            _2042 = _1920;
            _2044 = _1922;
            _2046 = _1924;
            _2048 = _1926;
        }
        else
        {
            float _2063 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
            float _2064 = _2063 * _1791;
            float _2065 = _2063 * _1792;
            float _2066 = _2063 * _1793;
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            float frontier_phi_24_25_ladder_3;
            float frontier_phi_24_25_ladder_4;
            float frontier_phi_24_25_ladder_5;
            if (_1933 < ((_1931 >> 12u) & 15u))
            {
                float _2039;
                float _2041;
                float _2043;
                float _2045;
                float _2047;
                float _2049;
                float _2198 = _1916;
                float _2199 = _1918;
                float _2200 = _1920;
                float _2201 = _1922;
                float _2202 = _1924;
                float _2203 = _1926;
                uint _2204 = _1933;
                uint _2213;
                bool _2214;
                for (;;)
                {
                    _2213 = texelFetch(g_lightClassification, int((((_1831 << 5u) + (_1817 << 9u)) + (_2204 << 2u)) >> 2u)).x;
                    _2214 = _2213 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    float frontier_phi_43_pred_3;
                    float frontier_phi_43_pred_4;
                    float frontier_phi_43_pred_5;
                    if (_2214)
                    {
                        frontier_phi_43_pred = _2201;
                        frontier_phi_43_pred_1 = _2203;
                        frontier_phi_43_pred_2 = _2202;
                        frontier_phi_43_pred_3 = _2200;
                        frontier_phi_43_pred_4 = _2199;
                        frontier_phi_43_pred_5 = _2198;
                    }
                    else
                    {
                        float _2408;
                        float _2409;
                        float _2410;
                        float _2411;
                        float _2412;
                        float _2413;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2421 = _2198;
                        float _2422 = _2199;
                        float _2423 = _2200;
                        float _2424 = _2201;
                        float _2425 = _2202;
                        float _2426 = _2203;
                        uint _2427 = _2213;
                        uint _2428;
                        vec4 _2454;
                        float _2455;
                        vec4 _2470;
                        vec3 _2482;
                        vec4 _2498;
                        vec4 _2514;
                        float _2561;
                        bool _2562;
                        for (;;)
                        {
                            uint _2438 = ((_2204 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2427));
                            _2428 = (_2427 + 4294967295u) & _2427;
                            uint _2440 = _2438 * 40u;
                            _2454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 3u)).x));
                            _2455 = _2454.w;
                            uint _2457 = (_2438 * 40u) + 4u;
                            _2470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 3u)).x));
                            uint _2472 = (_2438 * 40u) + 8u;
                            _2482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x));
                            uint _2485 = (_2438 * 40u) + 16u;
                            _2498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 3u)).x));
                            uint _2501 = (_2438 * 40u) + 20u;
                            _2514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 3u)).x));
                            uint _2517 = (_2438 * 40u) + 24u;
                            vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 3u)).x));
                            uint _2536 = (_2438 * 40u) + 28u;
                            vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            _2561 = fma(_1793, _2549.z, fma(_1792, _2549.y, _2549.x * _1791)) + _2549.w;
                            _2562 = !((fma(_1793, _2530.z, fma(_1792, _2530.y, _2530.x * _1791)) + _2530.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            float frontier_phi_49_pred_3;
                            float frontier_phi_49_pred_4;
                            float frontier_phi_49_pred_5;
                            if (_2562)
                            {
                                float _2589 = _2454.x - _1791;
                                float _2590 = _2454.y - _1792;
                                float _2591 = _2454.z - _1793;
                                float _2592 = dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591));
                                float _2595 = inversesqrt(_2592);
                                float _2596 = _2595 * _2589;
                                float _2597 = _2595 * _2590;
                                float _2598 = _2595 * _2591;
                                float _2602 = 1.0 - (_2592 / (_2455 * _2455));
                                float _3547 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                                float _2603 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
                                float _2607 = sqrt(_2592) * _2470.w;
                                float _2609 = 1.39999997615814208984375 / (_2607 + 1.39999997615814208984375);
                                float _2610 = _2609 * _2609;
                                float _2613 = ((1.0 - _2610) * dot(vec3(_2596, _2597, _2598), vec3(_423, _426, _429))) + _2610;
                                float _2616 = _2607 * _2607;
                                float _2620 = (fma(_1793, _2498.z, fma(_1792, _2498.y, _2498.x * _1791)) + _2498.w) / _2561;
                                float _2621 = (fma(_1793, _2514.z, fma(_1792, _2514.y, _2514.x * _1791)) + _2514.w) / _2561;
                                float _2625 = 1.0 - dot(vec2(_2620, _2621), vec2(_2620, _2621));
                                float _3563 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                                float _2626 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
                                float _2627 = _2626 * (((isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))) * _2603) / ((_2616 * 0.699999988079071044921875) + 1.0));
                                float _2639 = exp2(log2(1.0 / ((_2616 * 3.5) + 5.0)) * 0.25);
                                float _2641 = 1.0 - sqrt(_303);
                                float _2648 = sqrt(1.0 - ((1.0 - (_2641 * _2641)) * (1.0 - (_2639 * _2639))));
                                float _2649 = _2648 * _2648;
                                float _2650 = _2649 * _2649;
                                float _2651 = _2596 - _2064;
                                float _2652 = _2597 - _2065;
                                float _2653 = _2598 - _2066;
                                float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
                                float _2661 = dot(vec3(_423, _426, _429), vec3((-0.0) - _2064, (-0.0) - _2065, (-0.0) - _2066));
                                float _3574 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                                float _2664 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
                                float _2665 = dot(vec3(_423, _426, _429), vec3(_2657 * _2651, _2657 * _2652, _2657 * _2653));
                                float _3585 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                                float _2668 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
                                float _2672 = ((_2668 * _2668) * (_2650 + (-1.0))) + 1.0;
                                float _2673 = _2609 * _2649;
                                float _2674 = _2673 * _2673;
                                float _2680 = ((1.0 - _2674) * dot(vec3(_423, _426, _429), vec3(_2596, _2597, _2598))) + _2674;
                                float _3596 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                                float _2681 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
                                float _2682 = 1.0 - _2649;
                                float _2692 = (0.5 / (((_2681 * ((_2664 * _2682) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2682) + _2649) * _2664))) * _2681;
                                float _3607 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                                float _2702 = (_2626 * _2603) * (((_2650 * 3.1415927410125732421875) * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) / ((_2672 * _2672) * ((_2616 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_49_pred = _2627 * _2470.x;
                                frontier_phi_49_pred_1 = _2702 * _2482.z;
                                frontier_phi_49_pred_2 = _2702 * _2482.y;
                                frontier_phi_49_pred_3 = _2702 * _2482.x;
                                frontier_phi_49_pred_4 = _2627 * _2470.z;
                                frontier_phi_49_pred_5 = _2627 * _2470.y;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                                frontier_phi_49_pred_3 = 0.0;
                                frontier_phi_49_pred_4 = 0.0;
                                frontier_phi_49_pred_5 = 0.0;
                            }
                            _2709 = frontier_phi_49_pred;
                            _2708 = frontier_phi_49_pred_1;
                            _2707 = frontier_phi_49_pred_2;
                            _2706 = frontier_phi_49_pred_3;
                            _2711 = frontier_phi_49_pred_4;
                            _2710 = frontier_phi_49_pred_5;
                            _2411 = _2709 + _2424;
                            _2412 = _2710 + _2425;
                            _2413 = _2711 + _2426;
                            _2408 = _2706 + _2421;
                            _2409 = _2707 + _2422;
                            _2410 = _2708 + _2423;
                            if (_2428 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2421 = _2408;
                                _2422 = _2409;
                                _2423 = _2410;
                                _2424 = _2411;
                                _2425 = _2412;
                                _2426 = _2413;
                                _2427 = _2428;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2411;
                        frontier_phi_43_pred_1 = _2413;
                        frontier_phi_43_pred_2 = _2412;
                        frontier_phi_43_pred_3 = _2410;
                        frontier_phi_43_pred_4 = _2409;
                        frontier_phi_43_pred_5 = _2408;
                    }
                    _2045 = frontier_phi_43_pred;
                    _2049 = frontier_phi_43_pred_1;
                    _2047 = frontier_phi_43_pred_2;
                    _2043 = frontier_phi_43_pred_3;
                    _2041 = frontier_phi_43_pred_4;
                    _2039 = frontier_phi_43_pred_5;
                    uint _2205 = _2204 + 1u;
                    if (_2205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2198 = _2039;
                        _2199 = _2041;
                        _2200 = _2043;
                        _2201 = _2045;
                        _2202 = _2047;
                        _2203 = _2049;
                        _2204 = _2205;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _2049;
                frontier_phi_24_25_ladder_1 = _2047;
                frontier_phi_24_25_ladder_2 = _2045;
                frontier_phi_24_25_ladder_3 = _2043;
                frontier_phi_24_25_ladder_4 = _2041;
                frontier_phi_24_25_ladder_5 = _2039;
            }
            else
            {
                frontier_phi_24_25_ladder = _1926;
                frontier_phi_24_25_ladder_1 = _1924;
                frontier_phi_24_25_ladder_2 = _1922;
                frontier_phi_24_25_ladder_3 = _1920;
                frontier_phi_24_25_ladder_4 = _1918;
                frontier_phi_24_25_ladder_5 = _1916;
            }
            _2038 = frontier_phi_24_25_ladder_5;
            _2040 = frontier_phi_24_25_ladder_4;
            _2042 = frontier_phi_24_25_ladder_3;
            _2044 = frontier_phi_24_25_ladder_2;
            _2046 = frontier_phi_24_25_ladder_1;
            _2048 = frontier_phi_24_25_ladder;
        }
        float _2053 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _1849 = (_2053 * _2044) + _1369;
        _1851 = (_2053 * _2046) + _1371;
        _1853 = (_2053 * _2048) + _1373;
        _1855 = ((_2038 * _468) * _2053) + _1656;
        _1857 = ((_2040 * _470) * _2053) + _1658;
        _1859 = ((_2042 * _471) * _2053) + _1660;
    }
    else
    {
        _1849 = _1369;
        _1851 = _1371;
        _1853 = _1373;
        _1855 = _1656;
        _1857 = _1658;
        _1859 = _1660;
    }
    float _3623 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3634 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3645 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1876 = ((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1849 + (((1.0 - _501) * _483) * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)))))) + ((_1855 + ((_521.x * _501) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1877 = ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1851 + (((1.0 - _502) * _483) * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)))))) + ((_1857 + ((_521.y * _502) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1878 = ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1853 + (((1.0 - _503) * _483) * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)))))) + ((_1859 + ((_521.z * _503) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _1879 = _442 + 6u;
    float _1887 = _402 / cbSceneParam._m0[86u].x;
    float _1888 = _403 / cbSceneParam._m0[86u].y;
    vec4 _1902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1887, _1888, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1904 = _1902.x;
    float _1905 = _1902.y;
    float _1906 = _1902.z;
    float _1907 = _1902.w;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _1941 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _1942 = _1941 / _323;
        float _1953 = _1942 * _374;
        float _1954 = _375 * _1942;
        float _1955 = (-0.0) - _1954;
        float _1956 = _1942 * _376;
        float _1958 = (cbSceneParam._m0[77u].w * _1955) / _1941;
        float _1959 = _1958 + cbSceneParam._m0[79u].w;
        float _1960 = cbSceneParam._m0[79u].w - _1954;
        float _1966 = sqrt(((_1953 * _1953) + (_1954 * _1954)) + (_1956 * _1956));
        float _1969 = (1.0 - (cbSceneParam._m0[77u].w / _1941)) * _1966;
        float _1975 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1977 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2155;
        if (abs((_1955 - _1958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2155 = ((((_1959 > 0.0) ? exp2(_1975 * _1959) : (2.0 - exp2(_1977 * _1959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1969;
        }
        else
        {
            float _2099 = 1.0 / cbSceneParam._m0[80u].x;
            float _2100 = isnan(_1960) ? _1959 : (isnan(_1959) ? _1960 : max(_1959, _1960));
            float _2101 = isnan(_1960) ? _1959 : (isnan(_1959) ? _1960 : min(_1959, _1960));
            float _2110 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : min(_2100, 0.0));
            float _2111 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : min(_2101, 0.0));
            _2155 = ((abs(_1966 / _1955) * cbSceneParam._m0[80u].y) * ((((_2110 - _2111) * 2.0) - ((exp2(_1975 * (isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)))) - exp2(_1975 * (isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))))) * _2099)) - ((exp2(_1977 * _2110) - exp2(_1977 * _2111)) * _2099))) + (_1969 * cbSceneParam._m0[80u].z);
        }
        vec4 _2157 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1887, _1888, 1.0), 0.0);
        float _2166 = exp2((_2155 * (-1.44269502162933349609375)) * (1.0 - _2157.w));
        float _2167 = log2(_2166);
        float _2183 = log2(_1907);
        _1979 = (exp2(_2183 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].x)) * _2157.x) / cbSceneParam._m0[78u].x)) + _1904;
        _1981 = (exp2(_2183 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].y)) * _2157.y) / cbSceneParam._m0[78u].y)) + _1905;
        _1983 = (exp2(_2183 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].z)) * _2157.z) / cbSceneParam._m0[78u].z)) + _1906;
        _1985 = _2166 * _1907;
    }
    else
    {
        _1979 = _1904;
        _1981 = _1905;
        _1983 = _1906;
        _1985 = _1907;
    }
    bool _2193;
    vec4 _1994;
    vec4 _2017;
    float _2019;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    bool _2037;
    for (;;)
    {
        _1994 = cbMatDynParam._m0[0u];
        float _1996 = roundEven(_1994.y);
        bool _1997 = _1996 == 3.0;
        float _1999 = log2(_1985);
        float _2006 = exp2(_1999 * cbSceneParam._m0[78u].x) * _1876;
        float _2007 = exp2(_1999 * cbSceneParam._m0[78u].y) * _1877;
        float _2008 = exp2(_1999 * cbSceneParam._m0[78u].z) * _1878;
        float _2015 = _390 + (-0.5);
        _2017 = cbMtdParam._m0[1u];
        _2019 = _2017.y * _2015;
        float _2022 = (_1996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2023 = _2022 * (_1997 ? _2006 : (_2006 + (cbSceneParam._m0[72u].w * _1979)));
        _2024 = _2022 * (_1997 ? _2007 : (_2007 + (cbSceneParam._m0[72u].w * _1981)));
        _2025 = _2022 * (_1997 ? _2008 : (_2008 + (cbSceneParam._m0[72u].w * _1983)));
        _2026 = _2015 * 0.999000012874603271484375;
        _2037 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2037)
        {
            if ((cbInstanceData._m0[_442 + 7u].x + _2026) < 0.5)
            {
                _2193 = true;
                break;
            }
        }
        uint _2134 = _444 + uint(_1994.w);
        if ((cbInstanceData._m0[_2134].w < 1.0) && ((cbInstanceData._m0[_2134].w + _2026) < 0.5))
        {
            _2193 = true;
            break;
        }
        if ((_2019 + 1.0) < _2017.x)
        {
            _2193 = true;
            break;
        }
        _2193 = false;
        break;
    }
    float _2399;
    if (_2193)
    {
        discard_state = true;
        _2399 = 0.0;
    }
    else
    {
        _2399 = cbInstanceData._m0[_1879].w;
    }
    SV_Target.x = _2023;
    SV_Target.y = _2024;
    SV_Target.z = _2025;
    SV_Target.w = _2399;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1879].w;
    discard_exit();
}


