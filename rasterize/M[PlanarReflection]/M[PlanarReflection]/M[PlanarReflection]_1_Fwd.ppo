#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _189 = _188 * NORMAL.x;
    float _190 = _188 * NORMAL.y;
    float _191 = _188 * NORMAL.z;
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203;
    float _204;
    float _205;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _203 = (-0.0) - _189;
        _204 = (-0.0) - _190;
        _205 = (-0.0) - _191;
    }
    else
    {
        _203 = _189;
        _204 = _190;
        _205 = _191;
    }
    vec4 _225 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.x * cbMtdParam._m0[9u].x;
    float _232 = _225.y * cbMtdParam._m0[9u].y;
    float _233 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _245.z;
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _2641 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0))));
    float _269 = fma(_262, _203, fma(_255, _195 * TANGENT.x, (_181 * _174) * _253));
    float _272 = fma(_262, _204, fma(_255, _195 * TANGENT.y, (_181 * _175) * _253));
    float _275 = fma(_262, _205, fma(_255, _195 * TANGENT.z, (_181 * _176) * _253));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _2652 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _283 = isnan(1.0) ? _2652 : (isnan(_2652) ? 1.0 : min(_2652, 1.0));
    float _2663 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _2674 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _2685 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    float _368 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _369 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _390 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _393 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _396 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _409 = uint(roundEven(NORMAL.w)) * 13u;
    uint _412 = (_409 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _418 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0)))) * cbInstanceData._m0[_412].x;
    float _419 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0)))) * cbInstanceData._m0[_412].y;
    float _420 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0)))) * cbInstanceData._m0[_412].z;
    float _2696 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0));
    float _2707 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _2707 : (isnan(_2707) ? 1.0 : min(_2707, 1.0));
    float _2718 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _2718 : (isnan(_2718) ? 1.0 : min(_2718, 1.0));
    vec4 _432 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _368, cbSceneParam._m0[86u].y * _369));
    float _435 = _432.x * TEXCOORD.z;
    float _439 = abs(dot(vec3(_360, _361, _362), vec3(_280, _281, _282)));
    float _2729 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _446 = exp2(log2(1.0 - (isnan(1.0) ? _2729 : (isnan(_2729) ? 1.0 : min(_2729, 1.0)))) * 5.0) * 0.959999978542327880859375;
    float _448 = _446 + 0.039999999105930328369140625;
    vec4 _467 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_302 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_280, _281, _282), vec3(1.0, 0.0, 0.0))) + (_368 / cbSceneParam._m0[86u].x), 1.0 - (_369 / cbSceneParam._m0[86u].y)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _538 = fma(_511, cbModelParam._m0[26u].z, fma(_507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503));
        float _542 = fma(_511, cbModelParam._m0[27u].z, fma(_507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503));
        float _546 = fma(_511, cbModelParam._m0[28u].z, fma(_507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503));
        float _571 = _503 + _280;
        float _572 = _507 + _281;
        float _573 = _511 + _282;
        float _583 = fma(_573, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571)) - _538;
        float _584 = fma(_573, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571)) - _542;
        float _585 = fma(_573, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571)) - _546;
        float _589 = inversesqrt(dot(vec3(_583, _584, _585), vec3(_583, _584, _585)));
        float _602 = ((_589 * _583) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_538 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_589 * _584) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_542 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _604 = ((_589 * _585) / cbModelParam._m0[34u].z) + ((((((_546 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        float _641 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _648 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _655 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_628.x + (-0.5));
        float _664 = _662 * (_628.y + (-0.5));
        float _665 = _662 * (_628.z + (-0.5));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _670 = ((_607.x + (-0.5)) * 0.5) * _641;
        float _672 = ((_614.x + (-0.5)) * 0.5) * _648;
        float _674 = ((_621.x + (-0.5)) * 0.5) * _655;
        float _675 = dot(vec3(_670, _672, _674), vec3(_670, _672, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _689 = (dot(vec3(_280, _281, _282), vec3(_680 * _670, _680 * _672, _680 * _674)) + 1.0) * 0.5;
        float _2755 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _699 = sqrt(((_672 * _672) + (_670 * _670)) + (_674 * _674)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _2766 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _2766 : (isnan(_2766) ? 1.0 : min(_2766, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _2777 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _2777 : (isnan(_2777) ? 1.0 : min(_2777, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _2755 : (isnan(_2755) ? 1.0 : min(_2755, 1.0))) * (_701 + 1.0))) + _706) * _666;
        float _717 = ((_607.y + (-0.5)) * 0.5) * _641;
        float _719 = ((_614.y + (-0.5)) * 0.5) * _648;
        float _721 = ((_621.y + (-0.5)) * 0.5) * _655;
        float _722 = dot(vec3(_717, _719, _721), vec3(_717, _719, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_280, _281, _282), vec3(_727 * _717, _727 * _719, _727 * _721)) + 1.0) * 0.5;
        float _2788 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_719 * _719) + (_717 * _717)) + (_721 * _721)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _2799 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _2810 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _2788 : (isnan(_2788) ? 1.0 : min(_2788, 1.0))) * (_746 + 1.0))) + _751) * _667;
        float _762 = ((_607.z + (-0.5)) * 0.5) * _641;
        float _764 = ((_614.z + (-0.5)) * 0.5) * _648;
        float _766 = ((_621.z + (-0.5)) * 0.5) * _655;
        float _767 = dot(vec3(_762, _764, _766), vec3(_762, _764, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_280, _281, _282), vec3(_772 * _762, _772 * _764, _772 * _766)) + 1.0) * 0.5;
        float _2821 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_764 * _764) + (_762 * _762)) + (_766 * _766)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _2832 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _2843 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _2821 : (isnan(_2821) ? 1.0 : min(_2821, 1.0))) * (_791 + 1.0))) + _796) * _668;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
    }
    else
    {
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_511, cbModelParam._m0[30u].z, fma(_507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _503));
        float _845 = fma(_511, cbModelParam._m0[31u].z, fma(_507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _503));
        float _849 = fma(_511, cbModelParam._m0[32u].z, fma(_507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _503));
        float _872 = _503 + _280;
        float _873 = _507 + _281;
        float _874 = _511 + _282;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _947 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _954 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_928.x + (-0.5));
        float _963 = _961 * (_928.y + (-0.5));
        float _964 = _961 * (_928.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _969 = ((_907.x + (-0.5)) * 0.5) * _940;
        float _971 = ((_914.x + (-0.5)) * 0.5) * _947;
        float _973 = ((_921.x + (-0.5)) * 0.5) * _954;
        float _974 = dot(vec3(_969, _971, _973), vec3(_969, _971, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_280, _281, _282), vec3(_979 * _969, _979 * _971, _979 * _973)) + 1.0) * 0.5;
        float _2884 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_971 * _971) + (_969 * _969)) + (_973 * _973)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _2895 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _2906 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0))) * (_998 + 1.0))) + _1003) * _965;
        float _1014 = ((_907.y + (-0.5)) * 0.5) * _940;
        float _1016 = ((_914.y + (-0.5)) * 0.5) * _947;
        float _1018 = ((_921.y + (-0.5)) * 0.5) * _954;
        float _1019 = dot(vec3(_1014, _1016, _1018), vec3(_1014, _1016, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_280, _281, _282), vec3(_1024 * _1014, _1024 * _1016, _1024 * _1018)) + 1.0) * 0.5;
        float _2917 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1016 * _1016) + (_1014 * _1014)) + (_1018 * _1018)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _2928 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _2939 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0))) * (_1043 + 1.0))) + _1048) * _966;
        float _1059 = ((_907.z + (-0.5)) * 0.5) * _940;
        float _1061 = ((_914.z + (-0.5)) * 0.5) * _947;
        float _1063 = ((_921.z + (-0.5)) * 0.5) * _954;
        float _1064 = dot(vec3(_1059, _1061, _1063), vec3(_1059, _1061, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_280, _281, _282), vec3(_1069 * _1059, _1069 * _1061, _1069 * _1063)) + 1.0) * 0.5;
        float _2950 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1061 * _1061) + (_1059 * _1059)) + (_1063 * _1063)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _2961 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _2972 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0))) * (_1088 + 1.0))) + _1093) * _967;
        _1110 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1112 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1122 = (cbModelParam._m0[1u].x * (_1110 - _813)) + _813;
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _814)) + _814;
    float _1124 = (cbModelParam._m0[1u].x * (_1112 - _815)) + _815;
    float _1145 = fma(_1124, cbSceneParam._m0[89u].z, fma(_1123, cbSceneParam._m0[89u].y, _1122 * cbSceneParam._m0[89u].x));
    float _1148 = fma(_1124, cbSceneParam._m0[90u].z, fma(_1123, cbSceneParam._m0[90u].y, _1122 * cbSceneParam._m0[90u].x));
    float _1151 = fma(_1124, cbSceneParam._m0[91u].z, fma(_1123, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1122));
    float _1156 = (0.959999978542327880859375 - _446) * _435;
    uvec4 _1163 = floatBitsToUint(cbInstanceData._m0[_409 + 5u]);
    uint _1165 = _1163.x * 14u;
    uint _1167 = _1165 + 13u;
    float _1174 = _435 + (-1.0);
    float _1179 = (cbLight._m0[_1167].x * _1174) + 1.0;
    float _1180 = (cbLight._m0[_1167].y * _1174) + 1.0;
    float _1181 = (cbLight._m0[_1167].z * _1174) + 1.0;
    float _1182 = (cbLight._m0[_1167].w * _1174) + 1.0;
    uint _1183 = _1165 + 5u;
    float _1189 = isnan(1.0) ? _1180 : (isnan(_1180) ? 1.0 : min(_1180, 1.0));
    uint _1193 = _1165 + 4u;
    float _1200 = isnan(1.0) ? _1179 : (isnan(_1179) ? 1.0 : min(_1179, 1.0));
    uint _1204 = _1165 | 1u;
    float _1215 = dot(vec3(cbLight._m0[_1165].xyz), vec3(_280, _281, _282));
    float _1218 = dot(vec3(cbLight._m0[_1204].xyz), vec3(_280, _281, _282));
    float _3023 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _3034 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1223 = (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * 0.3183098733425140380859375;
    float _1225 = (isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0))) * 0.3183098733425140380859375;
    float _1232 = ((cbLight._m0[_1183].x * _1189) * _1225) + ((cbLight._m0[_1193].x * _1200) * _1223);
    float _1233 = ((_1189 * cbLight._m0[_1183].y) * _1225) + ((_1200 * cbLight._m0[_1193].y) * _1223);
    float _1234 = ((_1189 * cbLight._m0[_1183].z) * _1225) + ((_1200 * cbLight._m0[_1193].z) * _1223);
    uvec4 _1239 = floatBitsToUint(cbLight._m0[_1165 + 12u]);
    bool _1241 = _1239.x == 0u;
    float _1242;
    float _1244;
    float _1246;
    if (_1241)
    {
        _1242 = _1232;
        _1244 = _1233;
        _1246 = _1234;
    }
    else
    {
        uint _1250 = _1165 + 6u;
        float _1266 = (dot(vec3(cbLight._m0[_1165 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1267 = _1266 * _1266;
        float _3045 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
        float _1269 = isnan(1.0) ? _1181 : (isnan(_1181) ? 1.0 : min(_1181, 1.0));
        _1242 = (((cbLight._m0[_1250].x * 0.3183098733425140380859375) * _1268) * _1269) + _1232;
        _1244 = (((cbLight._m0[_1250].y * 0.3183098733425140380859375) * _1268) * _1269) + _1233;
        _1246 = (((cbLight._m0[_1250].z * 0.3183098733425140380859375) * _1268) * _1269) + _1234;
    }
    bool _1249 = _1239.y == 0u;
    float _1279;
    float _1281;
    float _1283;
    if (_1249)
    {
        _1279 = _1242;
        _1281 = _1244;
        _1283 = _1246;
    }
    else
    {
        uint _1440 = _1165 + 7u;
        float _1456 = (dot(vec3(cbLight._m0[_1165 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1457 = _1456 * _1456;
        float _3061 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _1459 = isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0));
        _1279 = (((cbLight._m0[_1440].x * 0.3183098733425140380859375) * _1458) * _1459) + _1242;
        _1281 = (((cbLight._m0[_1440].y * 0.3183098733425140380859375) * _1458) * _1459) + _1244;
        _1283 = (((cbLight._m0[_1440].z * 0.3183098733425140380859375) * _1458) * _1459) + _1246;
    }
    uint _1286 = _1165 + 8u;
    float _1299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1165].w)) * _283) * 0.949999988079071044921875);
    float _1300 = _1299 * _1299;
    float _1301 = cbLight._m0[_1165].x + _360;
    float _1302 = cbLight._m0[_1165].y + _361;
    float _1303 = cbLight._m0[_1165].z + _362;
    float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
    float _1308 = _1307 * _1301;
    float _1309 = _1307 * _1302;
    float _1310 = _1307 * _1303;
    float _1311 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1165].xyz));
    float _3077 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1314 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _1315 = dot(vec3(_280, _281, _282), vec3(_360, _361, _362));
    float _3088 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _1319 = dot(vec3(_280, _281, _282), vec3(_1308, _1309, _1310));
    float _3099 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1322 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
    float _1323 = dot(vec3(cbLight._m0[_1165].xyz), vec3(_1308, _1309, _1310));
    float _3110 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _1327 = _1300 * _1300;
    float _1331 = ((_1322 * _1322) * (_1327 + (-1.0))) + 1.0;
    float _1341 = (exp2(log2(1.0 - (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1342 = 1.0 - _1300;
    float _1353 = (0.5 / (((_1318 * ((_1314 * _1342) + _1300)) + 9.9999999392252902907785028219223e-09) + (((_1318 * _1342) + _1300) * _1314))) * _1314;
    float _3121 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1355 = (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_1327 / ((_1331 * _1331) * 3.141590118408203125));
    uint _1366 = _1165 + 9u;
    float _1377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1204].w)) * _283) * 0.949999988079071044921875);
    float _1378 = _1377 * _1377;
    float _1379 = cbLight._m0[_1204].x + _360;
    float _1380 = cbLight._m0[_1204].y + _361;
    float _1381 = cbLight._m0[_1204].z + _362;
    float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
    float _1386 = _1385 * _1379;
    float _1387 = _1385 * _1380;
    float _1388 = _1385 * _1381;
    float _1389 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1204].xyz));
    float _3132 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1392 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
    float _1393 = dot(vec3(_280, _281, _282), vec3(_1386, _1387, _1388));
    float _3143 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1396 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
    float _1397 = dot(vec3(cbLight._m0[_1204].xyz), vec3(_1386, _1387, _1388));
    float _3154 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1401 = _1378 * _1378;
    float _1405 = ((_1396 * _1396) * (_1401 + (-1.0))) + 1.0;
    float _1414 = (exp2(log2(1.0 - (isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1415 = 1.0 - _1378;
    float _1425 = (0.5 / (((_1318 * ((_1392 * _1415) + _1378)) + 9.9999999392252902907785028219223e-09) + (((_1318 * _1415) + _1378) * _1392))) * _1392;
    float _3165 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
    float _1427 = (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_1401 / ((_1405 * _1405) * 3.141590118408203125));
    float _1437 = (((_1414 * cbLight._m0[_1366].x) * _1427) * _1189) + (((_1341 * cbLight._m0[_1286].x) * _1355) * _1200);
    float _1438 = (((_1414 * cbLight._m0[_1366].y) * _1427) * _1189) + (((_1341 * cbLight._m0[_1286].y) * _1355) * _1200);
    float _1439 = (((_1414 * cbLight._m0[_1366].z) * _1427) * _1189) + (((_1341 * cbLight._m0[_1286].z) * _1355) * _1200);
    float _1469;
    float _1471;
    float _1473;
    if (_1241)
    {
        _1469 = _1437;
        _1471 = _1438;
        _1473 = _1439;
    }
    else
    {
        uint _1475 = _1165 + 2u;
        uint _1479 = _1165 + 10u;
        float _1493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1475].w)) * _283) * 0.949999988079071044921875);
        float _1494 = _1493 * _1493;
        float _1495 = cbLight._m0[_1475].x + _360;
        float _1496 = cbLight._m0[_1475].y + _361;
        float _1497 = cbLight._m0[_1475].z + _362;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1502 = _1501 * _1495;
        float _1503 = _1501 * _1496;
        float _1504 = _1501 * _1497;
        float _1505 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1475].xyz));
        float _3176 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1508 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _1509 = dot(vec3(_280, _281, _282), vec3(_1502, _1503, _1504));
        float _3187 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1512 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _1513 = dot(vec3(cbLight._m0[_1475].xyz), vec3(_1502, _1503, _1504));
        float _3198 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1494 * _1494;
        float _1521 = ((_1512 * _1512) * (_1517 + (-1.0))) + 1.0;
        float _1530 = (exp2(log2(1.0 - (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1531 = 1.0 - _1494;
        float _1541 = (0.5 / (((_1318 * ((_1508 * _1531) + _1494)) + 9.9999999392252902907785028219223e-09) + (((_1318 * _1531) + _1494) * _1508))) * _1508;
        float _3209 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1543 = (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_1517 / ((_1521 * _1521) * 3.141590118408203125));
        float _1544 = isnan(1.0) ? _1181 : (isnan(_1181) ? 1.0 : min(_1181, 1.0));
        _1469 = (((_1530 * cbLight._m0[_1479].x) * _1543) * _1544) + _1437;
        _1471 = (((_1530 * cbLight._m0[_1479].y) * _1543) * _1544) + _1438;
        _1473 = (((_1530 * cbLight._m0[_1479].z) * _1543) * _1544) + _1439;
    }
    float _1554;
    float _1556;
    float _1558;
    if (_1249)
    {
        _1554 = _1469;
        _1556 = _1471;
        _1558 = _1473;
    }
    else
    {
        uint _1565 = _1165 + 3u;
        uint _1569 = _1165 + 11u;
        float _1583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _283) * 0.949999988079071044921875);
        float _1584 = _1583 * _1583;
        float _1585 = cbLight._m0[_1565].x + _360;
        float _1586 = cbLight._m0[_1565].y + _361;
        float _1587 = cbLight._m0[_1565].z + _362;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1592 = _1591 * _1585;
        float _1593 = _1591 * _1586;
        float _1594 = _1591 * _1587;
        float _1595 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1565].xyz));
        float _3225 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1598 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _1599 = dot(vec3(_280, _281, _282), vec3(_1592, _1593, _1594));
        float _3236 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1602 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _1603 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1592, _1593, _1594));
        float _3247 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1584 * _1584;
        float _1611 = ((_1602 * _1602) * (_1607 + (-1.0))) + 1.0;
        float _1620 = (exp2(log2(1.0 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1621 = 1.0 - _1584;
        float _1631 = (0.5 / (((_1318 * ((_1598 * _1621) + _1584)) + 9.9999999392252902907785028219223e-09) + (((_1318 * _1621) + _1584) * _1598))) * _1598;
        float _3258 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1633 = (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_1607 / ((_1611 * _1611) * 3.141590118408203125));
        float _1634 = isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0));
        _1554 = (((_1620 * cbLight._m0[_1569].x) * _1633) * _1634) + _1469;
        _1556 = (((_1620 * cbLight._m0[_1569].y) * _1633) * _1634) + _1471;
        _1558 = (((_1620 * cbLight._m0[_1569].z) * _1633) * _1634) + _1473;
    }
    float _1743;
    float _1745;
    float _1747;
    float _1749;
    float _1751;
    float _1753;
    if (_1163.y == 0u)
    {
        float _1684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1684;
        float _1686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1684;
        float _1687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1684;
        uvec4 _1699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1700 = _1699.x;
        uint _1711 = uint((float(_1699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _369) / _1700))) + floor(float(uint(cbSceneParam._m0[85u].x * _368) / _1700)));
        float _1721 = (log2(_1687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1722 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        uint _1725 = uint(isnan(14.0) ? _1722 : (isnan(_1722) ? 14.0 : min(_1722, 14.0)));
        uvec4 _1730 = texelFetch(g_lightClusterGridBuffer, int(((_1725 << 2u) + (_1711 << 6u)) >> 2u));
        uint _1731 = _1730.x;
        uint _1732 = _1699.z;
        float _1810;
        float _1812;
        float _1814;
        float _1816;
        float _1818;
        float _1820;
        if (((((1u << ((_1732 >> 4u) & 15u)) + 4294967295u) & _1731) == 0u) || ((_1732 & 240u) == 0u))
        {
            _1810 = 0.0;
            _1812 = 0.0;
            _1814 = 0.0;
            _1816 = 0.0;
            _1818 = 0.0;
            _1820 = 0.0;
        }
        else
        {
            float _1811;
            float _1813;
            float _1815;
            float _1817;
            float _1819;
            float _1821;
            float _1955 = 0.0;
            float _1956 = 0.0;
            float _1957 = 0.0;
            float _1958 = 0.0;
            float _1959 = 0.0;
            float _1960 = 0.0;
            uint _1961 = 0u;
            uint _1970;
            bool _1971;
            for (;;)
            {
                _1970 = texelFetch(g_lightClassification, int((((_1725 << 5u) + (_1711 << 9u)) + (_1961 << 2u)) >> 2u)).x;
                _1971 = _1970 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                float frontier_phi_27_pred_3;
                float frontier_phi_27_pred_4;
                float frontier_phi_27_pred_5;
                if (_1971)
                {
                    frontier_phi_27_pred = _1955;
                    frontier_phi_27_pred_1 = _1956;
                    frontier_phi_27_pred_2 = _1960;
                    frontier_phi_27_pred_3 = _1959;
                    frontier_phi_27_pred_4 = _1958;
                    frontier_phi_27_pred_5 = _1957;
                }
                else
                {
                    float _2079;
                    float _2080;
                    float _2081;
                    float _2082;
                    float _2083;
                    float _2084;
                    uint _2085;
                    _2079 = _1955;
                    _2080 = _1956;
                    _2081 = _1957;
                    _2082 = _1958;
                    _2083 = _1959;
                    _2084 = _1960;
                    _2085 = _1970;
                    float _2011;
                    float _2012;
                    float _2013;
                    float _2014;
                    float _2015;
                    float _2016;
                    for (;;)
                    {
                        uint _2089 = uint(findLSB(_2085)) + (_1961 << 5u);
                        uint _2086 = (_2085 + 4294967295u) & _2085;
                        uint _2091 = _2089 * 48u;
                        vec4 _2105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2091)).x, texelFetch(g_PointLightRenderingBuffer, int(_2091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2091 + 3u)).x));
                        uint _2111 = (_2089 * 48u) + 4u;
                        vec4 _2124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2111)).x, texelFetch(g_PointLightRenderingBuffer, int(_2111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2111 + 3u)).x));
                        uint _2130 = (_2089 * 48u) + 8u;
                        vec3 _2141 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2130)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 2u)).x));
                        float _2145 = _2105.x - _1685;
                        float _2146 = _2105.y - _1686;
                        float _2147 = _2105.z - _1687;
                        float _2148 = dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147));
                        float _2151 = inversesqrt(_2148);
                        float _2152 = _2151 * _2145;
                        float _2153 = _2151 * _2146;
                        float _2154 = _2151 * _2147;
                        float _2155 = dot(vec3(_390, _393, _396), vec3(_2152, _2153, _2154));
                        float _2160 = 1.0 - (_2148 * _2105.w);
                        float _3284 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
                        float _2161 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
                        float _2162 = sqrt(_2148) * _2124.w;
                        float _2165 = 1.39999997615814208984375 / (_2162 + 1.39999997615814208984375);
                        float _2166 = _2165 * _2165;
                        float _2169 = ((1.0 - _2166) * _2155) + _2166;
                        float _2172 = _2162 * _2162;
                        float _2176 = ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _2161) / ((_2172 * 0.699999988079071044921875) + 1.0);
                        float _2180 = (-0.0) - _1685;
                        float _2181 = (-0.0) - _1686;
                        float _2182 = (-0.0) - _1687;
                        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
                        float _2187 = _2186 * _2180;
                        float _2188 = _2186 * _2181;
                        float _2189 = _2186 * _2182;
                        float _2197 = exp2(log2(1.0 / ((_2172 * 3.5) + 5.0)) * 0.25);
                        float _2199 = 1.0 - sqrt(_283);
                        float _2206 = sqrt(1.0 - ((1.0 - (_2199 * _2199)) * (1.0 - (_2197 * _2197))));
                        float _2207 = _2206 * _2206;
                        float _2208 = _2207 * _2207;
                        float _2209 = _2187 + _2152;
                        float _2210 = _2188 + _2153;
                        float _2211 = _2189 + _2154;
                        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
                        float _2219 = dot(vec3(_390, _393, _396), vec3(_2187, _2188, _2189));
                        float _3300 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
                        float _2222 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
                        float _2223 = dot(vec3(_390, _393, _396), vec3(_2215 * _2209, _2215 * _2210, _2215 * _2211));
                        float _3311 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
                        float _2226 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
                        float _2230 = ((_2226 * _2226) * (_2208 + (-1.0))) + 1.0;
                        float _2231 = _2165 * _2207;
                        float _2232 = _2231 * _2231;
                        float _2235 = ((1.0 - _2232) * _2155) + _2232;
                        float _3322 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
                        float _2236 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
                        float _2237 = 1.0 - _2207;
                        float _2247 = (0.5 / (((_2236 * ((_2222 * _2237) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2237) + _2207) * _2222))) * _2236;
                        float _3333 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
                        float _2258 = (((_2208 * 3.1415927410125732421875) * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) / ((_2230 * _2230) * ((_2172 * 2.1991131305694580078125) + 3.141590118408203125))) * _2161;
                        _2014 = (_2176 * _2124.x) + _2082;
                        _2015 = (_2176 * _2124.y) + _2083;
                        _2016 = (_2176 * _2124.z) + _2084;
                        _2011 = (_2258 * _2141.x) + _2079;
                        _2012 = (_2258 * _2141.y) + _2080;
                        _2013 = (_2258 * _2141.z) + _2081;
                        if (_2086 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2079 = _2011;
                            _2080 = _2012;
                            _2081 = _2013;
                            _2082 = _2014;
                            _2083 = _2015;
                            _2084 = _2016;
                            _2085 = _2086;
                        }
                    }
                    frontier_phi_27_pred = _2011;
                    frontier_phi_27_pred_1 = _2012;
                    frontier_phi_27_pred_2 = _2016;
                    frontier_phi_27_pred_3 = _2015;
                    frontier_phi_27_pred_4 = _2014;
                    frontier_phi_27_pred_5 = _2013;
                }
                _1811 = frontier_phi_27_pred;
                _1813 = frontier_phi_27_pred_1;
                _1821 = frontier_phi_27_pred_2;
                _1819 = frontier_phi_27_pred_3;
                _1817 = frontier_phi_27_pred_4;
                _1815 = frontier_phi_27_pred_5;
                uint _1962 = _1961 + 1u;
                if (_1962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1955 = _1811;
                    _1956 = _1813;
                    _1957 = _1815;
                    _1958 = _1817;
                    _1959 = _1819;
                    _1960 = _1821;
                    _1961 = _1962;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1810 = _1811;
            _1812 = _1813;
            _1814 = _1815;
            _1816 = _1817;
            _1818 = _1819;
            _1820 = _1821;
        }
        uvec4 _1824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1825 = _1824.z;
        uint _1827 = (_1825 >> 8u) & 15u;
        float _1923;
        float _1925;
        float _1927;
        float _1929;
        float _1931;
        float _1933;
        if (((4294967295u << _1827) & _1731) == 0u)
        {
            _1923 = _1810;
            _1925 = _1812;
            _1927 = _1814;
            _1929 = _1816;
            _1931 = _1818;
            _1933 = _1820;
        }
        else
        {
            float _1948 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
            float _1949 = _1948 * _1685;
            float _1950 = _1948 * _1686;
            float _1951 = _1948 * _1687;
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            float frontier_phi_21_22_ladder_3;
            float frontier_phi_21_22_ladder_4;
            float frontier_phi_21_22_ladder_5;
            if (_1827 < ((_1825 >> 12u) & 15u))
            {
                float _1924;
                float _1926;
                float _1928;
                float _1930;
                float _1932;
                float _1934;
                float _2062 = _1810;
                float _2063 = _1812;
                float _2064 = _1814;
                float _2065 = _1816;
                float _2066 = _1818;
                float _2067 = _1820;
                uint _2068 = _1827;
                uint _2077;
                bool _2078;
                for (;;)
                {
                    _2077 = texelFetch(g_lightClassification, int((((_1725 << 5u) + (_1711 << 9u)) + (_2068 << 2u)) >> 2u)).x;
                    _2078 = _2077 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    float frontier_phi_33_pred_3;
                    float frontier_phi_33_pred_4;
                    float frontier_phi_33_pred_5;
                    if (_2078)
                    {
                        frontier_phi_33_pred = _2067;
                        frontier_phi_33_pred_1 = _2066;
                        frontier_phi_33_pred_2 = _2065;
                        frontier_phi_33_pred_3 = _2064;
                        frontier_phi_33_pred_4 = _2063;
                        frontier_phi_33_pred_5 = _2062;
                    }
                    else
                    {
                        float _2263;
                        float _2264;
                        float _2265;
                        float _2266;
                        float _2267;
                        float _2268;
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2566;
                        float _2276 = _2062;
                        float _2277 = _2063;
                        float _2278 = _2064;
                        float _2279 = _2065;
                        float _2280 = _2066;
                        float _2281 = _2067;
                        uint _2282 = _2077;
                        uint _2283;
                        vec4 _2309;
                        float _2310;
                        vec4 _2325;
                        vec3 _2337;
                        vec4 _2353;
                        vec4 _2369;
                        float _2416;
                        bool _2417;
                        for (;;)
                        {
                            uint _2293 = ((_2068 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2282));
                            _2283 = (_2282 + 4294967295u) & _2282;
                            uint _2295 = _2293 * 40u;
                            _2309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 3u)).x));
                            _2310 = _2309.w;
                            uint _2312 = (_2293 * 40u) + 4u;
                            _2325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 3u)).x));
                            uint _2327 = (_2293 * 40u) + 8u;
                            _2337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2327 + 2u)).x));
                            uint _2340 = (_2293 * 40u) + 16u;
                            _2353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2340 + 3u)).x));
                            uint _2356 = (_2293 * 40u) + 20u;
                            _2369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 3u)).x));
                            uint _2372 = (_2293 * 40u) + 24u;
                            vec4 _2385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 3u)).x));
                            uint _2391 = (_2293 * 40u) + 28u;
                            vec4 _2404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2391 + 3u)).x));
                            _2416 = fma(_1687, _2404.z, fma(_1686, _2404.y, _2404.x * _1685)) + _2404.w;
                            _2417 = !((fma(_1687, _2385.z, fma(_1686, _2385.y, _2385.x * _1685)) + _2385.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            float frontier_phi_39_pred_3;
                            float frontier_phi_39_pred_4;
                            float frontier_phi_39_pred_5;
                            if (_2417)
                            {
                                float _2444 = _2309.x - _1685;
                                float _2445 = _2309.y - _1686;
                                float _2446 = _2309.z - _1687;
                                float _2447 = dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446));
                                float _2450 = inversesqrt(_2447);
                                float _2451 = _2450 * _2444;
                                float _2452 = _2450 * _2445;
                                float _2453 = _2450 * _2446;
                                float _2457 = 1.0 - (_2447 / (_2310 * _2310));
                                float _3344 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                                float _2458 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
                                float _2462 = sqrt(_2447) * _2325.w;
                                float _2464 = 1.39999997615814208984375 / (_2462 + 1.39999997615814208984375);
                                float _2465 = _2464 * _2464;
                                float _2468 = ((1.0 - _2465) * dot(vec3(_2451, _2452, _2453), vec3(_390, _393, _396))) + _2465;
                                float _2471 = _2462 * _2462;
                                float _2475 = (fma(_1687, _2353.z, fma(_1686, _2353.y, _2353.x * _1685)) + _2353.w) / _2416;
                                float _2476 = (fma(_1687, _2369.z, fma(_1686, _2369.y, _2369.x * _1685)) + _2369.w) / _2416;
                                float _2480 = 1.0 - dot(vec2(_2475, _2476), vec2(_2475, _2476));
                                float _3360 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                                float _2481 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
                                float _2482 = _2481 * (((isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0))) * _2458) / ((_2471 * 0.699999988079071044921875) + 1.0));
                                float _2494 = exp2(log2(1.0 / ((_2471 * 3.5) + 5.0)) * 0.25);
                                float _2496 = 1.0 - sqrt(_283);
                                float _2503 = sqrt(1.0 - ((1.0 - (_2496 * _2496)) * (1.0 - (_2494 * _2494))));
                                float _2504 = _2503 * _2503;
                                float _2505 = _2504 * _2504;
                                float _2506 = _2451 - _1949;
                                float _2507 = _2452 - _1950;
                                float _2508 = _2453 - _1951;
                                float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
                                float _2516 = dot(vec3(_390, _393, _396), vec3((-0.0) - _1949, (-0.0) - _1950, (-0.0) - _1951));
                                float _3371 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
                                float _2519 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
                                float _2520 = dot(vec3(_390, _393, _396), vec3(_2512 * _2506, _2512 * _2507, _2512 * _2508));
                                float _3382 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
                                float _2523 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
                                float _2527 = ((_2523 * _2523) * (_2505 + (-1.0))) + 1.0;
                                float _2528 = _2464 * _2504;
                                float _2529 = _2528 * _2528;
                                float _2535 = ((1.0 - _2529) * dot(vec3(_390, _393, _396), vec3(_2451, _2452, _2453))) + _2529;
                                float _3393 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                                float _2536 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
                                float _2537 = 1.0 - _2504;
                                float _2547 = (0.5 / (((_2536 * ((_2519 * _2537) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2536 * _2537) + _2504) * _2519))) * _2536;
                                float _3404 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                                float _2557 = (_2481 * _2458) * (((_2505 * 3.1415927410125732421875) * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) / ((_2527 * _2527) * ((_2471 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_39_pred = _2557 * _2337.y;
                                frontier_phi_39_pred_1 = _2557 * _2337.x;
                                frontier_phi_39_pred_2 = _2482 * _2325.z;
                                frontier_phi_39_pred_3 = _2482 * _2325.y;
                                frontier_phi_39_pred_4 = _2482 * _2325.x;
                                frontier_phi_39_pred_5 = _2557 * _2337.z;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                                frontier_phi_39_pred_3 = 0.0;
                                frontier_phi_39_pred_4 = 0.0;
                                frontier_phi_39_pred_5 = 0.0;
                            }
                            _2562 = frontier_phi_39_pred;
                            _2561 = frontier_phi_39_pred_1;
                            _2566 = frontier_phi_39_pred_2;
                            _2565 = frontier_phi_39_pred_3;
                            _2564 = frontier_phi_39_pred_4;
                            _2563 = frontier_phi_39_pred_5;
                            _2266 = _2564 + _2279;
                            _2267 = _2565 + _2280;
                            _2268 = _2566 + _2281;
                            _2263 = _2561 + _2276;
                            _2264 = _2562 + _2277;
                            _2265 = _2563 + _2278;
                            if (_2283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2276 = _2263;
                                _2277 = _2264;
                                _2278 = _2265;
                                _2279 = _2266;
                                _2280 = _2267;
                                _2281 = _2268;
                                _2282 = _2283;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _2268;
                        frontier_phi_33_pred_1 = _2267;
                        frontier_phi_33_pred_2 = _2266;
                        frontier_phi_33_pred_3 = _2265;
                        frontier_phi_33_pred_4 = _2264;
                        frontier_phi_33_pred_5 = _2263;
                    }
                    _1934 = frontier_phi_33_pred;
                    _1932 = frontier_phi_33_pred_1;
                    _1930 = frontier_phi_33_pred_2;
                    _1928 = frontier_phi_33_pred_3;
                    _1926 = frontier_phi_33_pred_4;
                    _1924 = frontier_phi_33_pred_5;
                    uint _2069 = _2068 + 1u;
                    if (_2069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2062 = _1924;
                        _2063 = _1926;
                        _2064 = _1928;
                        _2065 = _1930;
                        _2066 = _1932;
                        _2067 = _1934;
                        _2068 = _2069;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1934;
                frontier_phi_21_22_ladder_1 = _1932;
                frontier_phi_21_22_ladder_2 = _1930;
                frontier_phi_21_22_ladder_3 = _1924;
                frontier_phi_21_22_ladder_4 = _1928;
                frontier_phi_21_22_ladder_5 = _1926;
            }
            else
            {
                frontier_phi_21_22_ladder = _1820;
                frontier_phi_21_22_ladder_1 = _1818;
                frontier_phi_21_22_ladder_2 = _1816;
                frontier_phi_21_22_ladder_3 = _1810;
                frontier_phi_21_22_ladder_4 = _1814;
                frontier_phi_21_22_ladder_5 = _1812;
            }
            _1923 = frontier_phi_21_22_ladder_3;
            _1925 = frontier_phi_21_22_ladder_5;
            _1927 = frontier_phi_21_22_ladder_4;
            _1929 = frontier_phi_21_22_ladder_2;
            _1931 = frontier_phi_21_22_ladder_1;
            _1933 = frontier_phi_21_22_ladder;
        }
        float _1938 = isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0));
        _1743 = (_1938 * _1929) + _1279;
        _1745 = (_1938 * _1931) + _1281;
        _1747 = (_1938 * _1933) + _1283;
        _1749 = ((_1923 * 0.039999999105930328369140625) * _1938) + _1554;
        _1751 = ((_1925 * 0.039999999105930328369140625) * _1938) + _1556;
        _1753 = ((_1927 * 0.039999999105930328369140625) * _1938) + _1558;
    }
    else
    {
        _1743 = _1279;
        _1745 = _1281;
        _1747 = _1283;
        _1749 = _1554;
        _1751 = _1556;
        _1753 = _1558;
    }
    float _3420 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3431 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3442 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    uint _1773 = _409 + 6u;
    float _1781 = _368 / cbSceneParam._m0[86u].x;
    float _1782 = _369 / cbSceneParam._m0[86u].y;
    vec4 _1796 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1781, _1782, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1798 = _1796.x;
    float _1799 = _1796.y;
    float _1800 = _1796.z;
    float _1801 = _1796.w;
    float _1873;
    float _1875;
    float _1877;
    float _1879;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _1835 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _1836 = _1835 / _302;
        float _1847 = _1836 * _353;
        float _1848 = _354 * _1836;
        float _1849 = (-0.0) - _1848;
        float _1850 = _1836 * _355;
        float _1852 = (cbSceneParam._m0[77u].w * _1849) / _1835;
        float _1853 = _1852 + cbSceneParam._m0[79u].w;
        float _1854 = cbSceneParam._m0[79u].w - _1848;
        float _1860 = sqrt(((_1847 * _1847) + (_1848 * _1848)) + (_1850 * _1850));
        float _1863 = (1.0 - (cbSceneParam._m0[77u].w / _1835)) * _1860;
        float _1869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2024;
        if (abs((_1849 - _1852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2024 = ((((_1853 > 0.0) ? exp2(_1869 * _1853) : (2.0 - exp2(_1871 * _1853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1863;
        }
        else
        {
            float _1984 = 1.0 / cbSceneParam._m0[80u].x;
            float _1985 = isnan(_1854) ? _1853 : (isnan(_1853) ? _1854 : max(_1853, _1854));
            float _1986 = isnan(_1854) ? _1853 : (isnan(_1853) ? _1854 : min(_1853, _1854));
            float _1995 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : min(_1985, 0.0));
            float _1996 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : min(_1986, 0.0));
            _2024 = ((abs(_1860 / _1849) * cbSceneParam._m0[80u].y) * ((((_1995 - _1996) * 2.0) - ((exp2(_1869 * (isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)))) - exp2(_1869 * (isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))))) * _1984)) - ((exp2(_1871 * _1995) - exp2(_1871 * _1996)) * _1984))) + (_1863 * cbSceneParam._m0[80u].z);
        }
        vec4 _2026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1781, _1782, 1.0), 0.0);
        float _2035 = exp2((_2024 * (-1.44269502162933349609375)) * (1.0 - _2026.w));
        float _2036 = log2(_2035);
        float _2052 = log2(_1801);
        _1873 = (exp2(_2052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2036 * cbSceneParam._m0[78u].x)) * _2026.x) / cbSceneParam._m0[78u].x)) + _1798;
        _1875 = (exp2(_2052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2036 * cbSceneParam._m0[78u].y)) * _2026.y) / cbSceneParam._m0[78u].y)) + _1799;
        _1877 = (exp2(_2052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2036 * cbSceneParam._m0[78u].z)) * _2026.z) / cbSceneParam._m0[78u].z)) + _1800;
        _1879 = _2035 * _1801;
    }
    else
    {
        _1873 = _1798;
        _1875 = _1799;
        _1877 = _1800;
        _1879 = _1801;
    }
    float _1890 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1891 = _1890 == 3.0;
    float _1893 = log2(_1879);
    float _1900 = exp2(_1893 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_1743 + (_1156 * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)))))) + ((_1749 + ((_467.x * _448) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1901 = exp2(_1893 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1745 + (_1156 * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)))))) + ((_1751 + ((_467.y * _448) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1902 = exp2(_1893 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1747 + (_1156 * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)))))) + ((_1753 + ((_467.z * _448) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1911 = (_1890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1911 * (_1891 ? _1900 : (_1900 + (cbSceneParam._m0[72u].w * _1873)));
    SV_Target.y = _1911 * (_1891 ? _1901 : (_1901 + (cbSceneParam._m0[72u].w * _1875)));
    SV_Target.z = _1911 * (_1891 ? _1902 : (_1902 + (cbSceneParam._m0[72u].w * _1877)));
    SV_Target.w = cbInstanceData._m0[_1773].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1773].w;
}


