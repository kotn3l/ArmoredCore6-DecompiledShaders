#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1087;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _265 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3423 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _266 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _280 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3434 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _281 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    vec4 _293 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _310 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _312 = _310.x;
    float _313 = _310.y;
    float _314 = _310.z;
    vec4 _344 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _346 = _344.x;
    float _347 = _344.y;
    float _348 = _344.z;
    vec4 _360 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _374 = (((_360.x - _346) * _281) + _346) * cbMtdParam._m0[10u].x;
    float _375 = (((_360.y - _347) * _281) + _347) * cbMtdParam._m0[10u].y;
    float _376 = (((_360.z - _348) * _281) + _348) * cbMtdParam._m0[10u].z;
    float _383 = ((((((_293.x - _312) * _281) + _312) * cbMtdParam._m0[11u].x) - _374) * _266) + _374;
    float _384 = ((((((_293.y - _313) * _281) + _313) * cbMtdParam._m0[11u].y) - _375) * _266) + _375;
    float _385 = ((((((_293.z - _314) * _281) + _314) * cbMtdParam._m0[11u].z) - _376) * _266) + _376;
    vec4 _403 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _405 = _403.x;
    float _406 = _403.y;
    float _407 = _403.z;
    vec4 _420 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _431 = ((_420.x - _405) * _281) + _405;
    float _432 = ((_420.y - _406) * _281) + _406;
    float _433 = ((_420.z - _407) * _281) + _407;
    vec4 _445 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _456 = ((_445.x - _431) * _266) + _431;
    float _457 = ((_445.y - _432) * _266) + _432;
    float _461 = (_456 * 2.0) + (-1.0);
    float _462 = (_457 * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3445 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _471 = fma(_468, _224, fma(_462, _217, _461 * _203));
    float _474 = fma(_468, _225, fma(_462, _218, _461 * _204));
    float _477 = fma(_468, _226, fma(_462, _219, _461 * _205));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    float _489 = cbMtdParam._m0[13u].x + dot(vec4(_481 * _471, _481 * _474, _481 * _477, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3456 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _497 = (_490 * (cbMtdParam._m0[9u].x - _383)) + _383;
    float _498 = (_490 * (cbMtdParam._m0[9u].y - _384)) + _384;
    float _499 = (_490 * (cbMtdParam._m0[9u].z - _385)) + _385;
    float _501 = (((_445.z - _433) * _266) + _433) + cbMtdParam._m0[12u].w;
    float _510 = (((cbMtdParam._m0[13u].z * _456) - _456) * _281) + _456;
    float _511 = (((cbMtdParam._m0[13u].w * _457) - _457) * _281) + _457;
    vec4 _531 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _544 = (((((_431 - _510) * _490) + _510) + ((_531.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _545 = (((((_432 - _511) * _490) + _511) + ((_531.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3467 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))));
    float _554 = fma(_551, _224, fma(_545, _217, _544 * _203));
    float _557 = fma(_551, _225, fma(_545, _218, _544 * _204));
    float _560 = fma(_551, _226, fma(_545, _219, _544 * _205));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _3478 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _568 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3500 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3511 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _638 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _628);
    float _639 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _628);
    float _640 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _628);
    float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
    float _645 = _638 * _644;
    float _646 = _639 * _644;
    float _647 = _640 * _644;
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _672 = fma(_567, cbSceneParam._m0[5u].z, fma(_566, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _565));
    float _675 = fma(_567, cbSceneParam._m0[6u].z, fma(_566, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _565));
    float _678 = fma(_567, cbSceneParam._m0[7u].z, fma(_566, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _565));
    uint _691 = uint(roundEven(NORMAL.w)) * 13u;
    uint _693 = (_691 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _699 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_693].x;
    float _700 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_693].y;
    float _701 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_693].z;
    float _3522 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    vec4 _713 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _716 = _713.x * TEXCOORD_3.w;
    float _717 = dot(vec3(_565, _566, _567), vec3(_645, _646, _647));
    float _720 = _717 * 2.0;
    float _724 = (_720 * _565) - _645;
    float _725 = (_720 * _566) - _646;
    float _726 = (_720 * _567) - _647;
    float _730 = abs(dot(vec3(_645, _646, _647), vec3(_565, _566, _567)));
    float _3555 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _732 = sqrt(_568);
    float _745 = exp2((_732 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_732 * 3.0));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _812 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _816 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _820 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _844 = _777 + _565;
        float _845 = _781 + _566;
        float _846 = _785 + _567;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _812;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _816;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _820;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_812 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_816 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_820 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_565, _566, _567), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3603 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_565, _566, _567), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3636 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_565, _566, _567), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3669 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1131 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1135 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1158 = _777 + _565;
        float _1159 = _781 + _566;
        float _1160 = _785 + _567;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_565, _566, _567), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3732 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_565, _566, _567), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3765 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_565, _566, _567), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3798 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1087;
        _1397 = _1087;
        _1398 = _1087;
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1099)) + _1099;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1100)) + _1100;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1101)) + _1101;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _724 * 0.5;
    float _1465 = _725 * 0.5;
    float _1466 = _726 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _568);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1594 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1597 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1625 = frontier_phi_16_14_ladder;
        }
        float _1850;
        if (_1594 > 0.0)
        {
            _1850 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1850 = frontier_phi_25_21_ladder;
        }
        float _2096;
        if (_1597 > 0.0)
        {
            _2096 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2096 = frontier_phi_37_32_ladder;
        }
        float _2098 = isnan(_1850) ? _1625 : (isnan(_1625) ? _1850 : min(_1625, _1850));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1591) + _1580;
        float _2104 = (_2099 * _1594) + _1584;
        float _2105 = (_2099 * _1597) + _1588;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2106;
        float _2110 = _2106 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 > _2110) || ((_2104 < _2108) || ((_2103 < _2108) || (_2103 > _2110))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2105, cbModelParam._m0[9u].z, fma(_2104, cbModelParam._m0[9u].y, _2103 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2105, cbModelParam._m0[10u].z, fma(_2104, cbModelParam._m0[10u].y, _2103 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2105, cbModelParam._m0[11u].z, fma(_2104, cbModelParam._m0[11u].y, _2103 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_15_37_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_15_37_ladder_2;
        _1615 = frontier_phi_15_37_ladder_1;
        _1617 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1533);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _568);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1693 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1696 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1855;
        if (_1690 > 0.0)
        {
            _1855 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1855 = frontier_phi_27_23_ladder;
        }
        float _2123;
        if (_1693 > 0.0)
        {
            _2123 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2123 = frontier_phi_39_34_ladder;
        }
        float _2328;
        if (_1696 > 0.0)
        {
            _2328 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2328 = frontier_phi_48_45_ladder;
        }
        float _2330 = isnan(_2123) ? _1855 : (isnan(_1855) ? _2123 : min(_1855, _2123));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1690) + _1679;
        float _2336 = (_2331 * _1693) + _1683;
        float _2337 = (_2331 * _1696) + _1687;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2337, cbModelParam._m0[17u].z, fma(_2336, cbModelParam._m0[17u].y, _2335 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2337, cbModelParam._m0[18u].z, fma(_2336, cbModelParam._m0[18u].y, _2335 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2337, cbModelParam._m0[19u].z, fma(_2336, cbModelParam._m0[19u].y, _2335 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_24_48_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_24_48_ladder_2;
        _1717 = frontier_phi_24_48_ladder_1;
        _1719 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1622);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1731 = ((((1.0 - _745) * ((_732 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_745 * _732)) * _716;
    float _1732 = _1731 * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1733 = _1731 * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1734 = _1731 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    vec4 _1751 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_653, _654));
    float _1753 = _1751.w;
    float _1765 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1753);
    float _1766 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1753);
    float _1767 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1753);
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_691 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _716 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1809 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1813 = _1773 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_565, _566, _567));
    float _1827 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_565, _566, _567));
    float _3934 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _3945 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1832 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1834 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1841 = ((cbLight._m0[_1790].x * _1796) * _1834) + (((cbLight._m0[_1800].x * _1765) * _1809) * _1832);
    float _1842 = ((_1796 * cbLight._m0[_1790].y) * _1834) + (((cbLight._m0[_1800].y * _1766) * _1809) * _1832);
    float _1843 = ((_1796 * cbLight._m0[_1790].z) * _1834) + (((cbLight._m0[_1800].z * _1767) * _1809) * _1832);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1849)
    {
        _1860 = _1841;
        _1862 = _1842;
        _1864 = _1843;
    }
    else
    {
        uint _1868 = _1773 + 6u;
        float _1884 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_565, _566, _567)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3956 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1887 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1860 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1841;
        _1862 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1842;
        _1864 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1843;
    }
    bool _1867 = _1847.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1867)
    {
        _1905 = _1860;
        _1907 = _1862;
        _1909 = _1864;
    }
    else
    {
        uint _2067 = _1773 + 7u;
        float _2083 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_565, _566, _567)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _3972 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2086 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1905 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _1860;
        _1907 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _1862;
        _1909 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _1864;
    }
    uint _1912 = _1773 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _568) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1773].x + _645;
    float _1928 = cbLight._m0[_1773].y + _646;
    float _1929 = cbLight._m0[_1773].z + _647;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_1773].xyz));
    float _3988 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _1941 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1942 = dot(vec3(_565, _566, _567), vec3(_1934, _1935, _1936));
    float _4010 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1934, _1935, _1936));
    float _4021 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1941 * ((_1940 * _1966) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1966) + _1926) * _1940))) * _1940;
    float _4032 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _1993 = _1773 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _568) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1813].x + _645;
    float _2007 = cbLight._m0[_1813].y + _646;
    float _2008 = cbLight._m0[_1813].z + _647;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_1813].xyz));
    float _4043 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2020 = dot(vec3(_565, _566, _567), vec3(_2013, _2014, _2015));
    float _4054 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_2013, _2014, _2015));
    float _4065 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2005;
    float _2052 = (0.5 / (((_1941 * ((_2019 * _2042) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2042) + _2005) * _2019))) * _2019;
    float _4076 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2064 = (((_2041 * cbLight._m0[_1993].x) * _2054) * _1796) + ((((cbLight._m0[_1912].x * _1765) * _1965) * _1979) * _1809);
    float _2065 = (((_2041 * cbLight._m0[_1993].y) * _2054) * _1796) + ((((cbLight._m0[_1912].y * _1766) * _1965) * _1979) * _1809);
    float _2066 = (((_2041 * cbLight._m0[_1993].z) * _2054) * _1796) + ((((cbLight._m0[_1912].z * _1767) * _1965) * _1979) * _1809);
    float _2128;
    float _2130;
    float _2132;
    if (_1849)
    {
        _2128 = _2064;
        _2130 = _2065;
        _2132 = _2066;
    }
    else
    {
        uint _2134 = _1773 + 2u;
        uint _2138 = _1773 + 10u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _568) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _645;
        float _2155 = cbLight._m0[_2134].y + _646;
        float _2156 = cbLight._m0[_2134].z + _647;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2134].xyz));
        float _4087 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2168 = dot(vec3(_565, _566, _567), vec3(_2161, _2162, _2163));
        float _4098 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4109 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = 1.0 - _2153;
        float _2200 = (0.5 / (((_1941 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2190) + _2153) * _2167))) * _2167;
        float _4120 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2128 = (((_2189 * cbLight._m0[_2138].x) * _2202) * _2203) + _2064;
        _2130 = (((_2189 * cbLight._m0[_2138].y) * _2202) * _2203) + _2065;
        _2132 = (((_2189 * cbLight._m0[_2138].z) * _2202) * _2203) + _2066;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1867)
    {
        _2238 = _2128;
        _2240 = _2130;
        _2242 = _2132;
    }
    else
    {
        uint _2249 = _1773 + 3u;
        uint _2253 = _1773 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _568) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _645;
        float _2270 = cbLight._m0[_2249].y + _646;
        float _2271 = cbLight._m0[_2249].z + _647;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2249].xyz));
        float _4136 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2283 = dot(vec3(_565, _566, _567), vec3(_2276, _2277, _2278));
        float _4147 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4158 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2305 = 1.0 - _2268;
        float _2315 = (0.5 / (((_1941 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2305) + _2268) * _2282))) * _2282;
        float _4169 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2238 = (((_2304 * cbLight._m0[_2253].x) * _2317) * _2318) + _2128;
        _2240 = (((_2304 * cbLight._m0[_2253].y) * _2317) * _2318) + _2130;
        _2242 = (((_2304 * cbLight._m0[_2253].z) * _2317) * _2318) + _2132;
    }
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_1771.y == 0u)
    {
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2393;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2393;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2393;
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.x;
        uint _2420 = uint((float(_2408.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2409))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2409)));
        float _2430 = (log2(_2396 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2431 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        uint _2434 = uint(isnan(14.0) ? _2431 : (isnan(_2431) ? 14.0 : min(_2431, 14.0)));
        uvec4 _2439 = texelFetch(g_lightClusterGridBuffer, int(((_2434 << 2u) + (_2420 << 6u)) >> 2u));
        uint _2440 = _2439.x;
        uint _2441 = _2408.z;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((((1u << ((_2441 >> 4u) & 15u)) + 4294967295u) & _2440) == 0u) || ((_2441 & 240u) == 0u))
        {
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
        }
        else
        {
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            uint _2690 = 0u;
            uint _2699;
            bool _2700;
            for (;;)
            {
                _2699 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                _2700 = _2699 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2700)
                {
                    frontier_phi_63_pred = _2689;
                    frontier_phi_63_pred_1 = _2688;
                    frontier_phi_63_pred_2 = _2687;
                    frontier_phi_63_pred_3 = _2686;
                    frontier_phi_63_pred_4 = _2685;
                    frontier_phi_63_pred_5 = _2684;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2699;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2690 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _2394;
                        float _2875 = _2834.y - _2395;
                        float _2876 = _2834.z - _2396;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_672, _675, _678), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4195 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _2394;
                        float _2910 = (-0.0) - _2395;
                        float _2911 = (-0.0) - _2396;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2926 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2927 = 1.0 - _732;
                        float _2934 = sqrt(1.0 - ((1.0 - (_2927 * _2927)) * (1.0 - (_2926 * _2926))));
                        float _2935 = _2934 * _2934;
                        float _2936 = _2935 * _2935;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2947 = dot(vec3(_672, _675, _678), vec3(_2916, _2917, _2918));
                        float _4211 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2951 = dot(vec3(_672, _675, _678), vec3(_2943 * _2937, _2943 * _2938, _2943 * _2939));
                        float _4222 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2958 = ((_2954 * _2954) * (_2936 + (-1.0))) + 1.0;
                        float _2959 = _2894 * _2935;
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2884) + _2960;
                        float _4233 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2965 = 1.0 - _2935;
                        float _2975 = (0.5 / (((_2964 * ((_2950 * _2965) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2935) * _2950))) * _2964;
                        float _4244 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2986 = (((_2936 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2958 * _2958) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2743 = (_2905 * _2853.x) + _2811;
                        _2744 = (_2905 * _2853.y) + _2812;
                        _2745 = (_2905 * _2853.z) + _2813;
                        _2740 = (_2986 * _2870.x) + _2808;
                        _2741 = (_2986 * _2870.y) + _2809;
                        _2742 = (_2986 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_63_pred = _2745;
                    frontier_phi_63_pred_1 = _2744;
                    frontier_phi_63_pred_2 = _2743;
                    frontier_phi_63_pred_3 = _2742;
                    frontier_phi_63_pred_4 = _2741;
                    frontier_phi_63_pred_5 = _2740;
                }
                _2551 = frontier_phi_63_pred;
                _2549 = frontier_phi_63_pred_1;
                _2547 = frontier_phi_63_pred_2;
                _2545 = frontier_phi_63_pred_3;
                _2543 = frontier_phi_63_pred_4;
                _2541 = frontier_phi_63_pred_5;
                uint _2691 = _2690 + 1u;
                if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2684 = _2541;
                    _2685 = _2543;
                    _2686 = _2545;
                    _2687 = _2547;
                    _2688 = _2549;
                    _2689 = _2551;
                    _2690 = _2691;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
        }
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.z;
        uint _2557 = (_2555 >> 8u) & 15u;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((4294967295u << _2557) & _2440) == 0u)
        {
            _2652 = _2540;
            _2654 = _2542;
            _2656 = _2544;
            _2658 = _2546;
            _2660 = _2548;
            _2662 = _2550;
        }
        else
        {
            float _2677 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
            float _2678 = _2677 * _2394;
            float _2679 = _2677 * _2395;
            float _2680 = _2677 * _2396;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2557 < ((_2555 >> 12u) & 15u))
            {
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2791 = _2540;
                float _2792 = _2542;
                float _2793 = _2544;
                float _2794 = _2546;
                float _2795 = _2548;
                float _2796 = _2550;
                uint _2797 = _2557;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2807)
                    {
                        frontier_phi_69_pred = _2796;
                        frontier_phi_69_pred_1 = _2795;
                        frontier_phi_69_pred_2 = _2794;
                        frontier_phi_69_pred_3 = _2793;
                        frontier_phi_69_pred_4 = _2792;
                        frontier_phi_69_pred_5 = _2791;
                    }
                    else
                    {
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        uint _3010 = _2806;
                        uint _3011;
                        vec4 _3036;
                        float _3037;
                        vec4 _3052;
                        vec3 _3064;
                        vec4 _3080;
                        vec4 _3096;
                        float _3143;
                        bool _3144;
                        for (;;)
                        {
                            uint _3021 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3010));
                            _3011 = (_3010 + 4294967295u) & _3010;
                            uint _3023 = _3021 * 40u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3037 = _3036.w;
                            uint _3039 = (_3021 * 40u) + 4u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3054 = (_3021 * 40u) + 8u;
                            _3064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x));
                            uint _3067 = (_3021 * 40u) + 16u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3021 * 40u) + 20u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3021 * 40u) + 24u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3118 = (_3021 * 40u) + 28u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3143 = fma(_2396, _3131.z, fma(_2395, _3131.y, _3131.x * _2394)) + _3131.w;
                            _3144 = !((fma(_2396, _3112.z, fma(_2395, _3112.y, _3112.x * _2394)) + _3112.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3144)
                            {
                                float _3171 = _3036.x - _2394;
                                float _3172 = _3036.y - _2395;
                                float _3173 = _3036.z - _2396;
                                float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                                float _3177 = inversesqrt(_3174);
                                float _3178 = _3177 * _3171;
                                float _3179 = _3177 * _3172;
                                float _3180 = _3177 * _3173;
                                float _3184 = 1.0 - (_3174 / (_3037 * _3037));
                                float _4255 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3189 = sqrt(_3174) * _3052.w;
                                float _3191 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                                float _3192 = _3191 * _3191;
                                float _3195 = ((1.0 - _3192) * dot(vec3(_3178, _3179, _3180), vec3(_672, _675, _678))) + _3192;
                                float _3198 = _3189 * _3189;
                                float _3202 = (fma(_2396, _3080.z, fma(_2395, _3080.y, _3080.x * _2394)) + _3080.w) / _3143;
                                float _3203 = (fma(_2396, _3096.z, fma(_2395, _3096.y, _3096.x * _2394)) + _3096.w) / _3143;
                                float _3207 = 1.0 - dot(vec2(_3202, _3203), vec2(_3202, _3203));
                                float _4271 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3209 = _3208 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3185) / ((_3198 * 0.699999988079071044921875) + 1.0));
                                float _3221 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                                float _3222 = 1.0 - _732;
                                float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                                float _3230 = _3229 * _3229;
                                float _3231 = _3230 * _3230;
                                float _3232 = _3178 - _2678;
                                float _3233 = _3179 - _2679;
                                float _3234 = _3180 - _2680;
                                float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                                float _3242 = dot(vec3(_672, _675, _678), vec3((-0.0) - _2678, (-0.0) - _2679, (-0.0) - _2680));
                                float _4282 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3246 = dot(vec3(_672, _675, _678), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                                float _4293 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                                float _3254 = _3191 * _3230;
                                float _3255 = _3254 * _3254;
                                float _3261 = ((1.0 - _3255) * dot(vec3(_672, _675, _678), vec3(_3178, _3179, _3180))) + _3255;
                                float _4304 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3263 = 1.0 - _3230;
                                float _3273 = (0.5 / (((_3262 * ((_3245 * _3263) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3230) * _3245))) * _3262;
                                float _4315 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3283 = (_3208 * _3185) * (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3253 * _3253) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3209 * _3052.z;
                                frontier_phi_75_pred_1 = _3209 * _3052.y;
                                frontier_phi_75_pred_2 = _3209 * _3052.x;
                                frontier_phi_75_pred_3 = _3283 * _3064.z;
                                frontier_phi_75_pred_4 = _3283 * _3064.y;
                                frontier_phi_75_pred_5 = _3283 * _3064.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_75_pred;
                            _3291 = frontier_phi_75_pred_1;
                            _3290 = frontier_phi_75_pred_2;
                            _3289 = frontier_phi_75_pred_3;
                            _3288 = frontier_phi_75_pred_4;
                            _3287 = frontier_phi_75_pred_5;
                            _2994 = _3290 + _3007;
                            _2995 = _3291 + _3008;
                            _2996 = _3292 + _3009;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            if (_3011 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _3011;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2996;
                        frontier_phi_69_pred_1 = _2995;
                        frontier_phi_69_pred_2 = _2994;
                        frontier_phi_69_pred_3 = _2993;
                        frontier_phi_69_pred_4 = _2992;
                        frontier_phi_69_pred_5 = _2991;
                    }
                    _2663 = frontier_phi_69_pred;
                    _2661 = frontier_phi_69_pred_1;
                    _2659 = frontier_phi_69_pred_2;
                    _2657 = frontier_phi_69_pred_3;
                    _2655 = frontier_phi_69_pred_4;
                    _2653 = frontier_phi_69_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2653;
                        _2792 = _2655;
                        _2793 = _2657;
                        _2794 = _2659;
                        _2795 = _2661;
                        _2796 = _2663;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2663;
                frontier_phi_57_58_ladder_1 = _2661;
                frontier_phi_57_58_ladder_2 = _2659;
                frontier_phi_57_58_ladder_3 = _2657;
                frontier_phi_57_58_ladder_4 = _2655;
                frontier_phi_57_58_ladder_5 = _2653;
            }
            else
            {
                frontier_phi_57_58_ladder = _2550;
                frontier_phi_57_58_ladder_1 = _2548;
                frontier_phi_57_58_ladder_2 = _2546;
                frontier_phi_57_58_ladder_3 = _2544;
                frontier_phi_57_58_ladder_4 = _2542;
                frontier_phi_57_58_ladder_5 = _2540;
            }
            _2652 = frontier_phi_57_58_ladder_5;
            _2654 = frontier_phi_57_58_ladder_4;
            _2656 = frontier_phi_57_58_ladder_3;
            _2658 = frontier_phi_57_58_ladder_2;
            _2660 = frontier_phi_57_58_ladder_1;
            _2662 = frontier_phi_57_58_ladder;
        }
        float _2667 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _2452 = (_2667 * _2658) + _1905;
        _2454 = (_2667 * _2660) + _1907;
        _2456 = (_2667 * _2662) + _1909;
        _2458 = ((_2652 * 0.039999999105930328369140625) * _2667) + _2238;
        _2460 = ((_2654 * 0.039999999105930328369140625) * _2667) + _2240;
        _2462 = ((_2656 * 0.039999999105930328369140625) * _2667) + _2242;
    }
    else
    {
        _2452 = _1905;
        _2454 = _1907;
        _2456 = _1909;
        _2458 = _2238;
        _2460 = _2240;
        _2462 = _2242;
    }
    float _4331 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4342 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4353 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    uint _2482 = _691 + 6u;
    float _2490 = _653 / cbSceneParam._m0[86u].x;
    float _2491 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2505 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2507 = _2505.x;
    float _2508 = _2505.y;
    float _2509 = _2505.z;
    float _2510 = _2505.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2565 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2566 = _2565 / _587;
        float _2577 = _2566 * _638;
        float _2578 = _639 * _2566;
        float _2579 = (-0.0) - _2578;
        float _2580 = _2566 * _640;
        float _2582 = (cbSceneParam._m0[77u].w * _2579) / _2565;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2578;
        float _2590 = sqrt(((_2577 * _2577) + (_2578 * _2578)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2565)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2753;
        if (abs((_2579 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2753 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2713 = 1.0 / cbSceneParam._m0[80u].x;
            float _2714 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2715 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            float _2725 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : min(_2715, 0.0));
            _2753 = ((abs(_2590 / _2579) * cbSceneParam._m0[80u].y) * ((((_2724 - _2725) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))))) * _2713)) - ((exp2(_2600 * _2724) - exp2(_2600 * _2725)) * _2713))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, 1.0), 0.0);
        float _2764 = exp2((_2753 * (-1.44269502162933349609375)) * (1.0 - _2755.w));
        float _2765 = log2(_2764);
        float _2781 = log2(_2510);
        _2602 = (exp2(_2781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].x)) * _2755.x) / cbSceneParam._m0[78u].x)) + _2507;
        _2604 = (exp2(_2781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].y)) * _2755.y) / cbSceneParam._m0[78u].y)) + _2508;
        _2606 = (exp2(_2781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].z)) * _2755.z) / cbSceneParam._m0[78u].z)) + _2509;
        _2608 = _2764 * _2510;
    }
    else
    {
        _2602 = _2507;
        _2604 = _2508;
        _2606 = _2509;
        _2608 = _2510;
    }
    float _2620 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2621 = _2620 == 3.0;
    float _2622 = log2(_2608);
    float _2629 = exp2(_2622 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2452 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _716))) + ((_2458 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1522)) * cbPerFrame._m0[3u].x));
    float _2630 = exp2(_2622 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2454 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _716))) + ((_2460 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1522)) * cbPerFrame._m0[3u].x));
    float _2631 = exp2(_2622 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2456 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _716))) + ((_2462 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1522)) * cbPerFrame._m0[3u].x));
    float _2640 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2640 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.y = _2640 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.z = _2640 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.w = cbInstanceData._m0[_2482].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2482].w;
}


