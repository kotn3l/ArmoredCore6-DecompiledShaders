#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1130;
float _3496;
float _3497;
float _3498;
float _3499;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _267 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3508 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _268 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _282 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3519 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    vec4 _295 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _314 = _312.x;
    float _315 = _312.y;
    float _316 = _312.z;
    vec4 _346 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _348 = _346.x;
    float _349 = _346.y;
    float _350 = _346.z;
    vec4 _362 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _376 = (((_362.x - _348) * _283) + _348) * cbMtdParam._m0[10u].x;
    float _377 = (((_362.y - _349) * _283) + _349) * cbMtdParam._m0[10u].y;
    float _378 = (((_362.z - _350) * _283) + _350) * cbMtdParam._m0[10u].z;
    float _385 = ((((((_295.x - _314) * _283) + _314) * cbMtdParam._m0[11u].x) - _376) * _268) + _376;
    float _386 = ((((((_295.y - _315) * _283) + _315) * cbMtdParam._m0[11u].y) - _377) * _268) + _377;
    float _387 = ((((((_295.z - _316) * _283) + _316) * cbMtdParam._m0[11u].z) - _378) * _268) + _378;
    vec4 _405 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _433 = ((_422.x - _407) * _283) + _407;
    float _434 = ((_422.y - _408) * _283) + _408;
    float _435 = ((_422.z - _409) * _283) + _409;
    vec4 _447 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _458 = ((_447.x - _433) * _268) + _433;
    float _459 = ((_447.y - _434) * _268) + _434;
    float _463 = (_458 * 2.0) + (-1.0);
    float _464 = (_459 * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3530 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    float _473 = fma(_470, _226, fma(_464, _219, _463 * _205));
    float _476 = fma(_470, _227, fma(_464, _220, _463 * _206));
    float _479 = fma(_470, _228, fma(_464, _221, _463 * _207));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _491 = cbMtdParam._m0[13u].x + dot(vec4(_483 * _473, _483 * _476, _483 * _479, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3541 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _499 = (_492 * (cbMtdParam._m0[9u].x - _385)) + _385;
    float _500 = (_492 * (cbMtdParam._m0[9u].y - _386)) + _386;
    float _501 = (_492 * (cbMtdParam._m0[9u].z - _387)) + _387;
    float _503 = (((_447.z - _435) * _268) + _435) + cbMtdParam._m0[12u].w;
    float _512 = (((cbMtdParam._m0[13u].z * _458) - _458) * _283) + _458;
    float _513 = (((cbMtdParam._m0[13u].w * _459) - _459) * _283) + _459;
    vec4 _533 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _546 = (((((_433 - _512) * _492) + _512) + ((_533.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _547 = (((((_434 - _513) * _492) + _513) + ((_533.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3552 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))));
    float _556 = fma(_553, _226, fma(_547, _219, _546 * _205));
    float _559 = fma(_553, _227, fma(_547, _220, _546 * _206));
    float _562 = fma(_553, _228, fma(_547, _221, _546 * _207));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    float _567 = _566 * _556;
    float _568 = _566 * _559;
    float _569 = _566 * _562;
    float _3563 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _570 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3585 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3596 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _640 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _630);
    float _641 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _630);
    float _642 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _630);
    float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
    float _647 = _640 * _646;
    float _648 = _641 * _646;
    float _649 = _642 * _646;
    vec4 _654 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _656 = _654.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _810 = sqrt(((_640 * _640) + (_641 * _641)) + (_642 * _642));
        float _816 = (cbMatDynParam._m0[5u].x * _810) + cbMatDynParam._m0[5u].y;
        float _3607 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _821 = (cbMatDynParam._m0[5u].z * _810) + cbMatDynParam._m0[5u].w;
        float _3618 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) - _817)) + _817) < ((_656 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _667 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _668 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _686 = fma(_569, cbSceneParam._m0[5u].z, fma(_568, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _567));
    float _689 = fma(_569, cbSceneParam._m0[6u].z, fma(_568, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _567));
    float _692 = fma(_569, cbSceneParam._m0[7u].z, fma(_568, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _567));
    uint _705 = uint(roundEven(NORMAL.w)) * 13u;
    uint _706 = _705 + 9u;
    uint _707 = _706 + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3629 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    vec4 _727 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _667, cbSceneParam._m0[86u].y * _668));
    float _730 = _727.x * TEXCOORD_3.w;
    float _731 = dot(vec3(_567, _568, _569), vec3(_647, _648, _649));
    float _734 = _731 * 2.0;
    float _738 = (_734 * _567) - _647;
    float _739 = (_734 * _568) - _648;
    float _740 = (_734 * _569) - _649;
    float _744 = abs(dot(vec3(_647, _648, _649), vec3(_567, _568, _569)));
    float _3662 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _746 = sqrt(_570);
    float _759 = exp2((_746 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_746 * 3.0));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _859 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _863 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _887 = _791 + _567;
        float _888 = _795 + _568;
        float _889 = _799 + _569;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _855;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _859;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _863;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_567, _568, _569), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3710 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_567, _568, _569), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3743 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_567, _568, _569), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3776 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1177 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1181 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1204 = _791 + _567;
        float _1205 = _795 + _568;
        float _1206 = _799 + _569;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_567, _568, _569), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3839 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_567, _568, _569), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3872 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_567, _568, _569), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3905 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = _1130;
        _1451 = _1130;
        _1452 = _1130;
        _1453 = _1130;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1142)) + _1142;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1143)) + _1143;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1144)) + _1144;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _738 * 0.5;
    float _1511 = _739 * 0.5;
    float _1512 = _740 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _570);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1626 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1630 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1634 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1637 = fma(_740, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738));
        float _1640 = fma(_740, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738));
        float _1643 = fma(_740, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738));
        float _1671;
        if (_1637 > 0.0)
        {
            _1671 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1671 = frontier_phi_19_17_ladder;
        }
        float _1875;
        if (_1640 > 0.0)
        {
            _1875 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1875 = frontier_phi_28_24_ladder;
        }
        float _2118;
        if (_1643 > 0.0)
        {
            _2118 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2118 = frontier_phi_40_35_ladder;
        }
        float _2120 = isnan(_1875) ? _1671 : (isnan(_1671) ? _1875 : min(_1671, _1875));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1637) + _1626;
        float _2126 = (_2121 * _1640) + _1630;
        float _2127 = (_2121 * _1643) + _1634;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2128;
        float _2132 = _2128 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 > _2132) || ((_2126 < _2130) || ((_2125 < _2130) || (_2125 > _2132))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2127, cbModelParam._m0[9u].z, fma(_2126, cbModelParam._m0[9u].y, _2125 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2127, cbModelParam._m0[10u].z, fma(_2126, cbModelParam._m0[10u].y, _2125 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2127, cbModelParam._m0[11u].z, fma(_2126, cbModelParam._m0[11u].y, _2125 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_18_40_ladder = _2251.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2251.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2251.x * cbModelParam._m0[1u].y;
        }
        _1659 = frontier_phi_18_40_ladder_2;
        _1661 = frontier_phi_18_40_ladder_1;
        _1663 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_738, _739, _740), _1579);
        _1659 = _1647.x * cbModelParam._m0[1u].y;
        _1661 = _1647.y * cbModelParam._m0[1u].y;
        _1663 = _1647.z * cbModelParam._m0[1u].y;
    }
    float _1667 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _570);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1667 : min(cbModelParam._m0[25u].w, _1667));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_740, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738));
        float _1739 = fma(_740, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738));
        float _1742 = fma(_740, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738));
        float _1880;
        if (_1736 > 0.0)
        {
            _1880 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1880 = frontier_phi_30_26_ladder;
        }
        float _2145;
        if (_1739 > 0.0)
        {
            _2145 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2145 = frontier_phi_42_37_ladder;
        }
        float _2350;
        if (_1742 > 0.0)
        {
            _2350 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2350 = frontier_phi_51_48_ladder;
        }
        float _2352 = isnan(_2145) ? _1880 : (isnan(_1880) ? _2145 : min(_1880, _2145));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1736) + _1725;
        float _2358 = (_2353 * _1739) + _1729;
        float _2359 = (_2353 * _1742) + _1733;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1668);
            frontier_phi_27_51_ladder = _2557.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2557.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2557.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_27_51_ladder_2;
        _1763 = frontier_phi_27_51_ladder_1;
        _1765 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_738, _739, _740), _1668);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _759) * ((_746 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_759 * _746)) * _730;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1663)) + _1663);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_705 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _730 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1834 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1838 = _1801 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_567, _568, _569));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_567, _568, _569));
    float _4041 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4052 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1818].x * _1824) * _1859) + ((cbLight._m0[_1828].x * _1834) * _1857);
    float _1867 = ((_1824 * cbLight._m0[_1818].y) * _1859) + ((_1834 * cbLight._m0[_1828].y) * _1857);
    float _1868 = ((_1824 * cbLight._m0[_1818].z) * _1859) + ((_1834 * cbLight._m0[_1828].z) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1801 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4063 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1912 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2089 = _1801 + 7u;
        float _2105 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4079 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2108 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1930 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _1885;
        _1932 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _1887;
        _1934 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _1889;
    }
    uint _1937 = _1801 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _570) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1801].x + _647;
    float _1953 = cbLight._m0[_1801].y + _648;
    float _1954 = cbLight._m0[_1801].z + _649;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_1801].xyz));
    float _4095 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _1966 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1967 = dot(vec3(_567, _568, _569), vec3(_1959, _1960, _1961));
    float _4117 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1959, _1960, _1961));
    float _4128 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1966 * ((_1965 * _1991) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1991) + _1951) * _1965))) * _1965;
    float _4139 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2015 = _1801 + 9u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _570) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1838].x + _647;
    float _2029 = cbLight._m0[_1838].y + _648;
    float _2030 = cbLight._m0[_1838].z + _649;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_1838].xyz));
    float _4150 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2042 = dot(vec3(_567, _568, _569), vec3(_2035, _2036, _2037));
    float _4161 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2035, _2036, _2037));
    float _4172 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2027 * _2027;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2027;
    float _2074 = (0.5 / (((_1966 * ((_2041 * _2064) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2064) + _2027) * _2041))) * _2041;
    float _4183 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    float _2086 = (((_2063 * cbLight._m0[_2015].x) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].x) * _2004) * _1834);
    float _2087 = (((_2063 * cbLight._m0[_2015].y) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].y) * _2004) * _1834);
    float _2088 = (((_2063 * cbLight._m0[_2015].z) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].z) * _2004) * _1834);
    float _2150;
    float _2152;
    float _2154;
    if (_1874)
    {
        _2150 = _2086;
        _2152 = _2087;
        _2154 = _2088;
    }
    else
    {
        uint _2156 = _1801 + 2u;
        uint _2160 = _1801 + 10u;
        float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _570) * 0.949999988079071044921875);
        float _2175 = _2174 * _2174;
        float _2176 = cbLight._m0[_2156].x + _647;
        float _2177 = cbLight._m0[_2156].y + _648;
        float _2178 = cbLight._m0[_2156].z + _649;
        float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
        float _2183 = _2182 * _2176;
        float _2184 = _2182 * _2177;
        float _2185 = _2182 * _2178;
        float _2186 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2156].xyz));
        float _4194 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2190 = dot(vec3(_567, _568, _569), vec3(_2183, _2184, _2185));
        float _4205 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2183, _2184, _2185));
        float _4216 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2198 = _2175 * _2175;
        float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
        float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = 1.0 - _2175;
        float _2222 = (0.5 / (((_1966 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2212) + _2175) * _2189))) * _2189;
        float _4227 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
        float _2225 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2150 = (((_2211 * cbLight._m0[_2160].x) * _2224) * _2225) + _2086;
        _2152 = (((_2211 * cbLight._m0[_2160].y) * _2224) * _2225) + _2087;
        _2154 = (((_2211 * cbLight._m0[_2160].z) * _2224) * _2225) + _2088;
    }
    float _2260;
    float _2262;
    float _2264;
    if (_1892)
    {
        _2260 = _2150;
        _2262 = _2152;
        _2264 = _2154;
    }
    else
    {
        uint _2271 = _1801 + 3u;
        uint _2275 = _1801 + 11u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _570) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _647;
        float _2292 = cbLight._m0[_2271].y + _648;
        float _2293 = cbLight._m0[_2271].z + _649;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2271].xyz));
        float _4243 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2305 = dot(vec3(_567, _568, _569), vec3(_2298, _2299, _2300));
        float _4254 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4265 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_1966 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2327) + _2290) * _2304))) * _2304;
        float _4276 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2260 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2150;
        _2262 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2152;
        _2264 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2154;
    }
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_1799.y == 0u)
    {
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2415;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2415;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2415;
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.x;
        uint _2442 = uint((float(_2430.y) * floor(float(uint(cbSceneParam._m0[85u].y * _668) / _2431))) + floor(float(uint(cbSceneParam._m0[85u].x * _667) / _2431)));
        float _2452 = (log2(_2418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2453 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        uint _2456 = uint(isnan(14.0) ? _2453 : (isnan(_2453) ? 14.0 : min(_2453, 14.0)));
        uvec4 _2461 = texelFetch(g_lightClusterGridBuffer, int(((_2456 << 2u) + (_2442 << 6u)) >> 2u));
        uint _2462 = _2461.x;
        uint _2463 = _2430.z;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((((1u << ((_2463 >> 4u) & 15u)) + 4294967295u) & _2462) == 0u) || ((_2463 & 240u) == 0u))
        {
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
        }
        else
        {
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            uint _2720 = 0u;
            uint _2729;
            bool _2730;
            for (;;)
            {
                _2729 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                _2730 = _2729 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2730)
                {
                    frontier_phi_68_pred = _2716;
                    frontier_phi_68_pred_1 = _2719;
                    frontier_phi_68_pred_2 = _2718;
                    frontier_phi_68_pred_3 = _2717;
                    frontier_phi_68_pred_4 = _2715;
                    frontier_phi_68_pred_5 = _2714;
                }
                else
                {
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    uint _2865;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2729;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2869 = uint(findLSB(_2865)) + (_2720 << 5u);
                        uint _2866 = (_2865 + 4294967295u) & _2865;
                        uint _2871 = _2869 * 48u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2891 = (_2869 * 48u) + 4u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2910 = (_2869 * 48u) + 8u;
                        vec3 _2921 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x));
                        float _2925 = _2885.x - _2416;
                        float _2926 = _2885.y - _2417;
                        float _2927 = _2885.z - _2418;
                        float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                        float _2931 = inversesqrt(_2928);
                        float _2932 = _2931 * _2925;
                        float _2933 = _2931 * _2926;
                        float _2934 = _2931 * _2927;
                        float _2935 = dot(vec3(_686, _689, _692), vec3(_2932, _2933, _2934));
                        float _2940 = 1.0 - (_2928 * _2885.w);
                        float _4302 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2941 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2942 = sqrt(_2928) * _2904.w;
                        float _2945 = 1.39999997615814208984375 / (_2942 + 1.39999997615814208984375);
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2935) + _2946;
                        float _2952 = _2942 * _2942;
                        float _2956 = ((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2941) / ((_2952 * 0.699999988079071044921875) + 1.0);
                        float _2960 = (-0.0) - _2416;
                        float _2961 = (-0.0) - _2417;
                        float _2962 = (-0.0) - _2418;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2977 = exp2(log2(1.0 / ((_2952 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _746;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2990 = _2969 + _2934;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_686, _689, _692), vec3(_2967, _2968, _2969));
                        float _4318 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3002 = dot(vec3(_686, _689, _692), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4329 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2945 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2935) + _3011;
                        float _4340 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4351 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3009 * _3009) * ((_2952 * 2.1991131305694580078125) + 3.141590118408203125))) * _2941;
                        _2789 = (_2956 * _2904.x) + _2862;
                        _2790 = (_2956 * _2904.y) + _2863;
                        _2791 = (_2956 * _2904.z) + _2864;
                        _2786 = (_3037 * _2921.x) + _2859;
                        _2787 = (_3037 * _2921.y) + _2860;
                        _2788 = (_3037 * _2921.z) + _2861;
                        if (_2866 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2866;
                        }
                    }
                    frontier_phi_68_pred = _2788;
                    frontier_phi_68_pred_1 = _2791;
                    frontier_phi_68_pred_2 = _2790;
                    frontier_phi_68_pred_3 = _2789;
                    frontier_phi_68_pred_4 = _2787;
                    frontier_phi_68_pred_5 = _2786;
                }
                _2567 = frontier_phi_68_pred;
                _2573 = frontier_phi_68_pred_1;
                _2571 = frontier_phi_68_pred_2;
                _2569 = frontier_phi_68_pred_3;
                _2565 = frontier_phi_68_pred_4;
                _2563 = frontier_phi_68_pred_5;
                uint _2721 = _2720 + 1u;
                if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2714 = _2563;
                    _2715 = _2565;
                    _2716 = _2567;
                    _2717 = _2569;
                    _2718 = _2571;
                    _2719 = _2573;
                    _2720 = _2721;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
        }
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.z;
        uint _2579 = (_2577 >> 8u) & 15u;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((4294967295u << _2579) & _2462) == 0u)
        {
            _2682 = _2562;
            _2684 = _2564;
            _2686 = _2566;
            _2688 = _2568;
            _2690 = _2570;
            _2692 = _2572;
        }
        else
        {
            float _2707 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
            float _2708 = _2707 * _2416;
            float _2709 = _2707 * _2417;
            float _2710 = _2707 * _2418;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2579 < ((_2577 >> 12u) & 15u))
            {
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2842 = _2562;
                float _2843 = _2564;
                float _2844 = _2566;
                float _2845 = _2568;
                float _2846 = _2570;
                float _2847 = _2572;
                uint _2848 = _2579;
                uint _2857;
                bool _2858;
                for (;;)
                {
                    _2857 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                    _2858 = _2857 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2858)
                    {
                        frontier_phi_79_pred = _2847;
                        frontier_phi_79_pred_1 = _2846;
                        frontier_phi_79_pred_2 = _2845;
                        frontier_phi_79_pred_3 = _2844;
                        frontier_phi_79_pred_4 = _2843;
                        frontier_phi_79_pred_5 = _2842;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        uint _3070 = _2857;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3140;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3081 = ((_2848 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3127 = (_3081 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3081 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3081 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3081 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_2418, _3191.z, fma(_2417, _3191.y, _3191.x * _2416)) + _3191.w;
                            _3204 = !((fma(_2418, _3172.z, fma(_2417, _3172.y, _3172.x * _2416)) + _3172.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3096.x - _2416;
                                float _3232 = _3096.y - _2417;
                                float _3233 = _3096.z - _2418;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3097 * _3097));
                                float _4362 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3249 = sqrt(_3234) * _3112.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_686, _689, _692))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_2418, _3140.z, fma(_2417, _3140.y, _3140.x * _2416)) + _3140.w) / _3203;
                                float _3263 = (fma(_2418, _3156.z, fma(_2417, _3156.y, _3156.x * _2416)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4378 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _746;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2708;
                                float _3293 = _3239 - _2709;
                                float _3294 = _3240 - _2710;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_686, _689, _692), vec3((-0.0) - _2708, (-0.0) - _2709, (-0.0) - _2710));
                                float _4389 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3306 = dot(vec3(_686, _689, _692), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4400 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_686, _689, _692), vec3(_3238, _3239, _3240))) + _3315;
                                float _4411 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4422 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3269 * _3112.z;
                                frontier_phi_85_pred_1 = _3269 * _3112.y;
                                frontier_phi_85_pred_2 = _3269 * _3112.x;
                                frontier_phi_85_pred_3 = _3343 * _3124.z;
                                frontier_phi_85_pred_4 = _3343 * _3124.y;
                                frontier_phi_85_pred_5 = _3343 * _3124.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3352 = frontier_phi_85_pred;
                            _3351 = frontier_phi_85_pred_1;
                            _3350 = frontier_phi_85_pred_2;
                            _3349 = frontier_phi_85_pred_3;
                            _3348 = frontier_phi_85_pred_4;
                            _3347 = frontier_phi_85_pred_5;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3056;
                        frontier_phi_79_pred_1 = _3055;
                        frontier_phi_79_pred_2 = _3054;
                        frontier_phi_79_pred_3 = _3053;
                        frontier_phi_79_pred_4 = _3052;
                        frontier_phi_79_pred_5 = _3051;
                    }
                    _2693 = frontier_phi_79_pred;
                    _2691 = frontier_phi_79_pred_1;
                    _2689 = frontier_phi_79_pred_2;
                    _2687 = frontier_phi_79_pred_3;
                    _2685 = frontier_phi_79_pred_4;
                    _2683 = frontier_phi_79_pred_5;
                    uint _2849 = _2848 + 1u;
                    if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2842 = _2683;
                        _2843 = _2685;
                        _2844 = _2687;
                        _2845 = _2689;
                        _2846 = _2691;
                        _2847 = _2693;
                        _2848 = _2849;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2689;
                frontier_phi_60_61_ladder_1 = _2693;
                frontier_phi_60_61_ladder_2 = _2691;
                frontier_phi_60_61_ladder_3 = _2687;
                frontier_phi_60_61_ladder_4 = _2685;
                frontier_phi_60_61_ladder_5 = _2683;
            }
            else
            {
                frontier_phi_60_61_ladder = _2568;
                frontier_phi_60_61_ladder_1 = _2572;
                frontier_phi_60_61_ladder_2 = _2570;
                frontier_phi_60_61_ladder_3 = _2566;
                frontier_phi_60_61_ladder_4 = _2564;
                frontier_phi_60_61_ladder_5 = _2562;
            }
            _2682 = frontier_phi_60_61_ladder_5;
            _2684 = frontier_phi_60_61_ladder_4;
            _2686 = frontier_phi_60_61_ladder_3;
            _2688 = frontier_phi_60_61_ladder;
            _2690 = frontier_phi_60_61_ladder_2;
            _2692 = frontier_phi_60_61_ladder_1;
        }
        float _2697 = isnan(1.0) ? _730 : (isnan(_730) ? 1.0 : min(_730, 1.0));
        _2474 = (_2697 * _2688) + _1930;
        _2476 = (_2697 * _2690) + _1932;
        _2478 = (_2697 * _2692) + _1934;
        _2480 = ((_2682 * 0.039999999105930328369140625) * _2697) + _2260;
        _2482 = ((_2684 * 0.039999999105930328369140625) * _2697) + _2262;
        _2484 = ((_2686 * 0.039999999105930328369140625) * _2697) + _2264;
    }
    else
    {
        _2474 = _1930;
        _2476 = _1932;
        _2478 = _1934;
        _2480 = _2260;
        _2482 = _2262;
        _2484 = _2264;
    }
    float _4438 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4449 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4460 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _2501 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2474 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _730))) + ((_2480 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2502 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2476 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _730))) + ((_2482 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2503 = ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2478 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _730))) + ((_2484 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    uint _2504 = _705 + 6u;
    float _2512 = _667 / cbSceneParam._m0[86u].x;
    float _2513 = _668 / cbSceneParam._m0[86u].y;
    vec4 _2527 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2529 = _2527.x;
    float _2530 = _2527.y;
    float _2531 = _2527.z;
    float _2532 = _2527.w;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2587 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2588 = _2587 / _589;
        float _2599 = _2588 * _640;
        float _2600 = _641 * _2588;
        float _2601 = (-0.0) - _2600;
        float _2602 = _2588 * _642;
        float _2604 = (cbSceneParam._m0[77u].w * _2601) / _2587;
        float _2605 = _2604 + cbSceneParam._m0[79u].w;
        float _2606 = cbSceneParam._m0[79u].w - _2600;
        float _2612 = sqrt(((_2599 * _2599) + (_2600 * _2600)) + (_2602 * _2602));
        float _2615 = (1.0 - (cbSceneParam._m0[77u].w / _2587)) * _2612;
        float _2620 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2622 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2601 - _2604) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2605 > 0.0) ? exp2(_2620 * _2605) : (2.0 - exp2(_2622 * _2605))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2615;
        }
        else
        {
            float _2743 = 1.0 / cbSceneParam._m0[80u].x;
            float _2744 = isnan(_2606) ? _2605 : (isnan(_2605) ? _2606 : max(_2605, _2606));
            float _2745 = isnan(_2606) ? _2605 : (isnan(_2605) ? _2606 : min(_2605, _2606));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            _2799 = ((abs(_2612 / _2601) * cbSceneParam._m0[80u].y) * ((((_2754 - _2755) * 2.0) - ((exp2(_2620 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)))) - exp2(_2620 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))))) * _2743)) - ((exp2(_2622 * _2754) - exp2(_2622 * _2755)) * _2743))) + (_2615 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2532);
        _2624 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2529;
        _2626 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2530;
        _2628 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2531;
        _2630 = _2810 * _2532;
    }
    else
    {
        _2624 = _2529;
        _2626 = _2530;
        _2628 = _2531;
        _2630 = _2532;
    }
    bool _2837;
    vec4 _2640;
    vec4 _2662;
    float _2664;
    float _2668;
    float _2669;
    float _2670;
    float _2671;
    bool _2681;
    for (;;)
    {
        _2640 = cbMatDynParam._m0[0u];
        float _2642 = roundEven(_2640.y);
        bool _2643 = _2642 == 3.0;
        float _2644 = log2(_2630);
        float _2651 = exp2(_2644 * cbSceneParam._m0[78u].x) * _2501;
        float _2652 = exp2(_2644 * cbSceneParam._m0[78u].y) * _2502;
        float _2653 = exp2(_2644 * cbSceneParam._m0[78u].z) * _2503;
        float _2660 = _656 + (-0.5);
        _2662 = cbMtdParam._m0[1u];
        _2664 = _2662.y * _2660;
        float _2667 = (_2642 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2668 = _2667 * (_2643 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2624)));
        _2669 = _2667 * (_2643 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2626)));
        _2670 = _2667 * (_2643 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2628)));
        _2671 = _2660 * 0.999000012874603271484375;
        _2681 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2681)
        {
            if ((cbInstanceData._m0[_705 + 7u].x + _2671) < 0.5)
            {
                _2837 = true;
                break;
            }
        }
        uint _2778 = _706 + uint(_2640.w);
        if ((cbInstanceData._m0[_2778].w < 1.0) && ((cbInstanceData._m0[_2778].w + _2671) < 0.5))
        {
            _2837 = true;
            break;
        }
        if ((_2664 + 1.0) < _2662.x)
        {
            _2837 = true;
            break;
        }
        _2837 = false;
        break;
    }
    float _3042;
    if (_2837)
    {
        discard_state = true;
        _3042 = 0.0;
    }
    else
    {
        _3042 = cbInstanceData._m0[_2504].w;
    }
    SV_Target.x = _2668;
    SV_Target.y = _2669;
    SV_Target.z = _2670;
    SV_Target.w = _3042;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2504].w;
    discard_exit();
}


