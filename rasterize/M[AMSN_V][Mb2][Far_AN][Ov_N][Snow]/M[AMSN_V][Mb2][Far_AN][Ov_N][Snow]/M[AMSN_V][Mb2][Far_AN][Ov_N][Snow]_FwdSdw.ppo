#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1089;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _267 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3684 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _268 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _282 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3695 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _295 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _314 = _312.x;
    float _315 = _312.y;
    float _316 = _312.z;
    vec4 _346 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _348 = _346.x;
    float _349 = _346.y;
    float _350 = _346.z;
    vec4 _362 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _376 = (((_362.x - _348) * _283) + _348) * cbMtdParam._m0[10u].x;
    float _377 = (((_362.y - _349) * _283) + _349) * cbMtdParam._m0[10u].y;
    float _378 = (((_362.z - _350) * _283) + _350) * cbMtdParam._m0[10u].z;
    float _385 = ((((((_295.x - _314) * _283) + _314) * cbMtdParam._m0[11u].x) - _376) * _268) + _376;
    float _386 = ((((((_295.y - _315) * _283) + _315) * cbMtdParam._m0[11u].y) - _377) * _268) + _377;
    float _387 = ((((((_295.z - _316) * _283) + _316) * cbMtdParam._m0[11u].z) - _378) * _268) + _378;
    vec4 _405 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _433 = ((_422.x - _407) * _283) + _407;
    float _434 = ((_422.y - _408) * _283) + _408;
    float _435 = ((_422.z - _409) * _283) + _409;
    vec4 _447 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _458 = ((_447.x - _433) * _268) + _433;
    float _459 = ((_447.y - _434) * _268) + _434;
    float _463 = (_458 * 2.0) + (-1.0);
    float _464 = (_459 * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3706 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _473 = fma(_470, _226, fma(_464, _219, _463 * _205));
    float _476 = fma(_470, _227, fma(_464, _220, _463 * _206));
    float _479 = fma(_470, _228, fma(_464, _221, _463 * _207));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _491 = cbMtdParam._m0[13u].x + dot(vec4(_483 * _473, _483 * _476, _483 * _479, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3717 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _499 = (_492 * (cbMtdParam._m0[9u].x - _385)) + _385;
    float _500 = (_492 * (cbMtdParam._m0[9u].y - _386)) + _386;
    float _501 = (_492 * (cbMtdParam._m0[9u].z - _387)) + _387;
    float _503 = (((_447.z - _435) * _268) + _435) + cbMtdParam._m0[12u].w;
    float _512 = (((cbMtdParam._m0[13u].z * _458) - _458) * _283) + _458;
    float _513 = (((cbMtdParam._m0[13u].w * _459) - _459) * _283) + _459;
    vec4 _533 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _546 = (((((_433 - _512) * _492) + _512) + ((_533.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _547 = (((((_434 - _513) * _492) + _513) + ((_533.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3728 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    float _556 = fma(_553, _226, fma(_547, _219, _546 * _205));
    float _559 = fma(_553, _227, fma(_547, _220, _546 * _206));
    float _562 = fma(_553, _228, fma(_547, _221, _546 * _207));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    float _567 = _566 * _556;
    float _568 = _566 * _559;
    float _569 = _566 * _562;
    float _3739 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _570 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3761 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3772 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _640 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _630);
    float _641 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _630);
    float _642 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _630);
    float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
    float _647 = _640 * _646;
    float _648 = _641 * _646;
    float _649 = _642 * _646;
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _674 = fma(_569, cbSceneParam._m0[5u].z, fma(_568, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _567));
    float _677 = fma(_569, cbSceneParam._m0[6u].z, fma(_568, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _567));
    float _680 = fma(_569, cbSceneParam._m0[7u].z, fma(_568, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _567));
    uint _693 = uint(roundEven(NORMAL.w)) * 13u;
    uint _695 = (_693 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _701 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_695].x;
    float _702 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_695].y;
    float _703 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_695].z;
    float _3783 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _655, cbSceneParam._m0[86u].y * _656));
    float _718 = _715.x * TEXCOORD_3.w;
    float _719 = dot(vec3(_567, _568, _569), vec3(_647, _648, _649));
    float _722 = _719 * 2.0;
    float _726 = (_722 * _567) - _647;
    float _727 = (_722 * _568) - _648;
    float _728 = (_722 * _569) - _649;
    float _732 = abs(dot(vec3(_647, _648, _649), vec3(_567, _568, _569)));
    float _3816 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _734 = sqrt(_570);
    float _747 = exp2((_734 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_734 * 3.0));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _818 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _822 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _846 = _779 + _567;
        float _847 = _783 + _568;
        float _848 = _787 + _569;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _814;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _818;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _822;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_567, _568, _569), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3864 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_567, _568, _569), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3897 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_567, _568, _569), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3930 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1133 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1137 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1160 = _779 + _567;
        float _1161 = _783 + _568;
        float _1162 = _787 + _569;
        float _1172 = fma(_1162, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160)) - _1129;
        float _1173 = fma(_1162, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160)) - _1133;
        float _1174 = fma(_1162, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160)) - _1137;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1129 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1133 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[35u].z) + ((((((_1137 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1228 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1195.x + (-0.5));
        float _1230 = _1228 * (_1195.y + (-0.5));
        float _1231 = _1228 * (_1195.z + (-0.5));
        float _1238 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1202.x + (-0.5));
        float _1240 = _1238 * (_1202.y + (-0.5));
        float _1241 = _1238 * (_1202.z + (-0.5));
        float _1248 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1209.x + (-0.5));
        float _1250 = _1248 * (_1209.y + (-0.5));
        float _1251 = _1248 * (_1209.z + (-0.5));
        float _1258 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1216.x + (-0.5));
        float _1260 = _1258 * (_1216.y + (-0.5));
        float _1261 = _1258 * (_1216.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_567, _568, _569), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3993 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1292 + 1.0))) + _1297) * _1262;
        float _1307 = _1230 * 0.5;
        float _1308 = _1240 * 0.5;
        float _1309 = _1250 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_567, _568, _569), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4026 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1334 + 1.0))) + _1339) * _1263;
        float _1349 = _1231 * 0.5;
        float _1350 = _1241 * 0.5;
        float _1351 = _1251 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_567, _568, _569), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4059 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1376 + 1.0))) + _1381) * _1264;
        _1398 = _1231;
        _1399 = _1230;
        _1400 = _1229;
        _1401 = _1241;
        _1402 = _1240;
        _1403 = _1239;
        _1404 = _1251;
        _1405 = _1250;
        _1406 = _1249;
        _1407 = _1264;
        _1408 = _1263;
        _1409 = _1262;
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1089;
        _1399 = _1089;
        _1400 = _1089;
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1101)) + _1101;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1102)) + _1102;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1103)) + _1103;
    float _1445 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1422));
    float _1466 = _726 * 0.5;
    float _1467 = _727 * 0.5;
    float _1468 = _728 * 0.5;
    float _1469 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1472 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1475 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1486 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1466, _1467, _1468, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1466, _1467, _1468, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _570);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_728, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726));
        float _1596 = fma(_728, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726));
        float _1599 = fma(_728, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1627 = frontier_phi_16_14_ladder;
        }
        float _1800;
        if (_1596 > 0.0)
        {
            _1800 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1800 = frontier_phi_25_21_ladder;
        }
        float _2095;
        if (_1599 > 0.0)
        {
            _2095 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2095 = frontier_phi_37_32_ladder;
        }
        float _2097 = isnan(_1800) ? _1627 : (isnan(_1627) ? _1800 : min(_1627, _1800));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1593) + _1582;
        float _2103 = (_2098 * _1596) + _1586;
        float _2104 = (_2098 * _1599) + _1590;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_15_37_ladder = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2249.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2249.z * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_15_37_ladder_1;
        _1617 = frontier_phi_15_37_ladder;
        _1619 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_726, _727, _728), _1535);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _570);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_728, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726));
        float _1695 = fma(_728, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726));
        float _1698 = fma(_728, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726));
        float _1805;
        if (_1692 > 0.0)
        {
            _1805 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1805 = frontier_phi_27_23_ladder;
        }
        float _2122;
        if (_1695 > 0.0)
        {
            _2122 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2122 = frontier_phi_39_34_ladder;
        }
        float _2449;
        if (_1698 > 0.0)
        {
            _2449 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2449 = frontier_phi_49_46_ladder;
        }
        float _2451 = isnan(_2122) ? _1805 : (isnan(_1805) ? _2122 : min(_1805, _2122));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1692) + _1681;
        float _2457 = (_2452 * _1695) + _1685;
        float _2458 = (_2452 * _1698) + _1689;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2459;
        float _2462 = _2459 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2458 > _2462) || ((_2458 < _2460) || ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 < _2460) || (_2456 > _2462))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2458, cbModelParam._m0[17u].z, fma(_2457, cbModelParam._m0[17u].y, _2456 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2458, cbModelParam._m0[18u].z, fma(_2457, cbModelParam._m0[18u].y, _2456 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2458, cbModelParam._m0[19u].z, fma(_2457, cbModelParam._m0[19u].y, _2456 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_24_49_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_24_49_ladder_2;
        _1719 = frontier_phi_24_49_ladder_1;
        _1721 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_726, _727, _728), _1624);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1733 = ((((1.0 - _747) * ((_734 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_747 * _734)) * _718;
    float _1734 = _1733 * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1735 = _1733 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1736 = _1733 * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1792 = _1779 / _1791;
    float _1793 = _1783 / _1791;
    float _1794 = _1787 / _1791;
    float _1941;
    float _1942;
    float _1943;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1821 = ((uint(_1794 > cbSceneParam._m0[59u].y) + uint(_1794 > cbSceneParam._m0[59u].x)) + uint(_1794 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1822 = _1821 + 43u;
        uint _1830 = _1821 + 44u;
        uint _1838 = _1821 + 45u;
        uint _1846 = _1821 + 46u;
        float _1857 = fma(_1791, cbSceneParam._m0[_1822].w, fma(_1787, cbSceneParam._m0[_1822].z, fma(_1783, cbSceneParam._m0[_1822].y, _1779 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1791, cbSceneParam._m0[_1830].w, fma(_1787, cbSceneParam._m0[_1830].z, fma(_1783, cbSceneParam._m0[_1830].y, _1779 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1791, cbSceneParam._m0[_1846].w, fma(_1787, cbSceneParam._m0[_1846].z, fma(_1783, cbSceneParam._m0[_1846].y, _1779 * cbSceneParam._m0[_1846].x)));
        float _1874 = cbSceneParam._m0[33u].z * _1869;
        float _1876 = cbSceneParam._m0[33u].w * _1869;
        float _1879 = fma(_1791, cbSceneParam._m0[_1838].w, fma(_1787, cbSceneParam._m0[_1838].z, fma(_1783, cbSceneParam._m0[_1838].y, _1779 * cbSceneParam._m0[_1838].x))) / _1869;
        float _1927 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
        float _4185 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1934 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1857) / _1869, (_1876 + _1861) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 + _1857) / _1869, (_1861 - _1874) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1874) / _1869, (_1861 - _1876) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1876) / _1869, (_1874 + _1861) / _1869), _1879), 0.0)).x), vec4(0.25)));
        _1941 = 1.0 - (_1934 * cbSceneParam._m0[34u].x);
        _1942 = 1.0 - (_1934 * cbSceneParam._m0[34u].y);
        _1943 = 1.0 - (_1934 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1941 = 1.0;
        _1942 = 1.0;
        _1943 = 1.0;
    }
    float _2007;
    float _2009;
    float _2011;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1995 = fma(_1791, cbSceneParam._m0[63u].w, fma(_1787, cbSceneParam._m0[63u].z, fma(_1783, cbSceneParam._m0[63u].y, _1779 * cbSceneParam._m0[63u].x)));
        float _1996 = fma(_1791, cbSceneParam._m0[60u].w, fma(_1787, cbSceneParam._m0[60u].z, fma(_1783, cbSceneParam._m0[60u].y, _1779 * cbSceneParam._m0[60u].x))) / _1995;
        float _1997 = fma(_1791, cbSceneParam._m0[61u].w, fma(_1787, cbSceneParam._m0[61u].z, fma(_1783, cbSceneParam._m0[61u].y, _1779 * cbSceneParam._m0[61u].x))) / _1995;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1996 >= cbSceneParam._m0[64u].x) && (_1997 >= cbSceneParam._m0[64u].y)) && (_1996 <= cbSceneParam._m0[64u].z)) && (_1997 <= cbSceneParam._m0[64u].w))
        {
            float _2135 = fma(_1791, cbSceneParam._m0[62u].w, fma(_1787, cbSceneParam._m0[62u].z, fma(_1783, cbSceneParam._m0[62u].y, _1779 * cbSceneParam._m0[62u].x))) / _1995;
            float _2139 = isnan(cbSceneParam._m0[41u].w) ? _2135 : (isnan(_2135) ? cbSceneParam._m0[41u].w : max(_2135, cbSceneParam._m0[41u].w));
            float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
            float _4201 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
            float _2189 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1996, cbSceneParam._m0[33u].w + _1997), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1996, _1997 - cbSceneParam._m0[33u].z), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].z, _1997 - cbSceneParam._m0[33u].w), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1997), _2139), 0.0)).x), vec4(0.25)));
            float _2193 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
            float _2194 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
            float _2195 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2194) ? _1942 : (isnan(_1942) ? _2194 : min(_1942, _2194));
            frontier_phi_36_35_ladder_1 = isnan(_2195) ? _1943 : (isnan(_1943) ? _2195 : min(_1943, _2195));
            frontier_phi_36_35_ladder_2 = isnan(_2193) ? _1941 : (isnan(_1941) ? _2193 : min(_1941, _2193));
        }
        else
        {
            frontier_phi_36_35_ladder = _1942;
            frontier_phi_36_35_ladder_1 = _1943;
            frontier_phi_36_35_ladder_2 = _1941;
        }
        _2007 = frontier_phi_36_35_ladder_2;
        _2009 = frontier_phi_36_35_ladder;
        _2011 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2007 = _1941;
        _2009 = _1942;
        _2011 = _1943;
    }
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_693 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _718 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2054 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2058 = _2018 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_567, _568, _569));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_567, _568, _569));
    float _4237 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4248 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2007) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2009) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2011) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2094)
    {
        _2196 = _2086;
        _2198 = _2087;
        _2200 = _2088;
    }
    else
    {
        uint _2204 = _2018 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4259 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2223 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2086;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2087;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2088;
    }
    bool _2203 = _2092.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2203)
    {
        _2258 = _2196;
        _2260 = _2198;
        _2262 = _2200;
    }
    else
    {
        uint _2420 = _2018 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4275 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2439 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2258 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2196;
        _2260 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2198;
        _2262 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2200;
    }
    uint _2265 = _2018 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _570) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2018].x + _647;
    float _2281 = cbLight._m0[_2018].y + _648;
    float _2282 = cbLight._m0[_2018].z + _649;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2018].xyz));
    float _4291 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _2294 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2295 = dot(vec3(_567, _568, _569), vec3(_2287, _2288, _2289));
    float _4313 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2287, _2288, _2289));
    float _4324 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2319 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2294 * ((_2293 * _2319) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2319) + _2279) * _2293))) * _2293;
    float _4335 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2346 = _2018 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _570) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2058].x + _647;
    float _2360 = cbLight._m0[_2058].y + _648;
    float _2361 = cbLight._m0[_2058].z + _649;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2058].xyz));
    float _4346 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2373 = dot(vec3(_567, _568, _569), vec3(_2366, _2367, _2368));
    float _4357 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2366, _2367, _2368));
    float _4368 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2395 = 1.0 - _2358;
    float _2405 = (0.5 / (((_2294 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2395) + _2358) * _2372))) * _2372;
    float _4379 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2417 = (((_2394 * cbLight._m0[_2346].x) * _2407) * _2041) + ((((cbLight._m0[_2265].x * _2007) * _2318) * _2332) * _2054);
    float _2418 = (((_2394 * cbLight._m0[_2346].y) * _2407) * _2041) + ((((cbLight._m0[_2265].y * _2009) * _2318) * _2332) * _2054);
    float _2419 = (((_2394 * cbLight._m0[_2346].z) * _2407) * _2041) + ((((cbLight._m0[_2265].z * _2011) * _2318) * _2332) * _2054);
    float _2475;
    float _2477;
    float _2479;
    if (_2094)
    {
        _2475 = _2417;
        _2477 = _2418;
        _2479 = _2419;
    }
    else
    {
        uint _2481 = _2018 + 2u;
        uint _2485 = _2018 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _570) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _647;
        float _2502 = cbLight._m0[_2481].y + _648;
        float _2503 = cbLight._m0[_2481].z + _649;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2481].xyz));
        float _4390 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2515 = dot(vec3(_567, _568, _569), vec3(_2508, _2509, _2510));
        float _4401 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4412 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2537 = 1.0 - _2500;
        float _2547 = (0.5 / (((_2294 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2537) + _2500) * _2514))) * _2514;
        float _4423 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2475 = (((_2536 * cbLight._m0[_2485].x) * _2549) * _2550) + _2417;
        _2477 = (((_2536 * cbLight._m0[_2485].y) * _2549) * _2550) + _2418;
        _2479 = (((_2536 * cbLight._m0[_2485].z) * _2549) * _2550) + _2419;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2203)
    {
        _2581 = _2475;
        _2583 = _2477;
        _2585 = _2479;
    }
    else
    {
        uint _2592 = _2018 + 3u;
        uint _2596 = _2018 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _570) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _647;
        float _2613 = cbLight._m0[_2592].y + _648;
        float _2614 = cbLight._m0[_2592].z + _649;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2592].xyz));
        float _4439 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2626 = dot(vec3(_567, _568, _569), vec3(_2619, _2620, _2621));
        float _4450 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4461 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2648 = 1.0 - _2611;
        float _2658 = (0.5 / (((_2294 * ((_2625 * _2648) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2648) + _2611) * _2625))) * _2625;
        float _4472 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2581 = (((_2647 * cbLight._m0[_2596].x) * _2660) * _2661) + _2475;
        _2583 = (((_2647 * cbLight._m0[_2596].y) * _2660) * _2661) + _2477;
        _2585 = (((_2647 * cbLight._m0[_2596].z) * _2660) * _2661) + _2479;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_2016.y == 0u)
    {
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _2683)));
        float _2704 = (log2(_1794 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2953)
                {
                    frontier_phi_68_pred = _2942;
                    frontier_phi_68_pred_1 = _2941;
                    frontier_phi_68_pred_2 = _2940;
                    frontier_phi_68_pred_3 = _2938;
                    frontier_phi_68_pred_4 = _2937;
                    frontier_phi_68_pred_5 = _2939;
                }
                else
                {
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    uint _3067;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2952;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3071 = uint(findLSB(_3067)) + (_2943 << 5u);
                        uint _3068 = (_3067 + 4294967295u) & _3067;
                        uint _3073 = _3071 * 48u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3093 = (_3071 * 48u) + 4u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3112 = (_3071 * 48u) + 8u;
                        vec3 _3123 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x));
                        float _3127 = _3087.x - _1792;
                        float _3128 = _3087.y - _1793;
                        float _3129 = _3087.z - _1794;
                        float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                        float _3133 = inversesqrt(_3130);
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3137 = dot(vec3(_674, _677, _680), vec3(_3134, _3135, _3136));
                        float _3142 = 1.0 - (_3130 * _3087.w);
                        float _4498 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3144 = sqrt(_3130) * _3106.w;
                        float _3147 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3137) + _3148;
                        float _3154 = _3144 * _3144;
                        float _3158 = ((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3143) / ((_3154 * 0.699999988079071044921875) + 1.0);
                        float _3162 = (-0.0) - _1792;
                        float _3163 = (-0.0) - _1793;
                        float _3164 = (-0.0) - _1794;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3178 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                        float _3179 = 1.0 - _734;
                        float _3186 = sqrt(1.0 - ((1.0 - (_3179 * _3179)) * (1.0 - (_3178 * _3178))));
                        float _3187 = _3186 * _3186;
                        float _3188 = _3187 * _3187;
                        float _3189 = _3169 + _3134;
                        float _3190 = _3170 + _3135;
                        float _3191 = _3171 + _3136;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3199 = dot(vec3(_674, _677, _680), vec3(_3169, _3170, _3171));
                        float _4514 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3203 = dot(vec3(_674, _677, _680), vec3(_3195 * _3189, _3195 * _3190, _3195 * _3191));
                        float _4525 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3210 = ((_3206 * _3206) * (_3188 + (-1.0))) + 1.0;
                        float _3211 = _3147 * _3187;
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3137) + _3212;
                        float _4536 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3217 = 1.0 - _3187;
                        float _3227 = (0.5 / (((_3216 * ((_3202 * _3217) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3187) * _3202))) * _3216;
                        float _4547 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3238 = (((_3188 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3210 * _3210) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125))) * _3143;
                        _2996 = (_3158 * _3106.x) + _3064;
                        _2997 = (_3158 * _3106.y) + _3065;
                        _2998 = (_3158 * _3106.z) + _3066;
                        _2993 = (_3238 * _3123.x) + _3061;
                        _2994 = (_3238 * _3123.y) + _3062;
                        _2995 = (_3238 * _3123.z) + _3063;
                        if (_3068 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _3068;
                        }
                    }
                    frontier_phi_68_pred = _2998;
                    frontier_phi_68_pred_1 = _2997;
                    frontier_phi_68_pred_2 = _2996;
                    frontier_phi_68_pred_3 = _2994;
                    frontier_phi_68_pred_4 = _2993;
                    frontier_phi_68_pred_5 = _2995;
                }
                _2804 = frontier_phi_68_pred;
                _2802 = frontier_phi_68_pred_1;
                _2800 = frontier_phi_68_pred_2;
                _2796 = frontier_phi_68_pred_3;
                _2794 = frontier_phi_68_pred_4;
                _2798 = frontier_phi_68_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2794;
                    _2938 = _2796;
                    _2939 = _2798;
                    _2940 = _2800;
                    _2941 = _2802;
                    _2942 = _2804;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2810) & _2714) == 0u)
        {
            _2905 = _2793;
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
            float _2931 = _2930 * _1792;
            float _2932 = _2930 * _1793;
            float _2933 = _2930 * _1794;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3044 = _2793;
                float _3045 = _2795;
                float _3046 = _2797;
                float _3047 = _2799;
                float _3048 = _2801;
                float _3049 = _2803;
                uint _3050 = _2810;
                uint _3059;
                bool _3060;
                for (;;)
                {
                    _3059 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                    _3060 = _3059 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3060)
                    {
                        frontier_phi_74_pred = _3046;
                        frontier_phi_74_pred_1 = _3045;
                        frontier_phi_74_pred_2 = _3044;
                        frontier_phi_74_pred_3 = _3049;
                        frontier_phi_74_pred_4 = _3048;
                        frontier_phi_74_pred_5 = _3047;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        float _3261 = _3049;
                        uint _3262 = _3059;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3332;
                        vec4 _3348;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3273 = ((_3050 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3319 = (_3273 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3273 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3273 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3273 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_1794, _3383.z, fma(_1793, _3383.y, _3383.x * _1792)) + _3383.w;
                            _3396 = !((fma(_1794, _3364.z, fma(_1793, _3364.y, _3364.x * _1792)) + _3364.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3288.x - _1792;
                                float _3424 = _3288.y - _1793;
                                float _3425 = _3288.z - _1794;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3289 * _3289));
                                float _4558 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3441 = sqrt(_3426) * _3304.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_674, _677, _680))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_1794, _3332.z, fma(_1793, _3332.y, _3332.x * _1792)) + _3332.w) / _3395;
                                float _3455 = (fma(_1794, _3348.z, fma(_1793, _3348.y, _3348.x * _1792)) + _3348.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4574 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _734;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2931;
                                float _3485 = _3431 - _2932;
                                float _3486 = _3432 - _2933;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_674, _677, _680), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4585 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3498 = dot(vec3(_674, _677, _680), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4596 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_674, _677, _680), vec3(_3430, _3431, _3432))) + _3507;
                                float _4607 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4618 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3535 * _3316.z;
                                frontier_phi_80_pred_1 = _3535 * _3316.y;
                                frontier_phi_80_pred_2 = _3535 * _3316.x;
                                frontier_phi_80_pred_3 = _3461 * _3304.z;
                                frontier_phi_80_pred_4 = _3461 * _3304.y;
                                frontier_phi_80_pred_5 = _3461 * _3304.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_80_pred;
                            _3540 = frontier_phi_80_pred_1;
                            _3539 = frontier_phi_80_pred_2;
                            _3544 = frontier_phi_80_pred_3;
                            _3543 = frontier_phi_80_pred_4;
                            _3542 = frontier_phi_80_pred_5;
                            _3246 = _3542 + _3259;
                            _3247 = _3543 + _3260;
                            _3248 = _3544 + _3261;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3245;
                        frontier_phi_74_pred_1 = _3244;
                        frontier_phi_74_pred_2 = _3243;
                        frontier_phi_74_pred_3 = _3248;
                        frontier_phi_74_pred_4 = _3247;
                        frontier_phi_74_pred_5 = _3246;
                    }
                    _2910 = frontier_phi_74_pred;
                    _2908 = frontier_phi_74_pred_1;
                    _2906 = frontier_phi_74_pred_2;
                    _2916 = frontier_phi_74_pred_3;
                    _2914 = frontier_phi_74_pred_4;
                    _2912 = frontier_phi_74_pred_5;
                    uint _3051 = _3050 + 1u;
                    if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3044 = _2906;
                        _3045 = _2908;
                        _3046 = _2910;
                        _3047 = _2912;
                        _3048 = _2914;
                        _3049 = _2916;
                        _3050 = _3051;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2914;
                frontier_phi_62_63_ladder_1 = _2912;
                frontier_phi_62_63_ladder_2 = _2910;
                frontier_phi_62_63_ladder_3 = _2916;
                frontier_phi_62_63_ladder_4 = _2908;
                frontier_phi_62_63_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_62_63_ladder = _2801;
                frontier_phi_62_63_ladder_1 = _2799;
                frontier_phi_62_63_ladder_2 = _2797;
                frontier_phi_62_63_ladder_3 = _2803;
                frontier_phi_62_63_ladder_4 = _2795;
                frontier_phi_62_63_ladder_5 = _2793;
            }
            _2905 = frontier_phi_62_63_ladder_5;
            _2907 = frontier_phi_62_63_ladder_4;
            _2909 = frontier_phi_62_63_ladder_2;
            _2911 = frontier_phi_62_63_ladder_1;
            _2913 = frontier_phi_62_63_ladder;
            _2915 = frontier_phi_62_63_ladder_3;
        }
        float _2920 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
        _2726 = (_2920 * _2911) + _2258;
        _2728 = (_2920 * _2913) + _2260;
        _2730 = (_2920 * _2915) + _2262;
        _2732 = ((_2905 * 0.039999999105930328369140625) * _2920) + _2581;
        _2734 = ((_2907 * 0.039999999105930328369140625) * _2920) + _2583;
        _2736 = ((_2909 * 0.039999999105930328369140625) * _2920) + _2585;
    }
    else
    {
        _2726 = _2258;
        _2728 = _2260;
        _2730 = _2262;
        _2732 = _2581;
        _2734 = _2583;
        _2736 = _2585;
    }
    float _4634 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4645 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4656 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    uint _2756 = _693 + 6u;
    float _2764 = _655 / cbSceneParam._m0[86u].x;
    float _2765 = _656 / cbSceneParam._m0[86u].y;
    vec4 _2779 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2781 = _2779.x;
    float _2782 = _2779.y;
    float _2783 = _2779.z;
    float _2784 = _2779.w;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2819 = _2818 / _589;
        float _2830 = _2819 * _640;
        float _2831 = _641 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2833 = _2819 * _642;
        float _2835 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2836 = _2835 + cbSceneParam._m0[79u].w;
        float _2837 = cbSceneParam._m0[79u].w - _2831;
        float _2843 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2833 * _2833));
        float _2846 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2843;
        float _2851 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2853 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2832 - _2835) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2836 > 0.0) ? exp2(_2851 * _2836) : (2.0 - exp2(_2853 * _2836))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2846;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : max(_2836, _2837));
            float _2968 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : min(_2836, _2837));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3006 = ((abs(_2843 / _2832) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2851 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2851 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2853 * _2977) - exp2(_2853 * _2978)) * _2966))) + (_2846 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2784);
        _2855 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2781;
        _2857 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2782;
        _2859 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2783;
        _2861 = _3017 * _2784;
    }
    else
    {
        _2855 = _2781;
        _2857 = _2782;
        _2859 = _2783;
        _2861 = _2784;
    }
    float _2873 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2874 = _2873 == 3.0;
    float _2875 = log2(_2861);
    float _2882 = exp2(_2875 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2726 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _718))) + ((_2732 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1524)) * cbPerFrame._m0[3u].x));
    float _2883 = exp2(_2875 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2728 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _718))) + ((_2734 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1524)) * cbPerFrame._m0[3u].x));
    float _2884 = exp2(_2875 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2730 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _718))) + ((_2736 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1524)) * cbPerFrame._m0[3u].x));
    float _2893 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2893 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.y = _2893 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.z = _2893 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.w = cbInstanceData._m0[_2756].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2756].w;
}


