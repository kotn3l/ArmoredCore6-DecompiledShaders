#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1132;
float _3522;
float _3523;
float _3524;
float _3525;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    float _269 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3534 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _270 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _284 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3545 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    vec4 _297 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _316 = _314.x;
    float _317 = _314.y;
    float _318 = _314.z;
    vec4 _348 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _350 = _348.x;
    float _351 = _348.y;
    float _352 = _348.z;
    vec4 _364 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _378 = (((_364.x - _350) * _285) + _350) * cbMtdParam._m0[10u].x;
    float _379 = (((_364.y - _351) * _285) + _351) * cbMtdParam._m0[10u].y;
    float _380 = (((_364.z - _352) * _285) + _352) * cbMtdParam._m0[10u].z;
    float _387 = ((((((_297.x - _316) * _285) + _316) * cbMtdParam._m0[11u].x) - _378) * _270) + _378;
    float _388 = ((((((_297.y - _317) * _285) + _317) * cbMtdParam._m0[11u].y) - _379) * _270) + _379;
    float _389 = ((((((_297.z - _318) * _285) + _318) * cbMtdParam._m0[11u].z) - _380) * _270) + _380;
    vec4 _407 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    vec4 _424 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _435 = ((_424.x - _409) * _285) + _409;
    float _436 = ((_424.y - _410) * _285) + _410;
    float _437 = ((_424.z - _411) * _285) + _411;
    vec4 _449 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _460 = ((_449.x - _435) * _270) + _435;
    float _461 = ((_449.y - _436) * _270) + _436;
    float _465 = (_460 * 2.0) + (-1.0);
    float _466 = (_461 * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3556 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))));
    float _475 = fma(_472, _228, fma(_466, _221, _465 * _207));
    float _478 = fma(_472, _229, fma(_466, _222, _465 * _208));
    float _481 = fma(_472, _230, fma(_466, _223, _465 * _209));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    float _493 = cbMtdParam._m0[13u].x + dot(vec4(_485 * _475, _485 * _478, _485 * _481, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3567 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _501 = (_494 * (cbMtdParam._m0[9u].x - _387)) + _387;
    float _502 = (_494 * (cbMtdParam._m0[9u].y - _388)) + _388;
    float _503 = (_494 * (cbMtdParam._m0[9u].z - _389)) + _389;
    float _505 = (((_449.z - _437) * _270) + _437) + cbMtdParam._m0[12u].w;
    float _514 = (((cbMtdParam._m0[13u].z * _460) - _460) * _285) + _460;
    float _515 = (((cbMtdParam._m0[13u].w * _461) - _461) * _285) + _461;
    vec4 _535 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _548 = (((((_435 - _514) * _494) + _514) + ((_535.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _549 = (((((_436 - _515) * _494) + _515) + ((_535.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3578 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _558 = fma(_555, _228, fma(_549, _221, _548 * _207));
    float _561 = fma(_555, _229, fma(_549, _222, _548 * _208));
    float _564 = fma(_555, _230, fma(_549, _223, _548 * _209));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    float _569 = _568 * _558;
    float _570 = _568 * _561;
    float _571 = _568 * _564;
    float _3589 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _572 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3611 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3622 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _642 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _632);
    float _643 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _632);
    float _644 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _632);
    float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
    float _649 = _642 * _648;
    float _650 = _643 * _648;
    float _651 = _644 * _648;
    vec4 _656 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _658 = _656.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _812 = sqrt(((_642 * _642) + (_643 * _643)) + (_644 * _644));
        float _818 = (cbMatDynParam._m0[5u].x * _812) + cbMatDynParam._m0[5u].y;
        float _3633 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _823 = (cbMatDynParam._m0[5u].z * _812) + cbMatDynParam._m0[5u].w;
        float _3644 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) - _819)) + _819) < ((_658 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _669 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _670 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _688 = fma(_571, cbSceneParam._m0[5u].z, fma(_570, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _569));
    float _691 = fma(_571, cbSceneParam._m0[6u].z, fma(_570, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _569));
    float _694 = fma(_571, cbSceneParam._m0[7u].z, fma(_570, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _569));
    uint _707 = uint(roundEven(NORMAL.w)) * 13u;
    uint _708 = _707 + 9u;
    uint _709 = _708 + uint(cbMatDynParam._m0[0u].w);
    float _715 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_709].x;
    float _716 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_709].y;
    float _717 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_709].z;
    float _3655 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _729 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _669, cbSceneParam._m0[86u].y * _670));
    float _732 = _729.x * TEXCOORD_3.w;
    float _733 = dot(vec3(_569, _570, _571), vec3(_649, _650, _651));
    float _736 = _733 * 2.0;
    float _740 = (_736 * _569) - _649;
    float _741 = (_736 * _570) - _650;
    float _742 = (_736 * _571) - _651;
    float _746 = abs(dot(vec3(_649, _650, _651), vec3(_569, _570, _571)));
    float _3688 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _748 = sqrt(_572);
    float _761 = exp2((_748 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_748 * 3.0));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_801, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793));
        float _861 = fma(_801, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793));
        float _865 = fma(_801, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793));
        float _889 = _793 + _569;
        float _890 = _797 + _570;
        float _891 = _801 + _571;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _857;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _861;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _865;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_569, _570, _571), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3736 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_569, _570, _571), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3769 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_569, _570, _571), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3802 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_801, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793));
        float _1179 = fma(_801, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793));
        float _1183 = fma(_801, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793));
        float _1206 = _793 + _569;
        float _1207 = _797 + _570;
        float _1208 = _801 + _571;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_569, _570, _571), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3865 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_569, _570, _571), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3898 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_569, _570, _571), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3931 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = _1132;
        _1453 = _1132;
        _1454 = _1132;
        _1455 = _1132;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1144)) + _1144;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1145)) + _1145;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1146)) + _1146;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _740 * 0.5;
    float _1513 = _741 * 0.5;
    float _1514 = _742 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _572);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1628 = fma(_801, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793)) + cbModelParam._m0[13u].w;
        float _1632 = fma(_801, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793)) + cbModelParam._m0[14u].w;
        float _1636 = fma(_801, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793)) + cbModelParam._m0[15u].w;
        float _1639 = fma(_742, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740));
        float _1642 = fma(_742, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740));
        float _1645 = fma(_742, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740));
        float _1673;
        if (_1639 > 0.0)
        {
            _1673 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1673 = frontier_phi_19_17_ladder;
        }
        float _1898;
        if (_1642 > 0.0)
        {
            _1898 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1898 = frontier_phi_28_24_ladder;
        }
        float _2144;
        if (_1645 > 0.0)
        {
            _2144 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2144 = frontier_phi_40_35_ladder;
        }
        float _2146 = isnan(_1898) ? _1673 : (isnan(_1673) ? _1898 : min(_1673, _1898));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1639) + _1628;
        float _2152 = (_2147 * _1642) + _1632;
        float _2153 = (_2147 * _1645) + _1636;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_18_40_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1661 = frontier_phi_18_40_ladder_2;
        _1663 = frontier_phi_18_40_ladder_1;
        _1665 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_740, _741, _742), _1581);
        _1661 = _1649.x * cbModelParam._m0[1u].y;
        _1663 = _1649.y * cbModelParam._m0[1u].y;
        _1665 = _1649.z * cbModelParam._m0[1u].y;
    }
    float _1669 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _572);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1669 : min(cbModelParam._m0[25u].w, _1669));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_801, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_801, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_801, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_742, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740));
        float _1741 = fma(_742, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740));
        float _1744 = fma(_742, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740));
        float _1903;
        if (_1738 > 0.0)
        {
            _1903 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1903 = frontier_phi_30_26_ladder;
        }
        float _2171;
        if (_1741 > 0.0)
        {
            _2171 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2171 = frontier_phi_42_37_ladder;
        }
        float _2376;
        if (_1744 > 0.0)
        {
            _2376 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2376 = frontier_phi_51_48_ladder;
        }
        float _2378 = isnan(_2171) ? _1903 : (isnan(_1903) ? _2171 : min(_1903, _2171));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1738) + _1727;
        float _2384 = (_2379 * _1741) + _1731;
        float _2385 = (_2379 * _1744) + _1735;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1670);
            frontier_phi_27_51_ladder = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2583.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2583.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_27_51_ladder_2;
        _1765 = frontier_phi_27_51_ladder_1;
        _1767 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_740, _741, _742), _1670);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _761) * ((_748 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_761 * _748)) * _732;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1663)) + _1663);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1665)) + _1665);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    vec4 _1799 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_669, _670));
    float _1801 = _1799.w;
    float _1813 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1801);
    float _1814 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1801);
    float _1815 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1801);
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_707 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _732 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1857 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1861 = _1821 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_569, _570, _571));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_569, _570, _571));
    float _4067 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _4078 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1838].x * _1844) * _1882) + (((cbLight._m0[_1848].x * _1813) * _1857) * _1880);
    float _1890 = ((_1844 * cbLight._m0[_1838].y) * _1882) + (((cbLight._m0[_1848].y * _1814) * _1857) * _1880);
    float _1891 = ((_1844 * cbLight._m0[_1838].z) * _1882) + (((cbLight._m0[_1848].z * _1815) * _1857) * _1880);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1897)
    {
        _1908 = _1889;
        _1910 = _1890;
        _1912 = _1891;
    }
    else
    {
        uint _1916 = _1821 + 6u;
        float _1932 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _4089 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1935 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1908 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1889;
        _1910 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1890;
        _1912 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1891;
    }
    bool _1915 = _1895.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1915)
    {
        _1953 = _1908;
        _1955 = _1910;
        _1957 = _1912;
    }
    else
    {
        uint _2115 = _1821 + 7u;
        float _2131 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4105 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2134 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1953 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1908;
        _1955 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1910;
        _1957 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1912;
    }
    uint _1960 = _1821 + 8u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _572) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1821].x + _649;
    float _1976 = cbLight._m0[_1821].y + _650;
    float _1977 = cbLight._m0[_1821].z + _651;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1821].xyz));
    float _4121 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _1989 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1990 = dot(vec3(_569, _570, _571), vec3(_1982, _1983, _1984));
    float _4143 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1982, _1983, _1984));
    float _4154 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1974 * _1974;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1989 * ((_1988 * _2014) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2014) + _1974) * _1988))) * _1988;
    float _4165 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    uint _2041 = _1821 + 9u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _572) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1861].x + _649;
    float _2055 = cbLight._m0[_1861].y + _650;
    float _2056 = cbLight._m0[_1861].z + _651;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1861].xyz));
    float _4176 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2068 = dot(vec3(_569, _570, _571), vec3(_2061, _2062, _2063));
    float _4187 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2061, _2062, _2063));
    float _4198 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2053 * _2053;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2053;
    float _2100 = (0.5 / (((_1989 * ((_2067 * _2090) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2090) + _2053) * _2067))) * _2067;
    float _4209 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    float _2112 = (((_2089 * cbLight._m0[_2041].x) * _2102) * _1844) + ((((cbLight._m0[_1960].x * _1813) * _2013) * _2027) * _1857);
    float _2113 = (((_2089 * cbLight._m0[_2041].y) * _2102) * _1844) + ((((cbLight._m0[_1960].y * _1814) * _2013) * _2027) * _1857);
    float _2114 = (((_2089 * cbLight._m0[_2041].z) * _2102) * _1844) + ((((cbLight._m0[_1960].z * _1815) * _2013) * _2027) * _1857);
    float _2176;
    float _2178;
    float _2180;
    if (_1897)
    {
        _2176 = _2112;
        _2178 = _2113;
        _2180 = _2114;
    }
    else
    {
        uint _2182 = _1821 + 2u;
        uint _2186 = _1821 + 10u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _572) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _649;
        float _2203 = cbLight._m0[_2182].y + _650;
        float _2204 = cbLight._m0[_2182].z + _651;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2182].xyz));
        float _4220 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2216 = dot(vec3(_569, _570, _571), vec3(_2209, _2210, _2211));
        float _4231 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4242 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1989 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2238) + _2201) * _2215))) * _2215;
        float _4253 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2176 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2112;
        _2178 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2113;
        _2180 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2114;
    }
    float _2286;
    float _2288;
    float _2290;
    if (_1915)
    {
        _2286 = _2176;
        _2288 = _2178;
        _2290 = _2180;
    }
    else
    {
        uint _2297 = _1821 + 3u;
        uint _2301 = _1821 + 11u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _572) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _649;
        float _2318 = cbLight._m0[_2297].y + _650;
        float _2319 = cbLight._m0[_2297].z + _651;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2297].xyz));
        float _4269 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2331 = dot(vec3(_569, _570, _571), vec3(_2324, _2325, _2326));
        float _4280 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4291 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_1989 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2353) + _2316) * _2330))) * _2330;
        float _4302 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2286 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2176;
        _2288 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2178;
        _2290 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2180;
    }
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_1819.y == 0u)
    {
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2441;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2441;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2441;
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _670) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _669) / _2457)));
        float _2478 = (log2(_2444 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            uint _2746 = 0u;
            uint _2755;
            bool _2756;
            for (;;)
            {
                _2755 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                _2756 = _2755 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2756)
                {
                    frontier_phi_68_pred = _2742;
                    frontier_phi_68_pred_1 = _2745;
                    frontier_phi_68_pred_2 = _2744;
                    frontier_phi_68_pred_3 = _2743;
                    frontier_phi_68_pred_4 = _2741;
                    frontier_phi_68_pred_5 = _2740;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2755;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2746 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _2442;
                        float _2952 = _2911.y - _2443;
                        float _2953 = _2911.z - _2444;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_688, _691, _694), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4328 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _2442;
                        float _2987 = (-0.0) - _2443;
                        float _2988 = (-0.0) - _2444;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3003 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _748;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_688, _691, _694), vec3(_2993, _2994, _2995));
                        float _4344 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3028 = dot(vec3(_688, _691, _694), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4355 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2971 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2961) + _3037;
                        float _4366 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4377 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3063 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3035 * _3035) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2815 = (_2982 * _2930.x) + _2888;
                        _2816 = (_2982 * _2930.y) + _2889;
                        _2817 = (_2982 * _2930.z) + _2890;
                        _2812 = (_3063 * _2947.x) + _2885;
                        _2813 = (_3063 * _2947.y) + _2886;
                        _2814 = (_3063 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_68_pred = _2814;
                    frontier_phi_68_pred_1 = _2817;
                    frontier_phi_68_pred_2 = _2816;
                    frontier_phi_68_pred_3 = _2815;
                    frontier_phi_68_pred_4 = _2813;
                    frontier_phi_68_pred_5 = _2812;
                }
                _2593 = frontier_phi_68_pred;
                _2599 = frontier_phi_68_pred_1;
                _2597 = frontier_phi_68_pred_2;
                _2595 = frontier_phi_68_pred_3;
                _2591 = frontier_phi_68_pred_4;
                _2589 = frontier_phi_68_pred_5;
                uint _2747 = _2746 + 1u;
                if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2740 = _2589;
                    _2741 = _2591;
                    _2742 = _2593;
                    _2743 = _2595;
                    _2744 = _2597;
                    _2745 = _2599;
                    _2746 = _2747;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((4294967295u << _2605) & _2488) == 0u)
        {
            _2708 = _2588;
            _2710 = _2590;
            _2712 = _2592;
            _2714 = _2594;
            _2716 = _2596;
            _2718 = _2598;
        }
        else
        {
            float _2733 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
            float _2734 = _2733 * _2442;
            float _2735 = _2733 * _2443;
            float _2736 = _2733 * _2444;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2868 = _2588;
                float _2869 = _2590;
                float _2870 = _2592;
                float _2871 = _2594;
                float _2872 = _2596;
                float _2873 = _2598;
                uint _2874 = _2605;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2884)
                    {
                        frontier_phi_79_pred = _2873;
                        frontier_phi_79_pred_1 = _2872;
                        frontier_phi_79_pred_2 = _2871;
                        frontier_phi_79_pred_3 = _2870;
                        frontier_phi_79_pred_4 = _2869;
                        frontier_phi_79_pred_5 = _2868;
                    }
                    else
                    {
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        uint _3096 = _2883;
                        uint _3097;
                        vec4 _3122;
                        float _3123;
                        vec4 _3138;
                        vec3 _3150;
                        vec4 _3166;
                        vec4 _3182;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3107 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3096));
                            _3097 = (_3096 + 4294967295u) & _3096;
                            uint _3109 = _3107 * 40u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3123 = _3122.w;
                            uint _3125 = (_3107 * 40u) + 4u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3107 * 40u) + 8u;
                            _3150 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x));
                            uint _3153 = (_3107 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3107 * 40u) + 20u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3107 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3107 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_2444, _3217.z, fma(_2443, _3217.y, _3217.x * _2442)) + _3217.w;
                            _3230 = !((fma(_2444, _3198.z, fma(_2443, _3198.y, _3198.x * _2442)) + _3198.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3122.x - _2442;
                                float _3258 = _3122.y - _2443;
                                float _3259 = _3122.z - _2444;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3123 * _3123));
                                float _4388 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3275 = sqrt(_3260) * _3138.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_688, _691, _694))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_2444, _3166.z, fma(_2443, _3166.y, _3166.x * _2442)) + _3166.w) / _3229;
                                float _3289 = (fma(_2444, _3182.z, fma(_2443, _3182.y, _3182.x * _2442)) + _3182.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4404 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _748;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2734;
                                float _3319 = _3265 - _2735;
                                float _3320 = _3266 - _2736;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_688, _691, _694), vec3((-0.0) - _2734, (-0.0) - _2735, (-0.0) - _2736));
                                float _4415 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3332 = dot(vec3(_688, _691, _694), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4426 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_688, _691, _694), vec3(_3264, _3265, _3266))) + _3341;
                                float _4437 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4448 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3295 * _3138.z;
                                frontier_phi_85_pred_1 = _3295 * _3138.y;
                                frontier_phi_85_pred_2 = _3295 * _3138.x;
                                frontier_phi_85_pred_3 = _3369 * _3150.z;
                                frontier_phi_85_pred_4 = _3369 * _3150.y;
                                frontier_phi_85_pred_5 = _3369 * _3150.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_85_pred;
                            _3377 = frontier_phi_85_pred_1;
                            _3376 = frontier_phi_85_pred_2;
                            _3375 = frontier_phi_85_pred_3;
                            _3374 = frontier_phi_85_pred_4;
                            _3373 = frontier_phi_85_pred_5;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            _3079 = _3375 + _3092;
                            if (_3097 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3097;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3082;
                        frontier_phi_79_pred_1 = _3081;
                        frontier_phi_79_pred_2 = _3080;
                        frontier_phi_79_pred_3 = _3079;
                        frontier_phi_79_pred_4 = _3078;
                        frontier_phi_79_pred_5 = _3077;
                    }
                    _2719 = frontier_phi_79_pred;
                    _2717 = frontier_phi_79_pred_1;
                    _2715 = frontier_phi_79_pred_2;
                    _2713 = frontier_phi_79_pred_3;
                    _2711 = frontier_phi_79_pred_4;
                    _2709 = frontier_phi_79_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2709;
                        _2869 = _2711;
                        _2870 = _2713;
                        _2871 = _2715;
                        _2872 = _2717;
                        _2873 = _2719;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2715;
                frontier_phi_60_61_ladder_1 = _2719;
                frontier_phi_60_61_ladder_2 = _2717;
                frontier_phi_60_61_ladder_3 = _2713;
                frontier_phi_60_61_ladder_4 = _2711;
                frontier_phi_60_61_ladder_5 = _2709;
            }
            else
            {
                frontier_phi_60_61_ladder = _2594;
                frontier_phi_60_61_ladder_1 = _2598;
                frontier_phi_60_61_ladder_2 = _2596;
                frontier_phi_60_61_ladder_3 = _2592;
                frontier_phi_60_61_ladder_4 = _2590;
                frontier_phi_60_61_ladder_5 = _2588;
            }
            _2708 = frontier_phi_60_61_ladder_5;
            _2710 = frontier_phi_60_61_ladder_4;
            _2712 = frontier_phi_60_61_ladder_3;
            _2714 = frontier_phi_60_61_ladder;
            _2716 = frontier_phi_60_61_ladder_2;
            _2718 = frontier_phi_60_61_ladder_1;
        }
        float _2723 = isnan(1.0) ? _732 : (isnan(_732) ? 1.0 : min(_732, 1.0));
        _2500 = (_2723 * _2714) + _1953;
        _2502 = (_2723 * _2716) + _1955;
        _2504 = (_2723 * _2718) + _1957;
        _2506 = ((_2708 * 0.039999999105930328369140625) * _2723) + _2286;
        _2508 = ((_2710 * 0.039999999105930328369140625) * _2723) + _2288;
        _2510 = ((_2712 * 0.039999999105930328369140625) * _2723) + _2290;
    }
    else
    {
        _2500 = _1953;
        _2502 = _1955;
        _2504 = _1957;
        _2506 = _2286;
        _2508 = _2288;
        _2510 = _2290;
    }
    float _4464 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4475 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4486 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _2527 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2500 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _732))) + ((_2506 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2528 = ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2502 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _732))) + ((_2508 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2529 = ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2504 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _732))) + ((_2510 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    uint _2530 = _707 + 6u;
    float _2538 = _669 / cbSceneParam._m0[86u].x;
    float _2539 = _670 / cbSceneParam._m0[86u].y;
    vec4 _2553 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2555 = _2553.x;
    float _2556 = _2553.y;
    float _2557 = _2553.z;
    float _2558 = _2553.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2614 = _2613 / _591;
        float _2625 = _2614 * _642;
        float _2626 = _643 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2628 = _2614 * _644;
        float _2630 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2626;
        float _2638 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2825;
        if (abs((_2627 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2825 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2769 = 1.0 / cbSceneParam._m0[80u].x;
            float _2770 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2771 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            _2825 = ((abs(_2638 / _2627) * cbSceneParam._m0[80u].y) * ((((_2780 - _2781) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))))) * _2769)) - ((exp2(_2648 * _2780) - exp2(_2648 * _2781)) * _2769))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _2827 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, 1.0), 0.0);
        float _2836 = exp2((_2825 * (-1.44269502162933349609375)) * (1.0 - _2827.w));
        float _2837 = log2(_2836);
        float _2853 = log2(_2558);
        _2650 = (exp2(_2853 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].x)) * _2827.x) / cbSceneParam._m0[78u].x)) + _2555;
        _2652 = (exp2(_2853 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].y)) * _2827.y) / cbSceneParam._m0[78u].y)) + _2556;
        _2654 = (exp2(_2853 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2837 * cbSceneParam._m0[78u].z)) * _2827.z) / cbSceneParam._m0[78u].z)) + _2557;
        _2656 = _2836 * _2558;
    }
    else
    {
        _2650 = _2555;
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
    }
    bool _2863;
    vec4 _2666;
    vec4 _2688;
    float _2690;
    float _2694;
    float _2695;
    float _2696;
    float _2697;
    bool _2707;
    for (;;)
    {
        _2666 = cbMatDynParam._m0[0u];
        float _2668 = roundEven(_2666.y);
        bool _2669 = _2668 == 3.0;
        float _2670 = log2(_2656);
        float _2677 = exp2(_2670 * cbSceneParam._m0[78u].x) * _2527;
        float _2678 = exp2(_2670 * cbSceneParam._m0[78u].y) * _2528;
        float _2679 = exp2(_2670 * cbSceneParam._m0[78u].z) * _2529;
        float _2686 = _658 + (-0.5);
        _2688 = cbMtdParam._m0[1u];
        _2690 = _2688.y * _2686;
        float _2693 = (_2668 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2694 = _2693 * (_2669 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2650)));
        _2695 = _2693 * (_2669 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
        _2696 = _2693 * (_2669 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
        _2697 = _2686 * 0.999000012874603271484375;
        _2707 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2707)
        {
            if ((cbInstanceData._m0[_707 + 7u].x + _2697) < 0.5)
            {
                _2863 = true;
                break;
            }
        }
        uint _2804 = _708 + uint(_2666.w);
        if ((cbInstanceData._m0[_2804].w < 1.0) && ((cbInstanceData._m0[_2804].w + _2697) < 0.5))
        {
            _2863 = true;
            break;
        }
        if ((_2690 + 1.0) < _2688.x)
        {
            _2863 = true;
            break;
        }
        _2863 = false;
        break;
    }
    float _3068;
    if (_2863)
    {
        discard_state = true;
        _3068 = 0.0;
    }
    else
    {
        _3068 = cbInstanceData._m0[_2530].w;
    }
    SV_Target.x = _2694;
    SV_Target.y = _2695;
    SV_Target.z = _2696;
    SV_Target.w = _3068;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2530].w;
    discard_exit();
}


