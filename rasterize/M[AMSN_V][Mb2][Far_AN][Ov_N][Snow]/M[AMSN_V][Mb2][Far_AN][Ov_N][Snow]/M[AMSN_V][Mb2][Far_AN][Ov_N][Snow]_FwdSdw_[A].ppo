#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1134;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _271 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3795 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _272 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _286 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3806 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _299 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _316 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _318 = _316.x;
    float _319 = _316.y;
    float _320 = _316.z;
    vec4 _350 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _354 = _350.z;
    vec4 _366 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _380 = (((_366.x - _352) * _287) + _352) * cbMtdParam._m0[10u].x;
    float _381 = (((_366.y - _353) * _287) + _353) * cbMtdParam._m0[10u].y;
    float _382 = (((_366.z - _354) * _287) + _354) * cbMtdParam._m0[10u].z;
    float _389 = ((((((_299.x - _318) * _287) + _318) * cbMtdParam._m0[11u].x) - _380) * _272) + _380;
    float _390 = ((((((_299.y - _319) * _287) + _319) * cbMtdParam._m0[11u].y) - _381) * _272) + _381;
    float _391 = ((((((_299.z - _320) * _287) + _320) * cbMtdParam._m0[11u].z) - _382) * _272) + _382;
    vec4 _409 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _411 = _409.x;
    float _412 = _409.y;
    float _413 = _409.z;
    vec4 _426 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _437 = ((_426.x - _411) * _287) + _411;
    float _438 = ((_426.y - _412) * _287) + _412;
    float _439 = ((_426.z - _413) * _287) + _413;
    vec4 _451 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _462 = ((_451.x - _437) * _272) + _437;
    float _463 = ((_451.y - _438) * _272) + _438;
    float _467 = (_462 * 2.0) + (-1.0);
    float _468 = (_463 * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3817 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    float _477 = fma(_474, _230, fma(_468, _223, _467 * _209));
    float _480 = fma(_474, _231, fma(_468, _224, _467 * _210));
    float _483 = fma(_474, _232, fma(_468, _225, _467 * _211));
    float _487 = inversesqrt(dot(vec3(_477, _480, _483), vec3(_477, _480, _483)));
    float _495 = cbMtdParam._m0[13u].x + dot(vec4(_487 * _477, _487 * _480, _487 * _483, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3828 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _503 = (_496 * (cbMtdParam._m0[9u].x - _389)) + _389;
    float _504 = (_496 * (cbMtdParam._m0[9u].y - _390)) + _390;
    float _505 = (_496 * (cbMtdParam._m0[9u].z - _391)) + _391;
    float _507 = (((_451.z - _439) * _272) + _439) + cbMtdParam._m0[12u].w;
    float _516 = (((cbMtdParam._m0[13u].z * _462) - _462) * _287) + _462;
    float _517 = (((cbMtdParam._m0[13u].w * _463) - _463) * _287) + _463;
    vec4 _537 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _550 = (((((_437 - _516) * _496) + _516) + ((_537.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _551 = (((((_438 - _517) * _496) + _517) + ((_537.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3839 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))));
    float _560 = fma(_557, _230, fma(_551, _223, _550 * _209));
    float _563 = fma(_557, _231, fma(_551, _224, _550 * _210));
    float _566 = fma(_557, _232, fma(_551, _225, _550 * _211));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    float _571 = _570 * _560;
    float _572 = _570 * _563;
    float _573 = _570 * _566;
    float _3850 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _574 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3872 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3883 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _644 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _634);
    float _645 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _634);
    float _646 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _634);
    float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
    float _651 = _644 * _650;
    float _652 = _645 * _650;
    float _653 = _646 * _650;
    vec4 _658 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _660 = _658.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _814 = sqrt(((_644 * _644) + (_645 * _645)) + (_646 * _646));
        float _820 = (cbMatDynParam._m0[5u].x * _814) + cbMatDynParam._m0[5u].y;
        float _3894 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _825 = (cbMatDynParam._m0[5u].z * _814) + cbMatDynParam._m0[5u].w;
        float _3905 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) - _821)) + _821) < ((_660 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _690 = fma(_573, cbSceneParam._m0[5u].z, fma(_572, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _571));
    float _693 = fma(_573, cbSceneParam._m0[6u].z, fma(_572, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _571));
    float _696 = fma(_573, cbSceneParam._m0[7u].z, fma(_572, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _571));
    uint _709 = uint(roundEven(NORMAL.w)) * 13u;
    uint _710 = _709 + 9u;
    uint _711 = _710 + uint(cbMatDynParam._m0[0u].w);
    float _717 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_711].x;
    float _718 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_711].y;
    float _719 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_711].z;
    float _3916 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    vec4 _731 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _734 = _731.x * TEXCOORD_3.w;
    float _735 = dot(vec3(_571, _572, _573), vec3(_651, _652, _653));
    float _738 = _735 * 2.0;
    float _742 = (_738 * _571) - _651;
    float _743 = (_738 * _572) - _652;
    float _744 = (_738 * _573) - _653;
    float _748 = abs(dot(vec3(_651, _652, _653), vec3(_571, _572, _573)));
    float _3949 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _750 = sqrt(_574);
    float _763 = exp2((_750 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_750 * 3.0));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _859 = fma(_803, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795));
        float _863 = fma(_803, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795));
        float _867 = fma(_803, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795));
        float _891 = _795 + _571;
        float _892 = _799 + _572;
        float _893 = _803 + _573;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _859;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _863;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _867;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_859 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_863 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_867 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_571, _572, _573), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3997 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_571, _572, _573), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4030 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_571, _572, _573), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4063 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_803, cbModelParam._m0[30u].z, fma(_799, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795));
        float _1181 = fma(_803, cbModelParam._m0[31u].z, fma(_799, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795));
        float _1185 = fma(_803, cbModelParam._m0[32u].z, fma(_799, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795));
        float _1208 = _795 + _571;
        float _1209 = _799 + _572;
        float _1210 = _803 + _573;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_571, _572, _573), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4126 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_571, _572, _573), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4159 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_571, _572, _573), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4192 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = _1134;
        _1454 = _1134;
        _1455 = _1134;
        _1456 = _1134;
        _1457 = _1134;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1146)) + _1146;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1147)) + _1147;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1148)) + _1148;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _742 * 0.5;
    float _1515 = _743 * 0.5;
    float _1516 = _744 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _574);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1630 = fma(_803, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795)) + cbModelParam._m0[13u].w;
        float _1634 = fma(_803, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795)) + cbModelParam._m0[14u].w;
        float _1638 = fma(_803, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795)) + cbModelParam._m0[15u].w;
        float _1641 = fma(_744, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742));
        float _1644 = fma(_744, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742));
        float _1647 = fma(_744, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742));
        float _1675;
        if (_1641 > 0.0)
        {
            _1675 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1675 = frontier_phi_19_17_ladder;
        }
        float _1848;
        if (_1644 > 0.0)
        {
            _1848 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1848 = frontier_phi_28_24_ladder;
        }
        float _2143;
        if (_1647 > 0.0)
        {
            _2143 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2143 = frontier_phi_40_35_ladder;
        }
        float _2145 = isnan(_1848) ? _1675 : (isnan(_1675) ? _1848 : min(_1675, _1848));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1641) + _1630;
        float _2151 = (_2146 * _1644) + _1634;
        float _2152 = (_2146 * _1647) + _1638;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2153;
        float _2157 = _2153 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 > _2157) || ((_2151 < _2155) || ((_2150 < _2155) || (_2150 > _2157))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2152, cbModelParam._m0[9u].z, fma(_2151, cbModelParam._m0[9u].y, _2150 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2152, cbModelParam._m0[10u].z, fma(_2151, cbModelParam._m0[10u].y, _2150 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2152, cbModelParam._m0[11u].z, fma(_2151, cbModelParam._m0[11u].y, _2150 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_18_40_ladder = _2297.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2297.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2297.x * cbModelParam._m0[1u].y;
        }
        _1663 = frontier_phi_18_40_ladder_2;
        _1665 = frontier_phi_18_40_ladder_1;
        _1667 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_742, _743, _744), _1583);
        _1663 = _1651.x * cbModelParam._m0[1u].y;
        _1665 = _1651.y * cbModelParam._m0[1u].y;
        _1667 = _1651.z * cbModelParam._m0[1u].y;
    }
    float _1671 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _574);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1671 : min(cbModelParam._m0[25u].w, _1671));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1729 = fma(_803, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795)) + cbModelParam._m0[21u].w;
        float _1733 = fma(_803, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795)) + cbModelParam._m0[22u].w;
        float _1737 = fma(_803, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795)) + cbModelParam._m0[23u].w;
        float _1740 = fma(_744, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742));
        float _1743 = fma(_744, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742));
        float _1746 = fma(_744, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742));
        float _1853;
        if (_1740 > 0.0)
        {
            _1853 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1853 = frontier_phi_30_26_ladder;
        }
        float _2170;
        if (_1743 > 0.0)
        {
            _2170 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2170 = frontier_phi_42_37_ladder;
        }
        float _2497;
        if (_1746 > 0.0)
        {
            _2497 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2497 = frontier_phi_52_49_ladder;
        }
        float _2499 = isnan(_2170) ? _1853 : (isnan(_1853) ? _2170 : min(_1853, _2170));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1740) + _1729;
        float _2505 = (_2500 * _1743) + _1733;
        float _2506 = (_2500 * _1746) + _1737;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1672);
            frontier_phi_27_52_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1765 = frontier_phi_27_52_ladder_2;
        _1767 = frontier_phi_27_52_ladder_1;
        _1769 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_742, _743, _744), _1672);
        _1765 = _1749.x * cbModelParam._m0[1u].z;
        _1767 = _1749.y * cbModelParam._m0[1u].z;
        _1769 = _1749.z * cbModelParam._m0[1u].z;
    }
    float _1781 = ((((1.0 - _763) * ((_750 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_763 * _750)) * _734;
    float _1782 = _1781 * ((cbModelParam._m0[1u].w * (_1765 - _1663)) + _1663);
    float _1783 = _1781 * ((cbModelParam._m0[1u].w * (_1767 - _1665)) + _1665);
    float _1784 = _1781 * ((cbModelParam._m0[1u].w * (_1769 - _1667)) + _1667);
    float _1787 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, _1782 * cbSceneParam._m0[91u].x));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1839 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1840 = _1827 / _1839;
    float _1841 = _1831 / _1839;
    float _1842 = _1835 / _1839;
    float _1989;
    float _1990;
    float _1991;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1869 = ((uint(_1842 > cbSceneParam._m0[59u].y) + uint(_1842 > cbSceneParam._m0[59u].x)) + uint(_1842 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1870 = _1869 + 43u;
        uint _1878 = _1869 + 44u;
        uint _1886 = _1869 + 45u;
        uint _1894 = _1869 + 46u;
        float _1905 = fma(_1839, cbSceneParam._m0[_1870].w, fma(_1835, cbSceneParam._m0[_1870].z, fma(_1831, cbSceneParam._m0[_1870].y, _1827 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1839, cbSceneParam._m0[_1878].w, fma(_1835, cbSceneParam._m0[_1878].z, fma(_1831, cbSceneParam._m0[_1878].y, _1827 * cbSceneParam._m0[_1878].x)));
        float _1917 = fma(_1839, cbSceneParam._m0[_1894].w, fma(_1835, cbSceneParam._m0[_1894].z, fma(_1831, cbSceneParam._m0[_1894].y, _1827 * cbSceneParam._m0[_1894].x)));
        float _1922 = cbSceneParam._m0[33u].z * _1917;
        float _1924 = cbSceneParam._m0[33u].w * _1917;
        float _1927 = fma(_1839, cbSceneParam._m0[_1886].w, fma(_1835, cbSceneParam._m0[_1886].z, fma(_1831, cbSceneParam._m0[_1886].y, _1827 * cbSceneParam._m0[_1886].x))) / _1917;
        float _1975 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
        float _4318 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1982 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 + _1905) / _1917, (_1924 + _1909) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1924 + _1905) / _1917, (_1909 - _1922) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1922) / _1917, (_1909 - _1924) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1924) / _1917, (_1922 + _1909) / _1917), _1927), 0.0)).x), vec4(0.25)));
        _1989 = 1.0 - (_1982 * cbSceneParam._m0[34u].x);
        _1990 = 1.0 - (_1982 * cbSceneParam._m0[34u].y);
        _1991 = 1.0 - (_1982 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1989 = 1.0;
        _1990 = 1.0;
        _1991 = 1.0;
    }
    float _2055;
    float _2057;
    float _2059;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2043 = fma(_1839, cbSceneParam._m0[63u].w, fma(_1835, cbSceneParam._m0[63u].z, fma(_1831, cbSceneParam._m0[63u].y, _1827 * cbSceneParam._m0[63u].x)));
        float _2044 = fma(_1839, cbSceneParam._m0[60u].w, fma(_1835, cbSceneParam._m0[60u].z, fma(_1831, cbSceneParam._m0[60u].y, _1827 * cbSceneParam._m0[60u].x))) / _2043;
        float _2045 = fma(_1839, cbSceneParam._m0[61u].w, fma(_1835, cbSceneParam._m0[61u].z, fma(_1831, cbSceneParam._m0[61u].y, _1827 * cbSceneParam._m0[61u].x))) / _2043;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2044 >= cbSceneParam._m0[64u].x) && (_2045 >= cbSceneParam._m0[64u].y)) && (_2044 <= cbSceneParam._m0[64u].z)) && (_2045 <= cbSceneParam._m0[64u].w))
        {
            float _2183 = fma(_1839, cbSceneParam._m0[62u].w, fma(_1835, cbSceneParam._m0[62u].z, fma(_1831, cbSceneParam._m0[62u].y, _1827 * cbSceneParam._m0[62u].x))) / _2043;
            float _2187 = isnan(cbSceneParam._m0[41u].w) ? _2183 : (isnan(_2183) ? cbSceneParam._m0[41u].w : max(_2183, cbSceneParam._m0[41u].w));
            float _2230 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
            float _4334 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
            float _2237 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2044, cbSceneParam._m0[33u].w + _2045), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2044, _2045 - cbSceneParam._m0[33u].z), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].z, _2045 - cbSceneParam._m0[33u].w), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2045), _2187), 0.0)).x), vec4(0.25)));
            float _2241 = 1.0 - (_2237 * cbSceneParam._m0[34u].x);
            float _2242 = 1.0 - (_2237 * cbSceneParam._m0[34u].y);
            float _2243 = 1.0 - (_2237 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2242) ? _1990 : (isnan(_1990) ? _2242 : min(_1990, _2242));
            frontier_phi_39_38_ladder_1 = isnan(_2241) ? _1989 : (isnan(_1989) ? _2241 : min(_1989, _2241));
            frontier_phi_39_38_ladder_2 = isnan(_2243) ? _1991 : (isnan(_1991) ? _2243 : min(_1991, _2243));
        }
        else
        {
            frontier_phi_39_38_ladder = _1990;
            frontier_phi_39_38_ladder_1 = _1989;
            frontier_phi_39_38_ladder_2 = _1991;
        }
        _2055 = frontier_phi_39_38_ladder_1;
        _2057 = frontier_phi_39_38_ladder;
        _2059 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2055 = _1989;
        _2057 = _1990;
        _2059 = _1991;
    }
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_709 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _734 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2102 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2106 = _2066 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_571, _572, _573));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_571, _572, _573));
    float _4370 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4381 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2083].x * _2089) * _2127) + (((cbLight._m0[_2093].x * _2055) * _2102) * _2125);
    float _2135 = ((_2089 * cbLight._m0[_2083].y) * _2127) + (((cbLight._m0[_2093].y * _2057) * _2102) * _2125);
    float _2136 = ((_2089 * cbLight._m0[_2083].z) * _2127) + (((cbLight._m0[_2093].z * _2059) * _2102) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2142)
    {
        _2244 = _2134;
        _2246 = _2135;
        _2248 = _2136;
    }
    else
    {
        uint _2252 = _2066 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4392 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2271 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2134;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2135;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2136;
    }
    bool _2251 = _2140.y == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2251)
    {
        _2306 = _2244;
        _2308 = _2246;
        _2310 = _2248;
    }
    else
    {
        uint _2468 = _2066 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4408 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2487 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2306 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2244;
        _2308 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2246;
        _2310 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2248;
    }
    uint _2313 = _2066 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _574) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2066].x + _651;
    float _2329 = cbLight._m0[_2066].y + _652;
    float _2330 = cbLight._m0[_2066].z + _653;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2066].xyz));
    float _4424 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _2342 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2343 = dot(vec3(_571, _572, _573), vec3(_2335, _2336, _2337));
    float _4446 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2335, _2336, _2337));
    float _4457 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2342 * ((_2341 * _2367) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2367) + _2327) * _2341))) * _2341;
    float _4468 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2394 = _2066 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _574) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2106].x + _651;
    float _2408 = cbLight._m0[_2106].y + _652;
    float _2409 = cbLight._m0[_2106].z + _653;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2106].xyz));
    float _4479 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2421 = dot(vec3(_571, _572, _573), vec3(_2414, _2415, _2416));
    float _4490 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2414, _2415, _2416));
    float _4501 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2443 = 1.0 - _2406;
    float _2453 = (0.5 / (((_2342 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2443) + _2406) * _2420))) * _2420;
    float _4512 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2465 = (((_2442 * cbLight._m0[_2394].x) * _2455) * _2089) + ((((cbLight._m0[_2313].x * _2055) * _2366) * _2380) * _2102);
    float _2466 = (((_2442 * cbLight._m0[_2394].y) * _2455) * _2089) + ((((cbLight._m0[_2313].y * _2057) * _2366) * _2380) * _2102);
    float _2467 = (((_2442 * cbLight._m0[_2394].z) * _2455) * _2089) + ((((cbLight._m0[_2313].z * _2059) * _2366) * _2380) * _2102);
    float _2523;
    float _2525;
    float _2527;
    if (_2142)
    {
        _2523 = _2465;
        _2525 = _2466;
        _2527 = _2467;
    }
    else
    {
        uint _2529 = _2066 + 2u;
        uint _2533 = _2066 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _574) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _651;
        float _2550 = cbLight._m0[_2529].y + _652;
        float _2551 = cbLight._m0[_2529].z + _653;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2529].xyz));
        float _4523 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2563 = dot(vec3(_571, _572, _573), vec3(_2556, _2557, _2558));
        float _4534 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4545 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2585 = 1.0 - _2548;
        float _2595 = (0.5 / (((_2342 * ((_2562 * _2585) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2585) + _2548) * _2562))) * _2562;
        float _4556 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2523 = (((_2584 * cbLight._m0[_2533].x) * _2597) * _2598) + _2465;
        _2525 = (((_2584 * cbLight._m0[_2533].y) * _2597) * _2598) + _2466;
        _2527 = (((_2584 * cbLight._m0[_2533].z) * _2597) * _2598) + _2467;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2251)
    {
        _2629 = _2523;
        _2631 = _2525;
        _2633 = _2527;
    }
    else
    {
        uint _2640 = _2066 + 3u;
        uint _2644 = _2066 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _574) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _651;
        float _2661 = cbLight._m0[_2640].y + _652;
        float _2662 = cbLight._m0[_2640].z + _653;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2640].xyz));
        float _4572 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2674 = dot(vec3(_571, _572, _573), vec3(_2667, _2668, _2669));
        float _4583 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4594 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2342 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2696) + _2659) * _2673))) * _2673;
        float _4605 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2523;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2525;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2527;
    }
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2064.y == 0u)
    {
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2731)));
        float _2752 = (log2(_1842 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            uint _2999 = 0u;
            uint _3008;
            bool _3009;
            for (;;)
            {
                _3008 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                _3009 = _3008 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3009)
                {
                    frontier_phi_73_pred = _2998;
                    frontier_phi_73_pred_1 = _2997;
                    frontier_phi_73_pred_2 = _2996;
                    frontier_phi_73_pred_3 = _2995;
                    frontier_phi_73_pred_4 = _2994;
                    frontier_phi_73_pred_5 = _2993;
                }
                else
                {
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    uint _3144;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _3008;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3148 = uint(findLSB(_3144)) + (_2999 << 5u);
                        uint _3145 = (_3144 + 4294967295u) & _3144;
                        uint _3150 = _3148 * 48u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3170 = (_3148 * 48u) + 4u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3189 = (_3148 * 48u) + 8u;
                        vec3 _3200 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x));
                        float _3204 = _3164.x - _1840;
                        float _3205 = _3164.y - _1841;
                        float _3206 = _3164.z - _1842;
                        float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                        float _3210 = inversesqrt(_3207);
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3214 = dot(vec3(_690, _693, _696), vec3(_3211, _3212, _3213));
                        float _3219 = 1.0 - (_3207 * _3164.w);
                        float _4631 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3221 = sqrt(_3207) * _3183.w;
                        float _3224 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3214) + _3225;
                        float _3231 = _3221 * _3221;
                        float _3235 = ((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3220) / ((_3231 * 0.699999988079071044921875) + 1.0);
                        float _3239 = (-0.0) - _1840;
                        float _3240 = (-0.0) - _1841;
                        float _3241 = (-0.0) - _1842;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3255 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _750;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3268 = _3248 + _3213;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_690, _693, _696), vec3(_3246, _3247, _3248));
                        float _4647 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3280 = dot(vec3(_690, _693, _696), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4658 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3224 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3214) + _3289;
                        float _4669 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4680 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3287 * _3287) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125))) * _3220;
                        _3068 = (_3235 * _3183.x) + _3141;
                        _3069 = (_3235 * _3183.y) + _3142;
                        _3070 = (_3235 * _3183.z) + _3143;
                        _3065 = (_3315 * _3200.x) + _3138;
                        _3066 = (_3315 * _3200.y) + _3139;
                        _3067 = (_3315 * _3200.z) + _3140;
                        if (_3145 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3145;
                        }
                    }
                    frontier_phi_73_pred = _3070;
                    frontier_phi_73_pred_1 = _3069;
                    frontier_phi_73_pred_2 = _3068;
                    frontier_phi_73_pred_3 = _3067;
                    frontier_phi_73_pred_4 = _3066;
                    frontier_phi_73_pred_5 = _3065;
                }
                _2852 = frontier_phi_73_pred;
                _2850 = frontier_phi_73_pred_1;
                _2848 = frontier_phi_73_pred_2;
                _2846 = frontier_phi_73_pred_3;
                _2844 = frontier_phi_73_pred_4;
                _2842 = frontier_phi_73_pred_5;
                uint _3000 = _2999 + 1u;
                if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2993 = _2842;
                    _2994 = _2844;
                    _2995 = _2846;
                    _2996 = _2848;
                    _2997 = _2850;
                    _2998 = _2852;
                    _2999 = _3000;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((4294967295u << _2858) & _2762) == 0u)
        {
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
            _2967 = _2847;
            _2969 = _2849;
            _2971 = _2851;
        }
        else
        {
            float _2986 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
            float _2987 = _2986 * _1840;
            float _2988 = _2986 * _1841;
            float _2989 = _2986 * _1842;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _3121 = _2841;
                float _3122 = _2843;
                float _3123 = _2845;
                float _3124 = _2847;
                float _3125 = _2849;
                float _3126 = _2851;
                uint _3127 = _2858;
                uint _3136;
                bool _3137;
                for (;;)
                {
                    _3136 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                    _3137 = _3136 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3137)
                    {
                        frontier_phi_84_pred = _3125;
                        frontier_phi_84_pred_1 = _3124;
                        frontier_phi_84_pred_2 = _3123;
                        frontier_phi_84_pred_3 = _3122;
                        frontier_phi_84_pred_4 = _3121;
                        frontier_phi_84_pred_5 = _3126;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        uint _3348 = _3136;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3418;
                        vec4 _3434;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3359 = ((_3127 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3405 = (_3359 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3421 = (_3359 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3437 = (_3359 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3359 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_1842, _3469.z, fma(_1841, _3469.y, _3469.x * _1840)) + _3469.w;
                            _3482 = !((fma(_1842, _3450.z, fma(_1841, _3450.y, _3450.x * _1840)) + _3450.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3374.x - _1840;
                                float _3510 = _3374.y - _1841;
                                float _3511 = _3374.z - _1842;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3375 * _3375));
                                float _4691 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3527 = sqrt(_3512) * _3390.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_690, _693, _696))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_1842, _3418.z, fma(_1841, _3418.y, _3418.x * _1840)) + _3418.w) / _3481;
                                float _3541 = (fma(_1842, _3434.z, fma(_1841, _3434.y, _3434.x * _1840)) + _3434.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4707 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _750;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _2987;
                                float _3571 = _3517 - _2988;
                                float _3572 = _3518 - _2989;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_690, _693, _696), vec3((-0.0) - _2987, (-0.0) - _2988, (-0.0) - _2989));
                                float _4718 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3584 = dot(vec3(_690, _693, _696), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4729 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_690, _693, _696), vec3(_3516, _3517, _3518))) + _3593;
                                float _4740 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4751 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3547 * _3390.y;
                                frontier_phi_90_pred_1 = _3547 * _3390.x;
                                frontier_phi_90_pred_2 = _3621 * _3402.z;
                                frontier_phi_90_pred_3 = _3621 * _3402.y;
                                frontier_phi_90_pred_4 = _3621 * _3402.x;
                                frontier_phi_90_pred_5 = _3547 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3629 = frontier_phi_90_pred;
                            _3628 = frontier_phi_90_pred_1;
                            _3627 = frontier_phi_90_pred_2;
                            _3626 = frontier_phi_90_pred_3;
                            _3625 = frontier_phi_90_pred_4;
                            _3630 = frontier_phi_90_pred_5;
                            _3332 = _3628 + _3345;
                            _3333 = _3629 + _3346;
                            _3334 = _3630 + _3347;
                            _3329 = _3625 + _3342;
                            _3330 = _3626 + _3343;
                            _3331 = _3627 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3333;
                        frontier_phi_84_pred_1 = _3332;
                        frontier_phi_84_pred_2 = _3331;
                        frontier_phi_84_pred_3 = _3330;
                        frontier_phi_84_pred_4 = _3329;
                        frontier_phi_84_pred_5 = _3334;
                    }
                    _2970 = frontier_phi_84_pred;
                    _2968 = frontier_phi_84_pred_1;
                    _2966 = frontier_phi_84_pred_2;
                    _2964 = frontier_phi_84_pred_3;
                    _2962 = frontier_phi_84_pred_4;
                    _2972 = frontier_phi_84_pred_5;
                    uint _3128 = _3127 + 1u;
                    if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3121 = _2962;
                        _3122 = _2964;
                        _3123 = _2966;
                        _3124 = _2968;
                        _3125 = _2970;
                        _3126 = _2972;
                        _3127 = _3128;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2972;
                frontier_phi_65_66_ladder_1 = _2968;
                frontier_phi_65_66_ladder_2 = _2970;
                frontier_phi_65_66_ladder_3 = _2964;
                frontier_phi_65_66_ladder_4 = _2962;
                frontier_phi_65_66_ladder_5 = _2966;
            }
            else
            {
                frontier_phi_65_66_ladder = _2851;
                frontier_phi_65_66_ladder_1 = _2847;
                frontier_phi_65_66_ladder_2 = _2849;
                frontier_phi_65_66_ladder_3 = _2843;
                frontier_phi_65_66_ladder_4 = _2841;
                frontier_phi_65_66_ladder_5 = _2845;
            }
            _2961 = frontier_phi_65_66_ladder_4;
            _2963 = frontier_phi_65_66_ladder_3;
            _2965 = frontier_phi_65_66_ladder_5;
            _2967 = frontier_phi_65_66_ladder_1;
            _2969 = frontier_phi_65_66_ladder_2;
            _2971 = frontier_phi_65_66_ladder;
        }
        float _2976 = isnan(1.0) ? _734 : (isnan(_734) ? 1.0 : min(_734, 1.0));
        _2774 = (_2976 * _2967) + _2306;
        _2776 = (_2976 * _2969) + _2308;
        _2778 = (_2976 * _2971) + _2310;
        _2780 = ((_2961 * 0.039999999105930328369140625) * _2976) + _2629;
        _2782 = ((_2963 * 0.039999999105930328369140625) * _2976) + _2631;
        _2784 = ((_2965 * 0.039999999105930328369140625) * _2976) + _2633;
    }
    else
    {
        _2774 = _2306;
        _2776 = _2308;
        _2778 = _2310;
        _2780 = _2629;
        _2782 = _2631;
        _2784 = _2633;
    }
    float _4767 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4778 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4789 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _2801 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2774 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _734))) + ((_2780 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2802 = ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2776 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _734))) + ((_2782 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2803 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2778 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _734))) + ((_2784 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    uint _2804 = _709 + 6u;
    float _2812 = _671 / cbSceneParam._m0[86u].x;
    float _2813 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2827 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2829 = _2827.x;
    float _2830 = _2827.y;
    float _2831 = _2827.z;
    float _2832 = _2827.w;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2867 = _2866 / _593;
        float _2878 = _2867 * _644;
        float _2879 = _645 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2881 = _2867 * _646;
        float _2883 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2884 = _2883 + cbSceneParam._m0[79u].w;
        float _2885 = cbSceneParam._m0[79u].w - _2879;
        float _2891 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2881 * _2881));
        float _2894 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2891;
        float _2899 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2901 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2880 - _2883) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2884 > 0.0) ? exp2(_2899 * _2884) : (2.0 - exp2(_2901 * _2884))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2894;
        }
        else
        {
            float _3022 = 1.0 / cbSceneParam._m0[80u].x;
            float _3023 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : max(_2884, _2885));
            float _3024 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : min(_2884, _2885));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            _3078 = ((abs(_2891 / _2880) * cbSceneParam._m0[80u].y) * ((((_3033 - _3034) * 2.0) - ((exp2(_2899 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0)))) - exp2(_2899 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))))) * _3022)) - ((exp2(_2901 * _3033) - exp2(_2901 * _3034)) * _3022))) + (_2894 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2832);
        _2903 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2829;
        _2905 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2830;
        _2907 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2831;
        _2909 = _3089 * _2832;
    }
    else
    {
        _2903 = _2829;
        _2905 = _2830;
        _2907 = _2831;
        _2909 = _2832;
    }
    bool _3116;
    vec4 _2919;
    vec4 _2941;
    float _2943;
    float _2947;
    float _2948;
    float _2949;
    float _2950;
    bool _2960;
    for (;;)
    {
        _2919 = cbMatDynParam._m0[0u];
        float _2921 = roundEven(_2919.y);
        bool _2922 = _2921 == 3.0;
        float _2923 = log2(_2909);
        float _2930 = exp2(_2923 * cbSceneParam._m0[78u].x) * _2801;
        float _2931 = exp2(_2923 * cbSceneParam._m0[78u].y) * _2802;
        float _2932 = exp2(_2923 * cbSceneParam._m0[78u].z) * _2803;
        float _2939 = _660 + (-0.5);
        _2941 = cbMtdParam._m0[1u];
        _2943 = _2941.y * _2939;
        float _2946 = (_2921 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2947 = _2946 * (_2922 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2903)));
        _2948 = _2946 * (_2922 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2905)));
        _2949 = _2946 * (_2922 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2907)));
        _2950 = _2939 * 0.999000012874603271484375;
        _2960 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2960)
        {
            if ((cbInstanceData._m0[_709 + 7u].x + _2950) < 0.5)
            {
                _3116 = true;
                break;
            }
        }
        uint _3057 = _710 + uint(_2919.w);
        if ((cbInstanceData._m0[_3057].w < 1.0) && ((cbInstanceData._m0[_3057].w + _2950) < 0.5))
        {
            _3116 = true;
            break;
        }
        if ((_2943 + 1.0) < _2941.x)
        {
            _3116 = true;
            break;
        }
        _3116 = false;
        break;
    }
    float _3320;
    if (_3116)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = cbInstanceData._m0[_2804].w;
    }
    SV_Target.x = _2947;
    SV_Target.y = _2948;
    SV_Target.z = _2949;
    SV_Target.w = _3320;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2804].w;
    discard_exit();
}


