#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1085;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _263 = ((cbMtdParam._m0[12u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3397 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _264 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _278 = (POSITION_1.w - cbMtdParam._m0[12u].y) * (1.0 / cbMtdParam._m0[13u].y);
    float _3408 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _308 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _310 = _308.x;
    float _311 = _308.y;
    float _312 = _308.z;
    vec4 _342 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _344 = _342.x;
    float _345 = _342.y;
    float _346 = _342.z;
    vec4 _358 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _372 = (((_358.x - _344) * _279) + _344) * cbMtdParam._m0[10u].x;
    float _373 = (((_358.y - _345) * _279) + _345) * cbMtdParam._m0[10u].y;
    float _374 = (((_358.z - _346) * _279) + _346) * cbMtdParam._m0[10u].z;
    float _381 = ((((((_291.x - _310) * _279) + _310) * cbMtdParam._m0[11u].x) - _372) * _264) + _372;
    float _382 = ((((((_291.y - _311) * _279) + _311) * cbMtdParam._m0[11u].y) - _373) * _264) + _373;
    float _383 = ((((((_291.z - _312) * _279) + _312) * cbMtdParam._m0[11u].z) - _374) * _264) + _374;
    vec4 _401 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    vec4 _418 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _429 = ((_418.x - _403) * _279) + _403;
    float _430 = ((_418.y - _404) * _279) + _404;
    float _431 = ((_418.z - _405) * _279) + _405;
    vec4 _443 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _454 = ((_443.x - _429) * _264) + _429;
    float _455 = ((_443.y - _430) * _264) + _430;
    float _459 = (_454 * 2.0) + (-1.0);
    float _460 = (_455 * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3419 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _469 = fma(_466, _222, fma(_460, _215, _459 * _201));
    float _472 = fma(_466, _223, fma(_460, _216, _459 * _202));
    float _475 = fma(_466, _224, fma(_460, _217, _459 * _203));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _487 = cbMtdParam._m0[13u].x + dot(vec4(_479 * _469, _479 * _472, _479 * _475, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3430 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _495 = (_488 * (cbMtdParam._m0[9u].x - _381)) + _381;
    float _496 = (_488 * (cbMtdParam._m0[9u].y - _382)) + _382;
    float _497 = (_488 * (cbMtdParam._m0[9u].z - _383)) + _383;
    float _499 = (((_443.z - _431) * _264) + _431) + cbMtdParam._m0[12u].w;
    float _508 = (((cbMtdParam._m0[13u].z * _454) - _454) * _279) + _454;
    float _509 = (((cbMtdParam._m0[13u].w * _455) - _455) * _279) + _455;
    vec4 _529 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _542 = (((((_429 - _508) * _488) + _508) + ((_529.x + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _543 = (((((_430 - _509) * _488) + _509) + ((_529.y + (-0.5)) * cbMtdParam._m0[12u].z)) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3441 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))));
    float _552 = fma(_549, _222, fma(_543, _215, _542 * _201));
    float _555 = fma(_549, _223, fma(_543, _216, _542 * _202));
    float _558 = fma(_549, _224, fma(_543, _217, _542 * _203));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3452 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _566 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3474 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3485 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _636 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _626);
    float _637 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _626);
    float _638 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _626);
    float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
    float _643 = _636 * _642;
    float _644 = _637 * _642;
    float _645 = _638 * _642;
    float _651 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _652 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _670 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _673 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _676 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    uint _689 = uint(roundEven(NORMAL.w)) * 13u;
    uint _691 = (_689 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _697 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_691].x;
    float _698 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_691].y;
    float _699 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_691].z;
    float _3496 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _651, cbSceneParam._m0[86u].y * _652));
    float _714 = _711.x * TEXCOORD_3.w;
    float _715 = dot(vec3(_563, _564, _565), vec3(_643, _644, _645));
    float _718 = _715 * 2.0;
    float _722 = (_718 * _563) - _643;
    float _723 = (_718 * _564) - _644;
    float _724 = (_718 * _565) - _645;
    float _728 = abs(dot(vec3(_643, _644, _645), vec3(_563, _564, _565)));
    float _3529 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _730 = sqrt(_566);
    float _743 = exp2((_730 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_783, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775));
        float _814 = fma(_783, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775));
        float _818 = fma(_783, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775));
        float _842 = _775 + _563;
        float _843 = _779 + _564;
        float _844 = _783 + _565;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _810;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _814;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _818;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_563, _564, _565), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3577 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_563, _564, _565), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3610 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_563, _564, _565), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3643 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1086 = _914;
        _1087 = _913;
        _1088 = _925;
        _1089 = _924;
        _1090 = _923;
        _1091 = _935;
        _1092 = _934;
        _1093 = _933;
        _1094 = _948;
        _1095 = _947;
        _1096 = _946;
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _1085;
        _1086 = _1085;
        _1087 = _1085;
        _1088 = _1085;
        _1089 = _1085;
        _1090 = _1085;
        _1091 = _1085;
        _1092 = _1085;
        _1093 = _1085;
        _1094 = _1085;
        _1095 = _1085;
        _1096 = _1085;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_783, cbModelParam._m0[30u].z, fma(_779, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775));
        float _1129 = fma(_783, cbModelParam._m0[31u].z, fma(_779, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775));
        float _1133 = fma(_783, cbModelParam._m0[32u].z, fma(_779, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775));
        float _1156 = _775 + _563;
        float _1157 = _779 + _564;
        float _1158 = _783 + _565;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_563, _564, _565), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3706 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_563, _564, _565), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3739 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_563, _564, _565), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3772 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1085;
        _1395 = _1085;
        _1396 = _1085;
        _1397 = _1085;
        _1398 = _1085;
        _1399 = _1085;
        _1400 = _1085;
        _1401 = _1085;
        _1402 = _1085;
        _1403 = _1085;
        _1404 = _1085;
        _1405 = _1085;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1098)) + _1098;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1099)) + _1099;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _722 * 0.5;
    float _1463 = _723 * 0.5;
    float _1464 = _724 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1088, _1091, _1094));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_783, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_783, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_783, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1592 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1595 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1623 = frontier_phi_16_14_ladder;
        }
        float _1827;
        if (_1592 > 0.0)
        {
            _1827 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2070;
        if (_1595 > 0.0)
        {
            _2070 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2070 = frontier_phi_37_32_ladder;
        }
        float _2072 = isnan(_1827) ? _1623 : (isnan(_1623) ? _1827 : min(_1623, _1827));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1589) + _1578;
        float _2078 = (_2073 * _1592) + _1582;
        float _2079 = (_2073 * _1595) + _1586;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2082 = (-1.0) - _2080;
        float _2084 = _2080 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2079 > _2084) || ((_2079 < _2082) || ((_2078 > _2084) || ((_2078 < _2082) || ((_2077 < _2082) || (_2077 > _2084))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2079, cbModelParam._m0[9u].z, fma(_2078, cbModelParam._m0[9u].y, _2077 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2079, cbModelParam._m0[10u].z, fma(_2078, cbModelParam._m0[10u].y, _2077 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2079, cbModelParam._m0[11u].z, fma(_2078, cbModelParam._m0[11u].y, _2077 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_15_37_ladder = _2203.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2203.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2203.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_15_37_ladder_2;
        _1613 = frontier_phi_15_37_ladder_1;
        _1615 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_783, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_783, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_783, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1691 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1694 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1832;
        if (_1688 > 0.0)
        {
            _1832 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1832 = frontier_phi_27_23_ladder;
        }
        float _2097;
        if (_1691 > 0.0)
        {
            _2097 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2097 = frontier_phi_39_34_ladder;
        }
        float _2302;
        if (_1694 > 0.0)
        {
            _2302 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2302 = frontier_phi_48_45_ladder;
        }
        float _2304 = isnan(_2097) ? _1832 : (isnan(_1832) ? _2097 : min(_1832, _2097));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1688) + _1677;
        float _2310 = (_2305 * _1691) + _1681;
        float _2311 = (_2305 * _1694) + _1685;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2311, cbModelParam._m0[17u].z, fma(_2310, cbModelParam._m0[17u].y, _2309 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2311, cbModelParam._m0[18u].z, fma(_2310, cbModelParam._m0[18u].y, _2309 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2311, cbModelParam._m0[19u].z, fma(_2310, cbModelParam._m0[19u].y, _2309 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_24_48_ladder = _2509.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2509.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2509.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_24_48_ladder_2;
        _1715 = frontier_phi_24_48_ladder_1;
        _1717 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1620);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1729 = ((((1.0 - _743) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_743 * _730)) * _714;
    float _1730 = _1729 * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1731 = _1729 * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1732 = _1729 * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_689 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _714 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1786 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1790 = _1753 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_563, _564, _565));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_563, _564, _565));
    float _3908 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _3919 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1770].x * _1776) * _1811) + ((cbLight._m0[_1780].x * _1786) * _1809);
    float _1819 = ((_1776 * cbLight._m0[_1770].y) * _1811) + ((_1786 * cbLight._m0[_1780].y) * _1809);
    float _1820 = ((_1776 * cbLight._m0[_1770].z) * _1811) + ((_1786 * cbLight._m0[_1780].z) * _1809);
    uvec4 _1824 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1826 = _1824.x == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1826)
    {
        _1837 = _1818;
        _1839 = _1819;
        _1841 = _1820;
    }
    else
    {
        uint _1845 = _1753 + 6u;
        float _1861 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _3930 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1864 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1837 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1818;
        _1839 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1819;
        _1841 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1820;
    }
    bool _1844 = _1824.y == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1844)
    {
        _1882 = _1837;
        _1884 = _1839;
        _1886 = _1841;
    }
    else
    {
        uint _2041 = _1753 + 7u;
        float _2057 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _3946 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2060 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1882 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _1837;
        _1884 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _1839;
        _1886 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _1841;
    }
    uint _1889 = _1753 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _566) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1753].x + _643;
    float _1905 = cbLight._m0[_1753].y + _644;
    float _1906 = cbLight._m0[_1753].z + _645;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1753].xyz));
    float _3962 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _1918 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1919 = dot(vec3(_563, _564, _565), vec3(_1911, _1912, _1913));
    float _3984 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1911, _1912, _1913));
    float _3995 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1942 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1943 = 1.0 - _1903;
    float _1954 = (0.5 / (((_1918 * ((_1917 * _1943) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1943) + _1903) * _1917))) * _1917;
    float _4006 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1967 = _1753 + 9u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _566) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1790].x + _643;
    float _1981 = cbLight._m0[_1790].y + _644;
    float _1982 = cbLight._m0[_1790].z + _645;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1790].xyz));
    float _4017 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1994 = dot(vec3(_563, _564, _565), vec3(_1987, _1988, _1989));
    float _4028 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1987, _1988, _1989));
    float _4039 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1979 * _1979;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2015 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2016 = 1.0 - _1979;
    float _2026 = (0.5 / (((_1918 * ((_1993 * _2016) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2016) + _1979) * _1993))) * _1993;
    float _4050 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    float _2038 = (((_2015 * cbLight._m0[_1967].x) * _2028) * _1776) + (((_1942 * cbLight._m0[_1889].x) * _1956) * _1786);
    float _2039 = (((_2015 * cbLight._m0[_1967].y) * _2028) * _1776) + (((_1942 * cbLight._m0[_1889].y) * _1956) * _1786);
    float _2040 = (((_2015 * cbLight._m0[_1967].z) * _2028) * _1776) + (((_1942 * cbLight._m0[_1889].z) * _1956) * _1786);
    float _2102;
    float _2104;
    float _2106;
    if (_1826)
    {
        _2102 = _2038;
        _2104 = _2039;
        _2106 = _2040;
    }
    else
    {
        uint _2108 = _1753 + 2u;
        uint _2112 = _1753 + 10u;
        float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _566) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2108].x + _643;
        float _2129 = cbLight._m0[_2108].y + _644;
        float _2130 = cbLight._m0[_2108].z + _645;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2108].xyz));
        float _4061 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2142 = dot(vec3(_563, _564, _565), vec3(_2135, _2136, _2137));
        float _4072 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2135, _2136, _2137));
        float _4083 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2164 = 1.0 - _2127;
        float _2174 = (0.5 / (((_1918 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2164) + _2127) * _2141))) * _2141;
        float _4094 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2102 = (((_2163 * cbLight._m0[_2112].x) * _2176) * _2177) + _2038;
        _2104 = (((_2163 * cbLight._m0[_2112].y) * _2176) * _2177) + _2039;
        _2106 = (((_2163 * cbLight._m0[_2112].z) * _2176) * _2177) + _2040;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1844)
    {
        _2212 = _2102;
        _2214 = _2104;
        _2216 = _2106;
    }
    else
    {
        uint _2223 = _1753 + 3u;
        uint _2227 = _1753 + 11u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _566) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _643;
        float _2244 = cbLight._m0[_2223].y + _644;
        float _2245 = cbLight._m0[_2223].z + _645;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2223].xyz));
        float _4110 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2257 = dot(vec3(_563, _564, _565), vec3(_2250, _2251, _2252));
        float _4121 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4132 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2279 = 1.0 - _2242;
        float _2289 = (0.5 / (((_1918 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2279) + _2242) * _2256))) * _2256;
        float _4143 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2291 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2292 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2212 = (((_2278 * cbLight._m0[_2227].x) * _2291) * _2292) + _2102;
        _2214 = (((_2278 * cbLight._m0[_2227].y) * _2291) * _2292) + _2104;
        _2216 = (((_2278 * cbLight._m0[_2227].z) * _2291) * _2292) + _2106;
    }
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_1751.y == 0u)
    {
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2367;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2367;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2367;
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.x;
        uint _2394 = uint((float(_2382.y) * floor(float(uint(cbSceneParam._m0[85u].y * _652) / _2383))) + floor(float(uint(cbSceneParam._m0[85u].x * _651) / _2383)));
        float _2404 = (log2(_2370 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2405 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        uint _2408 = uint(isnan(14.0) ? _2405 : (isnan(_2405) ? 14.0 : min(_2405, 14.0)));
        uvec4 _2413 = texelFetch(g_lightClusterGridBuffer, int(((_2408 << 2u) + (_2394 << 6u)) >> 2u));
        uint _2414 = _2413.x;
        uint _2415 = _2382.z;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((((1u << ((_2415 >> 4u) & 15u)) + 4294967295u) & _2414) == 0u) || ((_2415 & 240u) == 0u))
        {
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
        }
        else
        {
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2674)
                {
                    frontier_phi_63_pred = _2663;
                    frontier_phi_63_pred_1 = _2662;
                    frontier_phi_63_pred_2 = _2661;
                    frontier_phi_63_pred_3 = _2660;
                    frontier_phi_63_pred_4 = _2659;
                    frontier_phi_63_pred_5 = _2658;
                }
                else
                {
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    uint _2788;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2673;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2792 = uint(findLSB(_2788)) + (_2664 << 5u);
                        uint _2789 = (_2788 + 4294967295u) & _2788;
                        uint _2794 = _2792 * 48u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2814 = (_2792 * 48u) + 4u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2833 = (_2792 * 48u) + 8u;
                        vec3 _2844 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x));
                        float _2848 = _2808.x - _2368;
                        float _2849 = _2808.y - _2369;
                        float _2850 = _2808.z - _2370;
                        float _2851 = dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850));
                        float _2854 = inversesqrt(_2851);
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2858 = dot(vec3(_670, _673, _676), vec3(_2855, _2856, _2857));
                        float _2863 = 1.0 - (_2851 * _2808.w);
                        float _4169 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2865 = sqrt(_2851) * _2827.w;
                        float _2868 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2858) + _2869;
                        float _2875 = _2865 * _2865;
                        float _2879 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2864) / ((_2875 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2368;
                        float _2884 = (-0.0) - _2369;
                        float _2885 = (-0.0) - _2370;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2875 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _730;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_670, _673, _676), vec3(_2890, _2891, _2892));
                        float _4185 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2925 = dot(vec3(_670, _673, _676), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4196 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2868 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2858) + _2934;
                        float _4207 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4218 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2932 * _2932) * ((_2875 * 2.1991131305694580078125) + 3.141590118408203125))) * _2864;
                        _2717 = (_2879 * _2827.x) + _2785;
                        _2718 = (_2879 * _2827.y) + _2786;
                        _2719 = (_2879 * _2827.z) + _2787;
                        _2714 = (_2960 * _2844.x) + _2782;
                        _2715 = (_2960 * _2844.y) + _2783;
                        _2716 = (_2960 * _2844.z) + _2784;
                        if (_2789 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2789;
                        }
                    }
                    frontier_phi_63_pred = _2719;
                    frontier_phi_63_pred_1 = _2718;
                    frontier_phi_63_pred_2 = _2717;
                    frontier_phi_63_pred_3 = _2716;
                    frontier_phi_63_pred_4 = _2715;
                    frontier_phi_63_pred_5 = _2714;
                }
                _2525 = frontier_phi_63_pred;
                _2523 = frontier_phi_63_pred_1;
                _2521 = frontier_phi_63_pred_2;
                _2519 = frontier_phi_63_pred_3;
                _2517 = frontier_phi_63_pred_4;
                _2515 = frontier_phi_63_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2515;
                    _2659 = _2517;
                    _2660 = _2519;
                    _2661 = _2521;
                    _2662 = _2523;
                    _2663 = _2525;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
        }
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.z;
        uint _2531 = (_2529 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2531) & _2414) == 0u)
        {
            _2626 = _2514;
            _2628 = _2516;
            _2630 = _2518;
            _2632 = _2520;
            _2634 = _2522;
            _2636 = _2524;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
            float _2652 = _2651 * _2368;
            float _2653 = _2651 * _2369;
            float _2654 = _2651 * _2370;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2531 < ((_2529 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2765 = _2514;
                float _2766 = _2516;
                float _2767 = _2518;
                float _2768 = _2520;
                float _2769 = _2522;
                float _2770 = _2524;
                uint _2771 = _2531;
                uint _2780;
                bool _2781;
                for (;;)
                {
                    _2780 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                    _2781 = _2780 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2781)
                    {
                        frontier_phi_69_pred = _2770;
                        frontier_phi_69_pred_1 = _2769;
                        frontier_phi_69_pred_2 = _2768;
                        frontier_phi_69_pred_3 = _2767;
                        frontier_phi_69_pred_4 = _2766;
                        frontier_phi_69_pred_5 = _2765;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        uint _2984 = _2780;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2771 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_2370, _3105.z, fma(_2369, _3105.y, _3105.x * _2368)) + _3105.w;
                            _3118 = !((fma(_2370, _3086.z, fma(_2369, _3086.y, _3086.x * _2368)) + _3086.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _2368;
                                float _3146 = _3010.y - _2369;
                                float _3147 = _3010.z - _2370;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4229 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_670, _673, _676))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_2370, _3054.z, fma(_2369, _3054.y, _3054.x * _2368)) + _3054.w) / _3117;
                                float _3177 = (fma(_2370, _3070.z, fma(_2369, _3070.y, _3070.x * _2368)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4245 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _730;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2652;
                                float _3207 = _3153 - _2653;
                                float _3208 = _3154 - _2654;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_670, _673, _676), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4256 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3220 = dot(vec3(_670, _673, _676), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4267 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_670, _673, _676), vec3(_3152, _3153, _3154))) + _3229;
                                float _4278 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4289 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3183 * _3026.z;
                                frontier_phi_75_pred_1 = _3183 * _3026.y;
                                frontier_phi_75_pred_2 = _3183 * _3026.x;
                                frontier_phi_75_pred_3 = _3257 * _3038.z;
                                frontier_phi_75_pred_4 = _3257 * _3038.y;
                                frontier_phi_75_pred_5 = _3257 * _3038.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_75_pred;
                            _3265 = frontier_phi_75_pred_1;
                            _3264 = frontier_phi_75_pred_2;
                            _3263 = frontier_phi_75_pred_3;
                            _3262 = frontier_phi_75_pred_4;
                            _3261 = frontier_phi_75_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2970;
                        frontier_phi_69_pred_1 = _2969;
                        frontier_phi_69_pred_2 = _2968;
                        frontier_phi_69_pred_3 = _2967;
                        frontier_phi_69_pred_4 = _2966;
                        frontier_phi_69_pred_5 = _2965;
                    }
                    _2637 = frontier_phi_69_pred;
                    _2635 = frontier_phi_69_pred_1;
                    _2633 = frontier_phi_69_pred_2;
                    _2631 = frontier_phi_69_pred_3;
                    _2629 = frontier_phi_69_pred_4;
                    _2627 = frontier_phi_69_pred_5;
                    uint _2772 = _2771 + 1u;
                    if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2765 = _2627;
                        _2766 = _2629;
                        _2767 = _2631;
                        _2768 = _2633;
                        _2769 = _2635;
                        _2770 = _2637;
                        _2771 = _2772;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2637;
                frontier_phi_57_58_ladder_1 = _2635;
                frontier_phi_57_58_ladder_2 = _2633;
                frontier_phi_57_58_ladder_3 = _2631;
                frontier_phi_57_58_ladder_4 = _2629;
                frontier_phi_57_58_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_57_58_ladder = _2524;
                frontier_phi_57_58_ladder_1 = _2522;
                frontier_phi_57_58_ladder_2 = _2520;
                frontier_phi_57_58_ladder_3 = _2518;
                frontier_phi_57_58_ladder_4 = _2516;
                frontier_phi_57_58_ladder_5 = _2514;
            }
            _2626 = frontier_phi_57_58_ladder_5;
            _2628 = frontier_phi_57_58_ladder_4;
            _2630 = frontier_phi_57_58_ladder_3;
            _2632 = frontier_phi_57_58_ladder_2;
            _2634 = frontier_phi_57_58_ladder_1;
            _2636 = frontier_phi_57_58_ladder;
        }
        float _2641 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _2426 = (_2641 * _2632) + _1882;
        _2428 = (_2641 * _2634) + _1884;
        _2430 = (_2641 * _2636) + _1886;
        _2432 = ((_2626 * 0.039999999105930328369140625) * _2641) + _2212;
        _2434 = ((_2628 * 0.039999999105930328369140625) * _2641) + _2214;
        _2436 = ((_2630 * 0.039999999105930328369140625) * _2641) + _2216;
    }
    else
    {
        _2426 = _1882;
        _2428 = _1884;
        _2430 = _1886;
        _2432 = _2212;
        _2434 = _2214;
        _2436 = _2216;
    }
    float _4305 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4316 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4327 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    uint _2456 = _689 + 6u;
    float _2464 = _651 / cbSceneParam._m0[86u].x;
    float _2465 = _652 / cbSceneParam._m0[86u].y;
    vec4 _2479 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2481 = _2479.x;
    float _2482 = _2479.y;
    float _2483 = _2479.z;
    float _2484 = _2479.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2539 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2540 = _2539 / _585;
        float _2551 = _2540 * _636;
        float _2552 = _637 * _2540;
        float _2553 = (-0.0) - _2552;
        float _2554 = _2540 * _638;
        float _2556 = (cbSceneParam._m0[77u].w * _2553) / _2539;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2552;
        float _2564 = sqrt(((_2551 * _2551) + (_2552 * _2552)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2539)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2553 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2689 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2727 = ((abs(_2564 / _2553) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2574 * _2698) - exp2(_2574 * _2699)) * _2687))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2484);
        _2576 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2481;
        _2578 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2482;
        _2580 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2483;
        _2582 = _2738 * _2484;
    }
    else
    {
        _2576 = _2481;
        _2578 = _2482;
        _2580 = _2483;
        _2582 = _2484;
    }
    float _2594 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2595 = _2594 == 3.0;
    float _2596 = log2(_2582);
    float _2603 = exp2(_2596 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2426 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _714))) + ((_2432 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1520)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2596 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2428 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _714))) + ((_2434 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1520)) * cbPerFrame._m0[3u].x));
    float _2605 = exp2(_2596 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2430 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _714))) + ((_2436 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1520)) * cbPerFrame._m0[3u].x));
    float _2614 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2614 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.y = _2614 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.z = _2614 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.w = cbInstanceData._m0[_2456].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2456].w;
}


