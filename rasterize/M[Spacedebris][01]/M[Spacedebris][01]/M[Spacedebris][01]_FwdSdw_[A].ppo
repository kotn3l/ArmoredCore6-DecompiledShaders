#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Spacedebris_01_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _825;
float _3477;
float _3478;
float _3479;
float _3480;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_Spacedebris_01_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = (_225.x * 2.0) + (-1.0);
    float _235 = (_225.y * 2.0) + (-1.0);
    float _236 = dot(vec2(_233, _235), vec2(_233, _235));
    float _3489 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _242 = sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))));
    float _245 = fma(_242, _191 * NORMAL.x, fma(_235, _198 * TANGENT.x, (_184 * _176) * _233));
    float _248 = fma(_242, _191 * NORMAL.y, fma(_235, _198 * TANGENT.y, (_184 * _177) * _233));
    float _251 = fma(_242, _191 * NORMAL.z, fma(_235, _198 * TANGENT.z, (_184 * _178) * _233));
    float _255 = inversesqrt(dot(vec3(_245, _248, _251), vec3(_245, _248, _251)));
    float _256 = _255 * _245;
    float _257 = _255 * _248;
    float _258 = _255 * _251;
    float _3500 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _259 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3522 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3533 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _278 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _320 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _330 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _320);
    float _331 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _320);
    float _332 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _320);
    float _336 = inversesqrt(dot(vec3(_330, _331, _332), vec3(_330, _331, _332)));
    float _337 = _330 * _336;
    float _338 = _331 * _336;
    float _339 = _332 * _336;
    vec4 _344 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _346 = _344.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _504 = sqrt(((_330 * _330) + (_331 * _331)) + (_332 * _332));
        float _510 = (cbMatDynParam._m0[5u].x * _504) + cbMatDynParam._m0[5u].y;
        float _3544 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
        float _511 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _515 = (cbMatDynParam._m0[5u].z * _504) + cbMatDynParam._m0[5u].w;
        float _3555 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) - _511)) + _511) < ((_346 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _358 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _359 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _379 = fma(_258, cbSceneParam._m0[5u].z, fma(_257, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _256));
    float _382 = fma(_258, cbSceneParam._m0[6u].z, fma(_257, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _256));
    float _385 = fma(_258, cbSceneParam._m0[7u].z, fma(_257, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _256));
    uint _398 = uint(roundEven(NORMAL.w)) * 13u;
    uint _400 = _398 + 9u;
    uint _401 = _400 + uint(cbMatDynParam._m0[0u].w);
    float _407 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_401].x;
    float _408 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_401].y;
    float _409 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_401].z;
    float _3566 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    vec4 _421 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _358, cbSceneParam._m0[86u].y * _359));
    float _424 = _421.x * TEXCOORD.z;
    float _425 = dot(vec3(_256, _257, _258), vec3(_337, _338, _339));
    float _428 = _425 * 2.0;
    float _432 = (_428 * _256) - _337;
    float _433 = (_428 * _257) - _338;
    float _434 = (_428 * _258) - _339;
    float _438 = abs(dot(vec3(_337, _338, _339), vec3(_256, _257, _258)));
    float _3599 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _440 = sqrt(_259);
    float _453 = exp2((_440 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_440 * 3.0));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _824;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _549 = fma(_493, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485));
        float _553 = fma(_493, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485));
        float _557 = fma(_493, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485));
        float _582 = _485 + _256;
        float _583 = _489 + _257;
        float _584 = _493 + _258;
        float _594 = fma(_584, cbModelParam._m0[26u].z, fma(_583, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582)) - _549;
        float _595 = fma(_584, cbModelParam._m0[27u].z, fma(_583, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582)) - _553;
        float _596 = fma(_584, cbModelParam._m0[28u].z, fma(_583, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582)) - _557;
        float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
        float _613 = ((_600 * _594) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_549 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _614 = ((_600 * _595) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_553 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_600 * _596) / cbModelParam._m0[34u].z) + ((((((_557 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        float _652 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_618.x + (-0.5));
        float _654 = _652 * (_618.y + (-0.5));
        float _655 = _652 * (_618.z + (-0.5));
        float _662 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_625.x + (-0.5));
        float _664 = _662 * (_625.y + (-0.5));
        float _665 = _662 * (_625.z + (-0.5));
        float _672 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_632.x + (-0.5));
        float _674 = _672 * (_632.y + (-0.5));
        float _675 = _672 * (_632.z + (-0.5));
        float _682 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_639.x + (-0.5));
        float _684 = _682 * (_639.y + (-0.5));
        float _685 = _682 * (_639.z + (-0.5));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = _653 * 0.5;
        float _690 = _663 * 0.5;
        float _691 = _673 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _706 = (dot(vec3(_256, _257, _258), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _716 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3647 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_718 + 1.0))) + _723) * _686;
        float _733 = _654 * 0.5;
        float _734 = _664 * 0.5;
        float _735 = _674 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _749 = (dot(vec3(_256, _257, _258), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _758 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3680 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_760 + 1.0))) + _765) * _687;
        float _775 = _655 * 0.5;
        float _776 = _665 * 0.5;
        float _777 = _675 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_256, _257, _258), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3713 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_802 + 1.0))) + _807) * _688;
        _824 = _655;
        _826 = _654;
        _827 = _653;
        _828 = _665;
        _829 = _664;
        _830 = _663;
        _831 = _675;
        _832 = _674;
        _833 = _673;
        _834 = _688;
        _835 = _687;
        _836 = _686;
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
    }
    else
    {
        _824 = _825;
        _826 = _825;
        _827 = _825;
        _828 = _825;
        _829 = _825;
        _830 = _825;
        _831 = _825;
        _832 = _825;
        _833 = _825;
        _834 = _825;
        _835 = _825;
        _836 = _825;
        _837 = 0.0;
        _838 = 0.0;
        _839 = 0.0;
    }
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _868 = fma(_493, cbModelParam._m0[30u].z, fma(_489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _485));
        float _872 = fma(_493, cbModelParam._m0[31u].z, fma(_489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _485));
        float _876 = fma(_493, cbModelParam._m0[32u].z, fma(_489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _485));
        float _899 = _485 + _256;
        float _900 = _489 + _257;
        float _901 = _493 + _258;
        float _911 = fma(_901, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899)) - _868;
        float _912 = fma(_901, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899)) - _872;
        float _913 = fma(_901, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899)) - _876;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_868 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_872 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[35u].z) + ((((((_876 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _967 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_934.x + (-0.5));
        float _969 = _967 * (_934.y + (-0.5));
        float _970 = _967 * (_934.z + (-0.5));
        float _977 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_941.x + (-0.5));
        float _979 = _977 * (_941.y + (-0.5));
        float _980 = _977 * (_941.z + (-0.5));
        float _987 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_948.x + (-0.5));
        float _989 = _987 * (_948.y + (-0.5));
        float _990 = _987 * (_948.z + (-0.5));
        float _997 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_955.x + (-0.5));
        float _999 = _997 * (_955.y + (-0.5));
        float _1000 = _997 * (_955.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_256, _257, _258), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3776 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1031 + 1.0))) + _1036) * _1001;
        float _1046 = _969 * 0.5;
        float _1047 = _979 * 0.5;
        float _1048 = _989 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_256, _257, _258), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3809 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1073 + 1.0))) + _1078) * _1002;
        float _1088 = _970 * 0.5;
        float _1089 = _980 * 0.5;
        float _1090 = _990 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_256, _257, _258), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3842 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1115 + 1.0))) + _1120) * _1003;
        _1137 = _970;
        _1138 = _969;
        _1139 = _968;
        _1140 = _980;
        _1141 = _979;
        _1142 = _978;
        _1143 = _990;
        _1144 = _989;
        _1145 = _988;
        _1146 = _1003;
        _1147 = _1002;
        _1148 = _1001;
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _825;
        _1138 = _825;
        _1139 = _825;
        _1140 = _825;
        _1141 = _825;
        _1142 = _825;
        _1143 = _825;
        _1144 = _825;
        _1145 = _825;
        _1146 = _825;
        _1147 = _825;
        _1148 = _825;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _837)) + _837;
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _838)) + _838;
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _839)) + _839;
    float _1184 = fma(_1163, cbSceneParam._m0[89u].z, fma(_1162, cbSceneParam._m0[89u].y, _1161 * cbSceneParam._m0[89u].x));
    float _1187 = fma(_1163, cbSceneParam._m0[90u].z, fma(_1162, cbSceneParam._m0[90u].y, _1161 * cbSceneParam._m0[90u].x));
    float _1190 = fma(_1163, cbSceneParam._m0[91u].z, fma(_1162, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1161));
    float _1205 = _432 * 0.5;
    float _1206 = _433 * 0.5;
    float _1207 = _434 * 0.5;
    float _1208 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1211 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1138, _1141, _1144, _1147));
    float _1214 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1248;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1221 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_824, _828, _831, _834));
        float _1225 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_826, _829, _832, _835));
        float _1229 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_827, _830, _833, _836));
        float _1236 = dot(vec4(cbModelParam._m0[39u]), vec4(_1205, _1206, _1207, 1.0));
        _1248 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1236) ? 0.0 : (isnan(0.0) ? _1236 : max(0.0, _1236))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1248 = 1.0;
    }
    float _1259;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1250 = dot(vec4(cbModelParam._m0[40u]), vec4(_1205, _1206, _1207, 1.0));
        _1259 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1259 = 1.0;
    }
    float _1263 = (_1259 * cbModelParam._m0[1u].x) + (_1248 * (1.0 - cbModelParam._m0[1u].x));
    float _1273 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _259);
    float _1274 = isnan(_1273) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1273 : min(cbModelParam._m0[25u].z, _1273));
    float _1356;
    float _1358;
    float _1360;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1323 = fma(_493, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485)) + cbModelParam._m0[13u].w;
        float _1327 = fma(_493, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485)) + cbModelParam._m0[14u].w;
        float _1331 = fma(_493, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485)) + cbModelParam._m0[15u].w;
        float _1334 = fma(_434, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _432));
        float _1337 = fma(_434, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _432));
        float _1340 = fma(_434, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _432));
        float _1368;
        if (_1334 > 0.0)
        {
            _1368 = abs((1.0 - _1323) / _1334);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1323 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1368 = frontier_phi_17_15_ladder;
        }
        float _1541;
        if (_1337 > 0.0)
        {
            _1541 = abs((1.0 - _1327) / _1337);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1327 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1541 = frontier_phi_26_22_ladder;
        }
        float _1837;
        if (_1340 > 0.0)
        {
            _1837 = abs((1.0 - _1331) / _1340);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1331 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1837 = frontier_phi_38_33_ladder;
        }
        float _1839 = isnan(_1541) ? _1368 : (isnan(_1368) ? _1541 : min(_1368, _1541));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1334) + _1323;
        float _1845 = (_1840 * _1337) + _1327;
        float _1846 = (_1840 * _1340) + _1331;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1849 = (-1.0) - _1847;
        float _1851 = _1847 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1846 > _1851) || ((_1846 < _1849) || ((_1845 > _1851) || ((_1845 < _1849) || ((_1844 < _1849) || (_1844 > _1851))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1846, cbModelParam._m0[9u].z, fma(_1845, cbModelParam._m0[9u].y, _1844 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1846, cbModelParam._m0[10u].z, fma(_1845, cbModelParam._m0[10u].y, _1844 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1846, cbModelParam._m0[11u].z, fma(_1845, cbModelParam._m0[11u].y, _1844 * cbModelParam._m0[11u].x))), _1274);
            frontier_phi_16_38_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1356 = frontier_phi_16_38_ladder_2;
        _1358 = frontier_phi_16_38_ladder_1;
        _1360 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_432, _433, _434), _1274);
        _1356 = _1344.x * cbModelParam._m0[1u].y;
        _1358 = _1344.y * cbModelParam._m0[1u].y;
        _1360 = _1344.z * cbModelParam._m0[1u].y;
    }
    float _1364 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _259);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1364 : min(cbModelParam._m0[25u].w, _1364));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1422 = fma(_493, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485)) + cbModelParam._m0[21u].w;
        float _1426 = fma(_493, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485)) + cbModelParam._m0[22u].w;
        float _1430 = fma(_493, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485)) + cbModelParam._m0[23u].w;
        float _1433 = fma(_434, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _432));
        float _1436 = fma(_434, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _432));
        float _1439 = fma(_434, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _432));
        float _1546;
        if (_1433 > 0.0)
        {
            _1546 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1546 = frontier_phi_28_24_ladder;
        }
        float _1864;
        if (_1436 > 0.0)
        {
            _1864 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1864 = frontier_phi_40_35_ladder;
        }
        float _2191;
        if (_1439 > 0.0)
        {
            _2191 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2191 = frontier_phi_50_47_ladder;
        }
        float _2193 = isnan(_1864) ? _1546 : (isnan(_1546) ? _1864 : min(_1546, _1864));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1433) + _1422;
        float _2199 = (_2194 * _1436) + _1426;
        float _2200 = (_2194 * _1439) + _1430;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2201;
        float _2204 = _2201 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2200 > _2204) || ((_2200 < _2202) || ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 < _2202) || (_2198 > _2204))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2200, cbModelParam._m0[17u].z, fma(_2199, cbModelParam._m0[17u].y, _2198 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2200, cbModelParam._m0[18u].z, fma(_2199, cbModelParam._m0[18u].y, _2198 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2200, cbModelParam._m0[19u].z, fma(_2199, cbModelParam._m0[19u].y, _2198 * cbModelParam._m0[19u].x))), _1365);
            frontier_phi_25_50_ladder = _2318.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2318.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2318.x * cbModelParam._m0[1u].z;
        }
        _1458 = frontier_phi_25_50_ladder_2;
        _1460 = frontier_phi_25_50_ladder_1;
        _1462 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_432, _433, _434), _1365);
        _1458 = _1442.x * cbModelParam._m0[1u].z;
        _1460 = _1442.y * cbModelParam._m0[1u].z;
        _1462 = _1442.z * cbModelParam._m0[1u].z;
    }
    float _1474 = ((((1.0 - _453) * ((_440 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_453 * _440)) * _424;
    float _1475 = _1474 * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1476 = _1474 * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1477 = _1474 * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1480 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, _1475 * cbSceneParam._m0[91u].x));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1532 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1533 = _1520 / _1532;
    float _1534 = _1524 / _1532;
    float _1535 = _1528 / _1532;
    float _1682;
    float _1683;
    float _1684;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1562 = ((uint(_1535 > cbSceneParam._m0[59u].y) + uint(_1535 > cbSceneParam._m0[59u].x)) + uint(_1535 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1563 = _1562 + 43u;
        uint _1571 = _1562 + 44u;
        uint _1579 = _1562 + 45u;
        uint _1587 = _1562 + 46u;
        float _1598 = fma(_1532, cbSceneParam._m0[_1563].w, fma(_1528, cbSceneParam._m0[_1563].z, fma(_1524, cbSceneParam._m0[_1563].y, _1520 * cbSceneParam._m0[_1563].x)));
        float _1602 = fma(_1532, cbSceneParam._m0[_1571].w, fma(_1528, cbSceneParam._m0[_1571].z, fma(_1524, cbSceneParam._m0[_1571].y, _1520 * cbSceneParam._m0[_1571].x)));
        float _1610 = fma(_1532, cbSceneParam._m0[_1587].w, fma(_1528, cbSceneParam._m0[_1587].z, fma(_1524, cbSceneParam._m0[_1587].y, _1520 * cbSceneParam._m0[_1587].x)));
        float _1615 = cbSceneParam._m0[33u].z * _1610;
        float _1617 = cbSceneParam._m0[33u].w * _1610;
        float _1620 = fma(_1532, cbSceneParam._m0[_1579].w, fma(_1528, cbSceneParam._m0[_1579].z, fma(_1524, cbSceneParam._m0[_1579].y, _1520 * cbSceneParam._m0[_1579].x))) / _1610;
        float _1668 = (cbSceneParam._m0[33u].x - sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535))) * cbSceneParam._m0[33u].y;
        float _3968 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1675 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1615 + _1598) / _1610, (_1617 + _1602) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1617 + _1598) / _1610, (_1602 - _1615) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1598 - _1615) / _1610, (_1602 - _1617) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1598 - _1617) / _1610, (_1615 + _1602) / _1610), _1620), 0.0)).x), vec4(0.25)));
        _1682 = 1.0 - (_1675 * cbSceneParam._m0[34u].x);
        _1683 = 1.0 - (_1675 * cbSceneParam._m0[34u].y);
        _1684 = 1.0 - (_1675 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1682 = 1.0;
        _1683 = 1.0;
        _1684 = 1.0;
    }
    float _1748;
    float _1750;
    float _1752;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1736 = fma(_1532, cbSceneParam._m0[63u].w, fma(_1528, cbSceneParam._m0[63u].z, fma(_1524, cbSceneParam._m0[63u].y, _1520 * cbSceneParam._m0[63u].x)));
        float _1737 = fma(_1532, cbSceneParam._m0[60u].w, fma(_1528, cbSceneParam._m0[60u].z, fma(_1524, cbSceneParam._m0[60u].y, _1520 * cbSceneParam._m0[60u].x))) / _1736;
        float _1738 = fma(_1532, cbSceneParam._m0[61u].w, fma(_1528, cbSceneParam._m0[61u].z, fma(_1524, cbSceneParam._m0[61u].y, _1520 * cbSceneParam._m0[61u].x))) / _1736;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1737 >= cbSceneParam._m0[64u].x) && (_1738 >= cbSceneParam._m0[64u].y)) && (_1737 <= cbSceneParam._m0[64u].z)) && (_1738 <= cbSceneParam._m0[64u].w))
        {
            float _1877 = fma(_1532, cbSceneParam._m0[62u].w, fma(_1528, cbSceneParam._m0[62u].z, fma(_1524, cbSceneParam._m0[62u].y, _1520 * cbSceneParam._m0[62u].x))) / _1736;
            float _1881 = isnan(cbSceneParam._m0[41u].w) ? _1877 : (isnan(_1877) ? cbSceneParam._m0[41u].w : max(_1877, cbSceneParam._m0[41u].w));
            float _1924 = (cbSceneParam._m0[33u].x - sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535))) * cbSceneParam._m0[33u].y;
            float _3984 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
            float _1931 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1737, cbSceneParam._m0[33u].w + _1738), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1737, _1738 - cbSceneParam._m0[33u].z), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1737 - cbSceneParam._m0[33u].z, _1738 - cbSceneParam._m0[33u].w), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1737 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1738), _1881), 0.0)).x), vec4(0.25)));
            float _1935 = 1.0 - (_1931 * cbSceneParam._m0[34u].x);
            float _1936 = 1.0 - (_1931 * cbSceneParam._m0[34u].y);
            float _1937 = 1.0 - (_1931 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1937) ? _1684 : (isnan(_1684) ? _1937 : min(_1684, _1937));
            frontier_phi_37_36_ladder_1 = isnan(_1936) ? _1683 : (isnan(_1683) ? _1936 : min(_1683, _1936));
            frontier_phi_37_36_ladder_2 = isnan(_1935) ? _1682 : (isnan(_1682) ? _1935 : min(_1682, _1935));
        }
        else
        {
            frontier_phi_37_36_ladder = _1684;
            frontier_phi_37_36_ladder_1 = _1683;
            frontier_phi_37_36_ladder_2 = _1682;
        }
        _1748 = frontier_phi_37_36_ladder_2;
        _1750 = frontier_phi_37_36_ladder_1;
        _1752 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1748 = _1682;
        _1750 = _1683;
        _1752 = _1684;
    }
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_398 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _424 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1796 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1800 = _1759 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_256, _257, _258));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_256, _257, _258));
    float _4020 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _4031 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1776].x * _1782) * _1821) + (((cbLight._m0[_1786].x * _1748) * _1796) * _1819);
    float _1829 = ((_1782 * cbLight._m0[_1776].y) * _1821) + (((cbLight._m0[_1786].y * _1750) * _1796) * _1819);
    float _1830 = ((_1782 * cbLight._m0[_1776].z) * _1821) + (((cbLight._m0[_1786].z * _1752) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1836)
    {
        _1938 = _1828;
        _1940 = _1829;
        _1942 = _1830;
    }
    else
    {
        uint _1946 = _1759 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_256, _257, _258)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _4042 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1965 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1828;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1829;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1830;
    }
    bool _1945 = _1834.y == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1945)
    {
        _2000 = _1938;
        _2002 = _1940;
        _2004 = _1942;
    }
    else
    {
        uint _2162 = _1759 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_256, _257, _258)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4058 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2181 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2000 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1938;
        _2002 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1940;
        _2004 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1942;
    }
    uint _2007 = _1759 + 8u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _259) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1759].x + _337;
    float _2023 = cbLight._m0[_1759].y + _338;
    float _2024 = cbLight._m0[_1759].z + _339;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_256, _257, _258), vec3(cbLight._m0[_1759].xyz));
    float _4074 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _2036 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2037 = dot(vec3(_256, _257, _258), vec3(_2029, _2030, _2031));
    float _4096 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_2029, _2030, _2031));
    float _4107 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2021 * _2021;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2021;
    float _2072 = (0.5 / (((_2036 * ((_2035 * _2061) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2061) + _2021) * _2035))) * _2035;
    float _4118 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    uint _2088 = _1759 + 9u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _259) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1800].x + _337;
    float _2102 = cbLight._m0[_1800].y + _338;
    float _2103 = cbLight._m0[_1800].z + _339;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_256, _257, _258), vec3(cbLight._m0[_1800].xyz));
    float _4129 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2115 = dot(vec3(_256, _257, _258), vec3(_2108, _2109, _2110));
    float _4140 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2108, _2109, _2110));
    float _4151 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2100 * _2100;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2100;
    float _2147 = (0.5 / (((_2036 * ((_2114 * _2137) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2137) + _2100) * _2114))) * _2114;
    float _4162 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    float _2159 = (((_2136 * cbLight._m0[_2088].x) * _2149) * _1782) + ((((cbLight._m0[_2007].x * _1748) * _2060) * _2074) * _1796);
    float _2160 = (((_2136 * cbLight._m0[_2088].y) * _2149) * _1782) + ((((cbLight._m0[_2007].y * _1750) * _2060) * _2074) * _1796);
    float _2161 = (((_2136 * cbLight._m0[_2088].z) * _2149) * _1782) + ((((cbLight._m0[_2007].z * _1752) * _2060) * _2074) * _1796);
    float _2217;
    float _2219;
    float _2221;
    if (_1836)
    {
        _2217 = _2159;
        _2219 = _2160;
        _2221 = _2161;
    }
    else
    {
        uint _2223 = _1759 + 2u;
        uint _2227 = _1759 + 10u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _259) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _337;
        float _2244 = cbLight._m0[_2223].y + _338;
        float _2245 = cbLight._m0[_2223].z + _339;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_256, _257, _258), vec3(cbLight._m0[_2223].xyz));
        float _4173 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2257 = dot(vec3(_256, _257, _258), vec3(_2250, _2251, _2252));
        float _4184 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4195 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2279 = 1.0 - _2242;
        float _2289 = (0.5 / (((_2036 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2279) + _2242) * _2256))) * _2256;
        float _4206 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2291 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2292 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2217 = (((_2278 * cbLight._m0[_2227].x) * _2291) * _2292) + _2159;
        _2219 = (((_2278 * cbLight._m0[_2227].y) * _2291) * _2292) + _2160;
        _2221 = (((_2278 * cbLight._m0[_2227].z) * _2291) * _2292) + _2161;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1945)
    {
        _2323 = _2217;
        _2325 = _2219;
        _2327 = _2221;
    }
    else
    {
        uint _2334 = _1759 + 3u;
        uint _2338 = _1759 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _259) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _337;
        float _2355 = cbLight._m0[_2334].y + _338;
        float _2356 = cbLight._m0[_2334].z + _339;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_256, _257, _258), vec3(cbLight._m0[_2334].xyz));
        float _4222 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2368 = dot(vec3(_256, _257, _258), vec3(_2361, _2362, _2363));
        float _4233 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4244 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2036 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2390) + _2353) * _2367))) * _2367;
        float _4255 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2323 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2217;
        _2325 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2219;
        _2327 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2221;
    }
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_1757.y == 0u)
    {
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.x;
        uint _2436 = uint((float(_2424.y) * floor(float(uint(cbSceneParam._m0[85u].y * _359) / _2425))) + floor(float(uint(cbSceneParam._m0[85u].x * _358) / _2425)));
        float _2446 = (log2(_1535 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2447 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        uint _2450 = uint(isnan(14.0) ? _2447 : (isnan(_2447) ? 14.0 : min(_2447, 14.0)));
        uvec4 _2455 = texelFetch(g_lightClusterGridBuffer, int(((_2450 << 2u) + (_2436 << 6u)) >> 2u));
        uint _2456 = _2455.x;
        uint _2457 = _2424.z;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((((1u << ((_2457 >> 4u) & 15u)) + 4294967295u) & _2456) == 0u) || ((_2457 & 240u) == 0u))
        {
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
        }
        else
        {
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2705)
                {
                    frontier_phi_71_pred = _2694;
                    frontier_phi_71_pred_1 = _2693;
                    frontier_phi_71_pred_2 = _2692;
                    frontier_phi_71_pred_3 = _2691;
                    frontier_phi_71_pred_4 = _2690;
                    frontier_phi_71_pred_5 = _2689;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2704;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2695 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _1533;
                        float _2901 = _2860.y - _1534;
                        float _2902 = _2860.z - _1535;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_379, _382, _385), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4281 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _1533;
                        float _2936 = (-0.0) - _1534;
                        float _2937 = (-0.0) - _1535;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2951 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _440;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2942 + _2907;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_379, _382, _385), vec3(_2942, _2943, _2944));
                        float _4297 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _2976 = dot(vec3(_379, _382, _385), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4308 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2920 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2910) + _2985;
                        float _4319 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4330 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_2983 * _2983) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2764 = (_2931 * _2879.x) + _2837;
                        _2765 = (_2931 * _2879.y) + _2838;
                        _2766 = (_2931 * _2879.z) + _2839;
                        _2761 = (_3011 * _2896.x) + _2834;
                        _2762 = (_3011 * _2896.y) + _2835;
                        _2763 = (_3011 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_71_pred = _2766;
                    frontier_phi_71_pred_1 = _2765;
                    frontier_phi_71_pred_2 = _2764;
                    frontier_phi_71_pred_3 = _2763;
                    frontier_phi_71_pred_4 = _2762;
                    frontier_phi_71_pred_5 = _2761;
                }
                _2547 = frontier_phi_71_pred;
                _2545 = frontier_phi_71_pred_1;
                _2543 = frontier_phi_71_pred_2;
                _2541 = frontier_phi_71_pred_3;
                _2539 = frontier_phi_71_pred_4;
                _2537 = frontier_phi_71_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2537;
                    _2690 = _2539;
                    _2691 = _2541;
                    _2692 = _2543;
                    _2693 = _2545;
                    _2694 = _2547;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
        }
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.z;
        uint _2553 = (_2551 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2553) & _2456) == 0u)
        {
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
            float _2683 = _2682 * _1533;
            float _2684 = _2682 * _1534;
            float _2685 = _2682 * _1535;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2553 < ((_2551 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2817 = _2536;
                float _2818 = _2538;
                float _2819 = _2540;
                float _2820 = _2542;
                float _2821 = _2544;
                float _2822 = _2546;
                uint _2823 = _2553;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2833)
                    {
                        frontier_phi_82_pred = _2822;
                        frontier_phi_82_pred_1 = _2821;
                        frontier_phi_82_pred_2 = _2820;
                        frontier_phi_82_pred_3 = _2819;
                        frontier_phi_82_pred_4 = _2818;
                        frontier_phi_82_pred_5 = _2817;
                    }
                    else
                    {
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3038 = _2817;
                        float _3039 = _2818;
                        float _3040 = _2819;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        float _3043 = _2822;
                        uint _3044 = _2832;
                        uint _3045;
                        vec4 _3070;
                        float _3071;
                        vec4 _3086;
                        vec3 _3098;
                        vec4 _3114;
                        vec4 _3130;
                        float _3177;
                        bool _3178;
                        for (;;)
                        {
                            uint _3055 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3044));
                            _3045 = (_3044 + 4294967295u) & _3044;
                            uint _3057 = _3055 * 40u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3071 = _3070.w;
                            uint _3073 = (_3055 * 40u) + 4u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3055 * 40u) + 8u;
                            _3098 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x));
                            uint _3101 = (_3055 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3117 = (_3055 * 40u) + 20u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3133 = (_3055 * 40u) + 24u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3152 = (_3055 * 40u) + 28u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3177 = fma(_1535, _3165.z, fma(_1534, _3165.y, _3165.x * _1533)) + _3165.w;
                            _3178 = !((fma(_1535, _3146.z, fma(_1534, _3146.y, _3146.x * _1533)) + _3146.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3178)
                            {
                                float _3205 = _3070.x - _1533;
                                float _3206 = _3070.y - _1534;
                                float _3207 = _3070.z - _1535;
                                float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                                float _3211 = inversesqrt(_3208);
                                float _3212 = _3211 * _3205;
                                float _3213 = _3211 * _3206;
                                float _3214 = _3211 * _3207;
                                float _3218 = 1.0 - (_3208 / (_3071 * _3071));
                                float _4341 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3223 = sqrt(_3208) * _3086.w;
                                float _3225 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                                float _3226 = _3225 * _3225;
                                float _3229 = ((1.0 - _3226) * dot(vec3(_3212, _3213, _3214), vec3(_379, _382, _385))) + _3226;
                                float _3232 = _3223 * _3223;
                                float _3236 = (fma(_1535, _3114.z, fma(_1534, _3114.y, _3114.x * _1533)) + _3114.w) / _3177;
                                float _3237 = (fma(_1535, _3130.z, fma(_1534, _3130.y, _3130.x * _1533)) + _3130.w) / _3177;
                                float _3241 = 1.0 - dot(vec2(_3236, _3237), vec2(_3236, _3237));
                                float _4357 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3243 = _3242 * (((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3219) / ((_3232 * 0.699999988079071044921875) + 1.0));
                                float _3255 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                                float _3256 = 1.0 - _440;
                                float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                                float _3264 = _3263 * _3263;
                                float _3265 = _3264 * _3264;
                                float _3266 = _3212 - _2683;
                                float _3267 = _3213 - _2684;
                                float _3268 = _3214 - _2685;
                                float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                                float _3276 = dot(vec3(_379, _382, _385), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4368 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3280 = dot(vec3(_379, _382, _385), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                                float _4379 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                                float _3288 = _3225 * _3264;
                                float _3289 = _3288 * _3288;
                                float _3295 = ((1.0 - _3289) * dot(vec3(_379, _382, _385), vec3(_3212, _3213, _3214))) + _3289;
                                float _4390 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3297 = 1.0 - _3264;
                                float _3307 = (0.5 / (((_3296 * ((_3279 * _3297) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3264) * _3279))) * _3296;
                                float _4401 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3317 = (_3242 * _3219) * (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3287 * _3287) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3243 * _3086.z;
                                frontier_phi_88_pred_1 = _3243 * _3086.y;
                                frontier_phi_88_pred_2 = _3243 * _3086.x;
                                frontier_phi_88_pred_3 = _3317 * _3098.z;
                                frontier_phi_88_pred_4 = _3317 * _3098.y;
                                frontier_phi_88_pred_5 = _3317 * _3098.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3326 = frontier_phi_88_pred;
                            _3325 = frontier_phi_88_pred_1;
                            _3324 = frontier_phi_88_pred_2;
                            _3323 = frontier_phi_88_pred_3;
                            _3322 = frontier_phi_88_pred_4;
                            _3321 = frontier_phi_88_pred_5;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            _3025 = _3321 + _3038;
                            _3026 = _3322 + _3039;
                            _3027 = _3323 + _3040;
                            if (_3045 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3045;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3030;
                        frontier_phi_82_pred_1 = _3029;
                        frontier_phi_82_pred_2 = _3028;
                        frontier_phi_82_pred_3 = _3027;
                        frontier_phi_82_pred_4 = _3026;
                        frontier_phi_82_pred_5 = _3025;
                    }
                    _2668 = frontier_phi_82_pred;
                    _2666 = frontier_phi_82_pred_1;
                    _2664 = frontier_phi_82_pred_2;
                    _2662 = frontier_phi_82_pred_3;
                    _2660 = frontier_phi_82_pred_4;
                    _2658 = frontier_phi_82_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2658;
                        _2818 = _2660;
                        _2819 = _2662;
                        _2820 = _2664;
                        _2821 = _2666;
                        _2822 = _2668;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2664;
                frontier_phi_63_64_ladder_1 = _2668;
                frontier_phi_63_64_ladder_2 = _2666;
                frontier_phi_63_64_ladder_3 = _2662;
                frontier_phi_63_64_ladder_4 = _2660;
                frontier_phi_63_64_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_63_64_ladder = _2542;
                frontier_phi_63_64_ladder_1 = _2546;
                frontier_phi_63_64_ladder_2 = _2544;
                frontier_phi_63_64_ladder_3 = _2540;
                frontier_phi_63_64_ladder_4 = _2538;
                frontier_phi_63_64_ladder_5 = _2536;
            }
            _2657 = frontier_phi_63_64_ladder_5;
            _2659 = frontier_phi_63_64_ladder_4;
            _2661 = frontier_phi_63_64_ladder_3;
            _2663 = frontier_phi_63_64_ladder;
            _2665 = frontier_phi_63_64_ladder_2;
            _2667 = frontier_phi_63_64_ladder_1;
        }
        float _2672 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
        _2469 = (_2672 * _2663) + _2000;
        _2471 = (_2672 * _2665) + _2002;
        _2473 = (_2672 * _2667) + _2004;
        _2475 = ((_2657 * 0.039999999105930328369140625) * _2672) + _2323;
        _2477 = ((_2659 * 0.039999999105930328369140625) * _2672) + _2325;
        _2479 = ((_2661 * 0.039999999105930328369140625) * _2672) + _2327;
    }
    else
    {
        _2469 = _2000;
        _2471 = _2002;
        _2473 = _2004;
        _2475 = _2323;
        _2477 = _2325;
        _2479 = _2327;
    }
    float _4417 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _4428 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _4439 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _2496 = ((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2469 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _424))) + ((_2475 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    float _2497 = ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2471 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _424))) + ((_2477 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    float _2498 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2473 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _424))) + ((_2479 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    uint _2499 = _398 + 6u;
    float _2507 = _358 / cbSceneParam._m0[86u].x;
    float _2508 = _359 / cbSceneParam._m0[86u].y;
    vec4 _2522 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, (log2((isnan(cbSceneParam._m0[77u].w) ? _278 : (isnan(_278) ? cbSceneParam._m0[77u].w : min(_278, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2524 = _2522.x;
    float _2525 = _2522.y;
    float _2526 = _2522.z;
    float _2527 = _2522.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_278 > cbSceneParam._m0[78u].w)
    {
        float _2561 = isnan(_278) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _278 : min(cbSceneParam._m0[80u].w, _278));
        float _2562 = _2561 / _278;
        float _2573 = _2562 * _330;
        float _2574 = _331 * _2562;
        float _2575 = (-0.0) - _2574;
        float _2577 = _2562 * _332;
        float _2579 = (cbSceneParam._m0[77u].w * _2575) / _2561;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2574;
        float _2587 = sqrt(((_2573 * _2573) + (_2574 * _2574)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2561)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2575 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2720 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2774 = ((abs(_2587 / _2575) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2597 * _2729) - exp2(_2597 * _2730)) * _2718))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2527);
        _2599 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2524;
        _2601 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2525;
        _2603 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2526;
        _2605 = _2785 * _2527;
    }
    else
    {
        _2599 = _2524;
        _2601 = _2525;
        _2603 = _2526;
        _2605 = _2527;
    }
    bool _2812;
    vec4 _2615;
    vec4 _2637;
    float _2639;
    float _2643;
    float _2644;
    float _2645;
    float _2646;
    bool _2656;
    for (;;)
    {
        _2615 = cbMatDynParam._m0[0u];
        float _2617 = roundEven(_2615.y);
        bool _2618 = _2617 == 3.0;
        float _2619 = log2(_2605);
        float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * _2496;
        float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * _2497;
        float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * _2498;
        float _2635 = _346 + (-0.5);
        _2637 = cbMtdParam._m0[1u];
        _2639 = _2637.y * _2635;
        float _2642 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2643 = _2642 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
        _2644 = _2642 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
        _2645 = _2642 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
        _2646 = _2635 * 0.999000012874603271484375;
        _2656 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2656)
        {
            if ((cbInstanceData._m0[_398 + 7u].x + _2646) < 0.5)
            {
                _2812 = true;
                break;
            }
        }
        uint _2753 = _400 + uint(_2615.w);
        if ((cbInstanceData._m0[_2753].w < 1.0) && ((cbInstanceData._m0[_2753].w + _2646) < 0.5))
        {
            _2812 = true;
            break;
        }
        if ((_2639 + 1.0) < _2637.x)
        {
            _2812 = true;
            break;
        }
        _2812 = false;
        break;
    }
    float _3016;
    if (_2812)
    {
        discard_state = true;
        _3016 = 0.0;
    }
    else
    {
        _3016 = cbInstanceData._m0[_2499].w;
    }
    SV_Target.x = _2643;
    SV_Target.y = _2644;
    SV_Target.z = _2645;
    SV_Target.w = _3016;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2499].w;
    discard_exit();
}


