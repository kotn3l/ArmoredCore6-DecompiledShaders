#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Spacedebris_01_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _821;
float _3190;
float _3191;
float _3192;
float _3193;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_Spacedebris_01_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = (_221.x * 2.0) + (-1.0);
    float _231 = (_221.y * 2.0) + (-1.0);
    float _232 = dot(vec2(_229, _231), vec2(_229, _231));
    float _3202 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _238 = sqrt(1.0 - (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))));
    float _241 = fma(_238, _187 * NORMAL.x, fma(_231, _194 * TANGENT.x, (_180 * _172) * _229));
    float _244 = fma(_238, _187 * NORMAL.y, fma(_231, _194 * TANGENT.y, (_180 * _173) * _229));
    float _247 = fma(_238, _187 * NORMAL.z, fma(_231, _194 * TANGENT.z, (_180 * _174) * _229));
    float _251 = inversesqrt(dot(vec3(_241, _244, _247), vec3(_241, _244, _247)));
    float _252 = _251 * _241;
    float _253 = _251 * _244;
    float _254 = _251 * _247;
    float _3213 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _255 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3235 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3246 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _274 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _316 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _326 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _316);
    float _327 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _316);
    float _328 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _316);
    float _332 = inversesqrt(dot(vec3(_326, _327, _328), vec3(_326, _327, _328)));
    float _333 = _326 * _332;
    float _334 = _327 * _332;
    float _335 = _328 * _332;
    vec4 _340 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _342 = _340.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _500 = sqrt(((_326 * _326) + (_327 * _327)) + (_328 * _328));
        float _506 = (cbMatDynParam._m0[5u].x * _500) + cbMatDynParam._m0[5u].y;
        float _3257 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
        float _507 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _511 = (cbMatDynParam._m0[5u].z * _500) + cbMatDynParam._m0[5u].w;
        float _3268 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) - _507)) + _507) < ((_342 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _375 = fma(_254, cbSceneParam._m0[5u].z, fma(_253, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _252));
    float _378 = fma(_254, cbSceneParam._m0[6u].z, fma(_253, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _252));
    float _381 = fma(_254, cbSceneParam._m0[7u].z, fma(_253, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _252));
    uint _394 = uint(roundEven(NORMAL.w)) * 13u;
    uint _396 = _394 + 9u;
    uint _397 = _396 + uint(cbMatDynParam._m0[0u].w);
    float _403 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_397].x;
    float _404 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_397].y;
    float _405 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_397].z;
    float _3279 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    vec4 _417 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _420 = _417.x * TEXCOORD.z;
    float _421 = dot(vec3(_252, _253, _254), vec3(_333, _334, _335));
    float _424 = _421 * 2.0;
    float _428 = (_424 * _252) - _333;
    float _429 = (_424 * _253) - _334;
    float _430 = (_424 * _254) - _335;
    float _434 = abs(dot(vec3(_333, _334, _335), vec3(_252, _253, _254)));
    float _3312 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _436 = sqrt(_255);
    float _449 = exp2((_436 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_436 * 3.0));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _820;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _545 = fma(_489, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481));
        float _549 = fma(_489, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481));
        float _553 = fma(_489, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481));
        float _578 = _481 + _252;
        float _579 = _485 + _253;
        float _580 = _489 + _254;
        float _590 = fma(_580, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578)) - _545;
        float _591 = fma(_580, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578)) - _549;
        float _592 = fma(_580, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578)) - _553;
        float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
        float _609 = ((_596 * _590) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_545 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _610 = ((_596 * _591) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_549 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_596 * _592) / cbModelParam._m0[34u].z) + ((((((_553 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        float _648 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_614.x + (-0.5));
        float _650 = _648 * (_614.y + (-0.5));
        float _651 = _648 * (_614.z + (-0.5));
        float _658 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_621.x + (-0.5));
        float _660 = _658 * (_621.y + (-0.5));
        float _661 = _658 * (_621.z + (-0.5));
        float _668 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_628.x + (-0.5));
        float _670 = _668 * (_628.y + (-0.5));
        float _671 = _668 * (_628.z + (-0.5));
        float _678 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_635.x + (-0.5));
        float _680 = _678 * (_635.y + (-0.5));
        float _681 = _678 * (_635.z + (-0.5));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = _649 * 0.5;
        float _686 = _659 * 0.5;
        float _687 = _669 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _702 = (dot(vec3(_252, _253, _254), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _712 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3360 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_714 + 1.0))) + _719) * _682;
        float _729 = _650 * 0.5;
        float _730 = _660 * 0.5;
        float _731 = _670 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_252, _253, _254), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3393 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_756 + 1.0))) + _761) * _683;
        float _771 = _651 * 0.5;
        float _772 = _661 * 0.5;
        float _773 = _671 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_252, _253, _254), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3426 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_798 + 1.0))) + _803) * _684;
        _820 = _651;
        _822 = _650;
        _823 = _649;
        _824 = _661;
        _825 = _660;
        _826 = _659;
        _827 = _671;
        _828 = _670;
        _829 = _669;
        _830 = _684;
        _831 = _683;
        _832 = _682;
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
    }
    else
    {
        _820 = _821;
        _822 = _821;
        _823 = _821;
        _824 = _821;
        _825 = _821;
        _826 = _821;
        _827 = _821;
        _828 = _821;
        _829 = _821;
        _830 = _821;
        _831 = _821;
        _832 = _821;
        _833 = 0.0;
        _834 = 0.0;
        _835 = 0.0;
    }
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _864 = fma(_489, cbModelParam._m0[30u].z, fma(_485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _481));
        float _868 = fma(_489, cbModelParam._m0[31u].z, fma(_485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _481));
        float _872 = fma(_489, cbModelParam._m0[32u].z, fma(_485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _481));
        float _895 = _481 + _252;
        float _896 = _485 + _253;
        float _897 = _489 + _254;
        float _907 = fma(_897, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895)) - _864;
        float _908 = fma(_897, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895)) - _868;
        float _909 = fma(_897, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895)) - _872;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_864 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_868 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[35u].z) + ((((((_872 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _963 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_930.x + (-0.5));
        float _965 = _963 * (_930.y + (-0.5));
        float _966 = _963 * (_930.z + (-0.5));
        float _973 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_937.x + (-0.5));
        float _975 = _973 * (_937.y + (-0.5));
        float _976 = _973 * (_937.z + (-0.5));
        float _983 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_944.x + (-0.5));
        float _985 = _983 * (_944.y + (-0.5));
        float _986 = _983 * (_944.z + (-0.5));
        float _993 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_951.x + (-0.5));
        float _995 = _993 * (_951.y + (-0.5));
        float _996 = _993 * (_951.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_252, _253, _254), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3489 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1027 + 1.0))) + _1032) * _997;
        float _1042 = _965 * 0.5;
        float _1043 = _975 * 0.5;
        float _1044 = _985 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_252, _253, _254), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3522 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1069 + 1.0))) + _1074) * _998;
        float _1084 = _966 * 0.5;
        float _1085 = _976 * 0.5;
        float _1086 = _986 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_252, _253, _254), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3555 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1111 + 1.0))) + _1116) * _999;
        _1133 = _966;
        _1134 = _965;
        _1135 = _964;
        _1136 = _976;
        _1137 = _975;
        _1138 = _974;
        _1139 = _986;
        _1140 = _985;
        _1141 = _984;
        _1142 = _999;
        _1143 = _998;
        _1144 = _997;
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _821;
        _1134 = _821;
        _1135 = _821;
        _1136 = _821;
        _1137 = _821;
        _1138 = _821;
        _1139 = _821;
        _1140 = _821;
        _1141 = _821;
        _1142 = _821;
        _1143 = _821;
        _1144 = _821;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _833)) + _833;
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _834)) + _834;
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _835)) + _835;
    float _1180 = fma(_1159, cbSceneParam._m0[89u].z, fma(_1158, cbSceneParam._m0[89u].y, _1157 * cbSceneParam._m0[89u].x));
    float _1183 = fma(_1159, cbSceneParam._m0[90u].z, fma(_1158, cbSceneParam._m0[90u].y, _1157 * cbSceneParam._m0[90u].x));
    float _1186 = fma(_1159, cbSceneParam._m0[91u].z, fma(_1158, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1157));
    float _1201 = _428 * 0.5;
    float _1202 = _429 * 0.5;
    float _1203 = _430 * 0.5;
    float _1204 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1207 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1210 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1244;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1217 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_820, _824, _827, _830));
        float _1221 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_822, _825, _828, _831));
        float _1225 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_823, _826, _829, _832));
        float _1232 = dot(vec4(cbModelParam._m0[39u]), vec4(_1201, _1202, _1203, 1.0));
        _1244 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1232) ? 0.0 : (isnan(0.0) ? _1232 : max(0.0, _1232))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1244 = 1.0;
    }
    float _1255;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1246 = dot(vec4(cbModelParam._m0[40u]), vec4(_1201, _1202, _1203, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1259 = (_1255 * cbModelParam._m0[1u].x) + (_1244 * (1.0 - cbModelParam._m0[1u].x));
    float _1269 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _255);
    float _1270 = isnan(_1269) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1269 : min(cbModelParam._m0[25u].z, _1269));
    float _1352;
    float _1354;
    float _1356;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1319 = fma(_489, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481)) + cbModelParam._m0[13u].w;
        float _1323 = fma(_489, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481)) + cbModelParam._m0[14u].w;
        float _1327 = fma(_489, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481)) + cbModelParam._m0[15u].w;
        float _1330 = fma(_430, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428));
        float _1333 = fma(_430, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428));
        float _1336 = fma(_430, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428));
        float _1364;
        if (_1330 > 0.0)
        {
            _1364 = abs((1.0 - _1319) / _1330);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1319 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1364 = frontier_phi_17_15_ladder;
        }
        float _1569;
        if (_1333 > 0.0)
        {
            _1569 = abs((1.0 - _1323) / _1333);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1323 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1569 = frontier_phi_26_22_ladder;
        }
        float _1812;
        if (_1336 > 0.0)
        {
            _1812 = abs((1.0 - _1327) / _1336);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1327 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1812 = frontier_phi_38_33_ladder;
        }
        float _1814 = isnan(_1569) ? _1364 : (isnan(_1364) ? _1569 : min(_1364, _1569));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1330) + _1319;
        float _1820 = (_1815 * _1333) + _1323;
        float _1821 = (_1815 * _1336) + _1327;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1824 = (-1.0) - _1822;
        float _1826 = _1822 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1821 > _1826) || ((_1821 < _1824) || ((_1820 > _1826) || ((_1820 < _1824) || ((_1819 < _1824) || (_1819 > _1826))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1270);
            frontier_phi_16_38_ladder = _1945.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1945.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1945.x * cbModelParam._m0[1u].y;
        }
        _1352 = frontier_phi_16_38_ladder_2;
        _1354 = frontier_phi_16_38_ladder_1;
        _1356 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_428, _429, _430), _1270);
        _1352 = _1340.x * cbModelParam._m0[1u].y;
        _1354 = _1340.y * cbModelParam._m0[1u].y;
        _1356 = _1340.z * cbModelParam._m0[1u].y;
    }
    float _1360 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _255);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1360 : min(cbModelParam._m0[25u].w, _1360));
    float _1454;
    float _1456;
    float _1458;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1418 = fma(_489, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481)) + cbModelParam._m0[21u].w;
        float _1422 = fma(_489, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481)) + cbModelParam._m0[22u].w;
        float _1426 = fma(_489, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481)) + cbModelParam._m0[23u].w;
        float _1429 = fma(_430, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428));
        float _1432 = fma(_430, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428));
        float _1435 = fma(_430, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428));
        float _1574;
        if (_1429 > 0.0)
        {
            _1574 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1574 = frontier_phi_28_24_ladder;
        }
        float _1839;
        if (_1432 > 0.0)
        {
            _1839 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1839 = frontier_phi_40_35_ladder;
        }
        float _2044;
        if (_1435 > 0.0)
        {
            _2044 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2044 = frontier_phi_49_46_ladder;
        }
        float _2046 = isnan(_1839) ? _1574 : (isnan(_1574) ? _1839 : min(_1574, _1839));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1429) + _1418;
        float _2052 = (_2047 * _1432) + _1422;
        float _2053 = (_2047 * _1435) + _1426;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2054;
        float _2057 = _2054 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2053 > _2057) || ((_2053 < _2055) || ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 < _2055) || (_2051 > _2057))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2053, cbModelParam._m0[17u].z, fma(_2052, cbModelParam._m0[17u].y, _2051 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2053, cbModelParam._m0[18u].z, fma(_2052, cbModelParam._m0[18u].y, _2051 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2053, cbModelParam._m0[19u].z, fma(_2052, cbModelParam._m0[19u].y, _2051 * cbModelParam._m0[19u].x))), _1361);
            frontier_phi_25_49_ladder = _2252.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2252.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2252.x * cbModelParam._m0[1u].z;
        }
        _1454 = frontier_phi_25_49_ladder_2;
        _1456 = frontier_phi_25_49_ladder_1;
        _1458 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_428, _429, _430), _1361);
        _1454 = _1438.x * cbModelParam._m0[1u].z;
        _1456 = _1438.y * cbModelParam._m0[1u].z;
        _1458 = _1438.z * cbModelParam._m0[1u].z;
    }
    float _1470 = ((((1.0 - _449) * ((_436 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_449 * _436)) * _420;
    float _1471 = _1470 * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1472 = _1470 * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1473 = _1470 * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1476 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, _1471 * cbSceneParam._m0[91u].x));
    uvec4 _1492 = floatBitsToUint(cbInstanceData._m0[_394 + 5u]);
    uint _1494 = _1492.x * 14u;
    uint _1495 = _1494 + 13u;
    float _1502 = _420 + (-1.0);
    float _1507 = (cbLight._m0[_1495].x * _1502) + 1.0;
    float _1508 = (cbLight._m0[_1495].y * _1502) + 1.0;
    float _1509 = (cbLight._m0[_1495].z * _1502) + 1.0;
    float _1510 = (cbLight._m0[_1495].w * _1502) + 1.0;
    uint _1511 = _1494 + 5u;
    float _1517 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
    uint _1521 = _1494 + 4u;
    float _1528 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1532 = _1494 | 1u;
    float _1543 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_252, _253, _254));
    float _1546 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_252, _253, _254));
    float _3691 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _3702 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1551 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1553 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1560 = ((cbLight._m0[_1511].x * _1517) * _1553) + ((cbLight._m0[_1521].x * _1528) * _1551);
    float _1561 = ((_1517 * cbLight._m0[_1511].y) * _1553) + ((_1528 * cbLight._m0[_1521].y) * _1551);
    float _1562 = ((_1517 * cbLight._m0[_1511].z) * _1553) + ((_1528 * cbLight._m0[_1521].z) * _1551);
    uvec4 _1566 = floatBitsToUint(cbLight._m0[_1494 + 12u]);
    bool _1568 = _1566.x == 0u;
    float _1579;
    float _1581;
    float _1583;
    if (_1568)
    {
        _1579 = _1560;
        _1581 = _1561;
        _1583 = _1562;
    }
    else
    {
        uint _1587 = _1494 + 6u;
        float _1603 = (dot(vec3(cbLight._m0[_1494 + 2u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _1604 = _1603 * _1603;
        float _3713 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1606 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1579 = (((cbLight._m0[_1587].x * 0.3183098733425140380859375) * _1605) * _1606) + _1560;
        _1581 = (((cbLight._m0[_1587].y * 0.3183098733425140380859375) * _1605) * _1606) + _1561;
        _1583 = (((cbLight._m0[_1587].z * 0.3183098733425140380859375) * _1605) * _1606) + _1562;
    }
    bool _1586 = _1566.y == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1586)
    {
        _1624 = _1579;
        _1626 = _1581;
        _1628 = _1583;
    }
    else
    {
        uint _1783 = _1494 + 7u;
        float _1799 = (dot(vec3(cbLight._m0[_1494 + 3u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3729 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1802 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1624 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1579;
        _1626 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1581;
        _1628 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1583;
    }
    uint _1631 = _1494 + 8u;
    float _1644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1494].w)) * _255) * 0.949999988079071044921875);
    float _1645 = _1644 * _1644;
    float _1646 = cbLight._m0[_1494].x + _333;
    float _1647 = cbLight._m0[_1494].y + _334;
    float _1648 = cbLight._m0[_1494].z + _335;
    float _1652 = inversesqrt(dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648)));
    float _1653 = _1652 * _1646;
    float _1654 = _1652 * _1647;
    float _1655 = _1652 * _1648;
    float _1656 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1494].xyz));
    float _3745 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1659 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _1660 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1661 = dot(vec3(_252, _253, _254), vec3(_1653, _1654, _1655));
    float _3767 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1665 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_1653, _1654, _1655));
    float _3778 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1669 = _1645 * _1645;
    float _1673 = ((_1664 * _1664) * (_1669 + (-1.0))) + 1.0;
    float _1684 = (exp2(log2(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = 1.0 - _1645;
    float _1696 = (0.5 / (((_1660 * ((_1659 * _1685) + _1645)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1685) + _1645) * _1659))) * _1659;
    float _3789 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1698 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1669 / ((_1673 * _1673) * 3.141590118408203125));
    uint _1709 = _1494 + 9u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _255) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1532].x + _333;
    float _1723 = cbLight._m0[_1532].y + _334;
    float _1724 = cbLight._m0[_1532].z + _335;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1532].xyz));
    float _3800 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1736 = dot(vec3(_252, _253, _254), vec3(_1729, _1730, _1731));
    float _3811 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1729, _1730, _1731));
    float _3822 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1721 * _1721;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1758 = 1.0 - _1721;
    float _1768 = (0.5 / (((_1660 * ((_1735 * _1758) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1758) + _1721) * _1735))) * _1735;
    float _3833 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    float _1780 = (((_1757 * cbLight._m0[_1709].x) * _1770) * _1517) + (((_1684 * cbLight._m0[_1631].x) * _1698) * _1528);
    float _1781 = (((_1757 * cbLight._m0[_1709].y) * _1770) * _1517) + (((_1684 * cbLight._m0[_1631].y) * _1698) * _1528);
    float _1782 = (((_1757 * cbLight._m0[_1709].z) * _1770) * _1517) + (((_1684 * cbLight._m0[_1631].z) * _1698) * _1528);
    float _1844;
    float _1846;
    float _1848;
    if (_1568)
    {
        _1844 = _1780;
        _1846 = _1781;
        _1848 = _1782;
    }
    else
    {
        uint _1850 = _1494 + 2u;
        uint _1854 = _1494 + 10u;
        float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _255) * 0.949999988079071044921875);
        float _1869 = _1868 * _1868;
        float _1870 = cbLight._m0[_1850].x + _333;
        float _1871 = cbLight._m0[_1850].y + _334;
        float _1872 = cbLight._m0[_1850].z + _335;
        float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
        float _1877 = _1876 * _1870;
        float _1878 = _1876 * _1871;
        float _1879 = _1876 * _1872;
        float _1880 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1850].xyz));
        float _3844 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1884 = dot(vec3(_252, _253, _254), vec3(_1877, _1878, _1879));
        float _3855 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_1877, _1878, _1879));
        float _3866 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1869 * _1869;
        float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
        float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1906 = 1.0 - _1869;
        float _1916 = (0.5 / (((_1660 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1906) + _1869) * _1883))) * _1883;
        float _3877 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1918 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
        float _1919 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1844 = (((_1905 * cbLight._m0[_1854].x) * _1918) * _1919) + _1780;
        _1846 = (((_1905 * cbLight._m0[_1854].y) * _1918) * _1919) + _1781;
        _1848 = (((_1905 * cbLight._m0[_1854].z) * _1918) * _1919) + _1782;
    }
    float _1954;
    float _1956;
    float _1958;
    if (_1586)
    {
        _1954 = _1844;
        _1956 = _1846;
        _1958 = _1848;
    }
    else
    {
        uint _1965 = _1494 + 3u;
        uint _1969 = _1494 + 11u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _255) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _333;
        float _1986 = cbLight._m0[_1965].y + _334;
        float _1987 = cbLight._m0[_1965].z + _335;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1965].xyz));
        float _3893 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1999 = dot(vec3(_252, _253, _254), vec3(_1992, _1993, _1994));
        float _3904 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _3915 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1660 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _2021) + _1984) * _1998))) * _1998;
        float _3926 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1954 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1844;
        _1956 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1846;
        _1958 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1848;
    }
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1492.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
        }
        else
        {
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            uint _2416 = 0u;
            uint _2425;
            bool _2426;
            for (;;)
            {
                _2425 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2416 << 2u)) >> 2u)).x;
                _2426 = _2425 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2426)
                {
                    frontier_phi_66_pred = _2410;
                    frontier_phi_66_pred_1 = _2415;
                    frontier_phi_66_pred_2 = _2414;
                    frontier_phi_66_pred_3 = _2413;
                    frontier_phi_66_pred_4 = _2412;
                    frontier_phi_66_pred_5 = _2411;
                }
                else
                {
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    uint _2561;
                    _2555 = _2410;
                    _2556 = _2411;
                    _2557 = _2412;
                    _2558 = _2413;
                    _2559 = _2414;
                    _2560 = _2415;
                    _2561 = _2425;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    for (;;)
                    {
                        uint _2565 = uint(findLSB(_2561)) + (_2416 << 5u);
                        uint _2562 = (_2561 + 4294967295u) & _2561;
                        uint _2567 = _2565 * 48u;
                        vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2587 = (_2565 * 48u) + 4u;
                        vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2606 = (_2565 * 48u) + 8u;
                        vec3 _2617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x));
                        float _2621 = _2581.x - _2110;
                        float _2622 = _2581.y - _2111;
                        float _2623 = _2581.z - _2112;
                        float _2624 = dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623));
                        float _2627 = inversesqrt(_2624);
                        float _2628 = _2627 * _2621;
                        float _2629 = _2627 * _2622;
                        float _2630 = _2627 * _2623;
                        float _2631 = dot(vec3(_375, _378, _381), vec3(_2628, _2629, _2630));
                        float _2636 = 1.0 - (_2624 * _2581.w);
                        float _3952 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2637 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                        float _2638 = sqrt(_2624) * _2600.w;
                        float _2641 = 1.39999997615814208984375 / (_2638 + 1.39999997615814208984375);
                        float _2642 = _2641 * _2641;
                        float _2645 = ((1.0 - _2642) * _2631) + _2642;
                        float _2648 = _2638 * _2638;
                        float _2652 = ((isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))) * _2637) / ((_2648 * 0.699999988079071044921875) + 1.0);
                        float _2656 = (-0.0) - _2110;
                        float _2657 = (-0.0) - _2111;
                        float _2658 = (-0.0) - _2112;
                        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
                        float _2663 = _2662 * _2656;
                        float _2664 = _2662 * _2657;
                        float _2665 = _2662 * _2658;
                        float _2673 = exp2(log2(1.0 / ((_2648 * 3.5) + 5.0)) * 0.25);
                        float _2674 = 1.0 - _436;
                        float _2681 = sqrt(1.0 - ((1.0 - (_2674 * _2674)) * (1.0 - (_2673 * _2673))));
                        float _2682 = _2681 * _2681;
                        float _2683 = _2682 * _2682;
                        float _2684 = _2663 + _2628;
                        float _2685 = _2664 + _2629;
                        float _2686 = _2665 + _2630;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2694 = dot(vec3(_375, _378, _381), vec3(_2663, _2664, _2665));
                        float _3968 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2697 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2698 = dot(vec3(_375, _378, _381), vec3(_2690 * _2684, _2690 * _2685, _2690 * _2686));
                        float _3979 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2701 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2705 = ((_2701 * _2701) * (_2683 + (-1.0))) + 1.0;
                        float _2706 = _2641 * _2682;
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2631) + _2707;
                        float _3990 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2712 = 1.0 - _2682;
                        float _2722 = (0.5 / (((_2711 * ((_2697 * _2712) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2712) + _2682) * _2697))) * _2711;
                        float _4001 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2733 = (((_2683 * 3.1415927410125732421875) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) / ((_2705 * _2705) * ((_2648 * 2.1991131305694580078125) + 3.141590118408203125))) * _2637;
                        _2485 = (_2652 * _2600.x) + _2558;
                        _2486 = (_2652 * _2600.y) + _2559;
                        _2487 = (_2652 * _2600.z) + _2560;
                        _2482 = (_2733 * _2617.x) + _2555;
                        _2483 = (_2733 * _2617.y) + _2556;
                        _2484 = (_2733 * _2617.z) + _2557;
                        if (_2562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2555 = _2482;
                            _2556 = _2483;
                            _2557 = _2484;
                            _2558 = _2485;
                            _2559 = _2486;
                            _2560 = _2487;
                            _2561 = _2562;
                        }
                    }
                    frontier_phi_66_pred = _2482;
                    frontier_phi_66_pred_1 = _2487;
                    frontier_phi_66_pred_2 = _2486;
                    frontier_phi_66_pred_3 = _2485;
                    frontier_phi_66_pred_4 = _2484;
                    frontier_phi_66_pred_5 = _2483;
                }
                _2258 = frontier_phi_66_pred;
                _2268 = frontier_phi_66_pred_1;
                _2266 = frontier_phi_66_pred_2;
                _2264 = frontier_phi_66_pred_3;
                _2262 = frontier_phi_66_pred_4;
                _2260 = frontier_phi_66_pred_5;
                uint _2417 = _2416 + 1u;
                if (_2417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2410 = _2258;
                    _2411 = _2260;
                    _2412 = _2262;
                    _2413 = _2264;
                    _2414 = _2266;
                    _2415 = _2268;
                    _2416 = _2417;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
        }
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.z;
        uint _2274 = (_2272 >> 8u) & 15u;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((4294967295u << _2274) & _2156) == 0u)
        {
            _2378 = _2257;
            _2380 = _2259;
            _2382 = _2261;
            _2384 = _2263;
            _2386 = _2265;
            _2388 = _2267;
        }
        else
        {
            float _2403 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2404 = _2403 * _2110;
            float _2405 = _2403 * _2111;
            float _2406 = _2403 * _2112;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2274 < ((_2272 >> 12u) & 15u))
            {
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2389;
                float _2538 = _2257;
                float _2539 = _2259;
                float _2540 = _2261;
                float _2541 = _2263;
                float _2542 = _2265;
                float _2543 = _2267;
                uint _2544 = _2274;
                uint _2553;
                bool _2554;
                for (;;)
                {
                    _2553 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                    _2554 = _2553 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2554)
                    {
                        frontier_phi_77_pred = _2543;
                        frontier_phi_77_pred_1 = _2542;
                        frontier_phi_77_pred_2 = _2541;
                        frontier_phi_77_pred_3 = _2540;
                        frontier_phi_77_pred_4 = _2539;
                        frontier_phi_77_pred_5 = _2538;
                    }
                    else
                    {
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _2760 = _2538;
                        float _2761 = _2539;
                        float _2762 = _2540;
                        float _2763 = _2541;
                        float _2764 = _2542;
                        float _2765 = _2543;
                        uint _2766 = _2553;
                        uint _2767;
                        vec4 _2792;
                        float _2793;
                        vec4 _2808;
                        vec3 _2820;
                        vec4 _2836;
                        vec4 _2852;
                        float _2899;
                        bool _2900;
                        for (;;)
                        {
                            uint _2777 = ((_2544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2766));
                            _2767 = (_2766 + 4294967295u) & _2766;
                            uint _2779 = _2777 * 40u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            _2793 = _2792.w;
                            uint _2795 = (_2777 * 40u) + 4u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2810 = (_2777 * 40u) + 8u;
                            _2820 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x));
                            uint _2823 = (_2777 * 40u) + 16u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2839 = (_2777 * 40u) + 20u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2855 = (_2777 * 40u) + 24u;
                            vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2874 = (_2777 * 40u) + 28u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            _2899 = fma(_2112, _2887.z, fma(_2111, _2887.y, _2887.x * _2110)) + _2887.w;
                            _2900 = !((fma(_2112, _2868.z, fma(_2111, _2868.y, _2868.x * _2110)) + _2868.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2900)
                            {
                                float _2927 = _2792.x - _2110;
                                float _2928 = _2792.y - _2111;
                                float _2929 = _2792.z - _2112;
                                float _2930 = dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929));
                                float _2933 = inversesqrt(_2930);
                                float _2934 = _2933 * _2927;
                                float _2935 = _2933 * _2928;
                                float _2936 = _2933 * _2929;
                                float _2940 = 1.0 - (_2930 / (_2793 * _2793));
                                float _4012 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2941 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                                float _2945 = sqrt(_2930) * _2808.w;
                                float _2947 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                                float _2948 = _2947 * _2947;
                                float _2951 = ((1.0 - _2948) * dot(vec3(_2934, _2935, _2936), vec3(_375, _378, _381))) + _2948;
                                float _2954 = _2945 * _2945;
                                float _2958 = (fma(_2112, _2836.z, fma(_2111, _2836.y, _2836.x * _2110)) + _2836.w) / _2899;
                                float _2959 = (fma(_2112, _2852.z, fma(_2111, _2852.y, _2852.x * _2110)) + _2852.w) / _2899;
                                float _2963 = 1.0 - dot(vec2(_2958, _2959), vec2(_2958, _2959));
                                float _4028 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2964 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _2965 = _2964 * (((isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))) * _2941) / ((_2954 * 0.699999988079071044921875) + 1.0));
                                float _2977 = exp2(log2(1.0 / ((_2954 * 3.5) + 5.0)) * 0.25);
                                float _2978 = 1.0 - _436;
                                float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                                float _2986 = _2985 * _2985;
                                float _2987 = _2986 * _2986;
                                float _2988 = _2934 - _2404;
                                float _2989 = _2935 - _2405;
                                float _2990 = _2936 - _2406;
                                float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                                float _2998 = dot(vec3(_375, _378, _381), vec3((-0.0) - _2404, (-0.0) - _2405, (-0.0) - _2406));
                                float _4039 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _3001 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3002 = dot(vec3(_375, _378, _381), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                                float _4050 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3005 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                                float _3010 = _2947 * _2986;
                                float _3011 = _3010 * _3010;
                                float _3017 = ((1.0 - _3011) * dot(vec3(_375, _378, _381), vec3(_2934, _2935, _2936))) + _3011;
                                float _4061 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3019 = 1.0 - _2986;
                                float _3029 = (0.5 / (((_3018 * ((_3001 * _3019) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3018 * _3019) + _2986) * _3001))) * _3018;
                                float _4072 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3039 = (_2964 * _2941) * (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_3009 * _3009) * ((_2954 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2965 * _2808.y;
                                frontier_phi_83_pred_1 = _2965 * _2808.x;
                                frontier_phi_83_pred_2 = _3039 * _2820.z;
                                frontier_phi_83_pred_3 = _3039 * _2820.y;
                                frontier_phi_83_pred_4 = _3039 * _2820.x;
                                frontier_phi_83_pred_5 = _2965 * _2808.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3047 = frontier_phi_83_pred;
                            _3046 = frontier_phi_83_pred_1;
                            _3045 = frontier_phi_83_pred_2;
                            _3044 = frontier_phi_83_pred_3;
                            _3043 = frontier_phi_83_pred_4;
                            _3048 = frontier_phi_83_pred_5;
                            _2750 = _3046 + _2763;
                            _2751 = _3047 + _2764;
                            _2752 = _3048 + _2765;
                            _2747 = _3043 + _2760;
                            _2748 = _3044 + _2761;
                            _2749 = _3045 + _2762;
                            if (_2767 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2767;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2752;
                        frontier_phi_77_pred_1 = _2751;
                        frontier_phi_77_pred_2 = _2750;
                        frontier_phi_77_pred_3 = _2749;
                        frontier_phi_77_pred_4 = _2748;
                        frontier_phi_77_pred_5 = _2747;
                    }
                    _2389 = frontier_phi_77_pred;
                    _2387 = frontier_phi_77_pred_1;
                    _2385 = frontier_phi_77_pred_2;
                    _2383 = frontier_phi_77_pred_3;
                    _2381 = frontier_phi_77_pred_4;
                    _2379 = frontier_phi_77_pred_5;
                    uint _2545 = _2544 + 1u;
                    if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2538 = _2379;
                        _2539 = _2381;
                        _2540 = _2383;
                        _2541 = _2385;
                        _2542 = _2387;
                        _2543 = _2389;
                        _2544 = _2545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2383;
                frontier_phi_58_59_ladder_1 = _2389;
                frontier_phi_58_59_ladder_2 = _2387;
                frontier_phi_58_59_ladder_3 = _2385;
                frontier_phi_58_59_ladder_4 = _2381;
                frontier_phi_58_59_ladder_5 = _2379;
            }
            else
            {
                frontier_phi_58_59_ladder = _2261;
                frontier_phi_58_59_ladder_1 = _2267;
                frontier_phi_58_59_ladder_2 = _2265;
                frontier_phi_58_59_ladder_3 = _2263;
                frontier_phi_58_59_ladder_4 = _2259;
                frontier_phi_58_59_ladder_5 = _2257;
            }
            _2378 = frontier_phi_58_59_ladder_5;
            _2380 = frontier_phi_58_59_ladder_4;
            _2382 = frontier_phi_58_59_ladder;
            _2384 = frontier_phi_58_59_ladder_3;
            _2386 = frontier_phi_58_59_ladder_2;
            _2388 = frontier_phi_58_59_ladder_1;
        }
        float _2393 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
        _2169 = (_2393 * _2384) + _1624;
        _2171 = (_2393 * _2386) + _1626;
        _2173 = (_2393 * _2388) + _1628;
        _2175 = ((_2378 * 0.039999999105930328369140625) * _2393) + _1954;
        _2177 = ((_2380 * 0.039999999105930328369140625) * _2393) + _1956;
        _2179 = ((_2382 * 0.039999999105930328369140625) * _2393) + _1958;
    }
    else
    {
        _2169 = _1624;
        _2171 = _1626;
        _2173 = _1628;
        _2175 = _1954;
        _2177 = _1956;
        _2179 = _1958;
    }
    float _4088 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _4099 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _4110 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _2196 = ((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2169 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _420))) + ((_2175 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _1259)) * cbPerFrame._m0[3u].x);
    float _2197 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2171 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _420))) + ((_2177 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1259)) * cbPerFrame._m0[3u].x);
    float _2198 = ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2173 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _420))) + ((_2179 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1259)) * cbPerFrame._m0[3u].x);
    uint _2199 = _394 + 6u;
    float _2207 = _354 / cbSceneParam._m0[86u].x;
    float _2208 = _355 / cbSceneParam._m0[86u].y;
    vec4 _2222 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2207, _2208, (log2((isnan(cbSceneParam._m0[77u].w) ? _274 : (isnan(_274) ? cbSceneParam._m0[77u].w : min(_274, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2224 = _2222.x;
    float _2225 = _2222.y;
    float _2226 = _2222.z;
    float _2227 = _2222.w;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_274 > cbSceneParam._m0[78u].w)
    {
        float _2282 = isnan(_274) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _274 : min(cbSceneParam._m0[80u].w, _274));
        float _2283 = _2282 / _274;
        float _2294 = _2283 * _326;
        float _2295 = _327 * _2283;
        float _2296 = (-0.0) - _2295;
        float _2298 = _2283 * _328;
        float _2300 = (cbSceneParam._m0[77u].w * _2296) / _2282;
        float _2301 = _2300 + cbSceneParam._m0[79u].w;
        float _2302 = cbSceneParam._m0[79u].w - _2295;
        float _2308 = sqrt(((_2294 * _2294) + (_2295 * _2295)) + (_2298 * _2298));
        float _2311 = (1.0 - (cbSceneParam._m0[77u].w / _2282)) * _2308;
        float _2316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2495;
        if (abs((_2296 - _2300) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2495 = ((((_2301 > 0.0) ? exp2(_2316 * _2301) : (2.0 - exp2(_2318 * _2301))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2311;
        }
        else
        {
            float _2439 = 1.0 / cbSceneParam._m0[80u].x;
            float _2440 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : max(_2301, _2302));
            float _2441 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : min(_2301, _2302));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            float _2451 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : min(_2441, 0.0));
            _2495 = ((abs(_2308 / _2296) * cbSceneParam._m0[80u].y) * ((((_2450 - _2451) * 2.0) - ((exp2(_2316 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0)))) - exp2(_2316 * (isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0))))) * _2439)) - ((exp2(_2318 * _2450) - exp2(_2318 * _2451)) * _2439))) + (_2311 * cbSceneParam._m0[80u].z);
        }
        vec4 _2497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2207, _2208, 1.0), 0.0);
        float _2506 = exp2((_2495 * (-1.44269502162933349609375)) * (1.0 - _2497.w));
        float _2507 = log2(_2506);
        float _2523 = log2(_2227);
        _2320 = (exp2(_2523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].x)) * _2497.x) / cbSceneParam._m0[78u].x)) + _2224;
        _2322 = (exp2(_2523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].y)) * _2497.y) / cbSceneParam._m0[78u].y)) + _2225;
        _2324 = (exp2(_2523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].z)) * _2497.z) / cbSceneParam._m0[78u].z)) + _2226;
        _2326 = _2506 * _2227;
    }
    else
    {
        _2320 = _2224;
        _2322 = _2225;
        _2324 = _2226;
        _2326 = _2227;
    }
    bool _2533;
    vec4 _2336;
    vec4 _2358;
    float _2360;
    float _2364;
    float _2365;
    float _2366;
    float _2367;
    bool _2377;
    for (;;)
    {
        _2336 = cbMatDynParam._m0[0u];
        float _2338 = roundEven(_2336.y);
        bool _2339 = _2338 == 3.0;
        float _2340 = log2(_2326);
        float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * _2196;
        float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * _2197;
        float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * _2198;
        float _2356 = _342 + (-0.5);
        _2358 = cbMtdParam._m0[1u];
        _2360 = _2358.y * _2356;
        float _2363 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2364 = _2363 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2320)));
        _2365 = _2363 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2322)));
        _2366 = _2363 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2324)));
        _2367 = _2356 * 0.999000012874603271484375;
        _2377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2377)
        {
            if ((cbInstanceData._m0[_394 + 7u].x + _2367) < 0.5)
            {
                _2533 = true;
                break;
            }
        }
        uint _2474 = _396 + uint(_2336.w);
        if ((cbInstanceData._m0[_2474].w < 1.0) && ((cbInstanceData._m0[_2474].w + _2367) < 0.5))
        {
            _2533 = true;
            break;
        }
        if ((_2360 + 1.0) < _2358.x)
        {
            _2533 = true;
            break;
        }
        _2533 = false;
        break;
    }
    float _2738;
    if (_2533)
    {
        discard_state = true;
        _2738 = 0.0;
    }
    else
    {
        _2738 = cbInstanceData._m0[_2199].w;
    }
    SV_Target.x = _2364;
    SV_Target.y = _2365;
    SV_Target.z = _2366;
    SV_Target.w = _2738;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2199].w;
    discard_exit();
}


