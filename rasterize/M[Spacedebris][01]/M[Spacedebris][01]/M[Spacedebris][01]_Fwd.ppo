#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Spacedebris_01_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _776;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _169 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _170 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _176 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _183 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _190 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _217 = texture(sampler2D(M_Spacedebris_01_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _225 = (_217.x * 2.0) + (-1.0);
    float _227 = (_217.y * 2.0) + (-1.0);
    float _228 = dot(vec2(_225, _227), vec2(_225, _227));
    float _3091 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _234 = sqrt(1.0 - (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0))));
    float _237 = fma(_234, _183 * NORMAL.x, fma(_227, _190 * TANGENT.x, (_176 * _168) * _225));
    float _240 = fma(_234, _183 * NORMAL.y, fma(_227, _190 * TANGENT.y, (_176 * _169) * _225));
    float _243 = fma(_234, _183 * NORMAL.z, fma(_227, _190 * TANGENT.z, (_176 * _170) * _225));
    float _247 = inversesqrt(dot(vec3(_237, _240, _243), vec3(_237, _240, _243)));
    float _248 = _247 * _237;
    float _249 = _247 * _240;
    float _250 = _247 * _243;
    float _3102 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _251 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    float _3113 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3124 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3135 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _270 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _312 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _322 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _312);
    float _323 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _312);
    float _324 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _312);
    float _328 = inversesqrt(dot(vec3(_322, _323, _324), vec3(_322, _323, _324)));
    float _329 = _322 * _328;
    float _330 = _323 * _328;
    float _331 = _324 * _328;
    float _337 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _338 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _359 = fma(_250, cbSceneParam._m0[5u].z, fma(_249, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _248));
    float _362 = fma(_250, cbSceneParam._m0[6u].z, fma(_249, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _248));
    float _365 = fma(_250, cbSceneParam._m0[7u].z, fma(_249, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _248));
    uint _378 = uint(roundEven(NORMAL.w)) * 13u;
    uint _381 = (_378 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _387 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * cbInstanceData._m0[_381].x;
    float _388 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0)))) * cbInstanceData._m0[_381].y;
    float _389 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0)))) * cbInstanceData._m0[_381].z;
    float _3146 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _3168 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    vec4 _401 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _337, cbSceneParam._m0[86u].y * _338));
    float _404 = _401.x * TEXCOORD.z;
    float _405 = dot(vec3(_248, _249, _250), vec3(_329, _330, _331));
    float _408 = _405 * 2.0;
    float _412 = (_408 * _248) - _329;
    float _413 = (_408 * _249) - _330;
    float _414 = (_408 * _250) - _331;
    float _418 = abs(dot(vec3(_329, _330, _331), vec3(_248, _249, _250)));
    float _3179 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _420 = sqrt(_251);
    float _433 = exp2((_420 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_420 * 3.0));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _775;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _500 = fma(_473, cbModelParam._m0[26u].z, fma(_469, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _465));
        float _504 = fma(_473, cbModelParam._m0[27u].z, fma(_469, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _465));
        float _508 = fma(_473, cbModelParam._m0[28u].z, fma(_469, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _465));
        float _533 = _465 + _248;
        float _534 = _469 + _249;
        float _535 = _473 + _250;
        float _545 = fma(_535, cbModelParam._m0[26u].z, fma(_534, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533)) - _500;
        float _546 = fma(_535, cbModelParam._m0[27u].z, fma(_534, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533)) - _504;
        float _547 = fma(_535, cbModelParam._m0[28u].z, fma(_534, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533)) - _508;
        float _551 = inversesqrt(dot(vec3(_545, _546, _547), vec3(_545, _546, _547)));
        float _564 = ((_551 * _545) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_500 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_551 * _546) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_504 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_551 * _547) / cbModelParam._m0[34u].z) + ((((((_508 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        float _603 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_569.x + (-0.5));
        float _605 = _603 * (_569.y + (-0.5));
        float _606 = _603 * (_569.z + (-0.5));
        float _613 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_576.x + (-0.5));
        float _615 = _613 * (_576.y + (-0.5));
        float _616 = _613 * (_576.z + (-0.5));
        float _623 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_583.x + (-0.5));
        float _625 = _623 * (_583.y + (-0.5));
        float _626 = _623 * (_583.z + (-0.5));
        float _633 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_590.x + (-0.5));
        float _635 = _633 * (_590.y + (-0.5));
        float _636 = _633 * (_590.z + (-0.5));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = _604 * 0.5;
        float _641 = _614 * 0.5;
        float _642 = _624 * 0.5;
        float _643 = dot(vec3(_640, _641, _642), vec3(_640, _641, _642));
        float _648 = (_643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_643);
        float _657 = (dot(vec3(_248, _249, _250), vec3(_648 * _640, _648 * _641, _648 * _642)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _667 = sqrt(((_641 * _641) + (_640 * _640)) + (_642 * _642)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _669 = _668 * 2.0;
        float _673 = (1.0 - _668) / (_668 + 1.0);
        float _3227 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _683 = ((((1.0 - _674) * (_669 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_669 + 1.0))) + _674) * _637;
        float _684 = _605 * 0.5;
        float _685 = _615 * 0.5;
        float _686 = _625 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _700 = (dot(vec3(_248, _249, _250), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _709 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3260 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_711 + 1.0))) + _716) * _638;
        float _726 = _606 * 0.5;
        float _727 = _616 * 0.5;
        float _728 = _626 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _742 = (dot(vec3(_248, _249, _250), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _751 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3293 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_753 + 1.0))) + _758) * _639;
        _775 = _606;
        _777 = _605;
        _778 = _604;
        _779 = _616;
        _780 = _615;
        _781 = _614;
        _782 = _626;
        _783 = _625;
        _784 = _624;
        _785 = _639;
        _786 = _638;
        _787 = _637;
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
    }
    else
    {
        _775 = _776;
        _777 = _776;
        _778 = _776;
        _779 = _776;
        _780 = _776;
        _781 = _776;
        _782 = _776;
        _783 = _776;
        _784 = _776;
        _785 = _776;
        _786 = _776;
        _787 = _776;
        _788 = 0.0;
        _789 = 0.0;
        _790 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_473, cbModelParam._m0[30u].z, fma(_469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _465));
        float _820 = fma(_473, cbModelParam._m0[31u].z, fma(_469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _465));
        float _824 = fma(_473, cbModelParam._m0[32u].z, fma(_469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _465));
        float _847 = _465 + _248;
        float _848 = _469 + _249;
        float _849 = _473 + _250;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_248, _249, _250), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3356 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_248, _249, _250), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3389 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_248, _249, _250), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3422 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _776;
        _1086 = _776;
        _1087 = _776;
        _1088 = _776;
        _1089 = _776;
        _1090 = _776;
        _1091 = _776;
        _1092 = _776;
        _1093 = _776;
        _1094 = _776;
        _1095 = _776;
        _1096 = _776;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _788)) + _788;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _789)) + _789;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _790)) + _790;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _412 * 0.5;
    float _1154 = _413 * 0.5;
    float _1155 = _414 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _779, _782, _785));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_777, _780, _783, _786));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_778, _781, _784, _787));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1221 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _251);
    float _1222 = isnan(_1221) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1221 : min(cbModelParam._m0[25u].z, _1221));
    float _1304;
    float _1306;
    float _1308;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1271 = fma(_473, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465)) + cbModelParam._m0[13u].w;
        float _1275 = fma(_473, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465)) + cbModelParam._m0[14u].w;
        float _1279 = fma(_473, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465)) + cbModelParam._m0[15u].w;
        float _1282 = fma(_414, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _412));
        float _1285 = fma(_414, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _412));
        float _1288 = fma(_414, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _412));
        float _1316;
        if (_1282 > 0.0)
        {
            _1316 = abs((1.0 - _1271) / _1282);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1271 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1316 = frontier_phi_14_12_ladder;
        }
        float _1521;
        if (_1285 > 0.0)
        {
            _1521 = abs((1.0 - _1275) / _1285);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1275 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1521 = frontier_phi_23_19_ladder;
        }
        float _1764;
        if (_1288 > 0.0)
        {
            _1764 = abs((1.0 - _1279) / _1288);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1279 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1764 = frontier_phi_35_30_ladder;
        }
        float _1766 = isnan(_1521) ? _1316 : (isnan(_1316) ? _1521 : min(_1316, _1521));
        float _1767 = isnan(_1764) ? _1766 : (isnan(_1766) ? _1764 : min(_1766, _1764));
        float _1771 = (_1767 * _1282) + _1271;
        float _1772 = (_1767 * _1285) + _1275;
        float _1773 = (_1767 * _1288) + _1279;
        float _1774 = _1767 * 9.9999997473787516355514526367188e-05;
        float _1776 = (-1.0) - _1774;
        float _1778 = _1774 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1773 > _1778) || ((_1773 < _1776) || ((_1772 > _1778) || ((_1772 < _1776) || ((_1771 < _1776) || (_1771 > _1778))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1773, cbModelParam._m0[9u].z, fma(_1772, cbModelParam._m0[9u].y, _1771 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1773, cbModelParam._m0[10u].z, fma(_1772, cbModelParam._m0[10u].y, _1771 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1773, cbModelParam._m0[11u].z, fma(_1772, cbModelParam._m0[11u].y, _1771 * cbModelParam._m0[11u].x))), _1222);
            frontier_phi_13_35_ladder = _1897.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1897.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1897.x * cbModelParam._m0[1u].y;
        }
        _1304 = frontier_phi_13_35_ladder_2;
        _1306 = frontier_phi_13_35_ladder_1;
        _1308 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_412, _413, _414), _1222);
        _1304 = _1292.x * cbModelParam._m0[1u].y;
        _1306 = _1292.y * cbModelParam._m0[1u].y;
        _1308 = _1292.z * cbModelParam._m0[1u].y;
    }
    float _1312 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _251);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1312 : min(cbModelParam._m0[25u].w, _1312));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1370 = fma(_473, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465)) + cbModelParam._m0[21u].w;
        float _1374 = fma(_473, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465)) + cbModelParam._m0[22u].w;
        float _1378 = fma(_473, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465)) + cbModelParam._m0[23u].w;
        float _1381 = fma(_414, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _412));
        float _1384 = fma(_414, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _412));
        float _1387 = fma(_414, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _412));
        float _1526;
        if (_1381 > 0.0)
        {
            _1526 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1526 = frontier_phi_25_21_ladder;
        }
        float _1791;
        if (_1384 > 0.0)
        {
            _1791 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1791 = frontier_phi_37_32_ladder;
        }
        float _1996;
        if (_1387 > 0.0)
        {
            _1996 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1996 = frontier_phi_46_43_ladder;
        }
        float _1998 = isnan(_1791) ? _1526 : (isnan(_1526) ? _1791 : min(_1526, _1791));
        float _1999 = isnan(_1996) ? _1998 : (isnan(_1998) ? _1996 : min(_1998, _1996));
        float _2003 = (_1999 * _1381) + _1370;
        float _2004 = (_1999 * _1384) + _1374;
        float _2005 = (_1999 * _1387) + _1378;
        float _2006 = _1999 * 9.9999997473787516355514526367188e-05;
        float _2007 = (-1.0) - _2006;
        float _2009 = _2006 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2005 > _2009) || ((_2005 < _2007) || ((_2004 > _2009) || ((_2004 < _2007) || ((_2003 < _2007) || (_2003 > _2009))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2005, cbModelParam._m0[17u].z, fma(_2004, cbModelParam._m0[17u].y, _2003 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2005, cbModelParam._m0[18u].z, fma(_2004, cbModelParam._m0[18u].y, _2003 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2005, cbModelParam._m0[19u].z, fma(_2004, cbModelParam._m0[19u].y, _2003 * cbModelParam._m0[19u].x))), _1313);
            frontier_phi_22_46_ladder = _2204.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2204.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2204.x * cbModelParam._m0[1u].z;
        }
        _1406 = frontier_phi_22_46_ladder_2;
        _1408 = frontier_phi_22_46_ladder_1;
        _1410 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_412, _413, _414), _1313);
        _1406 = _1390.x * cbModelParam._m0[1u].z;
        _1408 = _1390.y * cbModelParam._m0[1u].z;
        _1410 = _1390.z * cbModelParam._m0[1u].z;
    }
    float _1422 = ((((1.0 - _433) * ((_420 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_433 * _420)) * _404;
    float _1423 = _1422 * ((cbModelParam._m0[1u].w * (_1406 - _1304)) + _1304);
    float _1424 = _1422 * ((cbModelParam._m0[1u].w * (_1408 - _1306)) + _1306);
    float _1425 = _1422 * ((cbModelParam._m0[1u].w * (_1410 - _1308)) + _1308);
    float _1428 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, _1423 * cbSceneParam._m0[91u].x));
    uvec4 _1444 = floatBitsToUint(cbInstanceData._m0[_378 + 5u]);
    uint _1446 = _1444.x * 14u;
    uint _1447 = _1446 + 13u;
    float _1454 = _404 + (-1.0);
    float _1459 = (cbLight._m0[_1447].x * _1454) + 1.0;
    float _1460 = (cbLight._m0[_1447].y * _1454) + 1.0;
    float _1461 = (cbLight._m0[_1447].z * _1454) + 1.0;
    float _1462 = (cbLight._m0[_1447].w * _1454) + 1.0;
    uint _1463 = _1446 + 5u;
    float _1469 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
    uint _1473 = _1446 + 4u;
    float _1480 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
    uint _1484 = _1446 | 1u;
    float _1495 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_248, _249, _250));
    float _1498 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_248, _249, _250));
    float _3558 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _3569 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _1503 = (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.3183098733425140380859375;
    float _1505 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.3183098733425140380859375;
    float _1512 = ((cbLight._m0[_1463].x * _1469) * _1505) + ((cbLight._m0[_1473].x * _1480) * _1503);
    float _1513 = ((_1469 * cbLight._m0[_1463].y) * _1505) + ((_1480 * cbLight._m0[_1473].y) * _1503);
    float _1514 = ((_1469 * cbLight._m0[_1463].z) * _1505) + ((_1480 * cbLight._m0[_1473].z) * _1503);
    uvec4 _1518 = floatBitsToUint(cbLight._m0[_1446 + 12u]);
    bool _1520 = _1518.x == 0u;
    float _1531;
    float _1533;
    float _1535;
    if (_1520)
    {
        _1531 = _1512;
        _1533 = _1513;
        _1535 = _1514;
    }
    else
    {
        uint _1539 = _1446 + 6u;
        float _1555 = (dot(vec3(cbLight._m0[_1446 + 2u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1556 = _1555 * _1555;
        float _3580 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1558 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
        _1531 = (((cbLight._m0[_1539].x * 0.3183098733425140380859375) * _1557) * _1558) + _1512;
        _1533 = (((cbLight._m0[_1539].y * 0.3183098733425140380859375) * _1557) * _1558) + _1513;
        _1535 = (((cbLight._m0[_1539].z * 0.3183098733425140380859375) * _1557) * _1558) + _1514;
    }
    bool _1538 = _1518.y == 0u;
    float _1576;
    float _1578;
    float _1580;
    if (_1538)
    {
        _1576 = _1531;
        _1578 = _1533;
        _1580 = _1535;
    }
    else
    {
        uint _1735 = _1446 + 7u;
        float _1751 = (dot(vec3(cbLight._m0[_1446 + 3u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3596 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1754 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1576 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1531;
        _1578 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1533;
        _1580 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1535;
    }
    uint _1583 = _1446 + 8u;
    float _1596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1446].w)) * _251) * 0.949999988079071044921875);
    float _1597 = _1596 * _1596;
    float _1598 = cbLight._m0[_1446].x + _329;
    float _1599 = cbLight._m0[_1446].y + _330;
    float _1600 = cbLight._m0[_1446].z + _331;
    float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
    float _1605 = _1604 * _1598;
    float _1606 = _1604 * _1599;
    float _1607 = _1604 * _1600;
    float _1608 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1446].xyz));
    float _3612 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1611 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _1612 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _1613 = dot(vec3(_248, _249, _250), vec3(_1605, _1606, _1607));
    float _3634 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1616 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _1617 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_1605, _1606, _1607));
    float _3645 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1621 = _1597 * _1597;
    float _1625 = ((_1616 * _1616) * (_1621 + (-1.0))) + 1.0;
    float _1636 = (exp2(log2(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = 1.0 - _1597;
    float _1648 = (0.5 / (((_1612 * ((_1611 * _1637) + _1597)) + 9.9999999392252902907785028219223e-09) + (((_1612 * _1637) + _1597) * _1611))) * _1611;
    float _3656 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1650 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1621 / ((_1625 * _1625) * 3.141590118408203125));
    uint _1661 = _1446 + 9u;
    float _1672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1484].w)) * _251) * 0.949999988079071044921875);
    float _1673 = _1672 * _1672;
    float _1674 = cbLight._m0[_1484].x + _329;
    float _1675 = cbLight._m0[_1484].y + _330;
    float _1676 = cbLight._m0[_1484].z + _331;
    float _1680 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
    float _1681 = _1680 * _1674;
    float _1682 = _1680 * _1675;
    float _1683 = _1680 * _1676;
    float _1684 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1484].xyz));
    float _3667 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1688 = dot(vec3(_248, _249, _250), vec3(_1681, _1682, _1683));
    float _3678 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _1692 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_1681, _1682, _1683));
    float _3689 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1696 = _1673 * _1673;
    float _1700 = ((_1691 * _1691) * (_1696 + (-1.0))) + 1.0;
    float _1709 = (exp2(log2(1.0 - (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1710 = 1.0 - _1673;
    float _1720 = (0.5 / (((_1612 * ((_1687 * _1710) + _1673)) + 9.9999999392252902907785028219223e-09) + (((_1612 * _1710) + _1673) * _1687))) * _1687;
    float _3700 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1722 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1696 / ((_1700 * _1700) * 3.141590118408203125));
    float _1732 = (((_1709 * cbLight._m0[_1661].x) * _1722) * _1469) + (((_1636 * cbLight._m0[_1583].x) * _1650) * _1480);
    float _1733 = (((_1709 * cbLight._m0[_1661].y) * _1722) * _1469) + (((_1636 * cbLight._m0[_1583].y) * _1650) * _1480);
    float _1734 = (((_1709 * cbLight._m0[_1661].z) * _1722) * _1469) + (((_1636 * cbLight._m0[_1583].z) * _1650) * _1480);
    float _1796;
    float _1798;
    float _1800;
    if (_1520)
    {
        _1796 = _1732;
        _1798 = _1733;
        _1800 = _1734;
    }
    else
    {
        uint _1802 = _1446 + 2u;
        uint _1806 = _1446 + 10u;
        float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _251) * 0.949999988079071044921875);
        float _1821 = _1820 * _1820;
        float _1822 = cbLight._m0[_1802].x + _329;
        float _1823 = cbLight._m0[_1802].y + _330;
        float _1824 = cbLight._m0[_1802].z + _331;
        float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
        float _1829 = _1828 * _1822;
        float _1830 = _1828 * _1823;
        float _1831 = _1828 * _1824;
        float _1832 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1802].xyz));
        float _3711 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1835 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1836 = dot(vec3(_248, _249, _250), vec3(_1829, _1830, _1831));
        float _3722 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1839 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1840 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1829, _1830, _1831));
        float _3733 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1844 = _1821 * _1821;
        float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
        float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1858 = 1.0 - _1821;
        float _1868 = (0.5 / (((_1612 * ((_1835 * _1858) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1612 * _1858) + _1821) * _1835))) * _1835;
        float _3744 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1870 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
        float _1871 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
        _1796 = (((_1857 * cbLight._m0[_1806].x) * _1870) * _1871) + _1732;
        _1798 = (((_1857 * cbLight._m0[_1806].y) * _1870) * _1871) + _1733;
        _1800 = (((_1857 * cbLight._m0[_1806].z) * _1870) * _1871) + _1734;
    }
    float _1906;
    float _1908;
    float _1910;
    if (_1538)
    {
        _1906 = _1796;
        _1908 = _1798;
        _1910 = _1800;
    }
    else
    {
        uint _1917 = _1446 + 3u;
        uint _1921 = _1446 + 11u;
        float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _251) * 0.949999988079071044921875);
        float _1936 = _1935 * _1935;
        float _1937 = cbLight._m0[_1917].x + _329;
        float _1938 = cbLight._m0[_1917].y + _330;
        float _1939 = cbLight._m0[_1917].z + _331;
        float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
        float _1944 = _1943 * _1937;
        float _1945 = _1943 * _1938;
        float _1946 = _1943 * _1939;
        float _1947 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1917].xyz));
        float _3760 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1951 = dot(vec3(_248, _249, _250), vec3(_1944, _1945, _1946));
        float _3771 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1955 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_1944, _1945, _1946));
        float _3782 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1959 = _1936 * _1936;
        float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
        float _1972 = (exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1973 = 1.0 - _1936;
        float _1983 = (0.5 / (((_1612 * ((_1950 * _1973) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1612 * _1973) + _1936) * _1950))) * _1950;
        float _3793 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1985 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
        float _1986 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1906 = (((_1972 * cbLight._m0[_1921].x) * _1985) * _1986) + _1796;
        _1908 = (((_1972 * cbLight._m0[_1921].y) * _1985) * _1986) + _1798;
        _1910 = (((_1972 * cbLight._m0[_1921].z) * _1985) * _1986) + _1800;
    }
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    float _2129;
    float _2131;
    if (_1444.y == 0u)
    {
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2061;
        float _2063 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2061;
        float _2064 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2061;
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.x;
        uint _2088 = uint((float(_2076.y) * floor(float(uint(cbSceneParam._m0[85u].y * _338) / _2077))) + floor(float(uint(cbSceneParam._m0[85u].x * _337) / _2077)));
        float _2098 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2099 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        uint _2102 = uint(isnan(14.0) ? _2099 : (isnan(_2099) ? 14.0 : min(_2099, 14.0)));
        uvec4 _2107 = texelFetch(g_lightClusterGridBuffer, int(((_2102 << 2u) + (_2088 << 6u)) >> 2u));
        uint _2108 = _2107.x;
        uint _2109 = _2076.z;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        if (((((1u << ((_2109 >> 4u) & 15u)) + 4294967295u) & _2108) == 0u) || ((_2109 & 240u) == 0u))
        {
            _2209 = 0.0;
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
        }
        else
        {
            float _2210;
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2354 = 0.0;
            float _2355 = 0.0;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            float _2359 = 0.0;
            uint _2360 = 0u;
            uint _2369;
            bool _2370;
            for (;;)
            {
                _2369 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2360 << 2u)) >> 2u)).x;
                _2370 = _2369 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2370)
                {
                    frontier_phi_61_pred = _2354;
                    frontier_phi_61_pred_1 = _2359;
                    frontier_phi_61_pred_2 = _2358;
                    frontier_phi_61_pred_3 = _2357;
                    frontier_phi_61_pred_4 = _2356;
                    frontier_phi_61_pred_5 = _2355;
                }
                else
                {
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    uint _2484;
                    _2478 = _2354;
                    _2479 = _2355;
                    _2480 = _2356;
                    _2481 = _2357;
                    _2482 = _2358;
                    _2483 = _2359;
                    _2484 = _2369;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    float _2415;
                    for (;;)
                    {
                        uint _2488 = uint(findLSB(_2484)) + (_2360 << 5u);
                        uint _2485 = (_2484 + 4294967295u) & _2484;
                        uint _2490 = _2488 * 48u;
                        vec4 _2504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2490)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 3u)).x));
                        uint _2510 = (_2488 * 48u) + 4u;
                        vec4 _2523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2510)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 3u)).x));
                        uint _2529 = (_2488 * 48u) + 8u;
                        vec3 _2540 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2529)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 2u)).x));
                        float _2544 = _2504.x - _2062;
                        float _2545 = _2504.y - _2063;
                        float _2546 = _2504.z - _2064;
                        float _2547 = dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546));
                        float _2550 = inversesqrt(_2547);
                        float _2551 = _2550 * _2544;
                        float _2552 = _2550 * _2545;
                        float _2553 = _2550 * _2546;
                        float _2554 = dot(vec3(_359, _362, _365), vec3(_2551, _2552, _2553));
                        float _2559 = 1.0 - (_2547 * _2504.w);
                        float _3819 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2560 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2561 = sqrt(_2547) * _2523.w;
                        float _2564 = 1.39999997615814208984375 / (_2561 + 1.39999997615814208984375);
                        float _2565 = _2564 * _2564;
                        float _2568 = ((1.0 - _2565) * _2554) + _2565;
                        float _2571 = _2561 * _2561;
                        float _2575 = ((isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))) * _2560) / ((_2571 * 0.699999988079071044921875) + 1.0);
                        float _2579 = (-0.0) - _2062;
                        float _2580 = (-0.0) - _2063;
                        float _2581 = (-0.0) - _2064;
                        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
                        float _2586 = _2585 * _2579;
                        float _2587 = _2585 * _2580;
                        float _2588 = _2585 * _2581;
                        float _2596 = exp2(log2(1.0 / ((_2571 * 3.5) + 5.0)) * 0.25);
                        float _2597 = 1.0 - _420;
                        float _2604 = sqrt(1.0 - ((1.0 - (_2597 * _2597)) * (1.0 - (_2596 * _2596))));
                        float _2605 = _2604 * _2604;
                        float _2606 = _2605 * _2605;
                        float _2607 = _2586 + _2551;
                        float _2608 = _2587 + _2552;
                        float _2609 = _2588 + _2553;
                        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
                        float _2617 = dot(vec3(_359, _362, _365), vec3(_2586, _2587, _2588));
                        float _3835 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2620 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
                        float _2621 = dot(vec3(_359, _362, _365), vec3(_2613 * _2607, _2613 * _2608, _2613 * _2609));
                        float _3846 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2624 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
                        float _2628 = ((_2624 * _2624) * (_2606 + (-1.0))) + 1.0;
                        float _2629 = _2564 * _2605;
                        float _2630 = _2629 * _2629;
                        float _2633 = ((1.0 - _2630) * _2554) + _2630;
                        float _3857 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2634 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                        float _2635 = 1.0 - _2605;
                        float _2645 = (0.5 / (((_2634 * ((_2620 * _2635) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _2635) + _2605) * _2620))) * _2634;
                        float _3868 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2656 = (((_2606 * 3.1415927410125732421875) * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) / ((_2628 * _2628) * ((_2571 * 2.1991131305694580078125) + 3.141590118408203125))) * _2560;
                        _2413 = (_2575 * _2523.x) + _2481;
                        _2414 = (_2575 * _2523.y) + _2482;
                        _2415 = (_2575 * _2523.z) + _2483;
                        _2410 = (_2656 * _2540.x) + _2478;
                        _2411 = (_2656 * _2540.y) + _2479;
                        _2412 = (_2656 * _2540.z) + _2480;
                        if (_2485 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2478 = _2410;
                            _2479 = _2411;
                            _2480 = _2412;
                            _2481 = _2413;
                            _2482 = _2414;
                            _2483 = _2415;
                            _2484 = _2485;
                        }
                    }
                    frontier_phi_61_pred = _2410;
                    frontier_phi_61_pred_1 = _2415;
                    frontier_phi_61_pred_2 = _2414;
                    frontier_phi_61_pred_3 = _2413;
                    frontier_phi_61_pred_4 = _2412;
                    frontier_phi_61_pred_5 = _2411;
                }
                _2210 = frontier_phi_61_pred;
                _2220 = frontier_phi_61_pred_1;
                _2218 = frontier_phi_61_pred_2;
                _2216 = frontier_phi_61_pred_3;
                _2214 = frontier_phi_61_pred_4;
                _2212 = frontier_phi_61_pred_5;
                uint _2361 = _2360 + 1u;
                if (_2361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2354 = _2210;
                    _2355 = _2212;
                    _2356 = _2214;
                    _2357 = _2216;
                    _2358 = _2218;
                    _2359 = _2220;
                    _2360 = _2361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2209 = _2210;
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
        }
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.z;
        uint _2226 = (_2224 >> 8u) & 15u;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        if (((4294967295u << _2226) & _2108) == 0u)
        {
            _2322 = _2209;
            _2324 = _2211;
            _2326 = _2213;
            _2328 = _2215;
            _2330 = _2217;
            _2332 = _2219;
        }
        else
        {
            float _2347 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _2348 = _2347 * _2062;
            float _2349 = _2347 * _2063;
            float _2350 = _2347 * _2064;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2226 < ((_2224 >> 12u) & 15u))
            {
                float _2323;
                float _2325;
                float _2327;
                float _2329;
                float _2331;
                float _2333;
                float _2461 = _2209;
                float _2462 = _2211;
                float _2463 = _2213;
                float _2464 = _2215;
                float _2465 = _2217;
                float _2466 = _2219;
                uint _2467 = _2226;
                uint _2476;
                bool _2477;
                for (;;)
                {
                    _2476 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2467 << 2u)) >> 2u)).x;
                    _2477 = _2476 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2477)
                    {
                        frontier_phi_67_pred = _2464;
                        frontier_phi_67_pred_1 = _2465;
                        frontier_phi_67_pred_2 = _2466;
                        frontier_phi_67_pred_3 = _2463;
                        frontier_phi_67_pred_4 = _2462;
                        frontier_phi_67_pred_5 = _2461;
                    }
                    else
                    {
                        float _2661;
                        float _2662;
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2674 = _2461;
                        float _2675 = _2462;
                        float _2676 = _2463;
                        float _2677 = _2464;
                        float _2678 = _2465;
                        float _2679 = _2466;
                        uint _2680 = _2476;
                        uint _2681;
                        vec4 _2706;
                        float _2707;
                        vec4 _2722;
                        vec3 _2734;
                        vec4 _2750;
                        vec4 _2766;
                        float _2813;
                        bool _2814;
                        for (;;)
                        {
                            uint _2691 = ((_2467 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2680));
                            _2681 = (_2680 + 4294967295u) & _2680;
                            uint _2693 = _2691 * 40u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            _2707 = _2706.w;
                            uint _2709 = (_2691 * 40u) + 4u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2691 * 40u) + 8u;
                            _2734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x));
                            uint _2737 = (_2691 * 40u) + 16u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2753 = (_2691 * 40u) + 20u;
                            _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            uint _2769 = (_2691 * 40u) + 24u;
                            vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            uint _2788 = (_2691 * 40u) + 28u;
                            vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            _2813 = fma(_2064, _2801.z, fma(_2063, _2801.y, _2801.x * _2062)) + _2801.w;
                            _2814 = !((fma(_2064, _2782.z, fma(_2063, _2782.y, _2782.x * _2062)) + _2782.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2814)
                            {
                                float _2841 = _2706.x - _2062;
                                float _2842 = _2706.y - _2063;
                                float _2843 = _2706.z - _2064;
                                float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                                float _2847 = inversesqrt(_2844);
                                float _2848 = _2847 * _2841;
                                float _2849 = _2847 * _2842;
                                float _2850 = _2847 * _2843;
                                float _2854 = 1.0 - (_2844 / (_2707 * _2707));
                                float _3879 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                                float _2855 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                                float _2859 = sqrt(_2844) * _2722.w;
                                float _2861 = 1.39999997615814208984375 / (_2859 + 1.39999997615814208984375);
                                float _2862 = _2861 * _2861;
                                float _2865 = ((1.0 - _2862) * dot(vec3(_2848, _2849, _2850), vec3(_359, _362, _365))) + _2862;
                                float _2868 = _2859 * _2859;
                                float _2872 = (fma(_2064, _2750.z, fma(_2063, _2750.y, _2750.x * _2062)) + _2750.w) / _2813;
                                float _2873 = (fma(_2064, _2766.z, fma(_2063, _2766.y, _2766.x * _2062)) + _2766.w) / _2813;
                                float _2877 = 1.0 - dot(vec2(_2872, _2873), vec2(_2872, _2873));
                                float _3895 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                                float _2878 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2879 = _2878 * (((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2855) / ((_2868 * 0.699999988079071044921875) + 1.0));
                                float _2891 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                                float _2892 = 1.0 - _420;
                                float _2899 = sqrt(1.0 - ((1.0 - (_2892 * _2892)) * (1.0 - (_2891 * _2891))));
                                float _2900 = _2899 * _2899;
                                float _2901 = _2900 * _2900;
                                float _2902 = _2848 - _2348;
                                float _2903 = _2849 - _2349;
                                float _2904 = _2850 - _2350;
                                float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                                float _2912 = dot(vec3(_359, _362, _365), vec3((-0.0) - _2348, (-0.0) - _2349, (-0.0) - _2350));
                                float _3906 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2915 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                                float _2916 = dot(vec3(_359, _362, _365), vec3(_2908 * _2902, _2908 * _2903, _2908 * _2904));
                                float _3917 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                                float _2919 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                                float _2923 = ((_2919 * _2919) * (_2901 + (-1.0))) + 1.0;
                                float _2924 = _2861 * _2900;
                                float _2925 = _2924 * _2924;
                                float _2931 = ((1.0 - _2925) * dot(vec3(_359, _362, _365), vec3(_2848, _2849, _2850))) + _2925;
                                float _3928 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2932 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _2933 = 1.0 - _2900;
                                float _2943 = (0.5 / (((_2932 * ((_2915 * _2933) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _2933) + _2900) * _2915))) * _2932;
                                float _3939 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2953 = (_2878 * _2855) * (((_2901 * 3.1415927410125732421875) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) / ((_2923 * _2923) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2953 * _2734.x;
                                frontier_phi_73_pred_1 = _2953 * _2734.y;
                                frontier_phi_73_pred_2 = _2879 * _2722.z;
                                frontier_phi_73_pred_3 = _2879 * _2722.y;
                                frontier_phi_73_pred_4 = _2879 * _2722.x;
                                frontier_phi_73_pred_5 = _2953 * _2734.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2957 = frontier_phi_73_pred;
                            _2958 = frontier_phi_73_pred_1;
                            _2962 = frontier_phi_73_pred_2;
                            _2961 = frontier_phi_73_pred_3;
                            _2960 = frontier_phi_73_pred_4;
                            _2959 = frontier_phi_73_pred_5;
                            _2664 = _2960 + _2677;
                            _2665 = _2961 + _2678;
                            _2666 = _2962 + _2679;
                            _2661 = _2957 + _2674;
                            _2662 = _2958 + _2675;
                            _2663 = _2959 + _2676;
                            if (_2681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2681;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2664;
                        frontier_phi_67_pred_1 = _2665;
                        frontier_phi_67_pred_2 = _2666;
                        frontier_phi_67_pred_3 = _2663;
                        frontier_phi_67_pred_4 = _2662;
                        frontier_phi_67_pred_5 = _2661;
                    }
                    _2329 = frontier_phi_67_pred;
                    _2331 = frontier_phi_67_pred_1;
                    _2333 = frontier_phi_67_pred_2;
                    _2327 = frontier_phi_67_pred_3;
                    _2325 = frontier_phi_67_pred_4;
                    _2323 = frontier_phi_67_pred_5;
                    uint _2468 = _2467 + 1u;
                    if (_2468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2461 = _2323;
                        _2462 = _2325;
                        _2463 = _2327;
                        _2464 = _2329;
                        _2465 = _2331;
                        _2466 = _2333;
                        _2467 = _2468;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2331;
                frontier_phi_55_56_ladder_1 = _2333;
                frontier_phi_55_56_ladder_2 = _2329;
                frontier_phi_55_56_ladder_3 = _2327;
                frontier_phi_55_56_ladder_4 = _2325;
                frontier_phi_55_56_ladder_5 = _2323;
            }
            else
            {
                frontier_phi_55_56_ladder = _2217;
                frontier_phi_55_56_ladder_1 = _2219;
                frontier_phi_55_56_ladder_2 = _2215;
                frontier_phi_55_56_ladder_3 = _2213;
                frontier_phi_55_56_ladder_4 = _2211;
                frontier_phi_55_56_ladder_5 = _2209;
            }
            _2322 = frontier_phi_55_56_ladder_5;
            _2324 = frontier_phi_55_56_ladder_4;
            _2326 = frontier_phi_55_56_ladder_3;
            _2328 = frontier_phi_55_56_ladder_2;
            _2330 = frontier_phi_55_56_ladder;
            _2332 = frontier_phi_55_56_ladder_1;
        }
        float _2337 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
        _2121 = (_2337 * _2328) + _1576;
        _2123 = (_2337 * _2330) + _1578;
        _2125 = (_2337 * _2332) + _1580;
        _2127 = ((_2322 * 0.039999999105930328369140625) * _2337) + _1906;
        _2129 = ((_2324 * 0.039999999105930328369140625) * _2337) + _1908;
        _2131 = ((_2326 * 0.039999999105930328369140625) * _2337) + _1910;
    }
    else
    {
        _2121 = _1576;
        _2123 = _1578;
        _2125 = _1580;
        _2127 = _1906;
        _2129 = _1908;
        _2131 = _1910;
    }
    float _3955 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3966 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3977 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    uint _2151 = _378 + 6u;
    float _2159 = _337 / cbSceneParam._m0[86u].x;
    float _2160 = _338 / cbSceneParam._m0[86u].y;
    vec4 _2174 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2159, _2160, (log2((isnan(cbSceneParam._m0[77u].w) ? _270 : (isnan(_270) ? cbSceneParam._m0[77u].w : min(_270, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2176 = _2174.x;
    float _2177 = _2174.y;
    float _2178 = _2174.z;
    float _2179 = _2174.w;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_270 > cbSceneParam._m0[78u].w)
    {
        float _2234 = isnan(_270) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _270 : min(cbSceneParam._m0[80u].w, _270));
        float _2235 = _2234 / _270;
        float _2246 = _2235 * _322;
        float _2247 = _323 * _2235;
        float _2248 = (-0.0) - _2247;
        float _2250 = _2235 * _324;
        float _2252 = (cbSceneParam._m0[77u].w * _2248) / _2234;
        float _2253 = _2252 + cbSceneParam._m0[79u].w;
        float _2254 = cbSceneParam._m0[79u].w - _2247;
        float _2260 = sqrt(((_2246 * _2246) + (_2247 * _2247)) + (_2250 * _2250));
        float _2263 = (1.0 - (cbSceneParam._m0[77u].w / _2234)) * _2260;
        float _2268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2423;
        if (abs((_2248 - _2252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2423 = ((((_2253 > 0.0) ? exp2(_2268 * _2253) : (2.0 - exp2(_2270 * _2253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2263;
        }
        else
        {
            float _2383 = 1.0 / cbSceneParam._m0[80u].x;
            float _2384 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : max(_2253, _2254));
            float _2385 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : min(_2253, _2254));
            float _2394 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : min(_2384, 0.0));
            float _2395 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : min(_2385, 0.0));
            _2423 = ((abs(_2260 / _2248) * cbSceneParam._m0[80u].y) * ((((_2394 - _2395) * 2.0) - ((exp2(_2268 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)))) - exp2(_2268 * (isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0))))) * _2383)) - ((exp2(_2270 * _2394) - exp2(_2270 * _2395)) * _2383))) + (_2263 * cbSceneParam._m0[80u].z);
        }
        vec4 _2425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2159, _2160, 1.0), 0.0);
        float _2434 = exp2((_2423 * (-1.44269502162933349609375)) * (1.0 - _2425.w));
        float _2435 = log2(_2434);
        float _2451 = log2(_2179);
        _2272 = (exp2(_2451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].x)) * _2425.x) / cbSceneParam._m0[78u].x)) + _2176;
        _2274 = (exp2(_2451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].y)) * _2425.y) / cbSceneParam._m0[78u].y)) + _2177;
        _2276 = (exp2(_2451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].z)) * _2425.z) / cbSceneParam._m0[78u].z)) + _2178;
        _2278 = _2434 * _2179;
    }
    else
    {
        _2272 = _2176;
        _2274 = _2177;
        _2276 = _2178;
        _2278 = _2179;
    }
    float _2290 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2291 = _2290 == 3.0;
    float _2292 = log2(_2278);
    float _2299 = exp2(_2292 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2121 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _404))) + ((_2127 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1211)) * cbPerFrame._m0[3u].x));
    float _2300 = exp2(_2292 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2123 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _404))) + ((_2129 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1211)) * cbPerFrame._m0[3u].x));
    float _2301 = exp2(_2292 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2125 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _404))) + ((_2131 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1211)) * cbPerFrame._m0[3u].x));
    float _2310 = (_2290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2310 * (_2291 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.y = _2310 * (_2291 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.z = _2310 * (_2291 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.w = cbInstanceData._m0[_2151].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2151].w;
}


