#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Spacedebris_01_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _780;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_Spacedebris_01_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = (_221.x * 2.0) + (-1.0);
    float _231 = (_221.y * 2.0) + (-1.0);
    float _232 = dot(vec2(_229, _231), vec2(_229, _231));
    float _3378 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _238 = sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))));
    float _241 = fma(_238, _187 * NORMAL.x, fma(_231, _194 * TANGENT.x, (_180 * _172) * _229));
    float _244 = fma(_238, _187 * NORMAL.y, fma(_231, _194 * TANGENT.y, (_180 * _173) * _229));
    float _247 = fma(_238, _187 * NORMAL.z, fma(_231, _194 * TANGENT.z, (_180 * _174) * _229));
    float _251 = inversesqrt(dot(vec3(_241, _244, _247), vec3(_241, _244, _247)));
    float _252 = _251 * _241;
    float _253 = _251 * _244;
    float _254 = _251 * _247;
    float _3389 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _255 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3411 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3422 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _274 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _316 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _326 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _316);
    float _327 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _316);
    float _328 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _316);
    float _332 = inversesqrt(dot(vec3(_326, _327, _328), vec3(_326, _327, _328)));
    float _333 = _326 * _332;
    float _334 = _327 * _332;
    float _335 = _328 * _332;
    float _341 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _342 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _363 = fma(_254, cbSceneParam._m0[5u].z, fma(_253, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _252));
    float _366 = fma(_254, cbSceneParam._m0[6u].z, fma(_253, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _252));
    float _369 = fma(_254, cbSceneParam._m0[7u].z, fma(_253, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _252));
    uint _382 = uint(roundEven(NORMAL.w)) * 13u;
    uint _385 = (_382 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_385].x;
    float _392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_385].y;
    float _393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_385].z;
    float _3433 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    vec4 _405 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _341, cbSceneParam._m0[86u].y * _342));
    float _408 = _405.x * TEXCOORD.z;
    float _409 = dot(vec3(_252, _253, _254), vec3(_333, _334, _335));
    float _412 = _409 * 2.0;
    float _416 = (_412 * _252) - _333;
    float _417 = (_412 * _253) - _334;
    float _418 = (_412 * _254) - _335;
    float _422 = abs(dot(vec3(_333, _334, _335), vec3(_252, _253, _254)));
    float _3466 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _424 = sqrt(_255);
    float _437 = exp2((_424 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_424 * 3.0));
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _779;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _504 = fma(_477, cbModelParam._m0[26u].z, fma(_473, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _469));
        float _508 = fma(_477, cbModelParam._m0[27u].z, fma(_473, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _469));
        float _512 = fma(_477, cbModelParam._m0[28u].z, fma(_473, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _469));
        float _537 = _469 + _252;
        float _538 = _473 + _253;
        float _539 = _477 + _254;
        float _549 = fma(_539, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537)) - _504;
        float _550 = fma(_539, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537)) - _508;
        float _551 = fma(_539, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537)) - _512;
        float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
        float _568 = ((_555 * _549) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_504 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_555 * _550) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_508 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_555 * _551) / cbModelParam._m0[34u].z) + ((((((_512 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        float _607 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_573.x + (-0.5));
        float _609 = _607 * (_573.y + (-0.5));
        float _610 = _607 * (_573.z + (-0.5));
        float _617 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _618 = _617 * (_580.x + (-0.5));
        float _619 = _617 * (_580.y + (-0.5));
        float _620 = _617 * (_580.z + (-0.5));
        float _627 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_587.x + (-0.5));
        float _629 = _627 * (_587.y + (-0.5));
        float _630 = _627 * (_587.z + (-0.5));
        float _637 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_594.x + (-0.5));
        float _639 = _637 * (_594.y + (-0.5));
        float _640 = _637 * (_594.z + (-0.5));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = _608 * 0.5;
        float _645 = _618 * 0.5;
        float _646 = _628 * 0.5;
        float _647 = dot(vec3(_644, _645, _646), vec3(_644, _645, _646));
        float _652 = (_647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_647);
        float _661 = (dot(vec3(_252, _253, _254), vec3(_652 * _644, _652 * _645, _652 * _646)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _671 = sqrt(((_645 * _645) + (_644 * _644)) + (_646 * _646)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3514 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_673 + 1.0))) + _678) * _641;
        float _688 = _609 * 0.5;
        float _689 = _619 * 0.5;
        float _690 = _629 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_252, _253, _254), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3547 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_715 + 1.0))) + _720) * _642;
        float _730 = _610 * 0.5;
        float _731 = _620 * 0.5;
        float _732 = _630 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_252, _253, _254), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3580 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_757 + 1.0))) + _762) * _643;
        _779 = _610;
        _781 = _609;
        _782 = _608;
        _783 = _620;
        _784 = _619;
        _785 = _618;
        _786 = _630;
        _787 = _629;
        _788 = _628;
        _789 = _643;
        _790 = _642;
        _791 = _641;
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
    }
    else
    {
        _779 = _780;
        _781 = _780;
        _782 = _780;
        _783 = _780;
        _784 = _780;
        _785 = _780;
        _786 = _780;
        _787 = _780;
        _788 = _780;
        _789 = _780;
        _790 = _780;
        _791 = _780;
        _792 = 0.0;
        _793 = 0.0;
        _794 = 0.0;
    }
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = fma(_477, cbModelParam._m0[30u].z, fma(_473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _469));
        float _824 = fma(_477, cbModelParam._m0[31u].z, fma(_473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _469));
        float _828 = fma(_477, cbModelParam._m0[32u].z, fma(_473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _469));
        float _851 = _469 + _252;
        float _852 = _473 + _253;
        float _853 = _477 + _254;
        float _863 = fma(_853, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851)) - _820;
        float _864 = fma(_853, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851)) - _824;
        float _865 = fma(_853, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851)) - _828;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_820 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_824 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[35u].z) + ((((((_828 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _919 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_886.x + (-0.5));
        float _921 = _919 * (_886.y + (-0.5));
        float _922 = _919 * (_886.z + (-0.5));
        float _929 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_893.x + (-0.5));
        float _931 = _929 * (_893.y + (-0.5));
        float _932 = _929 * (_893.z + (-0.5));
        float _939 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_900.x + (-0.5));
        float _941 = _939 * (_900.y + (-0.5));
        float _942 = _939 * (_900.z + (-0.5));
        float _949 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_907.x + (-0.5));
        float _951 = _949 * (_907.y + (-0.5));
        float _952 = _949 * (_907.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_252, _253, _254), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3643 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_983 + 1.0))) + _988) * _953;
        float _998 = _921 * 0.5;
        float _999 = _931 * 0.5;
        float _1000 = _941 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_252, _253, _254), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3676 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1025 + 1.0))) + _1030) * _954;
        float _1040 = _922 * 0.5;
        float _1041 = _932 * 0.5;
        float _1042 = _942 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_252, _253, _254), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3709 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1067 + 1.0))) + _1072) * _955;
        _1089 = _922;
        _1090 = _921;
        _1091 = _920;
        _1092 = _932;
        _1093 = _931;
        _1094 = _930;
        _1095 = _942;
        _1096 = _941;
        _1097 = _940;
        _1098 = _955;
        _1099 = _954;
        _1100 = _953;
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _780;
        _1090 = _780;
        _1091 = _780;
        _1092 = _780;
        _1093 = _780;
        _1094 = _780;
        _1095 = _780;
        _1096 = _780;
        _1097 = _780;
        _1098 = _780;
        _1099 = _780;
        _1100 = _780;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _792)) + _792;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _793)) + _793;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _794)) + _794;
    float _1136 = fma(_1115, cbSceneParam._m0[89u].z, fma(_1114, cbSceneParam._m0[89u].y, _1113 * cbSceneParam._m0[89u].x));
    float _1139 = fma(_1115, cbSceneParam._m0[90u].z, fma(_1114, cbSceneParam._m0[90u].y, _1113 * cbSceneParam._m0[90u].x));
    float _1142 = fma(_1115, cbSceneParam._m0[91u].z, fma(_1114, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1113));
    float _1157 = _416 * 0.5;
    float _1158 = _417 * 0.5;
    float _1159 = _418 * 0.5;
    float _1160 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1163 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1166 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1200;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1173 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_779, _783, _786, _789));
        float _1177 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_781, _784, _787, _790));
        float _1181 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_782, _785, _788, _791));
        float _1188 = dot(vec4(cbModelParam._m0[39u]), vec4(_1157, _1158, _1159, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1188) ? 0.0 : (isnan(0.0) ? _1188 : max(0.0, _1188))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1211;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1202 = dot(vec4(cbModelParam._m0[40u]), vec4(_1157, _1158, _1159, 1.0));
        _1211 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1211 = 1.0;
    }
    float _1215 = (_1211 * cbModelParam._m0[1u].x) + (_1200 * (1.0 - cbModelParam._m0[1u].x));
    float _1225 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _255);
    float _1226 = isnan(_1225) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1225 : min(cbModelParam._m0[25u].z, _1225));
    float _1308;
    float _1310;
    float _1312;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1275 = fma(_477, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469)) + cbModelParam._m0[13u].w;
        float _1279 = fma(_477, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469)) + cbModelParam._m0[14u].w;
        float _1283 = fma(_477, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469)) + cbModelParam._m0[15u].w;
        float _1286 = fma(_418, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _416));
        float _1289 = fma(_418, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _416));
        float _1292 = fma(_418, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _416));
        float _1320;
        if (_1286 > 0.0)
        {
            _1320 = abs((1.0 - _1275) / _1286);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1275 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1320 = frontier_phi_14_12_ladder;
        }
        float _1493;
        if (_1289 > 0.0)
        {
            _1493 = abs((1.0 - _1279) / _1289);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1279 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1493 = frontier_phi_23_19_ladder;
        }
        float _1789;
        if (_1292 > 0.0)
        {
            _1789 = abs((1.0 - _1283) / _1292);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1283 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1789 = frontier_phi_35_30_ladder;
        }
        float _1791 = isnan(_1493) ? _1320 : (isnan(_1320) ? _1493 : min(_1320, _1493));
        float _1792 = isnan(_1789) ? _1791 : (isnan(_1791) ? _1789 : min(_1791, _1789));
        float _1796 = (_1792 * _1286) + _1275;
        float _1797 = (_1792 * _1289) + _1279;
        float _1798 = (_1792 * _1292) + _1283;
        float _1799 = _1792 * 9.9999997473787516355514526367188e-05;
        float _1801 = (-1.0) - _1799;
        float _1803 = _1799 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1798 > _1803) || ((_1798 < _1801) || ((_1797 > _1803) || ((_1797 < _1801) || ((_1796 < _1801) || (_1796 > _1803))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1798, cbModelParam._m0[9u].z, fma(_1797, cbModelParam._m0[9u].y, _1796 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1798, cbModelParam._m0[10u].z, fma(_1797, cbModelParam._m0[10u].y, _1796 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1798, cbModelParam._m0[11u].z, fma(_1797, cbModelParam._m0[11u].y, _1796 * cbModelParam._m0[11u].x))), _1226);
            frontier_phi_13_35_ladder = _1943.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1943.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1943.x * cbModelParam._m0[1u].y;
        }
        _1308 = frontier_phi_13_35_ladder_2;
        _1310 = frontier_phi_13_35_ladder_1;
        _1312 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_416, _417, _418), _1226);
        _1308 = _1296.x * cbModelParam._m0[1u].y;
        _1310 = _1296.y * cbModelParam._m0[1u].y;
        _1312 = _1296.z * cbModelParam._m0[1u].y;
    }
    float _1316 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _255);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1316 : min(cbModelParam._m0[25u].w, _1316));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_477, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_477, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_477, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_418, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _416));
        float _1388 = fma(_418, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _416));
        float _1391 = fma(_418, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _416));
        float _1498;
        if (_1385 > 0.0)
        {
            _1498 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1498 = frontier_phi_25_21_ladder;
        }
        float _1816;
        if (_1388 > 0.0)
        {
            _1816 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1816 = frontier_phi_37_32_ladder;
        }
        float _2143;
        if (_1391 > 0.0)
        {
            _2143 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2143 = frontier_phi_47_44_ladder;
        }
        float _2145 = isnan(_1816) ? _1498 : (isnan(_1498) ? _1816 : min(_1498, _1816));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1385) + _1374;
        float _2151 = (_2146 * _1388) + _1378;
        float _2152 = (_2146 * _1391) + _1382;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2153;
        float _2156 = _2153 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2152 > _2156) || ((_2152 < _2154) || ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 < _2154) || (_2150 > _2156))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2270 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2152, cbModelParam._m0[17u].z, fma(_2151, cbModelParam._m0[17u].y, _2150 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2152, cbModelParam._m0[18u].z, fma(_2151, cbModelParam._m0[18u].y, _2150 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2152, cbModelParam._m0[19u].z, fma(_2151, cbModelParam._m0[19u].y, _2150 * cbModelParam._m0[19u].x))), _1317);
            frontier_phi_22_47_ladder = _2270.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2270.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2270.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_22_47_ladder_2;
        _1412 = frontier_phi_22_47_ladder_1;
        _1414 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_416, _417, _418), _1317);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = ((((1.0 - _437) * ((_424 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_437 * _424)) * _408;
    float _1427 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1308)) + _1308);
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1310)) + _1310);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1312)) + _1312);
    float _1432 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, _1427 * cbSceneParam._m0[91u].x));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1485 = _1472 / _1484;
    float _1486 = _1476 / _1484;
    float _1487 = _1480 / _1484;
    float _1634;
    float _1635;
    float _1636;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1514 = ((uint(_1487 > cbSceneParam._m0[59u].y) + uint(_1487 > cbSceneParam._m0[59u].x)) + uint(_1487 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1515 = _1514 + 43u;
        uint _1523 = _1514 + 44u;
        uint _1531 = _1514 + 45u;
        uint _1539 = _1514 + 46u;
        float _1550 = fma(_1484, cbSceneParam._m0[_1515].w, fma(_1480, cbSceneParam._m0[_1515].z, fma(_1476, cbSceneParam._m0[_1515].y, _1472 * cbSceneParam._m0[_1515].x)));
        float _1554 = fma(_1484, cbSceneParam._m0[_1523].w, fma(_1480, cbSceneParam._m0[_1523].z, fma(_1476, cbSceneParam._m0[_1523].y, _1472 * cbSceneParam._m0[_1523].x)));
        float _1562 = fma(_1484, cbSceneParam._m0[_1539].w, fma(_1480, cbSceneParam._m0[_1539].z, fma(_1476, cbSceneParam._m0[_1539].y, _1472 * cbSceneParam._m0[_1539].x)));
        float _1567 = cbSceneParam._m0[33u].z * _1562;
        float _1569 = cbSceneParam._m0[33u].w * _1562;
        float _1572 = fma(_1484, cbSceneParam._m0[_1531].w, fma(_1480, cbSceneParam._m0[_1531].z, fma(_1476, cbSceneParam._m0[_1531].y, _1472 * cbSceneParam._m0[_1531].x))) / _1562;
        float _1620 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
        float _3835 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1627 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 + _1550) / _1562, (_1569 + _1554) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 + _1550) / _1562, (_1554 - _1567) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1567) / _1562, (_1554 - _1569) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1569) / _1562, (_1567 + _1554) / _1562), _1572), 0.0)).x), vec4(0.25)));
        _1634 = 1.0 - (_1627 * cbSceneParam._m0[34u].x);
        _1635 = 1.0 - (_1627 * cbSceneParam._m0[34u].y);
        _1636 = 1.0 - (_1627 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1634 = 1.0;
        _1635 = 1.0;
        _1636 = 1.0;
    }
    float _1700;
    float _1702;
    float _1704;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1688 = fma(_1484, cbSceneParam._m0[63u].w, fma(_1480, cbSceneParam._m0[63u].z, fma(_1476, cbSceneParam._m0[63u].y, _1472 * cbSceneParam._m0[63u].x)));
        float _1689 = fma(_1484, cbSceneParam._m0[60u].w, fma(_1480, cbSceneParam._m0[60u].z, fma(_1476, cbSceneParam._m0[60u].y, _1472 * cbSceneParam._m0[60u].x))) / _1688;
        float _1690 = fma(_1484, cbSceneParam._m0[61u].w, fma(_1480, cbSceneParam._m0[61u].z, fma(_1476, cbSceneParam._m0[61u].y, _1472 * cbSceneParam._m0[61u].x))) / _1688;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1689 >= cbSceneParam._m0[64u].x) && (_1690 >= cbSceneParam._m0[64u].y)) && (_1689 <= cbSceneParam._m0[64u].z)) && (_1690 <= cbSceneParam._m0[64u].w))
        {
            float _1829 = fma(_1484, cbSceneParam._m0[62u].w, fma(_1480, cbSceneParam._m0[62u].z, fma(_1476, cbSceneParam._m0[62u].y, _1472 * cbSceneParam._m0[62u].x))) / _1688;
            float _1833 = isnan(cbSceneParam._m0[41u].w) ? _1829 : (isnan(_1829) ? cbSceneParam._m0[41u].w : max(_1829, cbSceneParam._m0[41u].w));
            float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
            float _3851 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
            float _1883 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1689, cbSceneParam._m0[33u].w + _1690), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1689, _1690 - cbSceneParam._m0[33u].z), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].z, _1690 - cbSceneParam._m0[33u].w), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1690), _1833), 0.0)).x), vec4(0.25)));
            float _1887 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
            float _1888 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
            float _1889 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1889) ? _1636 : (isnan(_1636) ? _1889 : min(_1636, _1889));
            frontier_phi_34_33_ladder_1 = isnan(_1888) ? _1635 : (isnan(_1635) ? _1888 : min(_1635, _1888));
            frontier_phi_34_33_ladder_2 = isnan(_1887) ? _1634 : (isnan(_1634) ? _1887 : min(_1634, _1887));
        }
        else
        {
            frontier_phi_34_33_ladder = _1636;
            frontier_phi_34_33_ladder_1 = _1635;
            frontier_phi_34_33_ladder_2 = _1634;
        }
        _1700 = frontier_phi_34_33_ladder_2;
        _1702 = frontier_phi_34_33_ladder_1;
        _1704 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1700 = _1634;
        _1702 = _1635;
        _1704 = _1636;
    }
    uvec4 _1709 = floatBitsToUint(cbInstanceData._m0[_382 + 5u]);
    uint _1711 = _1709.x * 14u;
    uint _1712 = _1711 + 13u;
    float _1719 = _408 + (-1.0);
    float _1724 = (cbLight._m0[_1712].x * _1719) + 1.0;
    float _1725 = (cbLight._m0[_1712].y * _1719) + 1.0;
    float _1726 = (cbLight._m0[_1712].z * _1719) + 1.0;
    float _1727 = (cbLight._m0[_1712].w * _1719) + 1.0;
    uint _1728 = _1711 + 5u;
    float _1734 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1738 = _1711 + 4u;
    float _1748 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1752 = _1711 | 1u;
    float _1763 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_252, _253, _254));
    float _1766 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_252, _253, _254));
    float _3887 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _3898 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1771 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1773 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1780 = ((cbLight._m0[_1728].x * _1734) * _1773) + (((cbLight._m0[_1738].x * _1700) * _1748) * _1771);
    float _1781 = ((_1734 * cbLight._m0[_1728].y) * _1773) + (((cbLight._m0[_1738].y * _1702) * _1748) * _1771);
    float _1782 = ((_1734 * cbLight._m0[_1728].z) * _1773) + (((cbLight._m0[_1738].z * _1704) * _1748) * _1771);
    uvec4 _1786 = floatBitsToUint(cbLight._m0[_1711 + 12u]);
    bool _1788 = _1786.x == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1788)
    {
        _1890 = _1780;
        _1892 = _1781;
        _1894 = _1782;
    }
    else
    {
        uint _1898 = _1711 + 6u;
        float _1914 = (dot(vec3(cbLight._m0[_1711 + 2u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _3909 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1917 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1890 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1780;
        _1892 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1781;
        _1894 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1782;
    }
    bool _1897 = _1786.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1897)
    {
        _1952 = _1890;
        _1954 = _1892;
        _1956 = _1894;
    }
    else
    {
        uint _2114 = _1711 + 7u;
        float _2130 = (dot(vec3(cbLight._m0[_1711 + 3u].xyz), vec3(_252, _253, _254)) * 0.5) + 0.5;
        float _2131 = _2130 * _2130;
        float _3925 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2133 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1952 = (((cbLight._m0[_2114].x * 0.3183098733425140380859375) * _2132) * _2133) + _1890;
        _1954 = (((cbLight._m0[_2114].y * 0.3183098733425140380859375) * _2132) * _2133) + _1892;
        _1956 = (((cbLight._m0[_2114].z * 0.3183098733425140380859375) * _2132) * _2133) + _1894;
    }
    uint _1959 = _1711 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _255) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1711].x + _333;
    float _1975 = cbLight._m0[_1711].y + _334;
    float _1976 = cbLight._m0[_1711].z + _335;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1711].xyz));
    float _3941 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _1988 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1989 = dot(vec3(_252, _253, _254), vec3(_1981, _1982, _1983));
    float _3963 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1981, _1982, _1983));
    float _3974 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = 1.0 - _1973;
    float _2024 = (0.5 / (((_1988 * ((_1987 * _2013) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2013) + _1973) * _1987))) * _1987;
    float _3985 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2040 = _1711 + 9u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _255) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1752].x + _333;
    float _2054 = cbLight._m0[_1752].y + _334;
    float _2055 = cbLight._m0[_1752].z + _335;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_1752].xyz));
    float _3996 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _2067 = dot(vec3(_252, _253, _254), vec3(_2060, _2061, _2062));
    float _4007 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_2060, _2061, _2062));
    float _4018 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2052 * _2052;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2088 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2089 = 1.0 - _2052;
    float _2099 = (0.5 / (((_1988 * ((_2066 * _2089) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2089) + _2052) * _2066))) * _2066;
    float _4029 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    float _2111 = (((_2088 * cbLight._m0[_2040].x) * _2101) * _1734) + ((((cbLight._m0[_1959].x * _1700) * _2012) * _2026) * _1748);
    float _2112 = (((_2088 * cbLight._m0[_2040].y) * _2101) * _1734) + ((((cbLight._m0[_1959].y * _1702) * _2012) * _2026) * _1748);
    float _2113 = (((_2088 * cbLight._m0[_2040].z) * _2101) * _1734) + ((((cbLight._m0[_1959].z * _1704) * _2012) * _2026) * _1748);
    float _2169;
    float _2171;
    float _2173;
    if (_1788)
    {
        _2169 = _2111;
        _2171 = _2112;
        _2173 = _2113;
    }
    else
    {
        uint _2175 = _1711 + 2u;
        uint _2179 = _1711 + 10u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _255) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _333;
        float _2196 = cbLight._m0[_2175].y + _334;
        float _2197 = cbLight._m0[_2175].z + _335;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_2175].xyz));
        float _4040 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2209 = dot(vec3(_252, _253, _254), vec3(_2202, _2203, _2204));
        float _4051 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4062 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2231 = 1.0 - _2194;
        float _2241 = (0.5 / (((_1988 * ((_2208 * _2231) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2231) + _2194) * _2208))) * _2208;
        float _4073 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2243 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2244 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2169 = (((_2230 * cbLight._m0[_2179].x) * _2243) * _2244) + _2111;
        _2171 = (((_2230 * cbLight._m0[_2179].y) * _2243) * _2244) + _2112;
        _2173 = (((_2230 * cbLight._m0[_2179].z) * _2243) * _2244) + _2113;
    }
    float _2275;
    float _2277;
    float _2279;
    if (_1897)
    {
        _2275 = _2169;
        _2277 = _2171;
        _2279 = _2173;
    }
    else
    {
        uint _2286 = _1711 + 3u;
        uint _2290 = _1711 + 11u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _255) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _333;
        float _2307 = cbLight._m0[_2286].y + _334;
        float _2308 = cbLight._m0[_2286].z + _335;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_252, _253, _254), vec3(cbLight._m0[_2286].xyz));
        float _4089 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2320 = dot(vec3(_252, _253, _254), vec3(_2313, _2314, _2315));
        float _4100 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4111 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2342 = 1.0 - _2305;
        float _2352 = (0.5 / (((_1988 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2342) + _2305) * _2319))) * _2319;
        float _4122 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2354 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2355 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2275 = (((_2341 * cbLight._m0[_2290].x) * _2354) * _2355) + _2169;
        _2277 = (((_2341 * cbLight._m0[_2290].y) * _2354) * _2355) + _2171;
        _2279 = (((_2341 * cbLight._m0[_2290].z) * _2354) * _2355) + _2173;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1709.y == 0u)
    {
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _342) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _341) / _2377)));
        float _2398 = (log2(_1487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
        }
        else
        {
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2649)
                {
                    frontier_phi_66_pred = _2638;
                    frontier_phi_66_pred_1 = _2637;
                    frontier_phi_66_pred_2 = _2636;
                    frontier_phi_66_pred_3 = _2635;
                    frontier_phi_66_pred_4 = _2634;
                    frontier_phi_66_pred_5 = _2633;
                }
                else
                {
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    uint _2763;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2648;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    for (;;)
                    {
                        uint _2767 = uint(findLSB(_2763)) + (_2639 << 5u);
                        uint _2764 = (_2763 + 4294967295u) & _2763;
                        uint _2769 = _2767 * 48u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2789 = (_2767 * 48u) + 4u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2808 = (_2767 * 48u) + 8u;
                        vec3 _2819 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x));
                        float _2823 = _2783.x - _1485;
                        float _2824 = _2783.y - _1486;
                        float _2825 = _2783.z - _1487;
                        float _2826 = dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825));
                        float _2829 = inversesqrt(_2826);
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2833 = dot(vec3(_363, _366, _369), vec3(_2830, _2831, _2832));
                        float _2838 = 1.0 - (_2826 * _2783.w);
                        float _4148 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2840 = sqrt(_2826) * _2802.w;
                        float _2843 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2833) + _2844;
                        float _2850 = _2840 * _2840;
                        float _2854 = ((isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))) * _2839) / ((_2850 * 0.699999988079071044921875) + 1.0);
                        float _2858 = (-0.0) - _1485;
                        float _2859 = (-0.0) - _1486;
                        float _2860 = (-0.0) - _1487;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2874 = exp2(log2(1.0 / ((_2850 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _424;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2865 + _2830;
                        float _2886 = _2866 + _2831;
                        float _2887 = _2867 + _2832;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_363, _366, _369), vec3(_2865, _2866, _2867));
                        float _4164 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2899 = dot(vec3(_363, _366, _369), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4175 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2843 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2833) + _2908;
                        float _4186 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4197 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2906 * _2906) * ((_2850 * 2.1991131305694580078125) + 3.141590118408203125))) * _2839;
                        _2692 = (_2854 * _2802.x) + _2760;
                        _2693 = (_2854 * _2802.y) + _2761;
                        _2694 = (_2854 * _2802.z) + _2762;
                        _2689 = (_2934 * _2819.x) + _2757;
                        _2690 = (_2934 * _2819.y) + _2758;
                        _2691 = (_2934 * _2819.z) + _2759;
                        if (_2764 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2764;
                        }
                    }
                    frontier_phi_66_pred = _2694;
                    frontier_phi_66_pred_1 = _2693;
                    frontier_phi_66_pred_2 = _2692;
                    frontier_phi_66_pred_3 = _2691;
                    frontier_phi_66_pred_4 = _2690;
                    frontier_phi_66_pred_5 = _2689;
                }
                _2499 = frontier_phi_66_pred;
                _2497 = frontier_phi_66_pred_1;
                _2495 = frontier_phi_66_pred_2;
                _2493 = frontier_phi_66_pred_3;
                _2491 = frontier_phi_66_pred_4;
                _2489 = frontier_phi_66_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2489;
                    _2634 = _2491;
                    _2635 = _2493;
                    _2636 = _2495;
                    _2637 = _2497;
                    _2638 = _2499;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
        }
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.z;
        uint _2505 = (_2503 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2505) & _2408) == 0u)
        {
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
            _2611 = _2498;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
            float _2627 = _2626 * _1485;
            float _2628 = _2626 * _1486;
            float _2629 = _2626 * _1487;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2505 < ((_2503 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2740 = _2488;
                float _2741 = _2490;
                float _2742 = _2492;
                float _2743 = _2494;
                float _2744 = _2496;
                float _2745 = _2498;
                uint _2746 = _2505;
                uint _2755;
                bool _2756;
                for (;;)
                {
                    _2755 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                    _2756 = _2755 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2756)
                    {
                        frontier_phi_72_pred = _2745;
                        frontier_phi_72_pred_1 = _2744;
                        frontier_phi_72_pred_2 = _2743;
                        frontier_phi_72_pred_3 = _2742;
                        frontier_phi_72_pred_4 = _2741;
                        frontier_phi_72_pred_5 = _2740;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _2952 = _2740;
                        float _2953 = _2741;
                        float _2954 = _2742;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        uint _2958 = _2755;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3028;
                        vec4 _3044;
                        float _3091;
                        bool _3092;
                        for (;;)
                        {
                            uint _2969 = ((_2746 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3015 = (_2969 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2969 * 40u) + 20u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3047 = (_2969 * 40u) + 24u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3066 = (_2969 * 40u) + 28u;
                            vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3091 = fma(_1487, _3079.z, fma(_1486, _3079.y, _3079.x * _1485)) + _3079.w;
                            _3092 = !((fma(_1487, _3060.z, fma(_1486, _3060.y, _3060.x * _1485)) + _3060.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3092)
                            {
                                float _3119 = _2984.x - _1485;
                                float _3120 = _2984.y - _1486;
                                float _3121 = _2984.z - _1487;
                                float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                                float _3125 = inversesqrt(_3122);
                                float _3126 = _3125 * _3119;
                                float _3127 = _3125 * _3120;
                                float _3128 = _3125 * _3121;
                                float _3132 = 1.0 - (_3122 / (_2985 * _2985));
                                float _4208 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3137 = sqrt(_3122) * _3000.w;
                                float _3139 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                                float _3140 = _3139 * _3139;
                                float _3143 = ((1.0 - _3140) * dot(vec3(_3126, _3127, _3128), vec3(_363, _366, _369))) + _3140;
                                float _3146 = _3137 * _3137;
                                float _3150 = (fma(_1487, _3028.z, fma(_1486, _3028.y, _3028.x * _1485)) + _3028.w) / _3091;
                                float _3151 = (fma(_1487, _3044.z, fma(_1486, _3044.y, _3044.x * _1485)) + _3044.w) / _3091;
                                float _3155 = 1.0 - dot(vec2(_3150, _3151), vec2(_3150, _3151));
                                float _4224 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3156 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3157 = _3156 * (((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3133) / ((_3146 * 0.699999988079071044921875) + 1.0));
                                float _3169 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                                float _3170 = 1.0 - _424;
                                float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                                float _3178 = _3177 * _3177;
                                float _3179 = _3178 * _3178;
                                float _3180 = _3126 - _2627;
                                float _3181 = _3127 - _2628;
                                float _3182 = _3128 - _2629;
                                float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                                float _3190 = dot(vec3(_363, _366, _369), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4235 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3193 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3194 = dot(vec3(_363, _366, _369), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                                float _4246 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3197 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                                float _3202 = _3139 * _3178;
                                float _3203 = _3202 * _3202;
                                float _3209 = ((1.0 - _3203) * dot(vec3(_363, _366, _369), vec3(_3126, _3127, _3128))) + _3203;
                                float _4257 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3211 = 1.0 - _3178;
                                float _3221 = (0.5 / (((_3210 * ((_3193 * _3211) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3210 * _3211) + _3178) * _3193))) * _3210;
                                float _4268 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3231 = (_3156 * _3133) * (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3201 * _3201) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3157 * _3000.y;
                                frontier_phi_78_pred_1 = _3157 * _3000.x;
                                frontier_phi_78_pred_2 = _3231 * _3012.z;
                                frontier_phi_78_pred_3 = _3231 * _3012.y;
                                frontier_phi_78_pred_4 = _3231 * _3012.x;
                                frontier_phi_78_pred_5 = _3157 * _3000.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3239 = frontier_phi_78_pred;
                            _3238 = frontier_phi_78_pred_1;
                            _3237 = frontier_phi_78_pred_2;
                            _3236 = frontier_phi_78_pred_3;
                            _3235 = frontier_phi_78_pred_4;
                            _3240 = frontier_phi_78_pred_5;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2944;
                        frontier_phi_72_pred_1 = _2943;
                        frontier_phi_72_pred_2 = _2942;
                        frontier_phi_72_pred_3 = _2941;
                        frontier_phi_72_pred_4 = _2940;
                        frontier_phi_72_pred_5 = _2939;
                    }
                    _2612 = frontier_phi_72_pred;
                    _2610 = frontier_phi_72_pred_1;
                    _2608 = frontier_phi_72_pred_2;
                    _2606 = frontier_phi_72_pred_3;
                    _2604 = frontier_phi_72_pred_4;
                    _2602 = frontier_phi_72_pred_5;
                    uint _2747 = _2746 + 1u;
                    if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2740 = _2602;
                        _2741 = _2604;
                        _2742 = _2606;
                        _2743 = _2608;
                        _2744 = _2610;
                        _2745 = _2612;
                        _2746 = _2747;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2612;
                frontier_phi_60_61_ladder_1 = _2610;
                frontier_phi_60_61_ladder_2 = _2606;
                frontier_phi_60_61_ladder_3 = _2604;
                frontier_phi_60_61_ladder_4 = _2602;
                frontier_phi_60_61_ladder_5 = _2608;
            }
            else
            {
                frontier_phi_60_61_ladder = _2498;
                frontier_phi_60_61_ladder_1 = _2496;
                frontier_phi_60_61_ladder_2 = _2492;
                frontier_phi_60_61_ladder_3 = _2490;
                frontier_phi_60_61_ladder_4 = _2488;
                frontier_phi_60_61_ladder_5 = _2494;
            }
            _2601 = frontier_phi_60_61_ladder_4;
            _2603 = frontier_phi_60_61_ladder_3;
            _2605 = frontier_phi_60_61_ladder_2;
            _2607 = frontier_phi_60_61_ladder_5;
            _2609 = frontier_phi_60_61_ladder_1;
            _2611 = frontier_phi_60_61_ladder;
        }
        float _2616 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
        _2421 = (_2616 * _2607) + _1952;
        _2423 = (_2616 * _2609) + _1954;
        _2425 = (_2616 * _2611) + _1956;
        _2427 = ((_2601 * 0.039999999105930328369140625) * _2616) + _2275;
        _2429 = ((_2603 * 0.039999999105930328369140625) * _2616) + _2277;
        _2431 = ((_2605 * 0.039999999105930328369140625) * _2616) + _2279;
    }
    else
    {
        _2421 = _1952;
        _2423 = _1954;
        _2425 = _1956;
        _2427 = _2275;
        _2429 = _2277;
        _2431 = _2279;
    }
    float _4284 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _4295 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _4306 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    uint _2451 = _382 + 6u;
    float _2459 = _341 / cbSceneParam._m0[86u].x;
    float _2460 = _342 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _274 : (isnan(_274) ? cbSceneParam._m0[77u].w : min(_274, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_274 > cbSceneParam._m0[78u].w)
    {
        float _2513 = isnan(_274) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _274 : min(cbSceneParam._m0[80u].w, _274));
        float _2514 = _2513 / _274;
        float _2525 = _2514 * _326;
        float _2526 = _327 * _2514;
        float _2527 = (-0.0) - _2526;
        float _2529 = _2514 * _328;
        float _2531 = (cbSceneParam._m0[77u].w * _2527) / _2513;
        float _2532 = _2531 + cbSceneParam._m0[79u].w;
        float _2533 = cbSceneParam._m0[79u].w - _2526;
        float _2539 = sqrt(((_2525 * _2525) + (_2526 * _2526)) + (_2529 * _2529));
        float _2542 = (1.0 - (cbSceneParam._m0[77u].w / _2513)) * _2539;
        float _2547 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2549 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2702;
        if (abs((_2527 - _2531) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2702 = ((((_2532 > 0.0) ? exp2(_2547 * _2532) : (2.0 - exp2(_2549 * _2532))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2542;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : max(_2532, _2533));
            float _2664 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : min(_2532, _2533));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2702 = ((abs(_2539 / _2527) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2547 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2547 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2549 * _2673) - exp2(_2549 * _2674)) * _2662))) + (_2542 * cbSceneParam._m0[80u].z);
        }
        vec4 _2704 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _2713 = exp2((_2702 * (-1.44269502162933349609375)) * (1.0 - _2704.w));
        float _2714 = log2(_2713);
        float _2730 = log2(_2479);
        _2551 = (exp2(_2730 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].x)) * _2704.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2553 = (exp2(_2730 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].y)) * _2704.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2555 = (exp2(_2730 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].z)) * _2704.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2557 = _2713 * _2479;
    }
    else
    {
        _2551 = _2476;
        _2553 = _2477;
        _2555 = _2478;
        _2557 = _2479;
    }
    float _2569 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2570 = _2569 == 3.0;
    float _2571 = log2(_2557);
    float _2578 = exp2(_2571 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2421 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _408))) + ((_2427 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1215)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2571 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2423 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _408))) + ((_2429 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1215)) * cbPerFrame._m0[3u].x));
    float _2580 = exp2(_2571 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2425 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _408))) + ((_2431 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1215)) * cbPerFrame._m0[3u].x));
    float _2589 = (_2569 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2589 * (_2570 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.y = _2589 * (_2570 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.z = _2589 * (_2570 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.w = cbInstanceData._m0[_2451].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2451].w;
}


