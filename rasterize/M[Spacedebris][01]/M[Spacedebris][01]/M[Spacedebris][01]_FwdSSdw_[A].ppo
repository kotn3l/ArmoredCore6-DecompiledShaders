#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Spacedebris_01_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _823;
float _3216;
float _3217;
float _3218;
float _3219;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_Spacedebris_01_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = (_223.x * 2.0) + (-1.0);
    float _233 = (_223.y * 2.0) + (-1.0);
    float _234 = dot(vec2(_231, _233), vec2(_231, _233));
    float _3228 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _240 = sqrt(1.0 - (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))));
    float _243 = fma(_240, _189 * NORMAL.x, fma(_233, _196 * TANGENT.x, (_182 * _174) * _231));
    float _246 = fma(_240, _189 * NORMAL.y, fma(_233, _196 * TANGENT.y, (_182 * _175) * _231));
    float _249 = fma(_240, _189 * NORMAL.z, fma(_233, _196 * TANGENT.z, (_182 * _176) * _231));
    float _253 = inversesqrt(dot(vec3(_243, _246, _249), vec3(_243, _246, _249)));
    float _254 = _253 * _243;
    float _255 = _253 * _246;
    float _256 = _253 * _249;
    float _3239 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _257 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3261 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3272 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _276 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _318 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _328 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _318);
    float _329 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _318);
    float _330 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _318);
    float _334 = inversesqrt(dot(vec3(_328, _329, _330), vec3(_328, _329, _330)));
    float _335 = _328 * _334;
    float _336 = _329 * _334;
    float _337 = _330 * _334;
    vec4 _342 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _344 = _342.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _502 = sqrt(((_328 * _328) + (_329 * _329)) + (_330 * _330));
        float _508 = (cbMatDynParam._m0[5u].x * _502) + cbMatDynParam._m0[5u].y;
        float _3283 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
        float _509 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _513 = (cbMatDynParam._m0[5u].z * _502) + cbMatDynParam._m0[5u].w;
        float _3294 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) - _509)) + _509) < ((_344 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _356 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _357 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _377 = fma(_256, cbSceneParam._m0[5u].z, fma(_255, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _254));
    float _380 = fma(_256, cbSceneParam._m0[6u].z, fma(_255, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _254));
    float _383 = fma(_256, cbSceneParam._m0[7u].z, fma(_255, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _254));
    uint _396 = uint(roundEven(NORMAL.w)) * 13u;
    uint _398 = _396 + 9u;
    uint _399 = _398 + uint(cbMatDynParam._m0[0u].w);
    float _405 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_399].x;
    float _406 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_399].y;
    float _407 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_399].z;
    float _3305 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    vec4 _419 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _356, cbSceneParam._m0[86u].y * _357));
    float _422 = _419.x * TEXCOORD.z;
    float _423 = dot(vec3(_254, _255, _256), vec3(_335, _336, _337));
    float _426 = _423 * 2.0;
    float _430 = (_426 * _254) - _335;
    float _431 = (_426 * _255) - _336;
    float _432 = (_426 * _256) - _337;
    float _436 = abs(dot(vec3(_335, _336, _337), vec3(_254, _255, _256)));
    float _3338 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _438 = sqrt(_257);
    float _451 = exp2((_438 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_438 * 3.0));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _822;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _547 = fma(_491, cbModelParam._m0[26u].z, fma(_487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483));
        float _551 = fma(_491, cbModelParam._m0[27u].z, fma(_487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483));
        float _555 = fma(_491, cbModelParam._m0[28u].z, fma(_487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483));
        float _580 = _483 + _254;
        float _581 = _487 + _255;
        float _582 = _491 + _256;
        float _592 = fma(_582, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580)) - _547;
        float _593 = fma(_582, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580)) - _551;
        float _594 = fma(_582, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580)) - _555;
        float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
        float _611 = ((_598 * _592) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_547 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_598 * _593) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_551 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_598 * _594) / cbModelParam._m0[34u].z) + ((((((_555 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        float _650 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_616.x + (-0.5));
        float _652 = _650 * (_616.y + (-0.5));
        float _653 = _650 * (_616.z + (-0.5));
        float _660 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_623.x + (-0.5));
        float _662 = _660 * (_623.y + (-0.5));
        float _663 = _660 * (_623.z + (-0.5));
        float _670 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_630.x + (-0.5));
        float _672 = _670 * (_630.y + (-0.5));
        float _673 = _670 * (_630.z + (-0.5));
        float _680 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_637.x + (-0.5));
        float _682 = _680 * (_637.y + (-0.5));
        float _683 = _680 * (_637.z + (-0.5));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = _651 * 0.5;
        float _688 = _661 * 0.5;
        float _689 = _671 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _704 = (dot(vec3(_254, _255, _256), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _714 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3386 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_716 + 1.0))) + _721) * _684;
        float _731 = _652 * 0.5;
        float _732 = _662 * 0.5;
        float _733 = _672 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_254, _255, _256), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3419 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_758 + 1.0))) + _763) * _685;
        float _773 = _653 * 0.5;
        float _774 = _663 * 0.5;
        float _775 = _673 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_254, _255, _256), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3452 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_800 + 1.0))) + _805) * _686;
        _822 = _653;
        _824 = _652;
        _825 = _651;
        _826 = _663;
        _827 = _662;
        _828 = _661;
        _829 = _673;
        _830 = _672;
        _831 = _671;
        _832 = _686;
        _833 = _685;
        _834 = _684;
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
    }
    else
    {
        _822 = _823;
        _824 = _823;
        _825 = _823;
        _826 = _823;
        _827 = _823;
        _828 = _823;
        _829 = _823;
        _830 = _823;
        _831 = _823;
        _832 = _823;
        _833 = _823;
        _834 = _823;
        _835 = 0.0;
        _836 = 0.0;
        _837 = 0.0;
    }
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _866 = fma(_491, cbModelParam._m0[30u].z, fma(_487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _483));
        float _870 = fma(_491, cbModelParam._m0[31u].z, fma(_487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _483));
        float _874 = fma(_491, cbModelParam._m0[32u].z, fma(_487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _483));
        float _897 = _483 + _254;
        float _898 = _487 + _255;
        float _899 = _491 + _256;
        float _909 = fma(_899, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897)) - _866;
        float _910 = fma(_899, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897)) - _870;
        float _911 = fma(_899, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897)) - _874;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_866 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_870 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[35u].z) + ((((((_874 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _965 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_932.x + (-0.5));
        float _967 = _965 * (_932.y + (-0.5));
        float _968 = _965 * (_932.z + (-0.5));
        float _975 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_939.x + (-0.5));
        float _977 = _975 * (_939.y + (-0.5));
        float _978 = _975 * (_939.z + (-0.5));
        float _985 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_946.x + (-0.5));
        float _987 = _985 * (_946.y + (-0.5));
        float _988 = _985 * (_946.z + (-0.5));
        float _995 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_953.x + (-0.5));
        float _997 = _995 * (_953.y + (-0.5));
        float _998 = _995 * (_953.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_254, _255, _256), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3515 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1029 + 1.0))) + _1034) * _999;
        float _1044 = _967 * 0.5;
        float _1045 = _977 * 0.5;
        float _1046 = _987 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_254, _255, _256), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3548 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1071 + 1.0))) + _1076) * _1000;
        float _1086 = _968 * 0.5;
        float _1087 = _978 * 0.5;
        float _1088 = _988 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_254, _255, _256), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3581 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1113 + 1.0))) + _1118) * _1001;
        _1135 = _968;
        _1136 = _967;
        _1137 = _966;
        _1138 = _978;
        _1139 = _977;
        _1140 = _976;
        _1141 = _988;
        _1142 = _987;
        _1143 = _986;
        _1144 = _1001;
        _1145 = _1000;
        _1146 = _999;
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _823;
        _1136 = _823;
        _1137 = _823;
        _1138 = _823;
        _1139 = _823;
        _1140 = _823;
        _1141 = _823;
        _1142 = _823;
        _1143 = _823;
        _1144 = _823;
        _1145 = _823;
        _1146 = _823;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _835)) + _835;
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _836)) + _836;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _837)) + _837;
    float _1182 = fma(_1161, cbSceneParam._m0[89u].z, fma(_1160, cbSceneParam._m0[89u].y, _1159 * cbSceneParam._m0[89u].x));
    float _1185 = fma(_1161, cbSceneParam._m0[90u].z, fma(_1160, cbSceneParam._m0[90u].y, _1159 * cbSceneParam._m0[90u].x));
    float _1188 = fma(_1161, cbSceneParam._m0[91u].z, fma(_1160, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1159));
    float _1203 = _430 * 0.5;
    float _1204 = _431 * 0.5;
    float _1205 = _432 * 0.5;
    float _1206 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1209 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1212 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1246;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1219 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_822, _826, _829, _832));
        float _1223 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_824, _827, _830, _833));
        float _1227 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_825, _828, _831, _834));
        float _1234 = dot(vec4(cbModelParam._m0[39u]), vec4(_1203, _1204, _1205, 1.0));
        _1246 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1246 = 1.0;
    }
    float _1257;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1248 = dot(vec4(cbModelParam._m0[40u]), vec4(_1203, _1204, _1205, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1261 = (_1257 * cbModelParam._m0[1u].x) + (_1246 * (1.0 - cbModelParam._m0[1u].x));
    float _1271 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _257);
    float _1272 = isnan(_1271) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1271 : min(cbModelParam._m0[25u].z, _1271));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1321 = fma(_491, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483)) + cbModelParam._m0[13u].w;
        float _1325 = fma(_491, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483)) + cbModelParam._m0[14u].w;
        float _1329 = fma(_491, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483)) + cbModelParam._m0[15u].w;
        float _1332 = fma(_432, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _430));
        float _1335 = fma(_432, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _430));
        float _1338 = fma(_432, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _430));
        float _1366;
        if (_1332 > 0.0)
        {
            _1366 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1366 = frontier_phi_17_15_ladder;
        }
        float _1592;
        if (_1335 > 0.0)
        {
            _1592 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1592 = frontier_phi_26_22_ladder;
        }
        float _1838;
        if (_1338 > 0.0)
        {
            _1838 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1838 = frontier_phi_38_33_ladder;
        }
        float _1840 = isnan(_1592) ? _1366 : (isnan(_1366) ? _1592 : min(_1366, _1592));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1332) + _1321;
        float _1846 = (_1841 * _1335) + _1325;
        float _1847 = (_1841 * _1338) + _1329;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1272);
            frontier_phi_16_38_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1354 = frontier_phi_16_38_ladder_2;
        _1356 = frontier_phi_16_38_ladder_1;
        _1358 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_430, _431, _432), _1272);
        _1354 = _1342.x * cbModelParam._m0[1u].y;
        _1356 = _1342.y * cbModelParam._m0[1u].y;
        _1358 = _1342.z * cbModelParam._m0[1u].y;
    }
    float _1362 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _257);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1362 : min(cbModelParam._m0[25u].w, _1362));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_491, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_491, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_491, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_432, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _430));
        float _1434 = fma(_432, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _430));
        float _1437 = fma(_432, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _430));
        float _1597;
        if (_1431 > 0.0)
        {
            _1597 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1597 = frontier_phi_28_24_ladder;
        }
        float _1865;
        if (_1434 > 0.0)
        {
            _1865 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1865 = frontier_phi_40_35_ladder;
        }
        float _2070;
        if (_1437 > 0.0)
        {
            _2070 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2070 = frontier_phi_49_46_ladder;
        }
        float _2072 = isnan(_1865) ? _1597 : (isnan(_1597) ? _1865 : min(_1597, _1865));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1431) + _1420;
        float _2078 = (_2073 * _1434) + _1424;
        float _2079 = (_2073 * _1437) + _1428;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2080;
        float _2083 = _2080 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2079 > _2083) || ((_2079 < _2081) || ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 < _2081) || (_2077 > _2083))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2079, cbModelParam._m0[17u].z, fma(_2078, cbModelParam._m0[17u].y, _2077 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2079, cbModelParam._m0[18u].z, fma(_2078, cbModelParam._m0[18u].y, _2077 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2079, cbModelParam._m0[19u].z, fma(_2078, cbModelParam._m0[19u].y, _2077 * cbModelParam._m0[19u].x))), _1363);
            frontier_phi_25_49_ladder = _2278.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2278.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2278.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_25_49_ladder_2;
        _1458 = frontier_phi_25_49_ladder_1;
        _1460 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_430, _431, _432), _1363);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1472 = ((((1.0 - _451) * ((_438 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_451 * _438)) * _422;
    float _1473 = _1472 * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1474 = _1472 * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1475 = _1472 * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1478 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, _1473 * cbSceneParam._m0[91u].x));
    vec4 _1492 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_356, _357));
    float _1494 = _1492.w;
    float _1506 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1494);
    float _1507 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1494);
    float _1508 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1494);
    uvec4 _1512 = floatBitsToUint(cbInstanceData._m0[_396 + 5u]);
    uint _1514 = _1512.x * 14u;
    uint _1515 = _1514 + 13u;
    float _1522 = _422 + (-1.0);
    float _1527 = (cbLight._m0[_1515].x * _1522) + 1.0;
    float _1528 = (cbLight._m0[_1515].y * _1522) + 1.0;
    float _1529 = (cbLight._m0[_1515].z * _1522) + 1.0;
    float _1530 = (cbLight._m0[_1515].w * _1522) + 1.0;
    uint _1531 = _1514 + 5u;
    float _1537 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1541 = _1514 + 4u;
    float _1551 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1555 = _1514 | 1u;
    float _1566 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_254, _255, _256));
    float _1569 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_254, _255, _256));
    float _3717 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _3728 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1574 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1576 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1583 = ((cbLight._m0[_1531].x * _1537) * _1576) + (((cbLight._m0[_1541].x * _1506) * _1551) * _1574);
    float _1584 = ((_1537 * cbLight._m0[_1531].y) * _1576) + (((cbLight._m0[_1541].y * _1507) * _1551) * _1574);
    float _1585 = ((_1537 * cbLight._m0[_1531].z) * _1576) + (((cbLight._m0[_1541].z * _1508) * _1551) * _1574);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1514 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1583;
        _1604 = _1584;
        _1606 = _1585;
    }
    else
    {
        uint _1610 = _1514 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1514 + 2u].xyz), vec3(_254, _255, _256)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3739 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1629 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1585;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1809 = _1514 + 7u;
        float _1825 = (dot(vec3(cbLight._m0[_1514 + 3u].xyz), vec3(_254, _255, _256)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3755 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1828 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1647 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1602;
        _1649 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1604;
        _1651 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1606;
    }
    uint _1654 = _1514 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1514].w)) * _257) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1514].x + _335;
    float _1670 = cbLight._m0[_1514].y + _336;
    float _1671 = cbLight._m0[_1514].z + _337;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_254, _255, _256), vec3(cbLight._m0[_1514].xyz));
    float _3771 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _1683 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1684 = dot(vec3(_254, _255, _256), vec3(_1676, _1677, _1678));
    float _3793 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_1676, _1677, _1678));
    float _3804 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1708 = 1.0 - _1668;
    float _1719 = (0.5 / (((_1683 * ((_1682 * _1708) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1708) + _1668) * _1682))) * _1682;
    float _3815 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1735 = _1514 + 9u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1555].w)) * _257) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1555].x + _335;
    float _1749 = cbLight._m0[_1555].y + _336;
    float _1750 = cbLight._m0[_1555].z + _337;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_254, _255, _256), vec3(cbLight._m0[_1555].xyz));
    float _3826 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1762 = dot(vec3(_254, _255, _256), vec3(_1755, _1756, _1757));
    float _3837 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1755, _1756, _1757));
    float _3848 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1747 * _1747;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1747;
    float _1794 = (0.5 / (((_1683 * ((_1761 * _1784) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1784) + _1747) * _1761))) * _1761;
    float _3859 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    float _1806 = (((_1783 * cbLight._m0[_1735].x) * _1796) * _1537) + ((((cbLight._m0[_1654].x * _1506) * _1707) * _1721) * _1551);
    float _1807 = (((_1783 * cbLight._m0[_1735].y) * _1796) * _1537) + ((((cbLight._m0[_1654].y * _1507) * _1707) * _1721) * _1551);
    float _1808 = (((_1783 * cbLight._m0[_1735].z) * _1796) * _1537) + ((((cbLight._m0[_1654].z * _1508) * _1707) * _1721) * _1551);
    float _1870;
    float _1872;
    float _1874;
    if (_1591)
    {
        _1870 = _1806;
        _1872 = _1807;
        _1874 = _1808;
    }
    else
    {
        uint _1876 = _1514 + 2u;
        uint _1880 = _1514 + 10u;
        float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _257) * 0.949999988079071044921875);
        float _1895 = _1894 * _1894;
        float _1896 = cbLight._m0[_1876].x + _335;
        float _1897 = cbLight._m0[_1876].y + _336;
        float _1898 = cbLight._m0[_1876].z + _337;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1903 = _1902 * _1896;
        float _1904 = _1902 * _1897;
        float _1905 = _1902 * _1898;
        float _1906 = dot(vec3(_254, _255, _256), vec3(cbLight._m0[_1876].xyz));
        float _3870 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1910 = dot(vec3(_254, _255, _256), vec3(_1903, _1904, _1905));
        float _3881 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1903, _1904, _1905));
        float _3892 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = _1895 * _1895;
        float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
        float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1932 = 1.0 - _1895;
        float _1942 = (0.5 / (((_1683 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1932) + _1895) * _1909))) * _1909;
        float _3903 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
        float _1945 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1870 = (((_1931 * cbLight._m0[_1880].x) * _1944) * _1945) + _1806;
        _1872 = (((_1931 * cbLight._m0[_1880].y) * _1944) * _1945) + _1807;
        _1874 = (((_1931 * cbLight._m0[_1880].z) * _1944) * _1945) + _1808;
    }
    float _1980;
    float _1982;
    float _1984;
    if (_1609)
    {
        _1980 = _1870;
        _1982 = _1872;
        _1984 = _1874;
    }
    else
    {
        uint _1991 = _1514 + 3u;
        uint _1995 = _1514 + 11u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _257) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _335;
        float _2012 = cbLight._m0[_1991].y + _336;
        float _2013 = cbLight._m0[_1991].z + _337;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_254, _255, _256), vec3(cbLight._m0[_1991].xyz));
        float _3919 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2025 = dot(vec3(_254, _255, _256), vec3(_2018, _2019, _2020));
        float _3930 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3941 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2047 = 1.0 - _2010;
        float _2057 = (0.5 / (((_1683 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2047) + _2010) * _2024))) * _2024;
        float _3952 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1980 = (((_2046 * cbLight._m0[_1995].x) * _2059) * _2060) + _1870;
        _1982 = (((_2046 * cbLight._m0[_1995].y) * _2059) * _2060) + _1872;
        _1984 = (((_2046 * cbLight._m0[_1995].z) * _2059) * _2060) + _1874;
    }
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1512.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _357) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _356) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
        }
        else
        {
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            uint _2442 = 0u;
            uint _2451;
            bool _2452;
            for (;;)
            {
                _2451 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                _2452 = _2451 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2452)
                {
                    frontier_phi_66_pred = _2436;
                    frontier_phi_66_pred_1 = _2441;
                    frontier_phi_66_pred_2 = _2440;
                    frontier_phi_66_pred_3 = _2439;
                    frontier_phi_66_pred_4 = _2438;
                    frontier_phi_66_pred_5 = _2437;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2441;
                    _2587 = _2451;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2442 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2136;
                        float _2648 = _2607.y - _2137;
                        float _2649 = _2607.z - _2138;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_377, _380, _383), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3978 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2136;
                        float _2683 = (-0.0) - _2137;
                        float _2684 = (-0.0) - _2138;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _438;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_377, _380, _383), vec3(_2689, _2690, _2691));
                        float _3994 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2724 = dot(vec3(_377, _380, _383), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _4005 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _4016 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _4027 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2511 = (_2678 * _2626.x) + _2584;
                        _2512 = (_2678 * _2626.y) + _2585;
                        _2513 = (_2678 * _2626.z) + _2586;
                        _2508 = (_2759 * _2643.x) + _2581;
                        _2509 = (_2759 * _2643.y) + _2582;
                        _2510 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2513;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_66_pred = _2508;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                _2284 = frontier_phi_66_pred;
                _2294 = frontier_phi_66_pred_1;
                _2292 = frontier_phi_66_pred_2;
                _2290 = frontier_phi_66_pred_3;
                _2288 = frontier_phi_66_pred_4;
                _2286 = frontier_phi_66_pred_5;
                uint _2443 = _2442 + 1u;
                if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2436 = _2284;
                    _2437 = _2286;
                    _2438 = _2288;
                    _2439 = _2290;
                    _2440 = _2292;
                    _2441 = _2294;
                    _2442 = _2443;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
        }
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.z;
        uint _2300 = (_2298 >> 8u) & 15u;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((4294967295u << _2300) & _2182) == 0u)
        {
            _2404 = _2283;
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
            _2412 = _2291;
            _2414 = _2293;
        }
        else
        {
            float _2429 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2430 = _2429 * _2136;
            float _2431 = _2429 * _2137;
            float _2432 = _2429 * _2138;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2300 < ((_2298 >> 12u) & 15u))
            {
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2564 = _2283;
                float _2565 = _2285;
                float _2566 = _2287;
                float _2567 = _2289;
                float _2568 = _2291;
                float _2569 = _2293;
                uint _2570 = _2300;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2580)
                    {
                        frontier_phi_77_pred = _2569;
                        frontier_phi_77_pred_1 = _2568;
                        frontier_phi_77_pred_2 = _2567;
                        frontier_phi_77_pred_3 = _2566;
                        frontier_phi_77_pred_4 = _2565;
                        frontier_phi_77_pred_5 = _2564;
                    }
                    else
                    {
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        float _2791 = _2569;
                        uint _2792 = _2579;
                        uint _2793;
                        vec4 _2818;
                        float _2819;
                        vec4 _2834;
                        vec3 _2846;
                        vec4 _2862;
                        vec4 _2878;
                        float _2925;
                        bool _2926;
                        for (;;)
                        {
                            uint _2803 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2792));
                            _2793 = (_2792 + 4294967295u) & _2792;
                            uint _2805 = _2803 * 40u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            _2819 = _2818.w;
                            uint _2821 = (_2803 * 40u) + 4u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2836 = (_2803 * 40u) + 8u;
                            _2846 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x));
                            uint _2849 = (_2803 * 40u) + 16u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2803 * 40u) + 20u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2803 * 40u) + 24u;
                            vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2900 = (_2803 * 40u) + 28u;
                            vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            _2925 = fma(_2138, _2913.z, fma(_2137, _2913.y, _2913.x * _2136)) + _2913.w;
                            _2926 = !((fma(_2138, _2894.z, fma(_2137, _2894.y, _2894.x * _2136)) + _2894.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2926)
                            {
                                float _2953 = _2818.x - _2136;
                                float _2954 = _2818.y - _2137;
                                float _2955 = _2818.z - _2138;
                                float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                                float _2959 = inversesqrt(_2956);
                                float _2960 = _2959 * _2953;
                                float _2961 = _2959 * _2954;
                                float _2962 = _2959 * _2955;
                                float _2966 = 1.0 - (_2956 / (_2819 * _2819));
                                float _4038 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _2971 = sqrt(_2956) * _2834.w;
                                float _2973 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                                float _2974 = _2973 * _2973;
                                float _2977 = ((1.0 - _2974) * dot(vec3(_2960, _2961, _2962), vec3(_377, _380, _383))) + _2974;
                                float _2980 = _2971 * _2971;
                                float _2984 = (fma(_2138, _2862.z, fma(_2137, _2862.y, _2862.x * _2136)) + _2862.w) / _2925;
                                float _2985 = (fma(_2138, _2878.z, fma(_2137, _2878.y, _2878.x * _2136)) + _2878.w) / _2925;
                                float _2989 = 1.0 - dot(vec2(_2984, _2985), vec2(_2984, _2985));
                                float _4054 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _2991 = _2990 * (((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2967) / ((_2980 * 0.699999988079071044921875) + 1.0));
                                float _3003 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                                float _3004 = 1.0 - _438;
                                float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                                float _3012 = _3011 * _3011;
                                float _3013 = _3012 * _3012;
                                float _3014 = _2960 - _2430;
                                float _3015 = _2961 - _2431;
                                float _3016 = _2962 - _2432;
                                float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                                float _3024 = dot(vec3(_377, _380, _383), vec3((-0.0) - _2430, (-0.0) - _2431, (-0.0) - _2432));
                                float _4065 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3028 = dot(vec3(_377, _380, _383), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                                float _4076 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3031 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                                float _3036 = _2973 * _3012;
                                float _3037 = _3036 * _3036;
                                float _3043 = ((1.0 - _3037) * dot(vec3(_377, _380, _383), vec3(_2960, _2961, _2962))) + _3037;
                                float _4087 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3045 = 1.0 - _3012;
                                float _3055 = (0.5 / (((_3044 * ((_3027 * _3045) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3012) * _3027))) * _3044;
                                float _4098 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3065 = (_2990 * _2967) * (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_3035 * _3035) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2991 * _2834.y;
                                frontier_phi_83_pred_1 = _2991 * _2834.x;
                                frontier_phi_83_pred_2 = _3065 * _2846.z;
                                frontier_phi_83_pred_3 = _3065 * _2846.y;
                                frontier_phi_83_pred_4 = _3065 * _2846.x;
                                frontier_phi_83_pred_5 = _2991 * _2834.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3073 = frontier_phi_83_pred;
                            _3072 = frontier_phi_83_pred_1;
                            _3071 = frontier_phi_83_pred_2;
                            _3070 = frontier_phi_83_pred_3;
                            _3069 = frontier_phi_83_pred_4;
                            _3074 = frontier_phi_83_pred_5;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            if (_2793 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2793;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2778;
                        frontier_phi_77_pred_1 = _2777;
                        frontier_phi_77_pred_2 = _2776;
                        frontier_phi_77_pred_3 = _2775;
                        frontier_phi_77_pred_4 = _2774;
                        frontier_phi_77_pred_5 = _2773;
                    }
                    _2415 = frontier_phi_77_pred;
                    _2413 = frontier_phi_77_pred_1;
                    _2411 = frontier_phi_77_pred_2;
                    _2409 = frontier_phi_77_pred_3;
                    _2407 = frontier_phi_77_pred_4;
                    _2405 = frontier_phi_77_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2405;
                        _2565 = _2407;
                        _2566 = _2409;
                        _2567 = _2411;
                        _2568 = _2413;
                        _2569 = _2415;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2409;
                frontier_phi_58_59_ladder_1 = _2415;
                frontier_phi_58_59_ladder_2 = _2413;
                frontier_phi_58_59_ladder_3 = _2411;
                frontier_phi_58_59_ladder_4 = _2407;
                frontier_phi_58_59_ladder_5 = _2405;
            }
            else
            {
                frontier_phi_58_59_ladder = _2287;
                frontier_phi_58_59_ladder_1 = _2293;
                frontier_phi_58_59_ladder_2 = _2291;
                frontier_phi_58_59_ladder_3 = _2289;
                frontier_phi_58_59_ladder_4 = _2285;
                frontier_phi_58_59_ladder_5 = _2283;
            }
            _2404 = frontier_phi_58_59_ladder_5;
            _2406 = frontier_phi_58_59_ladder_4;
            _2408 = frontier_phi_58_59_ladder;
            _2410 = frontier_phi_58_59_ladder_3;
            _2412 = frontier_phi_58_59_ladder_2;
            _2414 = frontier_phi_58_59_ladder_1;
        }
        float _2419 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
        _2195 = (_2419 * _2410) + _1647;
        _2197 = (_2419 * _2412) + _1649;
        _2199 = (_2419 * _2414) + _1651;
        _2201 = ((_2404 * 0.039999999105930328369140625) * _2419) + _1980;
        _2203 = ((_2406 * 0.039999999105930328369140625) * _2419) + _1982;
        _2205 = ((_2408 * 0.039999999105930328369140625) * _2419) + _1984;
    }
    else
    {
        _2195 = _1647;
        _2197 = _1649;
        _2199 = _1651;
        _2201 = _1980;
        _2203 = _1982;
        _2205 = _1984;
    }
    float _4114 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _4125 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _4136 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _2222 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2195 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _422))) + ((_2201 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1261)) * cbPerFrame._m0[3u].x);
    float _2223 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2197 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _422))) + ((_2203 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1261)) * cbPerFrame._m0[3u].x);
    float _2224 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2199 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _422))) + ((_2205 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1261)) * cbPerFrame._m0[3u].x);
    uint _2225 = _396 + 6u;
    float _2233 = _356 / cbSceneParam._m0[86u].x;
    float _2234 = _357 / cbSceneParam._m0[86u].y;
    vec4 _2248 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, (log2((isnan(cbSceneParam._m0[77u].w) ? _276 : (isnan(_276) ? cbSceneParam._m0[77u].w : min(_276, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2250 = _2248.x;
    float _2251 = _2248.y;
    float _2252 = _2248.z;
    float _2253 = _2248.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_276 > cbSceneParam._m0[78u].w)
    {
        float _2308 = isnan(_276) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _276 : min(cbSceneParam._m0[80u].w, _276));
        float _2309 = _2308 / _276;
        float _2320 = _2309 * _328;
        float _2321 = _329 * _2309;
        float _2322 = (-0.0) - _2321;
        float _2324 = _2309 * _330;
        float _2326 = (cbSceneParam._m0[77u].w * _2322) / _2308;
        float _2327 = _2326 + cbSceneParam._m0[79u].w;
        float _2328 = cbSceneParam._m0[79u].w - _2321;
        float _2334 = sqrt(((_2320 * _2320) + (_2321 * _2321)) + (_2324 * _2324));
        float _2337 = (1.0 - (cbSceneParam._m0[77u].w / _2308)) * _2334;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2521;
        if (abs((_2322 - _2326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2521 = ((((_2327 > 0.0) ? exp2(_2342 * _2327) : (2.0 - exp2(_2344 * _2327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2337;
        }
        else
        {
            float _2465 = 1.0 / cbSceneParam._m0[80u].x;
            float _2466 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : max(_2327, _2328));
            float _2467 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : min(_2327, _2328));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            _2521 = ((abs(_2334 / _2322) * cbSceneParam._m0[80u].y) * ((((_2476 - _2477) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))))) * _2465)) - ((exp2(_2344 * _2476) - exp2(_2344 * _2477)) * _2465))) + (_2337 * cbSceneParam._m0[80u].z);
        }
        vec4 _2523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, 1.0), 0.0);
        float _2532 = exp2((_2521 * (-1.44269502162933349609375)) * (1.0 - _2523.w));
        float _2533 = log2(_2532);
        float _2549 = log2(_2253);
        _2346 = (exp2(_2549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].x)) * _2523.x) / cbSceneParam._m0[78u].x)) + _2250;
        _2348 = (exp2(_2549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].y)) * _2523.y) / cbSceneParam._m0[78u].y)) + _2251;
        _2350 = (exp2(_2549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].z)) * _2523.z) / cbSceneParam._m0[78u].z)) + _2252;
        _2352 = _2532 * _2253;
    }
    else
    {
        _2346 = _2250;
        _2348 = _2251;
        _2350 = _2252;
        _2352 = _2253;
    }
    bool _2559;
    vec4 _2362;
    vec4 _2384;
    float _2386;
    float _2390;
    float _2391;
    float _2392;
    float _2393;
    bool _2403;
    for (;;)
    {
        _2362 = cbMatDynParam._m0[0u];
        float _2364 = roundEven(_2362.y);
        bool _2365 = _2364 == 3.0;
        float _2366 = log2(_2352);
        float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * _2222;
        float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * _2223;
        float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * _2224;
        float _2382 = _344 + (-0.5);
        _2384 = cbMtdParam._m0[1u];
        _2386 = _2384.y * _2382;
        float _2389 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2390 = _2389 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
        _2391 = _2389 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
        _2392 = _2389 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
        _2393 = _2382 * 0.999000012874603271484375;
        _2403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2403)
        {
            if ((cbInstanceData._m0[_396 + 7u].x + _2393) < 0.5)
            {
                _2559 = true;
                break;
            }
        }
        uint _2500 = _398 + uint(_2362.w);
        if ((cbInstanceData._m0[_2500].w < 1.0) && ((cbInstanceData._m0[_2500].w + _2393) < 0.5))
        {
            _2559 = true;
            break;
        }
        if ((_2386 + 1.0) < _2384.x)
        {
            _2559 = true;
            break;
        }
        _2559 = false;
        break;
    }
    float _2764;
    if (_2559)
    {
        discard_state = true;
        _2764 = 0.0;
    }
    else
    {
        _2764 = cbInstanceData._m0[_2225].w;
    }
    SV_Target.x = _2390;
    SV_Target.y = _2391;
    SV_Target.z = _2392;
    SV_Target.w = _2764;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2225].w;
    discard_exit();
}


