#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _3954;
float _3955;
float _3956;
float _3957;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    float _308 = cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x;
    vec4 _325 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_2, SS_BumpMap), vec2((((_308 * cbMtdParam._m0[26u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_308 * cbMtdParam._m0[27u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _328 = _325.x;
    float _329 = _325.y;
    float _330 = _325.z;
    float _331 = _325.w;
    float _344 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _347 = (sqrt(((_289 * _289) + (_290 * _290)) + (_291 * _291)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _344 : (isnan(_344) ? 0.001000000047497451305389404296875 : max(_344, 0.001000000047497451305389404296875)));
    float _348 = _347 + 0.180000007152557373046875;
    float _350 = _348 * 12.0;
    float _3971 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    vec4 _365 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _367 = _365.x;
    float _390 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _367)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _367))) - POSITION_1.w;
    float _391 = _390 / ((_353 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _3982 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _393 = isnan(0.5) ? _392 : (isnan(_392) ? 0.5 : max(_392, 0.5));
    float _395 = 1.0 - _393;
    float _396 = _348 * 7.0;
    float _3998 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _398 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _409 = (_330 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _410 = (_330 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _424 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].y * _308) + _409) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].z * _308) + _410) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _426 = _424.x;
    float _448 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * _409) + (cbMtdParam._m0[26u].y * _308)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].z * _410) + (cbMtdParam._m0[26u].z * _308)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _451 = (isnan(_448) ? _426 : (isnan(_426) ? _448 : max(_426, _448))) - _398;
    float _4014 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _453 = _398 + 0.5;
    float _4025 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _466 = cbMtdParam._m0[17u].x * _308;
    float _467 = cos(_466);
    float _468 = sin(_466);
    vec4 _495 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_468 * cbMtdParam._m0[30u].w) + TEXCOORD.x) + (cbMtdParam._m0[21u].w * _308)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_467 * cbMtdParam._m0[31u].x) + TEXCOORD.y) + (cbMtdParam._m0[22u].x * _308)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _499 = _495.z;
    vec4 _511 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].y * _308) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].z * _308) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _515 = _511.z;
    float _518 = (isnan(_515) ? _499 : (isnan(_499) ? _515 : max(_499, _515))) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)));
    float _4041 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _522 = (_395 - _331) + (isnan(_519) ? _452 : (isnan(_452) ? _519 : max(_452, _519)));
    float _4057 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _524 = _523 * _393;
    float _4068 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _533 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _534 = _330 - _533;
    float _4079 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    vec4 _585 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[22u].w * _308) + (cbMtdParam._m0[30u].y * _468)) + (cbMtdParam._m0[34u].y * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].x * _308) + (cbMtdParam._m0[30u].z * _467)) + (cbMtdParam._m0[34u].z * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _609 = cbMtdParam._m0[37u].z * TEXCOORD_5.x;
    float _671 = ((((((_585.w + (-0.5)) * cbMtdParam._m0[43u].z) + (cbMtdParam._m0[39u].x * (_495.w + (-0.5)))) + (cbMtdParam._m0[39u].w * (_511.w + (-0.5)))) + (((_609 + cbMtdParam._m0[41u].y) * cos(cbMtdParam._m0[13u].x * _308)) * (texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].y * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].z * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[12u].w * _308) * (cbMtdParam._m0[40u].z + _609)) * (texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].y * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].z * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _704 = 1.0 - _331;
    float _709 = ((isnan(0.550000011920928955078125) ? _704 : (isnan(_704) ? 0.550000011920928955078125 : max(_704, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].w;
    float _712 = ((TEXCOORD_5.y * (-0.5)) * _709) + _709;
    float _716 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _712) + _712;
    float _729 = (((_671 + ((cbMtdParam._m0[36u].w - (cbMtdParam._m0[36u].w * TEXCOORD_5.y)) * _330)) + ((texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].y * TEXCOORD.x) + (cbMtdParam._m0[22u].y * _308)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].z * TEXCOORD.y) + (cbMtdParam._m0[22u].z * _308)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].y)) + ((sin(cbMtdParam._m0[21u].x * _308) * cbMtdParam._m0[38u].y) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _716;
    float _732 = (_729 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4100 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _742 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _746 = dot(vec4(_742 * _289, _742 * _290, _742 * _291, 0.0), vec4(_224, _225, _226, 0.0));
    float _4111 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _754 = exp2(log2((1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbMtdParam._m0[12u].y) * cbMtdParam._m0[12u].z);
    float _4122 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _759 = ((_524 + cbMtdParam._m0[9u].x) + (_535 * cbMtdParam._m0[10u].x)) + ((_733 * cbMtdParam._m0[11u].x) * _755);
    float _760 = ((_524 + cbMtdParam._m0[9u].y) + (_535 * cbMtdParam._m0[10u].y)) + ((_733 * cbMtdParam._m0[11u].y) * _755);
    float _761 = ((_524 + cbMtdParam._m0[9u].z) + (_535 * cbMtdParam._m0[10u].z)) + ((_733 * cbMtdParam._m0[11u].z) * _755);
    float _4133 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _762 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _772 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _775 = (_353 * (-0.87999999523162841796875)) * _772;
    float _778 = (((((1.0 - _759) - _762) * _533) + _759) + _772) + _775;
    float _781 = (((((1.0 - _760) - _762) * _533) + _760) + _772) + _775;
    float _784 = (((((1.0 - _761) - _762) * _533) + _761) + _772) + _775;
    float _785 = _330 * 0.01200000010430812835693359375;
    float _810 = (_330 * 0.300000011920928955078125) * texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].w * _308) + _785) + (cbMtdParam._m0[23u].w * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].x * _308) + _785) + (cbMtdParam._m0[24u].x * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4155 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _811 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _821 = (((1.0 - _778) * TEXCOORD_5.x) * _811) + _778;
    float _822 = (((1.0 - _781) * TEXCOORD_5.x) * _811) + _781;
    float _823 = (((1.0 - _784) * TEXCOORD_5.x) * _811) + _784;
    vec4 _859 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].y * _308) + (cbMtdParam._m0[29u].w * _468)) + (cbMtdParam._m0[28u].w * _409)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].z * _308) + (cbMtdParam._m0[30u].x * _467)) + (cbMtdParam._m0[29u].x * _410)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _862 = _859.y;
    float _872 = 1.0 - (_390 / cbMtdParam._m0[19u].x);
    float _876 = ((_859.x * TEXCOORD_8) * cbMtdParam._m0[18u].w) * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    float _879 = _862 * TEXCOORD_9;
    float _882 = ((isnan(cbMtdParam._m0[19u].y) ? _879 : (isnan(_879) ? cbMtdParam._m0[19u].y : max(_879, cbMtdParam._m0[19u].y))) - cbMtdParam._m0[19u].y) * cbMtdParam._m0[19u].z;
    float _883 = isnan(_882) ? _876 : (isnan(_876) ? _882 : max(_876, _882));
    float _4181 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _884 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _891 = (_884 * (1.0 - _821)) + _821;
    float _892 = (_884 * (1.0 - _822)) + _822;
    float _893 = (_884 * (1.0 - _823)) + _823;
    float _926 = exp2(log2(cbMtdParam._m0[15u].z * _704) * cbMtdParam._m0[17u].y);
    float _4192 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _927 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _928 = _927 * texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].w * _308) + (cbMtdParam._m0[28u].y * _704)) + (cbMtdParam._m0[29u].y * _409)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].x * _308) + (cbMtdParam._m0[28u].z * _704)) + (cbMtdParam._m0[29u].z * _410)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _931 = ((_927 - _928) * cbMtdParam._m0[18u].x) + _928;
    float _935 = _398 * TEXCOORD_10;
    float _942 = ((_935 * (1.0 - _891)) * _931) + _891;
    float _943 = ((_935 * (1.0 - _892)) * _931) + _892;
    float _944 = ((_935 * (1.0 - _893)) * _931) + _893;
    float _948 = 1.0 - (_390 / cbMtdParam._m0[18u].y);
    float _954 = (cbMtdParam._m0[18u].z * _862) * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
    float _958 = (_954 * (1.0 - _942)) + _942;
    float _959 = (_954 * (1.0 - _943)) + _943;
    float _960 = (_954 * (1.0 - _944)) + _944;
    float _965 = _347 / cbMtdParam._m0[15u].x;
    float _4208 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = (1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbMtdParam._m0[14u].w;
    float _972 = _347 + 0.20000000298023223876953125;
    float _974 = _972 * 9.0;
    float _4219 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _979 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) + cbMtdParam._m0[12u].x;
    float _982 = (_347 + 0.099999986588954925537109375) * 2.5;
    float _4230 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _987 = ((cbMtdParam._m0[14u].z - _979) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) + _979;
    float _988 = _958 + _523;
    float _4241 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _993 = ((0.3499999940395355224609375 - _987) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) + _987;
    float _994 = TEXCOORD_5.z * 0.5;
    float _1006 = (_347 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4252 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1011 = ((cbMtdParam._m0[17u].z - cbMtdParam._m0[20u].y) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) + cbMtdParam._m0[20u].y;
    float _1016 = (_1011 * (_328 + (-0.5))) + 0.5;
    float _1017 = (_1011 * (_329 + (-0.5))) + 0.5;
    float _4263 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1018 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    vec4 _1050 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[25u].w * TEXCOORD.z) + (cbMtdParam._m0[31u].w * _308)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].x * TEXCOORD.w) + (cbMtdParam._m0[32u].x * _308)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1058 = ((_511.x + (-0.5)) * 0.5) + _495.x;
    float _1059 = ((_511.y + (-0.5)) * 0.5) + _495.y;
    vec4 _1081 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].y * TEXCOORD.x) + (cbMtdParam._m0[24u].w * _308)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].z * TEXCOORD.y) + (cbMtdParam._m0[25u].x * _308)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1088 = _972 * 12.0;
    float _4274 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1090 = 1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)));
    float _1104 = cbMtdParam._m0[33u].y * TEXCOORD.x;
    float _1105 = cbMtdParam._m0[33u].z * TEXCOORD.y;
    vec4 _1118 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1104 + (cbMtdParam._m0[32u].w * _308)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1105 + (cbMtdParam._m0[33u].x * _308)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1139 = texture(sampler2D(M_Cutscene_Water_ocean4_PlanarReflection_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1104 + ((cbMtdParam._m0[26u].w * 0.4000000059604644775390625) * _535)) + (cbMtdParam._m0[33u].w * _308)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1105 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _535)) + (cbMtdParam._m0[34u].x * _308)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1153 = (((0.5 - _1058) * 0.10999999940395355224609375) + _1058) + (((((((_1081.z + (-0.5)) * cbMtdParam._m0[15u].w) * _1090) + (-1.0)) + _1118.x) + _1139.x) * cbMtdParam._m0[15u].y);
    float _1154 = (((0.5 - _1059) * 0.10999999940395355224609375) + _1059) + (((((((_1081.w + (-0.5)) * cbMtdParam._m0[15u].w) * _1090) + (-1.0)) + _1118.y) + _1139.y) * cbMtdParam._m0[15u].y);
    float _1159 = ((_1050.x - _1153) * _347) + _1153;
    float _1160 = ((_1050.y - _1154) * _347) + _1154;
    float _1161 = _347 * 0.5;
    float _4285 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1162 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _1175 = cbMtdParam._m0[17u].w - (cbMtdParam._m0[17u].w * _716);
    float _1184 = cbMtdParam._m0[20u].x - (cbMtdParam._m0[20u].x * TEXCOORD_5.y);
    float _1186 = _1184 - (_1184 * _1162);
    float _1190 = (((((((0.5 - _328) * 0.60000002384185791015625) + _328) - _1016) * _1018) + _1016) + (_1186 * (_585.x + (-0.5)))) + (((_1159 + (-0.5)) + ((0.5 - _1159) * _1162)) * _1175);
    float _1192 = (((((((0.5 - _329) * 0.60000002384185791015625) + _329) - _1017) * _1018) + _1017) + (_1186 * (_585.y + (-0.5)))) + (((_1160 + (-0.5)) + ((0.5 - _1160) * _1162)) * _1175);
    float _1202 = (((_994 * (0.5 - _1190)) + _1190) * 2.0) + (-1.0);
    float _1203 = (((_994 * (0.5 - _1192)) + _1192) * 2.0) + (-1.0);
    float _1204 = dot(vec2(_1202, _1203), vec2(_1202, _1203));
    float _4296 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1209 = sqrt(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))));
    float _1211 = _972 * 6.0;
    float _4307 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = cbMtdParam._m0[16u].x * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)));
    float _4318 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1215 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _1218 = ((1.0 - _1215) * _988) + _1215;
    uint _1234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1235 = _1234 + 5u;
    float _1246 = (-0.0) - _289;
    float _1247 = (-0.0) - _290;
    float _1248 = (-0.0) - _291;
    float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
    float _1256 = dot(vec3(_1252 * _1246, _1252 * _1247, _1252 * _1248), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1235]).x * 14u].xyz));
    float _1266 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1256 * 0.60000002384185791015625)) * 1.5);
    float _1279 = ((((0.959999978542327880859375 / exp2(log2((_1256 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1266) * 0.5) + _1266) * 0.079577468335628509521484375;
    float _1283 = fma(_1209, _224, fma(_1203, _230 * TANGENT.x, _1202 * _217));
    float _1286 = fma(_1209, _225, fma(_1203, _230 * TANGENT.y, _1202 * _218));
    float _1289 = fma(_1209, _226, fma(_1203, _230 * TANGENT.z, _1202 * _219));
    float _1293 = inversesqrt(dot(vec3(_1283, _1286, _1289), vec3(_1283, _1286, _1289)));
    float _1294 = _1293 * _1283;
    float _1295 = _1293 * _1286;
    float _1296 = _1293 * _1289;
    float _4329 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4340 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1298 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4362 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4373 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1353 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1353);
    float _1363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1353);
    float _1364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1353);
    float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
    float _1369 = _1362 * _1368;
    float _1370 = _1363 * _1368;
    float _1371 = _1364 * _1368;
    vec4 _1376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1378 = _1376.w;
    float _1383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1404 = fma(_1296, cbSceneParam._m0[5u].z, fma(_1295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1294));
    float _1407 = fma(_1296, cbSceneParam._m0[6u].z, fma(_1295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1294));
    float _1410 = fma(_1296, cbSceneParam._m0[7u].z, fma(_1295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1294));
    uint _1423 = _1234 + 9u;
    uint _1424 = _1423 + uint(cbMatDynParam._m0[0u].w);
    float _1430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * cbInstanceData._m0[_1424].x;
    float _1431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * cbInstanceData._m0[_1424].y;
    float _1432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * cbInstanceData._m0[_1424].z;
    float _4384 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    float _1433 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1434 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
    float _1435 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    vec4 _1444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1383, cbSceneParam._m0[86u].y * _1384));
    float _1447 = _1444.x * TEXCOORD_5.w;
    float _1451 = abs(dot(vec3(_1369, _1370, _1371), vec3(_1294, _1295, _1296)));
    float _4417 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1457 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
    float _1458 = cbMtdParam._m0[16u].z + (-0.039999999105930328369140625);
    float _4428 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
    float _1461 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * _1457;
    float _1462 = _1461 + 0.039999999105930328369140625;
    float _1466 = 10.0 / (_1313 + 10.0);
    vec4 _1481 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2(((_1466 * cbMtdParam._m0[19u].w) * dot(vec3(_1294, _1295, _1296), vec3(1.0, 0.0, 0.0))) + (_1383 / cbSceneParam._m0[86u].x), 1.0 - (_1384 / cbSceneParam._m0[86u].y)));
    float _1517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1550 = fma(_1525, cbModelParam._m0[26u].z, fma(_1521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1517));
        float _1554 = fma(_1525, cbModelParam._m0[27u].z, fma(_1521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1517));
        float _1558 = fma(_1525, cbModelParam._m0[28u].z, fma(_1521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1517));
        float _1580 = _1517 + _1294;
        float _1581 = _1521 + _1295;
        float _1582 = _1525 + _1296;
        float _1592 = fma(_1582, cbModelParam._m0[26u].z, fma(_1581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1580)) - _1550;
        float _1593 = fma(_1582, cbModelParam._m0[27u].z, fma(_1581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1580)) - _1554;
        float _1594 = fma(_1582, cbModelParam._m0[28u].z, fma(_1581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1580)) - _1558;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1610 = ((_1598 * _1592) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1550 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1598 * _1593) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1554 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1594) / cbModelParam._m0[34u].z) + ((((((_1558 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1649 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1636.x + (-0.5));
        float _1672 = _1670 * (_1636.y + (-0.5));
        float _1673 = _1670 * (_1636.z + (-0.5));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1678 = ((_1615.x + (-0.5)) * 0.5) * _1649;
        float _1680 = ((_1622.x + (-0.5)) * 0.5) * _1656;
        float _1682 = ((_1629.x + (-0.5)) * 0.5) * _1663;
        float _1683 = dot(vec3(_1678, _1680, _1682), vec3(_1678, _1680, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1697 = (dot(vec3(_1294, _1295, _1296), vec3(_1688 * _1678, _1688 * _1680, _1688 * _1682)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1707 = sqrt(((_1680 * _1680) + (_1678 * _1678)) + (_1682 * _1682)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4476 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1709 + 1.0))) + _1714) * _1674;
        float _1725 = ((_1615.y + (-0.5)) * 0.5) * _1649;
        float _1727 = ((_1622.y + (-0.5)) * 0.5) * _1656;
        float _1729 = ((_1629.y + (-0.5)) * 0.5) * _1663;
        float _1730 = dot(vec3(_1725, _1727, _1729), vec3(_1725, _1727, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_1294, _1295, _1296), vec3(_1735 * _1725, _1735 * _1727, _1735 * _1729)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1727 * _1727) + (_1725 * _1725)) + (_1729 * _1729)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4509 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1754 + 1.0))) + _1759) * _1675;
        float _1770 = ((_1615.z + (-0.5)) * 0.5) * _1649;
        float _1772 = ((_1622.z + (-0.5)) * 0.5) * _1656;
        float _1774 = ((_1629.z + (-0.5)) * 0.5) * _1663;
        float _1775 = dot(vec3(_1770, _1772, _1774), vec3(_1770, _1772, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1294, _1295, _1296), vec3(_1780 * _1770, _1780 * _1772, _1780 * _1774)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1772 * _1772) + (_1770 * _1770)) + (_1774 * _1774)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4542 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1799 + 1.0))) + _1804) * _1676;
        _1821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _2113;
    float _2114;
    float _2115;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1846 = fma(_1525, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1517));
        float _1850 = fma(_1525, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1517));
        float _1854 = fma(_1525, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1517));
        float _1876 = _1517 + _1294;
        float _1877 = _1521 + _1295;
        float _1878 = _1525 + _1296;
        float _1888 = fma(_1878, cbModelParam._m0[30u].z, fma(_1877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1876)) - _1846;
        float _1889 = fma(_1878, cbModelParam._m0[31u].z, fma(_1877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1876)) - _1850;
        float _1890 = fma(_1878, cbModelParam._m0[32u].z, fma(_1877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1876)) - _1854;
        float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
        float _1906 = ((_1894 * _1888) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1846 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1907 = ((_1894 * _1889) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1850 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1908 = ((_1894 * _1890) / cbModelParam._m0[35u].z) + ((((((_1854 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1910 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1906, _1907, _1908), 0.0);
        vec4 _1917 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1906, _1907, _1908), 0.0);
        vec4 _1924 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1906, _1907, _1908), 0.0);
        vec4 _1931 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1906, _1907, _1908), 0.0);
        float _1943 = exp2((_1910.w + (-0.5)) * 20.0) * 2.0;
        float _1950 = exp2((_1917.w + (-0.5)) * 20.0) * 2.0;
        float _1957 = exp2((_1924.w + (-0.5)) * 20.0) * 2.0;
        float _1964 = exp2((_1931.w + (-0.5)) * 20.0) * 2.0;
        float _1965 = _1964 * (_1931.x + (-0.5));
        float _1966 = _1964 * (_1931.y + (-0.5));
        float _1967 = _1964 * (_1931.z + (-0.5));
        float _1968 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1969 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1970 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1972 = ((_1910.x + (-0.5)) * 0.5) * _1943;
        float _1974 = ((_1917.x + (-0.5)) * 0.5) * _1950;
        float _1976 = ((_1924.x + (-0.5)) * 0.5) * _1957;
        float _1977 = dot(vec3(_1972, _1974, _1976), vec3(_1972, _1974, _1976));
        float _1982 = (_1977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1977);
        float _1990 = (dot(vec3(_1294, _1295, _1296), vec3(_1982 * _1972, _1982 * _1974, _1982 * _1976)) + 1.0) * 0.5;
        float _4583 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1999 = sqrt(((_1974 * _1974) + (_1972 * _1972)) + (_1976 * _1976)) / (_1968 + 9.9999997473787516355514526367188e-06);
        float _4594 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2001 = _2000 * 2.0;
        float _2005 = (1.0 - _2000) / (_2000 + 1.0);
        float _4605 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2015 = ((((1.0 - _2006) * (_2001 + 2.0)) * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2001 + 1.0))) + _2006) * _1968;
        float _2017 = ((_1910.y + (-0.5)) * 0.5) * _1943;
        float _2019 = ((_1917.y + (-0.5)) * 0.5) * _1950;
        float _2021 = ((_1924.y + (-0.5)) * 0.5) * _1957;
        float _2022 = dot(vec3(_2017, _2019, _2021), vec3(_2017, _2019, _2021));
        float _2027 = (_2022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2022);
        float _2035 = (dot(vec3(_1294, _1295, _1296), vec3(_2027 * _2017, _2027 * _2019, _2027 * _2021)) + 1.0) * 0.5;
        float _4616 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2044 = sqrt(((_2019 * _2019) + (_2017 * _2017)) + (_2021 * _2021)) / (_1969 + 9.9999997473787516355514526367188e-06);
        float _4627 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2046 = _2045 * 2.0;
        float _2050 = (1.0 - _2045) / (_2045 + 1.0);
        float _4638 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2060 = ((((1.0 - _2051) * (_2046 + 2.0)) * exp2(log2(isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2046 + 1.0))) + _2051) * _1969;
        float _2062 = ((_1910.z + (-0.5)) * 0.5) * _1943;
        float _2064 = ((_1917.z + (-0.5)) * 0.5) * _1950;
        float _2066 = ((_1924.z + (-0.5)) * 0.5) * _1957;
        float _2067 = dot(vec3(_2062, _2064, _2066), vec3(_2062, _2064, _2066));
        float _2072 = (_2067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2067);
        float _2080 = (dot(vec3(_1294, _1295, _1296), vec3(_2072 * _2062, _2072 * _2064, _2072 * _2066)) + 1.0) * 0.5;
        float _4649 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2089 = sqrt(((_2064 * _2064) + (_2062 * _2062)) + (_2066 * _2066)) / (_1970 + 9.9999997473787516355514526367188e-06);
        float _4660 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2091 = _2090 * 2.0;
        float _2095 = (1.0 - _2090) / (_2090 + 1.0);
        float _4671 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2105 = ((((1.0 - _2096) * (_2091 + 2.0)) * exp2(log2(isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2091 + 1.0))) + _2096) * _1970;
        _2113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)));
        _2114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)));
        _2115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0)));
    }
    else
    {
        _2113 = 0.0;
        _2114 = 0.0;
        _2115 = 0.0;
    }
    float _2125 = (cbModelParam._m0[1u].x * (_2113 - _1821)) + _1821;
    float _2126 = (cbModelParam._m0[1u].x * (_2114 - _1822)) + _1822;
    float _2127 = (cbModelParam._m0[1u].x * (_2115 - _1823)) + _1823;
    float _2148 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2151 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2154 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2125));
    float _2159 = (0.959999978542327880859375 - _1461) * _1447;
    vec4 _2164 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1383, _1384));
    float _2166 = _2164.w;
    float _2178 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2166);
    float _2179 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2166);
    float _2180 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2166);
    uvec4 _2183 = floatBitsToUint(cbInstanceData._m0[_1235]);
    uint _2185 = _2183.x * 14u;
    uint _2186 = _2185 + 13u;
    float _2193 = _1447 + (-1.0);
    float _2198 = (cbLight._m0[_2186].x * _2193) + 1.0;
    float _2199 = (cbLight._m0[_2186].y * _2193) + 1.0;
    float _2200 = (cbLight._m0[_2186].z * _2193) + 1.0;
    float _2201 = (cbLight._m0[_2186].w * _2193) + 1.0;
    uint _2202 = _2185 + 5u;
    float _2208 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2212 = _2185 + 4u;
    float _2221 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2225 = _2185 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_1294, _1295, _1296));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_1294, _1295, _1296));
    float _4722 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4733 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2202].x * _2208) * _2246) + (((cbLight._m0[_2212].x * _2178) * _2221) * _2244);
    float _2254 = ((_2208 * cbLight._m0[_2202].y) * _2246) + (((cbLight._m0[_2212].y * _2179) * _2221) * _2244);
    float _2255 = ((_2208 * cbLight._m0[_2202].z) * _2246) + (((cbLight._m0[_2212].z * _2180) * _2221) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2185 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2261)
    {
        _2262 = _2253;
        _2264 = _2254;
        _2266 = _2255;
    }
    else
    {
        uint _2270 = _2185 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2185 + 2u].xyz), vec3(_1294, _1295, _1296)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4744 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2289 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2253;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2254;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2255;
    }
    bool _2269 = _2259.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2269)
    {
        _2299 = _2262;
        _2301 = _2264;
        _2303 = _2266;
    }
    else
    {
        uint _2463 = _2185 + 7u;
        float _2479 = (dot(vec3(cbLight._m0[_2185 + 3u].xyz), vec3(_1294, _1295, _1296)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4760 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2482 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2299 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2262;
        _2301 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2264;
        _2303 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2266;
    }
    uint _2306 = _2185 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _1298) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2185].x + _1369;
    float _2322 = cbLight._m0[_2185].y + _1370;
    float _2323 = cbLight._m0[_2185].z + _1371;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2185].xyz));
    float _4776 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2335 = dot(vec3(_1294, _1295, _1296), vec3(_1369, _1370, _1371));
    float _4787 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2339 = dot(vec3(_1294, _1295, _1296), vec3(_2328, _2329, _2330));
    float _4798 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2328, _2329, _2330));
    float _4809 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2320 * _2320;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2361 = (exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2362 = 1.0 - _2320;
    float _2373 = (0.5 / (((_2338 * ((_2334 * _2362) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2362) + _2320) * _2334))) * _2334;
    float _4820 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2375 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    uint _2389 = _2185 + 9u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _1298) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2225].x + _1369;
    float _2403 = cbLight._m0[_2225].y + _1370;
    float _2404 = cbLight._m0[_2225].z + _1371;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2225].xyz));
    float _4831 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2416 = dot(vec3(_1294, _1295, _1296), vec3(_2409, _2410, _2411));
    float _4842 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2409, _2410, _2411));
    float _4853 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2401 * _2401;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2401;
    float _2448 = (0.5 / (((_2338 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2438) + _2401) * _2415))) * _2415;
    float _4864 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    float _2460 = (((_2437 * cbLight._m0[_2389].x) * _2450) * _2208) + ((((cbLight._m0[_2306].x * _2178) * _2361) * _2375) * _2221);
    float _2461 = (((_2437 * cbLight._m0[_2389].y) * _2450) * _2208) + ((((cbLight._m0[_2306].y * _2179) * _2361) * _2375) * _2221);
    float _2462 = (((_2437 * cbLight._m0[_2389].z) * _2450) * _2208) + ((((cbLight._m0[_2306].z * _2180) * _2361) * _2375) * _2221);
    float _2492;
    float _2494;
    float _2496;
    if (_2261)
    {
        _2492 = _2460;
        _2494 = _2461;
        _2496 = _2462;
    }
    else
    {
        uint _2498 = _2185 + 2u;
        uint _2502 = _2185 + 10u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _1298) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _1369;
        float _2519 = cbLight._m0[_2498].y + _1370;
        float _2520 = cbLight._m0[_2498].z + _1371;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2498].xyz));
        float _4875 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2532 = dot(vec3(_1294, _1295, _1296), vec3(_2525, _2526, _2527));
        float _4886 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4897 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2554 = 1.0 - _2517;
        float _2564 = (0.5 / (((_2338 * ((_2531 * _2554) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2554) + _2517) * _2531))) * _2531;
        float _4908 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2492 = (((_2553 * cbLight._m0[_2502].x) * _2566) * _2567) + _2460;
        _2494 = (((_2553 * cbLight._m0[_2502].y) * _2566) * _2567) + _2461;
        _2496 = (((_2553 * cbLight._m0[_2502].z) * _2566) * _2567) + _2462;
    }
    float _2577;
    float _2579;
    float _2581;
    if (_2269)
    {
        _2577 = _2492;
        _2579 = _2494;
        _2581 = _2496;
    }
    else
    {
        uint _2588 = _2185 + 3u;
        uint _2592 = _2185 + 11u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _1298) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _1369;
        float _2609 = cbLight._m0[_2588].y + _1370;
        float _2610 = cbLight._m0[_2588].z + _1371;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2588].xyz));
        float _4924 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2622 = dot(vec3(_1294, _1295, _1296), vec3(_2615, _2616, _2617));
        float _4935 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4946 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2643 = (exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2644 = 1.0 - _2607;
        float _2654 = (0.5 / (((_2338 * ((_2621 * _2644) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2644) + _2607) * _2621))) * _2621;
        float _4957 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2577 = (((_2643 * cbLight._m0[_2592].x) * _2656) * _2657) + _2492;
        _2579 = (((_2643 * cbLight._m0[_2592].y) * _2656) * _2657) + _2494;
        _2581 = (((_2643 * cbLight._m0[_2592].z) * _2656) * _2657) + _2496;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2183.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1384) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _1383) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
        }
        else
        {
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_25_pred;
                float frontier_phi_25_pred_1;
                float frontier_phi_25_pred_2;
                float frontier_phi_25_pred_3;
                float frontier_phi_25_pred_4;
                float frontier_phi_25_pred_5;
                if (_3114)
                {
                    frontier_phi_25_pred = _3099;
                    frontier_phi_25_pred_1 = _3103;
                    frontier_phi_25_pred_2 = _3101;
                    frontier_phi_25_pred_3 = _3098;
                    frontier_phi_25_pred_4 = _3102;
                    frontier_phi_25_pred_5 = _3100;
                }
                else
                {
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    uint _3338;
                    _3332 = _3098;
                    _3333 = _3099;
                    _3334 = _3100;
                    _3335 = _3101;
                    _3336 = _3102;
                    _3337 = _3103;
                    _3338 = _3113;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3342 = uint(findLSB(_3338)) + (_3104 << 5u);
                        uint _3339 = (_3338 + 4294967295u) & _3338;
                        uint _3344 = _3342 * 48u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3364 = (_3342 * 48u) + 4u;
                        vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3383 = (_3342 * 48u) + 8u;
                        vec3 _3394 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x));
                        float _3398 = _3358.x - _2707;
                        float _3399 = _3358.y - _2708;
                        float _3400 = _3358.z - _2709;
                        float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                        float _3404 = inversesqrt(_3401);
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3408 = dot(vec3(_1404, _1407, _1410), vec3(_3405, _3406, _3407));
                        float _3413 = 1.0 - (_3401 * _3358.w);
                        float _4983 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3415 = sqrt(_3401) * _3377.w;
                        float _3418 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3408) + _3419;
                        float _3425 = _3415 * _3415;
                        float _3429 = ((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3414) / ((_3425 * 0.699999988079071044921875) + 1.0);
                        float _3433 = (-0.0) - _2707;
                        float _3434 = (-0.0) - _2708;
                        float _3435 = (-0.0) - _2709;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3450 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                        float _3452 = 1.0 - sqrt(_1298);
                        float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3450 * _3450))));
                        float _3460 = _3459 * _3459;
                        float _3461 = _3460 * _3460;
                        float _3462 = _3440 + _3405;
                        float _3463 = _3441 + _3406;
                        float _3464 = _3442 + _3407;
                        float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                        float _3472 = dot(vec3(_1404, _1407, _1410), vec3(_3440, _3441, _3442));
                        float _4999 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3476 = dot(vec3(_1404, _1407, _1410), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                        float _5010 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                        float _3484 = _3418 * _3460;
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3408) + _3485;
                        float _5021 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3490 = 1.0 - _3460;
                        float _3500 = (0.5 / (((_3489 * ((_3475 * _3490) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3460) * _3475))) * _3489;
                        float _5032 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3511 = (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3483 * _3483) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125))) * _3414;
                        _3250 = (_3429 * _3377.x) + _3335;
                        _3251 = (_3429 * _3377.y) + _3336;
                        _3252 = (_3429 * _3377.z) + _3337;
                        _3247 = (_3511 * _3394.x) + _3332;
                        _3248 = (_3511 * _3394.y) + _3333;
                        _3249 = (_3511 * _3394.z) + _3334;
                        if (_3339 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3332 = _3247;
                            _3333 = _3248;
                            _3334 = _3249;
                            _3335 = _3250;
                            _3336 = _3251;
                            _3337 = _3252;
                            _3338 = _3339;
                        }
                    }
                    frontier_phi_25_pred = _3248;
                    frontier_phi_25_pred_1 = _3252;
                    frontier_phi_25_pred_2 = _3250;
                    frontier_phi_25_pred_3 = _3247;
                    frontier_phi_25_pred_4 = _3251;
                    frontier_phi_25_pred_5 = _3249;
                }
                _2895 = frontier_phi_25_pred;
                _2903 = frontier_phi_25_pred_1;
                _2899 = frontier_phi_25_pred_2;
                _2893 = frontier_phi_25_pred_3;
                _2901 = frontier_phi_25_pred_4;
                _2897 = frontier_phi_25_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2893;
                    _3099 = _2895;
                    _3100 = _2897;
                    _3101 = _2899;
                    _3102 = _2901;
                    _3103 = _2903;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
        }
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.z;
        uint _2909 = (_2907 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2909) & _2753) == 0u)
        {
            _3066 = _2892;
            _3068 = _2894;
            _3070 = _2896;
            _3072 = _2898;
            _3074 = _2900;
            _3076 = _2902;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _3092 = _3091 * _2707;
            float _3093 = _3091 * _2708;
            float _3094 = _3091 * _2709;
            float frontier_phi_19_20_ladder;
            float frontier_phi_19_20_ladder_1;
            float frontier_phi_19_20_ladder_2;
            float frontier_phi_19_20_ladder_3;
            float frontier_phi_19_20_ladder_4;
            float frontier_phi_19_20_ladder_5;
            if (_2909 < ((_2907 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3315 = _2892;
                float _3316 = _2894;
                float _3317 = _2896;
                float _3318 = _2898;
                float _3319 = _2900;
                float _3320 = _2902;
                uint _3321 = _2909;
                uint _3330;
                bool _3331;
                for (;;)
                {
                    _3330 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                    _3331 = _3330 == 0u;
                    float frontier_phi_37_pred;
                    float frontier_phi_37_pred_1;
                    float frontier_phi_37_pred_2;
                    float frontier_phi_37_pred_3;
                    float frontier_phi_37_pred_4;
                    float frontier_phi_37_pred_5;
                    if (_3331)
                    {
                        frontier_phi_37_pred = _3320;
                        frontier_phi_37_pred_1 = _3319;
                        frontier_phi_37_pred_2 = _3318;
                        frontier_phi_37_pred_3 = _3317;
                        frontier_phi_37_pred_4 = _3316;
                        frontier_phi_37_pred_5 = _3315;
                    }
                    else
                    {
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3584 = _3315;
                        float _3585 = _3316;
                        float _3586 = _3317;
                        float _3587 = _3318;
                        float _3588 = _3319;
                        float _3589 = _3320;
                        uint _3590 = _3330;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3321 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2709, _3708.z, fma(_2708, _3708.y, _3708.x * _2707)) + _3708.w;
                            _3721 = !((fma(_2709, _3689.z, fma(_2708, _3689.y, _3689.x * _2707)) + _3689.w) <= 0.0);
                            float frontier_phi_46_pred;
                            float frontier_phi_46_pred_1;
                            float frontier_phi_46_pred_2;
                            float frontier_phi_46_pred_3;
                            float frontier_phi_46_pred_4;
                            float frontier_phi_46_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2707;
                                float _3749 = _3616.y - _2708;
                                float _3750 = _3616.z - _2709;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _5043 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_1404, _1407, _1410))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2709, _3659.z, fma(_2708, _3659.y, _3659.x * _2707)) + _3659.w) / _3720;
                                float _3780 = (fma(_2709, _3674.z, fma(_2708, _3674.y, _3674.x * _2707)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _5059 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3800 = 1.0 - sqrt(_1298);
                                float _3807 = sqrt(1.0 - ((1.0 - (_3800 * _3800)) * (1.0 - (_3798 * _3798))));
                                float _3808 = _3807 * _3807;
                                float _3809 = _3808 * _3808;
                                float _3810 = _3755 - _3092;
                                float _3811 = _3756 - _3093;
                                float _3812 = _3757 - _3094;
                                float _3816 = inversesqrt(dot(vec3(_3810, _3811, _3812), vec3(_3810, _3811, _3812)));
                                float _3820 = dot(vec3(_1404, _1407, _1410), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _5070 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3824 = dot(vec3(_1404, _1407, _1410), vec3(_3816 * _3810, _3816 * _3811, _3816 * _3812));
                                float _5081 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3831 = ((_3827 * _3827) * (_3809 + (-1.0))) + 1.0;
                                float _3832 = _3768 * _3808;
                                float _3833 = _3832 * _3832;
                                float _3839 = ((1.0 - _3833) * dot(vec3(_1404, _1407, _1410), vec3(_3755, _3756, _3757))) + _3833;
                                float _5092 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3841 = 1.0 - _3808;
                                float _3851 = (0.5 / (((_3840 * ((_3823 * _3841) + _3808)) + 9.9999999392252902907785028219223e-09) + (((_3840 * _3841) + _3808) * _3823))) * _3840;
                                float _5103 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3861 = (_3785 * _3762) * (((_3809 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3831 * _3831) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_46_pred = _3786 * _3632.z;
                                frontier_phi_46_pred_1 = _3786 * _3632.y;
                                frontier_phi_46_pred_2 = _3786 * _3632.x;
                                frontier_phi_46_pred_3 = _3861 * _3644.z;
                                frontier_phi_46_pred_4 = _3861 * _3644.y;
                                frontier_phi_46_pred_5 = _3861 * _3644.x;
                            }
                            else
                            {
                                frontier_phi_46_pred = 0.0;
                                frontier_phi_46_pred_1 = 0.0;
                                frontier_phi_46_pred_2 = 0.0;
                                frontier_phi_46_pred_3 = 0.0;
                                frontier_phi_46_pred_4 = 0.0;
                                frontier_phi_46_pred_5 = 0.0;
                            }
                            _3870 = frontier_phi_46_pred;
                            _3869 = frontier_phi_46_pred_1;
                            _3868 = frontier_phi_46_pred_2;
                            _3867 = frontier_phi_46_pred_3;
                            _3866 = frontier_phi_46_pred_4;
                            _3865 = frontier_phi_46_pred_5;
                            _3563 = _3868 + _3587;
                            _3564 = _3869 + _3588;
                            _3565 = _3870 + _3589;
                            _3560 = _3865 + _3584;
                            _3561 = _3866 + _3585;
                            _3562 = _3867 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3560;
                                _3585 = _3561;
                                _3586 = _3562;
                                _3587 = _3563;
                                _3588 = _3564;
                                _3589 = _3565;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_37_pred = _3565;
                        frontier_phi_37_pred_1 = _3564;
                        frontier_phi_37_pred_2 = _3563;
                        frontier_phi_37_pred_3 = _3562;
                        frontier_phi_37_pred_4 = _3561;
                        frontier_phi_37_pred_5 = _3560;
                    }
                    _3077 = frontier_phi_37_pred;
                    _3075 = frontier_phi_37_pred_1;
                    _3073 = frontier_phi_37_pred_2;
                    _3071 = frontier_phi_37_pred_3;
                    _3069 = frontier_phi_37_pred_4;
                    _3067 = frontier_phi_37_pred_5;
                    uint _3322 = _3321 + 1u;
                    if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3315 = _3067;
                        _3316 = _3069;
                        _3317 = _3071;
                        _3318 = _3073;
                        _3319 = _3075;
                        _3320 = _3077;
                        _3321 = _3322;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_19_20_ladder = _3067;
                frontier_phi_19_20_ladder_1 = _3077;
                frontier_phi_19_20_ladder_2 = _3075;
                frontier_phi_19_20_ladder_3 = _3073;
                frontier_phi_19_20_ladder_4 = _3071;
                frontier_phi_19_20_ladder_5 = _3069;
            }
            else
            {
                frontier_phi_19_20_ladder = _2892;
                frontier_phi_19_20_ladder_1 = _2902;
                frontier_phi_19_20_ladder_2 = _2900;
                frontier_phi_19_20_ladder_3 = _2898;
                frontier_phi_19_20_ladder_4 = _2896;
                frontier_phi_19_20_ladder_5 = _2894;
            }
            _3066 = frontier_phi_19_20_ladder;
            _3068 = frontier_phi_19_20_ladder_5;
            _3070 = frontier_phi_19_20_ladder_4;
            _3072 = frontier_phi_19_20_ladder_3;
            _3074 = frontier_phi_19_20_ladder_2;
            _3076 = frontier_phi_19_20_ladder_1;
        }
        float _3081 = isnan(1.0) ? _1447 : (isnan(_1447) ? 1.0 : min(_1447, 1.0));
        _2766 = (_3081 * _3072) + _2299;
        _2768 = (_3081 * _3074) + _2301;
        _2770 = (_3081 * _3076) + _2303;
        _2772 = ((_3066 * 0.039999999105930328369140625) * _3081) + _2577;
        _2774 = ((_3068 * 0.039999999105930328369140625) * _3081) + _2579;
        _2776 = ((_3070 * 0.039999999105930328369140625) * _3081) + _2581;
    }
    else
    {
        _2766 = _2299;
        _2768 = _2301;
        _2770 = _2303;
        _2772 = _2577;
        _2774 = _2579;
        _2776 = _2581;
    }
    float _2797 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2798 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2799 = cbSceneParam._m0[86u].x * ((_1383 / cbSceneParam._m0[86u].x) + ((_1466 * 0.449999988079071044921875) * dot(vec3(_1294, _1295, _1296), vec3(_217, _218, _219))));
    float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
    float _2801 = isnan(_2798) ? _1384 : (isnan(_1384) ? _2798 : min(_1384, _2798));
    vec4 _2803 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2800, _2801), 0.0);
    float _2805 = _2803.x;
    bool _2825 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2805)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2805))) > _1313;
    float _2826 = _2825 ? _2800 : _1383;
    float _2827 = _2825 ? _2801 : _1384;
    vec4 _2829 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2826, _2827));
    vec4 _2834 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2826, _2827));
    float _2836 = _2834.x;
    bool _2841 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2850 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2856 = (_2841 ? (_2850 / (cbSceneParam._m0[2u].x - _2836)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2836))) - _1313;
    float _2858 = cbMtdParam._m0[41u].w + cbMtdParam._m0[35u].w;
    float _2859 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _2860 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    bool _2866 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2870 = (isnan(_2856) ? 0.0 : (isnan(0.0) ? _2856 : max(0.0, _2856))) * (-1.44269502162933349609375);
    float _5134 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
    float _5145 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
    float _5156 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    float _2993;
    float _2994;
    float _2995;
    if ((1.0 - _1218) > 0.00999999977648258209228515625)
    {
        vec4 _2914 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2826, _2827), 0.0);
        float _2916 = _2914.x;
        float _2922 = (_2841 ? (_2850 / (cbSceneParam._m0[2u].x - _2916)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2916))) - _1313;
        uint _2928 = floatBitsToUint(cbInstanceData._m0[_1235]).x * 14u;
        uint _2934 = _2928 + 4u;
        float _2943 = dot(vec3(cbLight._m0[_2928].xyz), vec3(_224, _225, _226));
        float _2950 = dot(vec3((-0.0) - _1369, (-0.0) - _1370, (-0.0) - _1371), vec3((-0.0) - _224, (-0.0) - _225, (-0.0) - _226));
        float _2955 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2943 : (isnan(_2943) ? 0.001000000047497451305389404296875 : max(_2943, 0.001000000047497451305389404296875)))) + 1.0;
        float _2957 = (-0.0) - ((isnan(_2922) ? 0.0 : (isnan(0.0) ? _2922 : max(0.0, _2922))) * _2955);
        _2993 = _2866 ? 0.0 : ((((_1279 * cbMtdParam._m0[35u].w) * cbLight._m0[_2934].x) / ((_2955 * _2858) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2858 * 1.44269502162933349609375) * _2957)));
        _2994 = _2866 ? 0.0 : ((((_1279 * cbMtdParam._m0[36u].x) * cbLight._m0[_2934].y) / ((_2955 * _2859) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2859 * 1.44269502162933349609375) * _2957)));
        _2995 = _2866 ? 0.0 : ((((_1279 * cbMtdParam._m0[36u].y) * cbLight._m0[_2934].z) / ((_2955 * _2860) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2860 * 1.44269502162933349609375) * _2957)));
    }
    else
    {
        _2993 = 0.0;
        _2994 = 0.0;
        _2995 = 0.0;
    }
    float _3012 = 0.959999978542327880859375 - (_1457 * 0.959999978542327880859375);
    float _3013 = (_2993 + ((exp2(_2870 * (_2866 ? 0.0 : _2858)) * _2829.x) * cbSceneParam._m0[72u].w)) * _3012;
    float _3014 = (_2994 + ((exp2(_2870 * (_2866 ? 0.0 : _2859)) * _2829.y) * cbSceneParam._m0[72u].w)) * _3012;
    float _3015 = (_2995 + ((exp2(_2870 * (_2866 ? 0.0 : _2860)) * _2829.z) * cbSceneParam._m0[72u].w)) * _3012;
    float _3023 = (_3013 + ((_2772 + ((_1481.x * _1462) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_2766 + (_2159 * (isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)))))) - _3013) * _1218);
    float _3025 = (_3014 + ((_2774 + ((_1481.y * _1462) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0))) * (_2768 + (_2159 * (isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)))))) - _3014) * _1218);
    float _3027 = (_3015 + ((_2776 + ((_1481.z * _1462) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0))) * (_2770 + (_2159 * (isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0)))))) - _3015) * _1218);
    float _3032 = cbInstanceData._m0[_1234 + 6u].w * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)));
    float _3037 = _1383 / cbSceneParam._m0[86u].x;
    float _3038 = _1384 / cbSceneParam._m0[86u].y;
    vec4 _3052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, (log2((isnan(cbSceneParam._m0[77u].w) ? _1313 : (isnan(_1313) ? cbSceneParam._m0[77u].w : min(_1313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3054 = _3052.x;
    float _3055 = _3052.y;
    float _3056 = _3052.z;
    float _3057 = _3052.w;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_1313 > cbSceneParam._m0[78u].w)
    {
        float _3119 = isnan(_1313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1313 : min(cbSceneParam._m0[80u].w, _1313));
        float _3120 = _3119 / _1313;
        float _3131 = _3120 * _1362;
        float _3132 = _1363 * _3120;
        float _3133 = (-0.0) - _3132;
        float _3134 = _3120 * _1364;
        float _3136 = (cbSceneParam._m0[77u].w * _3133) / _3119;
        float _3137 = _3136 + cbSceneParam._m0[79u].w;
        float _3138 = cbSceneParam._m0[79u].w - _3132;
        float _3144 = sqrt(((_3131 * _3131) + (_3132 * _3132)) + (_3134 * _3134));
        float _3147 = (1.0 - (cbSceneParam._m0[77u].w / _3119)) * _3144;
        float _3153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3154 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3516;
        if (abs((_3133 - _3136) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3516 = ((((_3137 > 0.0) ? exp2(_3153 * _3137) : (2.0 - exp2(_3154 * _3137))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3147;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3138) ? _3137 : (isnan(_3137) ? _3138 : max(_3137, _3138));
            float _3274 = isnan(_3138) ? _3137 : (isnan(_3137) ? _3138 : min(_3137, _3138));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3516 = ((abs(_3144 / _3133) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3153 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3153 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3154 * _3283) - exp2(_3154 * _3284)) * _3272))) + (_3147 * cbSceneParam._m0[80u].z);
        }
        vec4 _3518 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, 1.0), 0.0);
        float _3527 = exp2((_3516 * (-1.44269502162933349609375)) * (1.0 - _3518.w));
        float _3528 = log2(_3527);
        float _3544 = log2(_3057);
        _3155 = (exp2(_3544 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].x)) * _3518.x) / cbSceneParam._m0[78u].x)) + _3054;
        _3157 = (exp2(_3544 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].y)) * _3518.y) / cbSceneParam._m0[78u].y)) + _3055;
        _3159 = (exp2(_3544 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].z)) * _3518.z) / cbSceneParam._m0[78u].z)) + _3056;
        _3161 = _3527 * _3057;
    }
    else
    {
        _3155 = _3054;
        _3157 = _3055;
        _3159 = _3056;
        _3161 = _3057;
    }
    bool _3554;
    float _3217;
    vec4 _3220;
    float _3222;
    vec4 _3224;
    float _3232;
    float _3233;
    float _3234;
    float _3235;
    bool _3246;
    for (;;)
    {
        bool _3173 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3175 = log2(_3161);
        float _3182 = exp2(_3175 * cbSceneParam._m0[78u].x) * _3023;
        float _3183 = exp2(_3175 * cbSceneParam._m0[78u].y) * _3025;
        float _3184 = exp2(_3175 * cbSceneParam._m0[78u].z) * _3027;
        vec4 _3192 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1383, _1384));
        float _3194 = _3192.x;
        float _3215 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3194)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3194))) - _1313) * 3.0;
        float _5222 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        _3217 = _3032 * (isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0)));
        float _3218 = _1378 + (-0.5);
        _3220 = cbMtdParam._m0[1u];
        _3222 = _3220.y * _3218;
        _3224 = cbMatDynParam._m0[0u];
        float _3231 = (roundEven(_3224.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3232 = _3231 * (_3173 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3155)));
        _3233 = _3231 * (_3173 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3157)));
        _3234 = _3231 * (_3173 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3159)));
        _3235 = _3218 * 0.999000012874603271484375;
        _3246 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3246)
        {
            if ((cbInstanceData._m0[_1234 + 7u].x + _3235) < 0.5)
            {
                _3554 = true;
                break;
            }
        }
        uint _3307 = _1423 + uint(_3224.w);
        if ((cbInstanceData._m0[_3307].w < 1.0) && ((cbInstanceData._m0[_3307].w + _3235) < 0.5))
        {
            _3554 = true;
            break;
        }
        if ((_3222 + 1.0) < _3220.x)
        {
            _3554 = true;
            break;
        }
        _3554 = false;
        break;
    }
    float _3575;
    if (_3554)
    {
        discard_state = true;
        _3575 = 0.0;
    }
    else
    {
        _3575 = _3217;
    }
    SV_Target.x = _3232;
    SV_Target.y = _3233;
    SV_Target.z = _3234;
    SV_Target.w = _3575;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3217;
    discard_exit();
}


