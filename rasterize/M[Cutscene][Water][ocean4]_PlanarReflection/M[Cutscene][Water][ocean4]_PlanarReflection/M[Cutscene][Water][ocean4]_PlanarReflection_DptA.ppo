#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 7) in vec2 TEXCOORD_12;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    bool _120;
    vec4 _78;
    float _80;
    float _81;
    bool _94;
    uint _95;
    for (;;)
    {
        float _74 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w + (-0.5);
        _78 = cbMtdParam._m0[1u];
        _80 = _74 * _78.y;
        _81 = _74 * 0.999000012874603271484375;
        _94 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _95 = uint(roundEven(NORMAL.w)) * 13u;
        if (_94)
        {
            if ((cbInstanceData._m0[_95 + 7u].x + _81) < 0.5)
            {
                _120 = true;
                break;
            }
        }
        uint _111 = (_95 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_111].w < 1.0) && ((cbInstanceData._m0[_111].w + _81) < 0.5))
        {
            _120 = true;
            break;
        }
        if ((_80 + 1.0) < _78.x)
        {
            _120 = true;
            break;
        }
        _120 = false;
        break;
    }
    if (_120)
    {
        discard_state = true;
    }
    discard_exit();
}


