#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3963;
float _3964;
float _3965;
float _3966;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _223 = _222 * _215;
    float _224 = _222 * _216;
    float _225 = _222 * _217;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244;
    float _245;
    float _246;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
    }
    else
    {
        _244 = _230;
        _245 = _231;
        _246 = _232;
    }
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _319 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _336 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_2, SS_BumpMap), vec2((((_319 * cbMtdParam._m0[19u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_319 * cbMtdParam._m0[20u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _339 = _336.x;
    float _340 = _336.y;
    float _360 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _362 = (sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0)));
    float _369 = (cbMtdParam._m0[13u].w + _362) * cbMtdParam._m0[15u].y;
    float _3980 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    vec4 _383 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _385 = _383.x;
    bool _392 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _408 = ((_392 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _385)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _385))) - POSITION_1.w) / (((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3991 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _415 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _409 : (isnan(_409) ? cbMtdParam._m0[16u].z : max(_409, cbMtdParam._m0[16u].z)));
    float _4007 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _416 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _417 = _336.z - _416;
    float _4018 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _430 = (_418 * 0.004999999888241291046142578125) + TEXCOORD.x;
    float _432 = (_418 * (-0.004999999888241291046142578125)) + TEXCOORD.y;
    vec4 _445 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_430 + (cbMtdParam._m0[18u].y * _319)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_432 + (cbMtdParam._m0[18u].z * _319)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _449 = _445.z;
    vec4 _462 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_430 + (cbMtdParam._m0[17u].w * _319)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_432 + (cbMtdParam._m0[18u].x * _319)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _466 = _462.z;
    float _469 = (_415 - _336.w) + (isnan(_466) ? _449 : (isnan(_449) ? _466 : max(_449, _466)));
    float _4034 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _473 = (TEXCOORD_5.x - _415) + cbMtdParam._m0[16u].y;
    float _474 = _473 * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)));
    float _486 = (_474 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _418);
    float _487 = (_474 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _418);
    float _488 = (_474 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _418);
    float _4045 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _490 = 1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)));
    float _497 = ((_490 - _486) * _416) + _486;
    float _498 = ((_490 - _487) * _416) + _487;
    float _499 = ((_490 - _488) * _416) + _488;
    float _504 = _362 / cbMtdParam._m0[15u].w;
    float _4056 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = (1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbMtdParam._m0[15u].z;
    float _520 = (cbMtdParam._m0[15u].x + _362) * cbMtdParam._m0[14u].y;
    float _4067 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _524 = ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _4078 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _525 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _534 = _362 / cbMtdParam._m0[14u].w;
    float _4089 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    vec4 _555 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[20u].y * _319) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[20u].z * _319) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _564 = ((_462.x + (-0.5)) * 0.5) + _445.x;
    float _565 = ((_462.y + (-0.5)) * 0.5) + _445.y;
    float _573 = _418 * 0.119999997317790985107421875;
    float _575 = _418 * (-0.100000001490116119384765625);
    float _586 = cbMtdParam._m0[21u].y * TEXCOORD.x;
    float _587 = cbMtdParam._m0[21u].z * TEXCOORD.y;
    vec4 _596 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].w * _319) + _573) + _586) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[21u].x * _319) + _575) + _587) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _614 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2((((_586 + _573) + (cbMtdParam._m0[21u].w * _319)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_587 + _575) + (cbMtdParam._m0[22u].x * _319)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _626 = (((0.5 - _564) * 0.10999999940395355224609375) + _564) + (((_596.x + (-1.0)) + _614.x) * cbMtdParam._m0[16u].x);
    float _627 = (((0.5 - _565) * 0.10999999940395355224609375) + _565) + (((_596.y + (-1.0)) + _614.y) * cbMtdParam._m0[16u].x);
    float _632 = ((_555.x - _626) * _535) + _626;
    float _633 = ((_555.y - _627) * _535) + _627;
    float _635 = _362 / cbMtdParam._m0[14u].z;
    float _4100 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _653 = ((((_525 * (0.5 - _339)) + _339) + (((_632 + (-0.5)) + ((0.5 - _632) * _636)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _654 = ((((_525 * (0.5 - _340)) + _340) + (((_633 + (-0.5)) + ((0.5 - _633) * _636)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _4111 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))));
    float _668 = (cbMtdParam._m0[13u].z + _362) * cbMtdParam._m0[14u].x;
    float _4122 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * cbMtdParam._m0[17u].x;
    float _4133 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _686 = fma(_660, _244, fma(_654, _236 * TANGENT.x, _653 * _223));
    float _689 = fma(_660, _245, fma(_654, _236 * TANGENT.y, _653 * _224));
    float _692 = fma(_660, _246, fma(_654, _236 * TANGENT.z, _653 * _225));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _4144 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4155 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _701 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4177 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4188 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _709 = _392 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    vec4 _772 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _774 = _772.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _973 = sqrt(((_758 * _758) + (_759 * _759)) + (_760 * _760));
        float _979 = (cbMatDynParam._m0[5u].x * _973) + cbMatDynParam._m0[5u].y;
        float _4199 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _984 = (cbMatDynParam._m0[5u].z * _973) + cbMatDynParam._m0[5u].w;
        float _4210 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) - _980)) + _980) < ((_774 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _788 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _797 = (_788.x * 2.0) + (-1.0);
    float _798 = (_788.y * 2.0) + (-1.0);
    float _799 = (_788.z * 2.0) + (-1.0);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _814 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _788.w;
    float _821 = (((_797 * _803) - _697) * _814) + _697;
    float _822 = (((_798 * _803) - _698) * _814) + _698;
    float _823 = (((_799 * _803) - _699) * _814) + _699;
    float _843 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, _821 * cbSceneParam._m0[5u].x));
    float _846 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, _821 * cbSceneParam._m0[6u].x));
    float _849 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, _821 * cbSceneParam._m0[7u].x));
    uint _862 = uint(roundEven(NORMAL.w)) * 13u;
    uint _863 = _862 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_864].z;
    float _4221 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _887 = _884.x * TEXCOORD_5.w;
    float _888 = dot(vec3(_821, _822, _823), vec3(_765, _766, _767));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _821) - _765;
    float _896 = (_891 * _822) - _766;
    float _897 = (_891 * _823) - _767;
    float _901 = abs(dot(vec3(_765, _766, _767), vec3(_821, _822, _823)));
    float _4254 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _902 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _910 = 10.0 / (_709 + 10.0);
    float _911 = sqrt(_701);
    float _923 = exp2((_911 * 5.0) * log2(1.0 - (_902 * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _1021 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _1025 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1048 = _954 + _821;
        float _1049 = _958 + _822;
        float _1050 = _962 + _823;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_821, _822, _823), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4302 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_821, _822, _823), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4335 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_821, _822, _823), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4368 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1338 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1342 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1365 = _954 + _821;
        float _1366 = _958 + _822;
        float _1367 = _962 + _823;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_821, _822, _823), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4431 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_821, _822, _823), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4464 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_821, _822, _823), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4497 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = _1291;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = _897 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _701);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1801 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1804 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1832 = frontier_phi_19_17_ladder;
        }
        float _2053;
        if (_1801 > 0.0)
        {
            _2053 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2053 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_1804 > 0.0)
        {
            _2498 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2500 = isnan(_2053) ? _1832 : (isnan(_1832) ? _2053 : min(_1832, _2053));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1798) + _1787;
        float _2506 = (_2501 * _1801) + _1791;
        float _2507 = (_2501 * _1804) + _1795;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_18_40_ladder = _2789.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2789.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2789.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_18_40_ladder_2;
        _1822 = frontier_phi_18_40_ladder_1;
        _1824 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1740);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _701);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1896 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1899 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _2058;
        if (_1893 > 0.0)
        {
            _2058 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2058 = frontier_phi_30_26_ladder;
        }
        float _2525;
        if (_1896 > 0.0)
        {
            _2525 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2525 = frontier_phi_42_37_ladder;
        }
        float _2974;
        if (_1899 > 0.0)
        {
            _2974 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2974 = frontier_phi_54_49_ladder;
        }
        float _2976 = isnan(_2525) ? _2058 : (isnan(_2058) ? _2525 : min(_2058, _2525));
        float _2977 = isnan(_2974) ? _2976 : (isnan(_2976) ? _2974 : min(_2976, _2974));
        float _2981 = (_2977 * _1893) + _1882;
        float _2982 = (_2977 * _1896) + _1886;
        float _2983 = (_2977 * _1899) + _1890;
        float _2984 = _2977 * 9.9999997473787516355514526367188e-05;
        float _2985 = (-1.0) - _2984;
        float _2987 = _2984 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2983 > _2987) || ((_2983 < _2985) || ((_2982 > _2987) || ((_2982 < _2985) || ((_2981 < _2985) || (_2981 > _2987))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3194 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2983, cbModelParam._m0[17u].z, fma(_2982, cbModelParam._m0[17u].y, _2981 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2983, cbModelParam._m0[18u].z, fma(_2982, cbModelParam._m0[18u].y, _2981 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2983, cbModelParam._m0[19u].z, fma(_2982, cbModelParam._m0[19u].y, _2981 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_27_54_ladder = _3194.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _3194.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _3194.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_27_54_ladder_2;
        _1920 = frontier_phi_27_54_ladder_1;
        _1922 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1829);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1934 = ((((1.0 - _923) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_923 * _911)) * _887;
    float _1935 = _1934 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1936 = _1934 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1937 = _1934 * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    float _1957 = _785 / cbSceneParam._m0[86u].x;
    float _1965 = (cbSceneParam._m0[88u].y * (1.0 - _701)) + cbSceneParam._m0[88u].z;
    float _4623 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 5.0;
    float _1972 = (_910 * cbMtdParam._m0[11u].w) * dot(vec3(_821, _822, _823), vec3(1.0, 0.0, 0.0));
    vec4 _1982 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1972 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1972 + _1957) * cbSceneParam._m0[86u].x, _786), _1967).w) + _1957) * cbSceneParam._m0[86u].x, _786), _1967);
    float _1998 = 1.0 - _1982.w;
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2045 = _2032 / _2044;
    float _2046 = _2036 / _2044;
    float _2047 = _2040 / _2044;
    float _2194;
    float _2195;
    float _2196;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2074 = ((uint(_2047 > cbSceneParam._m0[59u].y) + uint(_2047 > cbSceneParam._m0[59u].x)) + uint(_2047 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2075 = _2074 + 43u;
        uint _2083 = _2074 + 44u;
        uint _2091 = _2074 + 45u;
        uint _2099 = _2074 + 46u;
        float _2110 = fma(_2044, cbSceneParam._m0[_2075].w, fma(_2040, cbSceneParam._m0[_2075].z, fma(_2036, cbSceneParam._m0[_2075].y, _2032 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2044, cbSceneParam._m0[_2083].w, fma(_2040, cbSceneParam._m0[_2083].z, fma(_2036, cbSceneParam._m0[_2083].y, _2032 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2044, cbSceneParam._m0[_2099].w, fma(_2040, cbSceneParam._m0[_2099].z, fma(_2036, cbSceneParam._m0[_2099].y, _2032 * cbSceneParam._m0[_2099].x)));
        float _2127 = cbSceneParam._m0[33u].z * _2122;
        float _2129 = cbSceneParam._m0[33u].w * _2122;
        float _2132 = fma(_2044, cbSceneParam._m0[_2091].w, fma(_2040, cbSceneParam._m0[_2091].z, fma(_2036, cbSceneParam._m0[_2091].y, _2032 * cbSceneParam._m0[_2091].x))) / _2122;
        float _2180 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
        float _4634 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2187 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2110) / _2122, (_2129 + _2114) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2110) / _2122, (_2114 - _2127) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2127) / _2122, (_2114 - _2129) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2129) / _2122, (_2127 + _2114) / _2122), _2132), 0.0)).x), vec4(0.25)));
        _2194 = 1.0 - (_2187 * cbSceneParam._m0[34u].x);
        _2195 = 1.0 - (_2187 * cbSceneParam._m0[34u].y);
        _2196 = 1.0 - (_2187 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2194 = 1.0;
        _2195 = 1.0;
        _2196 = 1.0;
    }
    float _2260;
    float _2262;
    float _2264;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2248 = fma(_2044, cbSceneParam._m0[63u].w, fma(_2040, cbSceneParam._m0[63u].z, fma(_2036, cbSceneParam._m0[63u].y, _2032 * cbSceneParam._m0[63u].x)));
        float _2249 = fma(_2044, cbSceneParam._m0[60u].w, fma(_2040, cbSceneParam._m0[60u].z, fma(_2036, cbSceneParam._m0[60u].y, _2032 * cbSceneParam._m0[60u].x))) / _2248;
        float _2250 = fma(_2044, cbSceneParam._m0[61u].w, fma(_2040, cbSceneParam._m0[61u].z, fma(_2036, cbSceneParam._m0[61u].y, _2032 * cbSceneParam._m0[61u].x))) / _2248;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2249 >= cbSceneParam._m0[64u].x) && (_2250 >= cbSceneParam._m0[64u].y)) && (_2249 <= cbSceneParam._m0[64u].z)) && (_2250 <= cbSceneParam._m0[64u].w))
        {
            float _2538 = fma(_2044, cbSceneParam._m0[62u].w, fma(_2040, cbSceneParam._m0[62u].z, fma(_2036, cbSceneParam._m0[62u].y, _2032 * cbSceneParam._m0[62u].x))) / _2248;
            float _2542 = isnan(cbSceneParam._m0[41u].w) ? _2538 : (isnan(_2538) ? cbSceneParam._m0[41u].w : max(_2538, cbSceneParam._m0[41u].w));
            float _2585 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
            float _4650 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
            float _2592 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2249, cbSceneParam._m0[33u].w + _2250), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2249, _2250 - cbSceneParam._m0[33u].z), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].z, _2250 - cbSceneParam._m0[33u].w), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2250), _2542), 0.0)).x), vec4(0.25)));
            float _2596 = 1.0 - (_2592 * cbSceneParam._m0[34u].x);
            float _2597 = 1.0 - (_2592 * cbSceneParam._m0[34u].y);
            float _2598 = 1.0 - (_2592 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2598) ? _2196 : (isnan(_2196) ? _2598 : min(_2196, _2598));
            frontier_phi_39_38_ladder_1 = isnan(_2597) ? _2195 : (isnan(_2195) ? _2597 : min(_2195, _2597));
            frontier_phi_39_38_ladder_2 = isnan(_2596) ? _2194 : (isnan(_2194) ? _2596 : min(_2194, _2596));
        }
        else
        {
            frontier_phi_39_38_ladder = _2196;
            frontier_phi_39_38_ladder_1 = _2195;
            frontier_phi_39_38_ladder_2 = _2194;
        }
        _2260 = frontier_phi_39_38_ladder_2;
        _2262 = frontier_phi_39_38_ladder_1;
        _2264 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2260 = _2194;
        _2262 = _2195;
        _2264 = _2196;
    }
    uint _2266 = _862 + 5u;
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_2266]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2277 = _887 + (-1.0);
    float _2280 = (cbLight._m0[_2272].x * _2277) + 1.0;
    float _2281 = (cbLight._m0[_2272].y * _2277) + 1.0;
    uint _2282 = _2271 + 5u;
    float _2288 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2292 = _2271 + 4u;
    float _2302 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2306 = _2271 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_821, _822, _823));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_821, _822, _823));
    float _4686 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4697 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2282].x * _2288) * _2327) + (((cbLight._m0[_2292].x * _2260) * _2302) * _2325);
    float _2335 = ((_2288 * cbLight._m0[_2282].y) * _2327) + (((cbLight._m0[_2292].y * _2262) * _2302) * _2325);
    float _2336 = ((_2288 * cbLight._m0[_2282].z) * _2327) + (((cbLight._m0[_2292].z * _2264) * _2302) * _2325);
    uint _2338 = _2271 + 8u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _701) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2271].x + _765;
    float _2354 = cbLight._m0[_2271].y + _766;
    float _2355 = cbLight._m0[_2271].z + _767;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2271].xyz));
    float _4708 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _4719 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2367 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2368 = dot(vec3(_821, _822, _823), vec3(_2360, _2361, _2362));
    float _4730 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2360, _2361, _2362));
    float _4741 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2352 * _2352;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2392 = 1.0 - _2352;
    float _2403 = (0.5 / (((_2367 * ((_2366 * _2392) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2392) + _2352) * _2366))) * _2366;
    float _4752 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    uint _2419 = _2271 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _701) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2306].x + _765;
    float _2433 = cbLight._m0[_2306].y + _766;
    float _2434 = cbLight._m0[_2306].z + _767;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2306].xyz));
    float _4763 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _2446 = dot(vec3(_821, _822, _823), vec3(_2439, _2440, _2441));
    float _4774 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2439, _2440, _2441));
    float _4785 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2468 = 1.0 - _2431;
    float _2478 = (0.5 / (((_2367 * ((_2445 * _2468) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2468) + _2431) * _2445))) * _2445;
    float _4796 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2490 = (((_2467 * cbLight._m0[_2419].x) * _2480) * _2288) + ((((cbLight._m0[_2338].x * _2260) * _2391) * _2405) * _2302);
    float _2491 = (((_2467 * cbLight._m0[_2419].y) * _2480) * _2288) + ((((cbLight._m0[_2338].y * _2262) * _2391) * _2405) * _2302);
    float _2492 = (((_2467 * cbLight._m0[_2419].z) * _2480) * _2288) + ((((cbLight._m0[_2338].z * _2264) * _2391) * _2405) * _2302);
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    if (_2269.y == 0u)
    {
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2611)));
        float _2632 = (log2(_2047 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3048)
                {
                    frontier_phi_63_pred = _3037;
                    frontier_phi_63_pred_1 = _3036;
                    frontier_phi_63_pred_2 = _3035;
                    frontier_phi_63_pred_3 = _3034;
                    frontier_phi_63_pred_4 = _3033;
                    frontier_phi_63_pred_5 = _3032;
                }
                else
                {
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    uint _3290;
                    _3284 = _3032;
                    _3285 = _3033;
                    _3286 = _3034;
                    _3287 = _3035;
                    _3288 = _3036;
                    _3289 = _3037;
                    _3290 = _3047;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3294 = uint(findLSB(_3290)) + (_3038 << 5u);
                        uint _3291 = (_3290 + 4294967295u) & _3290;
                        uint _3296 = _3294 * 48u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3316 = (_3294 * 48u) + 4u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3335 = (_3294 * 48u) + 8u;
                        vec3 _3346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x));
                        float _3350 = _3310.x - _2045;
                        float _3351 = _3310.y - _2046;
                        float _3352 = _3310.z - _2047;
                        float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                        float _3356 = inversesqrt(_3353);
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3360 = dot(vec3(_843, _846, _849), vec3(_3357, _3358, _3359));
                        float _3365 = 1.0 - (_3353 * _3310.w);
                        float _4817 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3367 = sqrt(_3353) * _3329.w;
                        float _3370 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3360) + _3371;
                        float _3377 = _3367 * _3367;
                        float _3381 = ((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3366) / ((_3377 * 0.699999988079071044921875) + 1.0);
                        float _3385 = (-0.0) - _2045;
                        float _3386 = (-0.0) - _2046;
                        float _3387 = (-0.0) - _2047;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3401 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _911;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3414 = _3394 + _3359;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_843, _846, _849), vec3(_3392, _3393, _3394));
                        float _4833 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3426 = dot(vec3(_843, _846, _849), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4844 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3370 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3360) + _3435;
                        float _4855 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4866 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3433 * _3433) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125))) * _3366;
                        _3202 = (_3381 * _3329.x) + _3287;
                        _3203 = (_3381 * _3329.y) + _3288;
                        _3204 = (_3381 * _3329.z) + _3289;
                        _3199 = (_3461 * _3346.x) + _3284;
                        _3200 = (_3461 * _3346.y) + _3285;
                        _3201 = (_3461 * _3346.z) + _3286;
                        if (_3291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3284 = _3199;
                            _3285 = _3200;
                            _3286 = _3201;
                            _3287 = _3202;
                            _3288 = _3203;
                            _3289 = _3204;
                            _3290 = _3291;
                        }
                    }
                    frontier_phi_63_pred = _3204;
                    frontier_phi_63_pred_1 = _3203;
                    frontier_phi_63_pred_2 = _3202;
                    frontier_phi_63_pred_3 = _3201;
                    frontier_phi_63_pred_4 = _3200;
                    frontier_phi_63_pred_5 = _3199;
                }
                _2809 = frontier_phi_63_pred;
                _2807 = frontier_phi_63_pred_1;
                _2805 = frontier_phi_63_pred_2;
                _2803 = frontier_phi_63_pred_3;
                _2801 = frontier_phi_63_pred_4;
                _2799 = frontier_phi_63_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2799;
                    _3033 = _2801;
                    _3034 = _2803;
                    _3035 = _2805;
                    _3036 = _2807;
                    _3037 = _2809;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2815) & _2642) == 0u)
        {
            _3000 = _2798;
            _3002 = _2800;
            _3004 = _2802;
            _3006 = _2804;
            _3008 = _2806;
            _3010 = _2808;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
            float _3026 = _3025 * _2045;
            float _3027 = _3025 * _2046;
            float _3028 = _3025 * _2047;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3267 = _2798;
                float _3268 = _2800;
                float _3269 = _2802;
                float _3270 = _2804;
                float _3271 = _2806;
                float _3272 = _2808;
                uint _3273 = _2815;
                uint _3282;
                bool _3283;
                for (;;)
                {
                    _3282 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                    _3283 = _3282 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_3283)
                    {
                        frontier_phi_75_pred = _3271;
                        frontier_phi_75_pred_1 = _3270;
                        frontier_phi_75_pred_2 = _3269;
                        frontier_phi_75_pred_3 = _3268;
                        frontier_phi_75_pred_4 = _3267;
                        frontier_phi_75_pred_5 = _3272;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3531 = _3267;
                        float _3532 = _3268;
                        float _3533 = _3269;
                        float _3534 = _3270;
                        float _3535 = _3271;
                        float _3536 = _3272;
                        uint _3537 = _3282;
                        uint _3538;
                        vec4 _3563;
                        float _3564;
                        vec4 _3579;
                        vec3 _3591;
                        vec4 _3606;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3548 = ((_3273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3537));
                            _3538 = (_3537 + 4294967295u) & _3537;
                            uint _3550 = _3548 * 40u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3564 = _3563.w;
                            uint _3566 = (_3548 * 40u) + 4u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3548 * 40u) + 8u;
                            _3591 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x));
                            uint _3593 = (_3548 * 40u) + 16u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3548 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3548 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3548 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2047, _3655.z, fma(_2046, _3655.y, _3655.x * _2045)) + _3655.w;
                            _3668 = !((fma(_2047, _3636.z, fma(_2046, _3636.y, _3636.x * _2045)) + _3636.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3563.x - _2045;
                                float _3696 = _3563.y - _2046;
                                float _3697 = _3563.z - _2047;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3564 * _3564));
                                float _4877 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3713 = sqrt(_3698) * _3579.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_843, _846, _849))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2047, _3606.z, fma(_2046, _3606.y, _3606.x * _2045)) + _3606.w) / _3667;
                                float _3727 = (fma(_2047, _3621.z, fma(_2046, _3621.y, _3621.x * _2045)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4893 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _911;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3026;
                                float _3757 = _3703 - _3027;
                                float _3758 = _3704 - _3028;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_843, _846, _849), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4904 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3770 = dot(vec3(_843, _846, _849), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4915 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_843, _846, _849), vec3(_3702, _3703, _3704))) + _3779;
                                float _4926 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4937 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3733 * _3579.z;
                                frontier_phi_84_pred_1 = _3733 * _3579.y;
                                frontier_phi_84_pred_2 = _3733 * _3579.x;
                                frontier_phi_84_pred_3 = _3807 * _3591.z;
                                frontier_phi_84_pred_4 = _3807 * _3591.y;
                                frontier_phi_84_pred_5 = _3807 * _3591.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3816 = frontier_phi_84_pred;
                            _3815 = frontier_phi_84_pred_1;
                            _3814 = frontier_phi_84_pred_2;
                            _3813 = frontier_phi_84_pred_3;
                            _3812 = frontier_phi_84_pred_4;
                            _3811 = frontier_phi_84_pred_5;
                            _3512 = _3814 + _3534;
                            _3513 = _3815 + _3535;
                            _3514 = _3816 + _3536;
                            _3509 = _3811 + _3531;
                            _3510 = _3812 + _3532;
                            _3511 = _3813 + _3533;
                            if (_3538 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3531 = _3509;
                                _3532 = _3510;
                                _3533 = _3511;
                                _3534 = _3512;
                                _3535 = _3513;
                                _3536 = _3514;
                                _3537 = _3538;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3513;
                        frontier_phi_75_pred_1 = _3512;
                        frontier_phi_75_pred_2 = _3511;
                        frontier_phi_75_pred_3 = _3510;
                        frontier_phi_75_pred_4 = _3509;
                        frontier_phi_75_pred_5 = _3514;
                    }
                    _3009 = frontier_phi_75_pred;
                    _3007 = frontier_phi_75_pred_1;
                    _3005 = frontier_phi_75_pred_2;
                    _3003 = frontier_phi_75_pred_3;
                    _3001 = frontier_phi_75_pred_4;
                    _3011 = frontier_phi_75_pred_5;
                    uint _3274 = _3273 + 1u;
                    if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3267 = _3001;
                        _3268 = _3003;
                        _3269 = _3005;
                        _3270 = _3007;
                        _3271 = _3009;
                        _3272 = _3011;
                        _3273 = _3274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _3011;
                frontier_phi_56_57_ladder_1 = _3009;
                frontier_phi_56_57_ladder_2 = _3007;
                frontier_phi_56_57_ladder_3 = _3005;
                frontier_phi_56_57_ladder_4 = _3003;
                frontier_phi_56_57_ladder_5 = _3001;
            }
            else
            {
                frontier_phi_56_57_ladder = _2808;
                frontier_phi_56_57_ladder_1 = _2806;
                frontier_phi_56_57_ladder_2 = _2804;
                frontier_phi_56_57_ladder_3 = _2802;
                frontier_phi_56_57_ladder_4 = _2800;
                frontier_phi_56_57_ladder_5 = _2798;
            }
            _3000 = frontier_phi_56_57_ladder_5;
            _3002 = frontier_phi_56_57_ladder_4;
            _3004 = frontier_phi_56_57_ladder_3;
            _3006 = frontier_phi_56_57_ladder_2;
            _3008 = frontier_phi_56_57_ladder_1;
            _3010 = frontier_phi_56_57_ladder;
        }
        float _3015 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2654 = (_3015 * _3006) + _2334;
        _2656 = (_3015 * _3008) + _2335;
        _2658 = (_3015 * _3010) + _2336;
        _2660 = ((_3000 * 0.039999999105930328369140625) * _3015) + _2490;
        _2662 = ((_3002 * 0.039999999105930328369140625) * _3015) + _2491;
        _2664 = ((_3004 * 0.039999999105930328369140625) * _3015) + _2492;
    }
    else
    {
        _2654 = _2334;
        _2656 = _2335;
        _2658 = _2336;
        _2660 = _2490;
        _2662 = _2491;
        _2664 = _2492;
    }
    float _2678 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2679 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2680 = cbSceneParam._m0[86u].x * (_1957 + ((_910 * cbMtdParam._m0[11u].y) * dot(vec3(_821, _822, _823), vec3(_223, _224, _225))));
    float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
    float _2682 = isnan(_2679) ? _786 : (isnan(_786) ? _2679 : min(_786, _2679));
    vec4 _2684 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2681, _2682), 0.0);
    float _2686 = _2684.x;
    bool _2706 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2686)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2686))) > _709;
    float _2707 = _2706 ? _2681 : _785;
    float _2708 = _2706 ? _2682 : _786;
    vec4 _2710 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2707, _2708));
    vec4 _2715 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2707, _2708));
    float _2717 = _2715.x;
    bool _2722 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2731 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2737 = (_2722 ? (_2731 / (cbSceneParam._m0[2u].x - _2717)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2717))) - _709;
    float _2739 = cbMtdParam._m0[24u].y + cbMtdParam._m0[22u].w;
    float _2740 = cbMtdParam._m0[24u].z + cbMtdParam._m0[23u].x;
    float _2741 = cbMtdParam._m0[24u].w + cbMtdParam._m0[23u].y;
    bool _2747 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2751 = (isnan(_2737) ? 0.0 : (isnan(0.0) ? _2737 : max(0.0, _2737))) * (-1.44269502162933349609375);
    float _4968 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4979 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4990 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2901;
    float _2902;
    float _2903;
    if ((1.0 - _671) > 0.00999999977648258209228515625)
    {
        vec4 _2820 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2707, _2708), 0.0);
        float _2822 = _2820.x;
        float _2828 = (_2722 ? (_2731 / (cbSceneParam._m0[2u].x - _2822)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2822))) - _709;
        uint _2834 = floatBitsToUint(cbInstanceData._m0[_2266]).x * 14u;
        uint _2840 = _2834 + 4u;
        float _2849 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_244, _245, _246));
        float _2857 = dot(vec3((-0.0) - _765, (-0.0) - _766, (-0.0) - _767), vec3((-0.0) - _244, (-0.0) - _245, (-0.0) - _246));
        float _2862 = ((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2849 : (isnan(_2849) ? 0.001000000047497451305389404296875 : max(_2849, 0.001000000047497451305389404296875)))) + 1.0;
        float _2864 = (-0.0) - ((isnan(_2828) ? 0.0 : (isnan(0.0) ? _2828 : max(0.0, _2828))) * _2862);
        _2901 = _2747 ? 0.0 : ((((cbMtdParam._m0[22u].w * 0.079577468335628509521484375) * cbLight._m0[_2840].x) / ((_2862 * _2739) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2739 * 1.44269502162933349609375) * _2864)));
        _2902 = _2747 ? 0.0 : ((((cbMtdParam._m0[23u].x * 0.079577468335628509521484375) * cbLight._m0[_2840].y) / ((_2862 * _2740) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2740 * 1.44269502162933349609375) * _2864)));
        _2903 = _2747 ? 0.0 : ((((cbMtdParam._m0[23u].y * 0.079577468335628509521484375) * cbLight._m0[_2840].z) / ((_2862 * _2741) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2741 * 1.44269502162933349609375) * _2864)));
    }
    else
    {
        _2901 = 0.0;
        _2902 = 0.0;
        _2903 = 0.0;
    }
    float _2920 = 0.959999978542327880859375 - (exp2(log2(1.0 - _902) * 5.0) * 0.959999978542327880859375);
    float _2921 = (_2901 + ((exp2(_2751 * (_2747 ? 0.0 : _2739)) * _2710.x) * cbSceneParam._m0[72u].w)) * _2920;
    float _2922 = (_2902 + ((exp2(_2751 * (_2747 ? 0.0 : _2740)) * _2710.y) * cbSceneParam._m0[72u].w)) * _2920;
    float _2923 = (_2903 + ((exp2(_2751 * (_2747 ? 0.0 : _2741)) * _2710.z) * cbSceneParam._m0[72u].w)) * _2920;
    float _2931 = (_2921 + (((((_1934 * _1982.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1729) * _1998)) + _2660) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2654 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _887))) - _2921) * _671);
    float _2933 = (_2922 + (((((_1934 * _1982.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1729) * _1998)) + _2662) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2656 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _887))) - _2922) * _671);
    float _2935 = (_2923 + (((((_1934 * _1982.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1729) * _1998)) + _2664) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2658 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _887))) - _2923) * _671);
    float _2940 = cbInstanceData._m0[_862 + 6u].w * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)));
    float _2945 = _785 / cbSceneParam._m0[86u].x;
    float _2946 = _786 / cbSceneParam._m0[86u].y;
    vec4 _2960 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2962 = _2960.x;
    float _2963 = _2960.y;
    float _2964 = _2960.z;
    float _2965 = _2960.w;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _3053 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _3054 = _3053 / _709;
        float _3065 = _3054 * _758;
        float _3066 = _759 * _3054;
        float _3067 = (-0.0) - _3066;
        float _3068 = _3054 * _760;
        float _3070 = (cbSceneParam._m0[77u].w * _3067) / _3053;
        float _3071 = _3070 + cbSceneParam._m0[79u].w;
        float _3072 = cbSceneParam._m0[79u].w - _3066;
        float _3078 = sqrt(((_3065 * _3065) + (_3066 * _3066)) + (_3068 * _3068));
        float _3081 = (1.0 - (cbSceneParam._m0[77u].w / _3053)) * _3078;
        float _3086 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3466;
        if (abs((_3067 - _3070) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3466 = ((((_3071 > 0.0) ? exp2(_3086 * _3071) : (2.0 - exp2(_3087 * _3071))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3081;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : max(_3071, _3072));
            float _3226 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : min(_3071, _3072));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3466 = ((abs(_3078 / _3067) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3086 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3086 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3087 * _3235) - exp2(_3087 * _3236)) * _3224))) + (_3081 * cbSceneParam._m0[80u].z);
        }
        vec4 _3468 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, 1.0), 0.0);
        float _3477 = exp2((_3466 * (-1.44269502162933349609375)) * (1.0 - _3468.w));
        float _3478 = log2(_3477);
        float _3494 = log2(_2965);
        _3088 = (exp2(_3494 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].x)) * _3468.x) / cbSceneParam._m0[78u].x)) + _2962;
        _3090 = (exp2(_3494 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].y)) * _3468.y) / cbSceneParam._m0[78u].y)) + _2963;
        _3092 = (exp2(_3494 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3478 * cbSceneParam._m0[78u].z)) * _3468.z) / cbSceneParam._m0[78u].z)) + _2964;
        _3094 = _3477 * _2965;
    }
    else
    {
        _3088 = _2962;
        _3090 = _2963;
        _3092 = _2964;
        _3094 = _2965;
    }
    bool _3504;
    float _3149;
    vec4 _3152;
    float _3154;
    vec4 _3156;
    float _3164;
    float _3165;
    float _3166;
    float _3167;
    bool _3177;
    for (;;)
    {
        bool _3106 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3107 = log2(_3094);
        float _3114 = exp2(_3107 * cbSceneParam._m0[78u].x) * _2931;
        float _3115 = exp2(_3107 * cbSceneParam._m0[78u].y) * _2933;
        float _3116 = exp2(_3107 * cbSceneParam._m0[78u].z) * _2935;
        vec4 _3124 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_785, _786));
        float _3126 = _3124.x;
        float _3147 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3126)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3126))) - _709) * 3.0;
        float _5056 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        _3149 = _2940 * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)));
        float _3150 = _774 + (-0.5);
        _3152 = cbMtdParam._m0[1u];
        _3154 = _3152.y * _3150;
        _3156 = cbMatDynParam._m0[0u];
        float _3163 = (roundEven(_3156.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3164 = _3163 * (_3106 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3088)));
        _3165 = _3163 * (_3106 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3090)));
        _3166 = _3163 * (_3106 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3092)));
        _3167 = _3150 * 0.999000012874603271484375;
        _3177 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3177)
        {
            if ((cbInstanceData._m0[_862 + 7u].x + _3167) < 0.5)
            {
                _3504 = true;
                break;
            }
        }
        uint _3259 = _863 + uint(_3156.w);
        if ((cbInstanceData._m0[_3259].w < 1.0) && ((cbInstanceData._m0[_3259].w + _3167) < 0.5))
        {
            _3504 = true;
            break;
        }
        if ((_3154 + 1.0) < _3152.x)
        {
            _3504 = true;
            break;
        }
        _3504 = false;
        break;
    }
    float _3522;
    if (_3504)
    {
        discard_state = true;
        _3522 = 0.0;
    }
    else
    {
        _3522 = _3149;
    }
    SV_Target.x = _3164;
    SV_Target.y = _3165;
    SV_Target.z = _3166;
    SV_Target.w = _3522;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3149;
    discard_exit();
}


