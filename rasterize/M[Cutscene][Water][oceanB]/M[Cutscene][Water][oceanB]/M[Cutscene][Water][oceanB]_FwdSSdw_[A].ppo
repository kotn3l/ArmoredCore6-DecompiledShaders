#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1289;
float _3708;
float _3709;
float _3710;
float _3711;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _221 = _220 * _213;
    float _222 = _220 * _214;
    float _223 = _220 * _215;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _317 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _334 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_2, SS_BumpMap), vec2((((_317 * cbMtdParam._m0[19u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_317 * cbMtdParam._m0[20u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _337 = _334.x;
    float _338 = _334.y;
    float _358 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _360 = (sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0)));
    float _367 = (cbMtdParam._m0[13u].w + _360) * cbMtdParam._m0[15u].y;
    float _3725 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _381 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _383 = _381.x;
    bool _390 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _406 = ((_390 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _383)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _383))) - POSITION_1.w) / (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3736 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _413 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _407 : (isnan(_407) ? cbMtdParam._m0[16u].z : max(_407, cbMtdParam._m0[16u].z)));
    float _3752 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _414 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _415 = _334.z - _414;
    float _3763 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _428 = (_416 * 0.004999999888241291046142578125) + TEXCOORD.x;
    float _430 = (_416 * (-0.004999999888241291046142578125)) + TEXCOORD.y;
    vec4 _443 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_428 + (cbMtdParam._m0[18u].y * _317)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_430 + (cbMtdParam._m0[18u].z * _317)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _447 = _443.z;
    vec4 _460 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_428 + (cbMtdParam._m0[17u].w * _317)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_430 + (cbMtdParam._m0[18u].x * _317)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _464 = _460.z;
    float _467 = (_413 - _334.w) + (isnan(_464) ? _447 : (isnan(_447) ? _464 : max(_447, _464)));
    float _3779 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _471 = (TEXCOORD_5.x - _413) + cbMtdParam._m0[16u].y;
    float _472 = _471 * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)));
    float _484 = (_472 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _416);
    float _485 = (_472 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _416);
    float _486 = (_472 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _416);
    float _3790 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _488 = 1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)));
    float _495 = ((_488 - _484) * _414) + _484;
    float _496 = ((_488 - _485) * _414) + _485;
    float _497 = ((_488 - _486) * _414) + _486;
    float _502 = _360 / cbMtdParam._m0[15u].w;
    float _3801 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = (1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbMtdParam._m0[15u].z;
    float _518 = (cbMtdParam._m0[15u].x + _360) * cbMtdParam._m0[14u].y;
    float _3812 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _522 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3823 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _523 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _532 = _360 / cbMtdParam._m0[14u].w;
    float _3834 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _553 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[20u].y * _317) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[20u].z * _317) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _562 = ((_460.x + (-0.5)) * 0.5) + _443.x;
    float _563 = ((_460.y + (-0.5)) * 0.5) + _443.y;
    float _571 = _416 * 0.119999997317790985107421875;
    float _573 = _416 * (-0.100000001490116119384765625);
    float _584 = cbMtdParam._m0[21u].y * TEXCOORD.x;
    float _585 = cbMtdParam._m0[21u].z * TEXCOORD.y;
    vec4 _594 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].w * _317) + _571) + _584) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[21u].x * _317) + _573) + _585) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _612 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2((((_584 + _571) + (cbMtdParam._m0[21u].w * _317)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_585 + _573) + (cbMtdParam._m0[22u].x * _317)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _624 = (((0.5 - _562) * 0.10999999940395355224609375) + _562) + (((_594.x + (-1.0)) + _612.x) * cbMtdParam._m0[16u].x);
    float _625 = (((0.5 - _563) * 0.10999999940395355224609375) + _563) + (((_594.y + (-1.0)) + _612.y) * cbMtdParam._m0[16u].x);
    float _630 = ((_553.x - _624) * _533) + _624;
    float _631 = ((_553.y - _625) * _533) + _625;
    float _633 = _360 / cbMtdParam._m0[14u].z;
    float _3845 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _651 = ((((_523 * (0.5 - _337)) + _337) + (((_630 + (-0.5)) + ((0.5 - _630) * _634)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _652 = ((((_523 * (0.5 - _338)) + _338) + (((_631 + (-0.5)) + ((0.5 - _631) * _634)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3856 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    float _666 = (cbMtdParam._m0[13u].z + _360) * cbMtdParam._m0[14u].x;
    float _3867 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * cbMtdParam._m0[17u].x;
    float _3878 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _684 = fma(_658, _242, fma(_652, _234 * TANGENT.x, _651 * _221));
    float _687 = fma(_658, _243, fma(_652, _234 * TANGENT.y, _651 * _222));
    float _690 = fma(_658, _244, fma(_652, _234 * TANGENT.z, _651 * _223));
    float _694 = inversesqrt(dot(vec3(_684, _687, _690), vec3(_684, _687, _690)));
    float _695 = _694 * _684;
    float _696 = _694 * _687;
    float _697 = _694 * _690;
    float _3889 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3900 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _699 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3922 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3933 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _707 = _390 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _756 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _757 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
    float _763 = _756 * _762;
    float _764 = _757 * _762;
    float _765 = _758 * _762;
    vec4 _770 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _772 = _770.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _971 = sqrt(((_756 * _756) + (_757 * _757)) + (_758 * _758));
        float _977 = (cbMatDynParam._m0[5u].x * _971) + cbMatDynParam._m0[5u].y;
        float _3944 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _982 = (cbMatDynParam._m0[5u].z * _971) + cbMatDynParam._m0[5u].w;
        float _3955 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) - _978)) + _978) < ((_772 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _786 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _795 = (_786.x * 2.0) + (-1.0);
    float _796 = (_786.y * 2.0) + (-1.0);
    float _797 = (_786.z * 2.0) + (-1.0);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _812 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _786.w;
    float _819 = (((_795 * _801) - _695) * _812) + _695;
    float _820 = (((_796 * _801) - _696) * _812) + _696;
    float _821 = (((_797 * _801) - _697) * _812) + _697;
    float _841 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, _819 * cbSceneParam._m0[5u].x));
    float _844 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, _819 * cbSceneParam._m0[6u].x));
    float _847 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, _819 * cbSceneParam._m0[7u].x));
    uint _860 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = _860 + 9u;
    uint _862 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_862].z;
    float _3966 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _885 = _882.x * TEXCOORD_5.w;
    float _886 = dot(vec3(_819, _820, _821), vec3(_763, _764, _765));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _819) - _763;
    float _894 = (_889 * _820) - _764;
    float _895 = (_889 * _821) - _765;
    float _899 = abs(dot(vec3(_763, _764, _765), vec3(_819, _820, _821)));
    float _3999 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _900 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _908 = 10.0 / (_707 + 10.0);
    float _909 = sqrt(_699);
    float _921 = exp2((_909 * 5.0) * log2(1.0 - (_900 * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1288;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _1019 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _1023 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1046 = _952 + _819;
        float _1047 = _956 + _820;
        float _1048 = _960 + _821;
        float _1058 = fma(_1048, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1116 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1082.x + (-0.5));
        float _1118 = _1116 * (_1082.y + (-0.5));
        float _1119 = _1116 * (_1082.z + (-0.5));
        float _1126 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1089.x + (-0.5));
        float _1128 = _1126 * (_1089.y + (-0.5));
        float _1129 = _1126 * (_1089.z + (-0.5));
        float _1136 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1096.x + (-0.5));
        float _1138 = _1136 * (_1096.y + (-0.5));
        float _1139 = _1136 * (_1096.z + (-0.5));
        float _1146 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1103.x + (-0.5));
        float _1148 = _1146 * (_1103.y + (-0.5));
        float _1149 = _1146 * (_1103.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1170 = (dot(vec3(_819, _820, _821), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1180 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _4047 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1182 + 1.0))) + _1187) * _1150;
        float _1197 = _1118 * 0.5;
        float _1198 = _1128 * 0.5;
        float _1199 = _1138 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_819, _820, _821), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4080 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1224 + 1.0))) + _1229) * _1151;
        float _1239 = _1119 * 0.5;
        float _1240 = _1129 * 0.5;
        float _1241 = _1139 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_819, _820, _821), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4113 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1266 + 1.0))) + _1271) * _1152;
        _1288 = _1119;
        _1290 = _1118;
        _1291 = _1117;
        _1292 = _1129;
        _1293 = _1128;
        _1294 = _1127;
        _1295 = _1139;
        _1296 = _1138;
        _1297 = _1137;
        _1298 = _1152;
        _1299 = _1151;
        _1300 = _1150;
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _1289;
        _1290 = _1289;
        _1291 = _1289;
        _1292 = _1289;
        _1293 = _1289;
        _1294 = _1289;
        _1295 = _1289;
        _1296 = _1289;
        _1297 = _1289;
        _1298 = _1289;
        _1299 = _1289;
        _1300 = _1289;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1332 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1336 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1340 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1363 = _952 + _819;
        float _1364 = _956 + _820;
        float _1365 = _960 + _821;
        float _1375 = fma(_1365, cbModelParam._m0[30u].z, fma(_1364, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363)) - _1332;
        float _1376 = fma(_1365, cbModelParam._m0[31u].z, fma(_1364, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363)) - _1336;
        float _1377 = fma(_1365, cbModelParam._m0[32u].z, fma(_1364, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363)) - _1340;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1332 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1336 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[35u].z) + ((((((_1340 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1431 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1398.x + (-0.5));
        float _1433 = _1431 * (_1398.y + (-0.5));
        float _1434 = _1431 * (_1398.z + (-0.5));
        float _1441 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1405.x + (-0.5));
        float _1443 = _1441 * (_1405.y + (-0.5));
        float _1444 = _1441 * (_1405.z + (-0.5));
        float _1451 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1412.x + (-0.5));
        float _1453 = _1451 * (_1412.y + (-0.5));
        float _1454 = _1451 * (_1412.z + (-0.5));
        float _1461 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1419.x + (-0.5));
        float _1463 = _1461 * (_1419.y + (-0.5));
        float _1464 = _1461 * (_1419.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_819, _820, _821), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4176 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1495 + 1.0))) + _1500) * _1465;
        float _1510 = _1433 * 0.5;
        float _1511 = _1443 * 0.5;
        float _1512 = _1453 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_819, _820, _821), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4209 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1537 + 1.0))) + _1542) * _1466;
        float _1552 = _1434 * 0.5;
        float _1553 = _1444 * 0.5;
        float _1554 = _1454 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_819, _820, _821), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4242 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1579 + 1.0))) + _1584) * _1467;
        _1601 = _1434;
        _1602 = _1433;
        _1603 = _1432;
        _1604 = _1444;
        _1605 = _1443;
        _1606 = _1442;
        _1607 = _1454;
        _1608 = _1453;
        _1609 = _1452;
        _1610 = _1467;
        _1611 = _1466;
        _1612 = _1465;
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1289;
        _1602 = _1289;
        _1603 = _1289;
        _1604 = _1289;
        _1605 = _1289;
        _1606 = _1289;
        _1607 = _1289;
        _1608 = _1289;
        _1609 = _1289;
        _1610 = _1289;
        _1611 = _1289;
        _1612 = _1289;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1301)) + _1301;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1648 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1625));
    float _1669 = _893 * 0.5;
    float _1670 = _894 * 0.5;
    float _1671 = _895 * 0.5;
    float _1672 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1675 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1678 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1685 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1288, _1292, _1295, _1298));
        float _1689 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1693 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1700 = dot(vec4(cbModelParam._m0[39u]), vec4(_1669, _1670, _1671, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1669, _1670, _1671, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1799 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1802 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1830 = frontier_phi_19_17_ladder;
        }
        float _2253;
        if (_1799 > 0.0)
        {
            _2253 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2253 = frontier_phi_28_24_ladder;
        }
        float _2670;
        if (_1802 > 0.0)
        {
            _2670 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2670 = frontier_phi_42_35_ladder;
        }
        float _2672 = isnan(_2253) ? _1830 : (isnan(_1830) ? _2253 : min(_1830, _2253));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _1796) + _1785;
        float _2678 = (_2673 * _1799) + _1789;
        float _2679 = (_2673 * _1802) + _1793;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2682 = (-1.0) - _2680;
        float _2684 = _2680 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2679 > _2684) || ((_2679 < _2682) || ((_2678 > _2684) || ((_2678 < _2682) || ((_2677 < _2682) || (_2677 > _2684))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2679, cbModelParam._m0[9u].z, fma(_2678, cbModelParam._m0[9u].y, _2677 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2679, cbModelParam._m0[10u].z, fma(_2678, cbModelParam._m0[10u].y, _2677 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2679, cbModelParam._m0[11u].z, fma(_2678, cbModelParam._m0[11u].y, _2677 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_18_42_ladder = _2896.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2896.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2896.x * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_18_42_ladder_2;
        _1820 = frontier_phi_18_42_ladder_1;
        _1822 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1738);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1894 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1897 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2258;
        if (_1891 > 0.0)
        {
            _2258 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2258 = frontier_phi_30_26_ladder;
        }
        float _2697;
        if (_1894 > 0.0)
        {
            _2697 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2697 = frontier_phi_44_37_ladder;
        }
        float _2973;
        if (_1897 > 0.0)
        {
            _2973 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _2973 = frontier_phi_61_53_ladder;
        }
        float _2975 = isnan(_2697) ? _2258 : (isnan(_2258) ? _2697 : min(_2258, _2697));
        float _2976 = isnan(_2973) ? _2975 : (isnan(_2975) ? _2973 : min(_2975, _2973));
        float _2980 = (_2976 * _1891) + _1880;
        float _2981 = (_2976 * _1894) + _1884;
        float _2982 = (_2976 * _1897) + _1888;
        float _2983 = _2976 * 9.9999997473787516355514526367188e-05;
        float _2984 = (-1.0) - _2983;
        float _2986 = _2983 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_2982 > _2986) || ((_2982 < _2984) || ((_2981 > _2986) || ((_2981 < _2984) || ((_2980 < _2984) || (_2980 > _2986))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3258 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2982, cbModelParam._m0[17u].z, fma(_2981, cbModelParam._m0[17u].y, _2980 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2982, cbModelParam._m0[18u].z, fma(_2981, cbModelParam._m0[18u].y, _2980 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2982, cbModelParam._m0[19u].z, fma(_2981, cbModelParam._m0[19u].y, _2980 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_27_61_ladder = _3258.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3258.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3258.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_27_61_ladder_2;
        _1918 = frontier_phi_27_61_ladder;
        _1920 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1827);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1932 = ((((1.0 - _921) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _909)) * _885;
    float _1933 = _1932 * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1934 = _1932 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1935 = _1932 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    float _1955 = _783 / cbSceneParam._m0[86u].x;
    float _1963 = (cbSceneParam._m0[88u].y * (1.0 - _699)) + cbSceneParam._m0[88u].z;
    float _4368 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 5.0;
    float _1970 = (_908 * cbMtdParam._m0[11u].w) * dot(vec3(_819, _820, _821), vec3(1.0, 0.0, 0.0));
    vec4 _1980 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1970 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1970 + _1955) * cbSceneParam._m0[86u].x, _784), _1965).w) + _1955) * cbSceneParam._m0[86u].x, _784), _1965);
    float _1996 = 1.0 - _1980.w;
    vec4 _2004 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_783, _784));
    float _2006 = _2004.w;
    float _2018 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2006);
    float _2019 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2006);
    float _2020 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2006);
    uint _2021 = _860 + 5u;
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_2021]);
    uint _2026 = _2024.x * 14u;
    uint _2027 = _2026 + 13u;
    float _2032 = _885 + (-1.0);
    float _2035 = (cbLight._m0[_2027].x * _2032) + 1.0;
    float _2036 = (cbLight._m0[_2027].y * _2032) + 1.0;
    uint _2037 = _2026 + 5u;
    float _2043 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2047 = _2026 + 4u;
    float _2057 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2061 = _2026 | 1u;
    float _2072 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_819, _820, _821));
    float _2075 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_819, _820, _821));
    float _4389 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _4400 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2082 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2089 = ((cbLight._m0[_2037].x * _2043) * _2082) + (((cbLight._m0[_2047].x * _2018) * _2057) * _2080);
    float _2090 = ((_2043 * cbLight._m0[_2037].y) * _2082) + (((cbLight._m0[_2047].y * _2019) * _2057) * _2080);
    float _2091 = ((_2043 * cbLight._m0[_2037].z) * _2082) + (((cbLight._m0[_2047].z * _2020) * _2057) * _2080);
    uint _2093 = _2026 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _699) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_2026].x + _763;
    float _2109 = cbLight._m0[_2026].y + _764;
    float _2110 = cbLight._m0[_2026].z + _765;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2026].xyz));
    float _4411 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2122 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2123 = dot(vec3(_819, _820, _821), vec3(_2115, _2116, _2117));
    float _4433 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2115, _2116, _2117));
    float _4444 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2122 * ((_2121 * _2147) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2147) + _2107) * _2121))) * _2121;
    float _4455 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2174 = _2026 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _699) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2061].x + _763;
    float _2188 = cbLight._m0[_2061].y + _764;
    float _2189 = cbLight._m0[_2061].z + _765;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2061].xyz));
    float _4466 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2201 = dot(vec3(_819, _820, _821), vec3(_2194, _2195, _2196));
    float _4477 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2194, _2195, _2196));
    float _4488 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2223 = 1.0 - _2186;
    float _2233 = (0.5 / (((_2122 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2223) + _2186) * _2200))) * _2200;
    float _4499 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2245 = (((_2222 * cbLight._m0[_2174].x) * _2235) * _2043) + ((((cbLight._m0[_2093].x * _2018) * _2146) * _2160) * _2057);
    float _2246 = (((_2222 * cbLight._m0[_2174].y) * _2235) * _2043) + ((((cbLight._m0[_2093].y * _2019) * _2146) * _2160) * _2057);
    float _2247 = (((_2222 * cbLight._m0[_2174].z) * _2235) * _2043) + ((((cbLight._m0[_2093].z * _2020) * _2146) * _2160) * _2057);
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_2024.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2750)
                {
                    frontier_phi_55_pred = _2738;
                    frontier_phi_55_pred_1 = _2739;
                    frontier_phi_55_pred_2 = _2737;
                    frontier_phi_55_pred_3 = _2736;
                    frontier_phi_55_pred_4 = _2735;
                    frontier_phi_55_pred_5 = _2734;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2734;
                    _3017 = _2735;
                    _3018 = _2736;
                    _3019 = _2737;
                    _3020 = _2738;
                    _3021 = _2739;
                    _3022 = _2749;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2740 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _2303;
                        float _3083 = _3042.y - _2304;
                        float _3084 = _3042.z - _2305;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_841, _844, _847), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4520 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3102 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3092) + _3103;
                        float _3109 = _3099 * _3099;
                        float _3113 = ((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3098) / ((_3109 * 0.699999988079071044921875) + 1.0);
                        float _3117 = (-0.0) - _2303;
                        float _3118 = (-0.0) - _2304;
                        float _3119 = (-0.0) - _2305;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3134 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                        float _3135 = 1.0 - _909;
                        float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                        float _3143 = _3142 * _3142;
                        float _3144 = _3143 * _3143;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3147 = _3126 + _3091;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3155 = dot(vec3(_841, _844, _847), vec3(_3124, _3125, _3126));
                        float _4536 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3159 = dot(vec3(_841, _844, _847), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                        float _4547 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                        float _3167 = _3102 * _3143;
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3092) + _3168;
                        float _4558 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3173 = 1.0 - _3143;
                        float _3183 = (0.5 / (((_3172 * ((_3158 * _3173) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3143) * _3158))) * _3172;
                        float _4569 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3194 = (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3166 * _3166) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2908 = (_3113 * _3061.x) + _3019;
                        _2909 = (_3113 * _3061.y) + _3020;
                        _2910 = (_3113 * _3061.z) + _3021;
                        _2905 = (_3194 * _3078.x) + _3016;
                        _2906 = (_3194 * _3078.y) + _3017;
                        _2907 = (_3194 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2905;
                            _3017 = _2906;
                            _3018 = _2907;
                            _3019 = _2908;
                            _3020 = _2909;
                            _3021 = _2910;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_55_pred = _2909;
                    frontier_phi_55_pred_1 = _2910;
                    frontier_phi_55_pred_2 = _2908;
                    frontier_phi_55_pred_3 = _2907;
                    frontier_phi_55_pred_4 = _2906;
                    frontier_phi_55_pred_5 = _2905;
                }
                _2503 = frontier_phi_55_pred;
                _2505 = frontier_phi_55_pred_1;
                _2501 = frontier_phi_55_pred_2;
                _2499 = frontier_phi_55_pred_3;
                _2497 = frontier_phi_55_pred_4;
                _2495 = frontier_phi_55_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2495;
                    _2735 = _2497;
                    _2736 = _2499;
                    _2737 = _2501;
                    _2738 = _2503;
                    _2739 = _2505;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2511) & _2349) == 0u)
        {
            _2702 = _2494;
            _2704 = _2496;
            _2706 = _2498;
            _2708 = _2500;
            _2710 = _2502;
            _2712 = _2504;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2728 = _2727 * _2303;
            float _2729 = _2727 * _2304;
            float _2730 = _2727 * _2305;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2999 = _2494;
                float _3000 = _2496;
                float _3001 = _2498;
                float _3002 = _2500;
                float _3003 = _2502;
                float _3004 = _2504;
                uint _3005 = _2511;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_3015)
                    {
                        frontier_phi_70_pred = _2999;
                        frontier_phi_70_pred_1 = _3004;
                        frontier_phi_70_pred_2 = _3003;
                        frontier_phi_70_pred_3 = _3002;
                        frontier_phi_70_pred_4 = _3001;
                        frontier_phi_70_pred_5 = _3000;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _2999;
                        float _3286 = _3000;
                        float _3287 = _3001;
                        float _3288 = _3002;
                        float _3289 = _3003;
                        float _3290 = _3004;
                        uint _3291 = _3014;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2305, _3409.z, fma(_2304, _3409.y, _3409.x * _2303)) + _3409.w;
                            _3422 = !((fma(_2305, _3390.z, fma(_2304, _3390.y, _3390.x * _2303)) + _3390.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _2303;
                                float _3450 = _3317.y - _2304;
                                float _3451 = _3317.z - _2305;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4580 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_841, _844, _847))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2305, _3360.z, fma(_2304, _3360.y, _3360.x * _2303)) + _3360.w) / _3421;
                                float _3481 = (fma(_2305, _3375.z, fma(_2304, _3375.y, _3375.x * _2303)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4596 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _909;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2728;
                                float _3511 = _3457 - _2729;
                                float _3512 = _3458 - _2730;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4607 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3524 = dot(vec3(_841, _844, _847), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4618 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_841, _844, _847), vec3(_3456, _3457, _3458))) + _3533;
                                float _4629 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4640 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3561 * _3345.z;
                                frontier_phi_79_pred_1 = _3487 * _3333.z;
                                frontier_phi_79_pred_2 = _3487 * _3333.y;
                                frontier_phi_79_pred_3 = _3487 * _3333.x;
                                frontier_phi_79_pred_4 = _3561 * _3345.y;
                                frontier_phi_79_pred_5 = _3561 * _3345.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3567 = frontier_phi_79_pred;
                            _3570 = frontier_phi_79_pred_1;
                            _3569 = frontier_phi_79_pred_2;
                            _3568 = frontier_phi_79_pred_3;
                            _3566 = frontier_phi_79_pred_4;
                            _3565 = frontier_phi_79_pred_5;
                            _3266 = _3568 + _3288;
                            _3267 = _3569 + _3289;
                            _3268 = _3570 + _3290;
                            _3263 = _3565 + _3285;
                            _3264 = _3566 + _3286;
                            _3265 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3263;
                                _3286 = _3264;
                                _3287 = _3265;
                                _3288 = _3266;
                                _3289 = _3267;
                                _3290 = _3268;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3263;
                        frontier_phi_70_pred_1 = _3268;
                        frontier_phi_70_pred_2 = _3267;
                        frontier_phi_70_pred_3 = _3266;
                        frontier_phi_70_pred_4 = _3265;
                        frontier_phi_70_pred_5 = _3264;
                    }
                    _2703 = frontier_phi_70_pred;
                    _2713 = frontier_phi_70_pred_1;
                    _2711 = frontier_phi_70_pred_2;
                    _2709 = frontier_phi_70_pred_3;
                    _2707 = frontier_phi_70_pred_4;
                    _2705 = frontier_phi_70_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2703;
                        _3000 = _2705;
                        _3001 = _2707;
                        _3002 = _2709;
                        _3003 = _2711;
                        _3004 = _2713;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2707;
                frontier_phi_46_47_ladder_1 = _2709;
                frontier_phi_46_47_ladder_2 = _2711;
                frontier_phi_46_47_ladder_3 = _2713;
                frontier_phi_46_47_ladder_4 = _2705;
                frontier_phi_46_47_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_46_47_ladder = _2498;
                frontier_phi_46_47_ladder_1 = _2500;
                frontier_phi_46_47_ladder_2 = _2502;
                frontier_phi_46_47_ladder_3 = _2504;
                frontier_phi_46_47_ladder_4 = _2496;
                frontier_phi_46_47_ladder_5 = _2494;
            }
            _2702 = frontier_phi_46_47_ladder_5;
            _2704 = frontier_phi_46_47_ladder_4;
            _2706 = frontier_phi_46_47_ladder;
            _2708 = frontier_phi_46_47_ladder_1;
            _2710 = frontier_phi_46_47_ladder_2;
            _2712 = frontier_phi_46_47_ladder_3;
        }
        float _2717 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2361 = (_2717 * _2708) + _2089;
        _2363 = (_2717 * _2710) + _2090;
        _2365 = (_2717 * _2712) + _2091;
        _2367 = ((_2702 * 0.039999999105930328369140625) * _2717) + _2245;
        _2369 = ((_2704 * 0.039999999105930328369140625) * _2717) + _2246;
        _2371 = ((_2706 * 0.039999999105930328369140625) * _2717) + _2247;
    }
    else
    {
        _2361 = _2089;
        _2363 = _2090;
        _2365 = _2091;
        _2367 = _2245;
        _2369 = _2246;
        _2371 = _2247;
    }
    float _2391 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2392 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2393 = cbSceneParam._m0[86u].x * ((_783 / cbSceneParam._m0[86u].x) + ((_908 * cbMtdParam._m0[11u].y) * dot(vec3(_819, _820, _821), vec3(_221, _222, _223))));
    float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
    float _2395 = isnan(_2392) ? _784 : (isnan(_784) ? _2392 : min(_784, _2392));
    vec4 _2397 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2394, _2395), 0.0);
    float _2399 = _2397.x;
    bool _2419 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2399)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2399))) > _707;
    float _2420 = _2419 ? _2394 : _783;
    float _2421 = _2419 ? _2395 : _784;
    vec4 _2423 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2420, _2421));
    vec4 _2428 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2420, _2421));
    float _2430 = _2428.x;
    bool _2435 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2444 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2450 = (_2435 ? (_2444 / (cbSceneParam._m0[2u].x - _2430)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2430))) - _707;
    float _2452 = cbMtdParam._m0[24u].y + cbMtdParam._m0[22u].w;
    float _2453 = cbMtdParam._m0[24u].z + cbMtdParam._m0[23u].x;
    float _2454 = cbMtdParam._m0[24u].w + cbMtdParam._m0[23u].y;
    bool _2460 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2464 = (isnan(_2450) ? 0.0 : (isnan(0.0) ? _2450 : max(0.0, _2450))) * (-1.44269502162933349609375);
    float _4671 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4682 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4693 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2597;
    float _2598;
    float _2599;
    if ((1.0 - _669) > 0.00999999977648258209228515625)
    {
        vec4 _2516 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2420, _2421), 0.0);
        float _2518 = _2516.x;
        float _2524 = (_2435 ? (_2444 / (cbSceneParam._m0[2u].x - _2518)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2518))) - _707;
        uint _2530 = floatBitsToUint(cbInstanceData._m0[_2021]).x * 14u;
        uint _2536 = _2530 + 4u;
        float _2545 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_242, _243, _244));
        float _2553 = dot(vec3((-0.0) - _763, (-0.0) - _764, (-0.0) - _765), vec3((-0.0) - _242, (-0.0) - _243, (-0.0) - _244));
        float _2558 = ((isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2545 : (isnan(_2545) ? 0.001000000047497451305389404296875 : max(_2545, 0.001000000047497451305389404296875)))) + 1.0;
        float _2560 = (-0.0) - ((isnan(_2524) ? 0.0 : (isnan(0.0) ? _2524 : max(0.0, _2524))) * _2558);
        _2597 = _2460 ? 0.0 : ((((cbMtdParam._m0[22u].w * 0.079577468335628509521484375) * cbLight._m0[_2536].x) / ((_2558 * _2452) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2452 * 1.44269502162933349609375) * _2560)));
        _2598 = _2460 ? 0.0 : ((((cbMtdParam._m0[23u].x * 0.079577468335628509521484375) * cbLight._m0[_2536].y) / ((_2558 * _2453) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2453 * 1.44269502162933349609375) * _2560)));
        _2599 = _2460 ? 0.0 : ((((cbMtdParam._m0[23u].y * 0.079577468335628509521484375) * cbLight._m0[_2536].z) / ((_2558 * _2454) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2454 * 1.44269502162933349609375) * _2560)));
    }
    else
    {
        _2597 = 0.0;
        _2598 = 0.0;
        _2599 = 0.0;
    }
    float _2616 = 0.959999978542327880859375 - (exp2(log2(1.0 - _900) * 5.0) * 0.959999978542327880859375);
    float _2617 = (_2597 + ((exp2(_2464 * (_2460 ? 0.0 : _2452)) * _2423.x) * cbSceneParam._m0[72u].w)) * _2616;
    float _2618 = (_2598 + ((exp2(_2464 * (_2460 ? 0.0 : _2453)) * _2423.y) * cbSceneParam._m0[72u].w)) * _2616;
    float _2619 = (_2599 + ((exp2(_2464 * (_2460 ? 0.0 : _2454)) * _2423.z) * cbSceneParam._m0[72u].w)) * _2616;
    float _2627 = (_2617 + (((((_1932 * _1980.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1727) * _1996)) + _2367) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2361 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _885))) - _2617) * _669);
    float _2629 = (_2618 + (((((_1932 * _1980.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1727) * _1996)) + _2369) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2363 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _885))) - _2618) * _669);
    float _2631 = (_2619 + (((((_1932 * _1980.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1727) * _1996)) + _2371) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2365 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _885))) - _2619) * _669);
    float _2636 = cbInstanceData._m0[_860 + 6u].w * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)));
    float _2641 = _783 / cbSceneParam._m0[86u].x;
    float _2642 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2656 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2658 = _2656.x;
    float _2659 = _2656.y;
    float _2660 = _2656.z;
    float _2661 = _2656.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _2756 = _2755 / _707;
        float _2767 = _2756 * _756;
        float _2768 = _757 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2770 = _2756 * _758;
        float _2772 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2773 = _2772 + cbSceneParam._m0[79u].w;
        float _2774 = cbSceneParam._m0[79u].w - _2768;
        float _2780 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2770 * _2770));
        float _2783 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2780;
        float _2788 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_2769 - _2772) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_2773 > 0.0) ? exp2(_2788 * _2773) : (2.0 - exp2(_2789 * _2773))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2783;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : max(_2773, _2774));
            float _2932 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : min(_2773, _2774));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _3199 = ((abs(_2780 / _2769) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2788 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2788 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2789 * _2941) - exp2(_2789 * _2942)) * _2930))) + (_2783 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2661);
        _2790 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2658;
        _2792 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2659;
        _2794 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2660;
        _2796 = _3210 * _2661;
    }
    else
    {
        _2790 = _2658;
        _2792 = _2659;
        _2794 = _2660;
        _2796 = _2661;
    }
    bool _3237;
    float _2851;
    vec4 _2854;
    float _2856;
    vec4 _2858;
    float _2866;
    float _2867;
    float _2868;
    float _2869;
    bool _2879;
    for (;;)
    {
        bool _2808 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2809 = log2(_2796);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2627;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2629;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2631;
        vec4 _2826 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_783, _784));
        float _2828 = _2826.x;
        float _2849 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2828)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2828))) - _707) * 3.0;
        float _4759 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        _2851 = _2636 * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)));
        float _2852 = _772 + (-0.5);
        _2854 = cbMtdParam._m0[1u];
        _2856 = _2854.y * _2852;
        _2858 = cbMatDynParam._m0[0u];
        float _2865 = (roundEven(_2858.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2866 = _2865 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2790)));
        _2867 = _2865 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2792)));
        _2868 = _2865 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2794)));
        _2869 = _2852 * 0.999000012874603271484375;
        _2879 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2879)
        {
            if ((cbInstanceData._m0[_860 + 7u].x + _2869) < 0.5)
            {
                _3237 = true;
                break;
            }
        }
        uint _2965 = _861 + uint(_2858.w);
        if ((cbInstanceData._m0[_2965].w < 1.0) && ((cbInstanceData._m0[_2965].w + _2869) < 0.5))
        {
            _3237 = true;
            break;
        }
        if ((_2856 + 1.0) < _2854.x)
        {
            _3237 = true;
            break;
        }
        _3237 = false;
        break;
    }
    float _3276;
    if (_3237)
    {
        discard_state = true;
        _3276 = 0.0;
    }
    else
    {
        _3276 = _2851;
    }
    SV_Target.x = _2866;
    SV_Target.y = _2867;
    SV_Target.z = _2868;
    SV_Target.w = _3276;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2851;
    discard_exit();
}


