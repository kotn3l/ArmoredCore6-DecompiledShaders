#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_oceanB_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1246;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _219 = _218 * _211;
    float _220 = _218 * _212;
    float _221 = _218 * _213;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _315 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _332 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_2, SS_BumpMap), vec2((((_315 * cbMtdParam._m0[19u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_315 * cbMtdParam._m0[20u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _335 = _332.x;
    float _336 = _332.y;
    float _356 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _358 = (sqrt(((_296 * _296) + (_297 * _297)) + (_298 * _298)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0)));
    float _365 = (cbMtdParam._m0[13u].w + _358) * cbMtdParam._m0[15u].y;
    float _3870 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    vec4 _379 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _381 = _379.x;
    bool _388 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _404 = ((_388 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _381))) - POSITION_1.w) / (((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3881 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _411 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _405 : (isnan(_405) ? cbMtdParam._m0[16u].z : max(_405, cbMtdParam._m0[16u].z)));
    float _3897 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _412 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _413 = _332.z - _412;
    float _3908 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _426 = (_414 * 0.004999999888241291046142578125) + TEXCOORD.x;
    float _428 = (_414 * (-0.004999999888241291046142578125)) + TEXCOORD.y;
    vec4 _441 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_426 + (cbMtdParam._m0[18u].y * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_428 + (cbMtdParam._m0[18u].z * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _445 = _441.z;
    vec4 _458 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_426 + (cbMtdParam._m0[17u].w * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_428 + (cbMtdParam._m0[18u].x * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _462 = _458.z;
    float _465 = (_411 - _332.w) + (isnan(_462) ? _445 : (isnan(_445) ? _462 : max(_445, _462)));
    float _3924 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _469 = (TEXCOORD_5.x - _411) + cbMtdParam._m0[16u].y;
    float _470 = _469 * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)));
    float _482 = (_470 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _414);
    float _483 = (_470 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _414);
    float _484 = (_470 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _414);
    float _3935 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _486 = 1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)));
    float _493 = ((_486 - _482) * _412) + _482;
    float _494 = ((_486 - _483) * _412) + _483;
    float _495 = ((_486 - _484) * _412) + _484;
    float _500 = _358 / cbMtdParam._m0[15u].w;
    float _3946 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = (1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbMtdParam._m0[15u].z;
    float _516 = (cbMtdParam._m0[15u].x + _358) * cbMtdParam._m0[14u].y;
    float _3957 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _520 = ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3968 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _521 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _530 = _358 / cbMtdParam._m0[14u].w;
    float _3979 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _551 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[20u].y * _315) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[20u].z * _315) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _560 = ((_458.x + (-0.5)) * 0.5) + _441.x;
    float _561 = ((_458.y + (-0.5)) * 0.5) + _441.y;
    float _569 = _414 * 0.119999997317790985107421875;
    float _571 = _414 * (-0.100000001490116119384765625);
    float _582 = cbMtdParam._m0[21u].y * TEXCOORD.x;
    float _583 = cbMtdParam._m0[21u].z * TEXCOORD.y;
    vec4 _592 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].w * _315) + _569) + _582) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[21u].x * _315) + _571) + _583) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _610 = texture(sampler2D(M_Cutscene_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2((((_582 + _569) + (cbMtdParam._m0[21u].w * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_583 + _571) + (cbMtdParam._m0[22u].x * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _622 = (((0.5 - _560) * 0.10999999940395355224609375) + _560) + (((_592.x + (-1.0)) + _610.x) * cbMtdParam._m0[16u].x);
    float _623 = (((0.5 - _561) * 0.10999999940395355224609375) + _561) + (((_592.y + (-1.0)) + _610.y) * cbMtdParam._m0[16u].x);
    float _628 = ((_551.x - _622) * _531) + _622;
    float _629 = ((_551.y - _623) * _531) + _623;
    float _631 = _358 / cbMtdParam._m0[14u].z;
    float _3990 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _649 = ((((_521 * (0.5 - _335)) + _335) + (((_628 + (-0.5)) + ((0.5 - _628) * _632)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _650 = ((((_521 * (0.5 - _336)) + _336) + (((_629 + (-0.5)) + ((0.5 - _629) * _632)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _4001 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    float _664 = (cbMtdParam._m0[13u].z + _358) * cbMtdParam._m0[14u].x;
    float _4012 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * cbMtdParam._m0[17u].x;
    float _4023 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _682 = fma(_656, _240, fma(_650, _232 * TANGENT.x, _649 * _219));
    float _685 = fma(_656, _241, fma(_650, _232 * TANGENT.y, _649 * _220));
    float _688 = fma(_656, _242, fma(_650, _232 * TANGENT.z, _649 * _221));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _4034 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4045 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _697 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4067 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4078 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _705 = _388 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _771 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _780 = (_771.x * 2.0) + (-1.0);
    float _781 = (_771.y * 2.0) + (-1.0);
    float _782 = (_771.z * 2.0) + (-1.0);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _797 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _771.w;
    float _804 = (((_780 * _786) - _693) * _797) + _693;
    float _805 = (((_781 * _786) - _694) * _797) + _694;
    float _806 = (((_782 * _786) - _695) * _797) + _695;
    float _827 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, _804 * cbSceneParam._m0[5u].x));
    float _830 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, _804 * cbSceneParam._m0[6u].x));
    float _833 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, _804 * cbSceneParam._m0[7u].x));
    uint _846 = uint(roundEven(NORMAL.w)) * 13u;
    uint _848 = (_846 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_848].z;
    float _4089 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _871 = _868.x * TEXCOORD_5.w;
    float _872 = dot(vec3(_804, _805, _806), vec3(_761, _762, _763));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _804) - _761;
    float _880 = (_875 * _805) - _762;
    float _881 = (_875 * _806) - _763;
    float _885 = abs(dot(vec3(_761, _762, _763), vec3(_804, _805, _806)));
    float _4122 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _886 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _894 = 10.0 / (_705 + 10.0);
    float _895 = sqrt(_697);
    float _907 = exp2((_895 * 5.0) * log2(1.0 - (_886 * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _976 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _980 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1003 = _938 + _804;
        float _1004 = _942 + _805;
        float _1005 = _946 + _806;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_804, _805, _806), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _4170 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_804, _805, _806), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _4203 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_804, _805, _806), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4236 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1290 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1294 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1317 = _938 + _804;
        float _1318 = _942 + _805;
        float _1319 = _946 + _806;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_804, _805, _806), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4299 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_804, _805, _806), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4332 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_804, _805, _806), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4365 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = _1246;
        _1566 = _1246;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _879 * 0.5;
    float _1624 = _880 * 0.5;
    float _1625 = _881 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1753 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1756 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1784 = frontier_phi_16_14_ladder;
        }
        float _2005;
        if (_1753 > 0.0)
        {
            _2005 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2005 = frontier_phi_25_21_ladder;
        }
        float _2450;
        if (_1756 > 0.0)
        {
            _2450 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2450 = frontier_phi_37_32_ladder;
        }
        float _2452 = isnan(_2005) ? _1784 : (isnan(_1784) ? _2005 : min(_1784, _2005));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1750) + _1739;
        float _2458 = (_2453 * _1753) + _1743;
        float _2459 = (_2453 * _1756) + _1747;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_15_37_ladder = _2742.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2742.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2742.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_15_37_ladder_2;
        _1774 = frontier_phi_15_37_ladder_1;
        _1776 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1848 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1851 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _2010;
        if (_1845 > 0.0)
        {
            _2010 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2010 = frontier_phi_27_23_ladder;
        }
        float _2477;
        if (_1848 > 0.0)
        {
            _2477 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2477 = frontier_phi_39_34_ladder;
        }
        float _2927;
        if (_1851 > 0.0)
        {
            _2927 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2927 = frontier_phi_51_46_ladder;
        }
        float _2929 = isnan(_2477) ? _2010 : (isnan(_2010) ? _2477 : min(_2010, _2477));
        float _2930 = isnan(_2927) ? _2929 : (isnan(_2929) ? _2927 : min(_2929, _2927));
        float _2934 = (_2930 * _1845) + _1834;
        float _2935 = (_2930 * _1848) + _1838;
        float _2936 = (_2930 * _1851) + _1842;
        float _2937 = _2930 * 9.9999997473787516355514526367188e-05;
        float _2938 = (-1.0) - _2937;
        float _2940 = _2937 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2936 > _2940) || ((_2936 < _2938) || ((_2935 > _2940) || ((_2935 < _2938) || ((_2934 < _2938) || (_2934 > _2940))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2936, cbModelParam._m0[17u].z, fma(_2935, cbModelParam._m0[17u].y, _2934 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2936, cbModelParam._m0[18u].z, fma(_2935, cbModelParam._m0[18u].y, _2934 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2936, cbModelParam._m0[19u].z, fma(_2935, cbModelParam._m0[19u].y, _2934 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_24_51_ladder = _3139.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _3139.y * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _3139.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_24_51_ladder_2;
        _1872 = frontier_phi_24_51_ladder_1;
        _1874 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _907) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_907 * _895)) * _871;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    float _1909 = _768 / cbSceneParam._m0[86u].x;
    float _1917 = (cbSceneParam._m0[88u].y * (1.0 - _697)) + cbSceneParam._m0[88u].z;
    float _4491 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 5.0;
    float _1924 = (_894 * cbMtdParam._m0[11u].w) * dot(vec3(_804, _805, _806), vec3(1.0, 0.0, 0.0));
    vec4 _1934 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1924 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1924 + _1909) * cbSceneParam._m0[86u].x, _769), _1919).w) + _1909) * cbSceneParam._m0[86u].x, _769), _1919);
    float _1950 = 1.0 - _1934.w;
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1997 = _1984 / _1996;
    float _1998 = _1988 / _1996;
    float _1999 = _1992 / _1996;
    float _2146;
    float _2147;
    float _2148;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2026 = ((uint(_1999 > cbSceneParam._m0[59u].y) + uint(_1999 > cbSceneParam._m0[59u].x)) + uint(_1999 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2027 = _2026 + 43u;
        uint _2035 = _2026 + 44u;
        uint _2043 = _2026 + 45u;
        uint _2051 = _2026 + 46u;
        float _2062 = fma(_1996, cbSceneParam._m0[_2027].w, fma(_1992, cbSceneParam._m0[_2027].z, fma(_1988, cbSceneParam._m0[_2027].y, _1984 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1996, cbSceneParam._m0[_2035].w, fma(_1992, cbSceneParam._m0[_2035].z, fma(_1988, cbSceneParam._m0[_2035].y, _1984 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_1996, cbSceneParam._m0[_2051].w, fma(_1992, cbSceneParam._m0[_2051].z, fma(_1988, cbSceneParam._m0[_2051].y, _1984 * cbSceneParam._m0[_2051].x)));
        float _2079 = cbSceneParam._m0[33u].z * _2074;
        float _2081 = cbSceneParam._m0[33u].w * _2074;
        float _2084 = fma(_1996, cbSceneParam._m0[_2043].w, fma(_1992, cbSceneParam._m0[_2043].z, fma(_1988, cbSceneParam._m0[_2043].y, _1984 * cbSceneParam._m0[_2043].x))) / _2074;
        float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
        float _4502 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2139 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2062) / _2074, (_2081 + _2066) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2062) / _2074, (_2066 - _2079) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2079) / _2074, (_2066 - _2081) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2081) / _2074, (_2079 + _2066) / _2074), _2084), 0.0)).x), vec4(0.25)));
        _2146 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
        _2147 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
        _2148 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2146 = 1.0;
        _2147 = 1.0;
        _2148 = 1.0;
    }
    float _2212;
    float _2214;
    float _2216;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2200 = fma(_1996, cbSceneParam._m0[63u].w, fma(_1992, cbSceneParam._m0[63u].z, fma(_1988, cbSceneParam._m0[63u].y, _1984 * cbSceneParam._m0[63u].x)));
        float _2201 = fma(_1996, cbSceneParam._m0[60u].w, fma(_1992, cbSceneParam._m0[60u].z, fma(_1988, cbSceneParam._m0[60u].y, _1984 * cbSceneParam._m0[60u].x))) / _2200;
        float _2202 = fma(_1996, cbSceneParam._m0[61u].w, fma(_1992, cbSceneParam._m0[61u].z, fma(_1988, cbSceneParam._m0[61u].y, _1984 * cbSceneParam._m0[61u].x))) / _2200;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2201 >= cbSceneParam._m0[64u].x) && (_2202 >= cbSceneParam._m0[64u].y)) && (_2201 <= cbSceneParam._m0[64u].z)) && (_2202 <= cbSceneParam._m0[64u].w))
        {
            float _2490 = fma(_1996, cbSceneParam._m0[62u].w, fma(_1992, cbSceneParam._m0[62u].z, fma(_1988, cbSceneParam._m0[62u].y, _1984 * cbSceneParam._m0[62u].x))) / _2200;
            float _2494 = isnan(cbSceneParam._m0[41u].w) ? _2490 : (isnan(_2490) ? cbSceneParam._m0[41u].w : max(_2490, cbSceneParam._m0[41u].w));
            float _2537 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
            float _4518 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
            float _2544 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2201, cbSceneParam._m0[33u].w + _2202), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2201, _2202 - cbSceneParam._m0[33u].z), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].z, _2202 - cbSceneParam._m0[33u].w), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2202), _2494), 0.0)).x), vec4(0.25)));
            float _2548 = 1.0 - (_2544 * cbSceneParam._m0[34u].x);
            float _2549 = 1.0 - (_2544 * cbSceneParam._m0[34u].y);
            float _2550 = 1.0 - (_2544 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2550) ? _2148 : (isnan(_2148) ? _2550 : min(_2148, _2550));
            frontier_phi_36_35_ladder_1 = isnan(_2549) ? _2147 : (isnan(_2147) ? _2549 : min(_2147, _2549));
            frontier_phi_36_35_ladder_2 = isnan(_2548) ? _2146 : (isnan(_2146) ? _2548 : min(_2146, _2548));
        }
        else
        {
            frontier_phi_36_35_ladder = _2148;
            frontier_phi_36_35_ladder_1 = _2147;
            frontier_phi_36_35_ladder_2 = _2146;
        }
        _2212 = frontier_phi_36_35_ladder_2;
        _2214 = frontier_phi_36_35_ladder_1;
        _2216 = frontier_phi_36_35_ladder;
    }
    else
    {
        _2212 = _2146;
        _2214 = _2147;
        _2216 = _2148;
    }
    uint _2218 = _846 + 5u;
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_2218]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2229 = _871 + (-1.0);
    float _2232 = (cbLight._m0[_2224].x * _2229) + 1.0;
    float _2233 = (cbLight._m0[_2224].y * _2229) + 1.0;
    uint _2234 = _2223 + 5u;
    float _2240 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2244 = _2223 + 4u;
    float _2254 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2258 = _2223 | 1u;
    float _2269 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_804, _805, _806));
    float _2272 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_804, _805, _806));
    float _4554 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _4565 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2277 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 0.3183098733425140380859375;
    float _2279 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2286 = ((cbLight._m0[_2234].x * _2240) * _2279) + (((cbLight._m0[_2244].x * _2212) * _2254) * _2277);
    float _2287 = ((_2240 * cbLight._m0[_2234].y) * _2279) + (((cbLight._m0[_2244].y * _2214) * _2254) * _2277);
    float _2288 = ((_2240 * cbLight._m0[_2234].z) * _2279) + (((cbLight._m0[_2244].z * _2216) * _2254) * _2277);
    uint _2290 = _2223 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _697) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2223].x + _761;
    float _2306 = cbLight._m0[_2223].y + _762;
    float _2307 = cbLight._m0[_2223].z + _763;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2223].xyz));
    float _4576 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2319 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2320 = dot(vec3(_804, _805, _806), vec3(_2312, _2313, _2314));
    float _4598 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2312, _2313, _2314));
    float _4609 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2344 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2319 * ((_2318 * _2344) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2344) + _2304) * _2318))) * _2318;
    float _4620 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2371 = _2223 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _697) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2258].x + _761;
    float _2385 = cbLight._m0[_2258].y + _762;
    float _2386 = cbLight._m0[_2258].z + _763;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2258].xyz));
    float _4631 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2398 = dot(vec3(_804, _805, _806), vec3(_2391, _2392, _2393));
    float _4642 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2391, _2392, _2393));
    float _4653 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2420 = 1.0 - _2383;
    float _2430 = (0.5 / (((_2319 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2420) + _2383) * _2397))) * _2397;
    float _4664 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2442 = (((_2419 * cbLight._m0[_2371].x) * _2432) * _2240) + ((((cbLight._m0[_2290].x * _2212) * _2343) * _2357) * _2254);
    float _2443 = (((_2419 * cbLight._m0[_2371].y) * _2432) * _2240) + ((((cbLight._m0[_2290].y * _2214) * _2343) * _2357) * _2254);
    float _2444 = (((_2419 * cbLight._m0[_2371].z) * _2432) * _2240) + ((((cbLight._m0[_2290].z * _2216) * _2343) * _2357) * _2254);
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_2221.y == 0u)
    {
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.x;
        uint _2574 = uint((float(_2562.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2563))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2563)));
        float _2584 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2585 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        uint _2588 = uint(isnan(14.0) ? _2585 : (isnan(_2585) ? 14.0 : min(_2585, 14.0)));
        uvec4 _2593 = texelFetch(g_lightClusterGridBuffer, int(((_2588 << 2u) + (_2574 << 6u)) >> 2u));
        uint _2594 = _2593.x;
        uint _2595 = _2562.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2595 >> 4u) & 15u)) + 4294967295u) & _2594) == 0u) || ((_2595 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2588 << 5u) + (_2574 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_3001)
                {
                    frontier_phi_60_pred = _2988;
                    frontier_phi_60_pred_1 = _2987;
                    frontier_phi_60_pred_2 = _2986;
                    frontier_phi_60_pred_3 = _2985;
                    frontier_phi_60_pred_4 = _2989;
                    frontier_phi_60_pred_5 = _2990;
                }
                else
                {
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    uint _3219;
                    _3213 = _2985;
                    _3214 = _2986;
                    _3215 = _2987;
                    _3216 = _2988;
                    _3217 = _2989;
                    _3218 = _2990;
                    _3219 = _3000;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3223 = uint(findLSB(_3219)) + (_2991 << 5u);
                        uint _3220 = (_3219 + 4294967295u) & _3219;
                        uint _3225 = _3223 * 48u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3245 = (_3223 * 48u) + 4u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3264 = (_3223 * 48u) + 8u;
                        vec3 _3275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x));
                        float _3279 = _3239.x - _1997;
                        float _3280 = _3239.y - _1998;
                        float _3281 = _3239.z - _1999;
                        float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                        float _3285 = inversesqrt(_3282);
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3289 = dot(vec3(_827, _830, _833), vec3(_3286, _3287, _3288));
                        float _3294 = 1.0 - (_3282 * _3239.w);
                        float _4685 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3296 = sqrt(_3282) * _3258.w;
                        float _3299 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3289) + _3300;
                        float _3306 = _3296 * _3296;
                        float _3310 = ((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3295) / ((_3306 * 0.699999988079071044921875) + 1.0);
                        float _3314 = (-0.0) - _1997;
                        float _3315 = (-0.0) - _1998;
                        float _3316 = (-0.0) - _1999;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3330 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                        float _3331 = 1.0 - _895;
                        float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                        float _3339 = _3338 * _3338;
                        float _3340 = _3339 * _3339;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3343 = _3323 + _3288;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3351 = dot(vec3(_827, _830, _833), vec3(_3321, _3322, _3323));
                        float _4701 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3355 = dot(vec3(_827, _830, _833), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                        float _4712 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                        float _3363 = _3299 * _3339;
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3289) + _3364;
                        float _4723 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3369 = 1.0 - _3339;
                        float _3379 = (0.5 / (((_3368 * ((_3354 * _3369) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3339) * _3354))) * _3368;
                        float _4734 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3390 = (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) / ((_3362 * _3362) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125))) * _3295;
                        _3147 = (_3310 * _3258.x) + _3216;
                        _3148 = (_3310 * _3258.y) + _3217;
                        _3149 = (_3310 * _3258.z) + _3218;
                        _3144 = (_3390 * _3275.x) + _3213;
                        _3145 = (_3390 * _3275.y) + _3214;
                        _3146 = (_3390 * _3275.z) + _3215;
                        if (_3220 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3213 = _3144;
                            _3214 = _3145;
                            _3215 = _3146;
                            _3216 = _3147;
                            _3217 = _3148;
                            _3218 = _3149;
                            _3219 = _3220;
                        }
                    }
                    frontier_phi_60_pred = _3147;
                    frontier_phi_60_pred_1 = _3146;
                    frontier_phi_60_pred_2 = _3145;
                    frontier_phi_60_pred_3 = _3144;
                    frontier_phi_60_pred_4 = _3148;
                    frontier_phi_60_pred_5 = _3149;
                }
                _2758 = frontier_phi_60_pred;
                _2756 = frontier_phi_60_pred_1;
                _2754 = frontier_phi_60_pred_2;
                _2752 = frontier_phi_60_pred_3;
                _2760 = frontier_phi_60_pred_4;
                _2762 = frontier_phi_60_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2752;
                    _2986 = _2754;
                    _2987 = _2756;
                    _2988 = _2758;
                    _2989 = _2760;
                    _2990 = _2762;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2768) & _2594) == 0u)
        {
            _2953 = _2751;
            _2955 = _2753;
            _2957 = _2755;
            _2959 = _2757;
            _2961 = _2759;
            _2963 = _2761;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float _2979 = _2978 * _1997;
            float _2980 = _2978 * _1998;
            float _2981 = _2978 * _1999;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3196 = _2751;
                float _3197 = _2753;
                float _3198 = _2755;
                float _3199 = _2757;
                float _3200 = _2759;
                float _3201 = _2761;
                uint _3202 = _2768;
                uint _3211;
                bool _3212;
                for (;;)
                {
                    _3211 = texelFetch(g_lightClassification, int((((_2588 << 5u) + (_2574 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                    _3212 = _3211 == 0u;
                    float frontier_phi_68_pred;
                    float frontier_phi_68_pred_1;
                    float frontier_phi_68_pred_2;
                    float frontier_phi_68_pred_3;
                    float frontier_phi_68_pred_4;
                    float frontier_phi_68_pred_5;
                    if (_3212)
                    {
                        frontier_phi_68_pred = _3199;
                        frontier_phi_68_pred_1 = _3198;
                        frontier_phi_68_pred_2 = _3197;
                        frontier_phi_68_pred_3 = _3196;
                        frontier_phi_68_pred_4 = _3201;
                        frontier_phi_68_pred_5 = _3200;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3196;
                        float _3447 = _3197;
                        float _3448 = _3198;
                        float _3449 = _3199;
                        float _3450 = _3200;
                        float _3451 = _3201;
                        uint _3452 = _3211;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3202 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_1999, _3570.z, fma(_1998, _3570.y, _3570.x * _1997)) + _3570.w;
                            _3583 = !((fma(_1999, _3551.z, fma(_1998, _3551.y, _3551.x * _1997)) + _3551.w) <= 0.0);
                            float frontier_phi_74_pred;
                            float frontier_phi_74_pred_1;
                            float frontier_phi_74_pred_2;
                            float frontier_phi_74_pred_3;
                            float frontier_phi_74_pred_4;
                            float frontier_phi_74_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _1997;
                                float _3611 = _3478.y - _1998;
                                float _3612 = _3478.z - _1999;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4745 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_827, _830, _833))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_1999, _3521.z, fma(_1998, _3521.y, _3521.x * _1997)) + _3521.w) / _3582;
                                float _3642 = (fma(_1999, _3536.z, fma(_1998, _3536.y, _3536.x * _1997)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4761 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _895;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _2979;
                                float _3672 = _3618 - _2980;
                                float _3673 = _3619 - _2981;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_827, _830, _833), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4772 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3685 = dot(vec3(_827, _830, _833), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4783 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_827, _830, _833), vec3(_3617, _3618, _3619))) + _3694;
                                float _4794 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4805 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_74_pred = _3648 * _3494.x;
                                frontier_phi_74_pred_1 = _3722 * _3506.z;
                                frontier_phi_74_pred_2 = _3722 * _3506.y;
                                frontier_phi_74_pred_3 = _3722 * _3506.x;
                                frontier_phi_74_pred_4 = _3648 * _3494.y;
                                frontier_phi_74_pred_5 = _3648 * _3494.z;
                            }
                            else
                            {
                                frontier_phi_74_pred = 0.0;
                                frontier_phi_74_pred_1 = 0.0;
                                frontier_phi_74_pred_2 = 0.0;
                                frontier_phi_74_pred_3 = 0.0;
                                frontier_phi_74_pred_4 = 0.0;
                                frontier_phi_74_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_74_pred;
                            _3728 = frontier_phi_74_pred_1;
                            _3727 = frontier_phi_74_pred_2;
                            _3726 = frontier_phi_74_pred_3;
                            _3730 = frontier_phi_74_pred_4;
                            _3731 = frontier_phi_74_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_68_pred = _3436;
                        frontier_phi_68_pred_1 = _3435;
                        frontier_phi_68_pred_2 = _3434;
                        frontier_phi_68_pred_3 = _3433;
                        frontier_phi_68_pred_4 = _3438;
                        frontier_phi_68_pred_5 = _3437;
                    }
                    _2960 = frontier_phi_68_pred;
                    _2958 = frontier_phi_68_pred_1;
                    _2956 = frontier_phi_68_pred_2;
                    _2954 = frontier_phi_68_pred_3;
                    _2964 = frontier_phi_68_pred_4;
                    _2962 = frontier_phi_68_pred_5;
                    uint _3203 = _3202 + 1u;
                    if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3196 = _2954;
                        _3197 = _2956;
                        _3198 = _2958;
                        _3199 = _2960;
                        _3200 = _2962;
                        _3201 = _2964;
                        _3202 = _3203;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2964;
                frontier_phi_53_54_ladder_1 = _2962;
                frontier_phi_53_54_ladder_2 = _2960;
                frontier_phi_53_54_ladder_3 = _2958;
                frontier_phi_53_54_ladder_4 = _2954;
                frontier_phi_53_54_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_53_54_ladder = _2761;
                frontier_phi_53_54_ladder_1 = _2759;
                frontier_phi_53_54_ladder_2 = _2757;
                frontier_phi_53_54_ladder_3 = _2755;
                frontier_phi_53_54_ladder_4 = _2751;
                frontier_phi_53_54_ladder_5 = _2753;
            }
            _2953 = frontier_phi_53_54_ladder_4;
            _2955 = frontier_phi_53_54_ladder_5;
            _2957 = frontier_phi_53_54_ladder_3;
            _2959 = frontier_phi_53_54_ladder_2;
            _2961 = frontier_phi_53_54_ladder_1;
            _2963 = frontier_phi_53_54_ladder;
        }
        float _2968 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2606 = (_2968 * _2959) + _2286;
        _2608 = (_2968 * _2961) + _2287;
        _2610 = (_2968 * _2963) + _2288;
        _2612 = ((_2953 * 0.039999999105930328369140625) * _2968) + _2442;
        _2614 = ((_2955 * 0.039999999105930328369140625) * _2968) + _2443;
        _2616 = ((_2957 * 0.039999999105930328369140625) * _2968) + _2444;
    }
    else
    {
        _2606 = _2286;
        _2608 = _2287;
        _2610 = _2288;
        _2612 = _2442;
        _2614 = _2443;
        _2616 = _2444;
    }
    float _2630 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2631 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2632 = cbSceneParam._m0[86u].x * (_1909 + ((_894 * cbMtdParam._m0[11u].y) * dot(vec3(_804, _805, _806), vec3(_219, _220, _221))));
    float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
    float _2634 = isnan(_2631) ? _769 : (isnan(_769) ? _2631 : min(_769, _2631));
    vec4 _2636 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2633, _2634), 0.0);
    float _2638 = _2636.x;
    bool _2658 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2638)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2638))) > _705;
    float _2659 = _2658 ? _2633 : _768;
    float _2660 = _2658 ? _2634 : _769;
    vec4 _2662 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2659, _2660));
    vec4 _2667 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2659, _2660));
    float _2669 = _2667.x;
    bool _2674 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2683 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2689 = (_2674 ? (_2683 / (cbSceneParam._m0[2u].x - _2669)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2669))) - _705;
    float _2691 = cbMtdParam._m0[24u].y + cbMtdParam._m0[22u].w;
    float _2692 = cbMtdParam._m0[24u].z + cbMtdParam._m0[23u].x;
    float _2693 = cbMtdParam._m0[24u].w + cbMtdParam._m0[23u].y;
    bool _2699 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2703 = (isnan(_2689) ? 0.0 : (isnan(0.0) ? _2689 : max(0.0, _2689))) * (-1.44269502162933349609375);
    float _4836 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4847 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4858 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2854;
    float _2855;
    float _2856;
    if ((1.0 - _667) > 0.00999999977648258209228515625)
    {
        vec4 _2773 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2659, _2660), 0.0);
        float _2775 = _2773.x;
        float _2781 = (_2674 ? (_2683 / (cbSceneParam._m0[2u].x - _2775)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2775))) - _705;
        uint _2787 = floatBitsToUint(cbInstanceData._m0[_2218]).x * 14u;
        uint _2793 = _2787 + 4u;
        float _2802 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_240, _241, _242));
        float _2810 = dot(vec3((-0.0) - _761, (-0.0) - _762, (-0.0) - _763), vec3((-0.0) - _240, (-0.0) - _241, (-0.0) - _242));
        float _2815 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2802 : (isnan(_2802) ? 0.001000000047497451305389404296875 : max(_2802, 0.001000000047497451305389404296875)))) + 1.0;
        float _2817 = (-0.0) - ((isnan(_2781) ? 0.0 : (isnan(0.0) ? _2781 : max(0.0, _2781))) * _2815);
        _2854 = _2699 ? 0.0 : ((((cbMtdParam._m0[22u].w * 0.079577468335628509521484375) * cbLight._m0[_2793].x) / ((_2815 * _2691) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2691 * 1.44269502162933349609375) * _2817)));
        _2855 = _2699 ? 0.0 : ((((cbMtdParam._m0[23u].x * 0.079577468335628509521484375) * cbLight._m0[_2793].y) / ((_2815 * _2692) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2692 * 1.44269502162933349609375) * _2817)));
        _2856 = _2699 ? 0.0 : ((((cbMtdParam._m0[23u].y * 0.079577468335628509521484375) * cbLight._m0[_2793].z) / ((_2815 * _2693) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2693 * 1.44269502162933349609375) * _2817)));
    }
    else
    {
        _2854 = 0.0;
        _2855 = 0.0;
        _2856 = 0.0;
    }
    float _2873 = 0.959999978542327880859375 - (exp2(log2(1.0 - _886) * 5.0) * 0.959999978542327880859375);
    float _2874 = (_2854 + ((exp2(_2703 * (_2699 ? 0.0 : _2691)) * _2662.x) * cbSceneParam._m0[72u].w)) * _2873;
    float _2875 = (_2855 + ((exp2(_2703 * (_2699 ? 0.0 : _2692)) * _2662.y) * cbSceneParam._m0[72u].w)) * _2873;
    float _2876 = (_2856 + ((exp2(_2703 * (_2699 ? 0.0 : _2693)) * _2662.z) * cbSceneParam._m0[72u].w)) * _2873;
    float _2898 = _768 / cbSceneParam._m0[86u].x;
    float _2899 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2915 = _2913.x;
    float _2916 = _2913.y;
    float _2917 = _2913.z;
    float _2918 = _2913.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _3006 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _3007 = _3006 / _705;
        float _3018 = _3007 * _754;
        float _3019 = _755 * _3007;
        float _3020 = (-0.0) - _3019;
        float _3021 = _3007 * _756;
        float _3023 = (cbSceneParam._m0[77u].w * _3020) / _3006;
        float _3024 = _3023 + cbSceneParam._m0[79u].w;
        float _3025 = cbSceneParam._m0[79u].w - _3019;
        float _3031 = sqrt(((_3018 * _3018) + (_3019 * _3019)) + (_3021 * _3021));
        float _3034 = (1.0 - (cbSceneParam._m0[77u].w / _3006)) * _3031;
        float _3039 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3395;
        if (abs((_3020 - _3023) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3395 = ((((_3024 > 0.0) ? exp2(_3039 * _3024) : (2.0 - exp2(_3040 * _3024))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3034;
        }
        else
        {
            float _3169 = 1.0 / cbSceneParam._m0[80u].x;
            float _3170 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : max(_3024, _3025));
            float _3171 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : min(_3024, _3025));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            _3395 = ((abs(_3031 / _3020) * cbSceneParam._m0[80u].y) * ((((_3180 - _3181) * 2.0) - ((exp2(_3039 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)))) - exp2(_3039 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))))) * _3169)) - ((exp2(_3040 * _3180) - exp2(_3040 * _3181)) * _3169))) + (_3034 * cbSceneParam._m0[80u].z);
        }
        vec4 _3397 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, 1.0), 0.0);
        float _3406 = exp2((_3395 * (-1.44269502162933349609375)) * (1.0 - _3397.w));
        float _3407 = log2(_3406);
        float _3423 = log2(_2918);
        _3041 = (exp2(_3423 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].x)) * _3397.x) / cbSceneParam._m0[78u].x)) + _2915;
        _3043 = (exp2(_3423 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].y)) * _3397.y) / cbSceneParam._m0[78u].y)) + _2916;
        _3045 = (exp2(_3423 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].z)) * _3397.z) / cbSceneParam._m0[78u].z)) + _2917;
        _3047 = _3406 * _2918;
    }
    else
    {
        _3041 = _2915;
        _3043 = _2916;
        _3045 = _2917;
        _3047 = _2918;
    }
    bool _3059 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3060 = log2(_3047);
    float _3067 = exp2(_3060 * cbSceneParam._m0[78u].x) * ((_2874 + (((((_1886 * _1934.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1681) * _1950)) + _2612) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2606 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _871))) - _2874) * _667));
    float _3068 = exp2(_3060 * cbSceneParam._m0[78u].y) * ((_2875 + (((((_1886 * _1934.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1681) * _1950)) + _2614) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2608 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _871))) - _2875) * _667));
    float _3069 = exp2(_3060 * cbSceneParam._m0[78u].z) * ((_2876 + (((((_1886 * _1934.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1681) * _1950)) + _2616) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2610 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _871))) - _2876) * _667));
    vec4 _3077 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_768, _769));
    float _3079 = _3077.x;
    float _3100 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3079)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3079))) - _705) * 3.0;
    float _4924 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
    float _3102 = (cbInstanceData._m0[_846 + 6u].w * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)));
    float _3111 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3111 * (_3059 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.y = _3111 * (_3059 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.z = _3111 * (_3059 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3045)));
    SV_Target.w = _3102;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3102;
}


