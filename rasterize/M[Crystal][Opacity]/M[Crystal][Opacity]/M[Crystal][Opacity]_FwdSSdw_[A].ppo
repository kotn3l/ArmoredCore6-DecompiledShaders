#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _981;
float _3336;
float _3337;
float _3338;
float _3339;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _296 = dot(vec3(_265, _266, _267), vec3(_194, _195, _196));
    float _299 = dot(vec3(_265, _266, _267), vec3(_208, _209, _210));
    float _302 = dot(vec3(_265, _266, _267), vec3(_201, _202, _203));
    float _308 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _330 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _350 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_296 * cbMtdParam._m0[12u].x) * _308) * _330) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_299 * cbMtdParam._m0[12u].x) * _308) * _330) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _370 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _371 = _370 * _265;
    float _372 = _370 * _266;
    float _373 = _370 * _267;
    float _377 = dot(vec4(_371, _372, _373, 0.0), vec4(_201, _202, _203, 0.0)) - cbMtdParam._m0[12u].z;
    float _3348 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _384 = exp2(log2(1.0 - (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _400 = ((((_280.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _350.x) * cbMtdParam._m0[9u].x) * ((_384 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _405 = ((((_280.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _350.y) * cbMtdParam._m0[9u].y) * ((_384 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _410 = ((((_280.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _350.z) * cbMtdParam._m0[9u].z) * ((_384 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _423 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _431 = (_423.x * 2.0) + (-1.0);
    float _432 = (_423.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_431, _432), vec2(_431, _432));
    float _3364 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))));
    float _443 = cbMtdParam._m0[13u].y + _423.z;
    vec4 _455 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _459 = cbMtdParam._m0[13u].x * _455.x;
    float _462 = fma(_438, _201, fma(_432, _208, _431 * _194));
    float _465 = fma(_438, _202, fma(_432, _209, _431 * _195));
    float _468 = fma(_438, _203, fma(_432, _210, _431 * _196));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3375 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _476 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _477 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3391 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3402 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3413 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _496 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _501 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _503 = _501.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _660 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _666 = (cbMatDynParam._m0[5u].x * _660) + cbMatDynParam._m0[5u].y;
        float _3424 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _671 = (cbMatDynParam._m0[5u].z * _660) + cbMatDynParam._m0[5u].w;
        float _3435 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) - _667)) + _667) < ((_503 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _536 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _539 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _542 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _555 = uint(roundEven(NORMAL.w)) * 13u;
    uint _556 = _555 + 9u;
    uint _557 = _556 + uint(cbMatDynParam._m0[0u].w);
    float _563 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_557].x;
    float _564 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_557].y;
    float _565 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_557].z;
    float _3446 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _580 = _577.x * TEXCOORD.z;
    float _581 = dot(vec3(_473, _474, _475), vec3(_371, _372, _373));
    float _584 = _581 * 2.0;
    float _588 = (_584 * _473) - _371;
    float _589 = (_584 * _474) - _372;
    float _590 = (_584 * _475) - _373;
    float _591 = dot(vec3(_371, _372, _373), vec3(_473, _474, _475));
    float _594 = abs(_591);
    float _3479 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _596 = sqrt(_476);
    float _609 = exp2((_596 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_596 * 3.0));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_649, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641));
        float _709 = fma(_649, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641));
        float _713 = fma(_649, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641));
        float _738 = _641 + _473;
        float _739 = _645 + _474;
        float _740 = _649 + _475;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_473, _474, _475), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3527 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_473, _474, _475), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3560 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_473, _474, _475), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3593 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_649, cbModelParam._m0[30u].z, fma(_645, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _641));
        float _1028 = fma(_649, cbModelParam._m0[31u].z, fma(_645, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _641));
        float _1032 = fma(_649, cbModelParam._m0[32u].z, fma(_645, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _641));
        float _1055 = _641 + _473;
        float _1056 = _645 + _474;
        float _1057 = _649 + _475;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_473, _474, _475), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3656 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_473, _474, _475), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3689 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_473, _474, _475), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3722 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = _981;
        _1302 = _981;
        _1303 = _981;
        _1304 = _981;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _993)) + _993;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _994)) + _994;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _995)) + _995;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _588 * 0.5;
    float _1362 = _589 * 0.5;
    float _1363 = _590 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_980, _984, _987, _990));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_982, _985, _988, _991));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_983, _986, _989, _992));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1478 = fma(_649, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641)) + cbModelParam._m0[13u].w;
        float _1482 = fma(_649, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641)) + cbModelParam._m0[14u].w;
        float _1486 = fma(_649, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641)) + cbModelParam._m0[15u].w;
        float _1489 = fma(_590, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588));
        float _1492 = fma(_590, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588));
        float _1495 = fma(_590, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588));
        float _1523;
        if (_1489 > 0.0)
        {
            _1523 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1523 = frontier_phi_17_15_ladder;
        }
        float _1717;
        if (_1492 > 0.0)
        {
            _1717 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1717 = frontier_phi_26_22_ladder;
        }
        float _1955;
        if (_1495 > 0.0)
        {
            _1955 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1955 = frontier_phi_37_33_ladder;
        }
        float _1957 = isnan(_1717) ? _1523 : (isnan(_1523) ? _1717 : min(_1523, _1717));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1489) + _1478;
        float _1963 = (_1958 * _1492) + _1482;
        float _1964 = (_1958 * _1495) + _1486;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_16_37_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1511 = frontier_phi_16_37_ladder_2;
        _1513 = frontier_phi_16_37_ladder_1;
        _1515 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_588, _589, _590), _1430);
        _1511 = _1499.x * cbModelParam._m0[1u].y;
        _1513 = _1499.y * cbModelParam._m0[1u].y;
        _1515 = _1499.z * cbModelParam._m0[1u].y;
    }
    float _1519 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1519 : min(cbModelParam._m0[25u].w, _1519));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1577 = fma(_649, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641)) + cbModelParam._m0[21u].w;
        float _1581 = fma(_649, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641)) + cbModelParam._m0[22u].w;
        float _1585 = fma(_649, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641)) + cbModelParam._m0[23u].w;
        float _1588 = fma(_590, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588));
        float _1591 = fma(_590, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588));
        float _1594 = fma(_590, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588));
        float _1722;
        if (_1588 > 0.0)
        {
            _1722 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1722 = frontier_phi_28_24_ladder;
        }
        float _1982;
        if (_1591 > 0.0)
        {
            _1982 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1982 = frontier_phi_39_35_ladder;
        }
        float _2274;
        if (_1594 > 0.0)
        {
            _2274 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2274 = frontier_phi_50_45_ladder;
        }
        float _2276 = isnan(_1982) ? _1722 : (isnan(_1722) ? _1982 : min(_1722, _1982));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1588) + _1577;
        float _2282 = (_2277 * _1591) + _1581;
        float _2283 = (_2277 * _1594) + _1585;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1520);
            frontier_phi_25_50_ladder = _2464.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2464.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2464.x * cbModelParam._m0[1u].z;
        }
        _1613 = frontier_phi_25_50_ladder_2;
        _1615 = frontier_phi_25_50_ladder_1;
        _1617 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_588, _589, _590), _1520);
        _1613 = _1597.x * cbModelParam._m0[1u].z;
        _1615 = _1597.y * cbModelParam._m0[1u].z;
        _1617 = _1597.z * cbModelParam._m0[1u].z;
    }
    float _1629 = ((((1.0 - _609) * ((_596 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_609 * _596)) * _580;
    float _1630 = _1629 * ((cbModelParam._m0[1u].w * (_1613 - _1511)) + _1511);
    float _1631 = _1629 * ((cbModelParam._m0[1u].w * (_1615 - _1513)) + _1513);
    float _1632 = _1629 * ((cbModelParam._m0[1u].w * (_1617 - _1515)) + _1515);
    float _1635 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1630 * cbSceneParam._m0[91u].x));
    vec4 _1649 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_515, _516));
    float _1651 = _1649.w;
    float _1663 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1651);
    float _1664 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1651);
    float _1665 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1651);
    uvec4 _1669 = floatBitsToUint(cbInstanceData._m0[_555 + 5u]);
    uint _1671 = _1669.x * 14u;
    uint _1672 = _1671 + 13u;
    float _1677 = _580 + (-1.0);
    float _1680 = (cbLight._m0[_1672].x * _1677) + 1.0;
    float _1681 = (cbLight._m0[_1672].y * _1677) + 1.0;
    uint _1683 = _1671 + 4u;
    float _1694 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_473, _474, _475));
    float _1697 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    float _1698 = cbLight._m0[_1683].x * _1663;
    float _1699 = cbLight._m0[_1683].y * _1664;
    float _1700 = cbLight._m0[_1683].z * _1665;
    uint _1701 = _1671 + 5u;
    uint _1707 = _1671 | 1u;
    float _1713 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_473, _474, _475));
    float _1716 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    float _1781;
    float _1782;
    float _1783;
    if (_477 == 0.0)
    {
        float _3858 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _3869 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1735 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
        float _1737 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.3183098733425140380859375;
        _1781 = ((cbLight._m0[_1701].x * _1716) * _1737) + ((_1698 * _1697) * _1735);
        _1782 = ((_1716 * cbLight._m0[_1701].y) * _1737) + ((_1699 * _1697) * _1735);
        _1783 = ((_1716 * cbLight._m0[_1701].z) * _1737) + ((_1700 * _1697) * _1735);
    }
    else
    {
        float _1747 = _1694 + _477;
        float _1750 = (_477 * 2.0) + 1.0;
        float _1751 = (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) / _1750;
        float _1758 = _1713 + _477;
        float _1760 = (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) / _1750;
        _1781 = (((_1760 * cbLight._m0[_1701].x) * _1716) + ((_1698 * _1751) * _1697)) * 0.3183098733425140380859375;
        _1782 = (((_1760 * cbLight._m0[_1701].y) * _1716) + ((_1699 * _1751) * _1697)) * 0.3183098733425140380859375;
        _1783 = (((_1760 * cbLight._m0[_1701].z) * _1716) + ((_1700 * _1751) * _1697)) * 0.3183098733425140380859375;
    }
    uint _1787 = _1671 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1671].w)) * _476) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1671].x + _371;
    float _1806 = cbLight._m0[_1671].y + _372;
    float _1807 = cbLight._m0[_1671].z + _373;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1671].xyz));
    float _3890 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _1819 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1820 = dot(vec3(_473, _474, _475), vec3(_1812, _1813, _1814));
    float _3912 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1812, _1813, _1814));
    float _3923 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1819 * ((_1818 * _1844) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1844) + _1804) * _1818))) * _1818;
    float _3934 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1873 = _1671 + 9u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _476) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1707].x + _371;
    float _1890 = cbLight._m0[_1707].y + _372;
    float _1891 = cbLight._m0[_1707].z + _373;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1707].xyz));
    float _3945 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1903 = dot(vec3(_473, _474, _475), vec3(_1896, _1897, _1898));
    float _3956 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1896, _1897, _1898));
    float _3967 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1888 * _1888;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1888;
    float _1935 = (0.5 / (((_1819 * ((_1902 * _1925) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1925) + _1888) * _1902))) * _1902;
    float _3978 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    float _1947 = (((_1924 * cbLight._m0[_1873].x) * _1937) * _1716) + ((((cbLight._m0[_1787].x * _1663) * _1843) * _1857) * _1697);
    float _1948 = (((_1924 * cbLight._m0[_1873].y) * _1937) * _1716) + ((((cbLight._m0[_1787].y * _1664) * _1843) * _1857) * _1697);
    float _1949 = (((_1924 * cbLight._m0[_1873].z) * _1937) * _1716) + ((((cbLight._m0[_1787].z * _1665) * _1843) * _1857) * _1697);
    float _2086;
    float _2088;
    float _2090;
    float _2092;
    float _2094;
    float _2096;
    if (_1669.y == 0u)
    {
        float _2026 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2027 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2026;
        float _2028 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2026;
        float _2029 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2026;
        uvec4 _2041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2042 = _2041.x;
        uint _2053 = uint((float(_2041.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2042))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2042)));
        float _2063 = (log2(_2029 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2064 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        uint _2067 = uint(isnan(14.0) ? _2064 : (isnan(_2064) ? 14.0 : min(_2064, 14.0)));
        uvec4 _2072 = texelFetch(g_lightClusterGridBuffer, int(((_2067 << 2u) + (_2053 << 6u)) >> 2u));
        uint _2073 = _2072.x;
        uint _2074 = _2041.z;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        if (((((1u << ((_2074 >> 4u) & 15u)) + 4294967295u) & _2073) == 0u) || ((_2074 & 240u) == 0u))
        {
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
        }
        else
        {
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            uint _2338 = 0u;
            uint _2347;
            bool _2348;
            for (;;)
            {
                _2347 = texelFetch(g_lightClassification, int((((_2067 << 5u) + (_2053 << 9u)) + (_2338 << 2u)) >> 2u)).x;
                _2348 = _2347 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                float frontier_phi_59_pred_3;
                float frontier_phi_59_pred_4;
                float frontier_phi_59_pred_5;
                if (_2348)
                {
                    frontier_phi_59_pred = _2336;
                    frontier_phi_59_pred_1 = _2337;
                    frontier_phi_59_pred_2 = _2335;
                    frontier_phi_59_pred_3 = _2334;
                    frontier_phi_59_pred_4 = _2333;
                    frontier_phi_59_pred_5 = _2332;
                }
                else
                {
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    uint _2560;
                    _2554 = _2332;
                    _2555 = _2333;
                    _2556 = _2334;
                    _2557 = _2335;
                    _2558 = _2336;
                    _2559 = _2337;
                    _2560 = _2347;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    for (;;)
                    {
                        uint _2564 = uint(findLSB(_2560)) + (_2338 << 5u);
                        uint _2561 = (_2560 + 4294967295u) & _2560;
                        uint _2566 = _2564 * 48u;
                        vec4 _2580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 3u)).x));
                        uint _2586 = (_2564 * 48u) + 4u;
                        vec4 _2599 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 3u)).x));
                        float _2600 = _2599.x;
                        float _2601 = _2599.y;
                        float _2602 = _2599.z;
                        uint _2605 = (_2564 * 48u) + 8u;
                        vec3 _2616 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x));
                        uint _2621 = (_2564 * 48u) + 12u;
                        vec2 _2629 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x));
                        float _2635 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
                        float _2636 = _2635 * _2027;
                        float _2637 = _2635 * _2028;
                        float _2638 = _2635 * _2029;
                        float _2639 = _2580.x - _2027;
                        float _2640 = _2580.y - _2028;
                        float _2641 = _2580.z - _2029;
                        float _2642 = dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641));
                        float _2645 = inversesqrt(_2642);
                        float _2646 = _2645 * _2639;
                        float _2647 = _2645 * _2640;
                        float _2648 = _2645 * _2641;
                        float _2649 = dot(vec3(_536, _539, _542), vec3(_2646, _2647, _2648));
                        float _2654 = 1.0 - (_2642 * _2580.w);
                        float _3999 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2655 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2656 = sqrt(_2642) * _2599.w;
                        float _2659 = 1.39999997615814208984375 / (_2656 + 1.39999997615814208984375);
                        float _2660 = _2659 * _2659;
                        float _2661 = 1.0 - _2660;
                        float _2663 = (_2661 * _2661) * _477;
                        float _2666 = ((_2661 * _2649) + _2660) + _2663;
                        float _2671 = _2656 * _2656;
                        float _2676 = ((isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))) * _2655) / (((_2663 * 2.0) + 1.0) * ((_2671 * 0.699999988079071044921875) + 1.0));
                        float _2680 = dot(vec3(_2646, _2647, _2648), vec3(_2636, _2637, _2638));
                        float _4015 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2687 = dot(vec3((-0.0) - _2636, (-0.0) - _2637, (-0.0) - _2638), vec3(_536, _539, _542)) + 1.0;
                        float _2689 = (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0))) * 0.5;
                        float _2696 = ((_2689 * _2689) * _2629.x) * exp2((_2629.y * 32.0) * log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
                        float _2698 = _477 / (_477 + 1.0);
                        float _2714 = (-0.0) - _2027;
                        float _2715 = (-0.0) - _2028;
                        float _2716 = (-0.0) - _2029;
                        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
                        float _2721 = _2720 * _2714;
                        float _2722 = _2720 * _2715;
                        float _2723 = _2720 * _2716;
                        float _2731 = exp2(log2(1.0 / ((_2671 * 3.5) + 5.0)) * 0.25);
                        float _2732 = 1.0 - _596;
                        float _2739 = sqrt(1.0 - ((1.0 - (_2732 * _2732)) * (1.0 - (_2731 * _2731))));
                        float _2740 = _2739 * _2739;
                        float _2741 = _2740 * _2740;
                        float _2742 = _2721 + _2646;
                        float _2743 = _2722 + _2647;
                        float _2744 = _2723 + _2648;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2752 = dot(vec3(_536, _539, _542), vec3(_2721, _2722, _2723));
                        float _4031 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2755 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2756 = dot(vec3(_536, _539, _542), vec3(_2748 * _2742, _2748 * _2743, _2748 * _2744));
                        float _4042 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2763 = ((_2759 * _2759) * (_2741 + (-1.0))) + 1.0;
                        float _2764 = _2659 * _2740;
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2649) + _2765;
                        float _4053 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2770 = 1.0 - _2740;
                        float _2780 = (0.5 / (((_2769 * ((_2755 * _2770) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _2770) + _2740) * _2755))) * _2769;
                        float _4064 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2791 = (((_2741 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2763 * _2763) * ((_2671 * 2.1991131305694580078125) + 3.141590118408203125))) * _2655;
                        _2472 = (((((_2600 * 0.3183098733425140380859375) * _2698) * _2696) + _2600) * _2676) + _2557;
                        _2473 = (((((_2601 * 0.3183098733425140380859375) * _2698) * _2696) + _2601) * _2676) + _2558;
                        _2474 = (((((_2602 * 0.3183098733425140380859375) * _2698) * _2696) + _2602) * _2676) + _2559;
                        _2469 = (_2791 * _2616.x) + _2554;
                        _2470 = (_2791 * _2616.y) + _2555;
                        _2471 = (_2791 * _2616.z) + _2556;
                        if (_2561 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2554 = _2469;
                            _2555 = _2470;
                            _2556 = _2471;
                            _2557 = _2472;
                            _2558 = _2473;
                            _2559 = _2474;
                            _2560 = _2561;
                        }
                    }
                    frontier_phi_59_pred = _2473;
                    frontier_phi_59_pred_1 = _2474;
                    frontier_phi_59_pred_2 = _2472;
                    frontier_phi_59_pred_3 = _2471;
                    frontier_phi_59_pred_4 = _2470;
                    frontier_phi_59_pred_5 = _2469;
                }
                _2133 = frontier_phi_59_pred;
                _2135 = frontier_phi_59_pred_1;
                _2131 = frontier_phi_59_pred_2;
                _2129 = frontier_phi_59_pred_3;
                _2127 = frontier_phi_59_pred_4;
                _2125 = frontier_phi_59_pred_5;
                uint _2339 = _2338 + 1u;
                if (_2339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2332 = _2125;
                    _2333 = _2127;
                    _2334 = _2129;
                    _2335 = _2131;
                    _2336 = _2133;
                    _2337 = _2135;
                    _2338 = _2339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
        }
        uvec4 _2138 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2139 = _2138.z;
        uint _2141 = (_2139 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2141) & _2073) == 0u)
        {
            _2300 = _2124;
            _2302 = _2126;
            _2304 = _2128;
            _2306 = _2130;
            _2308 = _2132;
            _2310 = _2134;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
            float _2326 = _2325 * _2027;
            float _2327 = _2325 * _2028;
            float _2328 = _2325 * _2029;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2141 < ((_2139 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2537 = _2124;
                float _2538 = _2126;
                float _2539 = _2128;
                float _2540 = _2130;
                float _2541 = _2132;
                float _2542 = _2134;
                uint _2543 = _2141;
                uint _2552;
                bool _2553;
                for (;;)
                {
                    _2552 = texelFetch(g_lightClassification, int((((_2067 << 5u) + (_2053 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                    _2553 = _2552 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2553)
                    {
                        frontier_phi_71_pred = _2537;
                        frontier_phi_71_pred_1 = _2542;
                        frontier_phi_71_pred_2 = _2541;
                        frontier_phi_71_pred_3 = _2540;
                        frontier_phi_71_pred_4 = _2539;
                        frontier_phi_71_pred_5 = _2538;
                    }
                    else
                    {
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _2861 = _2537;
                        float _2862 = _2538;
                        float _2863 = _2539;
                        float _2864 = _2540;
                        float _2865 = _2541;
                        float _2866 = _2542;
                        uint _2867 = _2552;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        vec3 _2924;
                        vec2 _2933;
                        vec4 _2949;
                        vec4 _2965;
                        float _3012;
                        bool _3013;
                        for (;;)
                        {
                            uint _2878 = ((_2543 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2910 = _2909.x;
                            _2911 = _2909.y;
                            _2912 = _2909.z;
                            uint _2914 = (_2878 * 40u) + 8u;
                            _2924 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x));
                            uint _2926 = (_2878 * 40u) + 12u;
                            _2933 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x));
                            uint _2936 = (_2878 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2878 * 40u) + 20u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2878 * 40u) + 24u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2987 = (_2878 * 40u) + 28u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3012 = fma(_2029, _3000.z, fma(_2028, _3000.y, _3000.x * _2027)) + _3000.w;
                            _3013 = !((fma(_2029, _2981.z, fma(_2028, _2981.y, _2981.x * _2027)) + _2981.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3013)
                            {
                                float _3039 = _2893.x - _2027;
                                float _3040 = _2893.y - _2028;
                                float _3041 = _2893.z - _2029;
                                float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                                float _3045 = inversesqrt(_3042);
                                float _3046 = _3045 * _3039;
                                float _3047 = _3045 * _3040;
                                float _3048 = _3045 * _3041;
                                float _3052 = 1.0 - (_3042 / (_2894 * _2894));
                                float _4075 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3057 = sqrt(_3042) * _2909.w;
                                float _3059 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                                float _3060 = _3059 * _3059;
                                float _3061 = 1.0 - _3060;
                                float _3063 = (_3061 * _3061) * _477;
                                float _3066 = ((_3061 * dot(vec3(_3046, _3047, _3048), vec3(_536, _539, _542))) + _3060) + _3063;
                                float _3071 = _3057 * _3057;
                                float _3076 = (fma(_2029, _2949.z, fma(_2028, _2949.y, _2949.x * _2027)) + _2949.w) / _3012;
                                float _3077 = (fma(_2029, _2965.z, fma(_2028, _2965.y, _2965.x * _2027)) + _2965.w) / _3012;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3053) / (((_3063 * 2.0) + 1.0) * ((_3071 * 0.699999988079071044921875) + 1.0)));
                                float _3084 = (-0.0) - _2326;
                                float _3085 = (-0.0) - _2327;
                                float _3086 = (-0.0) - _2328;
                                float _3087 = dot(vec3(_3046, _3047, _3048), vec3(_2326, _2327, _2328));
                                float _4102 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3094 = dot(vec3(_3084, _3085, _3086), vec3(_536, _539, _542)) + 1.0;
                                float _3096 = (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * 0.5;
                                float _3103 = ((_3096 * _3096) * _2933.x) * exp2((_2933.y * 32.0) * log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
                                float _3105 = _477 / (_477 + 1.0);
                                float _3126 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                                float _3127 = 1.0 - _596;
                                float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                                float _3135 = _3134 * _3134;
                                float _3136 = _3135 * _3135;
                                float _3137 = _3046 - _2326;
                                float _3138 = _3047 - _2327;
                                float _3139 = _3048 - _2328;
                                float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                                float _3147 = dot(vec3(_536, _539, _542), vec3(_3084, _3085, _3086));
                                float _4118 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3151 = dot(vec3(_536, _539, _542), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                                float _4129 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                                float _3159 = _3059 * _3135;
                                float _3160 = _3159 * _3159;
                                float _3166 = ((1.0 - _3160) * dot(vec3(_536, _539, _542), vec3(_3046, _3047, _3048))) + _3160;
                                float _4140 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3168 = 1.0 - _3135;
                                float _3178 = (0.5 / (((_3167 * ((_3150 * _3168) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3135) * _3150))) * _3167;
                                float _4151 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3188 = (_3082 * _3053) * (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_3158 * _3158) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3188 * _2924.z;
                                frontier_phi_80_pred_1 = ((((_2912 * 0.3183098733425140380859375) * _3105) * _3103) + _2912) * _3083;
                                frontier_phi_80_pred_2 = ((((_2911 * 0.3183098733425140380859375) * _3105) * _3103) + _2911) * _3083;
                                frontier_phi_80_pred_3 = ((((_2910 * 0.3183098733425140380859375) * _3105) * _3103) + _2910) * _3083;
                                frontier_phi_80_pred_4 = _3188 * _2924.y;
                                frontier_phi_80_pred_5 = _3188 * _2924.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3194 = frontier_phi_80_pred;
                            _3197 = frontier_phi_80_pred_1;
                            _3196 = frontier_phi_80_pred_2;
                            _3195 = frontier_phi_80_pred_3;
                            _3193 = frontier_phi_80_pred_4;
                            _3192 = frontier_phi_80_pred_5;
                            _2842 = _3195 + _2864;
                            _2843 = _3196 + _2865;
                            _2844 = _3197 + _2866;
                            _2839 = _3192 + _2861;
                            _2840 = _3193 + _2862;
                            _2841 = _3194 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2839;
                                _2862 = _2840;
                                _2863 = _2841;
                                _2864 = _2842;
                                _2865 = _2843;
                                _2866 = _2844;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2839;
                        frontier_phi_71_pred_1 = _2844;
                        frontier_phi_71_pred_2 = _2843;
                        frontier_phi_71_pred_3 = _2842;
                        frontier_phi_71_pred_4 = _2841;
                        frontier_phi_71_pred_5 = _2840;
                    }
                    _2301 = frontier_phi_71_pred;
                    _2311 = frontier_phi_71_pred_1;
                    _2309 = frontier_phi_71_pred_2;
                    _2307 = frontier_phi_71_pred_3;
                    _2305 = frontier_phi_71_pred_4;
                    _2303 = frontier_phi_71_pred_5;
                    uint _2544 = _2543 + 1u;
                    if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2537 = _2301;
                        _2538 = _2303;
                        _2539 = _2305;
                        _2540 = _2307;
                        _2541 = _2309;
                        _2542 = _2311;
                        _2543 = _2544;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2305;
                frontier_phi_52_53_ladder_1 = _2307;
                frontier_phi_52_53_ladder_2 = _2309;
                frontier_phi_52_53_ladder_3 = _2311;
                frontier_phi_52_53_ladder_4 = _2303;
                frontier_phi_52_53_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_52_53_ladder = _2128;
                frontier_phi_52_53_ladder_1 = _2130;
                frontier_phi_52_53_ladder_2 = _2132;
                frontier_phi_52_53_ladder_3 = _2134;
                frontier_phi_52_53_ladder_4 = _2126;
                frontier_phi_52_53_ladder_5 = _2124;
            }
            _2300 = frontier_phi_52_53_ladder_5;
            _2302 = frontier_phi_52_53_ladder_4;
            _2304 = frontier_phi_52_53_ladder;
            _2306 = frontier_phi_52_53_ladder_1;
            _2308 = frontier_phi_52_53_ladder_2;
            _2310 = frontier_phi_52_53_ladder_3;
        }
        float _2315 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
        _2086 = (_2315 * _2306) + _1781;
        _2088 = (_2315 * _2308) + _1782;
        _2090 = (_2315 * _2310) + _1783;
        _2092 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1947;
        _2094 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1948;
        _2096 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1949;
    }
    else
    {
        _2086 = _1781;
        _2088 = _1782;
        _2090 = _1783;
        _2092 = _1947;
        _2094 = _1948;
        _2096 = _1949;
    }
    float _2213;
    float _2214;
    float _2215;
    if (_477 > 0.0)
    {
        uint _2145 = _1671 + 4u;
        float _2151 = (-0.0) - _371;
        float _2153 = (-0.0) - _372;
        float _2154 = (-0.0) - _373;
        float _2155 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_2151, _2153, _2154));
        float _4167 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _591 + 1.0;
        float _2161 = (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * 0.5;
        float _2166 = _2161 * _2161;
        float _2167 = _2166 * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 32.0);
        float _2169 = _477 / (_477 + 1.0);
        float _2170 = isnan(_1680) ? 1.0 : (isnan(1.0) ? _1680 : min(1.0, _1680));
        uint _2183 = _1671 + 5u;
        float _2189 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_2151, _2153, _2154));
        float _4188 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2196 = _2166 * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 32.0);
        float _2197 = isnan(_1681) ? 1.0 : (isnan(1.0) ? _1681 : min(1.0, _1681));
        _2213 = ((((_2196 * cbLight._m0[_2183].x) * _2169) * _2197) + ((((cbLight._m0[_2145].x * _1663) * _2167) * _2169) * _2170)) * 0.3183098733425140380859375;
        _2214 = ((((_2196 * cbLight._m0[_2183].y) * _2169) * _2197) + ((((cbLight._m0[_2145].y * _1664) * _2167) * _2169) * _2170)) * 0.3183098733425140380859375;
        _2215 = ((((_2196 * cbLight._m0[_2183].z) * _2169) * _2197) + ((((cbLight._m0[_2145].z * _1665) * _2167) * _2169) * _2170)) * 0.3183098733425140380859375;
    }
    else
    {
        _2213 = 0.0;
        _2214 = 0.0;
        _2215 = 0.0;
    }
    float _4204 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4215 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4226 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2234 = ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * ((_2086 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _580)) + _2213)) + ((_2092 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2235 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * ((_2088 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _580)) + _2214)) + ((_2094 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2236 = ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * ((_2090 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _580)) + _2215)) + ((_2096 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    uint _2237 = _555 + 6u;
    float _2245 = _515 / cbSceneParam._m0[86u].x;
    float _2246 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2260 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2245, _2246, (log2((isnan(cbSceneParam._m0[77u].w) ? _496 : (isnan(_496) ? cbSceneParam._m0[77u].w : min(_496, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2262 = _2260.x;
    float _2263 = _2260.y;
    float _2264 = _2260.z;
    float _2265 = _2260.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_496 > cbSceneParam._m0[78u].w)
    {
        float _2353 = isnan(_496) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _496 : min(cbSceneParam._m0[80u].w, _496));
        float _2354 = _2353 / _496;
        float _2365 = _2354 * _265;
        float _2366 = _266 * _2354;
        float _2367 = (-0.0) - _2366;
        float _2368 = _2354 * _267;
        float _2370 = (cbSceneParam._m0[77u].w * _2367) / _2353;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2366;
        float _2378 = sqrt(((_2365 * _2365) + (_2366 * _2366)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2353)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2367 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2494 = 1.0 / cbSceneParam._m0[80u].x;
            float _2495 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2496 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            float _2506 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : min(_2496, 0.0));
            _2796 = ((abs(_2378 / _2367) * cbSceneParam._m0[80u].y) * ((((_2505 - _2506) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))))) * _2494)) - ((exp2(_2388 * _2505) - exp2(_2388 * _2506)) * _2494))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2245, _2246, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2265);
        _2390 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2262;
        _2392 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2263;
        _2394 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2264;
        _2396 = _2807 * _2265;
    }
    else
    {
        _2390 = _2262;
        _2392 = _2263;
        _2394 = _2264;
        _2396 = _2265;
    }
    bool _2834;
    vec4 _2406;
    vec4 _2428;
    float _2430;
    float _2434;
    float _2435;
    float _2436;
    float _2437;
    bool _2447;
    for (;;)
    {
        _2406 = cbMatDynParam._m0[0u];
        float _2408 = roundEven(_2406.y);
        bool _2409 = _2408 == 3.0;
        float _2410 = log2(_2396);
        float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * _2234;
        float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * _2235;
        float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * _2236;
        float _2426 = _503 + (-0.5);
        _2428 = cbMtdParam._m0[1u];
        _2430 = _2428.y * _2426;
        float _2433 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2434 = _2433 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
        _2435 = _2433 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
        _2436 = _2433 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
        _2437 = _2426 * 0.999000012874603271484375;
        _2447 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2447)
        {
            if ((cbInstanceData._m0[_555 + 7u].x + _2437) < 0.5)
            {
                _2834 = true;
                break;
            }
        }
        uint _2529 = _556 + uint(_2406.w);
        if ((cbInstanceData._m0[_2529].w < 1.0) && ((cbInstanceData._m0[_2529].w + _2437) < 0.5))
        {
            _2834 = true;
            break;
        }
        if ((_2430 + 1.0) < _2428.x)
        {
            _2834 = true;
            break;
        }
        _2834 = false;
        break;
    }
    float _2852;
    if (_2834)
    {
        discard_state = true;
        _2852 = 0.0;
    }
    else
    {
        _2852 = cbInstanceData._m0[_2237].w;
    }
    SV_Target.x = _2434;
    SV_Target.y = _2435;
    SV_Target.z = _2436;
    SV_Target.w = _2852;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2237].w;
    discard_exit();
}


