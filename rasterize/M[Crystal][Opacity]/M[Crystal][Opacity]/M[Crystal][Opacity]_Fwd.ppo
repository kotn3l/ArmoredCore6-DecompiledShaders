#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _934;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _274 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _290 = dot(vec3(_259, _260, _261), vec3(_188, _189, _190));
    float _293 = dot(vec3(_259, _260, _261), vec3(_202, _203, _204));
    float _296 = dot(vec3(_259, _260, _261), vec3(_195, _196, _197));
    float _302 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _324 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _344 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_290 * cbMtdParam._m0[12u].x) * _302) * _324) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_293 * cbMtdParam._m0[12u].x) * _302) * _324) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _364 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _365 = _364 * _259;
    float _366 = _364 * _260;
    float _367 = _364 * _261;
    float _371 = dot(vec4(_365, _366, _367, 0.0), vec4(_195, _196, _197, 0.0)) - cbMtdParam._m0[12u].z;
    float _3208 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _378 = exp2(log2(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _394 = ((((_274.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _344.x) * cbMtdParam._m0[9u].x) * ((_378 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _399 = ((((_274.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _344.y) * cbMtdParam._m0[9u].y) * ((_378 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _404 = ((((_274.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _344.z) * cbMtdParam._m0[9u].z) * ((_378 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _417 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _425 = (_417.x * 2.0) + (-1.0);
    float _426 = (_417.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3224 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))));
    float _437 = cbMtdParam._m0[13u].y + _417.z;
    vec4 _449 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _453 = cbMtdParam._m0[13u].x * _449.x;
    float _456 = fma(_432, _195, fma(_426, _202, _425 * _188));
    float _459 = fma(_432, _196, fma(_426, _203, _425 * _189));
    float _462 = fma(_432, _197, fma(_426, _204, _425 * _190));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _3235 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _470 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _471 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3251 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3262 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3273 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _490 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _497 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _518 = fma(_469, cbSceneParam._m0[5u].z, fma(_468, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _467));
    float _521 = fma(_469, cbSceneParam._m0[6u].z, fma(_468, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _467));
    float _524 = fma(_469, cbSceneParam._m0[7u].z, fma(_468, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _467));
    uint _537 = uint(roundEven(NORMAL.w)) * 13u;
    uint _539 = (_537 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3284 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _496, cbSceneParam._m0[86u].y * _497));
    float _562 = _559.x * TEXCOORD.z;
    float _563 = dot(vec3(_467, _468, _469), vec3(_365, _366, _367));
    float _566 = _563 * 2.0;
    float _570 = (_566 * _467) - _365;
    float _571 = (_566 * _468) - _366;
    float _572 = (_566 * _469) - _367;
    float _573 = dot(vec3(_365, _366, _367), vec3(_467, _468, _469));
    float _576 = abs(_573);
    float _3317 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = sqrt(_470);
    float _591 = exp2((_578 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_578 * 3.0));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _662 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _666 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _691 = _623 + _467;
        float _692 = _627 + _468;
        float _693 = _631 + _469;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_467, _468, _469), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3365 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_467, _468, _469), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3398 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_467, _468, _469), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3431 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _978 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _982 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1005 = _623 + _467;
        float _1006 = _627 + _468;
        float _1007 = _631 + _469;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_467, _468, _469), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3494 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_467, _468, _469), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3527 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_467, _468, _469), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3560 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _934;
        _1244 = _934;
        _1245 = _934;
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _570 * 0.5;
    float _1312 = _571 * 0.5;
    float _1313 = _572 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _937, _940, _943));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_935, _938, _941, _944));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_936, _939, _942, _945));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _470);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_572, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570));
        float _1442 = fma(_572, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570));
        float _1445 = fma(_572, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1473 = frontier_phi_14_12_ladder;
        }
        float _1646;
        if (_1442 > 0.0)
        {
            _1646 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1646 = frontier_phi_23_19_ladder;
        }
        float _1881;
        if (_1445 > 0.0)
        {
            _1881 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1881 = frontier_phi_34_30_ladder;
        }
        float _1883 = isnan(_1646) ? _1473 : (isnan(_1473) ? _1646 : min(_1473, _1646));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1439) + _1428;
        float _1889 = (_1884 * _1442) + _1432;
        float _1890 = (_1884 * _1445) + _1436;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_13_34_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_13_34_ladder_2;
        _1463 = frontier_phi_13_34_ladder_1;
        _1465 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_570, _571, _572), _1380);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _470);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_572, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570));
        float _1541 = fma(_572, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570));
        float _1544 = fma(_572, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570));
        float _1651;
        if (_1538 > 0.0)
        {
            _1651 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1651 = frontier_phi_25_21_ladder;
        }
        float _1908;
        if (_1541 > 0.0)
        {
            _1908 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_36_32_ladder;
        }
        float _2197;
        if (_1544 > 0.0)
        {
            _2197 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2197 = frontier_phi_47_42_ladder;
        }
        float _2199 = isnan(_1908) ? _1651 : (isnan(_1651) ? _1908 : min(_1651, _1908));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1538) + _1527;
        float _2205 = (_2200 * _1541) + _1531;
        float _2206 = (_2200 * _1544) + _1535;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2207;
        float _2210 = _2207 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2206 > _2210) || ((_2206 < _2208) || ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 < _2208) || (_2204 > _2210))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2206, cbModelParam._m0[17u].z, fma(_2205, cbModelParam._m0[17u].y, _2204 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2206, cbModelParam._m0[18u].z, fma(_2205, cbModelParam._m0[18u].y, _2204 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2206, cbModelParam._m0[19u].z, fma(_2205, cbModelParam._m0[19u].y, _2204 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_22_47_ladder = _2379.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2379.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2379.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_22_47_ladder_2;
        _1565 = frontier_phi_22_47_ladder_1;
        _1567 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_570, _571, _572), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1579 = ((((1.0 - _591) * ((_578 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_591 * _578)) * _562;
    float _1580 = _1579 * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1581 = _1579 * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1582 = _1579 * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    uvec4 _1601 = floatBitsToUint(cbInstanceData._m0[_537 + 5u]);
    uint _1603 = _1601.x * 14u;
    uint _1604 = _1603 + 13u;
    float _1609 = _562 + (-1.0);
    float _1612 = (cbLight._m0[_1604].x * _1609) + 1.0;
    float _1613 = (cbLight._m0[_1604].y * _1609) + 1.0;
    uint _1615 = _1603 + 4u;
    float _1626 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_467, _468, _469));
    float _1629 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1630 = _1603 + 5u;
    uint _1636 = _1603 | 1u;
    float _1642 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_467, _468, _469));
    float _1645 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    float _1710;
    float _1711;
    float _1712;
    if (_471 == 0.0)
    {
        float _3696 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _3707 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1664 = (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.3183098733425140380859375;
        float _1666 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.3183098733425140380859375;
        _1710 = ((cbLight._m0[_1630].x * _1645) * _1666) + ((cbLight._m0[_1615].x * _1629) * _1664);
        _1711 = ((_1645 * cbLight._m0[_1630].y) * _1666) + ((_1629 * cbLight._m0[_1615].y) * _1664);
        _1712 = ((_1645 * cbLight._m0[_1630].z) * _1666) + ((_1629 * cbLight._m0[_1615].z) * _1664);
    }
    else
    {
        float _1676 = _1626 + _471;
        float _1679 = (_471 * 2.0) + 1.0;
        float _1680 = (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) / _1679;
        float _1687 = _1642 + _471;
        float _1689 = (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) / _1679;
        _1710 = (((_1689 * cbLight._m0[_1630].x) * _1645) + ((_1680 * cbLight._m0[_1615].x) * _1629)) * 0.3183098733425140380859375;
        _1711 = (((_1689 * cbLight._m0[_1630].y) * _1645) + ((_1680 * cbLight._m0[_1615].y) * _1629)) * 0.3183098733425140380859375;
        _1712 = (((_1689 * cbLight._m0[_1630].z) * _1645) + ((_1680 * cbLight._m0[_1615].z) * _1629)) * 0.3183098733425140380859375;
    }
    uint _1716 = _1603 + 8u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _470) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1603].x + _365;
    float _1735 = cbLight._m0[_1603].y + _366;
    float _1736 = cbLight._m0[_1603].z + _367;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1603].xyz));
    float _3728 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _1748 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1749 = dot(vec3(_467, _468, _469), vec3(_1741, _1742, _1743));
    float _3750 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1753 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1741, _1742, _1743));
    float _3761 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1757 = _1733 * _1733;
    float _1761 = ((_1752 * _1752) * (_1757 + (-1.0))) + 1.0;
    float _1772 = (exp2(log2(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1773 = 1.0 - _1733;
    float _1784 = (0.5 / (((_1748 * ((_1747 * _1773) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1773) + _1733) * _1747))) * _1747;
    float _3772 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1757 / ((_1761 * _1761) * 3.141590118408203125));
    uint _1799 = _1603 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _470) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1636].x + _365;
    float _1816 = cbLight._m0[_1636].y + _366;
    float _1817 = cbLight._m0[_1636].z + _367;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1636].xyz));
    float _3783 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1829 = dot(vec3(_467, _468, _469), vec3(_1822, _1823, _1824));
    float _3794 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1822, _1823, _1824));
    float _3805 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1814;
    float _1861 = (0.5 / (((_1748 * ((_1828 * _1851) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1851) + _1814) * _1828))) * _1828;
    float _3816 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1873 = (((_1850 * cbLight._m0[_1799].x) * _1863) * _1645) + (((_1772 * cbLight._m0[_1716].x) * _1786) * _1629);
    float _1874 = (((_1850 * cbLight._m0[_1799].y) * _1863) * _1645) + (((_1772 * cbLight._m0[_1716].y) * _1786) * _1629);
    float _1875 = (((_1850 * cbLight._m0[_1799].z) * _1863) * _1645) + (((_1772 * cbLight._m0[_1716].z) * _1786) * _1629);
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_1601.y == 0u)
    {
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1952;
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1952;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1952;
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _497) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _496) / _1968)));
        float _1989 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1998 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _1999 = _1998.x;
        uint _2000 = _1967.z;
        float _2050;
        float _2052;
        float _2054;
        float _2056;
        float _2058;
        float _2060;
        if (((((1u << ((_2000 >> 4u) & 15u)) + 4294967295u) & _1999) == 0u) || ((_2000 & 240u) == 0u))
        {
            _2050 = 0.0;
            _2052 = 0.0;
            _2054 = 0.0;
            _2056 = 0.0;
            _2058 = 0.0;
            _2060 = 0.0;
        }
        else
        {
            float _2051;
            float _2053;
            float _2055;
            float _2057;
            float _2059;
            float _2061;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            uint _2261 = 0u;
            uint _2270;
            bool _2271;
            for (;;)
            {
                _2270 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2261 << 2u)) >> 2u)).x;
                _2271 = _2270 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2271)
                {
                    frontier_phi_56_pred = _2257;
                    frontier_phi_56_pred_1 = _2260;
                    frontier_phi_56_pred_2 = _2259;
                    frontier_phi_56_pred_3 = _2258;
                    frontier_phi_56_pred_4 = _2256;
                    frontier_phi_56_pred_5 = _2255;
                }
                else
                {
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    uint _2459;
                    _2453 = _2255;
                    _2454 = _2256;
                    _2455 = _2257;
                    _2456 = _2258;
                    _2457 = _2259;
                    _2458 = _2260;
                    _2459 = _2270;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    for (;;)
                    {
                        uint _2463 = uint(findLSB(_2459)) + (_2261 << 5u);
                        uint _2460 = (_2459 + 4294967295u) & _2459;
                        uint _2465 = _2463 * 48u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 3u)).x));
                        uint _2485 = (_2463 * 48u) + 4u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        float _2499 = _2498.x;
                        float _2500 = _2498.y;
                        float _2501 = _2498.z;
                        uint _2504 = (_2463 * 48u) + 8u;
                        vec3 _2515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x));
                        uint _2520 = (_2463 * 48u) + 12u;
                        vec2 _2528 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2520)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 1u)).x));
                        float _2534 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
                        float _2535 = _2534 * _1953;
                        float _2536 = _2534 * _1954;
                        float _2537 = _2534 * _1955;
                        float _2538 = _2479.x - _1953;
                        float _2539 = _2479.y - _1954;
                        float _2540 = _2479.z - _1955;
                        float _2541 = dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540));
                        float _2544 = inversesqrt(_2541);
                        float _2545 = _2544 * _2538;
                        float _2546 = _2544 * _2539;
                        float _2547 = _2544 * _2540;
                        float _2548 = dot(vec3(_518, _521, _524), vec3(_2545, _2546, _2547));
                        float _2553 = 1.0 - (_2541 * _2479.w);
                        float _3837 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                        float _2554 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                        float _2555 = sqrt(_2541) * _2498.w;
                        float _2558 = 1.39999997615814208984375 / (_2555 + 1.39999997615814208984375);
                        float _2559 = _2558 * _2558;
                        float _2560 = 1.0 - _2559;
                        float _2562 = (_2560 * _2560) * _471;
                        float _2565 = ((_2560 * _2548) + _2559) + _2562;
                        float _2570 = _2555 * _2555;
                        float _2575 = ((isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))) * _2554) / (((_2562 * 2.0) + 1.0) * ((_2570 * 0.699999988079071044921875) + 1.0));
                        float _2579 = dot(vec3(_2545, _2546, _2547), vec3(_2535, _2536, _2537));
                        float _3853 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _2586 = dot(vec3((-0.0) - _2535, (-0.0) - _2536, (-0.0) - _2537), vec3(_518, _521, _524)) + 1.0;
                        float _2588 = (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0))) * 0.5;
                        float _2595 = ((_2588 * _2588) * _2528.x) * exp2((_2528.y * 32.0) * log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))));
                        float _2597 = _471 / (_471 + 1.0);
                        float _2613 = (-0.0) - _1953;
                        float _2614 = (-0.0) - _1954;
                        float _2615 = (-0.0) - _1955;
                        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
                        float _2620 = _2619 * _2613;
                        float _2621 = _2619 * _2614;
                        float _2622 = _2619 * _2615;
                        float _2630 = exp2(log2(1.0 / ((_2570 * 3.5) + 5.0)) * 0.25);
                        float _2631 = 1.0 - _578;
                        float _2638 = sqrt(1.0 - ((1.0 - (_2631 * _2631)) * (1.0 - (_2630 * _2630))));
                        float _2639 = _2638 * _2638;
                        float _2640 = _2639 * _2639;
                        float _2641 = _2620 + _2545;
                        float _2642 = _2621 + _2546;
                        float _2643 = _2622 + _2547;
                        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
                        float _2651 = dot(vec3(_518, _521, _524), vec3(_2620, _2621, _2622));
                        float _3869 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2654 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2655 = dot(vec3(_518, _521, _524), vec3(_2647 * _2641, _2647 * _2642, _2647 * _2643));
                        float _3880 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
                        float _2658 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2662 = ((_2658 * _2658) * (_2640 + (-1.0))) + 1.0;
                        float _2663 = _2558 * _2639;
                        float _2664 = _2663 * _2663;
                        float _2667 = ((1.0 - _2664) * _2548) + _2664;
                        float _3891 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2669 = 1.0 - _2639;
                        float _2679 = (0.5 / (((_2668 * ((_2654 * _2669) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2668 * _2669) + _2639) * _2654))) * _2668;
                        float _3902 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2690 = (((_2640 * 3.1415927410125732421875) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) / ((_2662 * _2662) * ((_2570 * 2.1991131305694580078125) + 3.141590118408203125))) * _2554;
                        _2387 = (((((_2499 * 0.3183098733425140380859375) * _2597) * _2595) + _2499) * _2575) + _2456;
                        _2388 = (((((_2500 * 0.3183098733425140380859375) * _2597) * _2595) + _2500) * _2575) + _2457;
                        _2389 = (((((_2501 * 0.3183098733425140380859375) * _2597) * _2595) + _2501) * _2575) + _2458;
                        _2384 = (_2690 * _2515.x) + _2453;
                        _2385 = (_2690 * _2515.y) + _2454;
                        _2386 = (_2690 * _2515.z) + _2455;
                        if (_2460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2453 = _2384;
                            _2454 = _2385;
                            _2455 = _2386;
                            _2456 = _2387;
                            _2457 = _2388;
                            _2458 = _2389;
                            _2459 = _2460;
                        }
                    }
                    frontier_phi_56_pred = _2386;
                    frontier_phi_56_pred_1 = _2389;
                    frontier_phi_56_pred_2 = _2388;
                    frontier_phi_56_pred_3 = _2387;
                    frontier_phi_56_pred_4 = _2385;
                    frontier_phi_56_pred_5 = _2384;
                }
                _2055 = frontier_phi_56_pred;
                _2061 = frontier_phi_56_pred_1;
                _2059 = frontier_phi_56_pred_2;
                _2057 = frontier_phi_56_pred_3;
                _2053 = frontier_phi_56_pred_4;
                _2051 = frontier_phi_56_pred_5;
                uint _2262 = _2261 + 1u;
                if (_2262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2255 = _2051;
                    _2256 = _2053;
                    _2257 = _2055;
                    _2258 = _2057;
                    _2259 = _2059;
                    _2260 = _2061;
                    _2261 = _2262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2050 = _2051;
            _2052 = _2053;
            _2054 = _2055;
            _2056 = _2057;
            _2058 = _2059;
            _2060 = _2061;
        }
        uvec4 _2064 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2065 = _2064.z;
        uint _2067 = (_2065 >> 8u) & 15u;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        if (((4294967295u << _2067) & _1999) == 0u)
        {
            _2223 = _2050;
            _2225 = _2052;
            _2227 = _2054;
            _2229 = _2056;
            _2231 = _2058;
            _2233 = _2060;
        }
        else
        {
            float _2248 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _2249 = _2248 * _1953;
            float _2250 = _2248 * _1954;
            float _2251 = _2248 * _1955;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2067 < ((_2065 >> 12u) & 15u))
            {
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2436 = _2050;
                float _2437 = _2052;
                float _2438 = _2054;
                float _2439 = _2056;
                float _2440 = _2058;
                float _2441 = _2060;
                uint _2442 = _2067;
                uint _2451;
                bool _2452;
                for (;;)
                {
                    _2451 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                    _2452 = _2451 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2452)
                    {
                        frontier_phi_64_pred = _2441;
                        frontier_phi_64_pred_1 = _2440;
                        frontier_phi_64_pred_2 = _2439;
                        frontier_phi_64_pred_3 = _2438;
                        frontier_phi_64_pred_4 = _2437;
                        frontier_phi_64_pred_5 = _2436;
                    }
                    else
                    {
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _2746 = _2436;
                        float _2747 = _2437;
                        float _2748 = _2438;
                        float _2749 = _2439;
                        float _2750 = _2440;
                        float _2751 = _2441;
                        uint _2752 = _2451;
                        uint _2753;
                        vec4 _2778;
                        float _2779;
                        vec4 _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        vec3 _2809;
                        vec2 _2818;
                        vec4 _2834;
                        vec4 _2850;
                        float _2897;
                        bool _2898;
                        for (;;)
                        {
                            uint _2763 = ((_2442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2752));
                            _2753 = (_2752 + 4294967295u) & _2752;
                            uint _2765 = _2763 * 40u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            _2779 = _2778.w;
                            uint _2781 = (_2763 * 40u) + 4u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2795 = _2794.x;
                            _2796 = _2794.y;
                            _2797 = _2794.z;
                            uint _2799 = (_2763 * 40u) + 8u;
                            _2809 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x));
                            uint _2811 = (_2763 * 40u) + 12u;
                            _2818 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x));
                            uint _2821 = (_2763 * 40u) + 16u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2837 = (_2763 * 40u) + 20u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2853 = (_2763 * 40u) + 24u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2872 = (_2763 * 40u) + 28u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2897 = fma(_1955, _2885.z, fma(_1954, _2885.y, _2885.x * _1953)) + _2885.w;
                            _2898 = !((fma(_1955, _2866.z, fma(_1954, _2866.y, _2866.x * _1953)) + _2866.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2898)
                            {
                                float _2924 = _2778.x - _1953;
                                float _2925 = _2778.y - _1954;
                                float _2926 = _2778.z - _1955;
                                float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                                float _2930 = inversesqrt(_2927);
                                float _2931 = _2930 * _2924;
                                float _2932 = _2930 * _2925;
                                float _2933 = _2930 * _2926;
                                float _2937 = 1.0 - (_2927 / (_2779 * _2779));
                                float _3913 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2938 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                                float _2942 = sqrt(_2927) * _2794.w;
                                float _2944 = 1.39999997615814208984375 / (_2942 + 1.39999997615814208984375);
                                float _2945 = _2944 * _2944;
                                float _2946 = 1.0 - _2945;
                                float _2948 = (_2946 * _2946) * _471;
                                float _2951 = ((_2946 * dot(vec3(_2931, _2932, _2933), vec3(_518, _521, _524))) + _2945) + _2948;
                                float _2956 = _2942 * _2942;
                                float _2961 = (fma(_1955, _2834.z, fma(_1954, _2834.y, _2834.x * _1953)) + _2834.w) / _2897;
                                float _2962 = (fma(_1955, _2850.z, fma(_1954, _2850.y, _2850.x * _1953)) + _2850.w) / _2897;
                                float _2966 = 1.0 - dot(vec2(_2961, _2962), vec2(_2961, _2962));
                                float _3929 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _2968 = _2967 * (((isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))) * _2938) / (((_2948 * 2.0) + 1.0) * ((_2956 * 0.699999988079071044921875) + 1.0)));
                                float _2969 = (-0.0) - _2249;
                                float _2970 = (-0.0) - _2250;
                                float _2971 = (-0.0) - _2251;
                                float _2972 = dot(vec3(_2931, _2932, _2933), vec3(_2249, _2250, _2251));
                                float _3940 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2979 = dot(vec3(_2969, _2970, _2971), vec3(_518, _521, _524)) + 1.0;
                                float _2981 = (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * 0.5;
                                float _2988 = ((_2981 * _2981) * _2818.x) * exp2((_2818.y * 32.0) * log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
                                float _2990 = _471 / (_471 + 1.0);
                                float _3011 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                                float _3012 = 1.0 - _578;
                                float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                                float _3020 = _3019 * _3019;
                                float _3021 = _3020 * _3020;
                                float _3022 = _2931 - _2249;
                                float _3023 = _2932 - _2250;
                                float _3024 = _2933 - _2251;
                                float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                                float _3032 = dot(vec3(_518, _521, _524), vec3(_2969, _2970, _2971));
                                float _3956 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _3036 = dot(vec3(_518, _521, _524), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                                float _3967 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                                float _3044 = _2944 * _3020;
                                float _3045 = _3044 * _3044;
                                float _3051 = ((1.0 - _3045) * dot(vec3(_518, _521, _524), vec3(_2931, _2932, _2933))) + _3045;
                                float _3978 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _3053 = 1.0 - _3020;
                                float _3063 = (0.5 / (((_3052 * ((_3035 * _3053) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3020) * _3035))) * _3052;
                                float _3989 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3073 = (_2967 * _2938) * (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) / ((_3043 * _3043) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3073 * _2809.z;
                                frontier_phi_70_pred_1 = ((((_2797 * 0.3183098733425140380859375) * _2990) * _2988) + _2797) * _2968;
                                frontier_phi_70_pred_2 = ((((_2796 * 0.3183098733425140380859375) * _2990) * _2988) + _2796) * _2968;
                                frontier_phi_70_pred_3 = ((((_2795 * 0.3183098733425140380859375) * _2990) * _2988) + _2795) * _2968;
                                frontier_phi_70_pred_4 = _3073 * _2809.y;
                                frontier_phi_70_pred_5 = _3073 * _2809.x;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3079 = frontier_phi_70_pred;
                            _3082 = frontier_phi_70_pred_1;
                            _3081 = frontier_phi_70_pred_2;
                            _3080 = frontier_phi_70_pred_3;
                            _3078 = frontier_phi_70_pred_4;
                            _3077 = frontier_phi_70_pred_5;
                            _2736 = _3080 + _2749;
                            _2737 = _3081 + _2750;
                            _2738 = _3082 + _2751;
                            _2733 = _3077 + _2746;
                            _2734 = _3078 + _2747;
                            _2735 = _3079 + _2748;
                            if (_2753 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2753;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2738;
                        frontier_phi_64_pred_1 = _2737;
                        frontier_phi_64_pred_2 = _2736;
                        frontier_phi_64_pred_3 = _2735;
                        frontier_phi_64_pred_4 = _2734;
                        frontier_phi_64_pred_5 = _2733;
                    }
                    _2234 = frontier_phi_64_pred;
                    _2232 = frontier_phi_64_pred_1;
                    _2230 = frontier_phi_64_pred_2;
                    _2228 = frontier_phi_64_pred_3;
                    _2226 = frontier_phi_64_pred_4;
                    _2224 = frontier_phi_64_pred_5;
                    uint _2443 = _2442 + 1u;
                    if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2436 = _2224;
                        _2437 = _2226;
                        _2438 = _2228;
                        _2439 = _2230;
                        _2440 = _2232;
                        _2441 = _2234;
                        _2442 = _2443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2234;
                frontier_phi_49_50_ladder_1 = _2224;
                frontier_phi_49_50_ladder_2 = _2232;
                frontier_phi_49_50_ladder_3 = _2230;
                frontier_phi_49_50_ladder_4 = _2228;
                frontier_phi_49_50_ladder_5 = _2226;
            }
            else
            {
                frontier_phi_49_50_ladder = _2060;
                frontier_phi_49_50_ladder_1 = _2050;
                frontier_phi_49_50_ladder_2 = _2058;
                frontier_phi_49_50_ladder_3 = _2056;
                frontier_phi_49_50_ladder_4 = _2054;
                frontier_phi_49_50_ladder_5 = _2052;
            }
            _2223 = frontier_phi_49_50_ladder_1;
            _2225 = frontier_phi_49_50_ladder_5;
            _2227 = frontier_phi_49_50_ladder_4;
            _2229 = frontier_phi_49_50_ladder_3;
            _2231 = frontier_phi_49_50_ladder_2;
            _2233 = frontier_phi_49_50_ladder;
        }
        float _2238 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
        _2012 = (_2238 * _2229) + _1710;
        _2014 = (_2238 * _2231) + _1711;
        _2016 = (_2238 * _2233) + _1712;
        _2018 = ((_2223 * 0.039999999105930328369140625) * _2238) + _1873;
        _2020 = ((_2225 * 0.039999999105930328369140625) * _2238) + _1874;
        _2022 = ((_2227 * 0.039999999105930328369140625) * _2238) + _1875;
    }
    else
    {
        _2012 = _1710;
        _2014 = _1711;
        _2016 = _1712;
        _2018 = _1873;
        _2020 = _1874;
        _2022 = _1875;
    }
    float _2136;
    float _2137;
    float _2138;
    if (_471 > 0.0)
    {
        uint _2071 = _1603 + 4u;
        float _2077 = (-0.0) - _365;
        float _2079 = (-0.0) - _366;
        float _2080 = (-0.0) - _367;
        float _2081 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_2077, _2079, _2080));
        float _4005 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _573 + 1.0;
        float _2087 = (isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * 0.5;
        float _2092 = _2087 * _2087;
        float _2093 = _2092 * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 32.0);
        float _2095 = _471 / (_471 + 1.0);
        float _2096 = isnan(_1612) ? 1.0 : (isnan(1.0) ? _1612 : min(1.0, _1612));
        uint _2106 = _1603 + 5u;
        float _2112 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_2077, _2079, _2080));
        float _4026 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2119 = _2092 * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 32.0);
        float _2120 = isnan(_1613) ? 1.0 : (isnan(1.0) ? _1613 : min(1.0, _1613));
        _2136 = ((((_2119 * cbLight._m0[_2106].x) * _2095) * _2120) + (((_2093 * cbLight._m0[_2071].x) * _2095) * _2096)) * 0.3183098733425140380859375;
        _2137 = ((((_2119 * cbLight._m0[_2106].y) * _2095) * _2120) + (((_2093 * cbLight._m0[_2071].y) * _2095) * _2096)) * 0.3183098733425140380859375;
        _2138 = ((((_2119 * cbLight._m0[_2106].z) * _2095) * _2120) + (((_2093 * cbLight._m0[_2071].z) * _2095) * _2096)) * 0.3183098733425140380859375;
    }
    else
    {
        _2136 = 0.0;
        _2137 = 0.0;
        _2138 = 0.0;
    }
    float _4042 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4053 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4064 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    uint _2160 = _537 + 6u;
    float _2168 = _496 / cbSceneParam._m0[86u].x;
    float _2169 = _497 / cbSceneParam._m0[86u].y;
    vec4 _2183 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2168, _2169, (log2((isnan(cbSceneParam._m0[77u].w) ? _490 : (isnan(_490) ? cbSceneParam._m0[77u].w : min(_490, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2185 = _2183.x;
    float _2186 = _2183.y;
    float _2187 = _2183.z;
    float _2188 = _2183.w;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    if (_490 > cbSceneParam._m0[78u].w)
    {
        float _2276 = isnan(_490) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _490 : min(cbSceneParam._m0[80u].w, _490));
        float _2277 = _2276 / _490;
        float _2288 = _2277 * _259;
        float _2289 = _260 * _2277;
        float _2290 = (-0.0) - _2289;
        float _2291 = _2277 * _261;
        float _2293 = (cbSceneParam._m0[77u].w * _2290) / _2276;
        float _2294 = _2293 + cbSceneParam._m0[79u].w;
        float _2295 = cbSceneParam._m0[79u].w - _2289;
        float _2301 = sqrt(((_2288 * _2288) + (_2289 * _2289)) + (_2291 * _2291));
        float _2304 = (1.0 - (cbSceneParam._m0[77u].w / _2276)) * _2301;
        float _2309 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2311 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2695;
        if (abs((_2290 - _2293) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2695 = ((((_2294 > 0.0) ? exp2(_2309 * _2294) : (2.0 - exp2(_2311 * _2294))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2304;
        }
        else
        {
            float _2409 = 1.0 / cbSceneParam._m0[80u].x;
            float _2410 = isnan(_2295) ? _2294 : (isnan(_2294) ? _2295 : max(_2294, _2295));
            float _2411 = isnan(_2295) ? _2294 : (isnan(_2294) ? _2295 : min(_2294, _2295));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            _2695 = ((abs(_2301 / _2290) * cbSceneParam._m0[80u].y) * ((((_2420 - _2421) * 2.0) - ((exp2(_2309 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)))) - exp2(_2309 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))))) * _2409)) - ((exp2(_2311 * _2420) - exp2(_2311 * _2421)) * _2409))) + (_2304 * cbSceneParam._m0[80u].z);
        }
        vec4 _2697 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2168, _2169, 1.0), 0.0);
        float _2706 = exp2((_2695 * (-1.44269502162933349609375)) * (1.0 - _2697.w));
        float _2707 = log2(_2706);
        float _2723 = log2(_2188);
        _2313 = (exp2(_2723 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].x)) * _2697.x) / cbSceneParam._m0[78u].x)) + _2185;
        _2315 = (exp2(_2723 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].y)) * _2697.y) / cbSceneParam._m0[78u].y)) + _2186;
        _2317 = (exp2(_2723 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].z)) * _2697.z) / cbSceneParam._m0[78u].z)) + _2187;
        _2319 = _2706 * _2188;
    }
    else
    {
        _2313 = _2185;
        _2315 = _2186;
        _2317 = _2187;
        _2319 = _2188;
    }
    float _2331 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2332 = _2331 == 3.0;
    float _2333 = log2(_2319);
    float _2340 = exp2(_2333 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * ((_2012 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _562)) + _2136)) + ((_2018 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2341 = exp2(_2333 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * ((_2014 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _562)) + _2137)) + ((_2020 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2342 = exp2(_2333 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * ((_2016 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _562)) + _2138)) + ((_2022 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2351 = (_2331 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2351 * (_2332 ? _2340 : (_2340 + (cbSceneParam._m0[72u].w * _2313)));
    SV_Target.y = _2351 * (_2332 ? _2341 : (_2341 + (cbSceneParam._m0[72u].w * _2315)));
    SV_Target.z = _2351 * (_2332 ? _2342 : (_2342 + (cbSceneParam._m0[72u].w * _2317)));
    SV_Target.w = cbInstanceData._m0[_2160].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2160].w;
}


