#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _979;
float _3307;
float _3308;
float _3309;
float _3310;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _294 = dot(vec3(_263, _264, _265), vec3(_192, _193, _194));
    float _297 = dot(vec3(_263, _264, _265), vec3(_206, _207, _208));
    float _300 = dot(vec3(_263, _264, _265), vec3(_199, _200, _201));
    float _306 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _328 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _348 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_294 * cbMtdParam._m0[12u].x) * _306) * _328) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_297 * cbMtdParam._m0[12u].x) * _306) * _328) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _368 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _369 = _368 * _263;
    float _370 = _368 * _264;
    float _371 = _368 * _265;
    float _375 = dot(vec4(_369, _370, _371, 0.0), vec4(_199, _200, _201, 0.0)) - cbMtdParam._m0[12u].z;
    float _3319 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _382 = exp2(log2(1.0 - (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _398 = ((((_278.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _348.x) * cbMtdParam._m0[9u].x) * ((_382 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _403 = ((((_278.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _348.y) * cbMtdParam._m0[9u].y) * ((_382 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _408 = ((((_278.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _348.z) * cbMtdParam._m0[9u].z) * ((_382 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _421 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _430 = (_421.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3335 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))));
    float _441 = cbMtdParam._m0[13u].y + _421.z;
    vec4 _453 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _457 = cbMtdParam._m0[13u].x * _453.x;
    float _460 = fma(_436, _199, fma(_430, _206, _429 * _192));
    float _463 = fma(_436, _200, fma(_430, _207, _429 * _193));
    float _466 = fma(_436, _201, fma(_430, _208, _429 * _194));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3346 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _474 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _475 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3362 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3373 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3384 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _494 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _499 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _501 = _499.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _658 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _664 = (cbMatDynParam._m0[5u].x * _658) + cbMatDynParam._m0[5u].y;
        float _3395 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _669 = (cbMatDynParam._m0[5u].z * _658) + cbMatDynParam._m0[5u].w;
        float _3406 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) - _665)) + _665) < ((_501 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _534 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _537 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _540 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _554 = _553 + 9u;
    uint _555 = _554 + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3417 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _578 = _575.x * TEXCOORD.z;
    float _579 = dot(vec3(_471, _472, _473), vec3(_369, _370, _371));
    float _582 = _579 * 2.0;
    float _586 = (_582 * _471) - _369;
    float _587 = (_582 * _472) - _370;
    float _588 = (_582 * _473) - _371;
    float _589 = dot(vec3(_369, _370, _371), vec3(_471, _472, _473));
    float _592 = abs(_589);
    float _3450 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _594 = sqrt(_474);
    float _607 = exp2((_594 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_594 * 3.0));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _978;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639));
        float _707 = fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639));
        float _711 = fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639));
        float _736 = _639 + _471;
        float _737 = _643 + _472;
        float _738 = _647 + _473;
        float _748 = fma(_738, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736)) - _703;
        float _749 = fma(_738, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736)) - _707;
        float _750 = fma(_738, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736)) - _711;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_703 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_707 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[34u].z) + ((((((_711 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _806 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_772.x + (-0.5));
        float _808 = _806 * (_772.y + (-0.5));
        float _809 = _806 * (_772.z + (-0.5));
        float _816 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_779.x + (-0.5));
        float _818 = _816 * (_779.y + (-0.5));
        float _819 = _816 * (_779.z + (-0.5));
        float _826 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_786.x + (-0.5));
        float _828 = _826 * (_786.y + (-0.5));
        float _829 = _826 * (_786.z + (-0.5));
        float _836 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_793.x + (-0.5));
        float _838 = _836 * (_793.y + (-0.5));
        float _839 = _836 * (_793.z + (-0.5));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = _807 * 0.5;
        float _844 = _817 * 0.5;
        float _845 = _827 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _860 = (dot(vec3(_471, _472, _473), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _870 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3498 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_872 + 1.0))) + _877) * _840;
        float _887 = _808 * 0.5;
        float _888 = _818 * 0.5;
        float _889 = _828 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_471, _472, _473), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3531 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_914 + 1.0))) + _919) * _841;
        float _929 = _809 * 0.5;
        float _930 = _819 * 0.5;
        float _931 = _829 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_471, _472, _473), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3564 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_956 + 1.0))) + _961) * _842;
        _978 = _809;
        _980 = _808;
        _981 = _807;
        _982 = _819;
        _983 = _818;
        _984 = _817;
        _985 = _829;
        _986 = _828;
        _987 = _827;
        _988 = _842;
        _989 = _841;
        _990 = _840;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
    }
    else
    {
        _978 = _979;
        _980 = _979;
        _981 = _979;
        _982 = _979;
        _983 = _979;
        _984 = _979;
        _985 = _979;
        _986 = _979;
        _987 = _979;
        _988 = _979;
        _989 = _979;
        _990 = _979;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1022 = fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639));
        float _1026 = fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639));
        float _1030 = fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639));
        float _1053 = _639 + _471;
        float _1054 = _643 + _472;
        float _1055 = _647 + _473;
        float _1065 = fma(_1055, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053)) - _1022;
        float _1066 = fma(_1055, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053)) - _1026;
        float _1067 = fma(_1055, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053)) - _1030;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1022 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1026 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[35u].z) + ((((((_1030 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_471, _472, _473), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3627 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_471, _472, _473), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3660 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_471, _472, _473), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3693 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _979;
        _1292 = _979;
        _1293 = _979;
        _1294 = _979;
        _1295 = _979;
        _1296 = _979;
        _1297 = _979;
        _1298 = _979;
        _1299 = _979;
        _1300 = _979;
        _1301 = _979;
        _1302 = _979;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _991)) + _991;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _992)) + _992;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _993)) + _993;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _586 * 0.5;
    float _1360 = _587 * 0.5;
    float _1361 = _588 * 0.5;
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_978, _982, _985, _988));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_980, _983, _986, _989));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_981, _984, _987, _990));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1427 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1427 : min(cbModelParam._m0[25u].z, _1427));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1476 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1480 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1484 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1487 = fma(_588, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586));
        float _1490 = fma(_588, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586));
        float _1493 = fma(_588, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586));
        float _1521;
        if (_1487 > 0.0)
        {
            _1521 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1521 = frontier_phi_17_15_ladder;
        }
        float _1694;
        if (_1490 > 0.0)
        {
            _1694 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1694 = frontier_phi_26_22_ladder;
        }
        float _1929;
        if (_1493 > 0.0)
        {
            _1929 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1929 = frontier_phi_37_33_ladder;
        }
        float _1931 = isnan(_1694) ? _1521 : (isnan(_1521) ? _1694 : min(_1521, _1694));
        float _1932 = isnan(_1929) ? _1931 : (isnan(_1931) ? _1929 : min(_1931, _1929));
        float _1936 = (_1932 * _1487) + _1476;
        float _1937 = (_1932 * _1490) + _1480;
        float _1938 = (_1932 * _1493) + _1484;
        float _1939 = _1932 * 9.9999997473787516355514526367188e-05;
        float _1941 = (-1.0) - _1939;
        float _1943 = _1939 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1938 > _1943) || ((_1938 < _1941) || ((_1937 > _1943) || ((_1937 < _1941) || ((_1936 < _1941) || (_1936 > _1943))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1938, cbModelParam._m0[9u].z, fma(_1937, cbModelParam._m0[9u].y, _1936 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1938, cbModelParam._m0[10u].z, fma(_1937, cbModelParam._m0[10u].y, _1936 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1938, cbModelParam._m0[11u].z, fma(_1937, cbModelParam._m0[11u].y, _1936 * cbModelParam._m0[11u].x))), _1428);
            frontier_phi_16_37_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1509 = frontier_phi_16_37_ladder_2;
        _1511 = frontier_phi_16_37_ladder_1;
        _1513 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_586, _587, _588), _1428);
        _1509 = _1497.x * cbModelParam._m0[1u].y;
        _1511 = _1497.y * cbModelParam._m0[1u].y;
        _1513 = _1497.z * cbModelParam._m0[1u].y;
    }
    float _1517 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1517 : min(cbModelParam._m0[25u].w, _1517));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1575 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1579 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1583 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1586 = fma(_588, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586));
        float _1589 = fma(_588, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586));
        float _1592 = fma(_588, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586));
        float _1699;
        if (_1586 > 0.0)
        {
            _1699 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1699 = frontier_phi_28_24_ladder;
        }
        float _1956;
        if (_1589 > 0.0)
        {
            _1956 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1956 = frontier_phi_39_35_ladder;
        }
        float _2245;
        if (_1592 > 0.0)
        {
            _2245 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2245 = frontier_phi_50_45_ladder;
        }
        float _2247 = isnan(_1956) ? _1699 : (isnan(_1699) ? _1956 : min(_1699, _1956));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1586) + _1575;
        float _2253 = (_2248 * _1589) + _1579;
        float _2254 = (_2248 * _1592) + _1583;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2254, cbModelParam._m0[17u].z, fma(_2253, cbModelParam._m0[17u].y, _2252 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2254, cbModelParam._m0[18u].z, fma(_2253, cbModelParam._m0[18u].y, _2252 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2254, cbModelParam._m0[19u].z, fma(_2253, cbModelParam._m0[19u].y, _2252 * cbModelParam._m0[19u].x))), _1518);
            frontier_phi_25_50_ladder = _2435.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2435.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2435.x * cbModelParam._m0[1u].z;
        }
        _1611 = frontier_phi_25_50_ladder_2;
        _1613 = frontier_phi_25_50_ladder_1;
        _1615 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_586, _587, _588), _1518);
        _1611 = _1595.x * cbModelParam._m0[1u].z;
        _1613 = _1595.y * cbModelParam._m0[1u].z;
        _1615 = _1595.z * cbModelParam._m0[1u].z;
    }
    float _1627 = ((((1.0 - _607) * ((_594 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_607 * _594)) * _578;
    float _1628 = _1627 * ((cbModelParam._m0[1u].w * (_1611 - _1509)) + _1509);
    float _1629 = _1627 * ((cbModelParam._m0[1u].w * (_1613 - _1511)) + _1511);
    float _1630 = _1627 * ((cbModelParam._m0[1u].w * (_1615 - _1513)) + _1513);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1628 * cbSceneParam._m0[91u].x));
    uvec4 _1649 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1651 = _1649.x * 14u;
    uint _1652 = _1651 + 13u;
    float _1657 = _578 + (-1.0);
    float _1660 = (cbLight._m0[_1652].x * _1657) + 1.0;
    float _1661 = (cbLight._m0[_1652].y * _1657) + 1.0;
    uint _1663 = _1651 + 4u;
    float _1674 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_471, _472, _473));
    float _1677 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1678 = _1651 + 5u;
    uint _1684 = _1651 | 1u;
    float _1690 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_471, _472, _473));
    float _1693 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    float _1758;
    float _1759;
    float _1760;
    if (_475 == 0.0)
    {
        float _3829 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _3840 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1712 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
        float _1714 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.3183098733425140380859375;
        _1758 = ((cbLight._m0[_1678].x * _1693) * _1714) + ((cbLight._m0[_1663].x * _1677) * _1712);
        _1759 = ((_1693 * cbLight._m0[_1678].y) * _1714) + ((_1677 * cbLight._m0[_1663].y) * _1712);
        _1760 = ((_1693 * cbLight._m0[_1678].z) * _1714) + ((_1677 * cbLight._m0[_1663].z) * _1712);
    }
    else
    {
        float _1724 = _1674 + _475;
        float _1727 = (_475 * 2.0) + 1.0;
        float _1728 = (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) / _1727;
        float _1735 = _1690 + _475;
        float _1737 = (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) / _1727;
        _1758 = (((_1737 * cbLight._m0[_1678].x) * _1693) + ((_1728 * cbLight._m0[_1663].x) * _1677)) * 0.3183098733425140380859375;
        _1759 = (((_1737 * cbLight._m0[_1678].y) * _1693) + ((_1728 * cbLight._m0[_1663].y) * _1677)) * 0.3183098733425140380859375;
        _1760 = (((_1737 * cbLight._m0[_1678].z) * _1693) + ((_1728 * cbLight._m0[_1663].z) * _1677)) * 0.3183098733425140380859375;
    }
    uint _1764 = _1651 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _474) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1651].x + _369;
    float _1783 = cbLight._m0[_1651].y + _370;
    float _1784 = cbLight._m0[_1651].z + _371;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1651].xyz));
    float _3861 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _1796 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1797 = dot(vec3(_471, _472, _473), vec3(_1789, _1790, _1791));
    float _3883 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1789, _1790, _1791));
    float _3894 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1796 * ((_1795 * _1821) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1821) + _1781) * _1795))) * _1795;
    float _3905 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    uint _1847 = _1651 + 9u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _474) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1684].x + _369;
    float _1864 = cbLight._m0[_1684].y + _370;
    float _1865 = cbLight._m0[_1684].z + _371;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1684].xyz));
    float _3916 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1877 = dot(vec3(_471, _472, _473), vec3(_1870, _1871, _1872));
    float _3927 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1870, _1871, _1872));
    float _3938 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1862 * _1862;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1899 = 1.0 - _1862;
    float _1909 = (0.5 / (((_1796 * ((_1876 * _1899) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1899) + _1862) * _1876))) * _1876;
    float _3949 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    float _1921 = (((_1898 * cbLight._m0[_1847].x) * _1911) * _1693) + (((_1820 * cbLight._m0[_1764].x) * _1834) * _1677);
    float _1922 = (((_1898 * cbLight._m0[_1847].y) * _1911) * _1693) + (((_1820 * cbLight._m0[_1764].y) * _1834) * _1677);
    float _1923 = (((_1898 * cbLight._m0[_1847].z) * _1911) * _1693) + (((_1820 * cbLight._m0[_1764].z) * _1834) * _1677);
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    if (_1649.y == 0u)
    {
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2000;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2000;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2000;
        uvec4 _2015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2016 = _2015.x;
        uint _2027 = uint((float(_2015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2016))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2016)));
        float _2037 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2038 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        uint _2041 = uint(isnan(14.0) ? _2038 : (isnan(_2038) ? 14.0 : min(_2038, 14.0)));
        uvec4 _2046 = texelFetch(g_lightClusterGridBuffer, int(((_2041 << 2u) + (_2027 << 6u)) >> 2u));
        uint _2047 = _2046.x;
        uint _2048 = _2015.z;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        if (((((1u << ((_2048 >> 4u) & 15u)) + 4294967295u) & _2047) == 0u) || ((_2048 & 240u) == 0u))
        {
            _2098 = 0.0;
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
        }
        else
        {
            float _2099;
            float _2101;
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                float frontier_phi_59_pred_3;
                float frontier_phi_59_pred_4;
                float frontier_phi_59_pred_5;
                if (_2319)
                {
                    frontier_phi_59_pred = _2307;
                    frontier_phi_59_pred_1 = _2308;
                    frontier_phi_59_pred_2 = _2306;
                    frontier_phi_59_pred_3 = _2305;
                    frontier_phi_59_pred_4 = _2304;
                    frontier_phi_59_pred_5 = _2303;
                }
                else
                {
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    uint _2531;
                    _2525 = _2303;
                    _2526 = _2304;
                    _2527 = _2305;
                    _2528 = _2306;
                    _2529 = _2307;
                    _2530 = _2308;
                    _2531 = _2318;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    for (;;)
                    {
                        uint _2535 = uint(findLSB(_2531)) + (_2309 << 5u);
                        uint _2532 = (_2531 + 4294967295u) & _2531;
                        uint _2537 = _2535 * 48u;
                        vec4 _2551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 3u)).x));
                        uint _2557 = (_2535 * 48u) + 4u;
                        vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 3u)).x));
                        float _2571 = _2570.x;
                        float _2572 = _2570.y;
                        float _2573 = _2570.z;
                        uint _2576 = (_2535 * 48u) + 8u;
                        vec3 _2587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x));
                        uint _2592 = (_2535 * 48u) + 12u;
                        vec2 _2600 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x));
                        float _2606 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
                        float _2607 = _2606 * _2001;
                        float _2608 = _2606 * _2002;
                        float _2609 = _2606 * _2003;
                        float _2610 = _2551.x - _2001;
                        float _2611 = _2551.y - _2002;
                        float _2612 = _2551.z - _2003;
                        float _2613 = dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612));
                        float _2616 = inversesqrt(_2613);
                        float _2617 = _2616 * _2610;
                        float _2618 = _2616 * _2611;
                        float _2619 = _2616 * _2612;
                        float _2620 = dot(vec3(_534, _537, _540), vec3(_2617, _2618, _2619));
                        float _2625 = 1.0 - (_2613 * _2551.w);
                        float _3970 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2626 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2627 = sqrt(_2613) * _2570.w;
                        float _2630 = 1.39999997615814208984375 / (_2627 + 1.39999997615814208984375);
                        float _2631 = _2630 * _2630;
                        float _2632 = 1.0 - _2631;
                        float _2634 = (_2632 * _2632) * _475;
                        float _2637 = ((_2632 * _2620) + _2631) + _2634;
                        float _2642 = _2627 * _2627;
                        float _2647 = ((isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))) * _2626) / (((_2634 * 2.0) + 1.0) * ((_2642 * 0.699999988079071044921875) + 1.0));
                        float _2651 = dot(vec3(_2617, _2618, _2619), vec3(_2607, _2608, _2609));
                        float _3986 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2658 = dot(vec3((-0.0) - _2607, (-0.0) - _2608, (-0.0) - _2609), vec3(_534, _537, _540)) + 1.0;
                        float _2660 = (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))) * 0.5;
                        float _2667 = ((_2660 * _2660) * _2600.x) * exp2((_2600.y * 32.0) * log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
                        float _2669 = _475 / (_475 + 1.0);
                        float _2685 = (-0.0) - _2001;
                        float _2686 = (-0.0) - _2002;
                        float _2687 = (-0.0) - _2003;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2642 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _594;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2617;
                        float _2714 = _2693 + _2618;
                        float _2715 = _2694 + _2619;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_534, _537, _540), vec3(_2692, _2693, _2694));
                        float _4002 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2727 = dot(vec3(_534, _537, _540), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _4013 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2630 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2620) + _2736;
                        float _4024 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _4035 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_2734 * _2734) * ((_2642 * 2.1991131305694580078125) + 3.141590118408203125))) * _2626;
                        _2443 = (((((_2571 * 0.3183098733425140380859375) * _2669) * _2667) + _2571) * _2647) + _2528;
                        _2444 = (((((_2572 * 0.3183098733425140380859375) * _2669) * _2667) + _2572) * _2647) + _2529;
                        _2445 = (((((_2573 * 0.3183098733425140380859375) * _2669) * _2667) + _2573) * _2647) + _2530;
                        _2440 = (_2762 * _2587.x) + _2525;
                        _2441 = (_2762 * _2587.y) + _2526;
                        _2442 = (_2762 * _2587.z) + _2527;
                        if (_2532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2525 = _2440;
                            _2526 = _2441;
                            _2527 = _2442;
                            _2528 = _2443;
                            _2529 = _2444;
                            _2530 = _2445;
                            _2531 = _2532;
                        }
                    }
                    frontier_phi_59_pred = _2444;
                    frontier_phi_59_pred_1 = _2445;
                    frontier_phi_59_pred_2 = _2443;
                    frontier_phi_59_pred_3 = _2442;
                    frontier_phi_59_pred_4 = _2441;
                    frontier_phi_59_pred_5 = _2440;
                }
                _2107 = frontier_phi_59_pred;
                _2109 = frontier_phi_59_pred_1;
                _2105 = frontier_phi_59_pred_2;
                _2103 = frontier_phi_59_pred_3;
                _2101 = frontier_phi_59_pred_4;
                _2099 = frontier_phi_59_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2099;
                    _2304 = _2101;
                    _2305 = _2103;
                    _2306 = _2105;
                    _2307 = _2107;
                    _2308 = _2109;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2098 = _2099;
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
        }
        uvec4 _2112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2113 = _2112.z;
        uint _2115 = (_2113 >> 8u) & 15u;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        if (((4294967295u << _2115) & _2047) == 0u)
        {
            _2271 = _2098;
            _2273 = _2100;
            _2275 = _2102;
            _2277 = _2104;
            _2279 = _2106;
            _2281 = _2108;
        }
        else
        {
            float _2296 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _2297 = _2296 * _2001;
            float _2298 = _2296 * _2002;
            float _2299 = _2296 * _2003;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2115 < ((_2113 >> 12u) & 15u))
            {
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2508 = _2098;
                float _2509 = _2100;
                float _2510 = _2102;
                float _2511 = _2104;
                float _2512 = _2106;
                float _2513 = _2108;
                uint _2514 = _2115;
                uint _2523;
                bool _2524;
                for (;;)
                {
                    _2523 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                    _2524 = _2523 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2524)
                    {
                        frontier_phi_71_pred = _2508;
                        frontier_phi_71_pred_1 = _2513;
                        frontier_phi_71_pred_2 = _2512;
                        frontier_phi_71_pred_3 = _2511;
                        frontier_phi_71_pred_4 = _2510;
                        frontier_phi_71_pred_5 = _2509;
                    }
                    else
                    {
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _2832 = _2508;
                        float _2833 = _2509;
                        float _2834 = _2510;
                        float _2835 = _2511;
                        float _2836 = _2512;
                        float _2837 = _2513;
                        uint _2838 = _2523;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        vec3 _2895;
                        vec2 _2904;
                        vec4 _2920;
                        vec4 _2936;
                        float _2983;
                        bool _2984;
                        for (;;)
                        {
                            uint _2849 = ((_2514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2881 = _2880.x;
                            _2882 = _2880.y;
                            _2883 = _2880.z;
                            uint _2885 = (_2849 * 40u) + 8u;
                            _2895 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x));
                            uint _2897 = (_2849 * 40u) + 12u;
                            _2904 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x));
                            uint _2907 = (_2849 * 40u) + 16u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2849 * 40u) + 20u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2849 * 40u) + 24u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2958 = (_2849 * 40u) + 28u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2983 = fma(_2003, _2971.z, fma(_2002, _2971.y, _2971.x * _2001)) + _2971.w;
                            _2984 = !((fma(_2003, _2952.z, fma(_2002, _2952.y, _2952.x * _2001)) + _2952.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2984)
                            {
                                float _3010 = _2864.x - _2001;
                                float _3011 = _2864.y - _2002;
                                float _3012 = _2864.z - _2003;
                                float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                                float _3016 = inversesqrt(_3013);
                                float _3017 = _3016 * _3010;
                                float _3018 = _3016 * _3011;
                                float _3019 = _3016 * _3012;
                                float _3023 = 1.0 - (_3013 / (_2865 * _2865));
                                float _4046 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3028 = sqrt(_3013) * _2880.w;
                                float _3030 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                                float _3031 = _3030 * _3030;
                                float _3032 = 1.0 - _3031;
                                float _3034 = (_3032 * _3032) * _475;
                                float _3037 = ((_3032 * dot(vec3(_3017, _3018, _3019), vec3(_534, _537, _540))) + _3031) + _3034;
                                float _3042 = _3028 * _3028;
                                float _3047 = (fma(_2003, _2920.z, fma(_2002, _2920.y, _2920.x * _2001)) + _2920.w) / _2983;
                                float _3048 = (fma(_2003, _2936.z, fma(_2002, _2936.y, _2936.x * _2001)) + _2936.w) / _2983;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3024) / (((_3034 * 2.0) + 1.0) * ((_3042 * 0.699999988079071044921875) + 1.0)));
                                float _3055 = (-0.0) - _2297;
                                float _3056 = (-0.0) - _2298;
                                float _3057 = (-0.0) - _2299;
                                float _3058 = dot(vec3(_3017, _3018, _3019), vec3(_2297, _2298, _2299));
                                float _4073 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3065 = dot(vec3(_3055, _3056, _3057), vec3(_534, _537, _540)) + 1.0;
                                float _3067 = (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * 0.5;
                                float _3074 = ((_3067 * _3067) * _2904.x) * exp2((_2904.y * 32.0) * log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))));
                                float _3076 = _475 / (_475 + 1.0);
                                float _3097 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                                float _3098 = 1.0 - _594;
                                float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                                float _3106 = _3105 * _3105;
                                float _3107 = _3106 * _3106;
                                float _3108 = _3017 - _2297;
                                float _3109 = _3018 - _2298;
                                float _3110 = _3019 - _2299;
                                float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                                float _3118 = dot(vec3(_534, _537, _540), vec3(_3055, _3056, _3057));
                                float _4089 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3122 = dot(vec3(_534, _537, _540), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                                float _4100 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                                float _3130 = _3030 * _3106;
                                float _3131 = _3130 * _3130;
                                float _3137 = ((1.0 - _3131) * dot(vec3(_534, _537, _540), vec3(_3017, _3018, _3019))) + _3131;
                                float _4111 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3139 = 1.0 - _3106;
                                float _3149 = (0.5 / (((_3138 * ((_3121 * _3139) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3106) * _3121))) * _3138;
                                float _4122 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3159 = (_3053 * _3024) * (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_3129 * _3129) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3159 * _2895.z;
                                frontier_phi_80_pred_1 = ((((_2883 * 0.3183098733425140380859375) * _3076) * _3074) + _2883) * _3054;
                                frontier_phi_80_pred_2 = ((((_2882 * 0.3183098733425140380859375) * _3076) * _3074) + _2882) * _3054;
                                frontier_phi_80_pred_3 = ((((_2881 * 0.3183098733425140380859375) * _3076) * _3074) + _2881) * _3054;
                                frontier_phi_80_pred_4 = _3159 * _2895.y;
                                frontier_phi_80_pred_5 = _3159 * _2895.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_80_pred;
                            _3168 = frontier_phi_80_pred_1;
                            _3167 = frontier_phi_80_pred_2;
                            _3166 = frontier_phi_80_pred_3;
                            _3164 = frontier_phi_80_pred_4;
                            _3163 = frontier_phi_80_pred_5;
                            _2813 = _3166 + _2835;
                            _2814 = _3167 + _2836;
                            _2815 = _3168 + _2837;
                            _2810 = _3163 + _2832;
                            _2811 = _3164 + _2833;
                            _2812 = _3165 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2810;
                                _2833 = _2811;
                                _2834 = _2812;
                                _2835 = _2813;
                                _2836 = _2814;
                                _2837 = _2815;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2810;
                        frontier_phi_71_pred_1 = _2815;
                        frontier_phi_71_pred_2 = _2814;
                        frontier_phi_71_pred_3 = _2813;
                        frontier_phi_71_pred_4 = _2812;
                        frontier_phi_71_pred_5 = _2811;
                    }
                    _2272 = frontier_phi_71_pred;
                    _2282 = frontier_phi_71_pred_1;
                    _2280 = frontier_phi_71_pred_2;
                    _2278 = frontier_phi_71_pred_3;
                    _2276 = frontier_phi_71_pred_4;
                    _2274 = frontier_phi_71_pred_5;
                    uint _2515 = _2514 + 1u;
                    if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2508 = _2272;
                        _2509 = _2274;
                        _2510 = _2276;
                        _2511 = _2278;
                        _2512 = _2280;
                        _2513 = _2282;
                        _2514 = _2515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2276;
                frontier_phi_52_53_ladder_1 = _2278;
                frontier_phi_52_53_ladder_2 = _2280;
                frontier_phi_52_53_ladder_3 = _2282;
                frontier_phi_52_53_ladder_4 = _2274;
                frontier_phi_52_53_ladder_5 = _2272;
            }
            else
            {
                frontier_phi_52_53_ladder = _2102;
                frontier_phi_52_53_ladder_1 = _2104;
                frontier_phi_52_53_ladder_2 = _2106;
                frontier_phi_52_53_ladder_3 = _2108;
                frontier_phi_52_53_ladder_4 = _2100;
                frontier_phi_52_53_ladder_5 = _2098;
            }
            _2271 = frontier_phi_52_53_ladder_5;
            _2273 = frontier_phi_52_53_ladder_4;
            _2275 = frontier_phi_52_53_ladder;
            _2277 = frontier_phi_52_53_ladder_1;
            _2279 = frontier_phi_52_53_ladder_2;
            _2281 = frontier_phi_52_53_ladder_3;
        }
        float _2286 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _2060 = (_2286 * _2277) + _1758;
        _2062 = (_2286 * _2279) + _1759;
        _2064 = (_2286 * _2281) + _1760;
        _2066 = ((_2271 * 0.039999999105930328369140625) * _2286) + _1921;
        _2068 = ((_2273 * 0.039999999105930328369140625) * _2286) + _1922;
        _2070 = ((_2275 * 0.039999999105930328369140625) * _2286) + _1923;
    }
    else
    {
        _2060 = _1758;
        _2062 = _1759;
        _2064 = _1760;
        _2066 = _1921;
        _2068 = _1922;
        _2070 = _1923;
    }
    float _2184;
    float _2185;
    float _2186;
    if (_475 > 0.0)
    {
        uint _2119 = _1651 + 4u;
        float _2125 = (-0.0) - _369;
        float _2127 = (-0.0) - _370;
        float _2128 = (-0.0) - _371;
        float _2129 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_2125, _2127, _2128));
        float _4138 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _589 + 1.0;
        float _2135 = (isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * 0.5;
        float _2140 = _2135 * _2135;
        float _2141 = _2140 * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 32.0);
        float _2143 = _475 / (_475 + 1.0);
        float _2144 = isnan(_1660) ? 1.0 : (isnan(1.0) ? _1660 : min(1.0, _1660));
        uint _2154 = _1651 + 5u;
        float _2160 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_2125, _2127, _2128));
        float _4159 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = _2140 * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 32.0);
        float _2168 = isnan(_1661) ? 1.0 : (isnan(1.0) ? _1661 : min(1.0, _1661));
        _2184 = ((((_2167 * cbLight._m0[_2154].x) * _2143) * _2168) + (((_2141 * cbLight._m0[_2119].x) * _2143) * _2144)) * 0.3183098733425140380859375;
        _2185 = ((((_2167 * cbLight._m0[_2154].y) * _2143) * _2168) + (((_2141 * cbLight._m0[_2119].y) * _2143) * _2144)) * 0.3183098733425140380859375;
        _2186 = ((((_2167 * cbLight._m0[_2154].z) * _2143) * _2168) + (((_2141 * cbLight._m0[_2119].z) * _2143) * _2144)) * 0.3183098733425140380859375;
    }
    else
    {
        _2184 = 0.0;
        _2185 = 0.0;
        _2186 = 0.0;
    }
    float _4175 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4186 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4197 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2205 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * ((_2060 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _578)) + _2184)) + ((_2066 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    float _2206 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * ((_2062 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _578)) + _2185)) + ((_2068 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    float _2207 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * ((_2064 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _578)) + _2186)) + ((_2070 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    uint _2208 = _553 + 6u;
    float _2216 = _513 / cbSceneParam._m0[86u].x;
    float _2217 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2231 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2216, _2217, (log2((isnan(cbSceneParam._m0[77u].w) ? _494 : (isnan(_494) ? cbSceneParam._m0[77u].w : min(_494, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2233 = _2231.x;
    float _2234 = _2231.y;
    float _2235 = _2231.z;
    float _2236 = _2231.w;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    if (_494 > cbSceneParam._m0[78u].w)
    {
        float _2324 = isnan(_494) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _494 : min(cbSceneParam._m0[80u].w, _494));
        float _2325 = _2324 / _494;
        float _2336 = _2325 * _263;
        float _2337 = _264 * _2325;
        float _2338 = (-0.0) - _2337;
        float _2339 = _2325 * _265;
        float _2341 = (cbSceneParam._m0[77u].w * _2338) / _2324;
        float _2342 = _2341 + cbSceneParam._m0[79u].w;
        float _2343 = cbSceneParam._m0[79u].w - _2337;
        float _2349 = sqrt(((_2336 * _2336) + (_2337 * _2337)) + (_2339 * _2339));
        float _2352 = (1.0 - (cbSceneParam._m0[77u].w / _2324)) * _2349;
        float _2357 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2359 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2338 - _2341) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2342 > 0.0) ? exp2(_2357 * _2342) : (2.0 - exp2(_2359 * _2342))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2352;
        }
        else
        {
            float _2465 = 1.0 / cbSceneParam._m0[80u].x;
            float _2466 = isnan(_2343) ? _2342 : (isnan(_2342) ? _2343 : max(_2342, _2343));
            float _2467 = isnan(_2343) ? _2342 : (isnan(_2342) ? _2343 : min(_2342, _2343));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            _2767 = ((abs(_2349 / _2338) * cbSceneParam._m0[80u].y) * ((((_2476 - _2477) * 2.0) - ((exp2(_2357 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)))) - exp2(_2357 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))))) * _2465)) - ((exp2(_2359 * _2476) - exp2(_2359 * _2477)) * _2465))) + (_2352 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2216, _2217, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2236);
        _2361 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2233;
        _2363 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2234;
        _2365 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2235;
        _2367 = _2778 * _2236;
    }
    else
    {
        _2361 = _2233;
        _2363 = _2234;
        _2365 = _2235;
        _2367 = _2236;
    }
    bool _2805;
    vec4 _2377;
    vec4 _2399;
    float _2401;
    float _2405;
    float _2406;
    float _2407;
    float _2408;
    bool _2418;
    for (;;)
    {
        _2377 = cbMatDynParam._m0[0u];
        float _2379 = roundEven(_2377.y);
        bool _2380 = _2379 == 3.0;
        float _2381 = log2(_2367);
        float _2388 = exp2(_2381 * cbSceneParam._m0[78u].x) * _2205;
        float _2389 = exp2(_2381 * cbSceneParam._m0[78u].y) * _2206;
        float _2390 = exp2(_2381 * cbSceneParam._m0[78u].z) * _2207;
        float _2397 = _501 + (-0.5);
        _2399 = cbMtdParam._m0[1u];
        _2401 = _2399.y * _2397;
        float _2404 = (_2379 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2405 = _2404 * (_2380 ? _2388 : (_2388 + (cbSceneParam._m0[72u].w * _2361)));
        _2406 = _2404 * (_2380 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2363)));
        _2407 = _2404 * (_2380 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2365)));
        _2408 = _2397 * 0.999000012874603271484375;
        _2418 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2418)
        {
            if ((cbInstanceData._m0[_553 + 7u].x + _2408) < 0.5)
            {
                _2805 = true;
                break;
            }
        }
        uint _2500 = _554 + uint(_2377.w);
        if ((cbInstanceData._m0[_2500].w < 1.0) && ((cbInstanceData._m0[_2500].w + _2408) < 0.5))
        {
            _2805 = true;
            break;
        }
        if ((_2401 + 1.0) < _2399.x)
        {
            _2805 = true;
            break;
        }
        _2805 = false;
        break;
    }
    float _2823;
    if (_2805)
    {
        discard_state = true;
        _2823 = 0.0;
    }
    else
    {
        _2823 = cbInstanceData._m0[_2208].w;
    }
    SV_Target.x = _2405;
    SV_Target.y = _2406;
    SV_Target.z = _2407;
    SV_Target.w = _2823;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2208].w;
    discard_exit();
}


