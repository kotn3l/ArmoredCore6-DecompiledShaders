#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _983;
float _3597;
float _3598;
float _3599;
float _3600;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _298 = dot(vec3(_267, _268, _269), vec3(_196, _197, _198));
    float _301 = dot(vec3(_267, _268, _269), vec3(_210, _211, _212));
    float _304 = dot(vec3(_267, _268, _269), vec3(_203, _204, _205));
    float _310 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _332 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _352 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_298 * cbMtdParam._m0[12u].x) * _310) * _332) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_301 * cbMtdParam._m0[12u].x) * _310) * _332) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _372 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _373 = _372 * _267;
    float _374 = _372 * _268;
    float _375 = _372 * _269;
    float _379 = dot(vec4(_373, _374, _375, 0.0), vec4(_203, _204, _205, 0.0)) - cbMtdParam._m0[12u].z;
    float _3609 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _386 = exp2(log2(1.0 - (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _402 = ((((_282.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _352.x) * cbMtdParam._m0[9u].x) * ((_386 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _407 = ((((_282.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _352.y) * cbMtdParam._m0[9u].y) * ((_386 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _412 = ((((_282.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _352.z) * cbMtdParam._m0[9u].z) * ((_386 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _425 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _433 = (_425.x * 2.0) + (-1.0);
    float _434 = (_425.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3625 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))));
    float _445 = cbMtdParam._m0[13u].y + _425.z;
    vec4 _457 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _461 = cbMtdParam._m0[13u].x * _457.x;
    float _464 = fma(_440, _203, fma(_434, _210, _433 * _196));
    float _467 = fma(_440, _204, fma(_434, _211, _433 * _197));
    float _470 = fma(_440, _205, fma(_434, _212, _433 * _198));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3636 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _478 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _479 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3652 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3663 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3674 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _503 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _505 = _503.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _662 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _668 = (cbMatDynParam._m0[5u].x * _662) + cbMatDynParam._m0[5u].y;
        float _3685 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _673 = (cbMatDynParam._m0[5u].z * _662) + cbMatDynParam._m0[5u].w;
        float _3696 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) - _669)) + _669) < ((_505 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _538 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _541 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _544 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _557 = uint(roundEven(NORMAL.w)) * 13u;
    uint _558 = _557 + 9u;
    uint _559 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _565 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_559].x;
    float _566 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_559].y;
    float _567 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_559].z;
    float _3707 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    vec4 _579 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _582 = _579.x * TEXCOORD.z;
    float _583 = dot(vec3(_475, _476, _477), vec3(_373, _374, _375));
    float _586 = _583 * 2.0;
    float _590 = (_586 * _475) - _373;
    float _591 = (_586 * _476) - _374;
    float _592 = (_586 * _477) - _375;
    float _593 = dot(vec3(_373, _374, _375), vec3(_475, _476, _477));
    float _596 = abs(_593);
    float _3740 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _598 = sqrt(_478);
    float _611 = exp2((_598 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_598 * 3.0));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_651, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643));
        float _711 = fma(_651, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643));
        float _715 = fma(_651, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643));
        float _740 = _643 + _475;
        float _741 = _647 + _476;
        float _742 = _651 + _477;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _707;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _711;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _715;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_475, _476, _477), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3788 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_475, _476, _477), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3821 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_475, _476, _477), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3854 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_651, cbModelParam._m0[30u].z, fma(_647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _643));
        float _1030 = fma(_651, cbModelParam._m0[31u].z, fma(_647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _643));
        float _1034 = fma(_651, cbModelParam._m0[32u].z, fma(_647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _643));
        float _1057 = _643 + _475;
        float _1058 = _647 + _476;
        float _1059 = _651 + _477;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_475, _476, _477), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3917 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_475, _476, _477), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3950 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_475, _476, _477), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3983 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = _983;
        _1304 = _983;
        _1305 = _983;
        _1306 = _983;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _995)) + _995;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _996)) + _996;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _997)) + _997;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _590 * 0.5;
    float _1364 = _591 * 0.5;
    float _1365 = _592 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_982, _986, _989, _992));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_984, _987, _990, _993));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _988, _991, _994));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1480 = fma(_651, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643)) + cbModelParam._m0[13u].w;
        float _1484 = fma(_651, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643)) + cbModelParam._m0[14u].w;
        float _1488 = fma(_651, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643)) + cbModelParam._m0[15u].w;
        float _1491 = fma(_592, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590));
        float _1494 = fma(_592, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590));
        float _1497 = fma(_592, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590));
        float _1525;
        if (_1491 > 0.0)
        {
            _1525 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1525 = frontier_phi_17_15_ladder;
        }
        float _1698;
        if (_1494 > 0.0)
        {
            _1698 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1698 = frontier_phi_26_22_ladder;
        }
        float _1962;
        if (_1497 > 0.0)
        {
            _1962 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1962 = frontier_phi_38_33_ladder;
        }
        float _1964 = isnan(_1698) ? _1525 : (isnan(_1525) ? _1698 : min(_1525, _1698));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1491) + _1480;
        float _1970 = (_1965 * _1494) + _1484;
        float _1971 = (_1965 * _1497) + _1488;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_16_38_ladder = _2125.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2125.x * cbModelParam._m0[1u].y;
        }
        _1513 = frontier_phi_16_38_ladder_2;
        _1515 = frontier_phi_16_38_ladder_1;
        _1517 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_590, _591, _592), _1432);
        _1513 = _1501.x * cbModelParam._m0[1u].y;
        _1515 = _1501.y * cbModelParam._m0[1u].y;
        _1517 = _1501.z * cbModelParam._m0[1u].y;
    }
    float _1521 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1521 : min(cbModelParam._m0[25u].w, _1521));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1579 = fma(_651, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643)) + cbModelParam._m0[21u].w;
        float _1583 = fma(_651, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643)) + cbModelParam._m0[22u].w;
        float _1587 = fma(_651, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643)) + cbModelParam._m0[23u].w;
        float _1590 = fma(_592, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590));
        float _1593 = fma(_592, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590));
        float _1596 = fma(_592, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590));
        float _1703;
        if (_1590 > 0.0)
        {
            _1703 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1703 = frontier_phi_28_24_ladder;
        }
        float _1989;
        if (_1593 > 0.0)
        {
            _1989 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1989 = frontier_phi_40_35_ladder;
        }
        float _2308;
        if (_1596 > 0.0)
        {
            _2308 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2308 = frontier_phi_49_47_ladder;
        }
        float _2310 = isnan(_1989) ? _1703 : (isnan(_1703) ? _1989 : min(_1703, _1989));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1590) + _1579;
        float _2316 = (_2311 * _1593) + _1583;
        float _2317 = (_2311 * _1596) + _1587;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2317, cbModelParam._m0[17u].z, fma(_2316, cbModelParam._m0[17u].y, _2315 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2317, cbModelParam._m0[18u].z, fma(_2316, cbModelParam._m0[18u].y, _2315 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2317, cbModelParam._m0[19u].z, fma(_2316, cbModelParam._m0[19u].y, _2315 * cbModelParam._m0[19u].x))), _1522);
            frontier_phi_25_49_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1615 = frontier_phi_25_49_ladder_2;
        _1617 = frontier_phi_25_49_ladder_1;
        _1619 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_590, _591, _592), _1522);
        _1615 = _1599.x * cbModelParam._m0[1u].z;
        _1617 = _1599.y * cbModelParam._m0[1u].z;
        _1619 = _1599.z * cbModelParam._m0[1u].z;
    }
    float _1631 = ((((1.0 - _611) * ((_598 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_611 * _598)) * _582;
    float _1632 = _1631 * ((cbModelParam._m0[1u].w * (_1615 - _1513)) + _1513);
    float _1633 = _1631 * ((cbModelParam._m0[1u].w * (_1617 - _1515)) + _1515);
    float _1634 = _1631 * ((cbModelParam._m0[1u].w * (_1619 - _1517)) + _1517);
    float _1637 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1632 * cbSceneParam._m0[91u].x));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1685 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1689 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1690 = _1677 / _1689;
    float _1691 = _1681 / _1689;
    float _1692 = _1685 / _1689;
    float _1839;
    float _1840;
    float _1841;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1719 = ((uint(_1692 > cbSceneParam._m0[59u].y) + uint(_1692 > cbSceneParam._m0[59u].x)) + uint(_1692 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1720 = _1719 + 43u;
        uint _1728 = _1719 + 44u;
        uint _1736 = _1719 + 45u;
        uint _1744 = _1719 + 46u;
        float _1755 = fma(_1689, cbSceneParam._m0[_1720].w, fma(_1685, cbSceneParam._m0[_1720].z, fma(_1681, cbSceneParam._m0[_1720].y, _1677 * cbSceneParam._m0[_1720].x)));
        float _1759 = fma(_1689, cbSceneParam._m0[_1728].w, fma(_1685, cbSceneParam._m0[_1728].z, fma(_1681, cbSceneParam._m0[_1728].y, _1677 * cbSceneParam._m0[_1728].x)));
        float _1767 = fma(_1689, cbSceneParam._m0[_1744].w, fma(_1685, cbSceneParam._m0[_1744].z, fma(_1681, cbSceneParam._m0[_1744].y, _1677 * cbSceneParam._m0[_1744].x)));
        float _1772 = cbSceneParam._m0[33u].z * _1767;
        float _1774 = cbSceneParam._m0[33u].w * _1767;
        float _1777 = fma(_1689, cbSceneParam._m0[_1736].w, fma(_1685, cbSceneParam._m0[_1736].z, fma(_1681, cbSceneParam._m0[_1736].y, _1677 * cbSceneParam._m0[_1736].x))) / _1767;
        float _1825 = (cbSceneParam._m0[33u].x - sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692))) * cbSceneParam._m0[33u].y;
        float _4109 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1832 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 + _1755) / _1767, (_1774 + _1759) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 + _1755) / _1767, (_1759 - _1772) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1755 - _1772) / _1767, (_1759 - _1774) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1755 - _1774) / _1767, (_1772 + _1759) / _1767), _1777), 0.0)).x), vec4(0.25)));
        _1839 = 1.0 - (_1832 * cbSceneParam._m0[34u].x);
        _1840 = 1.0 - (_1832 * cbSceneParam._m0[34u].y);
        _1841 = 1.0 - (_1832 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1839 = 1.0;
        _1840 = 1.0;
        _1841 = 1.0;
    }
    float _1905;
    float _1907;
    float _1909;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1893 = fma(_1689, cbSceneParam._m0[63u].w, fma(_1685, cbSceneParam._m0[63u].z, fma(_1681, cbSceneParam._m0[63u].y, _1677 * cbSceneParam._m0[63u].x)));
        float _1894 = fma(_1689, cbSceneParam._m0[60u].w, fma(_1685, cbSceneParam._m0[60u].z, fma(_1681, cbSceneParam._m0[60u].y, _1677 * cbSceneParam._m0[60u].x))) / _1893;
        float _1895 = fma(_1689, cbSceneParam._m0[61u].w, fma(_1685, cbSceneParam._m0[61u].z, fma(_1681, cbSceneParam._m0[61u].y, _1677 * cbSceneParam._m0[61u].x))) / _1893;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1894 >= cbSceneParam._m0[64u].x) && (_1895 >= cbSceneParam._m0[64u].y)) && (_1894 <= cbSceneParam._m0[64u].z)) && (_1895 <= cbSceneParam._m0[64u].w))
        {
            float _2002 = fma(_1689, cbSceneParam._m0[62u].w, fma(_1685, cbSceneParam._m0[62u].z, fma(_1681, cbSceneParam._m0[62u].y, _1677 * cbSceneParam._m0[62u].x))) / _1893;
            float _2006 = isnan(cbSceneParam._m0[41u].w) ? _2002 : (isnan(_2002) ? cbSceneParam._m0[41u].w : max(_2002, cbSceneParam._m0[41u].w));
            float _2049 = (cbSceneParam._m0[33u].x - sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692))) * cbSceneParam._m0[33u].y;
            float _4125 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
            float _2056 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1894, cbSceneParam._m0[33u].w + _1895), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1894, _1895 - cbSceneParam._m0[33u].z), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1894 - cbSceneParam._m0[33u].z, _1895 - cbSceneParam._m0[33u].w), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1894 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1895), _2006), 0.0)).x), vec4(0.25)));
            float _2060 = 1.0 - (_2056 * cbSceneParam._m0[34u].x);
            float _2061 = 1.0 - (_2056 * cbSceneParam._m0[34u].y);
            float _2062 = 1.0 - (_2056 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2062) ? _1841 : (isnan(_1841) ? _2062 : min(_1841, _2062));
            frontier_phi_37_36_ladder_1 = isnan(_2061) ? _1840 : (isnan(_1840) ? _2061 : min(_1840, _2061));
            frontier_phi_37_36_ladder_2 = isnan(_2060) ? _1839 : (isnan(_1839) ? _2060 : min(_1839, _2060));
        }
        else
        {
            frontier_phi_37_36_ladder = _1841;
            frontier_phi_37_36_ladder_1 = _1840;
            frontier_phi_37_36_ladder_2 = _1839;
        }
        _1905 = frontier_phi_37_36_ladder_2;
        _1907 = frontier_phi_37_36_ladder_1;
        _1909 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1905 = _1839;
        _1907 = _1840;
        _1909 = _1841;
    }
    uvec4 _1914 = floatBitsToUint(cbInstanceData._m0[_557 + 5u]);
    uint _1916 = _1914.x * 14u;
    uint _1917 = _1916 + 13u;
    float _1922 = _582 + (-1.0);
    float _1925 = (cbLight._m0[_1917].x * _1922) + 1.0;
    float _1926 = (cbLight._m0[_1917].y * _1922) + 1.0;
    uint _1928 = _1916 + 4u;
    float _1939 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_475, _476, _477));
    float _1942 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    float _1943 = cbLight._m0[_1928].x * _1905;
    float _1944 = cbLight._m0[_1928].y * _1907;
    float _1945 = cbLight._m0[_1928].z * _1909;
    uint _1946 = _1916 + 5u;
    uint _1952 = _1916 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_475, _476, _477));
    float _1961 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    float _2134;
    float _2135;
    float _2136;
    if (_479 == 0.0)
    {
        float _4161 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _4172 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _2071 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
        float _2073 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
        _2134 = ((cbLight._m0[_1946].x * _1961) * _2073) + ((_1943 * _1942) * _2071);
        _2135 = ((_1961 * cbLight._m0[_1946].y) * _2073) + ((_1944 * _1942) * _2071);
        _2136 = ((_1961 * cbLight._m0[_1946].z) * _2073) + ((_1945 * _1942) * _2071);
    }
    else
    {
        float _2083 = _1939 + _479;
        float _2086 = (_479 * 2.0) + 1.0;
        float _2087 = (isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) / _2086;
        float _2094 = _1958 + _479;
        float _2096 = (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) / _2086;
        _2134 = (((_2096 * cbLight._m0[_1946].x) * _1961) + ((_1943 * _2087) * _1942)) * 0.3183098733425140380859375;
        _2135 = (((_2096 * cbLight._m0[_1946].y) * _1961) + ((_1944 * _2087) * _1942)) * 0.3183098733425140380859375;
        _2136 = (((_2096 * cbLight._m0[_1946].z) * _1961) + ((_1945 * _2087) * _1942)) * 0.3183098733425140380859375;
    }
    uint _2140 = _1916 + 8u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _478) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1916].x + _373;
    float _2159 = cbLight._m0[_1916].y + _374;
    float _2160 = cbLight._m0[_1916].z + _375;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1916].xyz));
    float _4193 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2172 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2173 = dot(vec3(_475, _476, _477), vec3(_2165, _2166, _2167));
    float _4215 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2177 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2165, _2166, _2167));
    float _4226 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2181 = _2157 * _2157;
    float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2172 * ((_2171 * _2197) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2197) + _2157) * _2171))) * _2171;
    float _4237 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
    uint _2226 = _1916 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _478) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_1952].x + _373;
    float _2243 = cbLight._m0[_1952].y + _374;
    float _2244 = cbLight._m0[_1952].z + _375;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1952].xyz));
    float _4248 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2256 = dot(vec3(_475, _476, _477), vec3(_2249, _2250, _2251));
    float _4259 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2249, _2250, _2251));
    float _4270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2241;
    float _2288 = (0.5 / (((_2172 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2278) + _2241) * _2255))) * _2255;
    float _4281 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2300 = (((_2277 * cbLight._m0[_2226].x) * _2290) * _1961) + ((((cbLight._m0[_2140].x * _1905) * _2196) * _2210) * _1942);
    float _2301 = (((_2277 * cbLight._m0[_2226].y) * _2290) * _1961) + ((((cbLight._m0[_2140].y * _1907) * _2196) * _2210) * _1942);
    float _2302 = (((_2277 * cbLight._m0[_2226].z) * _2290) * _1961) + ((((cbLight._m0[_2140].z * _1909) * _2196) * _2210) * _1942);
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_1914.y == 0u)
    {
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.x;
        uint _2357 = uint((float(_2345.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2346))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2346)));
        float _2367 = (log2(_1692 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2368 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        uint _2371 = uint(isnan(14.0) ? _2368 : (isnan(_2368) ? 14.0 : min(_2368, 14.0)));
        uvec4 _2376 = texelFetch(g_lightClusterGridBuffer, int(((_2371 << 2u) + (_2357 << 6u)) >> 2u));
        uint _2377 = _2376.x;
        uint _2378 = _2345.z;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        if (((((1u << ((_2378 >> 4u) & 15u)) + 4294967295u) & _2377) == 0u) || ((_2378 & 240u) == 0u))
        {
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
        }
        else
        {
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2371 << 5u) + (_2357 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2622)
                {
                    frontier_phi_64_pred = _2611;
                    frontier_phi_64_pred_1 = _2610;
                    frontier_phi_64_pred_2 = _2609;
                    frontier_phi_64_pred_3 = _2608;
                    frontier_phi_64_pred_4 = _2607;
                    frontier_phi_64_pred_5 = _2606;
                }
                else
                {
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    uint _2813;
                    _2807 = _2606;
                    _2808 = _2607;
                    _2809 = _2608;
                    _2810 = _2609;
                    _2811 = _2610;
                    _2812 = _2611;
                    _2813 = _2621;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    for (;;)
                    {
                        uint _2817 = uint(findLSB(_2813)) + (_2612 << 5u);
                        uint _2814 = (_2813 + 4294967295u) & _2813;
                        uint _2819 = _2817 * 48u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2839 = (_2817 * 48u) + 4u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        float _2853 = _2852.x;
                        float _2854 = _2852.y;
                        float _2855 = _2852.z;
                        uint _2858 = (_2817 * 48u) + 8u;
                        vec3 _2869 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x));
                        uint _2874 = (_2817 * 48u) + 12u;
                        vec2 _2882 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x));
                        float _2888 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
                        float _2889 = _2888 * _1690;
                        float _2890 = _2888 * _1691;
                        float _2891 = _2888 * _1692;
                        float _2892 = _2833.x - _1690;
                        float _2893 = _2833.y - _1691;
                        float _2894 = _2833.z - _1692;
                        float _2895 = dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894));
                        float _2898 = inversesqrt(_2895);
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2902 = dot(vec3(_538, _541, _544), vec3(_2899, _2900, _2901));
                        float _2907 = 1.0 - (_2895 * _2833.w);
                        float _4302 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2909 = sqrt(_2895) * _2852.w;
                        float _2912 = 1.39999997615814208984375 / (_2909 + 1.39999997615814208984375);
                        float _2913 = _2912 * _2912;
                        float _2914 = 1.0 - _2913;
                        float _2916 = (_2914 * _2914) * _479;
                        float _2919 = ((_2914 * _2902) + _2913) + _2916;
                        float _2924 = _2909 * _2909;
                        float _2929 = ((isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))) * _2908) / (((_2916 * 2.0) + 1.0) * ((_2924 * 0.699999988079071044921875) + 1.0));
                        float _2933 = dot(vec3(_2899, _2900, _2901), vec3(_2889, _2890, _2891));
                        float _4318 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2940 = dot(vec3((-0.0) - _2889, (-0.0) - _2890, (-0.0) - _2891), vec3(_538, _541, _544)) + 1.0;
                        float _2942 = (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * 0.5;
                        float _2949 = ((_2942 * _2942) * _2882.x) * exp2((_2882.y * 32.0) * log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))));
                        float _2951 = _479 / (_479 + 1.0);
                        float _2967 = (-0.0) - _1690;
                        float _2968 = (-0.0) - _1691;
                        float _2969 = (-0.0) - _1692;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2983 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _598;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2974 + _2899;
                        float _2995 = _2975 + _2900;
                        float _2996 = _2976 + _2901;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_538, _541, _544), vec3(_2974, _2975, _2976));
                        float _4334 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3008 = dot(vec3(_538, _541, _544), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4345 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2912 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2902) + _3017;
                        float _4356 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4367 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3015 * _3015) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2908;
                        _2725 = (((((_2853 * 0.3183098733425140380859375) * _2951) * _2949) + _2853) * _2929) + _2810;
                        _2726 = (((((_2854 * 0.3183098733425140380859375) * _2951) * _2949) + _2854) * _2929) + _2811;
                        _2727 = (((((_2855 * 0.3183098733425140380859375) * _2951) * _2949) + _2855) * _2929) + _2812;
                        _2722 = (_3043 * _2869.x) + _2807;
                        _2723 = (_3043 * _2869.y) + _2808;
                        _2724 = (_3043 * _2869.z) + _2809;
                        if (_2814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2807 = _2722;
                            _2808 = _2723;
                            _2809 = _2724;
                            _2810 = _2725;
                            _2811 = _2726;
                            _2812 = _2727;
                            _2813 = _2814;
                        }
                    }
                    frontier_phi_64_pred = _2727;
                    frontier_phi_64_pred_1 = _2726;
                    frontier_phi_64_pred_2 = _2725;
                    frontier_phi_64_pred_3 = _2724;
                    frontier_phi_64_pred_4 = _2723;
                    frontier_phi_64_pred_5 = _2722;
                }
                _2435 = frontier_phi_64_pred;
                _2433 = frontier_phi_64_pred_1;
                _2431 = frontier_phi_64_pred_2;
                _2429 = frontier_phi_64_pred_3;
                _2427 = frontier_phi_64_pred_4;
                _2425 = frontier_phi_64_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2425;
                    _2607 = _2427;
                    _2608 = _2429;
                    _2609 = _2431;
                    _2610 = _2433;
                    _2611 = _2435;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
        }
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.z;
        uint _2441 = (_2439 >> 8u) & 15u;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((4294967295u << _2441) & _2377) == 0u)
        {
            _2574 = _2424;
            _2576 = _2426;
            _2578 = _2428;
            _2580 = _2430;
            _2582 = _2432;
            _2584 = _2434;
        }
        else
        {
            float _2599 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
            float _2600 = _2599 * _1690;
            float _2601 = _2599 * _1691;
            float _2602 = _2599 * _1692;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2441 < ((_2439 >> 12u) & 15u))
            {
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2790 = _2424;
                float _2791 = _2426;
                float _2792 = _2428;
                float _2793 = _2430;
                float _2794 = _2432;
                float _2795 = _2434;
                uint _2796 = _2441;
                uint _2805;
                bool _2806;
                for (;;)
                {
                    _2805 = texelFetch(g_lightClassification, int((((_2371 << 5u) + (_2357 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                    _2806 = _2805 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2806)
                    {
                        frontier_phi_76_pred = _2794;
                        frontier_phi_76_pred_1 = _2793;
                        frontier_phi_76_pred_2 = _2792;
                        frontier_phi_76_pred_3 = _2791;
                        frontier_phi_76_pred_4 = _2790;
                        frontier_phi_76_pred_5 = _2795;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3113 = _2790;
                        float _3114 = _2791;
                        float _3115 = _2792;
                        float _3116 = _2793;
                        float _3117 = _2794;
                        float _3118 = _2795;
                        uint _3119 = _2805;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        vec3 _3176;
                        vec2 _3185;
                        vec4 _3201;
                        vec4 _3217;
                        float _3264;
                        bool _3265;
                        for (;;)
                        {
                            uint _3130 = ((_2796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.x;
                            _3163 = _3161.y;
                            _3164 = _3161.z;
                            uint _3166 = (_3130 * 40u) + 8u;
                            _3176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x));
                            uint _3178 = (_3130 * 40u) + 12u;
                            _3185 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x));
                            uint _3188 = (_3130 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3204 = (_3130 * 40u) + 20u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3220 = (_3130 * 40u) + 24u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3239 = (_3130 * 40u) + 28u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3264 = fma(_1692, _3252.z, fma(_1691, _3252.y, _3252.x * _1690)) + _3252.w;
                            _3265 = !((fma(_1692, _3233.z, fma(_1691, _3233.y, _3233.x * _1690)) + _3233.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3265)
                            {
                                float _3291 = _3145.x - _1690;
                                float _3292 = _3145.y - _1691;
                                float _3293 = _3145.z - _1692;
                                float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                                float _3297 = inversesqrt(_3294);
                                float _3298 = _3297 * _3291;
                                float _3299 = _3297 * _3292;
                                float _3300 = _3297 * _3293;
                                float _3304 = 1.0 - (_3294 / (_3146 * _3146));
                                float _4378 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3309 = sqrt(_3294) * _3161.w;
                                float _3311 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                                float _3312 = _3311 * _3311;
                                float _3313 = 1.0 - _3312;
                                float _3315 = (_3313 * _3313) * _479;
                                float _3318 = ((_3313 * dot(vec3(_3298, _3299, _3300), vec3(_538, _541, _544))) + _3312) + _3315;
                                float _3323 = _3309 * _3309;
                                float _3328 = (fma(_1692, _3201.z, fma(_1691, _3201.y, _3201.x * _1690)) + _3201.w) / _3264;
                                float _3329 = (fma(_1692, _3217.z, fma(_1691, _3217.y, _3217.x * _1690)) + _3217.w) / _3264;
                                float _3333 = 1.0 - dot(vec2(_3328, _3329), vec2(_3328, _3329));
                                float _4394 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3335 = _3334 * (((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3305) / (((_3315 * 2.0) + 1.0) * ((_3323 * 0.699999988079071044921875) + 1.0)));
                                float _3336 = (-0.0) - _2600;
                                float _3337 = (-0.0) - _2601;
                                float _3338 = (-0.0) - _2602;
                                float _3339 = dot(vec3(_3298, _3299, _3300), vec3(_2600, _2601, _2602));
                                float _4405 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3346 = dot(vec3(_3336, _3337, _3338), vec3(_538, _541, _544)) + 1.0;
                                float _3348 = (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * 0.5;
                                float _3355 = ((_3348 * _3348) * _3185.x) * exp2((_3185.y * 32.0) * log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))));
                                float _3357 = _479 / (_479 + 1.0);
                                float _3378 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3379 = 1.0 - _598;
                                float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                                float _3387 = _3386 * _3386;
                                float _3388 = _3387 * _3387;
                                float _3389 = _3298 - _2600;
                                float _3390 = _3299 - _2601;
                                float _3391 = _3300 - _2602;
                                float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                                float _3399 = dot(vec3(_538, _541, _544), vec3(_3336, _3337, _3338));
                                float _4421 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3403 = dot(vec3(_538, _541, _544), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                                float _4432 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                                float _3411 = _3311 * _3387;
                                float _3412 = _3411 * _3411;
                                float _3418 = ((1.0 - _3412) * dot(vec3(_538, _541, _544), vec3(_3298, _3299, _3300))) + _3412;
                                float _4443 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3420 = 1.0 - _3387;
                                float _3430 = (0.5 / (((_3419 * ((_3402 * _3420) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3419 * _3420) + _3387) * _3402))) * _3419;
                                float _4454 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3440 = (_3334 * _3305) * (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3410 * _3410) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = ((((_3164 * 0.3183098733425140380859375) * _3357) * _3355) + _3164) * _3335;
                                frontier_phi_85_pred_1 = ((((_3163 * 0.3183098733425140380859375) * _3357) * _3355) + _3163) * _3335;
                                frontier_phi_85_pred_2 = ((((_3162 * 0.3183098733425140380859375) * _3357) * _3355) + _3162) * _3335;
                                frontier_phi_85_pred_3 = _3440 * _3176.z;
                                frontier_phi_85_pred_4 = _3440 * _3176.y;
                                frontier_phi_85_pred_5 = _3440 * _3176.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3449 = frontier_phi_85_pred;
                            _3448 = frontier_phi_85_pred_1;
                            _3447 = frontier_phi_85_pred_2;
                            _3446 = frontier_phi_85_pred_3;
                            _3445 = frontier_phi_85_pred_4;
                            _3444 = frontier_phi_85_pred_5;
                            _3094 = _3447 + _3116;
                            _3095 = _3448 + _3117;
                            _3096 = _3449 + _3118;
                            _3091 = _3444 + _3113;
                            _3092 = _3445 + _3114;
                            _3093 = _3446 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3091;
                                _3114 = _3092;
                                _3115 = _3093;
                                _3116 = _3094;
                                _3117 = _3095;
                                _3118 = _3096;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3095;
                        frontier_phi_76_pred_1 = _3094;
                        frontier_phi_76_pred_2 = _3093;
                        frontier_phi_76_pred_3 = _3092;
                        frontier_phi_76_pred_4 = _3091;
                        frontier_phi_76_pred_5 = _3096;
                    }
                    _2583 = frontier_phi_76_pred;
                    _2581 = frontier_phi_76_pred_1;
                    _2579 = frontier_phi_76_pred_2;
                    _2577 = frontier_phi_76_pred_3;
                    _2575 = frontier_phi_76_pred_4;
                    _2585 = frontier_phi_76_pred_5;
                    uint _2797 = _2796 + 1u;
                    if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2790 = _2575;
                        _2791 = _2577;
                        _2792 = _2579;
                        _2793 = _2581;
                        _2794 = _2583;
                        _2795 = _2585;
                        _2796 = _2797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2585;
                frontier_phi_58_59_ladder_1 = _2583;
                frontier_phi_58_59_ladder_2 = _2581;
                frontier_phi_58_59_ladder_3 = _2579;
                frontier_phi_58_59_ladder_4 = _2577;
                frontier_phi_58_59_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_58_59_ladder = _2434;
                frontier_phi_58_59_ladder_1 = _2432;
                frontier_phi_58_59_ladder_2 = _2430;
                frontier_phi_58_59_ladder_3 = _2428;
                frontier_phi_58_59_ladder_4 = _2426;
                frontier_phi_58_59_ladder_5 = _2424;
            }
            _2574 = frontier_phi_58_59_ladder_5;
            _2576 = frontier_phi_58_59_ladder_4;
            _2578 = frontier_phi_58_59_ladder_3;
            _2580 = frontier_phi_58_59_ladder_2;
            _2582 = frontier_phi_58_59_ladder_1;
            _2584 = frontier_phi_58_59_ladder;
        }
        float _2589 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
        _2390 = (_2589 * _2580) + _2134;
        _2392 = (_2589 * _2582) + _2135;
        _2394 = (_2589 * _2584) + _2136;
        _2396 = ((_2574 * 0.039999999105930328369140625) * _2589) + _2300;
        _2398 = ((_2576 * 0.039999999105930328369140625) * _2589) + _2301;
        _2400 = ((_2578 * 0.039999999105930328369140625) * _2589) + _2302;
    }
    else
    {
        _2390 = _2134;
        _2392 = _2135;
        _2394 = _2136;
        _2396 = _2300;
        _2398 = _2301;
        _2400 = _2302;
    }
    float _2513;
    float _2514;
    float _2515;
    if (_479 > 0.0)
    {
        uint _2445 = _1916 + 4u;
        float _2451 = (-0.0) - _373;
        float _2453 = (-0.0) - _374;
        float _2454 = (-0.0) - _375;
        float _2455 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2451, _2453, _2454));
        float _4470 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _593 + 1.0;
        float _2461 = (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0))) * 0.5;
        float _2466 = _2461 * _2461;
        float _2467 = _2466 * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 32.0);
        float _2469 = _479 / (_479 + 1.0);
        float _2470 = isnan(_1925) ? 1.0 : (isnan(1.0) ? _1925 : min(1.0, _1925));
        uint _2483 = _1916 + 5u;
        float _2489 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2451, _2453, _2454));
        float _4491 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2496 = _2466 * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 32.0);
        float _2497 = isnan(_1926) ? 1.0 : (isnan(1.0) ? _1926 : min(1.0, _1926));
        _2513 = ((((_2496 * cbLight._m0[_2483].x) * _2469) * _2497) + ((((cbLight._m0[_2445].x * _1905) * _2467) * _2469) * _2470)) * 0.3183098733425140380859375;
        _2514 = ((((_2496 * cbLight._m0[_2483].y) * _2469) * _2497) + ((((cbLight._m0[_2445].y * _1907) * _2467) * _2469) * _2470)) * 0.3183098733425140380859375;
        _2515 = ((((_2496 * cbLight._m0[_2483].z) * _2469) * _2497) + ((((cbLight._m0[_2445].z * _1909) * _2467) * _2469) * _2470)) * 0.3183098733425140380859375;
    }
    else
    {
        _2513 = 0.0;
        _2514 = 0.0;
        _2515 = 0.0;
    }
    float _4507 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4518 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4529 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _2534 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * ((_2390 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _582)) + _2513)) + ((_2396 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2535 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * ((_2392 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _582)) + _2514)) + ((_2398 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2536 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * ((_2394 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _582)) + _2515)) + ((_2400 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    uint _2537 = _557 + 6u;
    float _2545 = _517 / cbSceneParam._m0[86u].x;
    float _2546 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2560 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2562 = _2560.x;
    float _2563 = _2560.y;
    float _2564 = _2560.z;
    float _2565 = _2560.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2628 = _2627 / _498;
        float _2639 = _2628 * _267;
        float _2640 = _268 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2642 = _2628 * _269;
        float _2644 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2640;
        float _2652 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3048;
        if (abs((_2641 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3048 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2749 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _3048 = ((abs(_2652 / _2641) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2662 * _2758) - exp2(_2662 * _2759)) * _2747))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _3050 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, 1.0), 0.0);
        float _3059 = exp2((_3048 * (-1.44269502162933349609375)) * (1.0 - _3050.w));
        float _3060 = log2(_3059);
        float _3076 = log2(_2565);
        _2664 = (exp2(_3076 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].x)) * _3050.x) / cbSceneParam._m0[78u].x)) + _2562;
        _2666 = (exp2(_3076 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].y)) * _3050.y) / cbSceneParam._m0[78u].y)) + _2563;
        _2668 = (exp2(_3076 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].z)) * _3050.z) / cbSceneParam._m0[78u].z)) + _2564;
        _2670 = _3059 * _2565;
    }
    else
    {
        _2664 = _2562;
        _2666 = _2563;
        _2668 = _2564;
        _2670 = _2565;
    }
    bool _3086;
    vec4 _2680;
    vec4 _2702;
    float _2704;
    float _2708;
    float _2709;
    float _2710;
    float _2711;
    bool _2721;
    for (;;)
    {
        _2680 = cbMatDynParam._m0[0u];
        float _2682 = roundEven(_2680.y);
        bool _2683 = _2682 == 3.0;
        float _2684 = log2(_2670);
        float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * _2534;
        float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * _2535;
        float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * _2536;
        float _2700 = _505 + (-0.5);
        _2702 = cbMtdParam._m0[1u];
        _2704 = _2702.y * _2700;
        float _2707 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2708 = _2707 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
        _2709 = _2707 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
        _2710 = _2707 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
        _2711 = _2700 * 0.999000012874603271484375;
        _2721 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2721)
        {
            if ((cbInstanceData._m0[_557 + 7u].x + _2711) < 0.5)
            {
                _3086 = true;
                break;
            }
        }
        uint _2782 = _558 + uint(_2680.w);
        if ((cbInstanceData._m0[_2782].w < 1.0) && ((cbInstanceData._m0[_2782].w + _2711) < 0.5))
        {
            _3086 = true;
            break;
        }
        if ((_2704 + 1.0) < _2702.x)
        {
            _3086 = true;
            break;
        }
        _3086 = false;
        break;
    }
    float _3104;
    if (_3086)
    {
        discard_state = true;
        _3104 = 0.0;
    }
    else
    {
        _3104 = cbInstanceData._m0[_2537].w;
    }
    SV_Target.x = _2708;
    SV_Target.y = _2709;
    SV_Target.z = _2710;
    SV_Target.w = _3104;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2537].w;
    discard_exit();
}


