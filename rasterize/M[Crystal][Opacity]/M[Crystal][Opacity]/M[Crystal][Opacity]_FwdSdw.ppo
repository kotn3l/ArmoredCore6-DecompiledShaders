#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _938;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _294 = dot(vec3(_263, _264, _265), vec3(_192, _193, _194));
    float _297 = dot(vec3(_263, _264, _265), vec3(_206, _207, _208));
    float _300 = dot(vec3(_263, _264, _265), vec3(_199, _200, _201));
    float _306 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _328 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _348 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_294 * cbMtdParam._m0[12u].x) * _306) * _328) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_297 * cbMtdParam._m0[12u].x) * _306) * _328) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _368 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _369 = _368 * _263;
    float _370 = _368 * _264;
    float _371 = _368 * _265;
    float _375 = dot(vec4(_369, _370, _371, 0.0), vec4(_199, _200, _201, 0.0)) - cbMtdParam._m0[12u].z;
    float _3498 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _382 = exp2(log2(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _398 = ((((_278.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _348.x) * cbMtdParam._m0[9u].x) * ((_382 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _403 = ((((_278.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _348.y) * cbMtdParam._m0[9u].y) * ((_382 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _408 = ((((_278.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _348.z) * cbMtdParam._m0[9u].z) * ((_382 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _421 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _430 = (_421.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3514 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))));
    float _441 = cbMtdParam._m0[13u].y + _421.z;
    vec4 _453 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _457 = cbMtdParam._m0[13u].x * _453.x;
    float _460 = fma(_436, _199, fma(_430, _206, _429 * _192));
    float _463 = fma(_436, _200, fma(_430, _207, _429 * _193));
    float _466 = fma(_436, _201, fma(_430, _208, _429 * _194));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3525 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _474 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _475 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3541 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3552 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3563 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _494 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _525 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _528 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _541 = uint(roundEven(NORMAL.w)) * 13u;
    uint _543 = (_541 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3574 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _566 = _563.x * TEXCOORD.z;
    float _567 = dot(vec3(_471, _472, _473), vec3(_369, _370, _371));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _471) - _369;
    float _575 = (_570 * _472) - _370;
    float _576 = (_570 * _473) - _371;
    float _577 = dot(vec3(_369, _370, _371), vec3(_471, _472, _473));
    float _580 = abs(_577);
    float _3607 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_474);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _666 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _670 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _695 = _627 + _471;
        float _696 = _631 + _472;
        float _697 = _635 + _473;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_471, _472, _473), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3655 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_471, _472, _473), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3688 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_471, _472, _473), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3721 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _978 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _982 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _986 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1009 = _627 + _471;
        float _1010 = _631 + _472;
        float _1011 = _635 + _473;
        float _1021 = fma(_1011, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009)) - _978;
        float _1022 = fma(_1011, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009)) - _982;
        float _1023 = fma(_1011, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009)) - _986;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_978 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_982 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[35u].z) + ((((((_986 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1077 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1044.x + (-0.5));
        float _1079 = _1077 * (_1044.y + (-0.5));
        float _1080 = _1077 * (_1044.z + (-0.5));
        float _1087 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1051.x + (-0.5));
        float _1089 = _1087 * (_1051.y + (-0.5));
        float _1090 = _1087 * (_1051.z + (-0.5));
        float _1097 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1058.x + (-0.5));
        float _1099 = _1097 * (_1058.y + (-0.5));
        float _1100 = _1097 * (_1058.z + (-0.5));
        float _1107 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1065.x + (-0.5));
        float _1109 = _1107 * (_1065.y + (-0.5));
        float _1110 = _1107 * (_1065.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_471, _472, _473), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3784 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1141 + 1.0))) + _1146) * _1111;
        float _1156 = _1079 * 0.5;
        float _1157 = _1089 * 0.5;
        float _1158 = _1099 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_471, _472, _473), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3817 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1183 + 1.0))) + _1188) * _1112;
        float _1198 = _1080 * 0.5;
        float _1199 = _1090 * 0.5;
        float _1200 = _1100 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_471, _472, _473), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3850 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1225 + 1.0))) + _1230) * _1113;
        _1247 = _1080;
        _1248 = _1079;
        _1249 = _1078;
        _1250 = _1090;
        _1251 = _1089;
        _1252 = _1088;
        _1253 = _1100;
        _1254 = _1099;
        _1255 = _1098;
        _1256 = _1113;
        _1257 = _1112;
        _1258 = _1111;
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _938;
        _1248 = _938;
        _1249 = _938;
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _951)) + _951;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1294 = fma(_1273, cbSceneParam._m0[89u].z, fma(_1272, cbSceneParam._m0[89u].y, _1271 * cbSceneParam._m0[89u].x));
    float _1297 = fma(_1273, cbSceneParam._m0[90u].z, fma(_1272, cbSceneParam._m0[90u].y, _1271 * cbSceneParam._m0[90u].x));
    float _1300 = fma(_1273, cbSceneParam._m0[91u].z, fma(_1272, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1271));
    float _1315 = _574 * 0.5;
    float _1316 = _575 * 0.5;
    float _1317 = _576 * 0.5;
    float _1318 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1321 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1324 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1358;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1331 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_937, _941, _944, _947));
        float _1335 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_939, _942, _945, _948));
        float _1339 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_940, _943, _946, _949));
        float _1346 = dot(vec4(cbModelParam._m0[39u]), vec4(_1315, _1316, _1317, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1369;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1360 = dot(vec4(cbModelParam._m0[40u]), vec4(_1315, _1316, _1317, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1373 = (_1369 * cbModelParam._m0[1u].x) + (_1358 * (1.0 - cbModelParam._m0[1u].x));
    float _1383 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1383 : min(cbModelParam._m0[25u].z, _1383));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1446 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1449 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1477 = frontier_phi_14_12_ladder;
        }
        float _1650;
        if (_1446 > 0.0)
        {
            _1650 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1650 = frontier_phi_23_19_ladder;
        }
        float _1914;
        if (_1449 > 0.0)
        {
            _1914 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1914 = frontier_phi_35_30_ladder;
        }
        float _1916 = isnan(_1650) ? _1477 : (isnan(_1477) ? _1650 : min(_1477, _1650));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1443) + _1432;
        float _1922 = (_1917 * _1446) + _1436;
        float _1923 = (_1917 * _1449) + _1440;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1924;
        float _1928 = _1924 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 > _1928) || ((_1922 < _1926) || ((_1921 < _1926) || (_1921 > _1928))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2077 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1923, cbModelParam._m0[9u].z, fma(_1922, cbModelParam._m0[9u].y, _1921 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1923, cbModelParam._m0[10u].z, fma(_1922, cbModelParam._m0[10u].y, _1921 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1923, cbModelParam._m0[11u].z, fma(_1922, cbModelParam._m0[11u].y, _1921 * cbModelParam._m0[11u].x))), _1384);
            frontier_phi_13_35_ladder = _2077.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2077.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2077.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_13_35_ladder_2;
        _1467 = frontier_phi_13_35_ladder_1;
        _1469 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1384);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1545 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1548 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1655;
        if (_1542 > 0.0)
        {
            _1655 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_21_ladder;
        }
        float _1941;
        if (_1545 > 0.0)
        {
            _1941 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1941 = frontier_phi_37_32_ladder;
        }
        float _2260;
        if (_1548 > 0.0)
        {
            _2260 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2260 = frontier_phi_46_44_ladder;
        }
        float _2262 = isnan(_1941) ? _1655 : (isnan(_1655) ? _1941 : min(_1655, _1941));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1542) + _1531;
        float _2268 = (_2263 * _1545) + _1535;
        float _2269 = (_2263 * _1548) + _1539;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_22_46_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_22_46_ladder_2;
        _1569 = frontier_phi_22_46_ladder_1;
        _1571 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1583 = ((((1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _582)) * _566;
    float _1584 = _1583 * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1585 = _1583 * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1586 = _1583 * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1637 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1642 = _1629 / _1641;
    float _1643 = _1633 / _1641;
    float _1644 = _1637 / _1641;
    float _1791;
    float _1792;
    float _1793;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1671 = ((uint(_1644 > cbSceneParam._m0[59u].y) + uint(_1644 > cbSceneParam._m0[59u].x)) + uint(_1644 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1672 = _1671 + 43u;
        uint _1680 = _1671 + 44u;
        uint _1688 = _1671 + 45u;
        uint _1696 = _1671 + 46u;
        float _1707 = fma(_1641, cbSceneParam._m0[_1672].w, fma(_1637, cbSceneParam._m0[_1672].z, fma(_1633, cbSceneParam._m0[_1672].y, _1629 * cbSceneParam._m0[_1672].x)));
        float _1711 = fma(_1641, cbSceneParam._m0[_1680].w, fma(_1637, cbSceneParam._m0[_1680].z, fma(_1633, cbSceneParam._m0[_1680].y, _1629 * cbSceneParam._m0[_1680].x)));
        float _1719 = fma(_1641, cbSceneParam._m0[_1696].w, fma(_1637, cbSceneParam._m0[_1696].z, fma(_1633, cbSceneParam._m0[_1696].y, _1629 * cbSceneParam._m0[_1696].x)));
        float _1724 = cbSceneParam._m0[33u].z * _1719;
        float _1726 = cbSceneParam._m0[33u].w * _1719;
        float _1729 = fma(_1641, cbSceneParam._m0[_1688].w, fma(_1637, cbSceneParam._m0[_1688].z, fma(_1633, cbSceneParam._m0[_1688].y, _1629 * cbSceneParam._m0[_1688].x))) / _1719;
        float _1777 = (cbSceneParam._m0[33u].x - sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644))) * cbSceneParam._m0[33u].y;
        float _3976 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1784 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 + _1707) / _1719, (_1726 + _1711) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 + _1707) / _1719, (_1711 - _1724) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 - _1724) / _1719, (_1711 - _1726) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 - _1726) / _1719, (_1724 + _1711) / _1719), _1729), 0.0)).x), vec4(0.25)));
        _1791 = 1.0 - (_1784 * cbSceneParam._m0[34u].x);
        _1792 = 1.0 - (_1784 * cbSceneParam._m0[34u].y);
        _1793 = 1.0 - (_1784 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1791 = 1.0;
        _1792 = 1.0;
        _1793 = 1.0;
    }
    float _1857;
    float _1859;
    float _1861;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1845 = fma(_1641, cbSceneParam._m0[63u].w, fma(_1637, cbSceneParam._m0[63u].z, fma(_1633, cbSceneParam._m0[63u].y, _1629 * cbSceneParam._m0[63u].x)));
        float _1846 = fma(_1641, cbSceneParam._m0[60u].w, fma(_1637, cbSceneParam._m0[60u].z, fma(_1633, cbSceneParam._m0[60u].y, _1629 * cbSceneParam._m0[60u].x))) / _1845;
        float _1847 = fma(_1641, cbSceneParam._m0[61u].w, fma(_1637, cbSceneParam._m0[61u].z, fma(_1633, cbSceneParam._m0[61u].y, _1629 * cbSceneParam._m0[61u].x))) / _1845;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1846 >= cbSceneParam._m0[64u].x) && (_1847 >= cbSceneParam._m0[64u].y)) && (_1846 <= cbSceneParam._m0[64u].z)) && (_1847 <= cbSceneParam._m0[64u].w))
        {
            float _1954 = fma(_1641, cbSceneParam._m0[62u].w, fma(_1637, cbSceneParam._m0[62u].z, fma(_1633, cbSceneParam._m0[62u].y, _1629 * cbSceneParam._m0[62u].x))) / _1845;
            float _1958 = isnan(cbSceneParam._m0[41u].w) ? _1954 : (isnan(_1954) ? cbSceneParam._m0[41u].w : max(_1954, cbSceneParam._m0[41u].w));
            float _2001 = (cbSceneParam._m0[33u].x - sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644))) * cbSceneParam._m0[33u].y;
            float _3992 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
            float _2008 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1846, cbSceneParam._m0[33u].w + _1847), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1846, _1847 - cbSceneParam._m0[33u].z), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1846 - cbSceneParam._m0[33u].z, _1847 - cbSceneParam._m0[33u].w), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1846 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1847), _1958), 0.0)).x), vec4(0.25)));
            float _2012 = 1.0 - (_2008 * cbSceneParam._m0[34u].x);
            float _2013 = 1.0 - (_2008 * cbSceneParam._m0[34u].y);
            float _2014 = 1.0 - (_2008 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2012) ? _1791 : (isnan(_1791) ? _2012 : min(_1791, _2012));
            frontier_phi_34_33_ladder_1 = isnan(_2014) ? _1793 : (isnan(_1793) ? _2014 : min(_1793, _2014));
            frontier_phi_34_33_ladder_2 = isnan(_2013) ? _1792 : (isnan(_1792) ? _2013 : min(_1792, _2013));
        }
        else
        {
            frontier_phi_34_33_ladder = _1791;
            frontier_phi_34_33_ladder_1 = _1793;
            frontier_phi_34_33_ladder_2 = _1792;
        }
        _1857 = frontier_phi_34_33_ladder;
        _1859 = frontier_phi_34_33_ladder_2;
        _1861 = frontier_phi_34_33_ladder_1;
    }
    else
    {
        _1857 = _1791;
        _1859 = _1792;
        _1861 = _1793;
    }
    uvec4 _1866 = floatBitsToUint(cbInstanceData._m0[_541 + 5u]);
    uint _1868 = _1866.x * 14u;
    uint _1869 = _1868 + 13u;
    float _1874 = _566 + (-1.0);
    float _1877 = (cbLight._m0[_1869].x * _1874) + 1.0;
    float _1878 = (cbLight._m0[_1869].y * _1874) + 1.0;
    uint _1880 = _1868 + 4u;
    float _1891 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_471, _472, _473));
    float _1894 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    float _1895 = cbLight._m0[_1880].x * _1857;
    float _1896 = cbLight._m0[_1880].y * _1859;
    float _1897 = cbLight._m0[_1880].z * _1861;
    uint _1898 = _1868 + 5u;
    uint _1904 = _1868 | 1u;
    float _1910 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_471, _472, _473));
    float _1913 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    float _2086;
    float _2087;
    float _2088;
    if (_475 == 0.0)
    {
        float _4028 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _4039 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _2023 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
        float _2025 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
        _2086 = ((cbLight._m0[_1898].x * _1913) * _2025) + ((_1895 * _1894) * _2023);
        _2087 = ((_1913 * cbLight._m0[_1898].y) * _2025) + ((_1896 * _1894) * _2023);
        _2088 = ((_1913 * cbLight._m0[_1898].z) * _2025) + ((_1897 * _1894) * _2023);
    }
    else
    {
        float _2035 = _1891 + _475;
        float _2038 = (_475 * 2.0) + 1.0;
        float _2039 = (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) / _2038;
        float _2046 = _1910 + _475;
        float _2048 = (isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) / _2038;
        _2086 = (((_2048 * cbLight._m0[_1898].x) * _1913) + ((_1895 * _2039) * _1894)) * 0.3183098733425140380859375;
        _2087 = (((_2048 * cbLight._m0[_1898].y) * _1913) + ((_1896 * _2039) * _1894)) * 0.3183098733425140380859375;
        _2088 = (((_2048 * cbLight._m0[_1898].z) * _1913) + ((_1897 * _2039) * _1894)) * 0.3183098733425140380859375;
    }
    uint _2092 = _1868 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _474) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1868].x + _369;
    float _2111 = cbLight._m0[_1868].y + _370;
    float _2112 = cbLight._m0[_1868].z + _371;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1868].xyz));
    float _4060 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _2124 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2125 = dot(vec3(_471, _472, _473), vec3(_2117, _2118, _2119));
    float _4082 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2117, _2118, _2119));
    float _4093 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2149 = 1.0 - _2109;
    float _2160 = (0.5 / (((_2124 * ((_2123 * _2149) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2149) + _2109) * _2123))) * _2123;
    float _4104 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2178 = _1868 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _474) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1904].x + _369;
    float _2195 = cbLight._m0[_1904].y + _370;
    float _2196 = cbLight._m0[_1904].z + _371;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1904].xyz));
    float _4115 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2208 = dot(vec3(_471, _472, _473), vec3(_2201, _2202, _2203));
    float _4126 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2201, _2202, _2203));
    float _4137 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2124 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2230) + _2193) * _2207))) * _2207;
    float _4148 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2178].x) * _2242) * _1913) + ((((cbLight._m0[_2092].x * _1857) * _2148) * _2162) * _1894);
    float _2253 = (((_2229 * cbLight._m0[_2178].y) * _2242) * _1913) + ((((cbLight._m0[_2092].y * _1859) * _2148) * _2162) * _1894);
    float _2254 = (((_2229 * cbLight._m0[_2178].z) * _2242) * _1913) + ((((cbLight._m0[_2092].z * _1861) * _2148) * _2162) * _1894);
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_1866.y == 0u)
    {
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.x;
        uint _2309 = uint((float(_2297.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2298))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2298)));
        float _2319 = (log2(_1644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2320 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        uint _2323 = uint(isnan(14.0) ? _2320 : (isnan(_2320) ? 14.0 : min(_2320, 14.0)));
        uvec4 _2328 = texelFetch(g_lightClusterGridBuffer, int(((_2323 << 2u) + (_2309 << 6u)) >> 2u));
        uint _2329 = _2328.x;
        uint _2330 = _2297.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2330 >> 4u) & 15u)) + 4294967295u) & _2329) == 0u) || ((_2330 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            uint _2564 = 0u;
            uint _2573;
            bool _2574;
            for (;;)
            {
                _2573 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2564 << 2u)) >> 2u)).x;
                _2574 = _2573 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2574)
                {
                    frontier_phi_61_pred = _2561;
                    frontier_phi_61_pred_1 = _2560;
                    frontier_phi_61_pred_2 = _2559;
                    frontier_phi_61_pred_3 = _2558;
                    frontier_phi_61_pred_4 = _2562;
                    frontier_phi_61_pred_5 = _2563;
                }
                else
                {
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    uint _2741;
                    _2735 = _2558;
                    _2736 = _2559;
                    _2737 = _2560;
                    _2738 = _2561;
                    _2739 = _2562;
                    _2740 = _2563;
                    _2741 = _2573;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    for (;;)
                    {
                        uint _2745 = uint(findLSB(_2741)) + (_2564 << 5u);
                        uint _2742 = (_2741 + 4294967295u) & _2741;
                        uint _2747 = _2745 * 48u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2767 = (_2745 * 48u) + 4u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        float _2781 = _2780.x;
                        float _2782 = _2780.y;
                        float _2783 = _2780.z;
                        uint _2786 = (_2745 * 48u) + 8u;
                        vec3 _2797 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x));
                        uint _2802 = (_2745 * 48u) + 12u;
                        vec2 _2810 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x));
                        float _2816 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
                        float _2817 = _2816 * _1642;
                        float _2818 = _2816 * _1643;
                        float _2819 = _2816 * _1644;
                        float _2820 = _2761.x - _1642;
                        float _2821 = _2761.y - _1643;
                        float _2822 = _2761.z - _1644;
                        float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                        float _2826 = inversesqrt(_2823);
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2830 = dot(vec3(_522, _525, _528), vec3(_2827, _2828, _2829));
                        float _2835 = 1.0 - (_2823 * _2761.w);
                        float _4169 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2837 = sqrt(_2823) * _2780.w;
                        float _2840 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                        float _2841 = _2840 * _2840;
                        float _2842 = 1.0 - _2841;
                        float _2844 = (_2842 * _2842) * _475;
                        float _2847 = ((_2842 * _2830) + _2841) + _2844;
                        float _2852 = _2837 * _2837;
                        float _2857 = ((isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))) * _2836) / (((_2844 * 2.0) + 1.0) * ((_2852 * 0.699999988079071044921875) + 1.0));
                        float _2861 = dot(vec3(_2827, _2828, _2829), vec3(_2817, _2818, _2819));
                        float _4185 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2868 = dot(vec3((-0.0) - _2817, (-0.0) - _2818, (-0.0) - _2819), vec3(_522, _525, _528)) + 1.0;
                        float _2870 = (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * 0.5;
                        float _2877 = ((_2870 * _2870) * _2810.x) * exp2((_2810.y * 32.0) * log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))));
                        float _2879 = _475 / (_475 + 1.0);
                        float _2895 = (-0.0) - _1642;
                        float _2896 = (-0.0) - _1643;
                        float _2897 = (-0.0) - _1644;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2911 = exp2(log2(1.0 / ((_2852 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _582;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2902 + _2827;
                        float _2923 = _2903 + _2828;
                        float _2924 = _2904 + _2829;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_522, _525, _528), vec3(_2902, _2903, _2904));
                        float _4201 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2936 = dot(vec3(_522, _525, _528), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4212 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2840 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2830) + _2945;
                        float _4223 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4234 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_2943 * _2943) * ((_2852 * 2.1991131305694580078125) + 3.141590118408203125))) * _2836;
                        _2669 = (((((_2781 * 0.3183098733425140380859375) * _2879) * _2877) + _2781) * _2857) + _2738;
                        _2670 = (((((_2782 * 0.3183098733425140380859375) * _2879) * _2877) + _2782) * _2857) + _2739;
                        _2671 = (((((_2783 * 0.3183098733425140380859375) * _2879) * _2877) + _2783) * _2857) + _2740;
                        _2666 = (_2971 * _2797.x) + _2735;
                        _2667 = (_2971 * _2797.y) + _2736;
                        _2668 = (_2971 * _2797.z) + _2737;
                        if (_2742 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2735 = _2666;
                            _2736 = _2667;
                            _2737 = _2668;
                            _2738 = _2669;
                            _2739 = _2670;
                            _2740 = _2671;
                            _2741 = _2742;
                        }
                    }
                    frontier_phi_61_pred = _2669;
                    frontier_phi_61_pred_1 = _2668;
                    frontier_phi_61_pred_2 = _2667;
                    frontier_phi_61_pred_3 = _2666;
                    frontier_phi_61_pred_4 = _2670;
                    frontier_phi_61_pred_5 = _2671;
                }
                _2383 = frontier_phi_61_pred;
                _2381 = frontier_phi_61_pred_1;
                _2379 = frontier_phi_61_pred_2;
                _2377 = frontier_phi_61_pred_3;
                _2385 = frontier_phi_61_pred_4;
                _2387 = frontier_phi_61_pred_5;
                uint _2565 = _2564 + 1u;
                if (_2565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2558 = _2377;
                    _2559 = _2379;
                    _2560 = _2381;
                    _2561 = _2383;
                    _2562 = _2385;
                    _2563 = _2387;
                    _2564 = _2565;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((4294967295u << _2393) & _2329) == 0u)
        {
            _2526 = _2376;
            _2528 = _2378;
            _2530 = _2380;
            _2532 = _2382;
            _2534 = _2384;
            _2536 = _2386;
        }
        else
        {
            float _2551 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
            float _2552 = _2551 * _1642;
            float _2553 = _2551 * _1643;
            float _2554 = _2551 * _1644;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2718 = _2376;
                float _2719 = _2378;
                float _2720 = _2380;
                float _2721 = _2382;
                float _2722 = _2384;
                float _2723 = _2386;
                uint _2724 = _2393;
                uint _2733;
                bool _2734;
                for (;;)
                {
                    _2733 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                    _2734 = _2733 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2734)
                    {
                        frontier_phi_69_pred = _2721;
                        frontier_phi_69_pred_1 = _2720;
                        frontier_phi_69_pred_2 = _2719;
                        frontier_phi_69_pred_3 = _2718;
                        frontier_phi_69_pred_4 = _2723;
                        frontier_phi_69_pred_5 = _2722;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3027 = _2718;
                        float _3028 = _2719;
                        float _3029 = _2720;
                        float _3030 = _2721;
                        float _3031 = _2722;
                        float _3032 = _2723;
                        uint _3033 = _2733;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        vec3 _3090;
                        vec2 _3099;
                        vec4 _3115;
                        vec4 _3131;
                        float _3178;
                        bool _3179;
                        for (;;)
                        {
                            uint _3044 = ((_2724 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.x;
                            _3077 = _3075.y;
                            _3078 = _3075.z;
                            uint _3080 = (_3044 * 40u) + 8u;
                            _3090 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x));
                            uint _3092 = (_3044 * 40u) + 12u;
                            _3099 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x));
                            uint _3102 = (_3044 * 40u) + 16u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3118 = (_3044 * 40u) + 20u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3134 = (_3044 * 40u) + 24u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3153 = (_3044 * 40u) + 28u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3178 = fma(_1644, _3166.z, fma(_1643, _3166.y, _3166.x * _1642)) + _3166.w;
                            _3179 = !((fma(_1644, _3147.z, fma(_1643, _3147.y, _3147.x * _1642)) + _3147.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3179)
                            {
                                float _3205 = _3059.x - _1642;
                                float _3206 = _3059.y - _1643;
                                float _3207 = _3059.z - _1644;
                                float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                                float _3211 = inversesqrt(_3208);
                                float _3212 = _3211 * _3205;
                                float _3213 = _3211 * _3206;
                                float _3214 = _3211 * _3207;
                                float _3218 = 1.0 - (_3208 / (_3060 * _3060));
                                float _4245 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3223 = sqrt(_3208) * _3075.w;
                                float _3225 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                                float _3226 = _3225 * _3225;
                                float _3227 = 1.0 - _3226;
                                float _3229 = (_3227 * _3227) * _475;
                                float _3232 = ((_3227 * dot(vec3(_3212, _3213, _3214), vec3(_522, _525, _528))) + _3226) + _3229;
                                float _3237 = _3223 * _3223;
                                float _3242 = (fma(_1644, _3115.z, fma(_1643, _3115.y, _3115.x * _1642)) + _3115.w) / _3178;
                                float _3243 = (fma(_1644, _3131.z, fma(_1643, _3131.y, _3131.x * _1642)) + _3131.w) / _3178;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4261 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3219) / (((_3229 * 2.0) + 1.0) * ((_3237 * 0.699999988079071044921875) + 1.0)));
                                float _3250 = (-0.0) - _2552;
                                float _3251 = (-0.0) - _2553;
                                float _3252 = (-0.0) - _2554;
                                float _3253 = dot(vec3(_3212, _3213, _3214), vec3(_2552, _2553, _2554));
                                float _4272 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3260 = dot(vec3(_3250, _3251, _3252), vec3(_522, _525, _528)) + 1.0;
                                float _3262 = (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * 0.5;
                                float _3269 = ((_3262 * _3262) * _3099.x) * exp2((_3099.y * 32.0) * log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))));
                                float _3271 = _475 / (_475 + 1.0);
                                float _3292 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                                float _3293 = 1.0 - _582;
                                float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                                float _3301 = _3300 * _3300;
                                float _3302 = _3301 * _3301;
                                float _3303 = _3212 - _2552;
                                float _3304 = _3213 - _2553;
                                float _3305 = _3214 - _2554;
                                float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                                float _3313 = dot(vec3(_522, _525, _528), vec3(_3250, _3251, _3252));
                                float _4288 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3317 = dot(vec3(_522, _525, _528), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                                float _4299 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                                float _3325 = _3225 * _3301;
                                float _3326 = _3325 * _3325;
                                float _3332 = ((1.0 - _3326) * dot(vec3(_522, _525, _528), vec3(_3212, _3213, _3214))) + _3326;
                                float _4310 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3334 = 1.0 - _3301;
                                float _3344 = (0.5 / (((_3333 * ((_3316 * _3334) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3301) * _3316))) * _3333;
                                float _4321 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3354 = (_3248 * _3219) * (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_3324 * _3324) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = ((((_3076 * 0.3183098733425140380859375) * _3271) * _3269) + _3076) * _3249;
                                frontier_phi_75_pred_1 = _3354 * _3090.z;
                                frontier_phi_75_pred_2 = _3354 * _3090.y;
                                frontier_phi_75_pred_3 = _3354 * _3090.x;
                                frontier_phi_75_pred_4 = ((((_3077 * 0.3183098733425140380859375) * _3271) * _3269) + _3077) * _3249;
                                frontier_phi_75_pred_5 = ((((_3078 * 0.3183098733425140380859375) * _3271) * _3269) + _3078) * _3249;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_75_pred;
                            _3360 = frontier_phi_75_pred_1;
                            _3359 = frontier_phi_75_pred_2;
                            _3358 = frontier_phi_75_pred_3;
                            _3362 = frontier_phi_75_pred_4;
                            _3363 = frontier_phi_75_pred_5;
                            _3017 = _3361 + _3030;
                            _3018 = _3362 + _3031;
                            _3019 = _3363 + _3032;
                            _3014 = _3358 + _3027;
                            _3015 = _3359 + _3028;
                            _3016 = _3360 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3017;
                        frontier_phi_69_pred_1 = _3016;
                        frontier_phi_69_pred_2 = _3015;
                        frontier_phi_69_pred_3 = _3014;
                        frontier_phi_69_pred_4 = _3019;
                        frontier_phi_69_pred_5 = _3018;
                    }
                    _2533 = frontier_phi_69_pred;
                    _2531 = frontier_phi_69_pred_1;
                    _2529 = frontier_phi_69_pred_2;
                    _2527 = frontier_phi_69_pred_3;
                    _2537 = frontier_phi_69_pred_4;
                    _2535 = frontier_phi_69_pred_5;
                    uint _2725 = _2724 + 1u;
                    if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2718 = _2527;
                        _2719 = _2529;
                        _2720 = _2531;
                        _2721 = _2533;
                        _2722 = _2535;
                        _2723 = _2537;
                        _2724 = _2725;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2537;
                frontier_phi_55_56_ladder_1 = _2535;
                frontier_phi_55_56_ladder_2 = _2533;
                frontier_phi_55_56_ladder_3 = _2531;
                frontier_phi_55_56_ladder_4 = _2527;
                frontier_phi_55_56_ladder_5 = _2529;
            }
            else
            {
                frontier_phi_55_56_ladder = _2386;
                frontier_phi_55_56_ladder_1 = _2384;
                frontier_phi_55_56_ladder_2 = _2382;
                frontier_phi_55_56_ladder_3 = _2380;
                frontier_phi_55_56_ladder_4 = _2376;
                frontier_phi_55_56_ladder_5 = _2378;
            }
            _2526 = frontier_phi_55_56_ladder_4;
            _2528 = frontier_phi_55_56_ladder_5;
            _2530 = frontier_phi_55_56_ladder_3;
            _2532 = frontier_phi_55_56_ladder_2;
            _2534 = frontier_phi_55_56_ladder_1;
            _2536 = frontier_phi_55_56_ladder;
        }
        float _2541 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2342 = (_2541 * _2532) + _2086;
        _2344 = (_2541 * _2534) + _2087;
        _2346 = (_2541 * _2536) + _2088;
        _2348 = ((_2526 * 0.039999999105930328369140625) * _2541) + _2252;
        _2350 = ((_2528 * 0.039999999105930328369140625) * _2541) + _2253;
        _2352 = ((_2530 * 0.039999999105930328369140625) * _2541) + _2254;
    }
    else
    {
        _2342 = _2086;
        _2344 = _2087;
        _2346 = _2088;
        _2348 = _2252;
        _2350 = _2253;
        _2352 = _2254;
    }
    float _2465;
    float _2466;
    float _2467;
    if (_475 > 0.0)
    {
        uint _2397 = _1868 + 4u;
        float _2403 = (-0.0) - _369;
        float _2405 = (-0.0) - _370;
        float _2406 = (-0.0) - _371;
        float _2407 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2403, _2405, _2406));
        float _4337 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _577 + 1.0;
        float _2413 = (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))) * 0.5;
        float _2418 = _2413 * _2413;
        float _2419 = _2418 * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 32.0);
        float _2421 = _475 / (_475 + 1.0);
        float _2422 = isnan(_1877) ? 1.0 : (isnan(1.0) ? _1877 : min(1.0, _1877));
        uint _2435 = _1868 + 5u;
        float _2441 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2403, _2405, _2406));
        float _4358 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2448 = _2418 * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 32.0);
        float _2449 = isnan(_1878) ? 1.0 : (isnan(1.0) ? _1878 : min(1.0, _1878));
        _2465 = ((((_2448 * cbLight._m0[_2435].x) * _2421) * _2449) + ((((cbLight._m0[_2397].x * _1857) * _2419) * _2421) * _2422)) * 0.3183098733425140380859375;
        _2466 = ((((_2448 * cbLight._m0[_2435].y) * _2421) * _2449) + ((((cbLight._m0[_2397].y * _1859) * _2419) * _2421) * _2422)) * 0.3183098733425140380859375;
        _2467 = ((((_2448 * cbLight._m0[_2435].z) * _2421) * _2449) + ((((cbLight._m0[_2397].z * _1861) * _2419) * _2421) * _2422)) * 0.3183098733425140380859375;
    }
    else
    {
        _2465 = 0.0;
        _2466 = 0.0;
        _2467 = 0.0;
    }
    float _4374 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4385 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4396 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    uint _2489 = _541 + 6u;
    float _2497 = _500 / cbSceneParam._m0[86u].x;
    float _2498 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _494 : (isnan(_494) ? cbSceneParam._m0[77u].w : min(_494, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_494 > cbSceneParam._m0[78u].w)
    {
        float _2579 = isnan(_494) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _494 : min(cbSceneParam._m0[80u].w, _494));
        float _2580 = _2579 / _494;
        float _2591 = _2580 * _263;
        float _2592 = _264 * _2580;
        float _2593 = (-0.0) - _2592;
        float _2594 = _2580 * _265;
        float _2596 = (cbSceneParam._m0[77u].w * _2593) / _2579;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2592;
        float _2604 = sqrt(((_2591 * _2591) + (_2592 * _2592)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2579)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2976;
        if (abs((_2593 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2976 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2691 = 1.0 / cbSceneParam._m0[80u].x;
            float _2692 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2693 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2702 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : min(_2692, 0.0));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            _2976 = ((abs(_2604 / _2593) * cbSceneParam._m0[80u].y) * ((((_2702 - _2703) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0))))) * _2691)) - ((exp2(_2614 * _2702) - exp2(_2614 * _2703)) * _2691))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2978 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2987 = exp2((_2976 * (-1.44269502162933349609375)) * (1.0 - _2978.w));
        float _2988 = log2(_2987);
        float _3004 = log2(_2517);
        _2616 = (exp2(_3004 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].x)) * _2978.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2618 = (exp2(_3004 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].y)) * _2978.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2620 = (exp2(_3004 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].z)) * _2978.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2622 = _2987 * _2517;
    }
    else
    {
        _2616 = _2514;
        _2618 = _2515;
        _2620 = _2516;
        _2622 = _2517;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * ((_2342 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _566)) + _2465)) + ((_2348 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * ((_2344 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _566)) + _2466)) + ((_2350 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * ((_2346 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _566)) + _2467)) + ((_2352 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


