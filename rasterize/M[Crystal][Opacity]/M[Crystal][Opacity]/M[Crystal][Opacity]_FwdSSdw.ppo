#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_Opacity_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _936;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _276 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _292 = dot(vec3(_261, _262, _263), vec3(_190, _191, _192));
    float _295 = dot(vec3(_261, _262, _263), vec3(_204, _205, _206));
    float _298 = dot(vec3(_261, _262, _263), vec3(_197, _198, _199));
    float _304 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _326 = dot(vec4(texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _346 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_292 * cbMtdParam._m0[12u].x) * _304) * _326) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_295 * cbMtdParam._m0[12u].x) * _304) * _326) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _366 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _367 = _366 * _261;
    float _368 = _366 * _262;
    float _369 = _366 * _263;
    float _373 = dot(vec4(_367, _368, _369, 0.0), vec4(_197, _198, _199, 0.0)) - cbMtdParam._m0[12u].z;
    float _3237 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _380 = exp2(log2(1.0 - (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].w, 0.001000000047497451305389404296875))));
    float _396 = ((((_276.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _346.x) * cbMtdParam._m0[9u].x) * ((_380 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _401 = ((((_276.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _346.y) * cbMtdParam._m0[9u].y) * ((_380 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _406 = ((((_276.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _346.z) * cbMtdParam._m0[9u].z) * ((_380 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _419 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _427 = (_419.x * 2.0) + (-1.0);
    float _428 = (_419.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3253 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))));
    float _439 = cbMtdParam._m0[13u].y + _419.z;
    vec4 _451 = texture(sampler2D(M_Crystal_Opacity_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _455 = cbMtdParam._m0[13u].x * _451.x;
    float _458 = fma(_434, _197, fma(_428, _204, _427 * _190));
    float _461 = fma(_434, _198, fma(_428, _205, _427 * _191));
    float _464 = fma(_434, _199, fma(_428, _206, _427 * _192));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    float _469 = _468 * _458;
    float _470 = _468 * _461;
    float _471 = _468 * _464;
    float _3264 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _472 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _473 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3280 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3291 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3302 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _492 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_471, cbSceneParam._m0[5u].z, fma(_470, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _469));
    float _523 = fma(_471, cbSceneParam._m0[6u].z, fma(_470, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _469));
    float _526 = fma(_471, cbSceneParam._m0[7u].z, fma(_470, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _469));
    uint _539 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = (_539 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3313 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _564 = _561.x * TEXCOORD.z;
    float _565 = dot(vec3(_469, _470, _471), vec3(_367, _368, _369));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _469) - _367;
    float _573 = (_568 * _470) - _368;
    float _574 = (_568 * _471) - _369;
    float _575 = dot(vec3(_367, _368, _369), vec3(_469, _470, _471));
    float _578 = abs(_575);
    float _3346 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_472);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _664 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _668 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _693 = _625 + _469;
        float _694 = _629 + _470;
        float _695 = _633 + _471;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_469, _470, _471), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3394 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_469, _470, _471), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3427 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_469, _470, _471), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3460 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _980 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _984 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1007 = _625 + _469;
        float _1008 = _629 + _470;
        float _1009 = _633 + _471;
        float _1019 = fma(_1009, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007)) - _976;
        float _1020 = fma(_1009, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007)) - _980;
        float _1021 = fma(_1009, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007)) - _984;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_976 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_980 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[35u].z) + ((((((_984 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1075 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1042.x + (-0.5));
        float _1077 = _1075 * (_1042.y + (-0.5));
        float _1078 = _1075 * (_1042.z + (-0.5));
        float _1085 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1049.x + (-0.5));
        float _1087 = _1085 * (_1049.y + (-0.5));
        float _1088 = _1085 * (_1049.z + (-0.5));
        float _1095 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1056.x + (-0.5));
        float _1097 = _1095 * (_1056.y + (-0.5));
        float _1098 = _1095 * (_1056.z + (-0.5));
        float _1105 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1063.x + (-0.5));
        float _1107 = _1105 * (_1063.y + (-0.5));
        float _1108 = _1105 * (_1063.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_469, _470, _471), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3523 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1139 + 1.0))) + _1144) * _1109;
        float _1154 = _1077 * 0.5;
        float _1155 = _1087 * 0.5;
        float _1156 = _1097 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_469, _470, _471), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3556 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1181 + 1.0))) + _1186) * _1110;
        float _1196 = _1078 * 0.5;
        float _1197 = _1088 * 0.5;
        float _1198 = _1098 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_469, _470, _471), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3589 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1223 + 1.0))) + _1228) * _1111;
        _1245 = _1078;
        _1246 = _1077;
        _1247 = _1076;
        _1248 = _1088;
        _1249 = _1087;
        _1250 = _1086;
        _1251 = _1098;
        _1252 = _1097;
        _1253 = _1096;
        _1254 = _1111;
        _1255 = _1110;
        _1256 = _1109;
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _936;
        _1246 = _936;
        _1247 = _936;
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _949)) + _949;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1292 = fma(_1271, cbSceneParam._m0[89u].z, fma(_1270, cbSceneParam._m0[89u].y, _1269 * cbSceneParam._m0[89u].x));
    float _1295 = fma(_1271, cbSceneParam._m0[90u].z, fma(_1270, cbSceneParam._m0[90u].y, _1269 * cbSceneParam._m0[90u].x));
    float _1298 = fma(_1271, cbSceneParam._m0[91u].z, fma(_1270, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1269));
    float _1313 = _572 * 0.5;
    float _1314 = _573 * 0.5;
    float _1315 = _574 * 0.5;
    float _1316 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1319 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1322 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1356;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1329 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_935, _939, _942, _945));
        float _1333 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_937, _940, _943, _946));
        float _1337 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_938, _941, _944, _947));
        float _1344 = dot(vec4(cbModelParam._m0[39u]), vec4(_1313, _1314, _1315, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1367;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1358 = dot(vec4(cbModelParam._m0[40u]), vec4(_1313, _1314, _1315, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1371 = (_1367 * cbModelParam._m0[1u].x) + (_1356 * (1.0 - cbModelParam._m0[1u].x));
    float _1381 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _472);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1381 : min(cbModelParam._m0[25u].z, _1381));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1444 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1447 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1475 = frontier_phi_14_12_ladder;
        }
        float _1669;
        if (_1444 > 0.0)
        {
            _1669 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1669 = frontier_phi_23_19_ladder;
        }
        float _1907;
        if (_1447 > 0.0)
        {
            _1907 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1907 = frontier_phi_34_30_ladder;
        }
        float _1909 = isnan(_1669) ? _1475 : (isnan(_1475) ? _1669 : min(_1475, _1669));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1441) + _1430;
        float _1915 = (_1910 * _1444) + _1434;
        float _1916 = (_1910 * _1447) + _1438;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1382);
            frontier_phi_13_34_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_13_34_ladder_2;
        _1465 = frontier_phi_13_34_ladder_1;
        _1467 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1382);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _472);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1543 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1546 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1674;
        if (_1540 > 0.0)
        {
            _1674 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1674 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1543 > 0.0)
        {
            _1934 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_36_32_ladder;
        }
        float _2226;
        if (_1546 > 0.0)
        {
            _2226 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2226 = frontier_phi_47_42_ladder;
        }
        float _2228 = isnan(_1934) ? _1674 : (isnan(_1674) ? _1934 : min(_1674, _1934));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1540) + _1529;
        float _2234 = (_2229 * _1543) + _1533;
        float _2235 = (_2229 * _1546) + _1537;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_22_47_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_22_47_ladder_2;
        _1567 = frontier_phi_22_47_ladder_1;
        _1569 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1581 = ((((1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_593 * _580)) * _564;
    float _1582 = _1581 * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1583 = _1581 * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1584 = _1581 * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    vec4 _1601 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_498, _499));
    float _1603 = _1601.w;
    float _1615 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1603);
    float _1616 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1603);
    float _1617 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1603);
    uvec4 _1621 = floatBitsToUint(cbInstanceData._m0[_539 + 5u]);
    uint _1623 = _1621.x * 14u;
    uint _1624 = _1623 + 13u;
    float _1629 = _564 + (-1.0);
    float _1632 = (cbLight._m0[_1624].x * _1629) + 1.0;
    float _1633 = (cbLight._m0[_1624].y * _1629) + 1.0;
    uint _1635 = _1623 + 4u;
    float _1646 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_469, _470, _471));
    float _1649 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    float _1650 = cbLight._m0[_1635].x * _1615;
    float _1651 = cbLight._m0[_1635].y * _1616;
    float _1652 = cbLight._m0[_1635].z * _1617;
    uint _1653 = _1623 + 5u;
    uint _1659 = _1623 | 1u;
    float _1665 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_469, _470, _471));
    float _1668 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    float _1733;
    float _1734;
    float _1735;
    if (_473 == 0.0)
    {
        float _3725 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _3736 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1687 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
        float _1689 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
        _1733 = ((cbLight._m0[_1653].x * _1668) * _1689) + ((_1650 * _1649) * _1687);
        _1734 = ((_1668 * cbLight._m0[_1653].y) * _1689) + ((_1651 * _1649) * _1687);
        _1735 = ((_1668 * cbLight._m0[_1653].z) * _1689) + ((_1652 * _1649) * _1687);
    }
    else
    {
        float _1699 = _1646 + _473;
        float _1702 = (_473 * 2.0) + 1.0;
        float _1703 = (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) / _1702;
        float _1710 = _1665 + _473;
        float _1712 = (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) / _1702;
        _1733 = (((_1712 * cbLight._m0[_1653].x) * _1668) + ((_1650 * _1703) * _1649)) * 0.3183098733425140380859375;
        _1734 = (((_1712 * cbLight._m0[_1653].y) * _1668) + ((_1651 * _1703) * _1649)) * 0.3183098733425140380859375;
        _1735 = (((_1712 * cbLight._m0[_1653].z) * _1668) + ((_1652 * _1703) * _1649)) * 0.3183098733425140380859375;
    }
    uint _1739 = _1623 + 8u;
    float _1755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _472) * 0.949999988079071044921875);
    float _1756 = _1755 * _1755;
    float _1757 = cbLight._m0[_1623].x + _367;
    float _1758 = cbLight._m0[_1623].y + _368;
    float _1759 = cbLight._m0[_1623].z + _369;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1764 = _1763 * _1757;
    float _1765 = _1763 * _1758;
    float _1766 = _1763 * _1759;
    float _1767 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1623].xyz));
    float _3757 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1771 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1772 = dot(vec3(_469, _470, _471), vec3(_1764, _1765, _1766));
    float _3779 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1764, _1765, _1766));
    float _3790 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1756 * _1756;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1795 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1796 = 1.0 - _1756;
    float _1807 = (0.5 / (((_1771 * ((_1770 * _1796) + _1756)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1796) + _1756) * _1770))) * _1770;
    float _3801 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    uint _1825 = _1623 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _472) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1659].x + _367;
    float _1842 = cbLight._m0[_1659].y + _368;
    float _1843 = cbLight._m0[_1659].z + _369;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1659].xyz));
    float _3812 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1855 = dot(vec3(_469, _470, _471), vec3(_1848, _1849, _1850));
    float _3823 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1848, _1849, _1850));
    float _3834 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1840;
    float _1887 = (0.5 / (((_1771 * ((_1854 * _1877) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1877) + _1840) * _1854))) * _1854;
    float _3845 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1899 = (((_1876 * cbLight._m0[_1825].x) * _1889) * _1668) + ((((cbLight._m0[_1739].x * _1615) * _1795) * _1809) * _1649);
    float _1900 = (((_1876 * cbLight._m0[_1825].y) * _1889) * _1668) + ((((cbLight._m0[_1739].y * _1616) * _1795) * _1809) * _1649);
    float _1901 = (((_1876 * cbLight._m0[_1825].z) * _1889) * _1668) + ((((cbLight._m0[_1739].z * _1617) * _1795) * _1809) * _1649);
    float _2038;
    float _2040;
    float _2042;
    float _2044;
    float _2046;
    float _2048;
    if (_1621.y == 0u)
    {
        float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1978;
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1978;
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1978;
        uvec4 _1993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1994 = _1993.x;
        uint _2005 = uint((float(_1993.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _1994))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _1994)));
        float _2015 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2016 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        uint _2019 = uint(isnan(14.0) ? _2016 : (isnan(_2016) ? 14.0 : min(_2016, 14.0)));
        uvec4 _2024 = texelFetch(g_lightClusterGridBuffer, int(((_2019 << 2u) + (_2005 << 6u)) >> 2u));
        uint _2025 = _2024.x;
        uint _2026 = _1993.z;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        if (((((1u << ((_2026 >> 4u) & 15u)) + 4294967295u) & _2025) == 0u) || ((_2026 & 240u) == 0u))
        {
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
        }
        else
        {
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            uint _2290 = 0u;
            uint _2299;
            bool _2300;
            for (;;)
            {
                _2299 = texelFetch(g_lightClassification, int((((_2019 << 5u) + (_2005 << 9u)) + (_2290 << 2u)) >> 2u)).x;
                _2300 = _2299 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2300)
                {
                    frontier_phi_56_pred = _2286;
                    frontier_phi_56_pred_1 = _2289;
                    frontier_phi_56_pred_2 = _2288;
                    frontier_phi_56_pred_3 = _2287;
                    frontier_phi_56_pred_4 = _2285;
                    frontier_phi_56_pred_5 = _2284;
                }
                else
                {
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    uint _2488;
                    _2482 = _2284;
                    _2483 = _2285;
                    _2484 = _2286;
                    _2485 = _2287;
                    _2486 = _2288;
                    _2487 = _2289;
                    _2488 = _2299;
                    float _2413;
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    for (;;)
                    {
                        uint _2492 = uint(findLSB(_2488)) + (_2290 << 5u);
                        uint _2489 = (_2488 + 4294967295u) & _2488;
                        uint _2494 = _2492 * 48u;
                        vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2494)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 3u)).x));
                        uint _2514 = (_2492 * 48u) + 4u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        float _2528 = _2527.x;
                        float _2529 = _2527.y;
                        float _2530 = _2527.z;
                        uint _2533 = (_2492 * 48u) + 8u;
                        vec3 _2544 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x));
                        uint _2549 = (_2492 * 48u) + 12u;
                        vec2 _2557 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2549)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 1u)).x));
                        float _2563 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
                        float _2564 = _2563 * _1979;
                        float _2565 = _2563 * _1980;
                        float _2566 = _2563 * _1981;
                        float _2567 = _2508.x - _1979;
                        float _2568 = _2508.y - _1980;
                        float _2569 = _2508.z - _1981;
                        float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                        float _2573 = inversesqrt(_2570);
                        float _2574 = _2573 * _2567;
                        float _2575 = _2573 * _2568;
                        float _2576 = _2573 * _2569;
                        float _2577 = dot(vec3(_520, _523, _526), vec3(_2574, _2575, _2576));
                        float _2582 = 1.0 - (_2570 * _2508.w);
                        float _3866 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2583 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2584 = sqrt(_2570) * _2527.w;
                        float _2587 = 1.39999997615814208984375 / (_2584 + 1.39999997615814208984375);
                        float _2588 = _2587 * _2587;
                        float _2589 = 1.0 - _2588;
                        float _2591 = (_2589 * _2589) * _473;
                        float _2594 = ((_2589 * _2577) + _2588) + _2591;
                        float _2599 = _2584 * _2584;
                        float _2604 = ((isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))) * _2583) / (((_2591 * 2.0) + 1.0) * ((_2599 * 0.699999988079071044921875) + 1.0));
                        float _2608 = dot(vec3(_2574, _2575, _2576), vec3(_2564, _2565, _2566));
                        float _3882 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2615 = dot(vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566), vec3(_520, _523, _526)) + 1.0;
                        float _2617 = (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))) * 0.5;
                        float _2624 = ((_2617 * _2617) * _2557.x) * exp2((_2557.y * 32.0) * log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
                        float _2626 = _473 / (_473 + 1.0);
                        float _2642 = (-0.0) - _1979;
                        float _2643 = (-0.0) - _1980;
                        float _2644 = (-0.0) - _1981;
                        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
                        float _2649 = _2648 * _2642;
                        float _2650 = _2648 * _2643;
                        float _2651 = _2648 * _2644;
                        float _2659 = exp2(log2(1.0 / ((_2599 * 3.5) + 5.0)) * 0.25);
                        float _2660 = 1.0 - _580;
                        float _2667 = sqrt(1.0 - ((1.0 - (_2660 * _2660)) * (1.0 - (_2659 * _2659))));
                        float _2668 = _2667 * _2667;
                        float _2669 = _2668 * _2668;
                        float _2670 = _2649 + _2574;
                        float _2671 = _2650 + _2575;
                        float _2672 = _2651 + _2576;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2680 = dot(vec3(_520, _523, _526), vec3(_2649, _2650, _2651));
                        float _3898 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2683 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2684 = dot(vec3(_520, _523, _526), vec3(_2676 * _2670, _2676 * _2671, _2676 * _2672));
                        float _3909 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                        float _2691 = ((_2687 * _2687) * (_2669 + (-1.0))) + 1.0;
                        float _2692 = _2587 * _2668;
                        float _2693 = _2692 * _2692;
                        float _2696 = ((1.0 - _2693) * _2577) + _2693;
                        float _3920 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                        float _2698 = 1.0 - _2668;
                        float _2708 = (0.5 / (((_2697 * ((_2683 * _2698) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2698) + _2668) * _2683))) * _2697;
                        float _3931 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2719 = (((_2669 * 3.1415927410125732421875) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) / ((_2691 * _2691) * ((_2599 * 2.1991131305694580078125) + 3.141590118408203125))) * _2583;
                        _2416 = (((((_2528 * 0.3183098733425140380859375) * _2626) * _2624) + _2528) * _2604) + _2485;
                        _2417 = (((((_2529 * 0.3183098733425140380859375) * _2626) * _2624) + _2529) * _2604) + _2486;
                        _2418 = (((((_2530 * 0.3183098733425140380859375) * _2626) * _2624) + _2530) * _2604) + _2487;
                        _2413 = (_2719 * _2544.x) + _2482;
                        _2414 = (_2719 * _2544.y) + _2483;
                        _2415 = (_2719 * _2544.z) + _2484;
                        if (_2489 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2482 = _2413;
                            _2483 = _2414;
                            _2484 = _2415;
                            _2485 = _2416;
                            _2486 = _2417;
                            _2487 = _2418;
                            _2488 = _2489;
                        }
                    }
                    frontier_phi_56_pred = _2415;
                    frontier_phi_56_pred_1 = _2418;
                    frontier_phi_56_pred_2 = _2417;
                    frontier_phi_56_pred_3 = _2416;
                    frontier_phi_56_pred_4 = _2414;
                    frontier_phi_56_pred_5 = _2413;
                }
                _2081 = frontier_phi_56_pred;
                _2087 = frontier_phi_56_pred_1;
                _2085 = frontier_phi_56_pred_2;
                _2083 = frontier_phi_56_pred_3;
                _2079 = frontier_phi_56_pred_4;
                _2077 = frontier_phi_56_pred_5;
                uint _2291 = _2290 + 1u;
                if (_2291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2284 = _2077;
                    _2285 = _2079;
                    _2286 = _2081;
                    _2287 = _2083;
                    _2288 = _2085;
                    _2289 = _2087;
                    _2290 = _2291;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
        }
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.z;
        uint _2093 = (_2091 >> 8u) & 15u;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        if (((4294967295u << _2093) & _2025) == 0u)
        {
            _2252 = _2076;
            _2254 = _2078;
            _2256 = _2080;
            _2258 = _2082;
            _2260 = _2084;
            _2262 = _2086;
        }
        else
        {
            float _2277 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _2278 = _2277 * _1979;
            float _2279 = _2277 * _1980;
            float _2280 = _2277 * _1981;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2093 < ((_2091 >> 12u) & 15u))
            {
                float _2253;
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2465 = _2076;
                float _2466 = _2078;
                float _2467 = _2080;
                float _2468 = _2082;
                float _2469 = _2084;
                float _2470 = _2086;
                uint _2471 = _2093;
                uint _2480;
                bool _2481;
                for (;;)
                {
                    _2480 = texelFetch(g_lightClassification, int((((_2019 << 5u) + (_2005 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                    _2481 = _2480 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2481)
                    {
                        frontier_phi_64_pred = _2470;
                        frontier_phi_64_pred_1 = _2469;
                        frontier_phi_64_pred_2 = _2468;
                        frontier_phi_64_pred_3 = _2467;
                        frontier_phi_64_pred_4 = _2466;
                        frontier_phi_64_pred_5 = _2465;
                    }
                    else
                    {
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2775 = _2465;
                        float _2776 = _2466;
                        float _2777 = _2467;
                        float _2778 = _2468;
                        float _2779 = _2469;
                        float _2780 = _2470;
                        uint _2781 = _2480;
                        uint _2782;
                        vec4 _2807;
                        float _2808;
                        vec4 _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        vec3 _2838;
                        vec2 _2847;
                        vec4 _2863;
                        vec4 _2879;
                        float _2926;
                        bool _2927;
                        for (;;)
                        {
                            uint _2792 = ((_2471 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2781));
                            _2782 = (_2781 + 4294967295u) & _2781;
                            uint _2794 = _2792 * 40u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            _2808 = _2807.w;
                            uint _2810 = (_2792 * 40u) + 4u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            _2824 = _2823.x;
                            _2825 = _2823.y;
                            _2826 = _2823.z;
                            uint _2828 = (_2792 * 40u) + 8u;
                            _2838 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x));
                            uint _2840 = (_2792 * 40u) + 12u;
                            _2847 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x));
                            uint _2850 = (_2792 * 40u) + 16u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2866 = (_2792 * 40u) + 20u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2792 * 40u) + 24u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2901 = (_2792 * 40u) + 28u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2926 = fma(_1981, _2914.z, fma(_1980, _2914.y, _2914.x * _1979)) + _2914.w;
                            _2927 = !((fma(_1981, _2895.z, fma(_1980, _2895.y, _2895.x * _1979)) + _2895.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2927)
                            {
                                float _2953 = _2807.x - _1979;
                                float _2954 = _2807.y - _1980;
                                float _2955 = _2807.z - _1981;
                                float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                                float _2959 = inversesqrt(_2956);
                                float _2960 = _2959 * _2953;
                                float _2961 = _2959 * _2954;
                                float _2962 = _2959 * _2955;
                                float _2966 = 1.0 - (_2956 / (_2808 * _2808));
                                float _3942 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2971 = sqrt(_2956) * _2823.w;
                                float _2973 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                                float _2974 = _2973 * _2973;
                                float _2975 = 1.0 - _2974;
                                float _2977 = (_2975 * _2975) * _473;
                                float _2980 = ((_2975 * dot(vec3(_2960, _2961, _2962), vec3(_520, _523, _526))) + _2974) + _2977;
                                float _2985 = _2971 * _2971;
                                float _2990 = (fma(_1981, _2863.z, fma(_1980, _2863.y, _2863.x * _1979)) + _2863.w) / _2926;
                                float _2991 = (fma(_1981, _2879.z, fma(_1980, _2879.y, _2879.x * _1979)) + _2879.w) / _2926;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _3958 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2967) / (((_2977 * 2.0) + 1.0) * ((_2985 * 0.699999988079071044921875) + 1.0)));
                                float _2998 = (-0.0) - _2278;
                                float _2999 = (-0.0) - _2279;
                                float _3000 = (-0.0) - _2280;
                                float _3001 = dot(vec3(_2960, _2961, _2962), vec3(_2278, _2279, _2280));
                                float _3969 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3008 = dot(vec3(_2998, _2999, _3000), vec3(_520, _523, _526)) + 1.0;
                                float _3010 = (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * 0.5;
                                float _3017 = ((_3010 * _3010) * _2847.x) * exp2((_2847.y * 32.0) * log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
                                float _3019 = _473 / (_473 + 1.0);
                                float _3040 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                                float _3041 = 1.0 - _580;
                                float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                                float _3049 = _3048 * _3048;
                                float _3050 = _3049 * _3049;
                                float _3051 = _2960 - _2278;
                                float _3052 = _2961 - _2279;
                                float _3053 = _2962 - _2280;
                                float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                                float _3061 = dot(vec3(_520, _523, _526), vec3(_2998, _2999, _3000));
                                float _3985 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3064 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _3065 = dot(vec3(_520, _523, _526), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                                float _3996 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                                float _3073 = _2973 * _3049;
                                float _3074 = _3073 * _3073;
                                float _3080 = ((1.0 - _3074) * dot(vec3(_520, _523, _526), vec3(_2960, _2961, _2962))) + _3074;
                                float _4007 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _3082 = 1.0 - _3049;
                                float _3092 = (0.5 / (((_3081 * ((_3064 * _3082) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3049) * _3064))) * _3081;
                                float _4018 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3102 = (_2996 * _2967) * (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) / ((_3072 * _3072) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3102 * _2838.z;
                                frontier_phi_70_pred_1 = ((((_2826 * 0.3183098733425140380859375) * _3019) * _3017) + _2826) * _2997;
                                frontier_phi_70_pred_2 = ((((_2825 * 0.3183098733425140380859375) * _3019) * _3017) + _2825) * _2997;
                                frontier_phi_70_pred_3 = ((((_2824 * 0.3183098733425140380859375) * _3019) * _3017) + _2824) * _2997;
                                frontier_phi_70_pred_4 = _3102 * _2838.y;
                                frontier_phi_70_pred_5 = _3102 * _2838.x;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3108 = frontier_phi_70_pred;
                            _3111 = frontier_phi_70_pred_1;
                            _3110 = frontier_phi_70_pred_2;
                            _3109 = frontier_phi_70_pred_3;
                            _3107 = frontier_phi_70_pred_4;
                            _3106 = frontier_phi_70_pred_5;
                            _2765 = _3109 + _2778;
                            _2766 = _3110 + _2779;
                            _2767 = _3111 + _2780;
                            _2762 = _3106 + _2775;
                            _2763 = _3107 + _2776;
                            _2764 = _3108 + _2777;
                            if (_2782 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2782;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2767;
                        frontier_phi_64_pred_1 = _2766;
                        frontier_phi_64_pred_2 = _2765;
                        frontier_phi_64_pred_3 = _2764;
                        frontier_phi_64_pred_4 = _2763;
                        frontier_phi_64_pred_5 = _2762;
                    }
                    _2263 = frontier_phi_64_pred;
                    _2261 = frontier_phi_64_pred_1;
                    _2259 = frontier_phi_64_pred_2;
                    _2257 = frontier_phi_64_pred_3;
                    _2255 = frontier_phi_64_pred_4;
                    _2253 = frontier_phi_64_pred_5;
                    uint _2472 = _2471 + 1u;
                    if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2465 = _2253;
                        _2466 = _2255;
                        _2467 = _2257;
                        _2468 = _2259;
                        _2469 = _2261;
                        _2470 = _2263;
                        _2471 = _2472;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2263;
                frontier_phi_49_50_ladder_1 = _2253;
                frontier_phi_49_50_ladder_2 = _2261;
                frontier_phi_49_50_ladder_3 = _2259;
                frontier_phi_49_50_ladder_4 = _2257;
                frontier_phi_49_50_ladder_5 = _2255;
            }
            else
            {
                frontier_phi_49_50_ladder = _2086;
                frontier_phi_49_50_ladder_1 = _2076;
                frontier_phi_49_50_ladder_2 = _2084;
                frontier_phi_49_50_ladder_3 = _2082;
                frontier_phi_49_50_ladder_4 = _2080;
                frontier_phi_49_50_ladder_5 = _2078;
            }
            _2252 = frontier_phi_49_50_ladder_1;
            _2254 = frontier_phi_49_50_ladder_5;
            _2256 = frontier_phi_49_50_ladder_4;
            _2258 = frontier_phi_49_50_ladder_3;
            _2260 = frontier_phi_49_50_ladder_2;
            _2262 = frontier_phi_49_50_ladder;
        }
        float _2267 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2038 = (_2267 * _2258) + _1733;
        _2040 = (_2267 * _2260) + _1734;
        _2042 = (_2267 * _2262) + _1735;
        _2044 = ((_2252 * 0.039999999105930328369140625) * _2267) + _1899;
        _2046 = ((_2254 * 0.039999999105930328369140625) * _2267) + _1900;
        _2048 = ((_2256 * 0.039999999105930328369140625) * _2267) + _1901;
    }
    else
    {
        _2038 = _1733;
        _2040 = _1734;
        _2042 = _1735;
        _2044 = _1899;
        _2046 = _1900;
        _2048 = _1901;
    }
    float _2165;
    float _2166;
    float _2167;
    if (_473 > 0.0)
    {
        uint _2097 = _1623 + 4u;
        float _2103 = (-0.0) - _367;
        float _2105 = (-0.0) - _368;
        float _2106 = (-0.0) - _369;
        float _2107 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_2103, _2105, _2106));
        float _4034 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _575 + 1.0;
        float _2113 = (isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * 0.5;
        float _2118 = _2113 * _2113;
        float _2119 = _2118 * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 32.0);
        float _2121 = _473 / (_473 + 1.0);
        float _2122 = isnan(_1632) ? 1.0 : (isnan(1.0) ? _1632 : min(1.0, _1632));
        uint _2135 = _1623 + 5u;
        float _2141 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_2103, _2105, _2106));
        float _4055 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2148 = _2118 * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 32.0);
        float _2149 = isnan(_1633) ? 1.0 : (isnan(1.0) ? _1633 : min(1.0, _1633));
        _2165 = ((((_2148 * cbLight._m0[_2135].x) * _2121) * _2149) + ((((cbLight._m0[_2097].x * _1615) * _2119) * _2121) * _2122)) * 0.3183098733425140380859375;
        _2166 = ((((_2148 * cbLight._m0[_2135].y) * _2121) * _2149) + ((((cbLight._m0[_2097].y * _1616) * _2119) * _2121) * _2122)) * 0.3183098733425140380859375;
        _2167 = ((((_2148 * cbLight._m0[_2135].z) * _2121) * _2149) + ((((cbLight._m0[_2097].z * _1617) * _2119) * _2121) * _2122)) * 0.3183098733425140380859375;
    }
    else
    {
        _2165 = 0.0;
        _2166 = 0.0;
        _2167 = 0.0;
    }
    float _4071 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4082 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4093 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    uint _2189 = _539 + 6u;
    float _2197 = _498 / cbSceneParam._m0[86u].x;
    float _2198 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2212 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2197, _2198, (log2((isnan(cbSceneParam._m0[77u].w) ? _492 : (isnan(_492) ? cbSceneParam._m0[77u].w : min(_492, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2214 = _2212.x;
    float _2215 = _2212.y;
    float _2216 = _2212.z;
    float _2217 = _2212.w;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    if (_492 > cbSceneParam._m0[78u].w)
    {
        float _2305 = isnan(_492) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _492 : min(cbSceneParam._m0[80u].w, _492));
        float _2306 = _2305 / _492;
        float _2317 = _2306 * _261;
        float _2318 = _262 * _2306;
        float _2319 = (-0.0) - _2318;
        float _2320 = _2306 * _263;
        float _2322 = (cbSceneParam._m0[77u].w * _2319) / _2305;
        float _2323 = _2322 + cbSceneParam._m0[79u].w;
        float _2324 = cbSceneParam._m0[79u].w - _2318;
        float _2330 = sqrt(((_2317 * _2317) + (_2318 * _2318)) + (_2320 * _2320));
        float _2333 = (1.0 - (cbSceneParam._m0[77u].w / _2305)) * _2330;
        float _2338 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2340 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2319 - _2322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2323 > 0.0) ? exp2(_2338 * _2323) : (2.0 - exp2(_2340 * _2323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2333;
        }
        else
        {
            float _2438 = 1.0 / cbSceneParam._m0[80u].x;
            float _2439 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : max(_2323, _2324));
            float _2440 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : min(_2323, _2324));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            _2724 = ((abs(_2330 / _2319) * cbSceneParam._m0[80u].y) * ((((_2449 - _2450) * 2.0) - ((exp2(_2338 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)))) - exp2(_2338 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0))))) * _2438)) - ((exp2(_2340 * _2449) - exp2(_2340 * _2450)) * _2438))) + (_2333 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2197, _2198, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2217);
        _2342 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2214;
        _2344 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2215;
        _2346 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2216;
        _2348 = _2735 * _2217;
    }
    else
    {
        _2342 = _2214;
        _2344 = _2215;
        _2346 = _2216;
        _2348 = _2217;
    }
    float _2360 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2361 = _2360 == 3.0;
    float _2362 = log2(_2348);
    float _2369 = exp2(_2362 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * ((_2038 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _564)) + _2165)) + ((_2044 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2370 = exp2(_2362 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * ((_2040 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _564)) + _2166)) + ((_2046 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2371 = exp2(_2362 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * ((_2042 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _564)) + _2167)) + ((_2048 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2380 = (_2360 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2380 * (_2361 ? _2369 : (_2369 + (cbSceneParam._m0[72u].w * _2342)));
    SV_Target.y = _2380 * (_2361 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2344)));
    SV_Target.z = _2380 * (_2361 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2346)));
    SV_Target.w = cbInstanceData._m0[_2189].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2189].w;
}


