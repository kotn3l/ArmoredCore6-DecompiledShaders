#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1165;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3493 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3504 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3515 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _280) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _281) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _317.x * cbMtdParam._m0[9u].x;
    float _323 = _317.y * cbMtdParam._m0[9u].y;
    float _324 = _317.z * cbMtdParam._m0[9u].z;
    float _328 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _294.x) * _322;
    float _331 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _294.y) * _323;
    float _334 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _294.z) * _324;
    float _341 = ((_322 - _328) * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) + _328;
    float _342 = ((_323 - _331) * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) + _331;
    float _343 = ((_324 - _334) * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) + _334;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3526 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_418 - _419) * cbMtdParam._m0[24u].w) + _419) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3537 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _341) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _451) + _341;
    float _460 = ((((cbMtdParam._m0[10u].y - _342) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _451) + _342;
    float _461 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _343)) * _451) + _343;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _476 = _474.x;
    float _478 = _476 - (_476 * _451);
    float _483 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    float _487 = ((cbMtdParam._m0[23u].y - _483) * _451) + _483;
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _519 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_230, _231, _232, 0.0));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _280) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _281) + cbTextureTilingScale._m0[18u].w));
    float _536 = _534.x;
    float _541 = fract(_534.w + cbPerFrame._m0[22u].x);
    float _543 = (1.0 - _541) * _536;
    float _548 = ((_541 + (-1.0)) + _536) * 9.0;
    float _550 = ((_536 + (-1.0)) + _541) * 9.0;
    float _551 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _552 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _566 = (_543 * ((_534.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _551 : (isnan(_551) ? 3.0 : min(_551, 3.0))) * 3.1415927410125732421875);
    float _568 = (_543 * ((_534.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _552 : (isnan(_552) ? 3.0 : min(_552, 3.0))) * 3.1415927410125732421875);
    float _572 = inversesqrt(dot(vec3(_566, _568, 1.0), vec3(_566, _568, 1.0)));
    float _588 = (((((0.5 - _511) + ((_566 * 0.5) * _572)) * _519) + _511) * 2.0) + (-1.0);
    float _589 = (((((0.5 - _512) + ((_572 * 0.5) * _568)) * _519) + _512) * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3568 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _606 = ((((cbMtdParam._m0[22u].z * _402) - _402) + _588) * _451) + _402;
    float _607 = ((((cbMtdParam._m0[22u].z * _403) - _403) + _589) * _451) + _403;
    float _608 = (_451 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _397)) + _397;
    float _610 = cbMtdParam._m0[22u].x + _382.w;
    float _613 = fma(_608, _230, fma(_607, _236 * TANGENT.x, (_222 * _214) * _606));
    float _616 = fma(_608, _231, fma(_607, _236 * TANGENT.y, (_222 * _215) * _606));
    float _619 = fma(_608, _232, fma(_607, _236 * TANGENT.z, (_222 * _216) * _606));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3579 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _627 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3601 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3612 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3623 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3634 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _632 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _697 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _687);
    float _698 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _687);
    float _699 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _687);
    float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
    float _704 = _697 * _703;
    float _705 = _698 * _703;
    float _706 = _699 * _703;
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _737 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _740 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _754 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3645 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _766 = 1.0 - _632;
    float _767 = _763 * _766;
    float _768 = _764 * _766;
    float _769 = _765 * _766;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _632;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _632;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _632;
    float _777 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _793 = ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_624, _625, _626), vec3(_704, _705, _706));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _624) - _704;
    float _802 = (_797 * _625) - _705;
    float _803 = (_797 * _626) - _706;
    float _807 = abs(dot(vec3(_704, _705, _706), vec3(_624, _625, _626)));
    float _3678 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_627);
    float _821 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _827 = (1.0 - _821) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _828 = _821 * _809;
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _894 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _898 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _922 = _856 + _624;
        float _923 = _860 + _625;
        float _924 = _864 + _626;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _890;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _894;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _898;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_624, _625, _626), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3726 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_624, _625, _626), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3759 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_624, _625, _626), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3792 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1204 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1208 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1212 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1235 = _856 + _624;
        float _1236 = _860 + _625;
        float _1237 = _864 + _626;
        float _1247 = fma(_1237, cbModelParam._m0[30u].z, fma(_1236, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235)) - _1204;
        float _1248 = fma(_1237, cbModelParam._m0[31u].z, fma(_1236, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235)) - _1208;
        float _1249 = fma(_1237, cbModelParam._m0[32u].z, fma(_1236, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235)) - _1212;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1204 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1208 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[35u].z) + ((((((_1212 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1303 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1270.x + (-0.5));
        float _1305 = _1303 * (_1270.y + (-0.5));
        float _1306 = _1303 * (_1270.z + (-0.5));
        float _1313 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1277.x + (-0.5));
        float _1315 = _1313 * (_1277.y + (-0.5));
        float _1316 = _1313 * (_1277.z + (-0.5));
        float _1323 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1284.x + (-0.5));
        float _1325 = _1323 * (_1284.y + (-0.5));
        float _1326 = _1323 * (_1284.z + (-0.5));
        float _1333 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1291.x + (-0.5));
        float _1335 = _1333 * (_1291.y + (-0.5));
        float _1336 = _1333 * (_1291.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_624, _625, _626), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3855 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1367 + 1.0))) + _1372) * _1337;
        float _1382 = _1305 * 0.5;
        float _1383 = _1315 * 0.5;
        float _1384 = _1325 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_624, _625, _626), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3888 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1409 + 1.0))) + _1414) * _1338;
        float _1424 = _1306 * 0.5;
        float _1425 = _1316 * 0.5;
        float _1426 = _1326 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_624, _625, _626), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3921 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1451 + 1.0))) + _1456) * _1339;
        _1473 = _1306;
        _1474 = _1305;
        _1475 = _1304;
        _1476 = _1316;
        _1477 = _1315;
        _1478 = _1314;
        _1479 = _1326;
        _1480 = _1325;
        _1481 = _1324;
        _1482 = _1339;
        _1483 = _1338;
        _1484 = _1337;
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1165;
        _1474 = _1165;
        _1475 = _1165;
        _1476 = _1165;
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1177)) + _1177;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1178)) + _1178;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1520 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1523 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1526 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1497));
    float _1541 = _801 * 0.5;
    float _1542 = _802 * 0.5;
    float _1543 = _803 * 0.5;
    float _1544 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1547 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1550 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1584;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1557 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1561 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1565 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1572 = dot(vec4(cbModelParam._m0[39u]), vec4(_1541, _1542, _1543, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1595;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1586 = dot(vec4(cbModelParam._m0[40u]), vec4(_1541, _1542, _1543, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1599 = (_1595 * cbModelParam._m0[1u].x) + (_1584 * (1.0 - cbModelParam._m0[1u].x));
    float _1609 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1609 : min(cbModelParam._m0[25u].z, _1609));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1673 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1676 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1704 = frontier_phi_14_12_ladder;
        }
        float _1908;
        if (_1673 > 0.0)
        {
            _1908 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1908 = frontier_phi_23_19_ladder;
        }
        float _2162;
        if (_1676 > 0.0)
        {
            _2162 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2162 = frontier_phi_35_30_ladder;
        }
        float _2164 = isnan(_1908) ? _1704 : (isnan(_1704) ? _1908 : min(_1704, _1908));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1670) + _1659;
        float _2170 = (_2165 * _1673) + _1663;
        float _2171 = (_2165 * _1676) + _1667;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2172;
        float _2176 = _2172 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 > _2176) || ((_2170 < _2174) || ((_2169 < _2174) || (_2169 > _2176))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2171, cbModelParam._m0[9u].z, fma(_2170, cbModelParam._m0[9u].y, _2169 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2171, cbModelParam._m0[10u].z, fma(_2170, cbModelParam._m0[10u].y, _2169 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2171, cbModelParam._m0[11u].z, fma(_2170, cbModelParam._m0[11u].y, _2169 * cbModelParam._m0[11u].x))), _1610);
            frontier_phi_13_35_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_13_35_ladder_2;
        _1694 = frontier_phi_13_35_ladder_1;
        _1696 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1610);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1769 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1772 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1913;
        if (_1766 > 0.0)
        {
            _1913 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1913 = frontier_phi_25_21_ladder;
        }
        float _2189;
        if (_1769 > 0.0)
        {
            _2189 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2189 = frontier_phi_37_32_ladder;
        }
        float _2402;
        if (_1772 > 0.0)
        {
            _2402 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2402 = frontier_phi_46_43_ladder;
        }
        float _2404 = isnan(_2189) ? _1913 : (isnan(_1913) ? _2189 : min(_1913, _2189));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1766) + _1755;
        float _2410 = (_2405 * _1769) + _1759;
        float _2411 = (_2405 * _1772) + _1763;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_22_46_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_22_46_ladder_2;
        _1793 = frontier_phi_22_46_ladder_1;
        _1795 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1701);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_827 * _777) + _828) * _793) * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1810 = (((_827 * _779) + _828) * _793) * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1812 = (((_827 * _780) + _828) * _793) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    uvec4 _1831 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _1833 = _1831.x * 14u;
    uint _1834 = _1833 + 13u;
    float _1841 = _793 + (-1.0);
    float _1846 = (cbLight._m0[_1834].x * _1841) + 1.0;
    float _1847 = (cbLight._m0[_1834].y * _1841) + 1.0;
    float _1848 = (cbLight._m0[_1834].z * _1841) + 1.0;
    float _1849 = (cbLight._m0[_1834].w * _1841) + 1.0;
    uint _1850 = _1833 + 5u;
    float _1856 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1860 = _1833 + 4u;
    float _1867 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1871 = _1833 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_624, _625, _626));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_624, _625, _626));
    float _4057 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4068 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1850].x * _1856) * _1892) + ((cbLight._m0[_1860].x * _1867) * _1890);
    float _1900 = ((_1856 * cbLight._m0[_1850].y) * _1892) + ((_1867 * cbLight._m0[_1860].y) * _1890);
    float _1901 = ((_1856 * cbLight._m0[_1850].z) * _1892) + ((_1867 * cbLight._m0[_1860].z) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1833 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1833 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1833 + 2u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4079 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1945 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2133 = _1833 + 7u;
        float _2149 = (dot(vec3(cbLight._m0[_1833 + 3u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4095 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2152 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1963 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _1918;
        _1965 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _1920;
        _1967 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _1922;
    }
    uint _1970 = _1833 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _627) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1833].x + _704;
    float _1986 = cbLight._m0[_1833].y + _705;
    float _1987 = cbLight._m0[_1833].z + _706;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1833].xyz));
    float _4111 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _1999 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2000 = dot(vec3(_624, _625, _626), vec3(_1992, _1993, _1994));
    float _4133 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_1992, _1993, _1994));
    float _4144 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
    float _2021 = 0.959999978542327880859375 - _774;
    float _2023 = 0.959999978542327880859375 - _775;
    float _2024 = 0.959999978542327880859375 - _776;
    float _2031 = 1.0 - _1984;
    float _2042 = (0.5 / (((_1999 * ((_1998 * _2031) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2031) + _1984) * _1998))) * _1998;
    float _4155 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2055 = _1833 + 9u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _627) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1871].x + _704;
    float _2069 = cbLight._m0[_1871].y + _705;
    float _2070 = cbLight._m0[_1871].z + _706;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1871].xyz));
    float _4166 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2082 = dot(vec3(_624, _625, _626), vec3(_2075, _2076, _2077));
    float _4177 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2075, _2076, _2077));
    float _4188 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2067 * _2067;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2108 = 1.0 - _2067;
    float _2118 = (0.5 / (((_1999 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2108) + _2067) * _2081))) * _2081;
    float _4199 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    float _2130 = (((((_2101 * _2021) + _777) * cbLight._m0[_2055].x) * _2120) * _1856) + (((((_2020 * _2021) + _777) * cbLight._m0[_1970].x) * _2044) * _1867);
    float _2131 = (((((_2101 * _2023) + _779) * cbLight._m0[_2055].y) * _2120) * _1856) + (((((_2020 * _2023) + _779) * cbLight._m0[_1970].y) * _2044) * _1867);
    float _2132 = (((((_2101 * _2024) + _780) * cbLight._m0[_2055].z) * _2120) * _1856) + (((((_2020 * _2024) + _780) * cbLight._m0[_1970].z) * _2044) * _1867);
    float _2194;
    float _2196;
    float _2198;
    if (_1907)
    {
        _2194 = _2130;
        _2196 = _2131;
        _2198 = _2132;
    }
    else
    {
        uint _2200 = _1833 + 2u;
        uint _2204 = _1833 + 10u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _627) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _704;
        float _2221 = cbLight._m0[_2200].y + _705;
        float _2222 = cbLight._m0[_2200].z + _706;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2200].xyz));
        float _4210 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2234 = dot(vec3(_624, _625, _626), vec3(_2227, _2228, _2229));
        float _4221 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4232 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1999 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2260) + _2219) * _2233))) * _2233;
        float _4243 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2194 = (((((_2253 * _2021) + _777) * cbLight._m0[_2204].x) * _2272) * _2273) + _2130;
        _2196 = (((((_2253 * _2023) + _779) * cbLight._m0[_2204].y) * _2272) * _2273) + _2131;
        _2198 = (((((_2253 * _2024) + _780) * cbLight._m0[_2204].z) * _2272) * _2273) + _2132;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1925)
    {
        _2308 = _2194;
        _2310 = _2196;
        _2312 = _2198;
    }
    else
    {
        uint _2319 = _1833 + 3u;
        uint _2323 = _1833 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _627) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _704;
        float _2340 = cbLight._m0[_2319].y + _705;
        float _2341 = cbLight._m0[_2319].z + _706;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2319].xyz));
        float _4259 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2353 = dot(vec3(_624, _625, _626), vec3(_2346, _2347, _2348));
        float _4270 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4281 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_1999 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2379) + _2338) * _2352))) * _2352;
        float _4292 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2308 = (((((_2372 * _2021) + _777) * cbLight._m0[_2323].x) * _2391) * _2392) + _2194;
        _2310 = (((((_2372 * _2023) + _779) * cbLight._m0[_2323].y) * _2391) * _2392) + _2196;
        _2312 = (((((_2372 * _2024) + _780) * cbLight._m0[_2323].z) * _2391) * _2392) + _2198;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1831.y == 0u)
    {
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2467;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2467;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2467;
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2483)));
        float _2504 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            uint _2766 = 0u;
            uint _2775;
            bool _2776;
            for (;;)
            {
                _2775 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                _2776 = _2775 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2776)
                {
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2775;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2766 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2468;
                        float _2951 = _2910.y - _2469;
                        float _2952 = _2910.z - _2470;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_734, _737, _740), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4318 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2468;
                        float _2986 = (-0.0) - _2469;
                        float _2987 = (-0.0) - _2470;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _809;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_734, _737, _740), vec3(_2992, _2993, _2994));
                        float _4334 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3027 = dot(vec3(_734, _737, _740), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4345 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4356 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4367 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3061 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2819 = (_2981 * _2929.x) + _2887;
                        _2820 = (_2981 * _2929.y) + _2888;
                        _2821 = (_2981 * _2929.z) + _2889;
                        _2816 = (_3061 * _2946.x) + _2884;
                        _2817 = (_3061 * _2946.y) + _2885;
                        _2818 = (_3061 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_61_pred = _2816;
                    frontier_phi_61_pred_1 = _2821;
                    frontier_phi_61_pred_2 = _2820;
                    frontier_phi_61_pred_3 = _2819;
                    frontier_phi_61_pred_4 = _2818;
                    frontier_phi_61_pred_5 = _2817;
                }
                _2616 = frontier_phi_61_pred;
                _2626 = frontier_phi_61_pred_1;
                _2624 = frontier_phi_61_pred_2;
                _2622 = frontier_phi_61_pred_3;
                _2620 = frontier_phi_61_pred_4;
                _2618 = frontier_phi_61_pred_5;
                uint _2767 = _2766 + 1u;
                if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2760 = _2616;
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2767;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((4294967295u << _2632) & _2514) == 0u)
        {
            _2728 = _2615;
            _2730 = _2617;
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
        }
        else
        {
            float _2753 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _2754 = _2753 * _2468;
            float _2755 = _2753 * _2469;
            float _2756 = _2753 * _2470;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2867 = _2615;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                uint _2873 = _2632;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2883)
                    {
                        frontier_phi_67_pred = _2870;
                        frontier_phi_67_pred_1 = _2871;
                        frontier_phi_67_pred_2 = _2872;
                        frontier_phi_67_pred_3 = _2869;
                        frontier_phi_67_pred_4 = _2868;
                        frontier_phi_67_pred_5 = _2867;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3079 = _2867;
                        float _3080 = _2868;
                        float _3081 = _2869;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        float _3084 = _2872;
                        uint _3085 = _2882;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3169;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3096 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3096 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3096 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3096 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2470, _3203.z, fma(_2469, _3203.y, _3203.x * _2468)) + _3203.w;
                            _3216 = !((fma(_2470, _3184.z, fma(_2469, _3184.y, _3184.x * _2468)) + _3184.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3111.x - _2468;
                                float _3244 = _3111.y - _2469;
                                float _3245 = _3111.z - _2470;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3112 * _3112));
                                float _4378 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3261 = sqrt(_3246) * _3127.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_734, _737, _740))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2470, _3154.z, fma(_2469, _3154.y, _3154.x * _2468)) + _3154.w) / _3215;
                                float _3275 = (fma(_2470, _3169.z, fma(_2469, _3169.y, _3169.x * _2468)) + _3169.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4394 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _809;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2754;
                                float _3305 = _3251 - _2755;
                                float _3306 = _3252 - _2756;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2754, (-0.0) - _2755, (-0.0) - _2756));
                                float _4405 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3318 = dot(vec3(_734, _737, _740), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4416 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_734, _737, _740), vec3(_3250, _3251, _3252))) + _3327;
                                float _4427 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4438 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3355 * _3139.x;
                                frontier_phi_73_pred_1 = _3355 * _3139.y;
                                frontier_phi_73_pred_2 = _3281 * _3127.z;
                                frontier_phi_73_pred_3 = _3281 * _3127.y;
                                frontier_phi_73_pred_4 = _3281 * _3127.x;
                                frontier_phi_73_pred_5 = _3355 * _3139.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3359 = frontier_phi_73_pred;
                            _3360 = frontier_phi_73_pred_1;
                            _3364 = frontier_phi_73_pred_2;
                            _3363 = frontier_phi_73_pred_3;
                            _3362 = frontier_phi_73_pred_4;
                            _3361 = frontier_phi_73_pred_5;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            _3066 = _3359 + _3079;
                            _3067 = _3360 + _3080;
                            _3068 = _3361 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3069;
                        frontier_phi_67_pred_1 = _3070;
                        frontier_phi_67_pred_2 = _3071;
                        frontier_phi_67_pred_3 = _3068;
                        frontier_phi_67_pred_4 = _3067;
                        frontier_phi_67_pred_5 = _3066;
                    }
                    _2735 = frontier_phi_67_pred;
                    _2737 = frontier_phi_67_pred_1;
                    _2739 = frontier_phi_67_pred_2;
                    _2733 = frontier_phi_67_pred_3;
                    _2731 = frontier_phi_67_pred_4;
                    _2729 = frontier_phi_67_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2729;
                        _2868 = _2731;
                        _2869 = _2733;
                        _2870 = _2735;
                        _2871 = _2737;
                        _2872 = _2739;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2737;
                frontier_phi_55_56_ladder_1 = _2739;
                frontier_phi_55_56_ladder_2 = _2735;
                frontier_phi_55_56_ladder_3 = _2733;
                frontier_phi_55_56_ladder_4 = _2731;
                frontier_phi_55_56_ladder_5 = _2729;
            }
            else
            {
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            _2728 = frontier_phi_55_56_ladder_5;
            _2730 = frontier_phi_55_56_ladder_4;
            _2732 = frontier_phi_55_56_ladder_3;
            _2734 = frontier_phi_55_56_ladder_2;
            _2736 = frontier_phi_55_56_ladder;
            _2738 = frontier_phi_55_56_ladder_1;
        }
        float _2743 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2527 = (_2743 * _2734) + _1963;
        _2529 = (_2743 * _2736) + _1965;
        _2531 = (_2743 * _2738) + _1967;
        _2533 = ((_2728 * _777) * _2743) + _2308;
        _2535 = ((_2730 * _779) * _2743) + _2310;
        _2537 = ((_2732 * _780) * _2743) + _2312;
    }
    else
    {
        _2527 = _1963;
        _2529 = _1965;
        _2531 = _1967;
        _2533 = _2308;
        _2535 = _2310;
        _2537 = _2312;
    }
    float _4454 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4465 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4476 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    uint _2557 = _261 + 6u;
    float _2565 = _712 / cbSceneParam._m0[86u].x;
    float _2566 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2641 = _2640 / _646;
        float _2652 = _2641 * _697;
        float _2653 = _698 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _699;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2829;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2829 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2789 = 1.0 / cbSceneParam._m0[80u].x;
            float _2790 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2791 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            _2829 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2800 - _2801) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))))) * _2789)) - ((exp2(_2676 * _2800) - exp2(_2676 * _2801)) * _2789))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2831 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2840 = exp2((_2829 * (-1.44269502162933349609375)) * (1.0 - _2831.w));
        float _2841 = log2(_2840);
        float _2857 = log2(_2585);
        _2678 = (exp2(_2857 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].x)) * _2831.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2680 = (exp2(_2857 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].y)) * _2831.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2682 = (exp2(_2857 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].z)) * _2831.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2684 = _2840 * _2585;
    }
    else
    {
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
        _2684 = _2585;
    }
    float _2696 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2697 = _2696 == 3.0;
    float _2698 = log2(_2684);
    float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2527 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _793))) + ((_2533 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1599)) * cbPerFrame._m0[3u].x));
    float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2529 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _793))) + ((_2535 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1599)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2531 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _793))) + ((_2537 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1599)) * cbPerFrame._m0[3u].x));
    float _2716 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2716 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
    SV_Target.y = _2716 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.z = _2716 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.w = cbInstanceData._m0[_2557].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
}


