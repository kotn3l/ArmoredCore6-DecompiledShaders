#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1330;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3657 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _392) + _465;
    float _477 = ((((_444.x - _463) * _392) + _463) * 2.0) + (-1.0);
    float _478 = ((((_444.y - _464) * _392) + _464) * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3668 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = 1.0 - _527;
    float _534 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _537 = ((isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : min(_534, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _546 = (_537 - ((((((_527 - _528) * cbMtdParam._m0[24u].z) + _528) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _537))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3689 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _554 = (_547 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _555 = (_547 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _556 = (_547 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _598 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_570 - _571) * cbMtdParam._m0[24u].w) + _571) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3700 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _607 = ((((cbMtdParam._m0[10u].x - _554) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _599) + _554;
    float _608 = ((((cbMtdParam._m0[10u].y - _555) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _599) + _555;
    float _609 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _556)) * _599) + _556;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _637 = _635.x;
    float _655 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _637) * _392) + _637;
    float _659 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _655) * cbMtdParam._m0[19u].z) + _655;
    float _661 = _659 - (_659 * _547);
    float _663 = _661 - (_661 * _599);
    float _668 = (((_419.z - _474) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _474;
    float _672 = ((_500.z - _668) * cbMtdParam._m0[19u].w) + _668;
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3711 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = (_547 * (_686.z - _672)) + _672;
    float _706 = ((cbMtdParam._m0[23u].y - _703) * _599) + _703;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3722 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _747 = (_477 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_419.x * 2.0) + (-1.0)))) + (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _748 = (_478 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_419.y * 2.0) + (-1.0)))) + (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _760 = (((_693 - _747) + (cbMtdParam._m0[21u].x * _747)) * _547) + _747;
    float _761 = (((_694 - _748) + (cbMtdParam._m0[21u].x * _748)) * _547) + _748;
    float _762 = (_547 * (sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) - _484)) + _484;
    float _773 = (((_731 - _760) + (_760 * cbMtdParam._m0[22u].z)) * _599) + _760;
    float _774 = (((_732 - _761) + (_761 * cbMtdParam._m0[22u].z)) * _599) + _761;
    float _775 = ((sqrt(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) - _762) * _599) + _762;
    float _777 = cbMtdParam._m0[22u].x + _500.w;
    float _780 = fma(_775, _242 * NORMAL.x, fma(_774, _249 * TANGENT.x, (_235 * _227) * _773));
    float _783 = fma(_775, _242 * NORMAL.y, fma(_774, _249 * TANGENT.y, (_235 * _228) * _773));
    float _786 = fma(_775, _242 * NORMAL.z, fma(_774, _249 * TANGENT.z, (_235 * _229) * _773));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3733 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _794 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _3755 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3766 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3777 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3788 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _799 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _900 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _903 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _917 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3799 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _929 = 1.0 - _799;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _799;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _799;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _799;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _956 = ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * TEXCOORD_5.w) * _952.x;
    float _957 = dot(vec3(_791, _792, _793), vec3(_870, _871, _872));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _791) - _870;
    float _965 = (_960 * _792) - _871;
    float _966 = (_960 * _793) - _872;
    float _970 = abs(dot(vec3(_870, _871, _872), vec3(_791, _792, _793)));
    float _3832 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_794);
    float _985 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _991 = (1.0 - _985) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _972;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1058 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1062 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1087 = _1020 + _791;
        float _1088 = _1024 + _792;
        float _1089 = _1028 + _793;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_791, _792, _793), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3880 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_791, _792, _793), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3913 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_791, _792, _793), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3946 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1369 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1373 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1377 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1400 = _1020 + _791;
        float _1401 = _1024 + _792;
        float _1402 = _1028 + _793;
        float _1412 = fma(_1402, cbModelParam._m0[30u].z, fma(_1401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1400)) - _1369;
        float _1413 = fma(_1402, cbModelParam._m0[31u].z, fma(_1401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1400)) - _1373;
        float _1414 = fma(_1402, cbModelParam._m0[32u].z, fma(_1401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1400)) - _1377;
        float _1418 = inversesqrt(dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414)));
        float _1431 = ((_1418 * _1412) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1369 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1418 * _1413) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1373 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1418 * _1414) / cbModelParam._m0[35u].z) + ((((((_1377 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        float _1468 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1435.x + (-0.5));
        float _1470 = _1468 * (_1435.y + (-0.5));
        float _1471 = _1468 * (_1435.z + (-0.5));
        float _1478 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1442.x + (-0.5));
        float _1480 = _1478 * (_1442.y + (-0.5));
        float _1481 = _1478 * (_1442.z + (-0.5));
        float _1488 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1449.x + (-0.5));
        float _1490 = _1488 * (_1449.y + (-0.5));
        float _1491 = _1488 * (_1449.z + (-0.5));
        float _1498 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1456.x + (-0.5));
        float _1500 = _1498 * (_1456.y + (-0.5));
        float _1501 = _1498 * (_1456.z + (-0.5));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = _1469 * 0.5;
        float _1506 = _1479 * 0.5;
        float _1507 = _1489 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_791, _792, _793), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4009 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1532 + 1.0))) + _1537) * _1502;
        float _1547 = _1470 * 0.5;
        float _1548 = _1480 * 0.5;
        float _1549 = _1490 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_791, _792, _793), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4042 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1574 + 1.0))) + _1579) * _1503;
        float _1589 = _1471 * 0.5;
        float _1590 = _1481 * 0.5;
        float _1591 = _1491 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_791, _792, _793), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4075 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1616 + 1.0))) + _1621) * _1504;
        _1638 = _1471;
        _1639 = _1470;
        _1640 = _1469;
        _1641 = _1481;
        _1642 = _1480;
        _1643 = _1479;
        _1644 = _1491;
        _1645 = _1490;
        _1646 = _1489;
        _1647 = _1504;
        _1648 = _1503;
        _1649 = _1502;
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
    }
    else
    {
        _1638 = _1330;
        _1639 = _1330;
        _1640 = _1330;
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = 0.0;
        _1651 = 0.0;
        _1652 = 0.0;
    }
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1342)) + _1342;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1343)) + _1343;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1685 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1662));
    float _1706 = _964 * 0.5;
    float _1707 = _965 * 0.5;
    float _1708 = _966 * 0.5;
    float _1709 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1712 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1715 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1749;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1722 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1726 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1730 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1737 = dot(vec4(cbModelParam._m0[39u]), vec4(_1706, _1707, _1708, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1760;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1751 = dot(vec4(cbModelParam._m0[40u]), vec4(_1706, _1707, _1708, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1764 = (_1760 * cbModelParam._m0[1u].x) + (_1749 * (1.0 - cbModelParam._m0[1u].x));
    float _1774 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1774 : min(cbModelParam._m0[25u].z, _1774));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1837 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1840 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1868 = frontier_phi_14_12_ladder;
        }
        float _2071;
        if (_1837 > 0.0)
        {
            _2071 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2071 = frontier_phi_23_19_ladder;
        }
        float _2325;
        if (_1840 > 0.0)
        {
            _2325 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2325 = frontier_phi_35_30_ladder;
        }
        float _2327 = isnan(_2071) ? _1868 : (isnan(_1868) ? _2071 : min(_1868, _2071));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1834) + _1823;
        float _2333 = (_2328 * _1837) + _1827;
        float _2334 = (_2328 * _1840) + _1831;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1775);
            frontier_phi_13_35_ladder = _2462.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2462.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2462.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_13_35_ladder_2;
        _1858 = frontier_phi_13_35_ladder_1;
        _1860 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1775);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1933 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1936 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2076;
        if (_1930 > 0.0)
        {
            _2076 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2076 = frontier_phi_25_21_ladder;
        }
        float _2352;
        if (_1933 > 0.0)
        {
            _2352 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2352 = frontier_phi_37_32_ladder;
        }
        float _2565;
        if (_1936 > 0.0)
        {
            _2565 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2565 = frontier_phi_46_43_ladder;
        }
        float _2567 = isnan(_2352) ? _2076 : (isnan(_2076) ? _2352 : min(_2076, _2352));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1930) + _1919;
        float _2573 = (_2568 * _1933) + _1923;
        float _2574 = (_2568 * _1936) + _1927;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_22_46_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_22_46_ladder_2;
        _1957 = frontier_phi_22_46_ladder_1;
        _1959 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1865);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1972 = (((_991 * _940) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1974 = (((_991 * _942) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1976 = (((_991 * _943) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _956 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2030 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2034 = _1997 | 1u;
    float _2045 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_791, _792, _793));
    float _2048 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_791, _792, _793));
    float _4211 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _4222 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _2055 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _2062 = ((cbLight._m0[_2014].x * _2020) * _2055) + ((cbLight._m0[_2024].x * _2030) * _2053);
    float _2063 = ((_2020 * cbLight._m0[_2014].y) * _2055) + ((_2030 * cbLight._m0[_2024].y) * _2053);
    float _2064 = ((_2020 * cbLight._m0[_2014].z) * _2055) + ((_2030 * cbLight._m0[_2024].z) * _2053);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2062;
        _2083 = _2063;
        _2085 = _2064;
    }
    else
    {
        uint _2089 = _1997 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4233 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2108 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2064;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2296 = _1997 + 7u;
        float _2312 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4249 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2315 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2126 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2081;
        _2128 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2083;
        _2130 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2085;
    }
    uint _2133 = _1997 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _794) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1997].x + _870;
    float _2149 = cbLight._m0[_1997].y + _871;
    float _2150 = cbLight._m0[_1997].z + _872;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_1997].xyz));
    float _4265 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2162 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2163 = dot(vec3(_791, _792, _793), vec3(_2155, _2156, _2157));
    float _4287 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2155, _2156, _2157));
    float _4298 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0);
    float _2184 = 0.959999978542327880859375 - _937;
    float _2186 = 0.959999978542327880859375 - _938;
    float _2187 = 0.959999978542327880859375 - _939;
    float _2194 = 1.0 - _2147;
    float _2205 = (0.5 / (((_2162 * ((_2161 * _2194) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2194) + _2147) * _2161))) * _2161;
    float _4309 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2218 = _1997 + 9u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _794) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2034].x + _870;
    float _2232 = cbLight._m0[_2034].y + _871;
    float _2233 = cbLight._m0[_2034].z + _872;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2034].xyz));
    float _4320 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2245 = dot(vec3(_791, _792, _793), vec3(_2238, _2239, _2240));
    float _4331 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2238, _2239, _2240));
    float _4342 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2230 * _2230;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2271 = 1.0 - _2230;
    float _2281 = (0.5 / (((_2162 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2271) + _2230) * _2244))) * _2244;
    float _4353 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    float _2293 = (((((_2264 * _2184) + _940) * cbLight._m0[_2218].x) * _2283) * _2020) + (((((_2183 * _2184) + _940) * cbLight._m0[_2133].x) * _2207) * _2030);
    float _2294 = (((((_2264 * _2186) + _942) * cbLight._m0[_2218].y) * _2283) * _2020) + (((((_2183 * _2186) + _942) * cbLight._m0[_2133].y) * _2207) * _2030);
    float _2295 = (((((_2264 * _2187) + _943) * cbLight._m0[_2218].z) * _2283) * _2020) + (((((_2183 * _2187) + _943) * cbLight._m0[_2133].z) * _2207) * _2030);
    float _2357;
    float _2359;
    float _2361;
    if (_2070)
    {
        _2357 = _2293;
        _2359 = _2294;
        _2361 = _2295;
    }
    else
    {
        uint _2363 = _1997 + 2u;
        uint _2367 = _1997 + 10u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _794) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _870;
        float _2384 = cbLight._m0[_2363].y + _871;
        float _2385 = cbLight._m0[_2363].z + _872;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2363].xyz));
        float _4364 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2397 = dot(vec3(_791, _792, _793), vec3(_2390, _2391, _2392));
        float _4375 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4386 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
        float _2423 = 1.0 - _2382;
        float _2433 = (0.5 / (((_2162 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2423) + _2382) * _2396))) * _2396;
        float _4397 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2357 = (((((_2416 * _2184) + _940) * cbLight._m0[_2367].x) * _2435) * _2436) + _2293;
        _2359 = (((((_2416 * _2186) + _942) * cbLight._m0[_2367].y) * _2435) * _2436) + _2294;
        _2361 = (((((_2416 * _2187) + _943) * cbLight._m0[_2367].z) * _2435) * _2436) + _2295;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2088)
    {
        _2471 = _2357;
        _2473 = _2359;
        _2475 = _2361;
    }
    else
    {
        uint _2482 = _1997 + 3u;
        uint _2486 = _1997 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _794) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _870;
        float _2503 = cbLight._m0[_2482].y + _871;
        float _2504 = cbLight._m0[_2482].z + _872;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2482].xyz));
        float _4413 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2516 = dot(vec3(_791, _792, _793), vec3(_2509, _2510, _2511));
        float _4424 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4435 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2162 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2542) + _2501) * _2515))) * _2515;
        float _4446 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2471 = (((((_2535 * _2184) + _940) * cbLight._m0[_2486].x) * _2554) * _2555) + _2357;
        _2473 = (((((_2535 * _2186) + _942) * cbLight._m0[_2486].y) * _2554) * _2555) + _2359;
        _2475 = (((((_2535 * _2187) + _943) * cbLight._m0[_2486].z) * _2554) * _2555) + _2361;
    }
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_1995.y == 0u)
    {
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2630;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2630;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2630;
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.x;
        uint _2657 = uint((float(_2645.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2646))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2646)));
        float _2667 = (log2(_2633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        uint _2671 = uint(isnan(14.0) ? _2668 : (isnan(_2668) ? 14.0 : min(_2668, 14.0)));
        uvec4 _2676 = texelFetch(g_lightClusterGridBuffer, int(((_2671 << 2u) + (_2657 << 6u)) >> 2u));
        uint _2677 = _2676.x;
        uint _2678 = _2645.z;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((((1u << ((_2678 >> 4u) & 15u)) + 4294967295u) & _2677) == 0u) || ((_2678 & 240u) == 0u))
        {
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
        }
        else
        {
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2939)
                {
                    frontier_phi_61_pred = _2923;
                    frontier_phi_61_pred_1 = _2928;
                    frontier_phi_61_pred_2 = _2927;
                    frontier_phi_61_pred_3 = _2926;
                    frontier_phi_61_pred_4 = _2925;
                    frontier_phi_61_pred_5 = _2924;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2938;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2929 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _2631;
                        float _3114 = _3073.y - _2632;
                        float _3115 = _3073.z - _2633;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_897, _900, _903), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4472 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _2631;
                        float _3149 = (-0.0) - _2632;
                        float _3150 = (-0.0) - _2633;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3165 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3166 = 1.0 - _972;
                        float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                        float _3174 = _3173 * _3173;
                        float _3175 = _3174 * _3174;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3186 = dot(vec3(_897, _900, _903), vec3(_3155, _3156, _3157));
                        float _4488 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3190 = dot(vec3(_897, _900, _903), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                        float _4499 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                        float _3198 = _3133 * _3174;
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3123) + _3199;
                        float _4510 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3204 = 1.0 - _3174;
                        float _3214 = (0.5 / (((_3203 * ((_3189 * _3204) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3174) * _3189))) * _3203;
                        float _4521 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3225 = (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3197 * _3197) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2982 = (_3144 * _3092.x) + _3050;
                        _2983 = (_3144 * _3092.y) + _3051;
                        _2984 = (_3144 * _3092.z) + _3052;
                        _2979 = (_3225 * _3109.x) + _3047;
                        _2980 = (_3225 * _3109.y) + _3048;
                        _2981 = (_3225 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_61_pred = _2979;
                    frontier_phi_61_pred_1 = _2984;
                    frontier_phi_61_pred_2 = _2983;
                    frontier_phi_61_pred_3 = _2982;
                    frontier_phi_61_pred_4 = _2981;
                    frontier_phi_61_pred_5 = _2980;
                }
                _2779 = frontier_phi_61_pred;
                _2789 = frontier_phi_61_pred_1;
                _2787 = frontier_phi_61_pred_2;
                _2785 = frontier_phi_61_pred_3;
                _2783 = frontier_phi_61_pred_4;
                _2781 = frontier_phi_61_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2779;
                    _2924 = _2781;
                    _2925 = _2783;
                    _2926 = _2785;
                    _2927 = _2787;
                    _2928 = _2789;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
        }
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.z;
        uint _2795 = (_2793 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2795) & _2677) == 0u)
        {
            _2891 = _2778;
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
            float _2917 = _2916 * _2631;
            float _2918 = _2916 * _2632;
            float _2919 = _2916 * _2633;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2795 < ((_2793 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3030 = _2778;
                float _3031 = _2780;
                float _3032 = _2782;
                float _3033 = _2784;
                float _3034 = _2786;
                float _3035 = _2788;
                uint _3036 = _2795;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3046)
                    {
                        frontier_phi_67_pred = _3033;
                        frontier_phi_67_pred_1 = _3034;
                        frontier_phi_67_pred_2 = _3035;
                        frontier_phi_67_pred_3 = _3032;
                        frontier_phi_67_pred_4 = _3031;
                        frontier_phi_67_pred_5 = _3030;
                    }
                    else
                    {
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        uint _3249 = _3045;
                        uint _3250;
                        vec4 _3275;
                        float _3276;
                        vec4 _3291;
                        vec3 _3303;
                        vec4 _3318;
                        vec4 _3333;
                        float _3379;
                        bool _3380;
                        for (;;)
                        {
                            uint _3260 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3249));
                            _3250 = (_3249 + 4294967295u) & _3249;
                            uint _3262 = _3260 * 40u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.w;
                            uint _3278 = (_3260 * 40u) + 4u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3260 * 40u) + 8u;
                            _3303 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x));
                            uint _3305 = (_3260 * 40u) + 16u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3260 * 40u) + 20u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3260 * 40u) + 24u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3354 = (_3260 * 40u) + 28u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3379 = fma(_2633, _3367.z, fma(_2632, _3367.y, _3367.x * _2631)) + _3367.w;
                            _3380 = !((fma(_2633, _3348.z, fma(_2632, _3348.y, _3348.x * _2631)) + _3348.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3380)
                            {
                                float _3407 = _3275.x - _2631;
                                float _3408 = _3275.y - _2632;
                                float _3409 = _3275.z - _2633;
                                float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                                float _3413 = inversesqrt(_3410);
                                float _3414 = _3413 * _3407;
                                float _3415 = _3413 * _3408;
                                float _3416 = _3413 * _3409;
                                float _3420 = 1.0 - (_3410 / (_3276 * _3276));
                                float _4532 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3425 = sqrt(_3410) * _3291.w;
                                float _3427 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                                float _3428 = _3427 * _3427;
                                float _3431 = ((1.0 - _3428) * dot(vec3(_3414, _3415, _3416), vec3(_897, _900, _903))) + _3428;
                                float _3434 = _3425 * _3425;
                                float _3438 = (fma(_2633, _3318.z, fma(_2632, _3318.y, _3318.x * _2631)) + _3318.w) / _3379;
                                float _3439 = (fma(_2633, _3333.z, fma(_2632, _3333.y, _3333.x * _2631)) + _3333.w) / _3379;
                                float _3443 = 1.0 - dot(vec2(_3438, _3439), vec2(_3438, _3439));
                                float _4548 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3445 = _3444 * (((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3421) / ((_3434 * 0.699999988079071044921875) + 1.0));
                                float _3457 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                                float _3458 = 1.0 - _972;
                                float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                                float _3466 = _3465 * _3465;
                                float _3467 = _3466 * _3466;
                                float _3468 = _3414 - _2917;
                                float _3469 = _3415 - _2918;
                                float _3470 = _3416 - _2919;
                                float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                                float _3478 = dot(vec3(_897, _900, _903), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4559 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3482 = dot(vec3(_897, _900, _903), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                                float _4570 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                                float _3490 = _3427 * _3466;
                                float _3491 = _3490 * _3490;
                                float _3497 = ((1.0 - _3491) * dot(vec3(_897, _900, _903), vec3(_3414, _3415, _3416))) + _3491;
                                float _4581 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3499 = 1.0 - _3466;
                                float _3509 = (0.5 / (((_3498 * ((_3481 * _3499) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3466) * _3481))) * _3498;
                                float _4592 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3519 = (_3444 * _3421) * (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3489 * _3489) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3519 * _3303.x;
                                frontier_phi_73_pred_1 = _3519 * _3303.y;
                                frontier_phi_73_pred_2 = _3445 * _3291.z;
                                frontier_phi_73_pred_3 = _3445 * _3291.y;
                                frontier_phi_73_pred_4 = _3445 * _3291.x;
                                frontier_phi_73_pred_5 = _3519 * _3303.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3523 = frontier_phi_73_pred;
                            _3524 = frontier_phi_73_pred_1;
                            _3528 = frontier_phi_73_pred_2;
                            _3527 = frontier_phi_73_pred_3;
                            _3526 = frontier_phi_73_pred_4;
                            _3525 = frontier_phi_73_pred_5;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3230 = _3523 + _3243;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            if (_3250 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3250;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3233;
                        frontier_phi_67_pred_1 = _3234;
                        frontier_phi_67_pred_2 = _3235;
                        frontier_phi_67_pred_3 = _3232;
                        frontier_phi_67_pred_4 = _3231;
                        frontier_phi_67_pred_5 = _3230;
                    }
                    _2898 = frontier_phi_67_pred;
                    _2900 = frontier_phi_67_pred_1;
                    _2902 = frontier_phi_67_pred_2;
                    _2896 = frontier_phi_67_pred_3;
                    _2894 = frontier_phi_67_pred_4;
                    _2892 = frontier_phi_67_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2892;
                        _3031 = _2894;
                        _3032 = _2896;
                        _3033 = _2898;
                        _3034 = _2900;
                        _3035 = _2902;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2900;
                frontier_phi_55_56_ladder_1 = _2902;
                frontier_phi_55_56_ladder_2 = _2898;
                frontier_phi_55_56_ladder_3 = _2896;
                frontier_phi_55_56_ladder_4 = _2894;
                frontier_phi_55_56_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_55_56_ladder = _2786;
                frontier_phi_55_56_ladder_1 = _2788;
                frontier_phi_55_56_ladder_2 = _2784;
                frontier_phi_55_56_ladder_3 = _2782;
                frontier_phi_55_56_ladder_4 = _2780;
                frontier_phi_55_56_ladder_5 = _2778;
            }
            _2891 = frontier_phi_55_56_ladder_5;
            _2893 = frontier_phi_55_56_ladder_4;
            _2895 = frontier_phi_55_56_ladder_3;
            _2897 = frontier_phi_55_56_ladder_2;
            _2899 = frontier_phi_55_56_ladder;
            _2901 = frontier_phi_55_56_ladder_1;
        }
        float _2906 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2690 = (_2906 * _2897) + _2126;
        _2692 = (_2906 * _2899) + _2128;
        _2694 = (_2906 * _2901) + _2130;
        _2696 = ((_2891 * _940) * _2906) + _2471;
        _2698 = ((_2893 * _942) * _2906) + _2473;
        _2700 = ((_2895 * _943) * _2906) + _2475;
    }
    else
    {
        _2690 = _2126;
        _2692 = _2128;
        _2694 = _2130;
        _2696 = _2471;
        _2698 = _2473;
        _2700 = _2475;
    }
    float _4608 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4619 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4630 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    uint _2720 = _255 + 6u;
    float _2728 = _878 / cbSceneParam._m0[86u].x;
    float _2729 = _879 / cbSceneParam._m0[86u].y;
    vec4 _2743 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2745 = _2743.x;
    float _2746 = _2743.y;
    float _2747 = _2743.z;
    float _2748 = _2743.w;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _2803 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _2804 = _2803 / _813;
        float _2815 = _2804 * _863;
        float _2816 = _864 * _2804;
        float _2817 = (-0.0) - _2816;
        float _2819 = _2804 * _865;
        float _2821 = (cbSceneParam._m0[77u].w * _2817) / _2803;
        float _2822 = _2821 + cbSceneParam._m0[79u].w;
        float _2823 = cbSceneParam._m0[79u].w - _2816;
        float _2829 = sqrt(((_2815 * _2815) + (_2816 * _2816)) + (_2819 * _2819));
        float _2832 = (1.0 - (cbSceneParam._m0[77u].w / _2803)) * _2829;
        float _2837 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2839 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2817 - _2821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2822 > 0.0) ? exp2(_2837 * _2822) : (2.0 - exp2(_2839 * _2822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2832;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : max(_2822, _2823));
            float _2954 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : min(_2822, _2823));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _2992 = ((abs(_2829 / _2817) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2837 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2837 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2839 * _2963) - exp2(_2839 * _2964)) * _2952))) + (_2832 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2748);
        _2841 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2745;
        _2843 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2746;
        _2845 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2747;
        _2847 = _3003 * _2748;
    }
    else
    {
        _2841 = _2745;
        _2843 = _2746;
        _2845 = _2747;
        _2847 = _2748;
    }
    float _2859 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2860 = _2859 == 3.0;
    float _2861 = log2(_2847);
    float _2868 = exp2(_2861 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2690 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _956))) + ((_2696 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1764)) * cbPerFrame._m0[3u].x));
    float _2869 = exp2(_2861 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2692 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _956))) + ((_2698 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1764)) * cbPerFrame._m0[3u].x));
    float _2870 = exp2(_2861 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2694 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _956))) + ((_2700 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1764)) * cbPerFrame._m0[3u].x));
    float _2879 = (_2859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2879 * (_2860 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.y = _2879 * (_2860 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.z = _2879 * (_2860 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.w = cbInstanceData._m0[_2720].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2720].w;
}


