#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1337;
float _4002;
float _4003;
float _4004;
float _4005;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4014 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    float _451 = ((_421.z - _442) * _394) + _442;
    float _454 = ((((_421.x - _440) * _394) + _440) * 2.0) + (-1.0);
    float _456 = ((((_421.y - _441) * _394) + _441) * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _4025 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _512 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _515 = ((isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : min(_512, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _524 = (_515 - ((((((_505 - _506) * cbMtdParam._m0[24u].z) + _506) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _515))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4046 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _532 = (_525 * (cbMtdParam._m0[17u].x - _401)) + _401;
    float _533 = (_525 * (cbMtdParam._m0[17u].y - _402)) + _402;
    float _534 = (_525 * (cbMtdParam._m0[17u].z - _403)) + _403;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _576 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_548 - _549) * cbMtdParam._m0[24u].w) + _549) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4057 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _585 = ((((cbMtdParam._m0[10u].x - _532) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _577) + _532;
    float _586 = ((((cbMtdParam._m0[10u].y - _533) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _577) + _533;
    float _587 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _534)) * _577) + _534;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _615 = _613.x;
    float _633 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _615) * _394) + _615;
    float _637 = ((_599.x - _633) * cbMtdParam._m0[19u].z) + _633;
    float _639 = _637 - (_637 * _525);
    float _641 = _639 - (_639 * _577);
    float _645 = (cbMtdParam._m0[19u].w * (_478.z - _451)) + _451;
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _666 = (_659.x * 2.0) + (-1.0);
    float _667 = (_659.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _4068 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _676 = (_525 * (_659.z - _645)) + _645;
    float _679 = ((cbMtdParam._m0[23u].y - _676) * _577) + _676;
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _704 = (_698.x * 2.0) + (-1.0);
    float _705 = (_698.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_704, _705), vec2(_704, _705));
    float _4079 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _714 = (((_478.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _715 = (((_478.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _456;
    float _727 = (((_666 - _714) + (cbMtdParam._m0[21u].x * _714)) * _525) + _714;
    float _728 = (((_667 - _715) + (cbMtdParam._m0[21u].x * _715)) * _525) + _715;
    float _729 = (_525 * (sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _462)) + _462;
    float _740 = (((_704 - _727) + (_727 * cbMtdParam._m0[22u].z)) * _577) + _727;
    float _741 = (((_705 - _728) + (_728 * cbMtdParam._m0[22u].z)) * _577) + _728;
    float _742 = ((sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _729) * _577) + _729;
    float _744 = cbMtdParam._m0[22u].x + _478.w;
    float _747 = fma(_742, _244 * NORMAL.x, fma(_741, _251 * TANGENT.x, (_237 * _229) * _740));
    float _750 = fma(_742, _244 * NORMAL.y, fma(_741, _251 * TANGENT.y, (_237 * _230) * _740));
    float _753 = fma(_742, _244 * NORMAL.z, fma(_741, _251 * TANGENT.z, (_237 * _231) * _740));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _4090 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _761 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4112 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4123 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4134 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4145 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _766 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    vec4 _844 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _846 = _844.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1018 = sqrt(((_830 * _830) + (_831 * _831)) + (_832 * _832));
        float _1024 = (cbMatDynParam._m0[5u].x * _1018) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1029 = (cbMatDynParam._m0[5u].z * _1018) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1025)) + _1025) < ((_846 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _879 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _882 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _895 = _257 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_896].z;
    float _4178 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _908 = 1.0 - _766;
    float _909 = _905 * _908;
    float _910 = _906 * _908;
    float _911 = _907 * _908;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _766;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _766;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _766;
    float _919 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _935 = ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_758, _759, _760), vec3(_837, _838, _839));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _758) - _837;
    float _944 = (_939 * _759) - _838;
    float _945 = (_939 * _760) - _839;
    float _949 = abs(dot(vec3(_837, _838, _839), vec3(_758, _759, _760)));
    float _4211 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_761);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _970 = (1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _971 = _964 * _951;
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1007, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999));
        float _1065 = fma(_1007, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999));
        float _1069 = fma(_1007, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999));
        float _1094 = _999 + _758;
        float _1095 = _1003 + _759;
        float _1096 = _1007 + _760;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_758, _759, _760), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4259 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_758, _759, _760), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4292 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_758, _759, _760), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4325 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1007, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999));
        float _1383 = fma(_1007, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999));
        float _1387 = fma(_1007, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999));
        float _1410 = _999 + _758;
        float _1411 = _1003 + _759;
        float _1412 = _1007 + _760;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_758, _759, _760), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4388 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_758, _759, _760), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4421 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_758, _759, _760), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4454 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = _1337;
        _1658 = _1337;
        _1659 = _1337;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1349)) + _1349;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1350)) + _1350;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1351)) + _1351;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _943 * 0.5;
    float _1717 = _944 * 0.5;
    float _1718 = _945 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1007, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1007, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1007, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1847 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1850 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1878 = frontier_phi_17_15_ladder;
        }
        float _2050;
        if (_1847 > 0.0)
        {
            _2050 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2050 = frontier_phi_26_22_ladder;
        }
        float _2345;
        if (_1850 > 0.0)
        {
            _2345 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2345 = frontier_phi_38_33_ladder;
        }
        float _2347 = isnan(_2050) ? _1878 : (isnan(_1878) ? _2050 : min(_1878, _2050));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1844) + _1833;
        float _2353 = (_2348 * _1847) + _1837;
        float _2354 = (_2348 * _1850) + _1841;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2355;
        float _2359 = _2355 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 > _2359) || ((_2353 < _2357) || ((_2352 < _2357) || (_2352 > _2359))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2354, cbModelParam._m0[9u].z, fma(_2353, cbModelParam._m0[9u].y, _2352 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2354, cbModelParam._m0[10u].z, fma(_2353, cbModelParam._m0[10u].y, _2352 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2354, cbModelParam._m0[11u].z, fma(_2353, cbModelParam._m0[11u].y, _2352 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_16_38_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_16_38_ladder_2;
        _1868 = frontier_phi_16_38_ladder_1;
        _1870 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1785);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1007, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1007, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1007, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1943 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1946 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2055;
        if (_1940 > 0.0)
        {
            _2055 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2055 = frontier_phi_28_24_ladder;
        }
        float _2372;
        if (_1943 > 0.0)
        {
            _2372 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2372 = frontier_phi_40_35_ladder;
        }
        float _2710;
        if (_1946 > 0.0)
        {
            _2710 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2710 = frontier_phi_50_47_ladder;
        }
        float _2712 = isnan(_2372) ? _2055 : (isnan(_2055) ? _2372 : min(_2055, _2372));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1940) + _1929;
        float _2718 = (_2713 * _1943) + _1933;
        float _2719 = (_2713 * _1946) + _1937;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_25_50_ladder = _2841.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2841.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2841.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_25_50_ladder_2;
        _1967 = frontier_phi_25_50_ladder_1;
        _1969 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1875);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1982 = (((_970 * _919) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1984 = (((_970 * _921) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1986 = (((_970 * _922) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2042 = _2029 / _2041;
    float _2043 = _2033 / _2041;
    float _2044 = _2037 / _2041;
    float _2191;
    float _2192;
    float _2193;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2071 = ((uint(_2044 > cbSceneParam._m0[59u].y) + uint(_2044 > cbSceneParam._m0[59u].x)) + uint(_2044 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2072 = _2071 + 43u;
        uint _2080 = _2071 + 44u;
        uint _2088 = _2071 + 45u;
        uint _2096 = _2071 + 46u;
        float _2107 = fma(_2041, cbSceneParam._m0[_2072].w, fma(_2037, cbSceneParam._m0[_2072].z, fma(_2033, cbSceneParam._m0[_2072].y, _2029 * cbSceneParam._m0[_2072].x)));
        float _2111 = fma(_2041, cbSceneParam._m0[_2080].w, fma(_2037, cbSceneParam._m0[_2080].z, fma(_2033, cbSceneParam._m0[_2080].y, _2029 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2041, cbSceneParam._m0[_2096].w, fma(_2037, cbSceneParam._m0[_2096].z, fma(_2033, cbSceneParam._m0[_2096].y, _2029 * cbSceneParam._m0[_2096].x)));
        float _2124 = cbSceneParam._m0[33u].z * _2119;
        float _2126 = cbSceneParam._m0[33u].w * _2119;
        float _2129 = fma(_2041, cbSceneParam._m0[_2088].w, fma(_2037, cbSceneParam._m0[_2088].z, fma(_2033, cbSceneParam._m0[_2088].y, _2029 * cbSceneParam._m0[_2088].x))) / _2119;
        float _2177 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
        float _4580 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2184 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2107) / _2119, (_2126 + _2111) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 + _2107) / _2119, (_2111 - _2124) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2124) / _2119, (_2111 - _2126) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2126) / _2119, (_2124 + _2111) / _2119), _2129), 0.0)).x), vec4(0.25)));
        _2191 = 1.0 - (_2184 * cbSceneParam._m0[34u].x);
        _2192 = 1.0 - (_2184 * cbSceneParam._m0[34u].y);
        _2193 = 1.0 - (_2184 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2191 = 1.0;
        _2192 = 1.0;
        _2193 = 1.0;
    }
    float _2257;
    float _2259;
    float _2261;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2245 = fma(_2041, cbSceneParam._m0[63u].w, fma(_2037, cbSceneParam._m0[63u].z, fma(_2033, cbSceneParam._m0[63u].y, _2029 * cbSceneParam._m0[63u].x)));
        float _2246 = fma(_2041, cbSceneParam._m0[60u].w, fma(_2037, cbSceneParam._m0[60u].z, fma(_2033, cbSceneParam._m0[60u].y, _2029 * cbSceneParam._m0[60u].x))) / _2245;
        float _2247 = fma(_2041, cbSceneParam._m0[61u].w, fma(_2037, cbSceneParam._m0[61u].z, fma(_2033, cbSceneParam._m0[61u].y, _2029 * cbSceneParam._m0[61u].x))) / _2245;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2246 >= cbSceneParam._m0[64u].x) && (_2247 >= cbSceneParam._m0[64u].y)) && (_2246 <= cbSceneParam._m0[64u].z)) && (_2247 <= cbSceneParam._m0[64u].w))
        {
            float _2385 = fma(_2041, cbSceneParam._m0[62u].w, fma(_2037, cbSceneParam._m0[62u].z, fma(_2033, cbSceneParam._m0[62u].y, _2029 * cbSceneParam._m0[62u].x))) / _2245;
            float _2389 = isnan(cbSceneParam._m0[41u].w) ? _2385 : (isnan(_2385) ? cbSceneParam._m0[41u].w : max(_2385, cbSceneParam._m0[41u].w));
            float _2432 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
            float _4596 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
            float _2439 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2246, cbSceneParam._m0[33u].w + _2247), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2246, _2247 - cbSceneParam._m0[33u].z), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].z, _2247 - cbSceneParam._m0[33u].w), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2247), _2389), 0.0)).x), vec4(0.25)));
            float _2443 = 1.0 - (_2439 * cbSceneParam._m0[34u].x);
            float _2444 = 1.0 - (_2439 * cbSceneParam._m0[34u].y);
            float _2445 = 1.0 - (_2439 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
            frontier_phi_37_36_ladder_1 = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
            frontier_phi_37_36_ladder_2 = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
        }
        else
        {
            frontier_phi_37_36_ladder = _2193;
            frontier_phi_37_36_ladder_1 = _2192;
            frontier_phi_37_36_ladder_2 = _2191;
        }
        _2257 = frontier_phi_37_36_ladder_2;
        _2259 = frontier_phi_37_36_ladder_1;
        _2261 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2257 = _2191;
        _2259 = _2192;
        _2261 = _2193;
    }
    uvec4 _2266 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2268 = _2266.x * 14u;
    uint _2269 = _2268 + 13u;
    float _2276 = _935 + (-1.0);
    float _2281 = (cbLight._m0[_2269].x * _2276) + 1.0;
    float _2282 = (cbLight._m0[_2269].y * _2276) + 1.0;
    float _2283 = (cbLight._m0[_2269].z * _2276) + 1.0;
    float _2284 = (cbLight._m0[_2269].w * _2276) + 1.0;
    uint _2285 = _2268 + 5u;
    float _2291 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2295 = _2268 + 4u;
    float _2304 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2308 = _2268 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_758, _759, _760));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_758, _759, _760));
    float _4632 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4643 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2285].x * _2291) * _2329) + (((cbLight._m0[_2295].x * _2257) * _2304) * _2327);
    float _2337 = ((_2291 * cbLight._m0[_2285].y) * _2329) + (((cbLight._m0[_2295].y * _2259) * _2304) * _2327);
    float _2338 = ((_2291 * cbLight._m0[_2285].z) * _2329) + (((cbLight._m0[_2295].z * _2261) * _2304) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2268 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2344)
    {
        _2446 = _2336;
        _2448 = _2337;
        _2450 = _2338;
    }
    else
    {
        uint _2454 = _2268 + 6u;
        float _2470 = (dot(vec3(cbLight._m0[_2268 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4654 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2473 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2446 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2336;
        _2448 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2337;
        _2450 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2338;
    }
    bool _2453 = _2342.y == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2453)
    {
        _2508 = _2446;
        _2510 = _2448;
        _2512 = _2450;
    }
    else
    {
        uint _2681 = _2268 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2268 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4670 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2700 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2508 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2446;
        _2510 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2448;
        _2512 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2450;
    }
    uint _2515 = _2268 + 8u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _761) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2268].x + _837;
    float _2531 = cbLight._m0[_2268].y + _838;
    float _2532 = cbLight._m0[_2268].z + _839;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2268].xyz));
    float _4686 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _4697 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2544 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2545 = dot(vec3(_758, _759, _760), vec3(_2537, _2538, _2539));
    float _4708 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2537, _2538, _2539));
    float _4719 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2529 * _2529;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2566 = 0.959999978542327880859375 - _916;
    float _2568 = 0.959999978542327880859375 - _917;
    float _2569 = 0.959999978542327880859375 - _918;
    float _2576 = 1.0 - _2529;
    float _2587 = (0.5 / (((_2544 * ((_2543 * _2576) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2576) + _2529) * _2543))) * _2543;
    float _4730 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2589 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    uint _2603 = _2268 + 9u;
    float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _761) * 0.949999988079071044921875);
    float _2615 = _2614 * _2614;
    float _2616 = cbLight._m0[_2308].x + _837;
    float _2617 = cbLight._m0[_2308].y + _838;
    float _2618 = cbLight._m0[_2308].z + _839;
    float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
    float _2623 = _2622 * _2616;
    float _2624 = _2622 * _2617;
    float _2625 = _2622 * _2618;
    float _2626 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2308].xyz));
    float _4741 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2630 = dot(vec3(_758, _759, _760), vec3(_2623, _2624, _2625));
    float _4752 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2634 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2623, _2624, _2625));
    float _4763 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2638 = _2615 * _2615;
    float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
    float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2656 = 1.0 - _2615;
    float _2666 = (0.5 / (((_2544 * ((_2629 * _2656) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2656) + _2615) * _2629))) * _2629;
    float _4774 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
    float _2678 = (((((_2649 * _2566) + _919) * cbLight._m0[_2603].x) * _2668) * _2291) + ((((cbLight._m0[_2515].x * _2257) * ((_2565 * _2566) + _919)) * _2589) * _2304);
    float _2679 = (((((_2649 * _2568) + _921) * cbLight._m0[_2603].y) * _2668) * _2291) + ((((cbLight._m0[_2515].y * _2259) * ((_2565 * _2568) + _921)) * _2589) * _2304);
    float _2680 = (((((_2649 * _2569) + _922) * cbLight._m0[_2603].z) * _2668) * _2291) + ((((cbLight._m0[_2515].z * _2261) * ((_2565 * _2569) + _922)) * _2589) * _2304);
    float _2736;
    float _2738;
    float _2740;
    if (_2344)
    {
        _2736 = _2678;
        _2738 = _2679;
        _2740 = _2680;
    }
    else
    {
        uint _2742 = _2268 + 2u;
        uint _2746 = _2268 + 10u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _761) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _837;
        float _2763 = cbLight._m0[_2742].y + _838;
        float _2764 = cbLight._m0[_2742].z + _839;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2742].xyz));
        float _4785 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2776 = dot(vec3(_758, _759, _760), vec3(_2769, _2770, _2771));
        float _4796 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4807 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
        float _2802 = 1.0 - _2761;
        float _2812 = (0.5 / (((_2544 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2802) + _2761) * _2775))) * _2775;
        float _4818 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2814 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2815 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2736 = (((((_2795 * _2566) + _919) * cbLight._m0[_2746].x) * _2814) * _2815) + _2678;
        _2738 = (((((_2795 * _2568) + _921) * cbLight._m0[_2746].y) * _2814) * _2815) + _2679;
        _2740 = (((((_2795 * _2569) + _922) * cbLight._m0[_2746].z) * _2814) * _2815) + _2680;
    }
    float _2846;
    float _2848;
    float _2850;
    if (_2453)
    {
        _2846 = _2736;
        _2848 = _2738;
        _2850 = _2740;
    }
    else
    {
        uint _2857 = _2268 + 3u;
        uint _2861 = _2268 + 11u;
        float _2875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2857].w)) * _761) * 0.949999988079071044921875);
        float _2876 = _2875 * _2875;
        float _2877 = cbLight._m0[_2857].x + _837;
        float _2878 = cbLight._m0[_2857].y + _838;
        float _2879 = cbLight._m0[_2857].z + _839;
        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
        float _2884 = _2883 * _2877;
        float _2885 = _2883 * _2878;
        float _2886 = _2883 * _2879;
        float _2887 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2857].xyz));
        float _4834 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2891 = dot(vec3(_758, _759, _760), vec3(_2884, _2885, _2886));
        float _4845 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2895 = dot(vec3(cbLight._m0[_2857].xyz), vec3(_2884, _2885, _2886));
        float _4856 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2899 = _2876 * _2876;
        float _2903 = ((_2894 * _2894) * (_2899 + (-1.0))) + 1.0;
        float _2910 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
        float _2917 = 1.0 - _2876;
        float _2927 = (0.5 / (((_2544 * ((_2890 * _2917) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2544 * _2917) + _2876) * _2890))) * _2890;
        float _4867 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2929 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2899 / ((_2903 * _2903) * 3.141590118408203125));
        float _2930 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2846 = (((((_2910 * _2566) + _919) * cbLight._m0[_2861].x) * _2929) * _2930) + _2736;
        _2848 = (((((_2910 * _2568) + _921) * cbLight._m0[_2861].y) * _2929) * _2930) + _2738;
        _2850 = (((((_2910 * _2569) + _922) * cbLight._m0[_2861].z) * _2929) * _2930) + _2740;
    }
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_2266.y == 0u)
    {
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.x;
        uint _2963 = uint((float(_2951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2952))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2952)));
        float _2973 = (log2(_2044 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2974 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        uint _2977 = uint(isnan(14.0) ? _2974 : (isnan(_2974) ? 14.0 : min(_2974, 14.0)));
        uvec4 _2982 = texelFetch(g_lightClusterGridBuffer, int(((_2977 << 2u) + (_2963 << 6u)) >> 2u));
        uint _2983 = _2982.x;
        uint _2984 = _2951.z;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((((1u << ((_2984 >> 4u) & 15u)) + 4294967295u) & _2983) == 0u) || ((_2984 & 240u) == 0u))
        {
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
        }
        else
        {
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            uint _3222 = 0u;
            uint _3231;
            bool _3232;
            for (;;)
            {
                _3231 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                _3232 = _3231 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3232)
                {
                    frontier_phi_71_pred = _3221;
                    frontier_phi_71_pred_1 = _3220;
                    frontier_phi_71_pred_2 = _3219;
                    frontier_phi_71_pred_3 = _3218;
                    frontier_phi_71_pred_4 = _3217;
                    frontier_phi_71_pred_5 = _3216;
                }
                else
                {
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    uint _3367;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3231;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    for (;;)
                    {
                        uint _3371 = uint(findLSB(_3367)) + (_3222 << 5u);
                        uint _3368 = (_3367 + 4294967295u) & _3367;
                        uint _3373 = _3371 * 48u;
                        vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 3u)).x));
                        uint _3393 = (_3371 * 48u) + 4u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 3u)).x));
                        uint _3412 = (_3371 * 48u) + 8u;
                        vec3 _3423 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x));
                        float _3427 = _3387.x - _2042;
                        float _3428 = _3387.y - _2043;
                        float _3429 = _3387.z - _2044;
                        float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                        float _3433 = inversesqrt(_3430);
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3437 = dot(vec3(_876, _879, _882), vec3(_3434, _3435, _3436));
                        float _3442 = 1.0 - (_3430 * _3387.w);
                        float _4893 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3444 = sqrt(_3430) * _3406.w;
                        float _3447 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3437) + _3448;
                        float _3454 = _3444 * _3444;
                        float _3458 = ((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3443) / ((_3454 * 0.699999988079071044921875) + 1.0);
                        float _3462 = (-0.0) - _2042;
                        float _3463 = (-0.0) - _2043;
                        float _3464 = (-0.0) - _2044;
                        float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3478 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                        float _3479 = 1.0 - _951;
                        float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                        float _3487 = _3486 * _3486;
                        float _3488 = _3487 * _3487;
                        float _3489 = _3469 + _3434;
                        float _3490 = _3470 + _3435;
                        float _3491 = _3471 + _3436;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3499 = dot(vec3(_876, _879, _882), vec3(_3469, _3470, _3471));
                        float _4909 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3503 = dot(vec3(_876, _879, _882), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                        float _4920 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                        float _3511 = _3447 * _3487;
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3437) + _3512;
                        float _4931 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3516 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3517 = 1.0 - _3487;
                        float _3527 = (0.5 / (((_3516 * ((_3502 * _3517) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3487) * _3502))) * _3516;
                        float _4942 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3538 = (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3510 * _3510) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125))) * _3443;
                        _3291 = (_3458 * _3406.x) + _3364;
                        _3292 = (_3458 * _3406.y) + _3365;
                        _3293 = (_3458 * _3406.z) + _3366;
                        _3288 = (_3538 * _3423.x) + _3361;
                        _3289 = (_3538 * _3423.y) + _3362;
                        _3290 = (_3538 * _3423.z) + _3363;
                        if (_3368 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3368;
                        }
                    }
                    frontier_phi_71_pred = _3293;
                    frontier_phi_71_pred_1 = _3292;
                    frontier_phi_71_pred_2 = _3291;
                    frontier_phi_71_pred_3 = _3290;
                    frontier_phi_71_pred_4 = _3289;
                    frontier_phi_71_pred_5 = _3288;
                }
                _3074 = frontier_phi_71_pred;
                _3072 = frontier_phi_71_pred_1;
                _3070 = frontier_phi_71_pred_2;
                _3068 = frontier_phi_71_pred_3;
                _3066 = frontier_phi_71_pred_4;
                _3064 = frontier_phi_71_pred_5;
                uint _3223 = _3222 + 1u;
                if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3216 = _3064;
                    _3217 = _3066;
                    _3218 = _3068;
                    _3219 = _3070;
                    _3220 = _3072;
                    _3221 = _3074;
                    _3222 = _3223;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
        }
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.z;
        uint _3080 = (_3078 >> 8u) & 15u;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        if (((4294967295u << _3080) & _2983) == 0u)
        {
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
        }
        else
        {
            float _3209 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
            float _3210 = _3209 * _2042;
            float _3211 = _3209 * _2043;
            float _3212 = _3209 * _2044;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3080 < ((_3078 >> 12u) & 15u))
            {
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3344 = _3063;
                float _3345 = _3065;
                float _3346 = _3067;
                float _3347 = _3069;
                float _3348 = _3071;
                float _3349 = _3073;
                uint _3350 = _3080;
                uint _3359;
                bool _3360;
                for (;;)
                {
                    _3359 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3350 << 2u)) >> 2u)).x;
                    _3360 = _3359 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3360)
                    {
                        frontier_phi_82_pred = _3349;
                        frontier_phi_82_pred_1 = _3348;
                        frontier_phi_82_pred_2 = _3347;
                        frontier_phi_82_pred_3 = _3346;
                        frontier_phi_82_pred_4 = _3345;
                        frontier_phi_82_pred_5 = _3344;
                    }
                    else
                    {
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        uint _3571 = _3359;
                        uint _3572;
                        vec4 _3597;
                        float _3598;
                        vec4 _3613;
                        vec3 _3625;
                        vec4 _3640;
                        vec4 _3656;
                        float _3702;
                        bool _3703;
                        for (;;)
                        {
                            uint _3582 = ((_3350 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3571));
                            _3572 = (_3571 + 4294967295u) & _3571;
                            uint _3584 = _3582 * 40u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            _3598 = _3597.w;
                            uint _3600 = (_3582 * 40u) + 4u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3582 * 40u) + 8u;
                            _3625 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x));
                            uint _3627 = (_3582 * 40u) + 16u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3643 = (_3582 * 40u) + 20u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3582 * 40u) + 24u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3677 = (_3582 * 40u) + 28u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            _3702 = fma(_2044, _3690.z, fma(_2043, _3690.y, _3690.x * _2042)) + _3690.w;
                            _3703 = !((fma(_2044, _3671.z, fma(_2043, _3671.y, _3671.x * _2042)) + _3671.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3703)
                            {
                                float _3730 = _3597.x - _2042;
                                float _3731 = _3597.y - _2043;
                                float _3732 = _3597.z - _2044;
                                float _3733 = dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732));
                                float _3736 = inversesqrt(_3733);
                                float _3737 = _3736 * _3730;
                                float _3738 = _3736 * _3731;
                                float _3739 = _3736 * _3732;
                                float _3743 = 1.0 - (_3733 / (_3598 * _3598));
                                float _4953 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3748 = sqrt(_3733) * _3613.w;
                                float _3750 = 1.39999997615814208984375 / (_3748 + 1.39999997615814208984375);
                                float _3751 = _3750 * _3750;
                                float _3754 = ((1.0 - _3751) * dot(vec3(_3737, _3738, _3739), vec3(_876, _879, _882))) + _3751;
                                float _3757 = _3748 * _3748;
                                float _3761 = (fma(_2044, _3640.z, fma(_2043, _3640.y, _3640.x * _2042)) + _3640.w) / _3702;
                                float _3762 = (fma(_2044, _3656.z, fma(_2043, _3656.y, _3656.x * _2042)) + _3656.w) / _3702;
                                float _3766 = 1.0 - dot(vec2(_3761, _3762), vec2(_3761, _3762));
                                float _4969 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3768 = _3767 * (((isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0))) * _3744) / ((_3757 * 0.699999988079071044921875) + 1.0));
                                float _3780 = exp2(log2(1.0 / ((_3757 * 3.5) + 5.0)) * 0.25);
                                float _3781 = 1.0 - _951;
                                float _3788 = sqrt(1.0 - ((1.0 - (_3781 * _3781)) * (1.0 - (_3780 * _3780))));
                                float _3789 = _3788 * _3788;
                                float _3790 = _3789 * _3789;
                                float _3791 = _3737 - _3210;
                                float _3792 = _3738 - _3211;
                                float _3793 = _3739 - _3212;
                                float _3797 = inversesqrt(dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793)));
                                float _3801 = dot(vec3(_876, _879, _882), vec3((-0.0) - _3210, (-0.0) - _3211, (-0.0) - _3212));
                                float _4980 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3805 = dot(vec3(_876, _879, _882), vec3(_3797 * _3791, _3797 * _3792, _3797 * _3793));
                                float _4991 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3812 = ((_3808 * _3808) * (_3790 + (-1.0))) + 1.0;
                                float _3813 = _3750 * _3789;
                                float _3814 = _3813 * _3813;
                                float _3820 = ((1.0 - _3814) * dot(vec3(_876, _879, _882), vec3(_3737, _3738, _3739))) + _3814;
                                float _5002 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3822 = 1.0 - _3789;
                                float _3832 = (0.5 / (((_3821 * ((_3804 * _3822) + _3789)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3789) * _3804))) * _3821;
                                float _5013 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3842 = (_3767 * _3744) * (((_3790 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3812 * _3812) * ((_3757 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3768 * _3613.z;
                                frontier_phi_88_pred_1 = _3768 * _3613.y;
                                frontier_phi_88_pred_2 = _3768 * _3613.x;
                                frontier_phi_88_pred_3 = _3842 * _3625.z;
                                frontier_phi_88_pred_4 = _3842 * _3625.y;
                                frontier_phi_88_pred_5 = _3842 * _3625.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3851 = frontier_phi_88_pred;
                            _3850 = frontier_phi_88_pred_1;
                            _3849 = frontier_phi_88_pred_2;
                            _3848 = frontier_phi_88_pred_3;
                            _3847 = frontier_phi_88_pred_4;
                            _3846 = frontier_phi_88_pred_5;
                            _3555 = _3849 + _3568;
                            _3556 = _3850 + _3569;
                            _3557 = _3851 + _3570;
                            _3552 = _3846 + _3565;
                            _3553 = _3847 + _3566;
                            _3554 = _3848 + _3567;
                            if (_3572 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3572;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3557;
                        frontier_phi_82_pred_1 = _3556;
                        frontier_phi_82_pred_2 = _3555;
                        frontier_phi_82_pred_3 = _3554;
                        frontier_phi_82_pred_4 = _3553;
                        frontier_phi_82_pred_5 = _3552;
                    }
                    _3195 = frontier_phi_82_pred;
                    _3193 = frontier_phi_82_pred_1;
                    _3191 = frontier_phi_82_pred_2;
                    _3189 = frontier_phi_82_pred_3;
                    _3187 = frontier_phi_82_pred_4;
                    _3185 = frontier_phi_82_pred_5;
                    uint _3351 = _3350 + 1u;
                    if (_3351 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3344 = _3185;
                        _3345 = _3187;
                        _3346 = _3189;
                        _3347 = _3191;
                        _3348 = _3193;
                        _3349 = _3195;
                        _3350 = _3351;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3191;
                frontier_phi_63_64_ladder_1 = _3195;
                frontier_phi_63_64_ladder_2 = _3193;
                frontier_phi_63_64_ladder_3 = _3189;
                frontier_phi_63_64_ladder_4 = _3187;
                frontier_phi_63_64_ladder_5 = _3185;
            }
            else
            {
                frontier_phi_63_64_ladder = _3069;
                frontier_phi_63_64_ladder_1 = _3073;
                frontier_phi_63_64_ladder_2 = _3071;
                frontier_phi_63_64_ladder_3 = _3067;
                frontier_phi_63_64_ladder_4 = _3065;
                frontier_phi_63_64_ladder_5 = _3063;
            }
            _3184 = frontier_phi_63_64_ladder_5;
            _3186 = frontier_phi_63_64_ladder_4;
            _3188 = frontier_phi_63_64_ladder_3;
            _3190 = frontier_phi_63_64_ladder;
            _3192 = frontier_phi_63_64_ladder_2;
            _3194 = frontier_phi_63_64_ladder_1;
        }
        float _3199 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2996 = (_3199 * _3190) + _2508;
        _2998 = (_3199 * _3192) + _2510;
        _3000 = (_3199 * _3194) + _2512;
        _3002 = ((_3184 * _919) * _3199) + _2846;
        _3004 = ((_3186 * _921) * _3199) + _2848;
        _3006 = ((_3188 * _922) * _3199) + _2850;
    }
    else
    {
        _2996 = _2508;
        _2998 = _2510;
        _3000 = _2512;
        _3002 = _2846;
        _3004 = _2848;
        _3006 = _2850;
    }
    float _5029 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _5040 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _5051 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _3023 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2996 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _935))) + ((_3002 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _3024 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2998 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _935))) + ((_3004 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _3025 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_3000 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _935))) + ((_3006 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    uint _3026 = _257 + 6u;
    float _3034 = _857 / cbSceneParam._m0[86u].x;
    float _3035 = _858 / cbSceneParam._m0[86u].y;
    vec4 _3049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3051 = _3049.x;
    float _3052 = _3049.y;
    float _3053 = _3049.z;
    float _3054 = _3049.w;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _3088 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _3089 = _3088 / _780;
        float _3100 = _3089 * _830;
        float _3101 = _831 * _3089;
        float _3102 = (-0.0) - _3101;
        float _3104 = _3089 * _832;
        float _3106 = (cbSceneParam._m0[77u].w * _3102) / _3088;
        float _3107 = _3106 + cbSceneParam._m0[79u].w;
        float _3108 = cbSceneParam._m0[79u].w - _3101;
        float _3114 = sqrt(((_3100 * _3100) + (_3101 * _3101)) + (_3104 * _3104));
        float _3117 = (1.0 - (cbSceneParam._m0[77u].w / _3088)) * _3114;
        float _3122 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3124 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3301;
        if (abs((_3102 - _3106) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3301 = ((((_3107 > 0.0) ? exp2(_3122 * _3107) : (2.0 - exp2(_3124 * _3107))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3117;
        }
        else
        {
            float _3245 = 1.0 / cbSceneParam._m0[80u].x;
            float _3246 = isnan(_3108) ? _3107 : (isnan(_3107) ? _3108 : max(_3107, _3108));
            float _3247 = isnan(_3108) ? _3107 : (isnan(_3107) ? _3108 : min(_3107, _3108));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            _3301 = ((abs(_3114 / _3102) * cbSceneParam._m0[80u].y) * ((((_3256 - _3257) * 2.0) - ((exp2(_3122 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0)))) - exp2(_3122 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))))) * _3245)) - ((exp2(_3124 * _3256) - exp2(_3124 * _3257)) * _3245))) + (_3117 * cbSceneParam._m0[80u].z);
        }
        vec4 _3303 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, 1.0), 0.0);
        float _3312 = exp2((_3301 * (-1.44269502162933349609375)) * (1.0 - _3303.w));
        float _3313 = log2(_3312);
        float _3329 = log2(_3054);
        _3126 = (exp2(_3329 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].x)) * _3303.x) / cbSceneParam._m0[78u].x)) + _3051;
        _3128 = (exp2(_3329 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].y)) * _3303.y) / cbSceneParam._m0[78u].y)) + _3052;
        _3130 = (exp2(_3329 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].z)) * _3303.z) / cbSceneParam._m0[78u].z)) + _3053;
        _3132 = _3312 * _3054;
    }
    else
    {
        _3126 = _3051;
        _3128 = _3052;
        _3130 = _3053;
        _3132 = _3054;
    }
    bool _3339;
    vec4 _3142;
    vec4 _3164;
    float _3166;
    float _3170;
    float _3171;
    float _3172;
    float _3173;
    bool _3183;
    for (;;)
    {
        _3142 = cbMatDynParam._m0[0u];
        float _3144 = roundEven(_3142.y);
        bool _3145 = _3144 == 3.0;
        float _3146 = log2(_3132);
        float _3153 = exp2(_3146 * cbSceneParam._m0[78u].x) * _3023;
        float _3154 = exp2(_3146 * cbSceneParam._m0[78u].y) * _3024;
        float _3155 = exp2(_3146 * cbSceneParam._m0[78u].z) * _3025;
        float _3162 = _846 + (-0.5);
        _3164 = cbMtdParam._m0[1u];
        _3166 = _3164.y * _3162;
        float _3169 = (_3144 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3170 = _3169 * (_3145 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3126)));
        _3171 = _3169 * (_3145 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3128)));
        _3172 = _3169 * (_3145 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3130)));
        _3173 = _3162 * 0.999000012874603271484375;
        _3183 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3183)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3173) < 0.5)
            {
                _3339 = true;
                break;
            }
        }
        uint _3280 = _895 + uint(_3142.w);
        if ((cbInstanceData._m0[_3280].w < 1.0) && ((cbInstanceData._m0[_3280].w + _3173) < 0.5))
        {
            _3339 = true;
            break;
        }
        if ((_3166 + 1.0) < _3164.x)
        {
            _3339 = true;
            break;
        }
        _3339 = false;
        break;
    }
    float _3543;
    if (_3339)
    {
        discard_state = true;
        _3543 = 0.0;
    }
    else
    {
        _3543 = cbInstanceData._m0[_3026].w;
    }
    SV_Target.x = _3170;
    SV_Target.y = _3171;
    SV_Target.z = _3172;
    SV_Target.w = _3543;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3026].w;
    discard_exit();
}


