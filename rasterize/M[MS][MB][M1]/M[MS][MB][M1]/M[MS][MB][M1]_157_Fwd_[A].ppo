#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3747;
float _3748;
float _3749;
float _3750;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3759 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3770 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3781 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3792 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _547 = ((_517.z - _538) * _423) + _538;
    float _550 = ((((_517.x - _536) * _423) + _536) * 2.0) + (-1.0);
    float _551 = ((((_517.y - _537) * _423) + _537) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3803 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((((_490.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((((_490.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = fma(_557, _239, fma(_590, _246, _589 * _232));
    float _596 = fma(_557, _240, fma(_590, _247, _589 * _233));
    float _599 = fma(_557, _241, fma(_590, _248, _589 * _234));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _637 = ((_632 - _633) * cbMtdParam._m0[24u].z) + _633;
    float _639 = (cbMtdParam._m0[19u].x + dot(vec4(_603 * _593, _603 * _596, _603 * _599, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_637 * cbMtdParam._m0[21u].z);
    float _3814 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _655 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_637 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3825 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _660 = ((_640 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) * _656) + _449;
    float _661 = ((_640 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) * _656) + _450;
    float _662 = ((_640 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) * _656) + _451;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _690) * _423) + _690;
    float _712 = ((_674.x - _708) * cbMtdParam._m0[19u].z) + _708;
    float _715 = _712 - ((_656 * _640) * _712);
    float _720 = (((_490.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _724 = ((_577.z - _720) * cbMtdParam._m0[19u].w) + _720;
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _744 = (_737.x * 2.0) + (-1.0);
    float _745 = (_737.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _3836 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _755 = (((_737.z - _724) * _640) * _656) + _724;
    float _770 = (((cbMtdParam._m0[21u].x * _589) + ((_744 - _589) * _640)) * _656) + _589;
    float _771 = (((cbMtdParam._m0[21u].x * _590) + ((_745 - _590) * _640)) * _656) + _590;
    float _772 = (((sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) - _557) * _640) * _656) + _557;
    float _774 = cbMtdParam._m0[22u].x + _577.w;
    float _777 = fma(_772, _239, fma(_771, _246, _770 * _232));
    float _780 = fma(_772, _240, fma(_771, _247, _770 * _233));
    float _783 = fma(_772, _241, fma(_771, _248, _770 * _234));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3847 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _791 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _3869 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3880 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3891 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3902 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _796 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    vec4 _875 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _877 = _875.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_861 * _861) + (_862 * _862)) + (_863 * _863));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _3913 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _3924 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) - _1056)) + _1056) < ((_877 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _907 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _910 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _913 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _926 = _272 + 9u;
    uint _927 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _933 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_927].x;
    float _934 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_927].y;
    float _935 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_927].z;
    float _3935 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _939 = 1.0 - _796;
    float _940 = _936 * _939;
    float _941 = _937 * _939;
    float _942 = _938 * _939;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _796;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _796;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _796;
    float _950 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    vec4 _962 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _966 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * TEXCOORD_5.w) * _962.x;
    float _967 = dot(vec3(_788, _789, _790), vec3(_868, _869, _870));
    float _970 = _967 * 2.0;
    float _974 = (_970 * _788) - _868;
    float _975 = (_970 * _789) - _869;
    float _976 = (_970 * _790) - _870;
    float _980 = abs(dot(vec3(_868, _869, _870), vec3(_788, _789, _790)));
    float _3968 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = sqrt(_791);
    float _995 = exp2((_982 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_982 * 3.0));
    float _1001 = (1.0 - _995) * ((_982 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _982;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1096 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1100 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1125 = _1030 + _788;
        float _1126 = _1034 + _789;
        float _1127 = _1038 + _790;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_788, _789, _790), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4016 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_788, _789, _790), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4049 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_788, _789, _790), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4082 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1414 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1418 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1441 = _1030 + _788;
        float _1442 = _1034 + _789;
        float _1443 = _1038 + _790;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_788, _789, _790), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4145 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_788, _789, _790), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4178 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_788, _789, _790), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4211 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1381)) + _1381;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _974 * 0.5;
    float _1748 = _975 * 0.5;
    float _1749 = _976 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1877 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1880 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1908 = frontier_phi_17_15_ladder;
        }
        float _2110;
        if (_1877 > 0.0)
        {
            _2110 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2110 = frontier_phi_26_22_ladder;
        }
        float _2364;
        if (_1880 > 0.0)
        {
            _2364 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2364 = frontier_phi_38_33_ladder;
        }
        float _2366 = isnan(_2110) ? _1908 : (isnan(_1908) ? _2110 : min(_1908, _2110));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1874) + _1863;
        float _2372 = (_2367 * _1877) + _1867;
        float _2373 = (_2367 * _1880) + _1871;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_16_38_ladder_2;
        _1898 = frontier_phi_16_38_ladder_1;
        _1900 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1972 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1975 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _2115;
        if (_1969 > 0.0)
        {
            _2115 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2115 = frontier_phi_28_24_ladder;
        }
        float _2391;
        if (_1972 > 0.0)
        {
            _2391 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2391 = frontier_phi_40_35_ladder;
        }
        float _2604;
        if (_1975 > 0.0)
        {
            _2604 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2604 = frontier_phi_49_46_ladder;
        }
        float _2606 = isnan(_2391) ? _2115 : (isnan(_2115) ? _2391 : min(_2115, _2391));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1969) + _1958;
        float _2612 = (_2607 * _1972) + _1962;
        float _2613 = (_2607 * _1975) + _1966;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_25_49_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_25_49_ladder_2;
        _1996 = frontier_phi_25_49_ladder_1;
        _1998 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1905);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_1001 * _950) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2013 = (((_1001 * _952) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1001 * _953) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _966 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2069 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2073 = _2036 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_788, _789, _790));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_788, _789, _790));
    float _4347 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4358 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2053].x * _2059) * _2094) + ((cbLight._m0[_2063].x * _2069) * _2092);
    float _2102 = ((_2059 * cbLight._m0[_2053].y) * _2094) + ((_2069 * cbLight._m0[_2063].y) * _2092);
    float _2103 = ((_2059 * cbLight._m0[_2053].z) * _2094) + ((_2069 * cbLight._m0[_2063].z) * _2092);
    uvec4 _2107 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2109 = _2107.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2109)
    {
        _2120 = _2101;
        _2122 = _2102;
        _2124 = _2103;
    }
    else
    {
        uint _2128 = _2036 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4369 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2147 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2101;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2102;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2103;
    }
    bool _2127 = _2107.y == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2127)
    {
        _2165 = _2120;
        _2167 = _2122;
        _2169 = _2124;
    }
    else
    {
        uint _2335 = _2036 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4385 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2354 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2165 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2120;
        _2167 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2122;
        _2169 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2124;
    }
    uint _2172 = _2036 + 8u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _791) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2036].x + _868;
    float _2188 = cbLight._m0[_2036].y + _869;
    float _2189 = cbLight._m0[_2036].z + _870;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2036].xyz));
    float _4401 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2201 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2202 = dot(vec3(_788, _789, _790), vec3(_2194, _2195, _2196));
    float _4423 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2194, _2195, _2196));
    float _4434 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2186 * _2186;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2223 = 0.959999978542327880859375 - _947;
    float _2225 = 0.959999978542327880859375 - _948;
    float _2226 = 0.959999978542327880859375 - _949;
    float _2233 = 1.0 - _2186;
    float _2244 = (0.5 / (((_2201 * ((_2200 * _2233) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2233) + _2186) * _2200))) * _2200;
    float _4445 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    uint _2257 = _2036 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _791) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2073].x + _868;
    float _2271 = cbLight._m0[_2073].y + _869;
    float _2272 = cbLight._m0[_2073].z + _870;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2073].xyz));
    float _4456 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2284 = dot(vec3(_788, _789, _790), vec3(_2277, _2278, _2279));
    float _4467 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2277, _2278, _2279));
    float _4478 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2310 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2201 * ((_2283 * _2310) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2310) + _2269) * _2283))) * _2283;
    float _4489 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2332 = (((((_2303 * _2223) + _950) * cbLight._m0[_2257].x) * _2322) * _2059) + (((((_2222 * _2223) + _950) * cbLight._m0[_2172].x) * _2246) * _2069);
    float _2333 = (((((_2303 * _2225) + _952) * cbLight._m0[_2257].y) * _2322) * _2059) + (((((_2222 * _2225) + _952) * cbLight._m0[_2172].y) * _2246) * _2069);
    float _2334 = (((((_2303 * _2226) + _953) * cbLight._m0[_2257].z) * _2322) * _2059) + (((((_2222 * _2226) + _953) * cbLight._m0[_2172].z) * _2246) * _2069);
    float _2396;
    float _2398;
    float _2400;
    if (_2109)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2036 + 2u;
        uint _2406 = _2036 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _791) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _868;
        float _2423 = cbLight._m0[_2402].y + _869;
        float _2424 = cbLight._m0[_2402].z + _870;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2402].xyz));
        float _4500 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2436 = dot(vec3(_788, _789, _790), vec3(_2429, _2430, _2431));
        float _4511 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4522 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2201 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2462) + _2421) * _2435))) * _2435;
        float _4533 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2396 = (((((_2455 * _2223) + _950) * cbLight._m0[_2406].x) * _2474) * _2475) + _2332;
        _2398 = (((((_2455 * _2225) + _952) * cbLight._m0[_2406].y) * _2474) * _2475) + _2333;
        _2400 = (((((_2455 * _2226) + _953) * cbLight._m0[_2406].z) * _2474) * _2475) + _2334;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2127)
    {
        _2510 = _2396;
        _2512 = _2398;
        _2514 = _2400;
    }
    else
    {
        uint _2521 = _2036 + 3u;
        uint _2525 = _2036 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _791) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _868;
        float _2542 = cbLight._m0[_2521].y + _869;
        float _2543 = cbLight._m0[_2521].z + _870;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2521].xyz));
        float _4549 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2555 = dot(vec3(_788, _789, _790), vec3(_2548, _2549, _2550));
        float _4560 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4571 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2201 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2581) + _2540) * _2554))) * _2554;
        float _4582 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2510 = (((((_2574 * _2223) + _950) * cbLight._m0[_2525].x) * _2593) * _2594) + _2396;
        _2512 = (((((_2574 * _2225) + _952) * cbLight._m0[_2525].y) * _2593) * _2594) + _2398;
        _2514 = (((((_2574 * _2226) + _953) * cbLight._m0[_2525].z) * _2593) * _2594) + _2400;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2034.y == 0u)
    {
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2669;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2669;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2669;
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.x;
        uint _2696 = uint((float(_2684.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2685))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2685)));
        float _2706 = (log2(_2672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2707 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        uint _2710 = uint(isnan(14.0) ? _2707 : (isnan(_2707) ? 14.0 : min(_2707, 14.0)));
        uvec4 _2715 = texelFetch(g_lightClusterGridBuffer, int(((_2710 << 2u) + (_2696 << 6u)) >> 2u));
        uint _2716 = _2715.x;
        uint _2717 = _2684.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2717 >> 4u) & 15u)) + 4294967295u) & _2716) == 0u) || ((_2717 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2986)
                {
                    frontier_phi_66_pred = _2970;
                    frontier_phi_66_pred_1 = _2975;
                    frontier_phi_66_pred_2 = _2974;
                    frontier_phi_66_pred_3 = _2973;
                    frontier_phi_66_pred_4 = _2972;
                    frontier_phi_66_pred_5 = _2971;
                }
                else
                {
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    uint _3121;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2985;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    for (;;)
                    {
                        uint _3125 = uint(findLSB(_3121)) + (_2976 << 5u);
                        uint _3122 = (_3121 + 4294967295u) & _3121;
                        uint _3127 = _3125 * 48u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3147 = (_3125 * 48u) + 4u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3166 = (_3125 * 48u) + 8u;
                        vec3 _3177 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x));
                        float _3181 = _3141.x - _2670;
                        float _3182 = _3141.y - _2671;
                        float _3183 = _3141.z - _2672;
                        float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                        float _3187 = inversesqrt(_3184);
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3191 = dot(vec3(_907, _910, _913), vec3(_3188, _3189, _3190));
                        float _3196 = 1.0 - (_3184 * _3141.w);
                        float _4608 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3198 = sqrt(_3184) * _3160.w;
                        float _3201 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3191) + _3202;
                        float _3208 = _3198 * _3198;
                        float _3212 = ((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3197) / ((_3208 * 0.699999988079071044921875) + 1.0);
                        float _3216 = (-0.0) - _2670;
                        float _3217 = (-0.0) - _2671;
                        float _3218 = (-0.0) - _2672;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3233 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                        float _3234 = 1.0 - _982;
                        float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                        float _3242 = _3241 * _3241;
                        float _3243 = _3242 * _3242;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3246 = _3225 + _3190;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3254 = dot(vec3(_907, _910, _913), vec3(_3223, _3224, _3225));
                        float _4624 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3258 = dot(vec3(_907, _910, _913), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                        float _4635 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                        float _3266 = _3201 * _3242;
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3191) + _3267;
                        float _4646 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3272 = 1.0 - _3242;
                        float _3282 = (0.5 / (((_3271 * ((_3257 * _3272) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3242) * _3257))) * _3271;
                        float _4657 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3293 = (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3265 * _3265) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125))) * _3197;
                        _3045 = (_3212 * _3160.x) + _3118;
                        _3046 = (_3212 * _3160.y) + _3119;
                        _3047 = (_3212 * _3160.z) + _3120;
                        _3042 = (_3293 * _3177.x) + _3115;
                        _3043 = (_3293 * _3177.y) + _3116;
                        _3044 = (_3293 * _3177.z) + _3117;
                        if (_3122 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3122;
                        }
                    }
                    frontier_phi_66_pred = _3042;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                _2818 = frontier_phi_66_pred;
                _2828 = frontier_phi_66_pred_1;
                _2826 = frontier_phi_66_pred_2;
                _2824 = frontier_phi_66_pred_3;
                _2822 = frontier_phi_66_pred_4;
                _2820 = frontier_phi_66_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2818;
                    _2971 = _2820;
                    _2972 = _2822;
                    _2973 = _2824;
                    _2974 = _2826;
                    _2975 = _2828;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2834) & _2716) == 0u)
        {
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
            float _2964 = _2963 * _2670;
            float _2965 = _2963 * _2671;
            float _2966 = _2963 * _2672;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3098 = _2817;
                float _3099 = _2819;
                float _3100 = _2821;
                float _3101 = _2823;
                float _3102 = _2825;
                float _3103 = _2827;
                uint _3104 = _2834;
                uint _3113;
                bool _3114;
                for (;;)
                {
                    _3113 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                    _3114 = _3113 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3114)
                    {
                        frontier_phi_77_pred = _3103;
                        frontier_phi_77_pred_1 = _3102;
                        frontier_phi_77_pred_2 = _3101;
                        frontier_phi_77_pred_3 = _3100;
                        frontier_phi_77_pred_4 = _3099;
                        frontier_phi_77_pred_5 = _3098;
                    }
                    else
                    {
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        uint _3326 = _3113;
                        uint _3327;
                        vec4 _3352;
                        float _3353;
                        vec4 _3368;
                        vec3 _3380;
                        vec4 _3395;
                        vec4 _3410;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3337 = ((_3104 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3326));
                            _3327 = (_3326 + 4294967295u) & _3326;
                            uint _3339 = _3337 * 40u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            _3353 = _3352.w;
                            uint _3355 = (_3337 * 40u) + 4u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3337 * 40u) + 8u;
                            _3380 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x));
                            uint _3382 = (_3337 * 40u) + 16u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3337 * 40u) + 20u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3337 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3337 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_2672, _3444.z, fma(_2671, _3444.y, _3444.x * _2670)) + _3444.w;
                            _3457 = !((fma(_2672, _3425.z, fma(_2671, _3425.y, _3425.x * _2670)) + _3425.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3352.x - _2670;
                                float _3485 = _3352.y - _2671;
                                float _3486 = _3352.z - _2672;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3353 * _3353));
                                float _4668 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3502 = sqrt(_3487) * _3368.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_907, _910, _913))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_2672, _3395.z, fma(_2671, _3395.y, _3395.x * _2670)) + _3395.w) / _3456;
                                float _3516 = (fma(_2672, _3410.z, fma(_2671, _3410.y, _3410.x * _2670)) + _3410.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4684 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _982;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2964;
                                float _3546 = _3492 - _2965;
                                float _3547 = _3493 - _2966;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_907, _910, _913), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4695 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3559 = dot(vec3(_907, _910, _913), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4706 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_907, _910, _913), vec3(_3491, _3492, _3493))) + _3568;
                                float _4717 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4728 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3522 * _3368.y;
                                frontier_phi_83_pred_1 = _3522 * _3368.x;
                                frontier_phi_83_pred_2 = _3596 * _3380.z;
                                frontier_phi_83_pred_3 = _3596 * _3380.y;
                                frontier_phi_83_pred_4 = _3596 * _3380.x;
                                frontier_phi_83_pred_5 = _3522 * _3368.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_83_pred;
                            _3603 = frontier_phi_83_pred_1;
                            _3602 = frontier_phi_83_pred_2;
                            _3601 = frontier_phi_83_pred_3;
                            _3600 = frontier_phi_83_pred_4;
                            _3605 = frontier_phi_83_pred_5;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            if (_3327 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3327;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3312;
                        frontier_phi_77_pred_1 = _3311;
                        frontier_phi_77_pred_2 = _3310;
                        frontier_phi_77_pred_3 = _3309;
                        frontier_phi_77_pred_4 = _3308;
                        frontier_phi_77_pred_5 = _3307;
                    }
                    _2949 = frontier_phi_77_pred;
                    _2947 = frontier_phi_77_pred_1;
                    _2945 = frontier_phi_77_pred_2;
                    _2943 = frontier_phi_77_pred_3;
                    _2941 = frontier_phi_77_pred_4;
                    _2939 = frontier_phi_77_pred_5;
                    uint _3105 = _3104 + 1u;
                    if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3098 = _2939;
                        _3099 = _2941;
                        _3100 = _2943;
                        _3101 = _2945;
                        _3102 = _2947;
                        _3103 = _2949;
                        _3104 = _3105;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2943;
                frontier_phi_58_59_ladder_1 = _2949;
                frontier_phi_58_59_ladder_2 = _2947;
                frontier_phi_58_59_ladder_3 = _2945;
                frontier_phi_58_59_ladder_4 = _2941;
                frontier_phi_58_59_ladder_5 = _2939;
            }
            else
            {
                frontier_phi_58_59_ladder = _2821;
                frontier_phi_58_59_ladder_1 = _2827;
                frontier_phi_58_59_ladder_2 = _2825;
                frontier_phi_58_59_ladder_3 = _2823;
                frontier_phi_58_59_ladder_4 = _2819;
                frontier_phi_58_59_ladder_5 = _2817;
            }
            _2938 = frontier_phi_58_59_ladder_5;
            _2940 = frontier_phi_58_59_ladder_4;
            _2942 = frontier_phi_58_59_ladder;
            _2944 = frontier_phi_58_59_ladder_3;
            _2946 = frontier_phi_58_59_ladder_2;
            _2948 = frontier_phi_58_59_ladder_1;
        }
        float _2953 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
        _2729 = (_2953 * _2944) + _2165;
        _2731 = (_2953 * _2946) + _2167;
        _2733 = (_2953 * _2948) + _2169;
        _2735 = ((_2938 * _950) * _2953) + _2510;
        _2737 = ((_2940 * _952) * _2953) + _2512;
        _2739 = ((_2942 * _953) * _2953) + _2514;
    }
    else
    {
        _2729 = _2165;
        _2731 = _2167;
        _2733 = _2169;
        _2735 = _2510;
        _2737 = _2512;
        _2739 = _2514;
    }
    float _4744 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4755 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4766 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2756 = ((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2729 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _966))) + ((_2735 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2757 = ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2731 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _966))) + ((_2737 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2758 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2733 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _966))) + ((_2739 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _2759 = _272 + 6u;
    float _2767 = _888 / cbSceneParam._m0[86u].x;
    float _2768 = _889 / cbSceneParam._m0[86u].y;
    vec4 _2782 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2784 = _2782.x;
    float _2785 = _2782.y;
    float _2786 = _2782.z;
    float _2787 = _2782.w;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2843 = _2842 / _810;
        float _2854 = _2843 * _861;
        float _2855 = _862 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2858 = _2843 * _863;
        float _2860 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2861 = _2860 + cbSceneParam._m0[79u].w;
        float _2862 = cbSceneParam._m0[79u].w - _2855;
        float _2868 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2858 * _2858));
        float _2871 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2868;
        float _2876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3055;
        if (abs((_2856 - _2860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3055 = ((((_2861 > 0.0) ? exp2(_2876 * _2861) : (2.0 - exp2(_2878 * _2861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2871;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : max(_2861, _2862));
            float _3001 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : min(_2861, _2862));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3055 = ((abs(_2868 / _2856) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2876 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2876 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2878 * _3010) - exp2(_2878 * _3011)) * _2999))) + (_2871 * cbSceneParam._m0[80u].z);
        }
        vec4 _3057 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, 1.0), 0.0);
        float _3066 = exp2((_3055 * (-1.44269502162933349609375)) * (1.0 - _3057.w));
        float _3067 = log2(_3066);
        float _3083 = log2(_2787);
        _2880 = (exp2(_3083 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].x)) * _3057.x) / cbSceneParam._m0[78u].x)) + _2784;
        _2882 = (exp2(_3083 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].y)) * _3057.y) / cbSceneParam._m0[78u].y)) + _2785;
        _2884 = (exp2(_3083 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].z)) * _3057.z) / cbSceneParam._m0[78u].z)) + _2786;
        _2886 = _3066 * _2787;
    }
    else
    {
        _2880 = _2784;
        _2882 = _2785;
        _2884 = _2786;
        _2886 = _2787;
    }
    bool _3093;
    vec4 _2896;
    vec4 _2918;
    float _2920;
    float _2924;
    float _2925;
    float _2926;
    float _2927;
    bool _2937;
    for (;;)
    {
        _2896 = cbMatDynParam._m0[0u];
        float _2898 = roundEven(_2896.y);
        bool _2899 = _2898 == 3.0;
        float _2900 = log2(_2886);
        float _2907 = exp2(_2900 * cbSceneParam._m0[78u].x) * _2756;
        float _2908 = exp2(_2900 * cbSceneParam._m0[78u].y) * _2757;
        float _2909 = exp2(_2900 * cbSceneParam._m0[78u].z) * _2758;
        float _2916 = _877 + (-0.5);
        _2918 = cbMtdParam._m0[1u];
        _2920 = _2918.y * _2916;
        float _2923 = (_2898 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2924 = _2923 * (_2899 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2880)));
        _2925 = _2923 * (_2899 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2882)));
        _2926 = _2923 * (_2899 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2884)));
        _2927 = _2916 * 0.999000012874603271484375;
        _2937 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2937)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2927) < 0.5)
            {
                _3093 = true;
                break;
            }
        }
        uint _3034 = _926 + uint(_2896.w);
        if ((cbInstanceData._m0[_3034].w < 1.0) && ((cbInstanceData._m0[_3034].w + _2927) < 0.5))
        {
            _3093 = true;
            break;
        }
        if ((_2920 + 1.0) < _2918.x)
        {
            _3093 = true;
            break;
        }
        _3093 = false;
        break;
    }
    float _3298;
    if (_3093)
    {
        discard_state = true;
        _3298 = 0.0;
    }
    else
    {
        _3298 = cbInstanceData._m0[_2759].w;
    }
    SV_Target.x = _2924;
    SV_Target.y = _2925;
    SV_Target.z = _2926;
    SV_Target.w = _3298;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2759].w;
    discard_exit();
}


