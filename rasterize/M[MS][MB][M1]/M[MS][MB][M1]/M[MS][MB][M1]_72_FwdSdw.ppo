#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1286;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3898 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3909 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3920 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3931 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _435 = (_428 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _436 = (_428 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _437 = (_428 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _447;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _428) + _515;
    float _527 = ((((_494.x - _513) * _428) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _428) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3942 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)))) + (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)))) + (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _583 = _581.x;
    float _584 = 1.0 - _583;
    float _610 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_583 - _584) * cbMtdParam._m0[24u].w) + _584) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3953 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _619 = ((((cbMtdParam._m0[10u].x - _454) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _611) + _454;
    float _620 = ((((cbMtdParam._m0[10u].y - _455) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _611) + _455;
    float _621 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _456)) * _611) + _456;
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _649 = _647.x;
    float _667 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _649) * _428) + _649;
    float _671 = ((_633.x - _667) * cbMtdParam._m0[19u].z) + _667;
    float _673 = _671 - (_671 * _611);
    float _678 = (((_469.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _682 = ((_556.z - _678) * cbMtdParam._m0[19u].w) + _678;
    float _686 = ((cbMtdParam._m0[23u].y - _682) * _611) + _682;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3964 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _729 = (_611 * (((cbMtdParam._m0[22u].z * _568) - _568) + _711)) + _568;
    float _730 = (_611 * (((cbMtdParam._m0[22u].z * _569) - _569) + _712)) + _569;
    float _731 = (_611 * (sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _534)) + _534;
    float _733 = cbMtdParam._m0[22u].x + _556.w;
    float _736 = fma(_731, _245 * NORMAL.x, fma(_730, _252 * TANGENT.x, (_238 * _230) * _729));
    float _739 = fma(_731, _245 * NORMAL.y, fma(_730, _252 * TANGENT.y, (_238 * _231) * _729));
    float _742 = fma(_731, _245 * NORMAL.z, fma(_730, _252 * TANGENT.z, (_238 * _232) * _729));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3975 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _750 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3997 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4008 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4019 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4030 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _755 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _769 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _819 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _809);
    float _820 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _809);
    float _821 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _809);
    float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
    float _826 = _819 * _825;
    float _827 = _820 * _825;
    float _828 = _821 * _825;
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _853 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _856 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _859 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _873 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _879 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_873].x;
    float _880 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_873].y;
    float _881 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_873].z;
    float _4041 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _885 = 1.0 - _755;
    float _886 = _882 * _885;
    float _887 = _883 * _885;
    float _888 = _884 * _885;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _755;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _755;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _755;
    float _896 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    vec4 _908 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _912 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _908.x;
    float _913 = dot(vec3(_747, _748, _749), vec3(_826, _827, _828));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _747) - _826;
    float _921 = (_916 * _748) - _827;
    float _922 = (_916 * _749) - _828;
    float _926 = abs(dot(vec3(_826, _827, _828), vec3(_747, _748, _749)));
    float _4074 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_750);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _947 = (1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _928;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1010 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1014 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1018 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1043 = _976 + _747;
        float _1044 = _980 + _748;
        float _1045 = _984 + _749;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1010;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1014;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1018;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1010 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1014 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1018 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_747, _748, _749), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4122 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_747, _748, _749), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4155 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_747, _748, _749), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4188 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1329 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1333 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1356 = _976 + _747;
        float _1357 = _980 + _748;
        float _1358 = _984 + _749;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_747, _748, _749), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4251 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_747, _748, _749), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4284 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_747, _748, _749), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4317 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1286;
        _1595 = _1286;
        _1596 = _1286;
        _1597 = _1286;
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1300)) + _1300;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _920 * 0.5;
    float _1663 = _921 * 0.5;
    float _1664 = _922 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1794 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1797 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1825 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1794 > 0.0)
        {
            _1998 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2293;
        if (_1797 > 0.0)
        {
            _2293 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2293 = frontier_phi_35_30_ladder;
        }
        float _2295 = isnan(_1998) ? _1825 : (isnan(_1825) ? _1998 : min(_1825, _1998));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1791) + _1780;
        float _2301 = (_2296 * _1794) + _1784;
        float _2302 = (_2296 * _1797) + _1788;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_13_35_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_13_35_ladder_2;
        _1815 = frontier_phi_13_35_ladder_1;
        _1817 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1731);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1891 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1894 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2003;
        if (_1888 > 0.0)
        {
            _2003 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2320;
        if (_1891 > 0.0)
        {
            _2320 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2320 = frontier_phi_37_32_ladder;
        }
        float _2658;
        if (_1894 > 0.0)
        {
            _2658 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2658 = frontier_phi_47_44_ladder;
        }
        float _2660 = isnan(_2320) ? _2003 : (isnan(_2003) ? _2320 : min(_2003, _2320));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1888) + _1877;
        float _2666 = (_2661 * _1891) + _1881;
        float _2667 = (_2661 * _1894) + _1885;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_22_47_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_22_47_ladder_2;
        _1915 = frontier_phi_22_47_ladder_1;
        _1917 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1822);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_947 * _896) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1913 - _1813)) + _1813);
    float _1932 = (((_947 * _898) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1915 - _1815)) + _1815);
    float _1934 = (((_947 * _899) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1917 - _1817)) + _1817);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1990 = _1977 / _1989;
    float _1991 = _1981 / _1989;
    float _1992 = _1985 / _1989;
    float _2139;
    float _2140;
    float _2141;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2019 = ((uint(_1992 > cbSceneParam._m0[59u].y) + uint(_1992 > cbSceneParam._m0[59u].x)) + uint(_1992 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2020 = _2019 + 43u;
        uint _2028 = _2019 + 44u;
        uint _2036 = _2019 + 45u;
        uint _2044 = _2019 + 46u;
        float _2055 = fma(_1989, cbSceneParam._m0[_2020].w, fma(_1985, cbSceneParam._m0[_2020].z, fma(_1981, cbSceneParam._m0[_2020].y, _1977 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1989, cbSceneParam._m0[_2028].w, fma(_1985, cbSceneParam._m0[_2028].z, fma(_1981, cbSceneParam._m0[_2028].y, _1977 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1989, cbSceneParam._m0[_2044].w, fma(_1985, cbSceneParam._m0[_2044].z, fma(_1981, cbSceneParam._m0[_2044].y, _1977 * cbSceneParam._m0[_2044].x)));
        float _2072 = cbSceneParam._m0[33u].z * _2067;
        float _2074 = cbSceneParam._m0[33u].w * _2067;
        float _2077 = fma(_1989, cbSceneParam._m0[_2036].w, fma(_1985, cbSceneParam._m0[_2036].z, fma(_1981, cbSceneParam._m0[_2036].y, _1977 * cbSceneParam._m0[_2036].x))) / _2067;
        float _2125 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2132 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2055) / _2067, (_2074 + _2059) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2055) / _2067, (_2059 - _2072) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2072) / _2067, (_2059 - _2074) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2074) / _2067, (_2072 + _2059) / _2067), _2077), 0.0)).x), vec4(0.25)));
        _2139 = 1.0 - (_2132 * cbSceneParam._m0[34u].x);
        _2140 = 1.0 - (_2132 * cbSceneParam._m0[34u].y);
        _2141 = 1.0 - (_2132 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2139 = 1.0;
        _2140 = 1.0;
        _2141 = 1.0;
    }
    float _2205;
    float _2207;
    float _2209;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2193 = fma(_1989, cbSceneParam._m0[63u].w, fma(_1985, cbSceneParam._m0[63u].z, fma(_1981, cbSceneParam._m0[63u].y, _1977 * cbSceneParam._m0[63u].x)));
        float _2194 = fma(_1989, cbSceneParam._m0[60u].w, fma(_1985, cbSceneParam._m0[60u].z, fma(_1981, cbSceneParam._m0[60u].y, _1977 * cbSceneParam._m0[60u].x))) / _2193;
        float _2195 = fma(_1989, cbSceneParam._m0[61u].w, fma(_1985, cbSceneParam._m0[61u].z, fma(_1981, cbSceneParam._m0[61u].y, _1977 * cbSceneParam._m0[61u].x))) / _2193;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2194 >= cbSceneParam._m0[64u].x) && (_2195 >= cbSceneParam._m0[64u].y)) && (_2194 <= cbSceneParam._m0[64u].z)) && (_2195 <= cbSceneParam._m0[64u].w))
        {
            float _2333 = fma(_1989, cbSceneParam._m0[62u].w, fma(_1985, cbSceneParam._m0[62u].z, fma(_1981, cbSceneParam._m0[62u].y, _1977 * cbSceneParam._m0[62u].x))) / _2193;
            float _2337 = isnan(cbSceneParam._m0[41u].w) ? _2333 : (isnan(_2333) ? cbSceneParam._m0[41u].w : max(_2333, cbSceneParam._m0[41u].w));
            float _2380 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
            float _2387 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2194, cbSceneParam._m0[33u].w + _2195), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2194, _2195 - cbSceneParam._m0[33u].z), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].z, _2195 - cbSceneParam._m0[33u].w), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2195), _2337), 0.0)).x), vec4(0.25)));
            float _2391 = 1.0 - (_2387 * cbSceneParam._m0[34u].x);
            float _2392 = 1.0 - (_2387 * cbSceneParam._m0[34u].y);
            float _2393 = 1.0 - (_2387 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_34_33_ladder_1 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_34_33_ladder_2 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
        }
        else
        {
            frontier_phi_34_33_ladder = _2141;
            frontier_phi_34_33_ladder_1 = _2140;
            frontier_phi_34_33_ladder_2 = _2139;
        }
        _2205 = frontier_phi_34_33_ladder_2;
        _2207 = frontier_phi_34_33_ladder_1;
        _2209 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2205 = _2139;
        _2207 = _2140;
        _2209 = _2141;
    }
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _912 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_747, _748, _749));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_747, _748, _749));
    float _4495 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4506 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2205) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2207) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2209) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2292)
    {
        _2394 = _2284;
        _2396 = _2285;
        _2398 = _2286;
    }
    else
    {
        uint _2402 = _2216 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4517 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2421 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2284;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2285;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2286;
    }
    bool _2401 = _2290.y == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2401)
    {
        _2456 = _2394;
        _2458 = _2396;
        _2460 = _2398;
    }
    else
    {
        uint _2629 = _2216 + 7u;
        float _2645 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2646 = _2645 * _2645;
        float _4533 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2647 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2648 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2456 = (((cbLight._m0[_2629].x * 0.3183098733425140380859375) * _2647) * _2648) + _2394;
        _2458 = (((cbLight._m0[_2629].y * 0.3183098733425140380859375) * _2647) * _2648) + _2396;
        _2460 = (((cbLight._m0[_2629].z * 0.3183098733425140380859375) * _2647) * _2648) + _2398;
    }
    uint _2463 = _2216 + 8u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _750) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2216].x + _826;
    float _2479 = cbLight._m0[_2216].y + _827;
    float _2480 = cbLight._m0[_2216].z + _828;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2216].xyz));
    float _4549 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2492 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2493 = dot(vec3(_747, _748, _749), vec3(_2485, _2486, _2487));
    float _4571 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2485, _2486, _2487));
    float _4582 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2477 * _2477;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2514 = 0.959999978542327880859375 - _893;
    float _2516 = 0.959999978542327880859375 - _894;
    float _2517 = 0.959999978542327880859375 - _895;
    float _2524 = 1.0 - _2477;
    float _2535 = (0.5 / (((_2492 * ((_2491 * _2524) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2524) + _2477) * _2491))) * _2491;
    float _4593 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2537 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    uint _2551 = _2216 + 9u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _750) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2256].x + _826;
    float _2565 = cbLight._m0[_2256].y + _827;
    float _2566 = cbLight._m0[_2256].z + _828;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2256].xyz));
    float _4604 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2578 = dot(vec3(_747, _748, _749), vec3(_2571, _2572, _2573));
    float _4615 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2571, _2572, _2573));
    float _4626 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2563 * _2563;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2604 = 1.0 - _2563;
    float _2614 = (0.5 / (((_2492 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2604) + _2563) * _2577))) * _2577;
    float _4637 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    float _2626 = (((((_2597 * _2514) + _896) * cbLight._m0[_2551].x) * _2616) * _2239) + ((((cbLight._m0[_2463].x * _2205) * ((_2513 * _2514) + _896)) * _2537) * _2252);
    float _2627 = (((((_2597 * _2516) + _898) * cbLight._m0[_2551].y) * _2616) * _2239) + ((((cbLight._m0[_2463].y * _2207) * ((_2513 * _2516) + _898)) * _2537) * _2252);
    float _2628 = (((((_2597 * _2517) + _899) * cbLight._m0[_2551].z) * _2616) * _2239) + ((((cbLight._m0[_2463].z * _2209) * ((_2513 * _2517) + _899)) * _2537) * _2252);
    float _2684;
    float _2686;
    float _2688;
    if (_2292)
    {
        _2684 = _2626;
        _2686 = _2627;
        _2688 = _2628;
    }
    else
    {
        uint _2690 = _2216 + 2u;
        uint _2694 = _2216 + 10u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _750) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _826;
        float _2711 = cbLight._m0[_2690].y + _827;
        float _2712 = cbLight._m0[_2690].z + _828;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2690].xyz));
        float _4648 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2724 = dot(vec3(_747, _748, _749), vec3(_2717, _2718, _2719));
        float _4659 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4670 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2750 = 1.0 - _2709;
        float _2760 = (0.5 / (((_2492 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2750) + _2709) * _2723))) * _2723;
        float _4681 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2684 = (((((_2743 * _2514) + _896) * cbLight._m0[_2694].x) * _2762) * _2763) + _2626;
        _2686 = (((((_2743 * _2516) + _898) * cbLight._m0[_2694].y) * _2762) * _2763) + _2627;
        _2688 = (((((_2743 * _2517) + _899) * cbLight._m0[_2694].z) * _2762) * _2763) + _2628;
    }
    float _2794;
    float _2796;
    float _2798;
    if (_2401)
    {
        _2794 = _2684;
        _2796 = _2686;
        _2798 = _2688;
    }
    else
    {
        uint _2805 = _2216 + 3u;
        uint _2809 = _2216 + 11u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _750) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _826;
        float _2826 = cbLight._m0[_2805].y + _827;
        float _2827 = cbLight._m0[_2805].z + _828;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2805].xyz));
        float _4697 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2839 = dot(vec3(_747, _748, _749), vec3(_2832, _2833, _2834));
        float _4708 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4719 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2492 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2865) + _2824) * _2838))) * _2838;
        float _4730 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2794 = (((((_2858 * _2514) + _896) * cbLight._m0[_2809].x) * _2877) * _2878) + _2684;
        _2796 = (((((_2858 * _2516) + _898) * cbLight._m0[_2809].y) * _2877) * _2878) + _2686;
        _2798 = (((((_2858 * _2517) + _899) * cbLight._m0[_2809].z) * _2877) * _2878) + _2688;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2214.y == 0u)
    {
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.x;
        uint _2911 = uint((float(_2899.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2900))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2900)));
        float _2921 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2922 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        uint _2925 = uint(isnan(14.0) ? _2922 : (isnan(_2922) ? 14.0 : min(_2922, 14.0)));
        uvec4 _2930 = texelFetch(g_lightClusterGridBuffer, int(((_2925 << 2u) + (_2911 << 6u)) >> 2u));
        uint _2931 = _2930.x;
        uint _2932 = _2899.z;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((((1u << ((_2932 >> 4u) & 15u)) + 4294967295u) & _2931) == 0u) || ((_2932 & 240u) == 0u))
        {
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
        }
        else
        {
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3172)
                {
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3171;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3162 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _1990;
                        float _3347 = _3306.y - _1991;
                        float _3348 = _3306.z - _1992;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_853, _856, _859), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4756 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _1990;
                        float _3382 = (-0.0) - _1991;
                        float _3383 = (-0.0) - _1992;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3397 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _928;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_853, _856, _859), vec3(_3388, _3389, _3390));
                        float _4772 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3422 = dot(vec3(_853, _856, _859), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4783 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3366 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3356) + _3431;
                        float _4794 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4805 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3429 * _3429) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3215 = (_3377 * _3325.x) + _3283;
                        _3216 = (_3377 * _3325.y) + _3284;
                        _3217 = (_3377 * _3325.z) + _3285;
                        _3212 = (_3457 * _3342.x) + _3280;
                        _3213 = (_3457 * _3342.y) + _3281;
                        _3214 = (_3457 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3216;
                    frontier_phi_66_pred_2 = _3215;
                    frontier_phi_66_pred_3 = _3214;
                    frontier_phi_66_pred_4 = _3213;
                    frontier_phi_66_pred_5 = _3212;
                }
                _3022 = frontier_phi_66_pred;
                _3020 = frontier_phi_66_pred_1;
                _3018 = frontier_phi_66_pred_2;
                _3016 = frontier_phi_66_pred_3;
                _3014 = frontier_phi_66_pred_4;
                _3012 = frontier_phi_66_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3012;
                    _3157 = _3014;
                    _3158 = _3016;
                    _3159 = _3018;
                    _3160 = _3020;
                    _3161 = _3022;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
        }
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.z;
        uint _3028 = (_3026 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3028) & _2931) == 0u)
        {
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
            _3130 = _3017;
            _3132 = _3019;
            _3134 = _3021;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _3150 = _3149 * _1990;
            float _3151 = _3149 * _1991;
            float _3152 = _3149 * _1992;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3028 < ((_3026 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3263 = _3011;
                float _3264 = _3013;
                float _3265 = _3015;
                float _3266 = _3017;
                float _3267 = _3019;
                float _3268 = _3021;
                uint _3269 = _3028;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3279)
                    {
                        frontier_phi_72_pred = _3268;
                        frontier_phi_72_pred_1 = _3267;
                        frontier_phi_72_pred_2 = _3266;
                        frontier_phi_72_pred_3 = _3265;
                        frontier_phi_72_pred_4 = _3264;
                        frontier_phi_72_pred_5 = _3263;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        uint _3481 = _3278;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3492 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3492 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3492 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_1992, _3599.z, fma(_1991, _3599.y, _3599.x * _1990)) + _3599.w;
                            _3612 = !((fma(_1992, _3580.z, fma(_1991, _3580.y, _3580.x * _1990)) + _3580.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3507.x - _1990;
                                float _3640 = _3507.y - _1991;
                                float _3641 = _3507.z - _1992;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3508 * _3508));
                                float _4816 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3657 = sqrt(_3642) * _3523.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_853, _856, _859))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_1992, _3550.z, fma(_1991, _3550.y, _3550.x * _1990)) + _3550.w) / _3611;
                                float _3671 = (fma(_1992, _3565.z, fma(_1991, _3565.y, _3565.x * _1990)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4832 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _928;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3150;
                                float _3701 = _3647 - _3151;
                                float _3702 = _3648 - _3152;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_853, _856, _859), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4843 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3714 = dot(vec3(_853, _856, _859), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4854 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_853, _856, _859), vec3(_3646, _3647, _3648))) + _3723;
                                float _4865 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4876 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3677 * _3523.y;
                                frontier_phi_78_pred_1 = _3677 * _3523.x;
                                frontier_phi_78_pred_2 = _3751 * _3535.z;
                                frontier_phi_78_pred_3 = _3751 * _3535.y;
                                frontier_phi_78_pred_4 = _3751 * _3535.x;
                                frontier_phi_78_pred_5 = _3677 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_78_pred;
                            _3758 = frontier_phi_78_pred_1;
                            _3757 = frontier_phi_78_pred_2;
                            _3756 = frontier_phi_78_pred_3;
                            _3755 = frontier_phi_78_pred_4;
                            _3760 = frontier_phi_78_pred_5;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    _3135 = frontier_phi_72_pred;
                    _3133 = frontier_phi_72_pred_1;
                    _3131 = frontier_phi_72_pred_2;
                    _3129 = frontier_phi_72_pred_3;
                    _3127 = frontier_phi_72_pred_4;
                    _3125 = frontier_phi_72_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3125;
                        _3264 = _3127;
                        _3265 = _3129;
                        _3266 = _3131;
                        _3267 = _3133;
                        _3268 = _3135;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3135;
                frontier_phi_60_61_ladder_1 = _3133;
                frontier_phi_60_61_ladder_2 = _3129;
                frontier_phi_60_61_ladder_3 = _3127;
                frontier_phi_60_61_ladder_4 = _3125;
                frontier_phi_60_61_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3019;
                frontier_phi_60_61_ladder_2 = _3015;
                frontier_phi_60_61_ladder_3 = _3013;
                frontier_phi_60_61_ladder_4 = _3011;
                frontier_phi_60_61_ladder_5 = _3017;
            }
            _3124 = frontier_phi_60_61_ladder_4;
            _3126 = frontier_phi_60_61_ladder_3;
            _3128 = frontier_phi_60_61_ladder_2;
            _3130 = frontier_phi_60_61_ladder_5;
            _3132 = frontier_phi_60_61_ladder_1;
            _3134 = frontier_phi_60_61_ladder;
        }
        float _3139 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2944 = (_3139 * _3130) + _2456;
        _2946 = (_3139 * _3132) + _2458;
        _2948 = (_3139 * _3134) + _2460;
        _2950 = ((_3124 * _896) * _3139) + _2794;
        _2952 = ((_3126 * _898) * _3139) + _2796;
        _2954 = ((_3128 * _899) * _3139) + _2798;
    }
    else
    {
        _2944 = _2456;
        _2946 = _2458;
        _2948 = _2460;
        _2950 = _2794;
        _2952 = _2796;
        _2954 = _2798;
    }
    float _4892 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4903 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4914 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    uint _2974 = _277 + 6u;
    float _2982 = _834 / cbSceneParam._m0[86u].x;
    float _2983 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _769 : (isnan(_769) ? cbSceneParam._m0[77u].w : min(_769, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_769 > cbSceneParam._m0[78u].w)
    {
        float _3036 = isnan(_769) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _769 : min(cbSceneParam._m0[80u].w, _769));
        float _3037 = _3036 / _769;
        float _3048 = _3037 * _819;
        float _3049 = _820 * _3037;
        float _3050 = (-0.0) - _3049;
        float _3052 = _3037 * _821;
        float _3054 = (cbSceneParam._m0[77u].w * _3050) / _3036;
        float _3055 = _3054 + cbSceneParam._m0[79u].w;
        float _3056 = cbSceneParam._m0[79u].w - _3049;
        float _3062 = sqrt(((_3048 * _3048) + (_3049 * _3049)) + (_3052 * _3052));
        float _3065 = (1.0 - (cbSceneParam._m0[77u].w / _3036)) * _3062;
        float _3070 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3072 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3050 - _3054) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3055 > 0.0) ? exp2(_3070 * _3055) : (2.0 - exp2(_3072 * _3055))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3065;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : max(_3055, _3056));
            float _3187 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : min(_3055, _3056));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3225 = ((abs(_3062 / _3050) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3070 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3070 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3072 * _3196) - exp2(_3072 * _3197)) * _3185))) + (_3065 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_3002);
        _3074 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3076 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3078 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3080 = _3236 * _3002;
    }
    else
    {
        _3074 = _2999;
        _3076 = _3000;
        _3078 = _3001;
        _3080 = _3002;
    }
    float _3092 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3093 = _3092 == 3.0;
    float _3094 = log2(_3080);
    float _3101 = exp2(_3094 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2944 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _912))) + ((_2950 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3102 = exp2(_3094 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2946 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _912))) + ((_2952 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3103 = exp2(_3094 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2948 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _912))) + ((_2954 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3112 = (_3092 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3112 * (_3093 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.y = _3112 * (_3093 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.z = _3112 * (_3093 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3078)));
    SV_Target.w = cbInstanceData._m0[_2974].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2974].w;
}


