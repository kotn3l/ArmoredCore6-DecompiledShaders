#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1337;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3686 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _396) + _490;
    float _502 = ((((_469.x - _488) * _396) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _396) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3697 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _549 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _552 = ((isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : min(_549, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _561 = (_552 - ((((((_542 - _543) * cbMtdParam._m0[24u].z) + _543) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _552))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3718 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _569 = (_562 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _570 = (_562 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _571 = (_562 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _613 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3729 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _622 = ((((cbMtdParam._m0[10u].x - _569) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _614) + _569;
    float _623 = ((((cbMtdParam._m0[10u].y - _570) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _614) + _570;
    float _624 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _571)) * _614) + _571;
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _652 = _650.x;
    float _670 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _652) * _396) + _652;
    float _674 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _670) * cbMtdParam._m0[19u].z) + _670;
    float _676 = _674 - (_674 * _562);
    float _678 = _676 - (_676 * _614);
    float _683 = (((_444.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    vec4 _697 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _704 = (_697.x * 2.0) + (-1.0);
    float _705 = (_697.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_704, _705), vec2(_704, _705));
    float _3740 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _714 = (_562 * (_697.z - _683)) + _683;
    float _717 = ((cbMtdParam._m0[23u].y - _714) * _614) + _714;
    vec4 _736 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3751 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _754 = _502 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_444.x * 2.0) + (-1.0)));
    float _755 = _503 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_444.y * 2.0) + (-1.0)));
    float _767 = (((_704 - _754) + (cbMtdParam._m0[21u].x * _754)) * _562) + _754;
    float _768 = (((_705 - _755) + (cbMtdParam._m0[21u].x * _755)) * _562) + _755;
    float _769 = (_562 * (sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) - _509)) + _509;
    float _780 = (((_742 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _614) + _767;
    float _781 = (((_743 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _614) + _768;
    float _782 = ((sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) - _769) * _614) + _769;
    float _784 = cbMtdParam._m0[22u].x + _522.w;
    float _787 = fma(_782, _246 * NORMAL.x, fma(_781, _253 * TANGENT.x, (_239 * _231) * _780));
    float _790 = fma(_782, _246 * NORMAL.y, fma(_781, _253 * TANGENT.y, (_239 * _232) * _780));
    float _793 = fma(_782, _246 * NORMAL.z, fma(_781, _253 * TANGENT.z, (_239 * _233) * _780));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3762 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _801 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3784 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3795 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3806 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3817 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _806 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _907 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _910 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _924 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3828 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _936 = 1.0 - _806;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _806;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _806;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _806;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _963 = ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_798, _799, _800), vec3(_877, _878, _879));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _798) - _877;
    float _972 = (_967 * _799) - _878;
    float _973 = (_967 * _800) - _879;
    float _977 = abs(dot(vec3(_877, _878, _879), vec3(_798, _799, _800)));
    float _3861 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_801);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _998 = (1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _999 = _992 * _979;
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1065 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1069 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1094 = _1027 + _798;
        float _1095 = _1031 + _799;
        float _1096 = _1035 + _800;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_798, _799, _800), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3909 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_798, _799, _800), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3942 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_798, _799, _800), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3975 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1380 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1384 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1407 = _1027 + _798;
        float _1408 = _1031 + _799;
        float _1409 = _1035 + _800;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_798, _799, _800), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4038 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_798, _799, _800), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4071 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_798, _799, _800), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4104 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1337;
        _1646 = _1337;
        _1647 = _1337;
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1349)) + _1349;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1350)) + _1350;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1351)) + _1351;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _971 * 0.5;
    float _1714 = _972 * 0.5;
    float _1715 = _973 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1843 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1846 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1874 = frontier_phi_14_12_ladder;
        }
        float _2097;
        if (_1843 > 0.0)
        {
            _2097 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2097 = frontier_phi_23_19_ladder;
        }
        float _2354;
        if (_1846 > 0.0)
        {
            _2354 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2354 = frontier_phi_35_30_ladder;
        }
        float _2356 = isnan(_2097) ? _1874 : (isnan(_1874) ? _2097 : min(_1874, _2097));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1840) + _1829;
        float _2362 = (_2357 * _1843) + _1833;
        float _2363 = (_2357 * _1846) + _1837;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_13_35_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_13_35_ladder_2;
        _1864 = frontier_phi_13_35_ladder_1;
        _1866 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1938 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1941 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2102;
        if (_1935 > 0.0)
        {
            _2102 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2102 = frontier_phi_25_21_ladder;
        }
        float _2381;
        if (_1938 > 0.0)
        {
            _2381 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2381 = frontier_phi_37_32_ladder;
        }
        float _2594;
        if (_1941 > 0.0)
        {
            _2594 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2594 = frontier_phi_46_43_ladder;
        }
        float _2596 = isnan(_2381) ? _2102 : (isnan(_2102) ? _2381 : min(_2102, _2381));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1935) + _1924;
        float _2602 = (_2597 * _1938) + _1928;
        float _2603 = (_2597 * _1941) + _1932;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_22_46_ladder = _2802.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2802.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2802.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_46_ladder_2;
        _1962 = frontier_phi_22_46_ladder_1;
        _1964 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1871);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_998 * _947) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1979 = (((_998 * _949) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1981 = (((_998 * _950) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1964 - _1866)) + _1866);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    vec4 _1998 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_885, _886));
    float _2000 = _1998.w;
    float _2012 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2000);
    float _2013 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2000);
    float _2014 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2000);
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _963 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2056 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2060 = _2020 | 1u;
    float _2071 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_798, _799, _800));
    float _2074 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_798, _799, _800));
    float _4240 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _4251 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2081 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2088 = ((cbLight._m0[_2037].x * _2043) * _2081) + (((cbLight._m0[_2047].x * _2012) * _2056) * _2079);
    float _2089 = ((_2043 * cbLight._m0[_2037].y) * _2081) + (((cbLight._m0[_2047].y * _2013) * _2056) * _2079);
    float _2090 = ((_2043 * cbLight._m0[_2037].z) * _2081) + (((cbLight._m0[_2047].z * _2014) * _2056) * _2079);
    uvec4 _2094 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2096 = _2094.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2096)
    {
        _2107 = _2088;
        _2109 = _2089;
        _2111 = _2090;
    }
    else
    {
        uint _2115 = _2020 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4262 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2134 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _2088;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _2089;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _2090;
    }
    bool _2114 = _2094.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2114)
    {
        _2152 = _2107;
        _2154 = _2109;
        _2156 = _2111;
    }
    else
    {
        uint _2325 = _2020 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4278 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2344 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2152 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2107;
        _2154 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2109;
        _2156 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2111;
    }
    uint _2159 = _2020 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _801) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2020].x + _877;
    float _2175 = cbLight._m0[_2020].y + _878;
    float _2176 = cbLight._m0[_2020].z + _879;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2020].xyz));
    float _4294 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2188 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2189 = dot(vec3(_798, _799, _800), vec3(_2181, _2182, _2183));
    float _4316 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2181, _2182, _2183));
    float _4327 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _944;
    float _2212 = 0.959999978542327880859375 - _945;
    float _2213 = 0.959999978542327880859375 - _946;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4338 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2247 = _2020 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _801) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2060].x + _877;
    float _2261 = cbLight._m0[_2060].y + _878;
    float _2262 = cbLight._m0[_2060].z + _879;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2060].xyz));
    float _4349 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2274 = dot(vec3(_798, _799, _800), vec3(_2267, _2268, _2269));
    float _4360 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2267, _2268, _2269));
    float _4371 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2188 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2300) + _2259) * _2273))) * _2273;
    float _4382 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2210) + _947) * cbLight._m0[_2247].x) * _2312) * _2043) + ((((cbLight._m0[_2159].x * _2012) * ((_2209 * _2210) + _947)) * _2233) * _2056);
    float _2323 = (((((_2293 * _2212) + _949) * cbLight._m0[_2247].y) * _2312) * _2043) + ((((cbLight._m0[_2159].y * _2013) * ((_2209 * _2212) + _949)) * _2233) * _2056);
    float _2324 = (((((_2293 * _2213) + _950) * cbLight._m0[_2247].z) * _2312) * _2043) + ((((cbLight._m0[_2159].z * _2014) * ((_2209 * _2213) + _950)) * _2233) * _2056);
    float _2386;
    float _2388;
    float _2390;
    if (_2096)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2020 + 2u;
        uint _2396 = _2020 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _801) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _877;
        float _2413 = cbLight._m0[_2392].y + _878;
        float _2414 = cbLight._m0[_2392].z + _879;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2392].xyz));
        float _4393 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2426 = dot(vec3(_798, _799, _800), vec3(_2419, _2420, _2421));
        float _4404 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4415 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2188 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2452) + _2411) * _2425))) * _2425;
        float _4426 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2386 = (((((_2445 * _2210) + _947) * cbLight._m0[_2396].x) * _2464) * _2465) + _2322;
        _2388 = (((((_2445 * _2212) + _949) * cbLight._m0[_2396].y) * _2464) * _2465) + _2323;
        _2390 = (((((_2445 * _2213) + _950) * cbLight._m0[_2396].z) * _2464) * _2465) + _2324;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2114)
    {
        _2500 = _2386;
        _2502 = _2388;
        _2504 = _2390;
    }
    else
    {
        uint _2511 = _2020 + 3u;
        uint _2515 = _2020 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _801) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _877;
        float _2532 = cbLight._m0[_2511].y + _878;
        float _2533 = cbLight._m0[_2511].z + _879;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2511].xyz));
        float _4442 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2545 = dot(vec3(_798, _799, _800), vec3(_2538, _2539, _2540));
        float _4453 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4464 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2188 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2571) + _2530) * _2544))) * _2544;
        float _4475 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2500 = (((((_2564 * _2210) + _947) * cbLight._m0[_2515].x) * _2583) * _2584) + _2386;
        _2502 = (((((_2564 * _2212) + _949) * cbLight._m0[_2515].y) * _2583) * _2584) + _2388;
        _2504 = (((((_2564 * _2213) + _950) * cbLight._m0[_2515].z) * _2583) * _2584) + _2390;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_2018.y == 0u)
    {
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2659;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2659;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2659;
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2675)));
        float _2696 = (log2(_2662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
        }
        else
        {
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2968)
                {
                    frontier_phi_61_pred = _2952;
                    frontier_phi_61_pred_1 = _2957;
                    frontier_phi_61_pred_2 = _2956;
                    frontier_phi_61_pred_3 = _2955;
                    frontier_phi_61_pred_4 = _2954;
                    frontier_phi_61_pred_5 = _2953;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2967;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2958 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _2660;
                        float _3143 = _3102.y - _2661;
                        float _3144 = _3102.z - _2662;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_904, _907, _910), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4501 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _2660;
                        float _3178 = (-0.0) - _2661;
                        float _3179 = (-0.0) - _2662;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3194 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _979;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_904, _907, _910), vec3(_3184, _3185, _3186));
                        float _4517 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3219 = dot(vec3(_904, _907, _910), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4528 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3162 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3152) + _3228;
                        float _4539 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4550 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3226 * _3226) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3011 = (_3173 * _3121.x) + _3079;
                        _3012 = (_3173 * _3121.y) + _3080;
                        _3013 = (_3173 * _3121.z) + _3081;
                        _3008 = (_3254 * _3138.x) + _3076;
                        _3009 = (_3254 * _3138.y) + _3077;
                        _3010 = (_3254 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_61_pred = _3008;
                    frontier_phi_61_pred_1 = _3013;
                    frontier_phi_61_pred_2 = _3012;
                    frontier_phi_61_pred_3 = _3011;
                    frontier_phi_61_pred_4 = _3010;
                    frontier_phi_61_pred_5 = _3009;
                }
                _2808 = frontier_phi_61_pred;
                _2818 = frontier_phi_61_pred_1;
                _2816 = frontier_phi_61_pred_2;
                _2814 = frontier_phi_61_pred_3;
                _2812 = frontier_phi_61_pred_4;
                _2810 = frontier_phi_61_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2808;
                    _2953 = _2810;
                    _2954 = _2812;
                    _2955 = _2814;
                    _2956 = _2816;
                    _2957 = _2818;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
        }
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.z;
        uint _2824 = (_2822 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2824) & _2706) == 0u)
        {
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
            _2926 = _2813;
            _2928 = _2815;
            _2930 = _2817;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
            float _2946 = _2945 * _2660;
            float _2947 = _2945 * _2661;
            float _2948 = _2945 * _2662;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2824 < ((_2822 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3059 = _2807;
                float _3060 = _2809;
                float _3061 = _2811;
                float _3062 = _2813;
                float _3063 = _2815;
                float _3064 = _2817;
                uint _3065 = _2824;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3075)
                    {
                        frontier_phi_67_pred = _3062;
                        frontier_phi_67_pred_1 = _3063;
                        frontier_phi_67_pred_2 = _3064;
                        frontier_phi_67_pred_3 = _3061;
                        frontier_phi_67_pred_4 = _3060;
                        frontier_phi_67_pred_5 = _3059;
                    }
                    else
                    {
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        uint _3278 = _3074;
                        uint _3279;
                        vec4 _3304;
                        float _3305;
                        vec4 _3320;
                        vec3 _3332;
                        vec4 _3347;
                        vec4 _3362;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3289 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3278));
                            _3279 = (_3278 + 4294967295u) & _3278;
                            uint _3291 = _3289 * 40u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3305 = _3304.w;
                            uint _3307 = (_3289 * 40u) + 4u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3289 * 40u) + 8u;
                            _3332 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x));
                            uint _3334 = (_3289 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3289 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3289 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3289 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2662, _3396.z, fma(_2661, _3396.y, _3396.x * _2660)) + _3396.w;
                            _3409 = !((fma(_2662, _3377.z, fma(_2661, _3377.y, _3377.x * _2660)) + _3377.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3304.x - _2660;
                                float _3437 = _3304.y - _2661;
                                float _3438 = _3304.z - _2662;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3305 * _3305));
                                float _4561 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3454 = sqrt(_3439) * _3320.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_904, _907, _910))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2662, _3347.z, fma(_2661, _3347.y, _3347.x * _2660)) + _3347.w) / _3408;
                                float _3468 = (fma(_2662, _3362.z, fma(_2661, _3362.y, _3362.x * _2660)) + _3362.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4577 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _979;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3499 = _3445 - _2948;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_904, _907, _910), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4588 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3511 = dot(vec3(_904, _907, _910), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4599 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_904, _907, _910), vec3(_3443, _3444, _3445))) + _3520;
                                float _4610 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4621 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3548 * _3332.x;
                                frontier_phi_73_pred_1 = _3548 * _3332.y;
                                frontier_phi_73_pred_2 = _3474 * _3320.z;
                                frontier_phi_73_pred_3 = _3474 * _3320.y;
                                frontier_phi_73_pred_4 = _3474 * _3320.x;
                                frontier_phi_73_pred_5 = _3548 * _3332.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3552 = frontier_phi_73_pred;
                            _3553 = frontier_phi_73_pred_1;
                            _3557 = frontier_phi_73_pred_2;
                            _3556 = frontier_phi_73_pred_3;
                            _3555 = frontier_phi_73_pred_4;
                            _3554 = frontier_phi_73_pred_5;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            if (_3279 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3279;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3262;
                        frontier_phi_67_pred_1 = _3263;
                        frontier_phi_67_pred_2 = _3264;
                        frontier_phi_67_pred_3 = _3261;
                        frontier_phi_67_pred_4 = _3260;
                        frontier_phi_67_pred_5 = _3259;
                    }
                    _2927 = frontier_phi_67_pred;
                    _2929 = frontier_phi_67_pred_1;
                    _2931 = frontier_phi_67_pred_2;
                    _2925 = frontier_phi_67_pred_3;
                    _2923 = frontier_phi_67_pred_4;
                    _2921 = frontier_phi_67_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2921;
                        _3060 = _2923;
                        _3061 = _2925;
                        _3062 = _2927;
                        _3063 = _2929;
                        _3064 = _2931;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2929;
                frontier_phi_55_56_ladder_1 = _2931;
                frontier_phi_55_56_ladder_2 = _2927;
                frontier_phi_55_56_ladder_3 = _2925;
                frontier_phi_55_56_ladder_4 = _2923;
                frontier_phi_55_56_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_55_56_ladder = _2815;
                frontier_phi_55_56_ladder_1 = _2817;
                frontier_phi_55_56_ladder_2 = _2813;
                frontier_phi_55_56_ladder_3 = _2811;
                frontier_phi_55_56_ladder_4 = _2809;
                frontier_phi_55_56_ladder_5 = _2807;
            }
            _2920 = frontier_phi_55_56_ladder_5;
            _2922 = frontier_phi_55_56_ladder_4;
            _2924 = frontier_phi_55_56_ladder_3;
            _2926 = frontier_phi_55_56_ladder_2;
            _2928 = frontier_phi_55_56_ladder;
            _2930 = frontier_phi_55_56_ladder_1;
        }
        float _2935 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2719 = (_2935 * _2926) + _2152;
        _2721 = (_2935 * _2928) + _2154;
        _2723 = (_2935 * _2930) + _2156;
        _2725 = ((_2920 * _947) * _2935) + _2500;
        _2727 = ((_2922 * _949) * _2935) + _2502;
        _2729 = ((_2924 * _950) * _2935) + _2504;
    }
    else
    {
        _2719 = _2152;
        _2721 = _2154;
        _2723 = _2156;
        _2725 = _2500;
        _2727 = _2502;
        _2729 = _2504;
    }
    float _4637 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4648 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4659 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    uint _2749 = _259 + 6u;
    float _2757 = _885 / cbSceneParam._m0[86u].x;
    float _2758 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _2832 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _2833 = _2832 / _820;
        float _2844 = _2833 * _870;
        float _2845 = _871 * _2833;
        float _2846 = (-0.0) - _2845;
        float _2848 = _2833 * _872;
        float _2850 = (cbSceneParam._m0[77u].w * _2846) / _2832;
        float _2851 = _2850 + cbSceneParam._m0[79u].w;
        float _2852 = cbSceneParam._m0[79u].w - _2845;
        float _2858 = sqrt(((_2844 * _2844) + (_2845 * _2845)) + (_2848 * _2848));
        float _2861 = (1.0 - (cbSceneParam._m0[77u].w / _2832)) * _2858;
        float _2866 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2868 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2846 - _2850) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2851 > 0.0) ? exp2(_2866 * _2851) : (2.0 - exp2(_2868 * _2851))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2861;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : max(_2851, _2852));
            float _2983 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : min(_2851, _2852));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3021 = ((abs(_2858 / _2846) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2866 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2866 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2868 * _2992) - exp2(_2868 * _2993)) * _2981))) + (_2861 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2777);
        _2870 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2872 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2874 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2876 = _3032 * _2777;
    }
    else
    {
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
        _2876 = _2777;
    }
    float _2888 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2889 = _2888 == 3.0;
    float _2890 = log2(_2876);
    float _2897 = exp2(_2890 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2719 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _963))) + ((_2725 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2890 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2721 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _963))) + ((_2727 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2899 = exp2(_2890 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2723 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _963))) + ((_2729 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2908 = (_2888 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2908 * (_2889 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.y = _2908 * (_2889 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.z = _2908 * (_2889 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.w = cbInstanceData._m0[_2749].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2749].w;
}


