#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1268;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3880 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3891 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3902 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3913 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _435 = (_428 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _436 = (_428 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _437 = (_428 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _447;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _428) + _515;
    float _527 = ((((_494.x - _513) * _428) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _428) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3924 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))));
    float _539 = _527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)));
    float _540 = _528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _596 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_569 - _570) * cbMtdParam._m0[24u].w) + _570) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3935 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _605 = ((((cbMtdParam._m0[10u].x - _454) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _597) + _454;
    float _606 = ((((cbMtdParam._m0[10u].y - _455) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _597) + _455;
    float _607 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _456)) * _597) + _456;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _635 = _633.x;
    float _653 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _635) * _428) + _635;
    float _657 = ((_619.x - _653) * cbMtdParam._m0[19u].z) + _653;
    float _659 = _657 - (_657 * _597);
    float _664 = (((_469.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _668 = ((cbMtdParam._m0[23u].y - _664) * _597) + _664;
    vec4 _687 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _693 = (_687.x * 2.0) + (-1.0);
    float _694 = (_687.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3946 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _711 = (_597 * (((cbMtdParam._m0[22u].z * _539) - _539) + _693)) + _539;
    float _712 = (_597 * (((cbMtdParam._m0[22u].z * _540) - _540) + _694)) + _540;
    float _713 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) - _534)) + _534;
    float _715 = cbMtdParam._m0[22u].x + _553.w;
    float _718 = fma(_713, _245 * NORMAL.x, fma(_712, _252 * TANGENT.x, (_238 * _230) * _711));
    float _721 = fma(_713, _245 * NORMAL.y, fma(_712, _252 * TANGENT.y, (_238 * _231) * _711));
    float _724 = fma(_713, _245 * NORMAL.z, fma(_712, _252 * TANGENT.z, (_238 * _232) * _711));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3957 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _732 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3979 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3990 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4001 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4012 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _737 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _751 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _801 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _791);
    float _802 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _791);
    float _803 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _791);
    float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
    float _808 = _801 * _807;
    float _809 = _802 * _807;
    float _810 = _803 * _807;
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _835 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _838 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _841 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _855 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_855].z;
    float _4023 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _867 = 1.0 - _737;
    float _868 = _864 * _867;
    float _869 = _865 * _867;
    float _870 = _866 * _867;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _737;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _737;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _737;
    float _878 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _894 = ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * TEXCOORD_5.w) * _890.x;
    float _895 = dot(vec3(_729, _730, _731), vec3(_808, _809, _810));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _729) - _808;
    float _903 = (_898 * _730) - _809;
    float _904 = (_898 * _731) - _810;
    float _908 = abs(dot(vec3(_808, _809, _810), vec3(_729, _730, _731)));
    float _4056 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_732);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _929 = (1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _930 = _923 * _910;
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_966, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958));
        float _996 = fma(_966, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958));
        float _1000 = fma(_966, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958));
        float _1025 = _958 + _729;
        float _1026 = _962 + _730;
        float _1027 = _966 + _731;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _992;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _996;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1000;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_729, _730, _731), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4104 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_729, _730, _731), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4137 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_729, _730, _731), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4170 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1307 = fma(_966, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958));
        float _1311 = fma(_966, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958));
        float _1315 = fma(_966, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958));
        float _1338 = _958 + _729;
        float _1339 = _962 + _730;
        float _1340 = _966 + _731;
        float _1350 = fma(_1340, cbModelParam._m0[30u].z, fma(_1339, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1338)) - _1307;
        float _1351 = fma(_1340, cbModelParam._m0[31u].z, fma(_1339, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1338)) - _1311;
        float _1352 = fma(_1340, cbModelParam._m0[32u].z, fma(_1339, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1338)) - _1315;
        float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
        float _1369 = ((_1356 * _1350) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1307 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1356 * _1351) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1311 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1356 * _1352) / cbModelParam._m0[35u].z) + ((((((_1315 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        float _1406 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1373.x + (-0.5));
        float _1408 = _1406 * (_1373.y + (-0.5));
        float _1409 = _1406 * (_1373.z + (-0.5));
        float _1416 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1380.x + (-0.5));
        float _1418 = _1416 * (_1380.y + (-0.5));
        float _1419 = _1416 * (_1380.z + (-0.5));
        float _1426 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1387.x + (-0.5));
        float _1428 = _1426 * (_1387.y + (-0.5));
        float _1429 = _1426 * (_1387.z + (-0.5));
        float _1436 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1394.x + (-0.5));
        float _1438 = _1436 * (_1394.y + (-0.5));
        float _1439 = _1436 * (_1394.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_729, _730, _731), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4233 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1470 + 1.0))) + _1475) * _1440;
        float _1485 = _1408 * 0.5;
        float _1486 = _1418 * 0.5;
        float _1487 = _1428 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_729, _730, _731), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4266 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1512 + 1.0))) + _1517) * _1441;
        float _1527 = _1409 * 0.5;
        float _1528 = _1419 * 0.5;
        float _1529 = _1429 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_729, _730, _731), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4299 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1554 + 1.0))) + _1559) * _1442;
        _1576 = _1409;
        _1577 = _1408;
        _1578 = _1407;
        _1579 = _1419;
        _1580 = _1418;
        _1581 = _1417;
        _1582 = _1429;
        _1583 = _1428;
        _1584 = _1427;
        _1585 = _1442;
        _1586 = _1441;
        _1587 = _1440;
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1268;
        _1577 = _1268;
        _1578 = _1268;
        _1579 = _1268;
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = _1268;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1280)) + _1280;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1281)) + _1281;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1282)) + _1282;
    float _1623 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1600));
    float _1644 = _902 * 0.5;
    float _1645 = _903 * 0.5;
    float _1646 = _904 * 0.5;
    float _1647 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1650 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1653 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1687;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1660 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1664 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1668 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1675 = dot(vec4(cbModelParam._m0[39u]), vec4(_1644, _1645, _1646, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1698;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1689 = dot(vec4(cbModelParam._m0[40u]), vec4(_1644, _1645, _1646, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1702 = (_1698 * cbModelParam._m0[1u].x) + (_1687 * (1.0 - cbModelParam._m0[1u].x));
    float _1712 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1712 : min(cbModelParam._m0[25u].z, _1712));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1762 = fma(_966, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958)) + cbModelParam._m0[13u].w;
        float _1766 = fma(_966, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958)) + cbModelParam._m0[14u].w;
        float _1770 = fma(_966, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958)) + cbModelParam._m0[15u].w;
        float _1773 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1776 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1779 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1807;
        if (_1773 > 0.0)
        {
            _1807 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1807 = frontier_phi_14_12_ladder;
        }
        float _1980;
        if (_1776 > 0.0)
        {
            _1980 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1980 = frontier_phi_23_19_ladder;
        }
        float _2275;
        if (_1779 > 0.0)
        {
            _2275 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2275 = frontier_phi_35_30_ladder;
        }
        float _2277 = isnan(_1980) ? _1807 : (isnan(_1807) ? _1980 : min(_1807, _1980));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1773) + _1762;
        float _2283 = (_2278 * _1776) + _1766;
        float _2284 = (_2278 * _1779) + _1770;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2285;
        float _2289 = _2285 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 > _2289) || ((_2283 < _2287) || ((_2282 < _2287) || (_2282 > _2289))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1713);
            frontier_phi_13_35_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1795 = frontier_phi_13_35_ladder_2;
        _1797 = frontier_phi_13_35_ladder_1;
        _1799 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1713);
        _1795 = _1783.x * cbModelParam._m0[1u].y;
        _1797 = _1783.y * cbModelParam._m0[1u].y;
        _1799 = _1783.z * cbModelParam._m0[1u].y;
    }
    float _1803 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1803 : min(cbModelParam._m0[25u].w, _1803));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_966, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_966, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_966, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1873 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1876 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _1985;
        if (_1870 > 0.0)
        {
            _1985 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1985 = frontier_phi_25_21_ladder;
        }
        float _2302;
        if (_1873 > 0.0)
        {
            _2302 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2302 = frontier_phi_37_32_ladder;
        }
        float _2640;
        if (_1876 > 0.0)
        {
            _2640 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2640 = frontier_phi_47_44_ladder;
        }
        float _2642 = isnan(_2302) ? _1985 : (isnan(_1985) ? _2302 : min(_1985, _2302));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _1870) + _1859;
        float _2648 = (_2643 * _1873) + _1863;
        float _2649 = (_2643 * _1876) + _1867;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1804);
            frontier_phi_22_47_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_22_47_ladder_2;
        _1897 = frontier_phi_22_47_ladder_1;
        _1899 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1804);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1912 = (((_929 * _878) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1914 = (((_929 * _880) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1916 = (((_929 * _881) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1899 - _1799)) + _1799);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    float _1959 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1972 = _1959 / _1971;
    float _1973 = _1963 / _1971;
    float _1974 = _1967 / _1971;
    float _2121;
    float _2122;
    float _2123;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2001 = ((uint(_1974 > cbSceneParam._m0[59u].y) + uint(_1974 > cbSceneParam._m0[59u].x)) + uint(_1974 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2002 = _2001 + 43u;
        uint _2010 = _2001 + 44u;
        uint _2018 = _2001 + 45u;
        uint _2026 = _2001 + 46u;
        float _2037 = fma(_1971, cbSceneParam._m0[_2002].w, fma(_1967, cbSceneParam._m0[_2002].z, fma(_1963, cbSceneParam._m0[_2002].y, _1959 * cbSceneParam._m0[_2002].x)));
        float _2041 = fma(_1971, cbSceneParam._m0[_2010].w, fma(_1967, cbSceneParam._m0[_2010].z, fma(_1963, cbSceneParam._m0[_2010].y, _1959 * cbSceneParam._m0[_2010].x)));
        float _2049 = fma(_1971, cbSceneParam._m0[_2026].w, fma(_1967, cbSceneParam._m0[_2026].z, fma(_1963, cbSceneParam._m0[_2026].y, _1959 * cbSceneParam._m0[_2026].x)));
        float _2054 = cbSceneParam._m0[33u].z * _2049;
        float _2056 = cbSceneParam._m0[33u].w * _2049;
        float _2059 = fma(_1971, cbSceneParam._m0[_2018].w, fma(_1967, cbSceneParam._m0[_2018].z, fma(_1963, cbSceneParam._m0[_2018].y, _1959 * cbSceneParam._m0[_2018].x))) / _2049;
        float _2107 = (cbSceneParam._m0[33u].x - sqrt(((_1973 * _1973) + (_1972 * _1972)) + (_1974 * _1974))) * cbSceneParam._m0[33u].y;
        float _4425 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2114 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 + _2037) / _2049, (_2056 + _2041) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2037) / _2049, (_2041 - _2054) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 - _2054) / _2049, (_2041 - _2056) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 - _2056) / _2049, (_2054 + _2041) / _2049), _2059), 0.0)).x), vec4(0.25)));
        _2121 = 1.0 - (_2114 * cbSceneParam._m0[34u].x);
        _2122 = 1.0 - (_2114 * cbSceneParam._m0[34u].y);
        _2123 = 1.0 - (_2114 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2121 = 1.0;
        _2122 = 1.0;
        _2123 = 1.0;
    }
    float _2187;
    float _2189;
    float _2191;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2175 = fma(_1971, cbSceneParam._m0[63u].w, fma(_1967, cbSceneParam._m0[63u].z, fma(_1963, cbSceneParam._m0[63u].y, _1959 * cbSceneParam._m0[63u].x)));
        float _2176 = fma(_1971, cbSceneParam._m0[60u].w, fma(_1967, cbSceneParam._m0[60u].z, fma(_1963, cbSceneParam._m0[60u].y, _1959 * cbSceneParam._m0[60u].x))) / _2175;
        float _2177 = fma(_1971, cbSceneParam._m0[61u].w, fma(_1967, cbSceneParam._m0[61u].z, fma(_1963, cbSceneParam._m0[61u].y, _1959 * cbSceneParam._m0[61u].x))) / _2175;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2176 >= cbSceneParam._m0[64u].x) && (_2177 >= cbSceneParam._m0[64u].y)) && (_2176 <= cbSceneParam._m0[64u].z)) && (_2177 <= cbSceneParam._m0[64u].w))
        {
            float _2315 = fma(_1971, cbSceneParam._m0[62u].w, fma(_1967, cbSceneParam._m0[62u].z, fma(_1963, cbSceneParam._m0[62u].y, _1959 * cbSceneParam._m0[62u].x))) / _2175;
            float _2319 = isnan(cbSceneParam._m0[41u].w) ? _2315 : (isnan(_2315) ? cbSceneParam._m0[41u].w : max(_2315, cbSceneParam._m0[41u].w));
            float _2362 = (cbSceneParam._m0[33u].x - sqrt(((_1973 * _1973) + (_1972 * _1972)) + (_1974 * _1974))) * cbSceneParam._m0[33u].y;
            float _4441 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
            float _2369 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2176, cbSceneParam._m0[33u].w + _2177), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2176, _2177 - cbSceneParam._m0[33u].z), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2176 - cbSceneParam._m0[33u].z, _2177 - cbSceneParam._m0[33u].w), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2176 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2177), _2319), 0.0)).x), vec4(0.25)));
            float _2373 = 1.0 - (_2369 * cbSceneParam._m0[34u].x);
            float _2374 = 1.0 - (_2369 * cbSceneParam._m0[34u].y);
            float _2375 = 1.0 - (_2369 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_34_33_ladder_1 = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
            frontier_phi_34_33_ladder_2 = isnan(_2373) ? _2121 : (isnan(_2121) ? _2373 : min(_2121, _2373));
        }
        else
        {
            frontier_phi_34_33_ladder = _2123;
            frontier_phi_34_33_ladder_1 = _2122;
            frontier_phi_34_33_ladder_2 = _2121;
        }
        _2187 = frontier_phi_34_33_ladder_2;
        _2189 = frontier_phi_34_33_ladder_1;
        _2191 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2187 = _2121;
        _2189 = _2122;
        _2191 = _2123;
    }
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _894 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2234 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2238 = _2198 | 1u;
    float _2249 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_729, _730, _731));
    float _2252 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_729, _730, _731));
    float _4477 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _4488 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2257 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2259 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2266 = ((cbLight._m0[_2215].x * _2221) * _2259) + (((cbLight._m0[_2225].x * _2187) * _2234) * _2257);
    float _2267 = ((_2221 * cbLight._m0[_2215].y) * _2259) + (((cbLight._m0[_2225].y * _2189) * _2234) * _2257);
    float _2268 = ((_2221 * cbLight._m0[_2215].z) * _2259) + (((cbLight._m0[_2225].z * _2191) * _2234) * _2257);
    uvec4 _2272 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2274 = _2272.x == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2274)
    {
        _2376 = _2266;
        _2378 = _2267;
        _2380 = _2268;
    }
    else
    {
        uint _2384 = _2198 + 6u;
        float _2400 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4499 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2403 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2376 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2266;
        _2378 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2267;
        _2380 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2268;
    }
    bool _2383 = _2272.y == 0u;
    float _2438;
    float _2440;
    float _2442;
    if (_2383)
    {
        _2438 = _2376;
        _2440 = _2378;
        _2442 = _2380;
    }
    else
    {
        uint _2611 = _2198 + 7u;
        float _2627 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4515 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2630 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2438 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2376;
        _2440 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2378;
        _2442 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2380;
    }
    uint _2445 = _2198 + 8u;
    float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _732) * 0.949999988079071044921875);
    float _2459 = _2458 * _2458;
    float _2460 = cbLight._m0[_2198].x + _808;
    float _2461 = cbLight._m0[_2198].y + _809;
    float _2462 = cbLight._m0[_2198].z + _810;
    float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
    float _2467 = _2466 * _2460;
    float _2468 = _2466 * _2461;
    float _2469 = _2466 * _2462;
    float _2470 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2198].xyz));
    float _4531 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2474 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2475 = dot(vec3(_729, _730, _731), vec3(_2467, _2468, _2469));
    float _4553 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2467, _2468, _2469));
    float _4564 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2459 * _2459;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2496 = 0.959999978542327880859375 - _875;
    float _2498 = 0.959999978542327880859375 - _876;
    float _2499 = 0.959999978542327880859375 - _877;
    float _2506 = 1.0 - _2459;
    float _2517 = (0.5 / (((_2474 * ((_2473 * _2506) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2506) + _2459) * _2473))) * _2473;
    float _4575 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    uint _2533 = _2198 + 9u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _732) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2238].x + _808;
    float _2547 = cbLight._m0[_2238].y + _809;
    float _2548 = cbLight._m0[_2238].z + _810;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2238].xyz));
    float _4586 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2560 = dot(vec3(_729, _730, _731), vec3(_2553, _2554, _2555));
    float _4597 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2553, _2554, _2555));
    float _4608 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2545 * _2545;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2586 = 1.0 - _2545;
    float _2596 = (0.5 / (((_2474 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2586) + _2545) * _2559))) * _2559;
    float _4619 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    float _2608 = (((((_2579 * _2496) + _878) * cbLight._m0[_2533].x) * _2598) * _2221) + ((((cbLight._m0[_2445].x * _2187) * ((_2495 * _2496) + _878)) * _2519) * _2234);
    float _2609 = (((((_2579 * _2498) + _880) * cbLight._m0[_2533].y) * _2598) * _2221) + ((((cbLight._m0[_2445].y * _2189) * ((_2495 * _2498) + _880)) * _2519) * _2234);
    float _2610 = (((((_2579 * _2499) + _881) * cbLight._m0[_2533].z) * _2598) * _2221) + ((((cbLight._m0[_2445].z * _2191) * ((_2495 * _2499) + _881)) * _2519) * _2234);
    float _2666;
    float _2668;
    float _2670;
    if (_2274)
    {
        _2666 = _2608;
        _2668 = _2609;
        _2670 = _2610;
    }
    else
    {
        uint _2672 = _2198 + 2u;
        uint _2676 = _2198 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _732) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _808;
        float _2693 = cbLight._m0[_2672].y + _809;
        float _2694 = cbLight._m0[_2672].z + _810;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2672].xyz));
        float _4630 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2706 = dot(vec3(_729, _730, _731), vec3(_2699, _2700, _2701));
        float _4641 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4652 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2474 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2732) + _2691) * _2705))) * _2705;
        float _4663 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2666 = (((((_2725 * _2496) + _878) * cbLight._m0[_2676].x) * _2744) * _2745) + _2608;
        _2668 = (((((_2725 * _2498) + _880) * cbLight._m0[_2676].y) * _2744) * _2745) + _2609;
        _2670 = (((((_2725 * _2499) + _881) * cbLight._m0[_2676].z) * _2744) * _2745) + _2610;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2383)
    {
        _2776 = _2666;
        _2778 = _2668;
        _2780 = _2670;
    }
    else
    {
        uint _2787 = _2198 + 3u;
        uint _2791 = _2198 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _732) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _808;
        float _2808 = cbLight._m0[_2787].y + _809;
        float _2809 = cbLight._m0[_2787].z + _810;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2787].xyz));
        float _4679 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2821 = dot(vec3(_729, _730, _731), vec3(_2814, _2815, _2816));
        float _4690 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4701 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2474 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2847) + _2806) * _2820))) * _2820;
        float _4712 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2776 = (((((_2840 * _2496) + _878) * cbLight._m0[_2791].x) * _2859) * _2860) + _2666;
        _2778 = (((((_2840 * _2498) + _880) * cbLight._m0[_2791].y) * _2859) * _2860) + _2668;
        _2780 = (((((_2840 * _2499) + _881) * cbLight._m0[_2791].z) * _2859) * _2860) + _2670;
    }
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_2196.y == 0u)
    {
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2882)));
        float _2903 = (log2(_1974 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
        }
        else
        {
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3154)
                {
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3142;
                    frontier_phi_66_pred_2 = _3141;
                    frontier_phi_66_pred_3 = _3140;
                    frontier_phi_66_pred_4 = _3139;
                    frontier_phi_66_pred_5 = _3138;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3153;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3144 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _1972;
                        float _3329 = _3288.y - _1973;
                        float _3330 = _3288.z - _1974;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_835, _838, _841), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4738 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _1972;
                        float _3364 = (-0.0) - _1973;
                        float _3365 = (-0.0) - _1974;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3379 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3380 = 1.0 - _910;
                        float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                        float _3388 = _3387 * _3387;
                        float _3389 = _3388 * _3388;
                        float _3390 = _3370 + _3335;
                        float _3391 = _3371 + _3336;
                        float _3392 = _3372 + _3337;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3400 = dot(vec3(_835, _838, _841), vec3(_3370, _3371, _3372));
                        float _4754 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3404 = dot(vec3(_835, _838, _841), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                        float _4765 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                        float _3412 = _3348 * _3388;
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3338) + _3413;
                        float _4776 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3418 = 1.0 - _3388;
                        float _3428 = (0.5 / (((_3417 * ((_3403 * _3418) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3388) * _3403))) * _3417;
                        float _4787 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3439 = (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3411 * _3411) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3197 = (_3359 * _3307.x) + _3265;
                        _3198 = (_3359 * _3307.y) + _3266;
                        _3199 = (_3359 * _3307.z) + _3267;
                        _3194 = (_3439 * _3324.x) + _3262;
                        _3195 = (_3439 * _3324.y) + _3263;
                        _3196 = (_3439 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3198;
                    frontier_phi_66_pred_2 = _3197;
                    frontier_phi_66_pred_3 = _3196;
                    frontier_phi_66_pred_4 = _3195;
                    frontier_phi_66_pred_5 = _3194;
                }
                _3004 = frontier_phi_66_pred;
                _3002 = frontier_phi_66_pred_1;
                _3000 = frontier_phi_66_pred_2;
                _2998 = frontier_phi_66_pred_3;
                _2996 = frontier_phi_66_pred_4;
                _2994 = frontier_phi_66_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2994;
                    _3139 = _2996;
                    _3140 = _2998;
                    _3141 = _3000;
                    _3142 = _3002;
                    _3143 = _3004;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
        }
        uvec4 _3007 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3008 = _3007.z;
        uint _3010 = (_3008 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3010) & _2913) == 0u)
        {
            _3106 = _2993;
            _3108 = _2995;
            _3110 = _2997;
            _3112 = _2999;
            _3114 = _3001;
            _3116 = _3003;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
            float _3132 = _3131 * _1972;
            float _3133 = _3131 * _1973;
            float _3134 = _3131 * _1974;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3010 < ((_3008 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3245 = _2993;
                float _3246 = _2995;
                float _3247 = _2997;
                float _3248 = _2999;
                float _3249 = _3001;
                float _3250 = _3003;
                uint _3251 = _3010;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3261)
                    {
                        frontier_phi_72_pred = _3250;
                        frontier_phi_72_pred_1 = _3249;
                        frontier_phi_72_pred_2 = _3248;
                        frontier_phi_72_pred_3 = _3247;
                        frontier_phi_72_pred_4 = _3246;
                        frontier_phi_72_pred_5 = _3245;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        uint _3463 = _3260;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3547;
                        float _3593;
                        bool _3594;
                        for (;;)
                        {
                            uint _3474 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3474 * 40u) + 20u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3474 * 40u) + 24u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3568 = (_3474 * 40u) + 28u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3593 = fma(_1974, _3581.z, fma(_1973, _3581.y, _3581.x * _1972)) + _3581.w;
                            _3594 = !((fma(_1974, _3562.z, fma(_1973, _3562.y, _3562.x * _1972)) + _3562.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3594)
                            {
                                float _3621 = _3489.x - _1972;
                                float _3622 = _3489.y - _1973;
                                float _3623 = _3489.z - _1974;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3490 * _3490));
                                float _4798 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3639 = sqrt(_3624) * _3505.w;
                                float _3641 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                                float _3642 = _3641 * _3641;
                                float _3645 = ((1.0 - _3642) * dot(vec3(_3628, _3629, _3630), vec3(_835, _838, _841))) + _3642;
                                float _3648 = _3639 * _3639;
                                float _3652 = (fma(_1974, _3532.z, fma(_1973, _3532.y, _3532.x * _1972)) + _3532.w) / _3593;
                                float _3653 = (fma(_1974, _3547.z, fma(_1973, _3547.y, _3547.x * _1972)) + _3547.w) / _3593;
                                float _3657 = 1.0 - dot(vec2(_3652, _3653), vec2(_3652, _3653));
                                float _4814 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3659 = _3658 * (((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3635) / ((_3648 * 0.699999988079071044921875) + 1.0));
                                float _3671 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                                float _3672 = 1.0 - _910;
                                float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                                float _3680 = _3679 * _3679;
                                float _3681 = _3680 * _3680;
                                float _3682 = _3628 - _3132;
                                float _3683 = _3629 - _3133;
                                float _3684 = _3630 - _3134;
                                float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                                float _3692 = dot(vec3(_835, _838, _841), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4825 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3696 = dot(vec3(_835, _838, _841), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                                float _4836 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                                float _3704 = _3641 * _3680;
                                float _3705 = _3704 * _3704;
                                float _3711 = ((1.0 - _3705) * dot(vec3(_835, _838, _841), vec3(_3628, _3629, _3630))) + _3705;
                                float _4847 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3713 = 1.0 - _3680;
                                float _3723 = (0.5 / (((_3712 * ((_3695 * _3713) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3680) * _3695))) * _3712;
                                float _4858 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3733 = (_3658 * _3635) * (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3703 * _3703) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3659 * _3505.y;
                                frontier_phi_78_pred_1 = _3659 * _3505.x;
                                frontier_phi_78_pred_2 = _3733 * _3517.z;
                                frontier_phi_78_pred_3 = _3733 * _3517.y;
                                frontier_phi_78_pred_4 = _3733 * _3517.x;
                                frontier_phi_78_pred_5 = _3659 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_78_pred;
                            _3740 = frontier_phi_78_pred_1;
                            _3739 = frontier_phi_78_pred_2;
                            _3738 = frontier_phi_78_pred_3;
                            _3737 = frontier_phi_78_pred_4;
                            _3742 = frontier_phi_78_pred_5;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3449;
                        frontier_phi_72_pred_1 = _3448;
                        frontier_phi_72_pred_2 = _3447;
                        frontier_phi_72_pred_3 = _3446;
                        frontier_phi_72_pred_4 = _3445;
                        frontier_phi_72_pred_5 = _3444;
                    }
                    _3117 = frontier_phi_72_pred;
                    _3115 = frontier_phi_72_pred_1;
                    _3113 = frontier_phi_72_pred_2;
                    _3111 = frontier_phi_72_pred_3;
                    _3109 = frontier_phi_72_pred_4;
                    _3107 = frontier_phi_72_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3107;
                        _3246 = _3109;
                        _3247 = _3111;
                        _3248 = _3113;
                        _3249 = _3115;
                        _3250 = _3117;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3117;
                frontier_phi_60_61_ladder_1 = _3115;
                frontier_phi_60_61_ladder_2 = _3111;
                frontier_phi_60_61_ladder_3 = _3109;
                frontier_phi_60_61_ladder_4 = _3107;
                frontier_phi_60_61_ladder_5 = _3113;
            }
            else
            {
                frontier_phi_60_61_ladder = _3003;
                frontier_phi_60_61_ladder_1 = _3001;
                frontier_phi_60_61_ladder_2 = _2997;
                frontier_phi_60_61_ladder_3 = _2995;
                frontier_phi_60_61_ladder_4 = _2993;
                frontier_phi_60_61_ladder_5 = _2999;
            }
            _3106 = frontier_phi_60_61_ladder_4;
            _3108 = frontier_phi_60_61_ladder_3;
            _3110 = frontier_phi_60_61_ladder_2;
            _3112 = frontier_phi_60_61_ladder_5;
            _3114 = frontier_phi_60_61_ladder_1;
            _3116 = frontier_phi_60_61_ladder;
        }
        float _3121 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2926 = (_3121 * _3112) + _2438;
        _2928 = (_3121 * _3114) + _2440;
        _2930 = (_3121 * _3116) + _2442;
        _2932 = ((_3106 * _878) * _3121) + _2776;
        _2934 = ((_3108 * _880) * _3121) + _2778;
        _2936 = ((_3110 * _881) * _3121) + _2780;
    }
    else
    {
        _2926 = _2438;
        _2928 = _2440;
        _2930 = _2442;
        _2932 = _2776;
        _2934 = _2778;
        _2936 = _2780;
    }
    float _4874 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4885 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4896 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    uint _2956 = _277 + 6u;
    float _2964 = _816 / cbSceneParam._m0[86u].x;
    float _2965 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2979 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, (log2((isnan(cbSceneParam._m0[77u].w) ? _751 : (isnan(_751) ? cbSceneParam._m0[77u].w : min(_751, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2981 = _2979.x;
    float _2982 = _2979.y;
    float _2983 = _2979.z;
    float _2984 = _2979.w;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    if (_751 > cbSceneParam._m0[78u].w)
    {
        float _3018 = isnan(_751) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _751 : min(cbSceneParam._m0[80u].w, _751));
        float _3019 = _3018 / _751;
        float _3030 = _3019 * _801;
        float _3031 = _802 * _3019;
        float _3032 = (-0.0) - _3031;
        float _3034 = _3019 * _803;
        float _3036 = (cbSceneParam._m0[77u].w * _3032) / _3018;
        float _3037 = _3036 + cbSceneParam._m0[79u].w;
        float _3038 = cbSceneParam._m0[79u].w - _3031;
        float _3044 = sqrt(((_3030 * _3030) + (_3031 * _3031)) + (_3034 * _3034));
        float _3047 = (1.0 - (cbSceneParam._m0[77u].w / _3018)) * _3044;
        float _3052 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3032 - _3036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3037 > 0.0) ? exp2(_3052 * _3037) : (2.0 - exp2(_3054 * _3037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3047;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : max(_3037, _3038));
            float _3169 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : min(_3037, _3038));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3207 = ((abs(_3044 / _3032) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3052 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3052 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3054 * _3178) - exp2(_3054 * _3179)) * _3167))) + (_3047 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2984);
        _3056 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2981;
        _3058 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2982;
        _3060 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2983;
        _3062 = _3218 * _2984;
    }
    else
    {
        _3056 = _2981;
        _3058 = _2982;
        _3060 = _2983;
        _3062 = _2984;
    }
    float _3074 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3075 = _3074 == 3.0;
    float _3076 = log2(_3062);
    float _3083 = exp2(_3076 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2926 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _894))) + ((_2932 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1702)) * cbPerFrame._m0[3u].x));
    float _3084 = exp2(_3076 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2928 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _894))) + ((_2934 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1702)) * cbPerFrame._m0[3u].x));
    float _3085 = exp2(_3076 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2930 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _894))) + ((_2936 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1702)) * cbPerFrame._m0[3u].x));
    float _3094 = (_3074 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3094 * (_3075 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.y = _3094 * (_3075 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.z = _3094 * (_3075 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.w = cbInstanceData._m0[_2956].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2956].w;
}


