#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1289;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3617 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3628 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _504 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _507 = ((isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : min(_504, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _516 = (_507 - ((((((_497 - _498) * cbMtdParam._m0[24u].z) + _498) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _507))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3649 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _524 = (_517 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _525 = (_517 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _526 = (_517 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _568 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_540 - _541) * cbMtdParam._m0[24u].w) + _541) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3660 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _577 = ((((cbMtdParam._m0[10u].x - _524) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _569) + _524;
    float _578 = ((((cbMtdParam._m0[10u].y - _525) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _569) + _525;
    float _579 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _526)) * _569) + _526;
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _607 = _605.x;
    float _625 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _607) * _386) + _607;
    float _629 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _625) * cbMtdParam._m0[19u].z) + _625;
    float _631 = _629 - (_629 * _517);
    float _633 = _631 - (_631 * _569);
    float _637 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3671 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _668 = (_517 * (_651.z - _637)) + _637;
    float _671 = ((cbMtdParam._m0[23u].y - _668) * _569) + _668;
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _696 = (_690.x * 2.0) + (-1.0);
    float _697 = (_690.y * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _3682 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _706 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _707 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _719 = (((_658 - _706) + (cbMtdParam._m0[21u].x * _706)) * _517) + _706;
    float _720 = (((_659 - _707) + (cbMtdParam._m0[21u].x * _707)) * _517) + _707;
    float _721 = (_517 * (sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) - _454)) + _454;
    float _732 = (((_696 - _719) + (_719 * cbMtdParam._m0[22u].z)) * _569) + _719;
    float _733 = (((_697 - _720) + (_720 * cbMtdParam._m0[22u].z)) * _569) + _720;
    float _734 = ((sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) - _721) * _569) + _721;
    float _736 = cbMtdParam._m0[22u].x + _470.w;
    float _739 = fma(_734, _236 * NORMAL.x, fma(_733, _243 * TANGENT.x, (_229 * _221) * _732));
    float _742 = fma(_734, _236 * NORMAL.y, fma(_733, _243 * TANGENT.y, (_229 * _222) * _732));
    float _745 = fma(_734, _236 * NORMAL.z, fma(_733, _243 * TANGENT.z, (_229 * _223) * _732));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _3693 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _753 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3715 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3726 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3737 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3748 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _758 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _822 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _812);
    float _823 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _812);
    float _824 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _812);
    float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
    float _829 = _822 * _828;
    float _830 = _823 * _828;
    float _831 = _824 * _828;
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _859 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _862 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _876 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3759 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _888 = 1.0 - _758;
    float _889 = _885 * _888;
    float _890 = _886 * _888;
    float _891 = _887 * _888;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _758;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _758;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _758;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _915 = ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_750, _751, _752), vec3(_829, _830, _831));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _750) - _829;
    float _924 = (_919 * _751) - _830;
    float _925 = (_919 * _752) - _831;
    float _929 = abs(dot(vec3(_829, _830, _831), vec3(_750, _751, _752)));
    float _3792 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_753);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _950 = (1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _951 = _944 * _931;
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1288;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1013 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1017 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1021 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1046 = _979 + _750;
        float _1047 = _983 + _751;
        float _1048 = _987 + _752;
        float _1058 = fma(_1048, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046)) - _1013;
        float _1059 = fma(_1048, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046)) - _1017;
        float _1060 = fma(_1048, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046)) - _1021;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1013 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1017 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[34u].z) + ((((((_1021 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1116 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1082.x + (-0.5));
        float _1118 = _1116 * (_1082.y + (-0.5));
        float _1119 = _1116 * (_1082.z + (-0.5));
        float _1126 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1089.x + (-0.5));
        float _1128 = _1126 * (_1089.y + (-0.5));
        float _1129 = _1126 * (_1089.z + (-0.5));
        float _1136 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1096.x + (-0.5));
        float _1138 = _1136 * (_1096.y + (-0.5));
        float _1139 = _1136 * (_1096.z + (-0.5));
        float _1146 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1103.x + (-0.5));
        float _1148 = _1146 * (_1103.y + (-0.5));
        float _1149 = _1146 * (_1103.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1170 = (dot(vec3(_750, _751, _752), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1180 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3840 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1182 + 1.0))) + _1187) * _1150;
        float _1197 = _1118 * 0.5;
        float _1198 = _1128 * 0.5;
        float _1199 = _1138 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_750, _751, _752), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3873 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1224 + 1.0))) + _1229) * _1151;
        float _1239 = _1119 * 0.5;
        float _1240 = _1129 * 0.5;
        float _1241 = _1139 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_750, _751, _752), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3906 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1266 + 1.0))) + _1271) * _1152;
        _1288 = _1119;
        _1290 = _1118;
        _1291 = _1117;
        _1292 = _1129;
        _1293 = _1128;
        _1294 = _1127;
        _1295 = _1139;
        _1296 = _1138;
        _1297 = _1137;
        _1298 = _1152;
        _1299 = _1151;
        _1300 = _1150;
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _1289;
        _1290 = _1289;
        _1291 = _1289;
        _1292 = _1289;
        _1293 = _1289;
        _1294 = _1289;
        _1295 = _1289;
        _1296 = _1289;
        _1297 = _1289;
        _1298 = _1289;
        _1299 = _1289;
        _1300 = _1289;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1332 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1336 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1359 = _979 + _750;
        float _1360 = _983 + _751;
        float _1361 = _987 + _752;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_750, _751, _752), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3969 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_750, _751, _752), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4002 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_750, _751, _752), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4035 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1289;
        _1598 = _1289;
        _1599 = _1289;
        _1600 = _1289;
        _1601 = _1289;
        _1602 = _1289;
        _1603 = _1289;
        _1604 = _1289;
        _1605 = _1289;
        _1606 = _1289;
        _1607 = _1289;
        _1608 = _1289;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1301)) + _1301;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1302)) + _1302;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1303)) + _1303;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _923 * 0.5;
    float _1666 = _924 * 0.5;
    float _1667 = _925 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1288, _1292, _1295, _1298));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1796 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1799 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1827 = frontier_phi_14_12_ladder;
        }
        float _2030;
        if (_1796 > 0.0)
        {
            _2030 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2030 = frontier_phi_23_19_ladder;
        }
        float _2284;
        if (_1799 > 0.0)
        {
            _2284 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2284 = frontier_phi_35_30_ladder;
        }
        float _2286 = isnan(_2030) ? _1827 : (isnan(_1827) ? _2030 : min(_1827, _2030));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1793) + _1782;
        float _2292 = (_2287 * _1796) + _1786;
        float _2293 = (_2287 * _1799) + _1790;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_13_35_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_13_35_ladder_2;
        _1817 = frontier_phi_13_35_ladder_1;
        _1819 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1734);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1892 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1895 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2035;
        if (_1889 > 0.0)
        {
            _2035 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2311;
        if (_1892 > 0.0)
        {
            _2311 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2311 = frontier_phi_37_32_ladder;
        }
        float _2524;
        if (_1895 > 0.0)
        {
            _2524 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2524 = frontier_phi_46_43_ladder;
        }
        float _2526 = isnan(_2311) ? _2035 : (isnan(_2035) ? _2311 : min(_2035, _2311));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1889) + _1878;
        float _2532 = (_2527 * _1892) + _1882;
        float _2533 = (_2527 * _1895) + _1886;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_22_46_ladder = _2732.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2732.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2732.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_22_46_ladder_2;
        _1916 = frontier_phi_22_46_ladder_1;
        _1918 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1824);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1931 = (((_950 * _899) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1933 = (((_950 * _901) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1935 = (((_950 * _902) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _915 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1989 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1993 = _1956 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_750, _751, _752));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_750, _751, _752));
    float _4171 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4182 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1973].x * _1979) * _2014) + ((cbLight._m0[_1983].x * _1989) * _2012);
    float _2022 = ((_1979 * cbLight._m0[_1973].y) * _2014) + ((_1989 * cbLight._m0[_1983].y) * _2012);
    float _2023 = ((_1979 * cbLight._m0[_1973].z) * _2014) + ((_1989 * cbLight._m0[_1983].z) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1956 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4193 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2067 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2255 = _1956 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4209 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2274 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2085 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2040;
        _2087 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2042;
        _2089 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2044;
    }
    uint _2092 = _1956 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _753) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1956].x + _829;
    float _2108 = cbLight._m0[_1956].y + _830;
    float _2109 = cbLight._m0[_1956].z + _831;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1956].xyz));
    float _4225 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2121 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2122 = dot(vec3(_750, _751, _752), vec3(_2114, _2115, _2116));
    float _4247 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2114, _2115, _2116));
    float _4258 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _896;
    float _2145 = 0.959999978542327880859375 - _897;
    float _2146 = 0.959999978542327880859375 - _898;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4269 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2177 = _1956 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _753) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1993].x + _829;
    float _2191 = cbLight._m0[_1993].y + _830;
    float _2192 = cbLight._m0[_1993].z + _831;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1993].xyz));
    float _4280 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2204 = dot(vec3(_750, _751, _752), vec3(_2197, _2198, _2199));
    float _4291 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2197, _2198, _2199));
    float _4302 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2230 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2121 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2230) + _2189) * _2203))) * _2203;
    float _4313 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2252 = (((((_2223 * _2143) + _899) * cbLight._m0[_2177].x) * _2242) * _1979) + (((((_2142 * _2143) + _899) * cbLight._m0[_2092].x) * _2166) * _1989);
    float _2253 = (((((_2223 * _2145) + _901) * cbLight._m0[_2177].y) * _2242) * _1979) + (((((_2142 * _2145) + _901) * cbLight._m0[_2092].y) * _2166) * _1989);
    float _2254 = (((((_2223 * _2146) + _902) * cbLight._m0[_2177].z) * _2242) * _1979) + (((((_2142 * _2146) + _902) * cbLight._m0[_2092].z) * _2166) * _1989);
    float _2316;
    float _2318;
    float _2320;
    if (_2029)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1956 + 2u;
        uint _2326 = _1956 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _753) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _829;
        float _2343 = cbLight._m0[_2322].y + _830;
        float _2344 = cbLight._m0[_2322].z + _831;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2322].xyz));
        float _4324 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2356 = dot(vec3(_750, _751, _752), vec3(_2349, _2350, _2351));
        float _4335 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4346 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2121 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2382) + _2341) * _2355))) * _2355;
        float _4357 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2316 = (((((_2375 * _2143) + _899) * cbLight._m0[_2326].x) * _2394) * _2395) + _2252;
        _2318 = (((((_2375 * _2145) + _901) * cbLight._m0[_2326].y) * _2394) * _2395) + _2253;
        _2320 = (((((_2375 * _2146) + _902) * cbLight._m0[_2326].z) * _2394) * _2395) + _2254;
    }
    float _2430;
    float _2432;
    float _2434;
    if (_2047)
    {
        _2430 = _2316;
        _2432 = _2318;
        _2434 = _2320;
    }
    else
    {
        uint _2441 = _1956 + 3u;
        uint _2445 = _1956 + 11u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _753) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _829;
        float _2462 = cbLight._m0[_2441].y + _830;
        float _2463 = cbLight._m0[_2441].z + _831;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2441].xyz));
        float _4373 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2475 = dot(vec3(_750, _751, _752), vec3(_2468, _2469, _2470));
        float _4384 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4395 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2121 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2501) + _2460) * _2474))) * _2474;
        float _4406 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2430 = (((((_2494 * _2143) + _899) * cbLight._m0[_2445].x) * _2513) * _2514) + _2316;
        _2432 = (((((_2494 * _2145) + _901) * cbLight._m0[_2445].y) * _2513) * _2514) + _2318;
        _2434 = (((((_2494 * _2146) + _902) * cbLight._m0[_2445].z) * _2513) * _2514) + _2320;
    }
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1954.y == 0u)
    {
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2589;
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2589;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2589;
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.x;
        uint _2616 = uint((float(_2604.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2605))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2605)));
        float _2626 = (log2(_2592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        uint _2630 = uint(isnan(14.0) ? _2627 : (isnan(_2627) ? 14.0 : min(_2627, 14.0)));
        uvec4 _2635 = texelFetch(g_lightClusterGridBuffer, int(((_2630 << 2u) + (_2616 << 6u)) >> 2u));
        uint _2636 = _2635.x;
        uint _2637 = _2604.z;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((((1u << ((_2637 >> 4u) & 15u)) + 4294967295u) & _2636) == 0u) || ((_2637 & 240u) == 0u))
        {
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
        }
        else
        {
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            uint _2888 = 0u;
            uint _2897;
            bool _2898;
            for (;;)
            {
                _2897 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                _2898 = _2897 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2898)
                {
                    frontier_phi_61_pred = _2882;
                    frontier_phi_61_pred_1 = _2887;
                    frontier_phi_61_pred_2 = _2886;
                    frontier_phi_61_pred_3 = _2885;
                    frontier_phi_61_pred_4 = _2884;
                    frontier_phi_61_pred_5 = _2883;
                }
                else
                {
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    uint _3012;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2897;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    for (;;)
                    {
                        uint _3016 = uint(findLSB(_3012)) + (_2888 << 5u);
                        uint _3013 = (_3012 + 4294967295u) & _3012;
                        uint _3018 = _3016 * 48u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3038 = (_3016 * 48u) + 4u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3057 = (_3016 * 48u) + 8u;
                        vec3 _3068 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x));
                        float _3072 = _3032.x - _2590;
                        float _3073 = _3032.y - _2591;
                        float _3074 = _3032.z - _2592;
                        float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                        float _3078 = inversesqrt(_3075);
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3082 = dot(vec3(_856, _859, _862), vec3(_3079, _3080, _3081));
                        float _3087 = 1.0 - (_3075 * _3032.w);
                        float _4432 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3089 = sqrt(_3075) * _3051.w;
                        float _3092 = 1.39999997615814208984375 / (_3089 + 1.39999997615814208984375);
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3082) + _3093;
                        float _3099 = _3089 * _3089;
                        float _3103 = ((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3088) / ((_3099 * 0.699999988079071044921875) + 1.0);
                        float _3107 = (-0.0) - _2590;
                        float _3108 = (-0.0) - _2591;
                        float _3109 = (-0.0) - _2592;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3124 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                        float _3125 = 1.0 - _931;
                        float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                        float _3133 = _3132 * _3132;
                        float _3134 = _3133 * _3133;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3145 = dot(vec3(_856, _859, _862), vec3(_3114, _3115, _3116));
                        float _4448 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3149 = dot(vec3(_856, _859, _862), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                        float _4459 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                        float _3157 = _3092 * _3133;
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3082) + _3158;
                        float _4470 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3163 = 1.0 - _3133;
                        float _3173 = (0.5 / (((_3162 * ((_3148 * _3163) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3162 * _3163) + _3133) * _3148))) * _3162;
                        float _4481 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3184 = (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3156 * _3156) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125))) * _3088;
                        _2941 = (_3103 * _3051.x) + _3009;
                        _2942 = (_3103 * _3051.y) + _3010;
                        _2943 = (_3103 * _3051.z) + _3011;
                        _2938 = (_3184 * _3068.x) + _3006;
                        _2939 = (_3184 * _3068.y) + _3007;
                        _2940 = (_3184 * _3068.z) + _3008;
                        if (_3013 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _3013;
                        }
                    }
                    frontier_phi_61_pred = _2938;
                    frontier_phi_61_pred_1 = _2943;
                    frontier_phi_61_pred_2 = _2942;
                    frontier_phi_61_pred_3 = _2941;
                    frontier_phi_61_pred_4 = _2940;
                    frontier_phi_61_pred_5 = _2939;
                }
                _2738 = frontier_phi_61_pred;
                _2748 = frontier_phi_61_pred_1;
                _2746 = frontier_phi_61_pred_2;
                _2744 = frontier_phi_61_pred_3;
                _2742 = frontier_phi_61_pred_4;
                _2740 = frontier_phi_61_pred_5;
                uint _2889 = _2888 + 1u;
                if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2882 = _2738;
                    _2883 = _2740;
                    _2884 = _2742;
                    _2885 = _2744;
                    _2886 = _2746;
                    _2887 = _2748;
                    _2888 = _2889;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
        }
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.z;
        uint _2754 = (_2752 >> 8u) & 15u;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((4294967295u << _2754) & _2636) == 0u)
        {
            _2850 = _2737;
            _2852 = _2739;
            _2854 = _2741;
            _2856 = _2743;
            _2858 = _2745;
            _2860 = _2747;
        }
        else
        {
            float _2875 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
            float _2876 = _2875 * _2590;
            float _2877 = _2875 * _2591;
            float _2878 = _2875 * _2592;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2754 < ((_2752 >> 12u) & 15u))
            {
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2989 = _2737;
                float _2990 = _2739;
                float _2991 = _2741;
                float _2992 = _2743;
                float _2993 = _2745;
                float _2994 = _2747;
                uint _2995 = _2754;
                uint _3004;
                bool _3005;
                for (;;)
                {
                    _3004 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2995 << 2u)) >> 2u)).x;
                    _3005 = _3004 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3005)
                    {
                        frontier_phi_67_pred = _2992;
                        frontier_phi_67_pred_1 = _2993;
                        frontier_phi_67_pred_2 = _2994;
                        frontier_phi_67_pred_3 = _2991;
                        frontier_phi_67_pred_4 = _2990;
                        frontier_phi_67_pred_5 = _2989;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3202 = _2989;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        uint _3208 = _3004;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3277;
                        vec4 _3293;
                        float _3339;
                        bool _3340;
                        for (;;)
                        {
                            uint _3219 = ((_2995 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3264 = (_3219 * 40u) + 16u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3219 * 40u) + 20u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3219 * 40u) + 24u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3314 = (_3219 * 40u) + 28u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3339 = fma(_2592, _3327.z, fma(_2591, _3327.y, _3327.x * _2590)) + _3327.w;
                            _3340 = !((fma(_2592, _3308.z, fma(_2591, _3308.y, _3308.x * _2590)) + _3308.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3340)
                            {
                                float _3367 = _3234.x - _2590;
                                float _3368 = _3234.y - _2591;
                                float _3369 = _3234.z - _2592;
                                float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                                float _3373 = inversesqrt(_3370);
                                float _3374 = _3373 * _3367;
                                float _3375 = _3373 * _3368;
                                float _3376 = _3373 * _3369;
                                float _3380 = 1.0 - (_3370 / (_3235 * _3235));
                                float _4492 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3385 = sqrt(_3370) * _3250.w;
                                float _3387 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                                float _3388 = _3387 * _3387;
                                float _3391 = ((1.0 - _3388) * dot(vec3(_3374, _3375, _3376), vec3(_856, _859, _862))) + _3388;
                                float _3394 = _3385 * _3385;
                                float _3398 = (fma(_2592, _3277.z, fma(_2591, _3277.y, _3277.x * _2590)) + _3277.w) / _3339;
                                float _3399 = (fma(_2592, _3293.z, fma(_2591, _3293.y, _3293.x * _2590)) + _3293.w) / _3339;
                                float _3403 = 1.0 - dot(vec2(_3398, _3399), vec2(_3398, _3399));
                                float _4508 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3405 = _3404 * (((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3381) / ((_3394 * 0.699999988079071044921875) + 1.0));
                                float _3417 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                                float _3418 = 1.0 - _931;
                                float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                                float _3426 = _3425 * _3425;
                                float _3427 = _3426 * _3426;
                                float _3428 = _3374 - _2876;
                                float _3429 = _3375 - _2877;
                                float _3430 = _3376 - _2878;
                                float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                                float _3438 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2876, (-0.0) - _2877, (-0.0) - _2878));
                                float _4519 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3442 = dot(vec3(_856, _859, _862), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                                float _4530 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                                float _3450 = _3387 * _3426;
                                float _3451 = _3450 * _3450;
                                float _3457 = ((1.0 - _3451) * dot(vec3(_856, _859, _862), vec3(_3374, _3375, _3376))) + _3451;
                                float _4541 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3459 = 1.0 - _3426;
                                float _3469 = (0.5 / (((_3458 * ((_3441 * _3459) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3426) * _3441))) * _3458;
                                float _4552 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3479 = (_3404 * _3381) * (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3449 * _3449) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3479 * _3262.x;
                                frontier_phi_73_pred_1 = _3479 * _3262.y;
                                frontier_phi_73_pred_2 = _3405 * _3250.z;
                                frontier_phi_73_pred_3 = _3405 * _3250.y;
                                frontier_phi_73_pred_4 = _3405 * _3250.x;
                                frontier_phi_73_pred_5 = _3479 * _3262.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_73_pred;
                            _3484 = frontier_phi_73_pred_1;
                            _3488 = frontier_phi_73_pred_2;
                            _3487 = frontier_phi_73_pred_3;
                            _3486 = frontier_phi_73_pred_4;
                            _3485 = frontier_phi_73_pred_5;
                            _3192 = _3486 + _3205;
                            _3193 = _3487 + _3206;
                            _3194 = _3488 + _3207;
                            _3189 = _3483 + _3202;
                            _3190 = _3484 + _3203;
                            _3191 = _3485 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3192;
                        frontier_phi_67_pred_1 = _3193;
                        frontier_phi_67_pred_2 = _3194;
                        frontier_phi_67_pred_3 = _3191;
                        frontier_phi_67_pred_4 = _3190;
                        frontier_phi_67_pred_5 = _3189;
                    }
                    _2857 = frontier_phi_67_pred;
                    _2859 = frontier_phi_67_pred_1;
                    _2861 = frontier_phi_67_pred_2;
                    _2855 = frontier_phi_67_pred_3;
                    _2853 = frontier_phi_67_pred_4;
                    _2851 = frontier_phi_67_pred_5;
                    uint _2996 = _2995 + 1u;
                    if (_2996 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2989 = _2851;
                        _2990 = _2853;
                        _2991 = _2855;
                        _2992 = _2857;
                        _2993 = _2859;
                        _2994 = _2861;
                        _2995 = _2996;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2859;
                frontier_phi_55_56_ladder_1 = _2861;
                frontier_phi_55_56_ladder_2 = _2857;
                frontier_phi_55_56_ladder_3 = _2855;
                frontier_phi_55_56_ladder_4 = _2853;
                frontier_phi_55_56_ladder_5 = _2851;
            }
            else
            {
                frontier_phi_55_56_ladder = _2745;
                frontier_phi_55_56_ladder_1 = _2747;
                frontier_phi_55_56_ladder_2 = _2743;
                frontier_phi_55_56_ladder_3 = _2741;
                frontier_phi_55_56_ladder_4 = _2739;
                frontier_phi_55_56_ladder_5 = _2737;
            }
            _2850 = frontier_phi_55_56_ladder_5;
            _2852 = frontier_phi_55_56_ladder_4;
            _2854 = frontier_phi_55_56_ladder_3;
            _2856 = frontier_phi_55_56_ladder_2;
            _2858 = frontier_phi_55_56_ladder;
            _2860 = frontier_phi_55_56_ladder_1;
        }
        float _2865 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2649 = (_2865 * _2856) + _2085;
        _2651 = (_2865 * _2858) + _2087;
        _2653 = (_2865 * _2860) + _2089;
        _2655 = ((_2850 * _899) * _2865) + _2430;
        _2657 = ((_2852 * _901) * _2865) + _2432;
        _2659 = ((_2854 * _902) * _2865) + _2434;
    }
    else
    {
        _2649 = _2085;
        _2651 = _2087;
        _2653 = _2089;
        _2655 = _2430;
        _2657 = _2432;
        _2659 = _2434;
    }
    float _4568 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4579 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4590 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    uint _2679 = _249 + 6u;
    float _2687 = _837 / cbSceneParam._m0[86u].x;
    float _2688 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2702 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2704 = _2702.x;
    float _2705 = _2702.y;
    float _2706 = _2702.z;
    float _2707 = _2702.w;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _2762 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _2763 = _2762 / _772;
        float _2774 = _2763 * _822;
        float _2775 = _823 * _2763;
        float _2776 = (-0.0) - _2775;
        float _2778 = _2763 * _824;
        float _2780 = (cbSceneParam._m0[77u].w * _2776) / _2762;
        float _2781 = _2780 + cbSceneParam._m0[79u].w;
        float _2782 = cbSceneParam._m0[79u].w - _2775;
        float _2788 = sqrt(((_2774 * _2774) + (_2775 * _2775)) + (_2778 * _2778));
        float _2791 = (1.0 - (cbSceneParam._m0[77u].w / _2762)) * _2788;
        float _2796 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2798 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2951;
        if (abs((_2776 - _2780) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2951 = ((((_2781 > 0.0) ? exp2(_2796 * _2781) : (2.0 - exp2(_2798 * _2781))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2791;
        }
        else
        {
            float _2911 = 1.0 / cbSceneParam._m0[80u].x;
            float _2912 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : max(_2781, _2782));
            float _2913 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : min(_2781, _2782));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            _2951 = ((abs(_2788 / _2776) * cbSceneParam._m0[80u].y) * ((((_2922 - _2923) * 2.0) - ((exp2(_2796 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0)))) - exp2(_2796 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))))) * _2911)) - ((exp2(_2798 * _2922) - exp2(_2798 * _2923)) * _2911))) + (_2791 * cbSceneParam._m0[80u].z);
        }
        vec4 _2953 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, 1.0), 0.0);
        float _2962 = exp2((_2951 * (-1.44269502162933349609375)) * (1.0 - _2953.w));
        float _2963 = log2(_2962);
        float _2979 = log2(_2707);
        _2800 = (exp2(_2979 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].x)) * _2953.x) / cbSceneParam._m0[78u].x)) + _2704;
        _2802 = (exp2(_2979 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].y)) * _2953.y) / cbSceneParam._m0[78u].y)) + _2705;
        _2804 = (exp2(_2979 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].z)) * _2953.z) / cbSceneParam._m0[78u].z)) + _2706;
        _2806 = _2962 * _2707;
    }
    else
    {
        _2800 = _2704;
        _2802 = _2705;
        _2804 = _2706;
        _2806 = _2707;
    }
    float _2818 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2819 = _2818 == 3.0;
    float _2820 = log2(_2806);
    float _2827 = exp2(_2820 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2649 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _915))) + ((_2655 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2828 = exp2(_2820 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2651 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _915))) + ((_2657 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2829 = exp2(_2820 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2653 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _915))) + ((_2659 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2838 = (_2818 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2838 * (_2819 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2800)));
    SV_Target.y = _2838 * (_2819 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2802)));
    SV_Target.z = _2838 * (_2819 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2804)));
    SV_Target.w = cbInstanceData._m0[_2679].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2679].w;
}


