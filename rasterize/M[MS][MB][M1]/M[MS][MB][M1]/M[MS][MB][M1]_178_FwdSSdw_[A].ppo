#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1450;
float _3855;
float _3856;
float _3857;
float _3858;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3867 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3878 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3889 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].y) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3900 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _446 = (_439 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _447 = (_439 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _448 = (_439 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].y) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    float _525 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _519;
    float _528 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _520;
    float _531 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _521;
    float _538 = ((_519 - _525) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _525;
    float _539 = ((_520 - _528) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _528;
    float _540 = ((_521 - _531) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _531;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _603 = ((_575.x - _594) * _439) + _594;
    float _604 = ((_575.y - _595) * _439) + _595;
    float _605 = ((_575.z - _596) * _439) + _596;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _630 = ((_617.z - _605) * _512) + _605;
    float _633 = ((((_617.x - _603) * _512) + _603) * 2.0) + (-1.0);
    float _634 = ((((_617.y - _604) * _512) + _604) * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3922 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))));
    vec4 _660 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _672 = (_633 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_552.x * 2.0) + (-1.0)))) + (((_660.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _673 = (_634 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_552.y * 2.0) + (-1.0)))) + (((_660.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _685 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _714 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3933 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _723 = ((((cbMtdParam._m0[10u].x - _538) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _715) + _538;
    float _724 = ((((cbMtdParam._m0[10u].y - _539) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _715) + _539;
    float _725 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _540)) * _715) + _540;
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _751 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _753 = _751.x;
    float _771 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _753) * _439) + _753;
    float _789 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _771) * _512) + _771;
    float _793 = ((_737.x - _789) * cbMtdParam._m0[19u].z) + _789;
    float _795 = _793 - (_793 * _715);
    float _800 = (((_552.z - _630) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _630;
    float _804 = ((_660.z - _800) * cbMtdParam._m0[19u].w) + _800;
    float _808 = ((cbMtdParam._m0[23u].y - _804) * _715) + _804;
    vec4 _827 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _833 = (_827.x * 2.0) + (-1.0);
    float _834 = (_827.y * 2.0) + (-1.0);
    float _835 = dot(vec2(_833, _834), vec2(_833, _834));
    float _3944 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _851 = (_715 * (((cbMtdParam._m0[22u].z * _672) - _672) + _833)) + _672;
    float _852 = (_715 * (((cbMtdParam._m0[22u].z * _673) - _673) + _834)) + _673;
    float _853 = (_715 * (sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) - _640)) + _640;
    float _857 = cbMtdParam._m0[22u].x + _660.w;
    float _860 = fma(_853, _255 * NORMAL.x, fma(_852, _262 * TANGENT.x, (_248 * _240) * _851));
    float _863 = fma(_853, _255 * NORMAL.y, fma(_852, _262 * TANGENT.y, (_248 * _241) * _851));
    float _866 = fma(_853, _255 * NORMAL.z, fma(_852, _262 * TANGENT.z, (_248 * _242) * _851));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3955 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _874 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _3977 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3988 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3999 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4010 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _879 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _893 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _943 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _933);
    float _944 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _933);
    float _945 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _933);
    float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
    float _950 = _943 * _949;
    float _951 = _944 * _949;
    float _952 = _945 * _949;
    vec4 _957 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _959 = _957.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1131 = sqrt(((_943 * _943) + (_944 * _944)) + (_945 * _945));
        float _1137 = (cbMatDynParam._m0[5u].x * _1131) + cbMatDynParam._m0[5u].y;
        float _4021 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1142 = (cbMatDynParam._m0[5u].z * _1131) + cbMatDynParam._m0[5u].w;
        float _4032 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) - _1138)) + _1138) < ((_959 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _970 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _971 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _989 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _992 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _995 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _1008 = _287 + 9u;
    uint _1009 = _1008 + uint(cbMatDynParam._m0[0u].w);
    float _1015 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_1009].x;
    float _1016 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1009].y;
    float _1017 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1009].z;
    float _4043 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1021 = 1.0 - _879;
    float _1022 = _1018 * _1021;
    float _1023 = _1019 * _1021;
    float _1024 = _1020 * _1021;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _879;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _879;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _879;
    float _1032 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    vec4 _1044 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _970, cbSceneParam._m0[86u].y * _971));
    float _1048 = ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * TEXCOORD_5.w) * _1044.x;
    float _1049 = dot(vec3(_871, _872, _873), vec3(_950, _951, _952));
    float _1052 = _1049 * 2.0;
    float _1056 = (_1052 * _871) - _950;
    float _1057 = (_1052 * _872) - _951;
    float _1058 = (_1052 * _873) - _952;
    float _1062 = abs(dot(vec3(_950, _951, _952), vec3(_871, _872, _873)));
    float _4076 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1064 = sqrt(_874);
    float _1077 = exp2((_1064 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1064 * 3.0));
    float _1083 = (1.0 - _1077) * ((_1064 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1084 = _1077 * _1064;
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1120, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112));
        float _1178 = fma(_1120, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112));
        float _1182 = fma(_1120, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112));
        float _1207 = _1112 + _871;
        float _1208 = _1116 + _872;
        float _1209 = _1120 + _873;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_871, _872, _873), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4124 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_871, _872, _873), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4157 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_871, _872, _873), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4190 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1120, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112));
        float _1495 = fma(_1120, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112));
        float _1499 = fma(_1120, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112));
        float _1522 = _1112 + _871;
        float _1523 = _1116 + _872;
        float _1524 = _1120 + _873;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_871, _872, _873), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4253 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_871, _872, _873), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4286 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_871, _872, _873), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4319 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1450;
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = _1450;
        _1769 = _1450;
        _1770 = _1450;
        _1771 = _1450;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1462)) + _1462;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1463)) + _1463;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1464)) + _1464;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1056 * 0.5;
    float _1829 = _1057 * 0.5;
    float _1830 = _1058 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1946 = fma(_1120, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112)) + cbModelParam._m0[13u].w;
        float _1950 = fma(_1120, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112)) + cbModelParam._m0[14u].w;
        float _1954 = fma(_1120, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112)) + cbModelParam._m0[15u].w;
        float _1957 = fma(_1058, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056));
        float _1960 = fma(_1058, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056));
        float _1963 = fma(_1058, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056));
        float _1991;
        if (_1957 > 0.0)
        {
            _1991 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1991 = frontier_phi_17_15_ladder;
        }
        float _2215;
        if (_1960 > 0.0)
        {
            _2215 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2215 = frontier_phi_26_22_ladder;
        }
        float _2472;
        if (_1963 > 0.0)
        {
            _2472 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2472 = frontier_phi_38_33_ladder;
        }
        float _2474 = isnan(_2215) ? _1991 : (isnan(_1991) ? _2215 : min(_1991, _2215));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1957) + _1946;
        float _2480 = (_2475 * _1960) + _1950;
        float _2481 = (_2475 * _1963) + _1954;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_16_38_ladder = _2609.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2609.x * cbModelParam._m0[1u].y;
        }
        _1979 = frontier_phi_16_38_ladder_2;
        _1981 = frontier_phi_16_38_ladder_1;
        _1983 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1056, _1057, _1058), _1897);
        _1979 = _1967.x * cbModelParam._m0[1u].y;
        _1981 = _1967.y * cbModelParam._m0[1u].y;
        _1983 = _1967.z * cbModelParam._m0[1u].y;
    }
    float _1987 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1987 : min(cbModelParam._m0[25u].w, _1987));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2042 = fma(_1120, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112)) + cbModelParam._m0[21u].w;
        float _2046 = fma(_1120, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112)) + cbModelParam._m0[22u].w;
        float _2050 = fma(_1120, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112)) + cbModelParam._m0[23u].w;
        float _2053 = fma(_1058, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056));
        float _2056 = fma(_1058, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056));
        float _2059 = fma(_1058, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056));
        float _2220;
        if (_2053 > 0.0)
        {
            _2220 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2220 = frontier_phi_28_24_ladder;
        }
        float _2499;
        if (_2056 > 0.0)
        {
            _2499 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2499 = frontier_phi_40_35_ladder;
        }
        float _2712;
        if (_2059 > 0.0)
        {
            _2712 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2712 = frontier_phi_49_46_ladder;
        }
        float _2714 = isnan(_2499) ? _2220 : (isnan(_2220) ? _2499 : min(_2220, _2499));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _2053) + _2042;
        float _2720 = (_2715 * _2056) + _2046;
        float _2721 = (_2715 * _2059) + _2050;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1988);
            frontier_phi_25_49_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2078 = frontier_phi_25_49_ladder_2;
        _2080 = frontier_phi_25_49_ladder_1;
        _2082 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1056, _1057, _1058), _1988);
        _2078 = _2062.x * cbModelParam._m0[1u].z;
        _2080 = _2062.y * cbModelParam._m0[1u].z;
        _2082 = _2062.z * cbModelParam._m0[1u].z;
    }
    float _2095 = (((_1083 * _1032) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2078 - _1979)) + _1979);
    float _2097 = (((_1083 * _1034) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2080 - _1981)) + _1981);
    float _2099 = (((_1083 * _1035) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2102 = fma(_2099, cbSceneParam._m0[89u].z, fma(_2097, cbSceneParam._m0[89u].y, _2095 * cbSceneParam._m0[89u].x));
    float _2105 = fma(_2099, cbSceneParam._m0[90u].z, fma(_2097, cbSceneParam._m0[90u].y, _2095 * cbSceneParam._m0[90u].x));
    float _2108 = fma(_2099, cbSceneParam._m0[91u].z, fma(_2097, cbSceneParam._m0[91u].y, _2095 * cbSceneParam._m0[91u].x));
    vec4 _2116 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_970, _971));
    float _2118 = _2116.w;
    float _2130 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2118);
    float _2131 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2118);
    float _2132 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2118);
    uvec4 _2136 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2138 = _2136.x * 14u;
    uint _2139 = _2138 + 13u;
    float _2146 = _1048 + (-1.0);
    float _2151 = (cbLight._m0[_2139].x * _2146) + 1.0;
    float _2152 = (cbLight._m0[_2139].y * _2146) + 1.0;
    float _2153 = (cbLight._m0[_2139].z * _2146) + 1.0;
    float _2154 = (cbLight._m0[_2139].w * _2146) + 1.0;
    uint _2155 = _2138 + 5u;
    float _2161 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2165 = _2138 + 4u;
    float _2174 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2178 = _2138 | 1u;
    float _2189 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_871, _872, _873));
    float _2192 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_871, _872, _873));
    float _4455 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _4466 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2197 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2199 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2206 = ((cbLight._m0[_2155].x * _2161) * _2199) + (((cbLight._m0[_2165].x * _2130) * _2174) * _2197);
    float _2207 = ((_2161 * cbLight._m0[_2155].y) * _2199) + (((cbLight._m0[_2165].y * _2131) * _2174) * _2197);
    float _2208 = ((_2161 * cbLight._m0[_2155].z) * _2199) + (((cbLight._m0[_2165].z * _2132) * _2174) * _2197);
    uvec4 _2212 = floatBitsToUint(cbLight._m0[_2138 + 12u]);
    bool _2214 = _2212.x == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2214)
    {
        _2225 = _2206;
        _2227 = _2207;
        _2229 = _2208;
    }
    else
    {
        uint _2233 = _2138 + 6u;
        float _2249 = (dot(vec3(cbLight._m0[_2138 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4477 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2252 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2225 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2206;
        _2227 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2207;
        _2229 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2208;
    }
    bool _2232 = _2212.y == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2232)
    {
        _2270 = _2225;
        _2272 = _2227;
        _2274 = _2229;
    }
    else
    {
        uint _2443 = _2138 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2138 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4493 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2462 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2270 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2225;
        _2272 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2227;
        _2274 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2229;
    }
    uint _2277 = _2138 + 8u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _874) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2138].x + _950;
    float _2293 = cbLight._m0[_2138].y + _951;
    float _2294 = cbLight._m0[_2138].z + _952;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2138].xyz));
    float _4509 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _4520 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2306 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2307 = dot(vec3(_871, _872, _873), vec3(_2299, _2300, _2301));
    float _4531 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2299, _2300, _2301));
    float _4542 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2291 * _2291;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2328 = 0.959999978542327880859375 - _1029;
    float _2330 = 0.959999978542327880859375 - _1030;
    float _2331 = 0.959999978542327880859375 - _1031;
    float _2338 = 1.0 - _2291;
    float _2349 = (0.5 / (((_2306 * ((_2305 * _2338) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2338) + _2291) * _2305))) * _2305;
    float _4553 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    uint _2365 = _2138 + 9u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _874) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2178].x + _950;
    float _2379 = cbLight._m0[_2178].y + _951;
    float _2380 = cbLight._m0[_2178].z + _952;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2178].xyz));
    float _4564 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2392 = dot(vec3(_871, _872, _873), vec3(_2385, _2386, _2387));
    float _4575 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2385, _2386, _2387));
    float _4586 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2377 * _2377;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2418 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2306 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2418) + _2377) * _2391))) * _2391;
    float _4597 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    float _2440 = (((((_2411 * _2328) + _1032) * cbLight._m0[_2365].x) * _2430) * _2161) + ((((cbLight._m0[_2277].x * _2130) * ((_2327 * _2328) + _1032)) * _2351) * _2174);
    float _2441 = (((((_2411 * _2330) + _1034) * cbLight._m0[_2365].y) * _2430) * _2161) + ((((cbLight._m0[_2277].y * _2131) * ((_2327 * _2330) + _1034)) * _2351) * _2174);
    float _2442 = (((((_2411 * _2331) + _1035) * cbLight._m0[_2365].z) * _2430) * _2161) + ((((cbLight._m0[_2277].z * _2132) * ((_2327 * _2331) + _1035)) * _2351) * _2174);
    float _2504;
    float _2506;
    float _2508;
    if (_2214)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2138 + 2u;
        uint _2514 = _2138 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _874) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _950;
        float _2531 = cbLight._m0[_2510].y + _951;
        float _2532 = cbLight._m0[_2510].z + _952;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2510].xyz));
        float _4608 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2544 = dot(vec3(_871, _872, _873), vec3(_2537, _2538, _2539));
        float _4619 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4630 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2306 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2570) + _2529) * _2543))) * _2543;
        float _4641 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2504 = (((((_2563 * _2328) + _1032) * cbLight._m0[_2514].x) * _2582) * _2583) + _2440;
        _2506 = (((((_2563 * _2330) + _1034) * cbLight._m0[_2514].y) * _2582) * _2583) + _2441;
        _2508 = (((((_2563 * _2331) + _1035) * cbLight._m0[_2514].z) * _2582) * _2583) + _2442;
    }
    float _2618;
    float _2620;
    float _2622;
    if (_2232)
    {
        _2618 = _2504;
        _2620 = _2506;
        _2622 = _2508;
    }
    else
    {
        uint _2629 = _2138 + 3u;
        uint _2633 = _2138 + 11u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _874) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _950;
        float _2650 = cbLight._m0[_2629].y + _951;
        float _2651 = cbLight._m0[_2629].z + _952;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2629].xyz));
        float _4657 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2663 = dot(vec3(_871, _872, _873), vec3(_2656, _2657, _2658));
        float _4668 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4679 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2306 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2689) + _2648) * _2662))) * _2662;
        float _4690 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2618 = (((((_2682 * _2328) + _1032) * cbLight._m0[_2633].x) * _2701) * _2702) + _2504;
        _2620 = (((((_2682 * _2330) + _1034) * cbLight._m0[_2633].y) * _2701) * _2702) + _2506;
        _2622 = (((((_2682 * _2331) + _1035) * cbLight._m0[_2633].z) * _2701) * _2702) + _2508;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2136.y == 0u)
    {
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2777;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2777;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2777;
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _971) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _970) / _2793)));
        float _2814 = (log2(_2780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3094)
                {
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _2778;
                        float _3290 = _3249.y - _2779;
                        float _3291 = _3249.z - _2780;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_989, _992, _995), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4716 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _2778;
                        float _3325 = (-0.0) - _2779;
                        float _3326 = (-0.0) - _2780;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3341 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _1064;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3331 + _3296;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_989, _992, _995), vec3(_3331, _3332, _3333));
                        float _4732 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3366 = dot(vec3(_989, _992, _995), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4743 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3309 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3299) + _3375;
                        float _4754 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4765 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3373 * _3373) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3401 * _3285.x) + _3223;
                        _3151 = (_3401 * _3285.y) + _3224;
                        _3152 = (_3401 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_66_pred = _3150;
                    frontier_phi_66_pred_1 = _3155;
                    frontier_phi_66_pred_2 = _3154;
                    frontier_phi_66_pred_3 = _3153;
                    frontier_phi_66_pred_4 = _3152;
                    frontier_phi_66_pred_5 = _3151;
                }
                _2926 = frontier_phi_66_pred;
                _2936 = frontier_phi_66_pred_1;
                _2934 = frontier_phi_66_pred_2;
                _2932 = frontier_phi_66_pred_3;
                _2930 = frontier_phi_66_pred_4;
                _2928 = frontier_phi_66_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2926;
                    _3079 = _2928;
                    _3080 = _2930;
                    _3081 = _2932;
                    _3082 = _2934;
                    _3083 = _2936;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2942) & _2824) == 0u)
        {
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
            float _3072 = _3071 * _2778;
            float _3073 = _3071 * _2779;
            float _3074 = _3071 * _2780;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2925;
                float _3207 = _2927;
                float _3208 = _2929;
                float _3209 = _2931;
                float _3210 = _2933;
                float _3211 = _2935;
                uint _3212 = _2942;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3222)
                    {
                        frontier_phi_77_pred = _3211;
                        frontier_phi_77_pred_1 = _3210;
                        frontier_phi_77_pred_2 = _3209;
                        frontier_phi_77_pred_3 = _3208;
                        frontier_phi_77_pred_4 = _3207;
                        frontier_phi_77_pred_5 = _3206;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        uint _3434 = _3221;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_2780, _3552.z, fma(_2779, _3552.y, _3552.x * _2778)) + _3552.w;
                            _3565 = !((fma(_2780, _3533.z, fma(_2779, _3533.y, _3533.x * _2778)) + _3533.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _2778;
                                float _3593 = _3460.y - _2779;
                                float _3594 = _3460.z - _2780;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4776 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_989, _992, _995))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_2780, _3503.z, fma(_2779, _3503.y, _3503.x * _2778)) + _3503.w) / _3564;
                                float _3624 = (fma(_2780, _3518.z, fma(_2779, _3518.y, _3518.x * _2778)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4792 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _1064;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3072;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_989, _992, _995), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4803 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3667 = dot(vec3(_989, _992, _995), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4814 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_989, _992, _995), vec3(_3599, _3600, _3601))) + _3676;
                                float _4825 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4836 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3630 * _3476.y;
                                frontier_phi_83_pred_1 = _3630 * _3476.x;
                                frontier_phi_83_pred_2 = _3704 * _3488.z;
                                frontier_phi_83_pred_3 = _3704 * _3488.y;
                                frontier_phi_83_pred_4 = _3704 * _3488.x;
                                frontier_phi_83_pred_5 = _3630 * _3476.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_83_pred;
                            _3711 = frontier_phi_83_pred_1;
                            _3710 = frontier_phi_83_pred_2;
                            _3709 = frontier_phi_83_pred_3;
                            _3708 = frontier_phi_83_pred_4;
                            _3713 = frontier_phi_83_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3420;
                        frontier_phi_77_pred_1 = _3419;
                        frontier_phi_77_pred_2 = _3418;
                        frontier_phi_77_pred_3 = _3417;
                        frontier_phi_77_pred_4 = _3416;
                        frontier_phi_77_pred_5 = _3415;
                    }
                    _3057 = frontier_phi_77_pred;
                    _3055 = frontier_phi_77_pred_1;
                    _3053 = frontier_phi_77_pred_2;
                    _3051 = frontier_phi_77_pred_3;
                    _3049 = frontier_phi_77_pred_4;
                    _3047 = frontier_phi_77_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3051;
                frontier_phi_58_59_ladder_1 = _3057;
                frontier_phi_58_59_ladder_2 = _3055;
                frontier_phi_58_59_ladder_3 = _3053;
                frontier_phi_58_59_ladder_4 = _3049;
                frontier_phi_58_59_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_58_59_ladder = _2929;
                frontier_phi_58_59_ladder_1 = _2935;
                frontier_phi_58_59_ladder_2 = _2933;
                frontier_phi_58_59_ladder_3 = _2931;
                frontier_phi_58_59_ladder_4 = _2927;
                frontier_phi_58_59_ladder_5 = _2925;
            }
            _3046 = frontier_phi_58_59_ladder_5;
            _3048 = frontier_phi_58_59_ladder_4;
            _3050 = frontier_phi_58_59_ladder;
            _3052 = frontier_phi_58_59_ladder_3;
            _3054 = frontier_phi_58_59_ladder_2;
            _3056 = frontier_phi_58_59_ladder_1;
        }
        float _3061 = isnan(1.0) ? _1048 : (isnan(_1048) ? 1.0 : min(_1048, 1.0));
        _2837 = (_3061 * _3052) + _2270;
        _2839 = (_3061 * _3054) + _2272;
        _2841 = (_3061 * _3056) + _2274;
        _2843 = ((_3046 * _1032) * _3061) + _2618;
        _2845 = ((_3048 * _1034) * _3061) + _2620;
        _2847 = ((_3050 * _1035) * _3061) + _2622;
    }
    else
    {
        _2837 = _2270;
        _2839 = _2272;
        _2841 = _2274;
        _2843 = _2618;
        _2845 = _2620;
        _2847 = _2622;
    }
    float _4852 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4863 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4874 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2864 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2837 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1048))) + ((_2843 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2839 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1048))) + ((_2845 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2841 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1048))) + ((_2847 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    uint _2867 = _287 + 6u;
    float _2875 = _970 / cbSceneParam._m0[86u].x;
    float _2876 = _971 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _893 : (isnan(_893) ? cbSceneParam._m0[77u].w : min(_893, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_893 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_893) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _893 : min(cbSceneParam._m0[80u].w, _893));
        float _2951 = _2950 / _893;
        float _2962 = _2951 * _943;
        float _2963 = _944 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2966 = _2951 * _945;
        float _2968 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2963;
        float _2976 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2964 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2964) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2895);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2994 = _3174 * _2895;
    }
    else
    {
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
        _2994 = _2895;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2864;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2865;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2866;
        float _3024 = _959 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _1008 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3406;
    if (_3201)
    {
        discard_state = true;
        _3406 = 0.0;
    }
    else
    {
        _3406 = cbInstanceData._m0[_2867].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3406;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
    discard_exit();
}


