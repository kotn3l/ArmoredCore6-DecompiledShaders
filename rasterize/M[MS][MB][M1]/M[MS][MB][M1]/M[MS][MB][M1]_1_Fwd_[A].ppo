#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _894;
float _3282;
float _3283;
float _3284;
float _3285;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _256 = _252.z;
    float _261 = (_252.x * 2.0) + (-1.0);
    float _263 = (_252.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3294 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _285 = _283.x;
    float _290 = cbMtdParam._m0[22u].x + _252.w;
    float _293 = fma(_270, _201 * NORMAL.x, fma(_263, _208 * TANGENT.x, (_194 * _186) * _261));
    float _296 = fma(_270, _201 * NORMAL.y, fma(_263, _208 * TANGENT.y, (_194 * _187) * _261));
    float _299 = fma(_270, _201 * NORMAL.z, fma(_263, _208 * TANGENT.z, (_194 * _188) * _261));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3305 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3327 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3338 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3349 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3360 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _312 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _573 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _579 = (cbMatDynParam._m0[5u].x * _573) + cbMatDynParam._m0[5u].y;
        float _3371 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _580 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _584 = (cbMatDynParam._m0[5u].z * _573) + cbMatDynParam._m0[5u].w;
        float _3382 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) - _580)) + _580) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _432 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _435 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3393 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _463 = 1.0 - _312;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _312;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _312;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _312;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * TEXCOORD_5.w) * _486.x;
    float _491 = dot(vec3(_304, _305, _306), vec3(_387, _388, _389));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _304) - _387;
    float _499 = (_494 * _305) - _388;
    float _500 = (_494 * _306) - _389;
    float _504 = abs(dot(vec3(_387, _388, _389), vec3(_304, _305, _306)));
    float _3426 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_307);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _622 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _626 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _651 = _554 + _304;
        float _652 = _558 + _305;
        float _653 = _562 + _306;
        float _663 = fma(_653, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651)) - _618;
        float _664 = fma(_653, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651)) - _622;
        float _665 = fma(_653, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651)) - _626;
        float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
        float _682 = ((_669 * _663) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_618 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_669 * _664) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_622 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_669 * _665) / cbModelParam._m0[34u].z) + ((((((_626 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _721 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_687.x + (-0.5));
        float _723 = _721 * (_687.y + (-0.5));
        float _724 = _721 * (_687.z + (-0.5));
        float _731 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_694.x + (-0.5));
        float _733 = _731 * (_694.y + (-0.5));
        float _734 = _731 * (_694.z + (-0.5));
        float _741 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_701.x + (-0.5));
        float _743 = _741 * (_701.y + (-0.5));
        float _744 = _741 * (_701.z + (-0.5));
        float _751 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_708.x + (-0.5));
        float _753 = _751 * (_708.y + (-0.5));
        float _754 = _751 * (_708.z + (-0.5));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = _722 * 0.5;
        float _759 = _732 * 0.5;
        float _760 = _742 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _775 = (dot(vec3(_304, _305, _306), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _785 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3474 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_787 + 1.0))) + _792) * _755;
        float _802 = _723 * 0.5;
        float _803 = _733 * 0.5;
        float _804 = _743 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_304, _305, _306), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3507 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_829 + 1.0))) + _834) * _756;
        float _844 = _724 * 0.5;
        float _845 = _734 * 0.5;
        float _846 = _744 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_304, _305, _306), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3540 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_871 + 1.0))) + _876) * _757;
        _893 = _724;
        _895 = _723;
        _896 = _722;
        _897 = _734;
        _898 = _733;
        _899 = _732;
        _900 = _744;
        _901 = _743;
        _902 = _742;
        _903 = _757;
        _904 = _756;
        _905 = _755;
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    }
    else
    {
        _893 = _894;
        _895 = _894;
        _896 = _894;
        _897 = _894;
        _898 = _894;
        _899 = _894;
        _900 = _894;
        _901 = _894;
        _902 = _894;
        _903 = _894;
        _904 = _894;
        _905 = _894;
        _906 = 0.0;
        _907 = 0.0;
        _908 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _940 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _944 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _967 = _554 + _304;
        float _968 = _558 + _305;
        float _969 = _562 + _306;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_304, _305, _306), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3603 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_304, _305, _306), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3636 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_304, _305, _306), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3669 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _894;
        _1206 = _894;
        _1207 = _894;
        _1208 = _894;
        _1209 = _894;
        _1210 = _894;
        _1211 = _894;
        _1212 = _894;
        _1213 = _894;
        _1214 = _894;
        _1215 = _894;
        _1216 = _894;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _906)) + _906;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _907)) + _907;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _908)) + _908;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _498 * 0.5;
    float _1274 = _499 * 0.5;
    float _1275 = _500 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_893, _897, _900, _903));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_896, _899, _902, _905));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1405 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1408 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1436 = frontier_phi_17_15_ladder;
        }
        float _1642;
        if (_1405 > 0.0)
        {
            _1642 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1642 = frontier_phi_26_22_ladder;
        }
        float _1896;
        if (_1408 > 0.0)
        {
            _1896 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1896 = frontier_phi_38_33_ladder;
        }
        float _1898 = isnan(_1642) ? _1436 : (isnan(_1436) ? _1642 : min(_1436, _1642));
        float _1899 = isnan(_1896) ? _1898 : (isnan(_1898) ? _1896 : min(_1898, _1896));
        float _1903 = (_1899 * _1402) + _1391;
        float _1904 = (_1899 * _1405) + _1395;
        float _1905 = (_1899 * _1408) + _1399;
        float _1906 = _1899 * 9.9999997473787516355514526367188e-05;
        float _1908 = (-1.0) - _1906;
        float _1910 = _1906 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1905 > _1910) || ((_1905 < _1908) || ((_1904 > _1910) || ((_1904 < _1908) || ((_1903 < _1908) || (_1903 > _1910))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1905, cbModelParam._m0[9u].z, fma(_1904, cbModelParam._m0[9u].y, _1903 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1905, cbModelParam._m0[10u].z, fma(_1904, cbModelParam._m0[10u].y, _1903 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1905, cbModelParam._m0[11u].z, fma(_1904, cbModelParam._m0[11u].y, _1903 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_16_38_ladder = _2033.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2033.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2033.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_16_38_ladder_2;
        _1426 = frontier_phi_16_38_ladder_1;
        _1428 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1489 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1493 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1497 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1500 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1503 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1506 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1647;
        if (_1500 > 0.0)
        {
            _1647 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1647 = frontier_phi_28_24_ladder;
        }
        float _1923;
        if (_1503 > 0.0)
        {
            _1923 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1923 = frontier_phi_40_35_ladder;
        }
        float _2136;
        if (_1506 > 0.0)
        {
            _2136 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2136 = frontier_phi_49_46_ladder;
        }
        float _2138 = isnan(_1923) ? _1647 : (isnan(_1647) ? _1923 : min(_1647, _1923));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1500) + _1489;
        float _2144 = (_2139 * _1503) + _1493;
        float _2145 = (_2139 * _1506) + _1497;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2146;
        float _2149 = _2146 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2145 > _2149) || ((_2145 < _2147) || ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 < _2147) || (_2143 > _2149))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2145, cbModelParam._m0[17u].z, fma(_2144, cbModelParam._m0[17u].y, _2143 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2145, cbModelParam._m0[18u].z, fma(_2144, cbModelParam._m0[18u].y, _2143 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2145, cbModelParam._m0[19u].z, fma(_2144, cbModelParam._m0[19u].y, _2143 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_25_49_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1525 = frontier_phi_25_49_ladder_2;
        _1527 = frontier_phi_25_49_ladder_1;
        _1529 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1433);
        _1525 = _1509.x * cbModelParam._m0[1u].z;
        _1527 = _1509.y * cbModelParam._m0[1u].z;
        _1529 = _1509.z * cbModelParam._m0[1u].z;
    }
    float _1542 = (((_525 * _474) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1525 - _1424)) + _1424);
    float _1544 = (((_525 * _476) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1527 - _1426)) + _1426);
    float _1546 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1529 - _1428)) + _1428);
    float _1549 = fma(_1546, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1546, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1546, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1542 * cbSceneParam._m0[91u].x));
    uvec4 _1565 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1567 = _1565.x * 14u;
    uint _1568 = _1567 + 13u;
    float _1575 = _490 + (-1.0);
    float _1580 = (cbLight._m0[_1568].x * _1575) + 1.0;
    float _1581 = (cbLight._m0[_1568].y * _1575) + 1.0;
    float _1582 = (cbLight._m0[_1568].z * _1575) + 1.0;
    float _1583 = (cbLight._m0[_1568].w * _1575) + 1.0;
    uint _1584 = _1567 + 5u;
    float _1590 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1594 = _1567 + 4u;
    float _1601 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1605 = _1567 | 1u;
    float _1616 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_304, _305, _306));
    float _1619 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_304, _305, _306));
    float _3805 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _3816 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1624 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1626 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1633 = ((cbLight._m0[_1584].x * _1590) * _1626) + ((cbLight._m0[_1594].x * _1601) * _1624);
    float _1634 = ((_1590 * cbLight._m0[_1584].y) * _1626) + ((_1601 * cbLight._m0[_1594].y) * _1624);
    float _1635 = ((_1590 * cbLight._m0[_1584].z) * _1626) + ((_1601 * cbLight._m0[_1594].z) * _1624);
    uvec4 _1639 = floatBitsToUint(cbLight._m0[_1567 + 12u]);
    bool _1641 = _1639.x == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1641)
    {
        _1652 = _1633;
        _1654 = _1634;
        _1656 = _1635;
    }
    else
    {
        uint _1660 = _1567 + 6u;
        float _1676 = (dot(vec3(cbLight._m0[_1567 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3827 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1679 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1652 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1633;
        _1654 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1634;
        _1656 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1635;
    }
    bool _1659 = _1639.y == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1659)
    {
        _1697 = _1652;
        _1699 = _1654;
        _1701 = _1656;
    }
    else
    {
        uint _1867 = _1567 + 7u;
        float _1883 = (dot(vec3(cbLight._m0[_1567 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _3843 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1886 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1697 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1652;
        _1699 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1654;
        _1701 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1656;
    }
    uint _1704 = _1567 + 8u;
    float _1717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _307) * 0.949999988079071044921875);
    float _1718 = _1717 * _1717;
    float _1719 = cbLight._m0[_1567].x + _387;
    float _1720 = cbLight._m0[_1567].y + _388;
    float _1721 = cbLight._m0[_1567].z + _389;
    float _1725 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
    float _1726 = _1725 * _1719;
    float _1727 = _1725 * _1720;
    float _1728 = _1725 * _1721;
    float _1729 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1567].xyz));
    float _3859 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1733 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1734 = dot(vec3(_304, _305, _306), vec3(_1726, _1727, _1728));
    float _3881 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1738 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1726, _1727, _1728));
    float _3892 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1742 = _1718 * _1718;
    float _1746 = ((_1737 * _1737) * (_1742 + (-1.0))) + 1.0;
    float _1754 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1755 = 0.959999978542327880859375 - _471;
    float _1757 = 0.959999978542327880859375 - _472;
    float _1758 = 0.959999978542327880859375 - _473;
    float _1765 = 1.0 - _1718;
    float _1776 = (0.5 / (((_1733 * ((_1732 * _1765) + _1718)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1765) + _1718) * _1732))) * _1732;
    float _3903 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1778 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1742 / ((_1746 * _1746) * 3.141590118408203125));
    uint _1789 = _1567 + 9u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _307) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1605].x + _387;
    float _1803 = cbLight._m0[_1605].y + _388;
    float _1804 = cbLight._m0[_1605].z + _389;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1605].xyz));
    float _3914 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1816 = dot(vec3(_304, _305, _306), vec3(_1809, _1810, _1811));
    float _3925 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1809, _1810, _1811));
    float _3936 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1801 * _1801;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1835 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
    float _1842 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1733 * ((_1815 * _1842) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1842) + _1801) * _1815))) * _1815;
    float _3947 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    float _1864 = (((((_1835 * _1755) + _474) * cbLight._m0[_1789].x) * _1854) * _1590) + (((((_1754 * _1755) + _474) * cbLight._m0[_1704].x) * _1778) * _1601);
    float _1865 = (((((_1835 * _1757) + _476) * cbLight._m0[_1789].y) * _1854) * _1590) + (((((_1754 * _1757) + _476) * cbLight._m0[_1704].y) * _1778) * _1601);
    float _1866 = (((((_1835 * _1758) + _477) * cbLight._m0[_1789].z) * _1854) * _1590) + (((((_1754 * _1758) + _477) * cbLight._m0[_1704].z) * _1778) * _1601);
    float _1928;
    float _1930;
    float _1932;
    if (_1641)
    {
        _1928 = _1864;
        _1930 = _1865;
        _1932 = _1866;
    }
    else
    {
        uint _1934 = _1567 + 2u;
        uint _1938 = _1567 + 10u;
        float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _307) * 0.949999988079071044921875);
        float _1953 = _1952 * _1952;
        float _1954 = cbLight._m0[_1934].x + _387;
        float _1955 = cbLight._m0[_1934].y + _388;
        float _1956 = cbLight._m0[_1934].z + _389;
        float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
        float _1961 = _1960 * _1954;
        float _1962 = _1960 * _1955;
        float _1963 = _1960 * _1956;
        float _1964 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1934].xyz));
        float _3958 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1967 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1968 = dot(vec3(_304, _305, _306), vec3(_1961, _1962, _1963));
        float _3969 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1971 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1972 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_1961, _1962, _1963));
        float _3980 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1976 = _1953 * _1953;
        float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
        float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
        float _1994 = 1.0 - _1953;
        float _2004 = (0.5 / (((_1733 * ((_1967 * _1994) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1994) + _1953) * _1967))) * _1967;
        float _3991 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2006 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
        float _2007 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1928 = (((((_1987 * _1755) + _474) * cbLight._m0[_1938].x) * _2006) * _2007) + _1864;
        _1930 = (((((_1987 * _1757) + _476) * cbLight._m0[_1938].y) * _2006) * _2007) + _1865;
        _1932 = (((((_1987 * _1758) + _477) * cbLight._m0[_1938].z) * _2006) * _2007) + _1866;
    }
    float _2042;
    float _2044;
    float _2046;
    if (_1659)
    {
        _2042 = _1928;
        _2044 = _1930;
        _2046 = _1932;
    }
    else
    {
        uint _2053 = _1567 + 3u;
        uint _2057 = _1567 + 11u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _307) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _387;
        float _2074 = cbLight._m0[_2053].y + _388;
        float _2075 = cbLight._m0[_2053].z + _389;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2053].xyz));
        float _4007 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2087 = dot(vec3(_304, _305, _306), vec3(_2080, _2081, _2082));
        float _4018 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _4029 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
        float _2113 = 1.0 - _2072;
        float _2123 = (0.5 / (((_1733 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _2113) + _2072) * _2086))) * _2086;
        float _4040 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _2042 = (((((_2106 * _1755) + _474) * cbLight._m0[_2057].x) * _2125) * _2126) + _1928;
        _2044 = (((((_2106 * _1757) + _476) * cbLight._m0[_2057].y) * _2125) * _2126) + _1930;
        _2046 = (((((_2106 * _1758) + _477) * cbLight._m0[_2057].z) * _2125) * _2126) + _1932;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1565.y == 0u)
    {
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2201;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2201;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2201;
        uvec4 _2216 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2217 = _2216.x;
        uint _2228 = uint((float(_2216.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2217))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2217)));
        float _2238 = (log2(_2204 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2239 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        uint _2242 = uint(isnan(14.0) ? _2239 : (isnan(_2239) ? 14.0 : min(_2239, 14.0)));
        uvec4 _2247 = texelFetch(g_lightClusterGridBuffer, int(((_2242 << 2u) + (_2228 << 6u)) >> 2u));
        uint _2248 = _2247.x;
        uint _2249 = _2216.z;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        if (((((1u << ((_2249 >> 4u) & 15u)) + 4294967295u) & _2248) == 0u) || ((_2249 & 240u) == 0u))
        {
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
        }
        else
        {
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            uint _2508 = 0u;
            uint _2517;
            bool _2518;
            for (;;)
            {
                _2517 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                _2518 = _2517 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2518)
                {
                    frontier_phi_66_pred = _2502;
                    frontier_phi_66_pred_1 = _2507;
                    frontier_phi_66_pred_2 = _2506;
                    frontier_phi_66_pred_3 = _2505;
                    frontier_phi_66_pred_4 = _2504;
                    frontier_phi_66_pred_5 = _2503;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2517;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2508 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2202;
                        float _2714 = _2673.y - _2203;
                        float _2715 = _2673.z - _2204;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_429, _432, _435), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _4066 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2202;
                        float _2749 = (-0.0) - _2203;
                        float _2750 = (-0.0) - _2204;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2766 = 1.0 - _506;
                        float _2773 = sqrt(1.0 - ((1.0 - (_2766 * _2766)) * (1.0 - (_2765 * _2765))));
                        float _2774 = _2773 * _2773;
                        float _2775 = _2774 * _2774;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_429, _432, _435), vec3(_2755, _2756, _2757));
                        float _4082 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2790 = dot(vec3(_429, _432, _435), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _4093 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2797 = ((_2793 * _2793) * (_2775 + (-1.0))) + 1.0;
                        float _2798 = _2733 * _2774;
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2723) + _2799;
                        float _4104 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2804 = 1.0 - _2774;
                        float _2814 = (0.5 / (((_2803 * ((_2789 * _2804) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2803 * _2804) + _2774) * _2789))) * _2803;
                        float _4115 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2825 = (((_2775 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_2797 * _2797) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2577 = (_2744 * _2692.x) + _2650;
                        _2578 = (_2744 * _2692.y) + _2651;
                        _2579 = (_2744 * _2692.z) + _2652;
                        _2574 = (_2825 * _2709.x) + _2647;
                        _2575 = (_2825 * _2709.y) + _2648;
                        _2576 = (_2825 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_66_pred = _2574;
                    frontier_phi_66_pred_1 = _2579;
                    frontier_phi_66_pred_2 = _2578;
                    frontier_phi_66_pred_3 = _2577;
                    frontier_phi_66_pred_4 = _2576;
                    frontier_phi_66_pred_5 = _2575;
                }
                _2350 = frontier_phi_66_pred;
                _2360 = frontier_phi_66_pred_1;
                _2358 = frontier_phi_66_pred_2;
                _2356 = frontier_phi_66_pred_3;
                _2354 = frontier_phi_66_pred_4;
                _2352 = frontier_phi_66_pred_5;
                uint _2509 = _2508 + 1u;
                if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2502 = _2350;
                    _2503 = _2352;
                    _2504 = _2354;
                    _2505 = _2356;
                    _2506 = _2358;
                    _2507 = _2360;
                    _2508 = _2509;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
        }
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.z;
        uint _2366 = (_2364 >> 8u) & 15u;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((4294967295u << _2366) & _2248) == 0u)
        {
            _2470 = _2349;
            _2472 = _2351;
            _2474 = _2353;
            _2476 = _2355;
            _2478 = _2357;
            _2480 = _2359;
        }
        else
        {
            float _2495 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
            float _2496 = _2495 * _2202;
            float _2497 = _2495 * _2203;
            float _2498 = _2495 * _2204;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2366 < ((_2364 >> 12u) & 15u))
            {
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2630 = _2349;
                float _2631 = _2351;
                float _2632 = _2353;
                float _2633 = _2355;
                float _2634 = _2357;
                float _2635 = _2359;
                uint _2636 = _2366;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2646)
                    {
                        frontier_phi_77_pred = _2635;
                        frontier_phi_77_pred_1 = _2634;
                        frontier_phi_77_pred_2 = _2633;
                        frontier_phi_77_pred_3 = _2632;
                        frontier_phi_77_pred_4 = _2631;
                        frontier_phi_77_pred_5 = _2630;
                    }
                    else
                    {
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        uint _2858 = _2645;
                        uint _2859;
                        vec4 _2884;
                        float _2885;
                        vec4 _2900;
                        vec3 _2912;
                        vec4 _2928;
                        vec4 _2944;
                        float _2991;
                        bool _2992;
                        for (;;)
                        {
                            uint _2869 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2858));
                            _2859 = (_2858 + 4294967295u) & _2858;
                            uint _2871 = _2869 * 40u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            _2885 = _2884.w;
                            uint _2887 = (_2869 * 40u) + 4u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2902 = (_2869 * 40u) + 8u;
                            _2912 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x));
                            uint _2915 = (_2869 * 40u) + 16u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2931 = (_2869 * 40u) + 20u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2869 * 40u) + 24u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2966 = (_2869 * 40u) + 28u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            _2991 = fma(_2204, _2979.z, fma(_2203, _2979.y, _2979.x * _2202)) + _2979.w;
                            _2992 = !((fma(_2204, _2960.z, fma(_2203, _2960.y, _2960.x * _2202)) + _2960.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2992)
                            {
                                float _3019 = _2884.x - _2202;
                                float _3020 = _2884.y - _2203;
                                float _3021 = _2884.z - _2204;
                                float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                                float _3025 = inversesqrt(_3022);
                                float _3026 = _3025 * _3019;
                                float _3027 = _3025 * _3020;
                                float _3028 = _3025 * _3021;
                                float _3032 = 1.0 - (_3022 / (_2885 * _2885));
                                float _4126 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3037 = sqrt(_3022) * _2900.w;
                                float _3039 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                                float _3040 = _3039 * _3039;
                                float _3043 = ((1.0 - _3040) * dot(vec3(_3026, _3027, _3028), vec3(_429, _432, _435))) + _3040;
                                float _3046 = _3037 * _3037;
                                float _3050 = (fma(_2204, _2928.z, fma(_2203, _2928.y, _2928.x * _2202)) + _2928.w) / _2991;
                                float _3051 = (fma(_2204, _2944.z, fma(_2203, _2944.y, _2944.x * _2202)) + _2944.w) / _2991;
                                float _3055 = 1.0 - dot(vec2(_3050, _3051), vec2(_3050, _3051));
                                float _4142 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3057 = _3056 * (((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3033) / ((_3046 * 0.699999988079071044921875) + 1.0));
                                float _3069 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                                float _3070 = 1.0 - _506;
                                float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                                float _3078 = _3077 * _3077;
                                float _3079 = _3078 * _3078;
                                float _3080 = _3026 - _2496;
                                float _3081 = _3027 - _2497;
                                float _3082 = _3028 - _2498;
                                float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                                float _3090 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2496, (-0.0) - _2497, (-0.0) - _2498));
                                float _4153 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3094 = dot(vec3(_429, _432, _435), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                                float _4164 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                                float _3102 = _3039 * _3078;
                                float _3103 = _3102 * _3102;
                                float _3109 = ((1.0 - _3103) * dot(vec3(_429, _432, _435), vec3(_3026, _3027, _3028))) + _3103;
                                float _4175 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3111 = 1.0 - _3078;
                                float _3121 = (0.5 / (((_3110 * ((_3093 * _3111) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3078) * _3093))) * _3110;
                                float _4186 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3131 = (_3056 * _3033) * (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3101 * _3101) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3057 * _2900.y;
                                frontier_phi_83_pred_1 = _3057 * _2900.x;
                                frontier_phi_83_pred_2 = _3131 * _2912.z;
                                frontier_phi_83_pred_3 = _3131 * _2912.y;
                                frontier_phi_83_pred_4 = _3131 * _2912.x;
                                frontier_phi_83_pred_5 = _3057 * _2900.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_83_pred;
                            _3138 = frontier_phi_83_pred_1;
                            _3137 = frontier_phi_83_pred_2;
                            _3136 = frontier_phi_83_pred_3;
                            _3135 = frontier_phi_83_pred_4;
                            _3140 = frontier_phi_83_pred_5;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            if (_2859 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2859;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2844;
                        frontier_phi_77_pred_1 = _2843;
                        frontier_phi_77_pred_2 = _2842;
                        frontier_phi_77_pred_3 = _2841;
                        frontier_phi_77_pred_4 = _2840;
                        frontier_phi_77_pred_5 = _2839;
                    }
                    _2481 = frontier_phi_77_pred;
                    _2479 = frontier_phi_77_pred_1;
                    _2477 = frontier_phi_77_pred_2;
                    _2475 = frontier_phi_77_pred_3;
                    _2473 = frontier_phi_77_pred_4;
                    _2471 = frontier_phi_77_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2471;
                        _2631 = _2473;
                        _2632 = _2475;
                        _2633 = _2477;
                        _2634 = _2479;
                        _2635 = _2481;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2475;
                frontier_phi_58_59_ladder_1 = _2481;
                frontier_phi_58_59_ladder_2 = _2479;
                frontier_phi_58_59_ladder_3 = _2477;
                frontier_phi_58_59_ladder_4 = _2473;
                frontier_phi_58_59_ladder_5 = _2471;
            }
            else
            {
                frontier_phi_58_59_ladder = _2353;
                frontier_phi_58_59_ladder_1 = _2359;
                frontier_phi_58_59_ladder_2 = _2357;
                frontier_phi_58_59_ladder_3 = _2355;
                frontier_phi_58_59_ladder_4 = _2351;
                frontier_phi_58_59_ladder_5 = _2349;
            }
            _2470 = frontier_phi_58_59_ladder_5;
            _2472 = frontier_phi_58_59_ladder_4;
            _2474 = frontier_phi_58_59_ladder;
            _2476 = frontier_phi_58_59_ladder_3;
            _2478 = frontier_phi_58_59_ladder_2;
            _2480 = frontier_phi_58_59_ladder_1;
        }
        float _2485 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2261 = (_2485 * _2476) + _1697;
        _2263 = (_2485 * _2478) + _1699;
        _2265 = (_2485 * _2480) + _1701;
        _2267 = ((_2470 * _474) * _2485) + _2042;
        _2269 = ((_2472 * _476) * _2485) + _2044;
        _2271 = ((_2474 * _477) * _2485) + _2046;
    }
    else
    {
        _2261 = _1697;
        _2263 = _1699;
        _2265 = _1701;
        _2267 = _2042;
        _2269 = _2044;
        _2271 = _2046;
    }
    float _4202 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4213 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4224 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2288 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2261 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _490))) + ((_2267 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2263 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _490))) + ((_2269 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2290 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2265 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _490))) + ((_2271 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    uint _2291 = _448 + 6u;
    float _2299 = _408 / cbSceneParam._m0[86u].x;
    float _2300 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2374 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2375 = _2374 / _328;
        float _2386 = _2375 * _380;
        float _2387 = _381 * _2375;
        float _2388 = (-0.0) - _2387;
        float _2390 = _2375 * _382;
        float _2392 = (cbSceneParam._m0[77u].w * _2388) / _2374;
        float _2393 = _2392 + cbSceneParam._m0[79u].w;
        float _2394 = cbSceneParam._m0[79u].w - _2387;
        float _2400 = sqrt(((_2386 * _2386) + (_2387 * _2387)) + (_2390 * _2390));
        float _2403 = (1.0 - (cbSceneParam._m0[77u].w / _2374)) * _2400;
        float _2408 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2410 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2388 - _2392) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2393 > 0.0) ? exp2(_2408 * _2393) : (2.0 - exp2(_2410 * _2393))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2403;
        }
        else
        {
            float _2531 = 1.0 / cbSceneParam._m0[80u].x;
            float _2532 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : max(_2393, _2394));
            float _2533 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : min(_2393, _2394));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            _2587 = ((abs(_2400 / _2388) * cbSceneParam._m0[80u].y) * ((((_2542 - _2543) * 2.0) - ((exp2(_2408 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)))) - exp2(_2408 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))))) * _2531)) - ((exp2(_2410 * _2542) - exp2(_2410 * _2543)) * _2531))) + (_2403 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2319);
        _2412 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2414 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2416 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2418 = _2598 * _2319;
    }
    else
    {
        _2412 = _2316;
        _2414 = _2317;
        _2416 = _2318;
        _2418 = _2319;
    }
    bool _2625;
    vec4 _2428;
    vec4 _2450;
    float _2452;
    float _2456;
    float _2457;
    float _2458;
    float _2459;
    bool _2469;
    for (;;)
    {
        _2428 = cbMatDynParam._m0[0u];
        float _2430 = roundEven(_2428.y);
        bool _2431 = _2430 == 3.0;
        float _2432 = log2(_2418);
        float _2439 = exp2(_2432 * cbSceneParam._m0[78u].x) * _2288;
        float _2440 = exp2(_2432 * cbSceneParam._m0[78u].y) * _2289;
        float _2441 = exp2(_2432 * cbSceneParam._m0[78u].z) * _2290;
        float _2448 = _396 + (-0.5);
        _2450 = cbMtdParam._m0[1u];
        _2452 = _2450.y * _2448;
        float _2455 = (_2430 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2456 = _2455 * (_2431 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2412)));
        _2457 = _2455 * (_2431 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2414)));
        _2458 = _2455 * (_2431 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2416)));
        _2459 = _2448 * 0.999000012874603271484375;
        _2469 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2469)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2459) < 0.5)
            {
                _2625 = true;
                break;
            }
        }
        uint _2566 = _450 + uint(_2428.w);
        if ((cbInstanceData._m0[_2566].w < 1.0) && ((cbInstanceData._m0[_2566].w + _2459) < 0.5))
        {
            _2625 = true;
            break;
        }
        if ((_2452 + 1.0) < _2450.x)
        {
            _2625 = true;
            break;
        }
        _2625 = false;
        break;
    }
    float _2830;
    if (_2625)
    {
        discard_state = true;
        _2830 = 0.0;
    }
    else
    {
        _2830 = cbInstanceData._m0[_2291].w;
    }
    SV_Target.x = _2456;
    SV_Target.y = _2457;
    SV_Target.z = _2458;
    SV_Target.w = _2830;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
    discard_exit();
}


