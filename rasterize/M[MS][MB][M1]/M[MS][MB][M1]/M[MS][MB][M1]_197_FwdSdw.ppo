#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1398;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4005 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4016 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4027 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4038 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _439 = (_432 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _440 = (_432 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _441 = (_432 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].y) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4049 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _518 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _512;
    float _521 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _513;
    float _524 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _514;
    float _531 = ((_512 - _518) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) + _518;
    float _532 = ((_513 - _521) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) + _521;
    float _533 = ((_514 - _524) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) + _524;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _432) + _613;
    float _623 = ((_594.y - _614) * _432) + _614;
    float _624 = ((_594.z - _615) * _432) + _615;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_636.z - _624) * _505) + _624;
    float _652 = ((((_636.x - _622) * _505) + _622) * 2.0) + (-1.0);
    float _653 = ((((_636.y - _623) * _505) + _623) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _4060 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))));
    vec4 _672 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _706 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_692 - _693) * cbMtdParam._m0[24u].z) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4071 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _714 = (_707 * ((_552.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _715 = (_707 * ((_552.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _716 = (_707 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _728 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _744 = _742.x;
    float _762 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _744) * _432) + _744;
    float _779 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _762) * _505) + _762;
    float _783 = ((_728.x - _779) * cbMtdParam._m0[19u].z) + _779;
    float _785 = _783 - (_783 * _707);
    float _790 = (((_571.z - _649) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _649;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4082 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = (_707 * (_803.z - _790)) + _790;
    float _825 = _652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_571.x * 2.0) + (-1.0)));
    float _826 = _653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_571.y * 2.0) + (-1.0)));
    float _838 = (((_810 - _825) + (cbMtdParam._m0[21u].x * _825)) * _707) + _825;
    float _839 = (((_811 - _826) + (cbMtdParam._m0[21u].x * _826)) * _707) + _826;
    float _840 = (_707 * (sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) - _659)) + _659;
    float _844 = cbMtdParam._m0[22u].x + _672.w;
    float _847 = fma(_840, _246 * NORMAL.x, fma(_839, _253 * TANGENT.x, (_239 * _231) * _838));
    float _850 = fma(_840, _246 * NORMAL.y, fma(_839, _253 * TANGENT.y, (_239 * _232) * _838));
    float _853 = fma(_840, _246 * NORMAL.z, fma(_839, _253 * TANGENT.z, (_239 * _233) * _838));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    float _858 = _857 * _847;
    float _859 = _857 * _850;
    float _860 = _857 * _853;
    float _4093 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _861 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4115 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4126 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4137 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4148 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _866 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_860, cbSceneParam._m0[5u].z, fma(_859, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _858));
    float _968 = fma(_860, cbSceneParam._m0[6u].z, fma(_859, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _858));
    float _971 = fma(_860, cbSceneParam._m0[7u].z, fma(_859, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _858));
    uint _985 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4159 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _997 = 1.0 - _866;
    float _998 = _994 * _997;
    float _999 = _995 * _997;
    float _1000 = _996 * _997;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _866;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _866;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _866;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_858, _859, _860), vec3(_938, _939, _940));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _858) - _938;
    float _1033 = (_1028 * _859) - _939;
    float _1034 = (_1028 * _860) - _940;
    float _1038 = abs(dot(vec3(_938, _939, _940), vec3(_858, _859, _860)));
    float _4192 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_861);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1040;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1126 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1130 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1155 = _1088 + _858;
        float _1156 = _1092 + _859;
        float _1157 = _1096 + _860;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1122;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1126;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1130;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_858, _859, _860), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4240 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_858, _859, _860), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4273 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_858, _859, _860), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4306 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1440 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1444 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1467 = _1088 + _858;
        float _1468 = _1092 + _859;
        float _1469 = _1096 + _860;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_858, _859, _860), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4369 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_858, _859, _860), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4402 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_858, _859, _860), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4435 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1398;
        _1706 = _1398;
        _1707 = _1398;
        _1708 = _1398;
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1410)) + _1410;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1411)) + _1411;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1412)) + _1412;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _1032 * 0.5;
    float _1774 = _1033 * 0.5;
    float _1775 = _1034 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _861);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1903 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1906 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1934 = frontier_phi_14_12_ladder;
        }
        float _2105;
        if (_1903 > 0.0)
        {
            _2105 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2105 = frontier_phi_23_19_ladder;
        }
        float _2400;
        if (_1906 > 0.0)
        {
            _2400 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2400 = frontier_phi_35_30_ladder;
        }
        float _2402 = isnan(_2105) ? _1934 : (isnan(_1934) ? _2105 : min(_1934, _2105));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1900) + _1889;
        float _2408 = (_2403 * _1903) + _1893;
        float _2409 = (_2403 * _1906) + _1897;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_13_35_ladder = _2554.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2554.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2554.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_13_35_ladder_2;
        _1924 = frontier_phi_13_35_ladder_1;
        _1926 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1842);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _861);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1984 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _1988 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _1992 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _1995 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _1998 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2001 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2110;
        if (_1995 > 0.0)
        {
            _2110 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2110 = frontier_phi_25_21_ladder;
        }
        float _2427;
        if (_1998 > 0.0)
        {
            _2427 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2427 = frontier_phi_37_32_ladder;
        }
        float _2765;
        if (_2001 > 0.0)
        {
            _2765 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2765 = frontier_phi_47_44_ladder;
        }
        float _2767 = isnan(_2427) ? _2110 : (isnan(_2110) ? _2427 : min(_2110, _2427));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _1995) + _1984;
        float _2773 = (_2768 * _1998) + _1988;
        float _2774 = (_2768 * _2001) + _1992;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_22_47_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2020 = frontier_phi_22_47_ladder_2;
        _2022 = frontier_phi_22_47_ladder_1;
        _2024 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1931);
        _2020 = _2004.x * cbModelParam._m0[1u].z;
        _2022 = _2004.y * cbModelParam._m0[1u].z;
        _2024 = _2004.z * cbModelParam._m0[1u].z;
    }
    float _2037 = (((_1059 * _1008) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1059 * _1010) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1059 * _1011) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2044 = fma(_2041, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2037 * cbSceneParam._m0[89u].x));
    float _2047 = fma(_2041, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2037 * cbSceneParam._m0[90u].x));
    float _2050 = fma(_2041, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2037 * cbSceneParam._m0[91u].x));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2097 = _2084 / _2096;
    float _2098 = _2088 / _2096;
    float _2099 = _2092 / _2096;
    float _2246;
    float _2247;
    float _2248;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2126 = ((uint(_2099 > cbSceneParam._m0[59u].y) + uint(_2099 > cbSceneParam._m0[59u].x)) + uint(_2099 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2127 = _2126 + 43u;
        uint _2135 = _2126 + 44u;
        uint _2143 = _2126 + 45u;
        uint _2151 = _2126 + 46u;
        float _2162 = fma(_2096, cbSceneParam._m0[_2127].w, fma(_2092, cbSceneParam._m0[_2127].z, fma(_2088, cbSceneParam._m0[_2127].y, _2084 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2096, cbSceneParam._m0[_2135].w, fma(_2092, cbSceneParam._m0[_2135].z, fma(_2088, cbSceneParam._m0[_2135].y, _2084 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2096, cbSceneParam._m0[_2151].w, fma(_2092, cbSceneParam._m0[_2151].z, fma(_2088, cbSceneParam._m0[_2151].y, _2084 * cbSceneParam._m0[_2151].x)));
        float _2179 = cbSceneParam._m0[33u].z * _2174;
        float _2181 = cbSceneParam._m0[33u].w * _2174;
        float _2184 = fma(_2096, cbSceneParam._m0[_2143].w, fma(_2092, cbSceneParam._m0[_2143].z, fma(_2088, cbSceneParam._m0[_2143].y, _2084 * cbSceneParam._m0[_2143].x))) / _2174;
        float _2232 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
        float _4561 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2239 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 + _2162) / _2174, (_2181 + _2166) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 + _2162) / _2174, (_2166 - _2179) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2179) / _2174, (_2166 - _2181) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2181) / _2174, (_2179 + _2166) / _2174), _2184), 0.0)).x), vec4(0.25)));
        _2246 = 1.0 - (_2239 * cbSceneParam._m0[34u].x);
        _2247 = 1.0 - (_2239 * cbSceneParam._m0[34u].y);
        _2248 = 1.0 - (_2239 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2246 = 1.0;
        _2247 = 1.0;
        _2248 = 1.0;
    }
    float _2312;
    float _2314;
    float _2316;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2300 = fma(_2096, cbSceneParam._m0[63u].w, fma(_2092, cbSceneParam._m0[63u].z, fma(_2088, cbSceneParam._m0[63u].y, _2084 * cbSceneParam._m0[63u].x)));
        float _2301 = fma(_2096, cbSceneParam._m0[60u].w, fma(_2092, cbSceneParam._m0[60u].z, fma(_2088, cbSceneParam._m0[60u].y, _2084 * cbSceneParam._m0[60u].x))) / _2300;
        float _2302 = fma(_2096, cbSceneParam._m0[61u].w, fma(_2092, cbSceneParam._m0[61u].z, fma(_2088, cbSceneParam._m0[61u].y, _2084 * cbSceneParam._m0[61u].x))) / _2300;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2301 >= cbSceneParam._m0[64u].x) && (_2302 >= cbSceneParam._m0[64u].y)) && (_2301 <= cbSceneParam._m0[64u].z)) && (_2302 <= cbSceneParam._m0[64u].w))
        {
            float _2440 = fma(_2096, cbSceneParam._m0[62u].w, fma(_2092, cbSceneParam._m0[62u].z, fma(_2088, cbSceneParam._m0[62u].y, _2084 * cbSceneParam._m0[62u].x))) / _2300;
            float _2444 = isnan(cbSceneParam._m0[41u].w) ? _2440 : (isnan(_2440) ? cbSceneParam._m0[41u].w : max(_2440, cbSceneParam._m0[41u].w));
            float _2487 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
            float _4577 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
            float _2494 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2301, cbSceneParam._m0[33u].w + _2302), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2301, _2302 - cbSceneParam._m0[33u].z), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].z, _2302 - cbSceneParam._m0[33u].w), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2302), _2444), 0.0)).x), vec4(0.25)));
            float _2498 = 1.0 - (_2494 * cbSceneParam._m0[34u].x);
            float _2499 = 1.0 - (_2494 * cbSceneParam._m0[34u].y);
            float _2500 = 1.0 - (_2494 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
            frontier_phi_34_33_ladder_1 = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_34_33_ladder_2 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
        }
        else
        {
            frontier_phi_34_33_ladder = _2248;
            frontier_phi_34_33_ladder_1 = _2247;
            frontier_phi_34_33_ladder_2 = _2246;
        }
        _2312 = frontier_phi_34_33_ladder_2;
        _2314 = frontier_phi_34_33_ladder_1;
        _2316 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2312 = _2246;
        _2314 = _2247;
        _2316 = _2248;
    }
    uvec4 _2321 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2323 = _2321.x * 14u;
    uint _2324 = _2323 + 13u;
    float _2331 = _1024 + (-1.0);
    float _2336 = (cbLight._m0[_2324].x * _2331) + 1.0;
    float _2337 = (cbLight._m0[_2324].y * _2331) + 1.0;
    float _2338 = (cbLight._m0[_2324].z * _2331) + 1.0;
    float _2339 = (cbLight._m0[_2324].w * _2331) + 1.0;
    uint _2340 = _2323 + 5u;
    float _2346 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2350 = _2323 + 4u;
    float _2359 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2363 = _2323 | 1u;
    float _2374 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_858, _859, _860));
    float _2377 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_858, _859, _860));
    float _4613 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _4624 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2382 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2384 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2391 = ((cbLight._m0[_2340].x * _2346) * _2384) + (((cbLight._m0[_2350].x * _2312) * _2359) * _2382);
    float _2392 = ((_2346 * cbLight._m0[_2340].y) * _2384) + (((cbLight._m0[_2350].y * _2314) * _2359) * _2382);
    float _2393 = ((_2346 * cbLight._m0[_2340].z) * _2384) + (((cbLight._m0[_2350].z * _2316) * _2359) * _2382);
    uvec4 _2397 = floatBitsToUint(cbLight._m0[_2323 + 12u]);
    bool _2399 = _2397.x == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2399)
    {
        _2501 = _2391;
        _2503 = _2392;
        _2505 = _2393;
    }
    else
    {
        uint _2509 = _2323 + 6u;
        float _2525 = (dot(vec3(cbLight._m0[_2323 + 2u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4635 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2528 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2501 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2391;
        _2503 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2392;
        _2505 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2393;
    }
    bool _2508 = _2397.y == 0u;
    float _2563;
    float _2565;
    float _2567;
    if (_2508)
    {
        _2563 = _2501;
        _2565 = _2503;
        _2567 = _2505;
    }
    else
    {
        uint _2736 = _2323 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2323 + 3u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4651 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2755 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2563 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2501;
        _2565 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2503;
        _2567 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2505;
    }
    uint _2570 = _2323 + 8u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _861) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2323].x + _938;
    float _2586 = cbLight._m0[_2323].y + _939;
    float _2587 = cbLight._m0[_2323].z + _940;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2323].xyz));
    float _4667 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _4678 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2599 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2600 = dot(vec3(_858, _859, _860), vec3(_2592, _2593, _2594));
    float _4689 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2592, _2593, _2594));
    float _4700 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2584 * _2584;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2621 = 0.959999978542327880859375 - _1005;
    float _2623 = 0.959999978542327880859375 - _1006;
    float _2624 = 0.959999978542327880859375 - _1007;
    float _2631 = 1.0 - _2584;
    float _2642 = (0.5 / (((_2599 * ((_2598 * _2631) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2631) + _2584) * _2598))) * _2598;
    float _4711 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    uint _2658 = _2323 + 9u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _861) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2363].x + _938;
    float _2672 = cbLight._m0[_2363].y + _939;
    float _2673 = cbLight._m0[_2363].z + _940;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2363].xyz));
    float _4722 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2685 = dot(vec3(_858, _859, _860), vec3(_2678, _2679, _2680));
    float _4733 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2678, _2679, _2680));
    float _4744 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2670 * _2670;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
    float _2711 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2599 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2711) + _2670) * _2684))) * _2684;
    float _4755 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2733 = (((((_2704 * _2621) + _1008) * cbLight._m0[_2658].x) * _2723) * _2346) + ((((cbLight._m0[_2570].x * _2312) * ((_2620 * _2621) + _1008)) * _2644) * _2359);
    float _2734 = (((((_2704 * _2623) + _1010) * cbLight._m0[_2658].y) * _2723) * _2346) + ((((cbLight._m0[_2570].y * _2314) * ((_2620 * _2623) + _1010)) * _2644) * _2359);
    float _2735 = (((((_2704 * _2624) + _1011) * cbLight._m0[_2658].z) * _2723) * _2346) + ((((cbLight._m0[_2570].z * _2316) * ((_2620 * _2624) + _1011)) * _2644) * _2359);
    float _2791;
    float _2793;
    float _2795;
    if (_2399)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2323 + 2u;
        uint _2801 = _2323 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _861) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _938;
        float _2818 = cbLight._m0[_2797].y + _939;
        float _2819 = cbLight._m0[_2797].z + _940;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2797].xyz));
        float _4766 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2831 = dot(vec3(_858, _859, _860), vec3(_2824, _2825, _2826));
        float _4777 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4788 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2850 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
        float _2857 = 1.0 - _2816;
        float _2867 = (0.5 / (((_2599 * ((_2830 * _2857) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2857) + _2816) * _2830))) * _2830;
        float _4799 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2791 = (((((_2850 * _2621) + _1008) * cbLight._m0[_2801].x) * _2869) * _2870) + _2733;
        _2793 = (((((_2850 * _2623) + _1010) * cbLight._m0[_2801].y) * _2869) * _2870) + _2734;
        _2795 = (((((_2850 * _2624) + _1011) * cbLight._m0[_2801].z) * _2869) * _2870) + _2735;
    }
    float _2901;
    float _2903;
    float _2905;
    if (_2508)
    {
        _2901 = _2791;
        _2903 = _2793;
        _2905 = _2795;
    }
    else
    {
        uint _2912 = _2323 + 3u;
        uint _2916 = _2323 + 11u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _861) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _938;
        float _2933 = cbLight._m0[_2912].y + _939;
        float _2934 = cbLight._m0[_2912].z + _940;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2912].xyz));
        float _4815 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2946 = dot(vec3(_858, _859, _860), vec3(_2939, _2940, _2941));
        float _4826 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _4837 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2599 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2972) + _2931) * _2945))) * _2945;
        float _4848 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2901 = (((((_2965 * _2621) + _1008) * cbLight._m0[_2916].x) * _2984) * _2985) + _2791;
        _2903 = (((((_2965 * _2623) + _1010) * cbLight._m0[_2916].y) * _2984) * _2985) + _2793;
        _2905 = (((((_2965 * _2624) + _1011) * cbLight._m0[_2916].z) * _2984) * _2985) + _2795;
    }
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    if (_2321.y == 0u)
    {
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.x;
        uint _3018 = uint((float(_3006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _3007))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _3007)));
        float _3028 = (log2(_2099 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3029 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        uint _3032 = uint(isnan(14.0) ? _3029 : (isnan(_3029) ? 14.0 : min(_3029, 14.0)));
        uvec4 _3037 = texelFetch(g_lightClusterGridBuffer, int(((_3032 << 2u) + (_3018 << 6u)) >> 2u));
        uint _3038 = _3037.x;
        uint _3039 = _3006.z;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((((1u << ((_3039 >> 4u) & 15u)) + 4294967295u) & _3038) == 0u) || ((_3039 & 240u) == 0u))
        {
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
        }
        else
        {
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            uint _3269 = 0u;
            uint _3278;
            bool _3279;
            for (;;)
            {
                _3278 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                _3279 = _3278 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3279)
                {
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3267;
                    frontier_phi_66_pred_2 = _3266;
                    frontier_phi_66_pred_3 = _3265;
                    frontier_phi_66_pred_4 = _3264;
                    frontier_phi_66_pred_5 = _3263;
                }
                else
                {
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    uint _3393;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3278;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    for (;;)
                    {
                        uint _3397 = uint(findLSB(_3393)) + (_3269 << 5u);
                        uint _3394 = (_3393 + 4294967295u) & _3393;
                        uint _3399 = _3397 * 48u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3419 = (_3397 * 48u) + 4u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3438 = (_3397 * 48u) + 8u;
                        vec3 _3449 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x));
                        float _3453 = _3413.x - _2097;
                        float _3454 = _3413.y - _2098;
                        float _3455 = _3413.z - _2099;
                        float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                        float _3459 = inversesqrt(_3456);
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3463 = dot(vec3(_965, _968, _971), vec3(_3460, _3461, _3462));
                        float _3468 = 1.0 - (_3456 * _3413.w);
                        float _4874 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3470 = sqrt(_3456) * _3432.w;
                        float _3473 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3463) + _3474;
                        float _3480 = _3470 * _3470;
                        float _3484 = ((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3469) / ((_3480 * 0.699999988079071044921875) + 1.0);
                        float _3488 = (-0.0) - _2097;
                        float _3489 = (-0.0) - _2098;
                        float _3490 = (-0.0) - _2099;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3504 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                        float _3505 = 1.0 - _1040;
                        float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                        float _3513 = _3512 * _3512;
                        float _3514 = _3513 * _3513;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3525 = dot(vec3(_965, _968, _971), vec3(_3495, _3496, _3497));
                        float _4890 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3529 = dot(vec3(_965, _968, _971), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                        float _4901 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                        float _3537 = _3473 * _3513;
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3463) + _3538;
                        float _4912 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3543 = 1.0 - _3513;
                        float _3553 = (0.5 / (((_3542 * ((_3528 * _3543) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3513) * _3528))) * _3542;
                        float _4923 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3564 = (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3536 * _3536) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125))) * _3469;
                        _3322 = (_3484 * _3432.x) + _3390;
                        _3323 = (_3484 * _3432.y) + _3391;
                        _3324 = (_3484 * _3432.z) + _3392;
                        _3319 = (_3564 * _3449.x) + _3387;
                        _3320 = (_3564 * _3449.y) + _3388;
                        _3321 = (_3564 * _3449.z) + _3389;
                        if (_3394 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3394;
                        }
                    }
                    frontier_phi_66_pred = _3324;
                    frontier_phi_66_pred_1 = _3323;
                    frontier_phi_66_pred_2 = _3322;
                    frontier_phi_66_pred_3 = _3321;
                    frontier_phi_66_pred_4 = _3320;
                    frontier_phi_66_pred_5 = _3319;
                }
                _3129 = frontier_phi_66_pred;
                _3127 = frontier_phi_66_pred_1;
                _3125 = frontier_phi_66_pred_2;
                _3123 = frontier_phi_66_pred_3;
                _3121 = frontier_phi_66_pred_4;
                _3119 = frontier_phi_66_pred_5;
                uint _3270 = _3269 + 1u;
                if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3263 = _3119;
                    _3264 = _3121;
                    _3265 = _3123;
                    _3266 = _3125;
                    _3267 = _3127;
                    _3268 = _3129;
                    _3269 = _3270;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
        }
        uvec4 _3132 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3133 = _3132.z;
        uint _3135 = (_3133 >> 8u) & 15u;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        if (((4294967295u << _3135) & _3038) == 0u)
        {
            _3231 = _3118;
            _3233 = _3120;
            _3235 = _3122;
            _3237 = _3124;
            _3239 = _3126;
            _3241 = _3128;
        }
        else
        {
            float _3256 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
            float _3257 = _3256 * _2097;
            float _3258 = _3256 * _2098;
            float _3259 = _3256 * _2099;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3135 < ((_3133 >> 12u) & 15u))
            {
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3370 = _3118;
                float _3371 = _3120;
                float _3372 = _3122;
                float _3373 = _3124;
                float _3374 = _3126;
                float _3375 = _3128;
                uint _3376 = _3135;
                uint _3385;
                bool _3386;
                for (;;)
                {
                    _3385 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                    _3386 = _3385 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3386)
                    {
                        frontier_phi_72_pred = _3375;
                        frontier_phi_72_pred_1 = _3374;
                        frontier_phi_72_pred_2 = _3373;
                        frontier_phi_72_pred_3 = _3372;
                        frontier_phi_72_pred_4 = _3371;
                        frontier_phi_72_pred_5 = _3370;
                    }
                    else
                    {
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        float _3587 = _3375;
                        uint _3588 = _3385;
                        uint _3589;
                        vec4 _3614;
                        float _3615;
                        vec4 _3630;
                        vec3 _3642;
                        vec4 _3657;
                        vec4 _3672;
                        float _3718;
                        bool _3719;
                        for (;;)
                        {
                            uint _3599 = ((_3376 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3588));
                            _3589 = (_3588 + 4294967295u) & _3588;
                            uint _3601 = _3599 * 40u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3615 = _3614.w;
                            uint _3617 = (_3599 * 40u) + 4u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3599 * 40u) + 8u;
                            _3642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x));
                            uint _3644 = (_3599 * 40u) + 16u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3599 * 40u) + 20u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3599 * 40u) + 24u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3693 = (_3599 * 40u) + 28u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3718 = fma(_2099, _3706.z, fma(_2098, _3706.y, _3706.x * _2097)) + _3706.w;
                            _3719 = !((fma(_2099, _3687.z, fma(_2098, _3687.y, _3687.x * _2097)) + _3687.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3719)
                            {
                                float _3746 = _3614.x - _2097;
                                float _3747 = _3614.y - _2098;
                                float _3748 = _3614.z - _2099;
                                float _3749 = dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748));
                                float _3752 = inversesqrt(_3749);
                                float _3753 = _3752 * _3746;
                                float _3754 = _3752 * _3747;
                                float _3755 = _3752 * _3748;
                                float _3759 = 1.0 - (_3749 / (_3615 * _3615));
                                float _4934 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3764 = sqrt(_3749) * _3630.w;
                                float _3766 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                                float _3767 = _3766 * _3766;
                                float _3770 = ((1.0 - _3767) * dot(vec3(_3753, _3754, _3755), vec3(_965, _968, _971))) + _3767;
                                float _3773 = _3764 * _3764;
                                float _3777 = (fma(_2099, _3657.z, fma(_2098, _3657.y, _3657.x * _2097)) + _3657.w) / _3718;
                                float _3778 = (fma(_2099, _3672.z, fma(_2098, _3672.y, _3672.x * _2097)) + _3672.w) / _3718;
                                float _3782 = 1.0 - dot(vec2(_3777, _3778), vec2(_3777, _3778));
                                float _4950 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3784 = _3783 * (((isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0))) * _3760) / ((_3773 * 0.699999988079071044921875) + 1.0));
                                float _3796 = exp2(log2(1.0 / ((_3773 * 3.5) + 5.0)) * 0.25);
                                float _3797 = 1.0 - _1040;
                                float _3804 = sqrt(1.0 - ((1.0 - (_3797 * _3797)) * (1.0 - (_3796 * _3796))));
                                float _3805 = _3804 * _3804;
                                float _3806 = _3805 * _3805;
                                float _3807 = _3753 - _3257;
                                float _3808 = _3754 - _3258;
                                float _3809 = _3755 - _3259;
                                float _3813 = inversesqrt(dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809)));
                                float _3817 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3257, (-0.0) - _3258, (-0.0) - _3259));
                                float _4961 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3821 = dot(vec3(_965, _968, _971), vec3(_3813 * _3807, _3813 * _3808, _3813 * _3809));
                                float _4972 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3828 = ((_3824 * _3824) * (_3806 + (-1.0))) + 1.0;
                                float _3829 = _3766 * _3805;
                                float _3830 = _3829 * _3829;
                                float _3836 = ((1.0 - _3830) * dot(vec3(_965, _968, _971), vec3(_3753, _3754, _3755))) + _3830;
                                float _4983 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3838 = 1.0 - _3805;
                                float _3848 = (0.5 / (((_3837 * ((_3820 * _3838) + _3805)) + 9.9999999392252902907785028219223e-09) + (((_3837 * _3838) + _3805) * _3820))) * _3837;
                                float _4994 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3858 = (_3783 * _3760) * (((_3806 * 3.1415927410125732421875) * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) / ((_3828 * _3828) * ((_3773 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3784 * _3630.y;
                                frontier_phi_78_pred_1 = _3784 * _3630.x;
                                frontier_phi_78_pred_2 = _3858 * _3642.z;
                                frontier_phi_78_pred_3 = _3858 * _3642.y;
                                frontier_phi_78_pred_4 = _3858 * _3642.x;
                                frontier_phi_78_pred_5 = _3784 * _3630.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_78_pred;
                            _3865 = frontier_phi_78_pred_1;
                            _3864 = frontier_phi_78_pred_2;
                            _3863 = frontier_phi_78_pred_3;
                            _3862 = frontier_phi_78_pred_4;
                            _3867 = frontier_phi_78_pred_5;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            if (_3589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3589;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3574;
                        frontier_phi_72_pred_1 = _3573;
                        frontier_phi_72_pred_2 = _3572;
                        frontier_phi_72_pred_3 = _3571;
                        frontier_phi_72_pred_4 = _3570;
                        frontier_phi_72_pred_5 = _3569;
                    }
                    _3242 = frontier_phi_72_pred;
                    _3240 = frontier_phi_72_pred_1;
                    _3238 = frontier_phi_72_pred_2;
                    _3236 = frontier_phi_72_pred_3;
                    _3234 = frontier_phi_72_pred_4;
                    _3232 = frontier_phi_72_pred_5;
                    uint _3377 = _3376 + 1u;
                    if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3370 = _3232;
                        _3371 = _3234;
                        _3372 = _3236;
                        _3373 = _3238;
                        _3374 = _3240;
                        _3375 = _3242;
                        _3376 = _3377;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3242;
                frontier_phi_60_61_ladder_1 = _3240;
                frontier_phi_60_61_ladder_2 = _3236;
                frontier_phi_60_61_ladder_3 = _3234;
                frontier_phi_60_61_ladder_4 = _3232;
                frontier_phi_60_61_ladder_5 = _3238;
            }
            else
            {
                frontier_phi_60_61_ladder = _3128;
                frontier_phi_60_61_ladder_1 = _3126;
                frontier_phi_60_61_ladder_2 = _3122;
                frontier_phi_60_61_ladder_3 = _3120;
                frontier_phi_60_61_ladder_4 = _3118;
                frontier_phi_60_61_ladder_5 = _3124;
            }
            _3231 = frontier_phi_60_61_ladder_4;
            _3233 = frontier_phi_60_61_ladder_3;
            _3235 = frontier_phi_60_61_ladder_2;
            _3237 = frontier_phi_60_61_ladder_5;
            _3239 = frontier_phi_60_61_ladder_1;
            _3241 = frontier_phi_60_61_ladder;
        }
        float _3246 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3051 = (_3246 * _3237) + _2563;
        _3053 = (_3246 * _3239) + _2565;
        _3055 = (_3246 * _3241) + _2567;
        _3057 = ((_3231 * _1008) * _3246) + _2901;
        _3059 = ((_3233 * _1010) * _3246) + _2903;
        _3061 = ((_3235 * _1011) * _3246) + _2905;
    }
    else
    {
        _3051 = _2563;
        _3053 = _2565;
        _3055 = _2567;
        _3057 = _2901;
        _3059 = _2903;
        _3061 = _2905;
    }
    float _5010 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5021 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5032 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    uint _3081 = _280 + 6u;
    float _3089 = _946 / cbSceneParam._m0[86u].x;
    float _3090 = _947 / cbSceneParam._m0[86u].y;
    vec4 _3104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3089, _3090, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3106 = _3104.x;
    float _3107 = _3104.y;
    float _3108 = _3104.z;
    float _3109 = _3104.w;
    float _3181;
    float _3183;
    float _3185;
    float _3187;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _3143 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _3144 = _3143 / _880;
        float _3155 = _3144 * _931;
        float _3156 = _932 * _3144;
        float _3157 = (-0.0) - _3156;
        float _3159 = _3144 * _933;
        float _3161 = (cbSceneParam._m0[77u].w * _3157) / _3143;
        float _3162 = _3161 + cbSceneParam._m0[79u].w;
        float _3163 = cbSceneParam._m0[79u].w - _3156;
        float _3169 = sqrt(((_3155 * _3155) + (_3156 * _3156)) + (_3159 * _3159));
        float _3172 = (1.0 - (cbSceneParam._m0[77u].w / _3143)) * _3169;
        float _3177 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3179 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3332;
        if (abs((_3157 - _3161) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3332 = ((((_3162 > 0.0) ? exp2(_3177 * _3162) : (2.0 - exp2(_3179 * _3162))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3172;
        }
        else
        {
            float _3292 = 1.0 / cbSceneParam._m0[80u].x;
            float _3293 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : max(_3162, _3163));
            float _3294 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : min(_3162, _3163));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            _3332 = ((abs(_3169 / _3157) * cbSceneParam._m0[80u].y) * ((((_3303 - _3304) * 2.0) - ((exp2(_3177 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0)))) - exp2(_3177 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))))) * _3292)) - ((exp2(_3179 * _3303) - exp2(_3179 * _3304)) * _3292))) + (_3172 * cbSceneParam._m0[80u].z);
        }
        vec4 _3334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3089, _3090, 1.0), 0.0);
        float _3343 = exp2((_3332 * (-1.44269502162933349609375)) * (1.0 - _3334.w));
        float _3344 = log2(_3343);
        float _3360 = log2(_3109);
        _3181 = (exp2(_3360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].x)) * _3334.x) / cbSceneParam._m0[78u].x)) + _3106;
        _3183 = (exp2(_3360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].y)) * _3334.y) / cbSceneParam._m0[78u].y)) + _3107;
        _3185 = (exp2(_3360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].z)) * _3334.z) / cbSceneParam._m0[78u].z)) + _3108;
        _3187 = _3343 * _3109;
    }
    else
    {
        _3181 = _3106;
        _3183 = _3107;
        _3185 = _3108;
        _3187 = _3109;
    }
    float _3199 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3200 = _3199 == 3.0;
    float _3201 = log2(_3187);
    float _3208 = exp2(_3201 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_3051 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1024))) + ((_3057 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _3209 = exp2(_3201 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3053 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1024))) + ((_3059 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _3210 = exp2(_3201 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3055 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1024))) + ((_3061 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _3219 = (_3199 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3219 * (_3200 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.y = _3219 * (_3200 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.z = _3219 * (_3200 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3185)));
    SV_Target.w = cbInstanceData._m0[_3081].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3081].w;
}


