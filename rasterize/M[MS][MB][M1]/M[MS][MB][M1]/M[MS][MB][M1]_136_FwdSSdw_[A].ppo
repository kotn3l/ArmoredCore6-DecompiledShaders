#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1456;
float _3859;
float _3860;
float _3861;
float _3862;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3871 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3882 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3893 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3904 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _438) + _551;
    float _563 = ((((_530.x - _549) * _438) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _438) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3915 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _620 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _623 = ((isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : min(_620, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _632 = (_623 - ((((((_613 - _614) * cbMtdParam._m0[24u].z) + _614) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _623))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _640 = (_633 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) + _464;
    float _641 = (_633 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) + _465;
    float _642 = (_633 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) + _466;
    vec4 _654 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _656 = _654.x;
    float _657 = 1.0 - _656;
    float _682 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_656 - _657) * cbMtdParam._m0[24u].w) + _657) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3947 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _691 = ((((cbMtdParam._m0[10u].x - _640) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _683) + _640;
    float _692 = ((((cbMtdParam._m0[10u].y - _641) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _683) + _641;
    float _693 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _642)) * _683) + _642;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _721 = _719.x;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _721) * _438) + _721;
    float _743 = ((_705.x - _739) * cbMtdParam._m0[19u].z) + _739;
    float _745 = _743 - (_743 * _633);
    float _747 = _745 - (_745 * _683);
    float _752 = (((_505.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    float _756 = ((_586.z - _752) * cbMtdParam._m0[19u].w) + _752;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _3958 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = (_633 * (_770.z - _756)) + _756;
    float _790 = ((cbMtdParam._m0[23u].y - _787) * _683) + _787;
    vec4 _809 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3969 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _831 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_505.x * 2.0) + (-1.0)))) + (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _832 = (_564 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_505.y * 2.0) + (-1.0)))) + (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _844 = (((_777 - _831) + (cbMtdParam._m0[21u].x * _831)) * _633) + _831;
    float _845 = (((_778 - _832) + (cbMtdParam._m0[21u].x * _832)) * _633) + _832;
    float _846 = (_633 * (sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _570)) + _570;
    float _857 = (((_815 - _844) + (_844 * cbMtdParam._m0[22u].z)) * _683) + _844;
    float _858 = (((_816 - _845) + (_845 * cbMtdParam._m0[22u].z)) * _683) + _845;
    float _859 = ((sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _846) * _683) + _846;
    float _863 = cbMtdParam._m0[22u].x + _586.w;
    float _866 = fma(_859, _255 * NORMAL.x, fma(_858, _262 * TANGENT.x, (_248 * _240) * _857));
    float _869 = fma(_859, _255 * NORMAL.y, fma(_858, _262 * TANGENT.y, (_248 * _241) * _857));
    float _872 = fma(_859, _255 * NORMAL.z, fma(_858, _262 * TANGENT.z, (_248 * _242) * _857));
    float _876 = inversesqrt(dot(vec3(_866, _869, _872), vec3(_866, _869, _872)));
    float _877 = _876 * _866;
    float _878 = _876 * _869;
    float _879 = _876 * _872;
    float _3980 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _880 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4002 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4013 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4024 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4035 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _885 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _899 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _949 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _939);
    float _950 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _939);
    float _951 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _939);
    float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
    float _956 = _949 * _955;
    float _957 = _950 * _955;
    float _958 = _951 * _955;
    vec4 _963 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _965 = _963.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1137 = sqrt(((_949 * _949) + (_950 * _950)) + (_951 * _951));
        float _1143 = (cbMatDynParam._m0[5u].x * _1137) + cbMatDynParam._m0[5u].y;
        float _4046 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1148 = (cbMatDynParam._m0[5u].z * _1137) + cbMatDynParam._m0[5u].w;
        float _4057 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) - _1144)) + _1144) < ((_965 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _976 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _977 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _995 = fma(_879, cbSceneParam._m0[5u].z, fma(_878, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _877));
    float _998 = fma(_879, cbSceneParam._m0[6u].z, fma(_878, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _877));
    float _1001 = fma(_879, cbSceneParam._m0[7u].z, fma(_878, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _877));
    uint _1014 = _287 + 9u;
    uint _1015 = _1014 + uint(cbMatDynParam._m0[0u].w);
    float _1021 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1015].x;
    float _1022 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1015].y;
    float _1023 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1015].z;
    float _4068 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1027 = 1.0 - _885;
    float _1028 = _1024 * _1027;
    float _1029 = _1025 * _1027;
    float _1030 = _1026 * _1027;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _885;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _885;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _885;
    float _1038 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    vec4 _1050 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _976, cbSceneParam._m0[86u].y * _977));
    float _1054 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _1050.x;
    float _1055 = dot(vec3(_877, _878, _879), vec3(_956, _957, _958));
    float _1058 = _1055 * 2.0;
    float _1062 = (_1058 * _877) - _956;
    float _1063 = (_1058 * _878) - _957;
    float _1064 = (_1058 * _879) - _958;
    float _1068 = abs(dot(vec3(_956, _957, _958), vec3(_877, _878, _879)));
    float _4101 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1070 = sqrt(_880);
    float _1083 = exp2((_1070 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1070 * 3.0));
    float _1089 = (1.0 - _1083) * ((_1070 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1090 = _1083 * _1070;
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1455;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1180 = fma(_1126, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118));
        float _1184 = fma(_1126, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118));
        float _1188 = fma(_1126, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118));
        float _1213 = _1118 + _877;
        float _1214 = _1122 + _878;
        float _1215 = _1126 + _879;
        float _1225 = fma(_1215, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213)) - _1180;
        float _1226 = fma(_1215, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213)) - _1184;
        float _1227 = fma(_1215, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213)) - _1188;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1180 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1184 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[34u].z) + ((((((_1188 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1283 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1249.x + (-0.5));
        float _1285 = _1283 * (_1249.y + (-0.5));
        float _1286 = _1283 * (_1249.z + (-0.5));
        float _1293 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1256.x + (-0.5));
        float _1295 = _1293 * (_1256.y + (-0.5));
        float _1296 = _1293 * (_1256.z + (-0.5));
        float _1303 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1263.x + (-0.5));
        float _1305 = _1303 * (_1263.y + (-0.5));
        float _1306 = _1303 * (_1263.z + (-0.5));
        float _1313 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1270.x + (-0.5));
        float _1315 = _1313 * (_1270.y + (-0.5));
        float _1316 = _1313 * (_1270.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1337 = (dot(vec3(_877, _878, _879), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1347 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4149 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1349 + 1.0))) + _1354) * _1317;
        float _1364 = _1285 * 0.5;
        float _1365 = _1295 * 0.5;
        float _1366 = _1305 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_877, _878, _879), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4182 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1391 + 1.0))) + _1396) * _1318;
        float _1406 = _1286 * 0.5;
        float _1407 = _1296 * 0.5;
        float _1408 = _1306 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_877, _878, _879), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4215 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1433 + 1.0))) + _1438) * _1319;
        _1455 = _1286;
        _1457 = _1285;
        _1458 = _1284;
        _1459 = _1296;
        _1460 = _1295;
        _1461 = _1294;
        _1462 = _1306;
        _1463 = _1305;
        _1464 = _1304;
        _1465 = _1319;
        _1466 = _1318;
        _1467 = _1317;
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1456;
        _1457 = _1456;
        _1458 = _1456;
        _1459 = _1456;
        _1460 = _1456;
        _1461 = _1456;
        _1462 = _1456;
        _1463 = _1456;
        _1464 = _1456;
        _1465 = _1456;
        _1466 = _1456;
        _1467 = _1456;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1498 = fma(_1126, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118));
        float _1502 = fma(_1126, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118));
        float _1506 = fma(_1126, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118));
        float _1529 = _1118 + _877;
        float _1530 = _1122 + _878;
        float _1531 = _1126 + _879;
        float _1541 = fma(_1531, cbModelParam._m0[30u].z, fma(_1530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1529)) - _1498;
        float _1542 = fma(_1531, cbModelParam._m0[31u].z, fma(_1530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1529)) - _1502;
        float _1543 = fma(_1531, cbModelParam._m0[32u].z, fma(_1530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1529)) - _1506;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1560 = ((_1547 * _1541) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1498 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1547 * _1542) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1502 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1547 * _1543) / cbModelParam._m0[35u].z) + ((((((_1506 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        float _1597 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1564.x + (-0.5));
        float _1599 = _1597 * (_1564.y + (-0.5));
        float _1600 = _1597 * (_1564.z + (-0.5));
        float _1607 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1571.x + (-0.5));
        float _1609 = _1607 * (_1571.y + (-0.5));
        float _1610 = _1607 * (_1571.z + (-0.5));
        float _1617 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1578.x + (-0.5));
        float _1619 = _1617 * (_1578.y + (-0.5));
        float _1620 = _1617 * (_1578.z + (-0.5));
        float _1627 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1585.x + (-0.5));
        float _1629 = _1627 * (_1585.y + (-0.5));
        float _1630 = _1627 * (_1585.z + (-0.5));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1598 * 0.5;
        float _1635 = _1608 * 0.5;
        float _1636 = _1618 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_877, _878, _879), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4278 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1661 + 1.0))) + _1666) * _1631;
        float _1676 = _1599 * 0.5;
        float _1677 = _1609 * 0.5;
        float _1678 = _1619 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_877, _878, _879), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4311 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1703 + 1.0))) + _1708) * _1632;
        float _1718 = _1600 * 0.5;
        float _1719 = _1610 * 0.5;
        float _1720 = _1620 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_877, _878, _879), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4344 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1745 + 1.0))) + _1750) * _1633;
        _1767 = _1600;
        _1768 = _1599;
        _1769 = _1598;
        _1770 = _1610;
        _1771 = _1609;
        _1772 = _1608;
        _1773 = _1620;
        _1774 = _1619;
        _1775 = _1618;
        _1776 = _1633;
        _1777 = _1632;
        _1778 = _1631;
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
    }
    else
    {
        _1767 = _1456;
        _1768 = _1456;
        _1769 = _1456;
        _1770 = _1456;
        _1771 = _1456;
        _1772 = _1456;
        _1773 = _1456;
        _1774 = _1456;
        _1775 = _1456;
        _1776 = _1456;
        _1777 = _1456;
        _1778 = _1456;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1468)) + _1468;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1469)) + _1469;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1470)) + _1470;
    float _1814 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1791));
    float _1835 = _1062 * 0.5;
    float _1836 = _1063 * 0.5;
    float _1837 = _1064 * 0.5;
    float _1838 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1841 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1844 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1851 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1455, _1459, _1462, _1465));
        float _1855 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1859 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1866 = dot(vec4(cbModelParam._m0[39u]), vec4(_1835, _1836, _1837, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1880 = dot(vec4(cbModelParam._m0[40u]), vec4(_1835, _1836, _1837, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1880) ? 0.0 : (isnan(0.0) ? _1880 : max(0.0, _1880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1893 = (_1889 * cbModelParam._m0[1u].x) + (_1878 * (1.0 - cbModelParam._m0[1u].x));
    float _1903 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _880);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1903 : min(cbModelParam._m0[25u].z, _1903));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1951 = fma(_1126, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118)) + cbModelParam._m0[13u].w;
        float _1955 = fma(_1126, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118)) + cbModelParam._m0[14u].w;
        float _1959 = fma(_1126, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118)) + cbModelParam._m0[15u].w;
        float _1962 = fma(_1064, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062));
        float _1965 = fma(_1064, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062));
        float _1968 = fma(_1064, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062));
        float _1996;
        if (_1962 > 0.0)
        {
            _1996 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1996 = frontier_phi_17_15_ladder;
        }
        float _2219;
        if (_1965 > 0.0)
        {
            _2219 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2219 = frontier_phi_26_22_ladder;
        }
        float _2476;
        if (_1968 > 0.0)
        {
            _2476 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2476 = frontier_phi_38_33_ladder;
        }
        float _2478 = isnan(_2219) ? _1996 : (isnan(_1996) ? _2219 : min(_1996, _2219));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1962) + _1951;
        float _2484 = (_2479 * _1965) + _1955;
        float _2485 = (_2479 * _1968) + _1959;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2486;
        float _2490 = _2486 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 > _2490) || ((_2484 < _2488) || ((_2483 < _2488) || (_2483 > _2490))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2485, cbModelParam._m0[9u].z, fma(_2484, cbModelParam._m0[9u].y, _2483 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2485, cbModelParam._m0[10u].z, fma(_2484, cbModelParam._m0[10u].y, _2483 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2485, cbModelParam._m0[11u].z, fma(_2484, cbModelParam._m0[11u].y, _2483 * cbModelParam._m0[11u].x))), _1904);
            frontier_phi_16_38_ladder = _2613.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2613.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2613.x * cbModelParam._m0[1u].y;
        }
        _1984 = frontier_phi_16_38_ladder_2;
        _1986 = frontier_phi_16_38_ladder_1;
        _1988 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1062, _1063, _1064), _1904);
        _1984 = _1972.x * cbModelParam._m0[1u].y;
        _1986 = _1972.y * cbModelParam._m0[1u].y;
        _1988 = _1972.z * cbModelParam._m0[1u].y;
    }
    float _1992 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _880);
    float _1993 = isnan(_1992) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1992 : min(cbModelParam._m0[25u].w, _1992));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2046 = fma(_1126, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118)) + cbModelParam._m0[21u].w;
        float _2050 = fma(_1126, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118)) + cbModelParam._m0[22u].w;
        float _2054 = fma(_1126, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118)) + cbModelParam._m0[23u].w;
        float _2057 = fma(_1064, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062));
        float _2060 = fma(_1064, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062));
        float _2063 = fma(_1064, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062));
        float _2224;
        if (_2057 > 0.0)
        {
            _2224 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2224 = frontier_phi_28_24_ladder;
        }
        float _2503;
        if (_2060 > 0.0)
        {
            _2503 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2503 = frontier_phi_40_35_ladder;
        }
        float _2716;
        if (_2063 > 0.0)
        {
            _2716 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2716 = frontier_phi_49_46_ladder;
        }
        float _2718 = isnan(_2503) ? _2224 : (isnan(_2224) ? _2503 : min(_2224, _2503));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _2057) + _2046;
        float _2724 = (_2719 * _2060) + _2050;
        float _2725 = (_2719 * _2063) + _2054;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2726;
        float _2729 = _2726 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2725 > _2729) || ((_2725 < _2727) || ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 < _2727) || (_2723 > _2729))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2725, cbModelParam._m0[17u].z, fma(_2724, cbModelParam._m0[17u].y, _2723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2725, cbModelParam._m0[18u].z, fma(_2724, cbModelParam._m0[18u].y, _2723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2725, cbModelParam._m0[19u].z, fma(_2724, cbModelParam._m0[19u].y, _2723 * cbModelParam._m0[19u].x))), _1993);
            frontier_phi_25_49_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _2082 = frontier_phi_25_49_ladder_2;
        _2084 = frontier_phi_25_49_ladder_1;
        _2086 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1062, _1063, _1064), _1993);
        _2082 = _2066.x * cbModelParam._m0[1u].z;
        _2084 = _2066.y * cbModelParam._m0[1u].z;
        _2086 = _2066.z * cbModelParam._m0[1u].z;
    }
    float _2099 = (((_1089 * _1038) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2082 - _1984)) + _1984);
    float _2101 = (((_1089 * _1040) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2084 - _1986)) + _1986);
    float _2103 = (((_1089 * _1041) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2106 = fma(_2103, cbSceneParam._m0[89u].z, fma(_2101, cbSceneParam._m0[89u].y, _2099 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2103, cbSceneParam._m0[90u].z, fma(_2101, cbSceneParam._m0[90u].y, _2099 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2103, cbSceneParam._m0[91u].z, fma(_2101, cbSceneParam._m0[91u].y, _2099 * cbSceneParam._m0[91u].x));
    vec4 _2120 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_976, _977));
    float _2122 = _2120.w;
    float _2134 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2122);
    float _2135 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2122);
    float _2136 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2122);
    uvec4 _2140 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2142 = _2140.x * 14u;
    uint _2143 = _2142 + 13u;
    float _2150 = _1054 + (-1.0);
    float _2155 = (cbLight._m0[_2143].x * _2150) + 1.0;
    float _2156 = (cbLight._m0[_2143].y * _2150) + 1.0;
    float _2157 = (cbLight._m0[_2143].z * _2150) + 1.0;
    float _2158 = (cbLight._m0[_2143].w * _2150) + 1.0;
    uint _2159 = _2142 + 5u;
    float _2165 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2169 = _2142 + 4u;
    float _2178 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2182 = _2142 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_877, _878, _879));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_877, _878, _879));
    float _4480 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4491 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2159].x * _2165) * _2203) + (((cbLight._m0[_2169].x * _2134) * _2178) * _2201);
    float _2211 = ((_2165 * cbLight._m0[_2159].y) * _2203) + (((cbLight._m0[_2169].y * _2135) * _2178) * _2201);
    float _2212 = ((_2165 * cbLight._m0[_2159].z) * _2203) + (((cbLight._m0[_2169].z * _2136) * _2178) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2142 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2218)
    {
        _2229 = _2210;
        _2231 = _2211;
        _2233 = _2212;
    }
    else
    {
        uint _2237 = _2142 + 6u;
        float _2253 = (dot(vec3(cbLight._m0[_2142 + 2u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4502 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2256 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2229 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2210;
        _2231 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2211;
        _2233 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2212;
    }
    bool _2236 = _2216.y == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2236)
    {
        _2274 = _2229;
        _2276 = _2231;
        _2278 = _2233;
    }
    else
    {
        uint _2447 = _2142 + 7u;
        float _2463 = (dot(vec3(cbLight._m0[_2142 + 3u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4518 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2466 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2274 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2229;
        _2276 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2231;
        _2278 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2233;
    }
    uint _2281 = _2142 + 8u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _880) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_2142].x + _956;
    float _2297 = cbLight._m0[_2142].y + _957;
    float _2298 = cbLight._m0[_2142].z + _958;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2142].xyz));
    float _4534 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2310 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2311 = dot(vec3(_877, _878, _879), vec3(_2303, _2304, _2305));
    float _4556 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2303, _2304, _2305));
    float _4567 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2295 * _2295;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
    float _2332 = 0.959999978542327880859375 - _1035;
    float _2334 = 0.959999978542327880859375 - _1036;
    float _2335 = 0.959999978542327880859375 - _1037;
    float _2342 = 1.0 - _2295;
    float _2353 = (0.5 / (((_2310 * ((_2309 * _2342) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2342) + _2295) * _2309))) * _2309;
    float _4578 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    uint _2369 = _2142 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _880) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2182].x + _956;
    float _2383 = cbLight._m0[_2182].y + _957;
    float _2384 = cbLight._m0[_2182].z + _958;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2182].xyz));
    float _4589 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2396 = dot(vec3(_877, _878, _879), vec3(_2389, _2390, _2391));
    float _4600 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2389, _2390, _2391));
    float _4611 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2422 = 1.0 - _2381;
    float _2432 = (0.5 / (((_2310 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2422) + _2381) * _2395))) * _2395;
    float _4622 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2444 = (((((_2415 * _2332) + _1038) * cbLight._m0[_2369].x) * _2434) * _2165) + ((((cbLight._m0[_2281].x * _2134) * ((_2331 * _2332) + _1038)) * _2355) * _2178);
    float _2445 = (((((_2415 * _2334) + _1040) * cbLight._m0[_2369].y) * _2434) * _2165) + ((((cbLight._m0[_2281].y * _2135) * ((_2331 * _2334) + _1040)) * _2355) * _2178);
    float _2446 = (((((_2415 * _2335) + _1041) * cbLight._m0[_2369].z) * _2434) * _2165) + ((((cbLight._m0[_2281].z * _2136) * ((_2331 * _2335) + _1041)) * _2355) * _2178);
    float _2508;
    float _2510;
    float _2512;
    if (_2218)
    {
        _2508 = _2444;
        _2510 = _2445;
        _2512 = _2446;
    }
    else
    {
        uint _2514 = _2142 + 2u;
        uint _2518 = _2142 + 10u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _880) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _956;
        float _2535 = cbLight._m0[_2514].y + _957;
        float _2536 = cbLight._m0[_2514].z + _958;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2514].xyz));
        float _4633 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2548 = dot(vec3(_877, _878, _879), vec3(_2541, _2542, _2543));
        float _4644 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4655 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2574 = 1.0 - _2533;
        float _2584 = (0.5 / (((_2310 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2574) + _2533) * _2547))) * _2547;
        float _4666 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2508 = (((((_2567 * _2332) + _1038) * cbLight._m0[_2518].x) * _2586) * _2587) + _2444;
        _2510 = (((((_2567 * _2334) + _1040) * cbLight._m0[_2518].y) * _2586) * _2587) + _2445;
        _2512 = (((((_2567 * _2335) + _1041) * cbLight._m0[_2518].z) * _2586) * _2587) + _2446;
    }
    float _2622;
    float _2624;
    float _2626;
    if (_2236)
    {
        _2622 = _2508;
        _2624 = _2510;
        _2626 = _2512;
    }
    else
    {
        uint _2633 = _2142 + 3u;
        uint _2637 = _2142 + 11u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _880) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _956;
        float _2654 = cbLight._m0[_2633].y + _957;
        float _2655 = cbLight._m0[_2633].z + _958;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2633].xyz));
        float _4682 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2667 = dot(vec3(_877, _878, _879), vec3(_2660, _2661, _2662));
        float _4693 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4704 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2310 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2693) + _2652) * _2666))) * _2666;
        float _4715 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2622 = (((((_2686 * _2332) + _1038) * cbLight._m0[_2637].x) * _2705) * _2706) + _2508;
        _2624 = (((((_2686 * _2334) + _1040) * cbLight._m0[_2637].y) * _2705) * _2706) + _2510;
        _2626 = (((((_2686 * _2335) + _1041) * cbLight._m0[_2637].z) * _2705) * _2706) + _2512;
    }
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_2140.y == 0u)
    {
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2781;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2781;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2781;
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.x;
        uint _2808 = uint((float(_2796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _977) / _2797))) + floor(float(uint(cbSceneParam._m0[85u].x * _976) / _2797)));
        float _2818 = (log2(_2784 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2819 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        uint _2822 = uint(isnan(14.0) ? _2819 : (isnan(_2819) ? 14.0 : min(_2819, 14.0)));
        uvec4 _2827 = texelFetch(g_lightClusterGridBuffer, int(((_2822 << 2u) + (_2808 << 6u)) >> 2u));
        uint _2828 = _2827.x;
        uint _2829 = _2796.z;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((((1u << ((_2829 >> 4u) & 15u)) + 4294967295u) & _2828) == 0u) || ((_2829 & 240u) == 0u))
        {
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
        }
        else
        {
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            uint _3088 = 0u;
            uint _3097;
            bool _3098;
            for (;;)
            {
                _3097 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                _3098 = _3097 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3098)
                {
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3097;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3088 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2782;
                        float _3294 = _3253.y - _2783;
                        float _3295 = _3253.z - _2784;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_995, _998, _1001), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4741 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2782;
                        float _3329 = (-0.0) - _2783;
                        float _3330 = (-0.0) - _2784;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1070;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_995, _998, _1001), vec3(_3335, _3336, _3337));
                        float _4757 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3370 = dot(vec3(_995, _998, _1001), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4768 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4779 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4790 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3157 = (_3324 * _3272.x) + _3230;
                        _3158 = (_3324 * _3272.y) + _3231;
                        _3159 = (_3324 * _3272.z) + _3232;
                        _3154 = (_3405 * _3289.x) + _3227;
                        _3155 = (_3405 * _3289.y) + _3228;
                        _3156 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                _2930 = frontier_phi_66_pred;
                _2940 = frontier_phi_66_pred_1;
                _2938 = frontier_phi_66_pred_2;
                _2936 = frontier_phi_66_pred_3;
                _2934 = frontier_phi_66_pred_4;
                _2932 = frontier_phi_66_pred_5;
                uint _3089 = _3088 + 1u;
                if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3082 = _2930;
                    _3083 = _2932;
                    _3084 = _2934;
                    _3085 = _2936;
                    _3086 = _2938;
                    _3087 = _2940;
                    _3088 = _3089;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
        }
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.z;
        uint _2946 = (_2944 >> 8u) & 15u;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2946) & _2828) == 0u)
        {
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
        }
        else
        {
            float _3075 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
            float _3076 = _3075 * _2782;
            float _3077 = _3075 * _2783;
            float _3078 = _3075 * _2784;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2946 < ((_2944 >> 12u) & 15u))
            {
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3210 = _2929;
                float _3211 = _2931;
                float _3212 = _2933;
                float _3213 = _2935;
                float _3214 = _2937;
                float _3215 = _2939;
                uint _3216 = _2946;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3226)
                    {
                        frontier_phi_77_pred = _3215;
                        frontier_phi_77_pred_1 = _3214;
                        frontier_phi_77_pred_2 = _3213;
                        frontier_phi_77_pred_3 = _3212;
                        frontier_phi_77_pred_4 = _3211;
                        frontier_phi_77_pred_5 = _3210;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        uint _3438 = _3225;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3522;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3449 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3449 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3449 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3449 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_2784, _3556.z, fma(_2783, _3556.y, _3556.x * _2782)) + _3556.w;
                            _3569 = !((fma(_2784, _3537.z, fma(_2783, _3537.y, _3537.x * _2782)) + _3537.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3464.x - _2782;
                                float _3597 = _3464.y - _2783;
                                float _3598 = _3464.z - _2784;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3465 * _3465));
                                float _4801 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3614 = sqrt(_3599) * _3480.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_995, _998, _1001))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_2784, _3507.z, fma(_2783, _3507.y, _3507.x * _2782)) + _3507.w) / _3568;
                                float _3628 = (fma(_2784, _3522.z, fma(_2783, _3522.y, _3522.x * _2782)) + _3522.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4817 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _1070;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3076;
                                float _3658 = _3604 - _3077;
                                float _3659 = _3605 - _3078;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_995, _998, _1001), vec3((-0.0) - _3076, (-0.0) - _3077, (-0.0) - _3078));
                                float _4828 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3671 = dot(vec3(_995, _998, _1001), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4839 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_995, _998, _1001), vec3(_3603, _3604, _3605))) + _3680;
                                float _4850 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4861 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3634 * _3480.y;
                                frontier_phi_83_pred_1 = _3634 * _3480.x;
                                frontier_phi_83_pred_2 = _3708 * _3492.z;
                                frontier_phi_83_pred_3 = _3708 * _3492.y;
                                frontier_phi_83_pred_4 = _3708 * _3492.x;
                                frontier_phi_83_pred_5 = _3634 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3716 = frontier_phi_83_pred;
                            _3715 = frontier_phi_83_pred_1;
                            _3714 = frontier_phi_83_pred_2;
                            _3713 = frontier_phi_83_pred_3;
                            _3712 = frontier_phi_83_pred_4;
                            _3717 = frontier_phi_83_pred_5;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3424;
                        frontier_phi_77_pred_1 = _3423;
                        frontier_phi_77_pred_2 = _3422;
                        frontier_phi_77_pred_3 = _3421;
                        frontier_phi_77_pred_4 = _3420;
                        frontier_phi_77_pred_5 = _3419;
                    }
                    _3061 = frontier_phi_77_pred;
                    _3059 = frontier_phi_77_pred_1;
                    _3057 = frontier_phi_77_pred_2;
                    _3055 = frontier_phi_77_pred_3;
                    _3053 = frontier_phi_77_pred_4;
                    _3051 = frontier_phi_77_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3051;
                        _3211 = _3053;
                        _3212 = _3055;
                        _3213 = _3057;
                        _3214 = _3059;
                        _3215 = _3061;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_58_59_ladder = _2933;
                frontier_phi_58_59_ladder_1 = _2939;
                frontier_phi_58_59_ladder_2 = _2937;
                frontier_phi_58_59_ladder_3 = _2935;
                frontier_phi_58_59_ladder_4 = _2931;
                frontier_phi_58_59_ladder_5 = _2929;
            }
            _3050 = frontier_phi_58_59_ladder_5;
            _3052 = frontier_phi_58_59_ladder_4;
            _3054 = frontier_phi_58_59_ladder;
            _3056 = frontier_phi_58_59_ladder_3;
            _3058 = frontier_phi_58_59_ladder_2;
            _3060 = frontier_phi_58_59_ladder_1;
        }
        float _3065 = isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0));
        _2841 = (_3065 * _3056) + _2274;
        _2843 = (_3065 * _3058) + _2276;
        _2845 = (_3065 * _3060) + _2278;
        _2847 = ((_3050 * _1038) * _3065) + _2622;
        _2849 = ((_3052 * _1040) * _3065) + _2624;
        _2851 = ((_3054 * _1041) * _3065) + _2626;
    }
    else
    {
        _2841 = _2274;
        _2843 = _2276;
        _2845 = _2278;
        _2847 = _2622;
        _2849 = _2624;
        _2851 = _2626;
    }
    float _4877 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4888 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4899 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2868 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2841 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1054))) + ((_2847 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2843 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1054))) + ((_2849 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2845 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1054))) + ((_2851 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    uint _2871 = _287 + 6u;
    float _2879 = _976 / cbSceneParam._m0[86u].x;
    float _2880 = _977 / cbSceneParam._m0[86u].y;
    vec4 _2894 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, (log2((isnan(cbSceneParam._m0[77u].w) ? _899 : (isnan(_899) ? cbSceneParam._m0[77u].w : min(_899, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2896 = _2894.x;
    float _2897 = _2894.y;
    float _2898 = _2894.z;
    float _2899 = _2894.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_899 > cbSceneParam._m0[78u].w)
    {
        float _2954 = isnan(_899) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _899 : min(cbSceneParam._m0[80u].w, _899));
        float _2955 = _2954 / _899;
        float _2966 = _2955 * _949;
        float _2967 = _950 * _2955;
        float _2968 = (-0.0) - _2967;
        float _2970 = _2955 * _951;
        float _2972 = (cbSceneParam._m0[77u].w * _2968) / _2954;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2967;
        float _2980 = sqrt(((_2966 * _2966) + (_2967 * _2967)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2954)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2968 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3111 = 1.0 / cbSceneParam._m0[80u].x;
            float _3112 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3113 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            _3167 = ((abs(_2980 / _2968) * cbSceneParam._m0[80u].y) * ((((_3122 - _3123) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))))) * _3111)) - ((exp2(_2990 * _3122) - exp2(_2990 * _3123)) * _3111))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2899);
        _2992 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2896;
        _2994 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2897;
        _2996 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2898;
        _2998 = _3178 * _2899;
    }
    else
    {
        _2992 = _2896;
        _2994 = _2897;
        _2996 = _2898;
        _2998 = _2899;
    }
    bool _3205;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3039;
    bool _3049;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * _2868;
        float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * _2869;
        float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * _2870;
        float _3028 = _965 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3039 = _3028 * 0.999000012874603271484375;
        _3049 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3049)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3039) < 0.5)
            {
                _3205 = true;
                break;
            }
        }
        uint _3146 = _1014 + uint(_3008.w);
        if ((cbInstanceData._m0[_3146].w < 1.0) && ((cbInstanceData._m0[_3146].w + _3039) < 0.5))
        {
            _3205 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3205 = true;
            break;
        }
        _3205 = false;
        break;
    }
    float _3410;
    if (_3205)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2871].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2871].w;
    discard_exit();
}


