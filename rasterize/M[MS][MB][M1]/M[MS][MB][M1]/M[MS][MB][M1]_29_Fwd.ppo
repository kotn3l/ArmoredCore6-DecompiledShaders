#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1016;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3346 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))));
    float _307 = fma(_304, _208, fma(_297, _215, _295 * _201));
    float _310 = fma(_304, _209, fma(_297, _216, _295 * _202));
    float _313 = fma(_304, _210, fma(_297, _217, _295 * _203));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _355 = _353.x;
    float _356 = 1.0 - _355;
    float _363 = ((_355 - _356) * cbMtdParam._m0[24u].z) + _356;
    float _365 = (cbMtdParam._m0[19u].x + dot(vec4(_317 * _307, _317 * _310, _317 * _313, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_363 * cbMtdParam._m0[21u].z);
    float _3357 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _381 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_363 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3368 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _386 = ((_366 * (cbMtdParam._m0[17u].x - _266)) * _382) + _266;
    float _387 = ((_366 * (cbMtdParam._m0[17u].y - _267)) * _382) + _267;
    float _388 = ((_366 * (cbMtdParam._m0[17u].z - _268)) * _382) + _268;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _403 = _401.x;
    float _406 = _403 - ((_403 * _366) * _382);
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _426 = (_419.x * 2.0) + (-1.0);
    float _427 = (_419.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3379 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _437 = (((_419.z - _290) * _366) * _382) + _290;
    float _452 = (((cbMtdParam._m0[21u].x * _295) + ((_426 - _295) * _366)) * _382) + _295;
    float _453 = (((cbMtdParam._m0[21u].x * _297) + ((_427 - _297) * _366)) * _382) + _297;
    float _454 = (((sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) - _304) * _366) * _382) + _304;
    float _459 = cbMtdParam._m0[22u].x + _286.w;
    float _462 = fma(_454, _208, fma(_453, _215, _452 * _201));
    float _465 = fma(_454, _209, fma(_453, _216, _452 * _202));
    float _468 = fma(_454, _210, fma(_453, _217, _452 * _203));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3390 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _476 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3412 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3423 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3434 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3445 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _481 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _586 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _589 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _603 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3456 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _615 = 1.0 - _481;
    float _616 = _612 * _615;
    float _617 = _613 * _615;
    float _618 = _614 * _615;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _481;
    float _624 = (_613 + (-0.039999999105930328369140625)) * _481;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _481;
    float _626 = _623 + 0.039999999105930328369140625;
    float _628 = _624 + 0.039999999105930328369140625;
    float _629 = _625 + 0.039999999105930328369140625;
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _642 = ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * TEXCOORD_5.w) * _638.x;
    float _643 = dot(vec3(_473, _474, _475), vec3(_553, _554, _555));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _473) - _553;
    float _651 = (_646 * _474) - _554;
    float _652 = (_646 * _475) - _555;
    float _656 = abs(dot(vec3(_553, _554, _555), vec3(_473, _474, _475)));
    float _3489 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_476);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _677 = (1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _678 = _671 * _658;
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _744 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _748 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _773 = _706 + _473;
        float _774 = _710 + _474;
        float _775 = _714 + _475;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_473, _474, _475), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3537 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_473, _474, _475), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3570 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_473, _474, _475), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3603 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1059 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1063 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1086 = _706 + _473;
        float _1087 = _710 + _474;
        float _1088 = _714 + _475;
        float _1098 = fma(_1088, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1055 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1059 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[35u].z) + ((((((_1063 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_473, _474, _475), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3666 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_473, _474, _475), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3699 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_473, _474, _475), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3732 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1016;
        _1325 = _1016;
        _1326 = _1016;
        _1327 = _1016;
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1028)) + _1028;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1029)) + _1029;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1030)) + _1030;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _650 * 0.5;
    float _1393 = _651 * 0.5;
    float _1394 = _652 * 0.5;
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1460 : min(cbModelParam._m0[25u].z, _1460));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1509 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1513 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1517 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1520 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1523 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1526 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1554;
        if (_1520 > 0.0)
        {
            _1554 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1554 = frontier_phi_14_12_ladder;
        }
        float _1758;
        if (_1523 > 0.0)
        {
            _1758 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1758 = frontier_phi_23_19_ladder;
        }
        float _2012;
        if (_1526 > 0.0)
        {
            _2012 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2012 = frontier_phi_35_30_ladder;
        }
        float _2014 = isnan(_1758) ? _1554 : (isnan(_1554) ? _1758 : min(_1554, _1758));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1520) + _1509;
        float _2020 = (_2015 * _1523) + _1513;
        float _2021 = (_2015 * _1526) + _1517;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_13_35_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1542 = frontier_phi_13_35_ladder_2;
        _1544 = frontier_phi_13_35_ladder_1;
        _1546 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1461);
        _1542 = _1530.x * cbModelParam._m0[1u].y;
        _1544 = _1530.y * cbModelParam._m0[1u].y;
        _1546 = _1530.z * cbModelParam._m0[1u].y;
    }
    float _1550 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1550 : min(cbModelParam._m0[25u].w, _1550));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1619 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1622 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1763;
        if (_1616 > 0.0)
        {
            _1763 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1763 = frontier_phi_25_21_ladder;
        }
        float _2039;
        if (_1619 > 0.0)
        {
            _2039 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2039 = frontier_phi_37_32_ladder;
        }
        float _2252;
        if (_1622 > 0.0)
        {
            _2252 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_43_ladder;
        }
        float _2254 = isnan(_2039) ? _1763 : (isnan(_1763) ? _2039 : min(_1763, _2039));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1616) + _1605;
        float _2260 = (_2255 * _1619) + _1609;
        float _2261 = (_2255 * _1622) + _1613;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1551);
            frontier_phi_22_46_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_22_46_ladder_2;
        _1643 = frontier_phi_22_46_ladder_1;
        _1645 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1551);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1658 = (((_677 * _626) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1641 - _1542)) + _1542);
    float _1660 = (((_677 * _628) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1643 - _1544)) + _1544);
    float _1662 = (((_677 * _629) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1645 - _1546)) + _1546);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _642 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1683 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_473, _474, _475));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_473, _474, _475));
    float _3868 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3879 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1700].x * _1706) * _1742) + ((cbLight._m0[_1710].x * _1717) * _1740);
    float _1750 = ((_1706 * cbLight._m0[_1700].y) * _1742) + ((_1717 * cbLight._m0[_1710].y) * _1740);
    float _1751 = ((_1706 * cbLight._m0[_1700].z) * _1742) + ((_1717 * cbLight._m0[_1710].z) * _1740);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1749;
        _1770 = _1750;
        _1772 = _1751;
    }
    else
    {
        uint _1776 = _1683 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3890 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1795 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1751;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1983 = _1683 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3906 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _2002 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1813 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1768;
        _1815 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1770;
        _1817 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1772;
    }
    uint _1820 = _1683 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _476) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1683].x + _553;
    float _1836 = cbLight._m0[_1683].y + _554;
    float _1837 = cbLight._m0[_1683].z + _555;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1683].xyz));
    float _3922 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _1849 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1850 = dot(vec3(_473, _474, _475), vec3(_1842, _1843, _1844));
    float _3944 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1842, _1843, _1844));
    float _3955 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
    float _1871 = 0.959999978542327880859375 - _623;
    float _1873 = 0.959999978542327880859375 - _624;
    float _1874 = 0.959999978542327880859375 - _625;
    float _1881 = 1.0 - _1834;
    float _1892 = (0.5 / (((_1849 * ((_1848 * _1881) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1881) + _1834) * _1848))) * _1848;
    float _3966 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1905 = _1683 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _476) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1721].x + _553;
    float _1919 = cbLight._m0[_1721].y + _554;
    float _1920 = cbLight._m0[_1721].z + _555;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1721].xyz));
    float _3977 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1932 = dot(vec3(_473, _474, _475), vec3(_1925, _1926, _1927));
    float _3988 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1925, _1926, _1927));
    float _3999 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1849 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1958) + _1917) * _1931))) * _1931;
    float _4010 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1871) + _626) * cbLight._m0[_1905].x) * _1970) * _1706) + (((((_1870 * _1871) + _626) * cbLight._m0[_1820].x) * _1894) * _1717);
    float _1981 = (((((_1951 * _1873) + _628) * cbLight._m0[_1905].y) * _1970) * _1706) + (((((_1870 * _1873) + _628) * cbLight._m0[_1820].y) * _1894) * _1717);
    float _1982 = (((((_1951 * _1874) + _629) * cbLight._m0[_1905].z) * _1970) * _1706) + (((((_1870 * _1874) + _629) * cbLight._m0[_1820].z) * _1894) * _1717);
    float _2044;
    float _2046;
    float _2048;
    if (_1757)
    {
        _2044 = _1980;
        _2046 = _1981;
        _2048 = _1982;
    }
    else
    {
        uint _2050 = _1683 + 2u;
        uint _2054 = _1683 + 10u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _476) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _553;
        float _2071 = cbLight._m0[_2050].y + _554;
        float _2072 = cbLight._m0[_2050].z + _555;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2050].xyz));
        float _4021 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2084 = dot(vec3(_473, _474, _475), vec3(_2077, _2078, _2079));
        float _4032 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4043 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1849 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2110) + _2069) * _2083))) * _2083;
        float _4054 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2044 = (((((_2103 * _1871) + _626) * cbLight._m0[_2054].x) * _2122) * _2123) + _1980;
        _2046 = (((((_2103 * _1873) + _628) * cbLight._m0[_2054].y) * _2122) * _2123) + _1981;
        _2048 = (((((_2103 * _1874) + _629) * cbLight._m0[_2054].z) * _2122) * _2123) + _1982;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1775)
    {
        _2158 = _2044;
        _2160 = _2046;
        _2162 = _2048;
    }
    else
    {
        uint _2169 = _1683 + 3u;
        uint _2173 = _1683 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _476) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _553;
        float _2190 = cbLight._m0[_2169].y + _554;
        float _2191 = cbLight._m0[_2169].z + _555;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2169].xyz));
        float _4070 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2203 = dot(vec3(_473, _474, _475), vec3(_2196, _2197, _2198));
        float _4081 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4092 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1849 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2229) + _2188) * _2202))) * _2202;
        float _4103 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2158 = (((((_2222 * _1871) + _626) * cbLight._m0[_2173].x) * _2241) * _2242) + _2044;
        _2160 = (((((_2222 * _1873) + _628) * cbLight._m0[_2173].y) * _2241) * _2242) + _2046;
        _2162 = (((((_2222 * _1874) + _629) * cbLight._m0[_2173].z) * _2241) * _2242) + _2048;
    }
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_1681.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
        }
        else
        {
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            uint _2616 = 0u;
            uint _2625;
            bool _2626;
            for (;;)
            {
                _2625 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                _2626 = _2625 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2626)
                {
                    frontier_phi_61_pred = _2610;
                    frontier_phi_61_pred_1 = _2615;
                    frontier_phi_61_pred_2 = _2614;
                    frontier_phi_61_pred_3 = _2613;
                    frontier_phi_61_pred_4 = _2612;
                    frontier_phi_61_pred_5 = _2611;
                }
                else
                {
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    uint _2740;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2625;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    for (;;)
                    {
                        uint _2744 = uint(findLSB(_2740)) + (_2616 << 5u);
                        uint _2741 = (_2740 + 4294967295u) & _2740;
                        uint _2746 = _2744 * 48u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2766 = (_2744 * 48u) + 4u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2785 = (_2744 * 48u) + 8u;
                        vec3 _2796 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x));
                        float _2800 = _2760.x - _2318;
                        float _2801 = _2760.y - _2319;
                        float _2802 = _2760.z - _2320;
                        float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                        float _2806 = inversesqrt(_2803);
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2810 = dot(vec3(_583, _586, _589), vec3(_2807, _2808, _2809));
                        float _2815 = 1.0 - (_2803 * _2760.w);
                        float _4129 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2817 = sqrt(_2803) * _2779.w;
                        float _2820 = 1.39999997615814208984375 / (_2817 + 1.39999997615814208984375);
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2810) + _2821;
                        float _2827 = _2817 * _2817;
                        float _2831 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2816) / ((_2827 * 0.699999988079071044921875) + 1.0);
                        float _2835 = (-0.0) - _2318;
                        float _2836 = (-0.0) - _2319;
                        float _2837 = (-0.0) - _2320;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2852 = exp2(log2(1.0 / ((_2827 * 3.5) + 5.0)) * 0.25);
                        float _2853 = 1.0 - _658;
                        float _2860 = sqrt(1.0 - ((1.0 - (_2853 * _2853)) * (1.0 - (_2852 * _2852))));
                        float _2861 = _2860 * _2860;
                        float _2862 = _2861 * _2861;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2873 = dot(vec3(_583, _586, _589), vec3(_2842, _2843, _2844));
                        float _4145 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2877 = dot(vec3(_583, _586, _589), vec3(_2869 * _2863, _2869 * _2864, _2869 * _2865));
                        float _4156 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2884 = ((_2880 * _2880) * (_2862 + (-1.0))) + 1.0;
                        float _2885 = _2820 * _2861;
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2810) + _2886;
                        float _4167 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2891 = 1.0 - _2861;
                        float _2901 = (0.5 / (((_2890 * ((_2876 * _2891) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2890 * _2891) + _2861) * _2876))) * _2890;
                        float _4178 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2912 = (((_2862 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_2884 * _2884) * ((_2827 * 2.1991131305694580078125) + 3.141590118408203125))) * _2816;
                        _2669 = (_2831 * _2779.x) + _2737;
                        _2670 = (_2831 * _2779.y) + _2738;
                        _2671 = (_2831 * _2779.z) + _2739;
                        _2666 = (_2912 * _2796.x) + _2734;
                        _2667 = (_2912 * _2796.y) + _2735;
                        _2668 = (_2912 * _2796.z) + _2736;
                        if (_2741 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2741;
                        }
                    }
                    frontier_phi_61_pred = _2666;
                    frontier_phi_61_pred_1 = _2671;
                    frontier_phi_61_pred_2 = _2670;
                    frontier_phi_61_pred_3 = _2669;
                    frontier_phi_61_pred_4 = _2668;
                    frontier_phi_61_pred_5 = _2667;
                }
                _2466 = frontier_phi_61_pred;
                _2476 = frontier_phi_61_pred_1;
                _2474 = frontier_phi_61_pred_2;
                _2472 = frontier_phi_61_pred_3;
                _2470 = frontier_phi_61_pred_4;
                _2468 = frontier_phi_61_pred_5;
                uint _2617 = _2616 + 1u;
                if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2610 = _2466;
                    _2611 = _2468;
                    _2612 = _2470;
                    _2613 = _2472;
                    _2614 = _2474;
                    _2615 = _2476;
                    _2616 = _2617;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
        }
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.z;
        uint _2482 = (_2480 >> 8u) & 15u;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((4294967295u << _2482) & _2364) == 0u)
        {
            _2578 = _2465;
            _2580 = _2467;
            _2582 = _2469;
            _2584 = _2471;
            _2586 = _2473;
            _2588 = _2475;
        }
        else
        {
            float _2603 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2604 = _2603 * _2318;
            float _2605 = _2603 * _2319;
            float _2606 = _2603 * _2320;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2482 < ((_2480 >> 12u) & 15u))
            {
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2717 = _2465;
                float _2718 = _2467;
                float _2719 = _2469;
                float _2720 = _2471;
                float _2721 = _2473;
                float _2722 = _2475;
                uint _2723 = _2482;
                uint _2732;
                bool _2733;
                for (;;)
                {
                    _2732 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                    _2733 = _2732 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2733)
                    {
                        frontier_phi_67_pred = _2720;
                        frontier_phi_67_pred_1 = _2721;
                        frontier_phi_67_pred_2 = _2722;
                        frontier_phi_67_pred_3 = _2719;
                        frontier_phi_67_pred_4 = _2718;
                        frontier_phi_67_pred_5 = _2717;
                    }
                    else
                    {
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        uint _2936 = _2732;
                        uint _2937;
                        vec4 _2962;
                        float _2963;
                        vec4 _2978;
                        vec3 _2990;
                        vec4 _3006;
                        vec4 _3022;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2947 = ((_2723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2936));
                            _2937 = (_2936 + 4294967295u) & _2936;
                            uint _2949 = _2947 * 40u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2963 = _2962.w;
                            uint _2965 = (_2947 * 40u) + 4u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2947 * 40u) + 8u;
                            _2990 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x));
                            uint _2993 = (_2947 * 40u) + 16u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2947 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2947 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2947 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2320, _3056.z, fma(_2319, _3056.y, _3056.x * _2318)) + _3056.w;
                            _3069 = !((fma(_2320, _3037.z, fma(_2319, _3037.y, _3037.x * _2318)) + _3037.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2962.x - _2318;
                                float _3097 = _2962.y - _2319;
                                float _3098 = _2962.z - _2320;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2963 * _2963));
                                float _4189 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3114 = sqrt(_3099) * _2978.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_583, _586, _589))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2320, _3006.z, fma(_2319, _3006.y, _3006.x * _2318)) + _3006.w) / _3068;
                                float _3128 = (fma(_2320, _3022.z, fma(_2319, _3022.y, _3022.x * _2318)) + _3022.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4205 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _658;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2604;
                                float _3158 = _3104 - _2605;
                                float _3159 = _3105 - _2606;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2604, (-0.0) - _2605, (-0.0) - _2606));
                                float _4216 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3171 = dot(vec3(_583, _586, _589), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4227 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_583, _586, _589), vec3(_3103, _3104, _3105))) + _3180;
                                float _4238 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4249 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3208 * _2990.x;
                                frontier_phi_73_pred_1 = _3208 * _2990.y;
                                frontier_phi_73_pred_2 = _3134 * _2978.z;
                                frontier_phi_73_pred_3 = _3134 * _2978.y;
                                frontier_phi_73_pred_4 = _3134 * _2978.x;
                                frontier_phi_73_pred_5 = _3208 * _2990.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3212 = frontier_phi_73_pred;
                            _3213 = frontier_phi_73_pred_1;
                            _3217 = frontier_phi_73_pred_2;
                            _3216 = frontier_phi_73_pred_3;
                            _3215 = frontier_phi_73_pred_4;
                            _3214 = frontier_phi_73_pred_5;
                            _2920 = _3215 + _2933;
                            _2921 = _3216 + _2934;
                            _2922 = _3217 + _2935;
                            _2917 = _3212 + _2930;
                            _2918 = _3213 + _2931;
                            _2919 = _3214 + _2932;
                            if (_2937 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2937;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2920;
                        frontier_phi_67_pred_1 = _2921;
                        frontier_phi_67_pred_2 = _2922;
                        frontier_phi_67_pred_3 = _2919;
                        frontier_phi_67_pred_4 = _2918;
                        frontier_phi_67_pred_5 = _2917;
                    }
                    _2585 = frontier_phi_67_pred;
                    _2587 = frontier_phi_67_pred_1;
                    _2589 = frontier_phi_67_pred_2;
                    _2583 = frontier_phi_67_pred_3;
                    _2581 = frontier_phi_67_pred_4;
                    _2579 = frontier_phi_67_pred_5;
                    uint _2724 = _2723 + 1u;
                    if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2717 = _2579;
                        _2718 = _2581;
                        _2719 = _2583;
                        _2720 = _2585;
                        _2721 = _2587;
                        _2722 = _2589;
                        _2723 = _2724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            else
            {
                frontier_phi_55_56_ladder = _2473;
                frontier_phi_55_56_ladder_1 = _2475;
                frontier_phi_55_56_ladder_2 = _2471;
                frontier_phi_55_56_ladder_3 = _2469;
                frontier_phi_55_56_ladder_4 = _2467;
                frontier_phi_55_56_ladder_5 = _2465;
            }
            _2578 = frontier_phi_55_56_ladder_5;
            _2580 = frontier_phi_55_56_ladder_4;
            _2582 = frontier_phi_55_56_ladder_3;
            _2584 = frontier_phi_55_56_ladder_2;
            _2586 = frontier_phi_55_56_ladder;
            _2588 = frontier_phi_55_56_ladder_1;
        }
        float _2593 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2377 = (_2593 * _2584) + _1813;
        _2379 = (_2593 * _2586) + _1815;
        _2381 = (_2593 * _2588) + _1817;
        _2383 = ((_2578 * _626) * _2593) + _2158;
        _2385 = ((_2580 * _628) * _2593) + _2160;
        _2387 = ((_2582 * _629) * _2593) + _2162;
    }
    else
    {
        _2377 = _1813;
        _2379 = _1815;
        _2381 = _1817;
        _2383 = _2158;
        _2385 = _2160;
        _2387 = _2162;
    }
    float _4265 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4276 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4287 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    uint _2407 = _220 + 6u;
    float _2415 = _561 / cbSceneParam._m0[86u].x;
    float _2416 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2491 = _2490 / _495;
        float _2502 = _2491 * _546;
        float _2503 = _547 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2506 = _2491 * _548;
        float _2508 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2509 = _2508 + cbSceneParam._m0[79u].w;
        float _2510 = cbSceneParam._m0[79u].w - _2503;
        float _2516 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2506 * _2506));
        float _2519 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2516;
        float _2524 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2526 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2679;
        if (abs((_2504 - _2508) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2679 = ((((_2509 > 0.0) ? exp2(_2524 * _2509) : (2.0 - exp2(_2526 * _2509))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2519;
        }
        else
        {
            float _2639 = 1.0 / cbSceneParam._m0[80u].x;
            float _2640 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : max(_2509, _2510));
            float _2641 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : min(_2509, _2510));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            _2679 = ((abs(_2516 / _2504) * cbSceneParam._m0[80u].y) * ((((_2650 - _2651) * 2.0) - ((exp2(_2524 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0)))) - exp2(_2524 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0))))) * _2639)) - ((exp2(_2526 * _2650) - exp2(_2526 * _2651)) * _2639))) + (_2519 * cbSceneParam._m0[80u].z);
        }
        vec4 _2681 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2690 = exp2((_2679 * (-1.44269502162933349609375)) * (1.0 - _2681.w));
        float _2691 = log2(_2690);
        float _2707 = log2(_2435);
        _2528 = (exp2(_2707 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].x)) * _2681.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2530 = (exp2(_2707 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].y)) * _2681.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2532 = (exp2(_2707 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].z)) * _2681.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2534 = _2690 * _2435;
    }
    else
    {
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
        _2534 = _2435;
    }
    float _2546 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2547 = _2546 == 3.0;
    float _2548 = log2(_2534);
    float _2555 = exp2(_2548 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2377 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _642))) + ((_2383 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2556 = exp2(_2548 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2379 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _642))) + ((_2385 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2557 = exp2(_2548 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2381 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _642))) + ((_2387 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2566 = (_2546 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2566 * (_2547 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.y = _2566 * (_2547 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.z = _2566 * (_2547 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.w = cbInstanceData._m0[_2407].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
}


