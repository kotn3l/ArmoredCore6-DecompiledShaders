#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1463;
float _3865;
float _3866;
float _3867;
float _3868;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3877 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3888 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3899 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3910 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _436) + _551;
    float _563 = ((((_530.x - _549) * _436) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _436) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3921 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    float _573 = _563 + ((((_503.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _574 = _564 + ((((_503.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _577 = fma(_570, _254, fma(_574, _261, _573 * _247));
    float _580 = fma(_570, _255, fma(_574, _262, _573 * _248));
    float _583 = fma(_570, _256, fma(_574, _263, _573 * _249));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _638 = (cbMtdParam._m0[19u].x + dot(vec4(_587 * _577, _587 * _580, _587 * _583, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_631 - _632) * cbMtdParam._m0[24u].z) + _632) * cbMtdParam._m0[21u].z);
    float _3932 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _641 = (-0.0) - cbMtdParam._m0[24u].x;
    float _643 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
    float _651 = _639 - ((_639 * TEXCOORD_8.x) * _644);
    float _652 = _639 - ((_639 * TEXCOORD_8.y) * _644);
    float _653 = _639 - ((_639 * TEXCOORD_8.z) * _644);
    float _660 = (_651 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) + _462;
    float _661 = (_652 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) + _463;
    float _662 = (_653 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) + _464;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _676 = _674.x;
    float _677 = 1.0 - _676;
    float _703 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_676 - _677) * cbMtdParam._m0[24u].w) + _677) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3953 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _712 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _704) + _660;
    float _713 = ((((cbMtdParam._m0[10u].y - _661) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _704) + _661;
    float _714 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _662)) * _704) + _662;
    vec4 _740 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _742 = _740.x;
    float _760 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _742) * _436) + _742;
    float _764 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _760) * cbMtdParam._m0[19u].z) + _760;
    float _766 = _764 - (_764 * _651);
    float _768 = _766 - (_766 * _704);
    float _773 = (((_503.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    vec4 _787 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _794 = (_787.x * 2.0) + (-1.0);
    float _795 = (_787.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _3964 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _804 = ((_787.z - _773) * _651) + _773;
    float _807 = ((cbMtdParam._m0[23u].y - _804) * _704) + _804;
    vec4 _826 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _832 = (_826.x * 2.0) + (-1.0);
    float _833 = (_826.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _3975 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _849 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _570) * _653) + _570;
    float _852 = (((_794 - _573) * _651) + _573) + (cbMtdParam._m0[21u].x * _573);
    float _853 = (((_795 - _574) * _652) + _574) + (cbMtdParam._m0[21u].x * _574);
    float _864 = (((_832 - _852) + (_852 * cbMtdParam._m0[22u].z)) * _704) + _852;
    float _865 = (((_833 - _853) + (_853 * cbMtdParam._m0[22u].z)) * _704) + _853;
    float _866 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _849)) + _849;
    float _870 = cbMtdParam._m0[22u].x + _603.w;
    float _873 = fma(_866, _254, fma(_865, _261, _864 * _247));
    float _876 = fma(_866, _255, fma(_865, _262, _864 * _248));
    float _879 = fma(_866, _256, fma(_865, _263, _864 * _249));
    float _883 = inversesqrt(dot(vec3(_873, _876, _879), vec3(_873, _876, _879)));
    float _884 = _883 * _873;
    float _885 = _883 * _876;
    float _886 = _883 * _879;
    float _3986 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _887 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4008 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4019 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4030 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4041 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _892 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _906 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _956 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _946);
    float _957 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _946);
    float _958 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _946);
    float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
    float _963 = _956 * _962;
    float _964 = _957 * _962;
    float _965 = _958 * _962;
    vec4 _970 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _972 = _970.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1144 = sqrt(((_956 * _956) + (_957 * _957)) + (_958 * _958));
        float _1150 = (cbMatDynParam._m0[5u].x * _1144) + cbMatDynParam._m0[5u].y;
        float _4052 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1155 = (cbMatDynParam._m0[5u].z * _1144) + cbMatDynParam._m0[5u].w;
        float _4063 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) - _1151)) + _1151) < ((_972 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _983 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _984 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1002 = fma(_886, cbSceneParam._m0[5u].z, fma(_885, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _884));
    float _1005 = fma(_886, cbSceneParam._m0[6u].z, fma(_885, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _884));
    float _1008 = fma(_886, cbSceneParam._m0[7u].z, fma(_885, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _884));
    uint _1021 = _285 + 9u;
    uint _1022 = _1021 + uint(cbMatDynParam._m0[0u].w);
    float _1028 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1022].x;
    float _1029 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1022].y;
    float _1030 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1022].z;
    float _4074 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1034 = 1.0 - _892;
    float _1035 = _1031 * _1034;
    float _1036 = _1032 * _1034;
    float _1037 = _1033 * _1034;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _892;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _892;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _892;
    float _1045 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _983, cbSceneParam._m0[86u].y * _984));
    float _1061 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_884, _885, _886), vec3(_963, _964, _965));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _884) - _963;
    float _1070 = (_1065 * _885) - _964;
    float _1071 = (_1065 * _886) - _965;
    float _1075 = abs(dot(vec3(_963, _964, _965), vec3(_884, _885, _886)));
    float _4107 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_887);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1077;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1191 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1195 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1220 = _1125 + _884;
        float _1221 = _1129 + _885;
        float _1222 = _1133 + _886;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_884, _885, _886), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4155 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_884, _885, _886), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4188 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_884, _885, _886), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4221 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1505 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1509 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1513 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1536 = _1125 + _884;
        float _1537 = _1129 + _885;
        float _1538 = _1133 + _886;
        float _1548 = fma(_1538, cbModelParam._m0[30u].z, fma(_1537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1536)) - _1505;
        float _1549 = fma(_1538, cbModelParam._m0[31u].z, fma(_1537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1536)) - _1509;
        float _1550 = fma(_1538, cbModelParam._m0[32u].z, fma(_1537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1536)) - _1513;
        float _1554 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
        float _1567 = ((_1554 * _1548) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1505 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1554 * _1549) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1509 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1554 * _1550) / cbModelParam._m0[35u].z) + ((((((_1513 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        float _1604 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1571.x + (-0.5));
        float _1606 = _1604 * (_1571.y + (-0.5));
        float _1607 = _1604 * (_1571.z + (-0.5));
        float _1614 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1578.x + (-0.5));
        float _1616 = _1614 * (_1578.y + (-0.5));
        float _1617 = _1614 * (_1578.z + (-0.5));
        float _1624 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1585.x + (-0.5));
        float _1626 = _1624 * (_1585.y + (-0.5));
        float _1627 = _1624 * (_1585.z + (-0.5));
        float _1634 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1592.x + (-0.5));
        float _1636 = _1634 * (_1592.y + (-0.5));
        float _1637 = _1634 * (_1592.z + (-0.5));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = _1605 * 0.5;
        float _1642 = _1615 * 0.5;
        float _1643 = _1625 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_884, _885, _886), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4284 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1668 + 1.0))) + _1673) * _1638;
        float _1683 = _1606 * 0.5;
        float _1684 = _1616 * 0.5;
        float _1685 = _1626 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_884, _885, _886), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4317 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1710 + 1.0))) + _1715) * _1639;
        float _1725 = _1607 * 0.5;
        float _1726 = _1617 * 0.5;
        float _1727 = _1627 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_884, _885, _886), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4350 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1752 + 1.0))) + _1757) * _1640;
        _1774 = _1607;
        _1775 = _1606;
        _1776 = _1605;
        _1777 = _1617;
        _1778 = _1616;
        _1779 = _1615;
        _1780 = _1627;
        _1781 = _1626;
        _1782 = _1625;
        _1783 = _1640;
        _1784 = _1639;
        _1785 = _1638;
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
    }
    else
    {
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = _1463;
        _1783 = _1463;
        _1784 = _1463;
        _1785 = _1463;
        _1786 = 0.0;
        _1787 = 0.0;
        _1788 = 0.0;
    }
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1475)) + _1475;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1476)) + _1476;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1477)) + _1477;
    float _1821 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1798));
    float _1842 = _1069 * 0.5;
    float _1843 = _1070 * 0.5;
    float _1844 = _1071 * 0.5;
    float _1845 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1848 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1851 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1885;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1858 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1862 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1866 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1873 = dot(vec4(cbModelParam._m0[39u]), vec4(_1842, _1843, _1844, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1896;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1887 = dot(vec4(cbModelParam._m0[40u]), vec4(_1842, _1843, _1844, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1900 = (_1896 * cbModelParam._m0[1u].x) + (_1885 * (1.0 - cbModelParam._m0[1u].x));
    float _1910 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1910 : min(cbModelParam._m0[25u].z, _1910));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1958 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1962 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1966 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1969 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1972 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1975 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _2003;
        if (_1969 > 0.0)
        {
            _2003 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2003 = frontier_phi_17_15_ladder;
        }
        float _2226;
        if (_1972 > 0.0)
        {
            _2226 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2226 = frontier_phi_26_22_ladder;
        }
        float _2483;
        if (_1975 > 0.0)
        {
            _2483 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2483 = frontier_phi_38_33_ladder;
        }
        float _2485 = isnan(_2226) ? _2003 : (isnan(_2003) ? _2226 : min(_2003, _2226));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1969) + _1958;
        float _2491 = (_2486 * _1972) + _1962;
        float _2492 = (_2486 * _1975) + _1966;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1911);
            frontier_phi_16_38_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _1991 = frontier_phi_16_38_ladder_2;
        _1993 = frontier_phi_16_38_ladder_1;
        _1995 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1911);
        _1991 = _1979.x * cbModelParam._m0[1u].y;
        _1993 = _1979.y * cbModelParam._m0[1u].y;
        _1995 = _1979.z * cbModelParam._m0[1u].y;
    }
    float _1999 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1999 : min(cbModelParam._m0[25u].w, _1999));
    float _2089;
    float _2091;
    float _2093;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2053 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2057 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2061 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2064 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2067 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2070 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2231;
        if (_2064 > 0.0)
        {
            _2231 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2231 = frontier_phi_28_24_ladder;
        }
        float _2510;
        if (_2067 > 0.0)
        {
            _2510 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2510 = frontier_phi_40_35_ladder;
        }
        float _2723;
        if (_2070 > 0.0)
        {
            _2723 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2723 = frontier_phi_49_46_ladder;
        }
        float _2725 = isnan(_2510) ? _2231 : (isnan(_2231) ? _2510 : min(_2231, _2510));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _2064) + _2053;
        float _2731 = (_2726 * _2067) + _2057;
        float _2732 = (_2726 * _2070) + _2061;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _2000);
            frontier_phi_25_49_ladder = _2931.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2931.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2931.x * cbModelParam._m0[1u].z;
        }
        _2089 = frontier_phi_25_49_ladder_2;
        _2091 = frontier_phi_25_49_ladder_1;
        _2093 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _2000);
        _2089 = _2073.x * cbModelParam._m0[1u].z;
        _2091 = _2073.y * cbModelParam._m0[1u].z;
        _2093 = _2073.z * cbModelParam._m0[1u].z;
    }
    float _2106 = (((_1096 * _1045) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2089 - _1991)) + _1991);
    float _2108 = (((_1096 * _1047) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2091 - _1993)) + _1993);
    float _2110 = (((_1096 * _1048) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2093 - _1995)) + _1995);
    float _2113 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2108, cbSceneParam._m0[89u].y, _2106 * cbSceneParam._m0[89u].x));
    float _2116 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2108, cbSceneParam._m0[90u].y, _2106 * cbSceneParam._m0[90u].x));
    float _2119 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2108, cbSceneParam._m0[91u].y, _2106 * cbSceneParam._m0[91u].x));
    vec4 _2127 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_983, _984));
    float _2129 = _2127.w;
    float _2141 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2129);
    float _2142 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2129);
    float _2143 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2129);
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _1061 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2185 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2189 = _2149 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_884, _885, _886));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_884, _885, _886));
    float _4486 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4497 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2166].x * _2172) * _2210) + (((cbLight._m0[_2176].x * _2141) * _2185) * _2208);
    float _2218 = ((_2172 * cbLight._m0[_2166].y) * _2210) + (((cbLight._m0[_2176].y * _2142) * _2185) * _2208);
    float _2219 = ((_2172 * cbLight._m0[_2166].z) * _2210) + (((cbLight._m0[_2176].z * _2143) * _2185) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2225)
    {
        _2236 = _2217;
        _2238 = _2218;
        _2240 = _2219;
    }
    else
    {
        uint _2244 = _2149 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4508 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2263 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2217;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2218;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2219;
    }
    bool _2243 = _2223.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2243)
    {
        _2281 = _2236;
        _2283 = _2238;
        _2285 = _2240;
    }
    else
    {
        uint _2454 = _2149 + 7u;
        float _2470 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4524 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2473 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2281 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2236;
        _2283 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2238;
        _2285 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2240;
    }
    uint _2288 = _2149 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _887) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2149].x + _963;
    float _2304 = cbLight._m0[_2149].y + _964;
    float _2305 = cbLight._m0[_2149].z + _965;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2149].xyz));
    float _4540 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _4551 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2317 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2318 = dot(vec3(_884, _885, _886), vec3(_2310, _2311, _2312));
    float _4562 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2310, _2311, _2312));
    float _4573 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
    float _2339 = 0.959999978542327880859375 - _1042;
    float _2341 = 0.959999978542327880859375 - _1043;
    float _2342 = 0.959999978542327880859375 - _1044;
    float _2349 = 1.0 - _2302;
    float _2360 = (0.5 / (((_2317 * ((_2316 * _2349) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2349) + _2302) * _2316))) * _2316;
    float _4584 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2376 = _2149 + 9u;
    float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _887) * 0.949999988079071044921875);
    float _2388 = _2387 * _2387;
    float _2389 = cbLight._m0[_2189].x + _963;
    float _2390 = cbLight._m0[_2189].y + _964;
    float _2391 = cbLight._m0[_2189].z + _965;
    float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
    float _2396 = _2395 * _2389;
    float _2397 = _2395 * _2390;
    float _2398 = _2395 * _2391;
    float _2399 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2189].xyz));
    float _4595 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2403 = dot(vec3(_884, _885, _886), vec3(_2396, _2397, _2398));
    float _4606 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2396, _2397, _2398));
    float _4617 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2388 * _2388;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2429 = 1.0 - _2388;
    float _2439 = (0.5 / (((_2317 * ((_2402 * _2429) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2429) + _2388) * _2402))) * _2402;
    float _4628 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2441 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    float _2451 = (((((_2422 * _2339) + _1045) * cbLight._m0[_2376].x) * _2441) * _2172) + ((((cbLight._m0[_2288].x * _2141) * ((_2338 * _2339) + _1045)) * _2362) * _2185);
    float _2452 = (((((_2422 * _2341) + _1047) * cbLight._m0[_2376].y) * _2441) * _2172) + ((((cbLight._m0[_2288].y * _2142) * ((_2338 * _2341) + _1047)) * _2362) * _2185);
    float _2453 = (((((_2422 * _2342) + _1048) * cbLight._m0[_2376].z) * _2441) * _2172) + ((((cbLight._m0[_2288].z * _2143) * ((_2338 * _2342) + _1048)) * _2362) * _2185);
    float _2515;
    float _2517;
    float _2519;
    if (_2225)
    {
        _2515 = _2451;
        _2517 = _2452;
        _2519 = _2453;
    }
    else
    {
        uint _2521 = _2149 + 2u;
        uint _2525 = _2149 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _887) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _963;
        float _2542 = cbLight._m0[_2521].y + _964;
        float _2543 = cbLight._m0[_2521].z + _965;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2521].xyz));
        float _4639 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2555 = dot(vec3(_884, _885, _886), vec3(_2548, _2549, _2550));
        float _4650 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4661 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2317 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2581) + _2540) * _2554))) * _2554;
        float _4672 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2515 = (((((_2574 * _2339) + _1045) * cbLight._m0[_2525].x) * _2593) * _2594) + _2451;
        _2517 = (((((_2574 * _2341) + _1047) * cbLight._m0[_2525].y) * _2593) * _2594) + _2452;
        _2519 = (((((_2574 * _2342) + _1048) * cbLight._m0[_2525].z) * _2593) * _2594) + _2453;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2243)
    {
        _2629 = _2515;
        _2631 = _2517;
        _2633 = _2519;
    }
    else
    {
        uint _2640 = _2149 + 3u;
        uint _2644 = _2149 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _887) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _963;
        float _2661 = cbLight._m0[_2640].y + _964;
        float _2662 = cbLight._m0[_2640].z + _965;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2640].xyz));
        float _4688 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2674 = dot(vec3(_884, _885, _886), vec3(_2667, _2668, _2669));
        float _4699 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4710 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
        float _2700 = 1.0 - _2659;
        float _2710 = (0.5 / (((_2317 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2700) + _2659) * _2673))) * _2673;
        float _4721 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2629 = (((((_2693 * _2339) + _1045) * cbLight._m0[_2644].x) * _2712) * _2713) + _2515;
        _2631 = (((((_2693 * _2341) + _1047) * cbLight._m0[_2644].y) * _2712) * _2713) + _2517;
        _2633 = (((((_2693 * _2342) + _1048) * cbLight._m0[_2644].z) * _2712) * _2713) + _2519;
    }
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_2147.y == 0u)
    {
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2788;
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2788;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2788;
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _984) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _983) / _2804)));
        float _2825 = (log2(_2791 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
        }
        else
        {
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3104)
                {
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3103;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3094 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _2789;
                        float _3300 = _3259.y - _2790;
                        float _3301 = _3259.z - _2791;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_1002, _1005, _1008), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4747 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _2789;
                        float _3335 = (-0.0) - _2790;
                        float _3336 = (-0.0) - _2791;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3351 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3352 = 1.0 - _1077;
                        float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                        float _3360 = _3359 * _3359;
                        float _3361 = _3360 * _3360;
                        float _3362 = _3341 + _3306;
                        float _3363 = _3342 + _3307;
                        float _3364 = _3343 + _3308;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3372 = dot(vec3(_1002, _1005, _1008), vec3(_3341, _3342, _3343));
                        float _4763 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3376 = dot(vec3(_1002, _1005, _1008), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                        float _4774 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                        float _3384 = _3319 * _3360;
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3309) + _3385;
                        float _4785 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3390 = 1.0 - _3360;
                        float _3400 = (0.5 / (((_3389 * ((_3375 * _3390) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3360) * _3375))) * _3389;
                        float _4796 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3411 = (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) / ((_3383 * _3383) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3163 = (_3330 * _3278.x) + _3236;
                        _3164 = (_3330 * _3278.y) + _3237;
                        _3165 = (_3330 * _3278.z) + _3238;
                        _3160 = (_3411 * _3295.x) + _3233;
                        _3161 = (_3411 * _3295.y) + _3234;
                        _3162 = (_3411 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                _2937 = frontier_phi_66_pred;
                _2947 = frontier_phi_66_pred_1;
                _2945 = frontier_phi_66_pred_2;
                _2943 = frontier_phi_66_pred_3;
                _2941 = frontier_phi_66_pred_4;
                _2939 = frontier_phi_66_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2937;
                    _3089 = _2939;
                    _3090 = _2941;
                    _3091 = _2943;
                    _3092 = _2945;
                    _3093 = _2947;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
        }
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.z;
        uint _2953 = (_2951 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2953) & _2835) == 0u)
        {
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
            _3064 = _2944;
            _3066 = _2946;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
            float _3082 = _3081 * _2789;
            float _3083 = _3081 * _2790;
            float _3084 = _3081 * _2791;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2953 < ((_2951 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3216 = _2936;
                float _3217 = _2938;
                float _3218 = _2940;
                float _3219 = _2942;
                float _3220 = _2944;
                float _3221 = _2946;
                uint _3222 = _2953;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3232)
                    {
                        frontier_phi_77_pred = _3221;
                        frontier_phi_77_pred_1 = _3220;
                        frontier_phi_77_pred_2 = _3219;
                        frontier_phi_77_pred_3 = _3218;
                        frontier_phi_77_pred_4 = _3217;
                        frontier_phi_77_pred_5 = _3216;
                    }
                    else
                    {
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        uint _3444 = _3231;
                        uint _3445;
                        vec4 _3470;
                        float _3471;
                        vec4 _3486;
                        vec3 _3498;
                        vec4 _3513;
                        vec4 _3528;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3455 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3444));
                            _3445 = (_3444 + 4294967295u) & _3444;
                            uint _3457 = _3455 * 40u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3471 = _3470.w;
                            uint _3473 = (_3455 * 40u) + 4u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3455 * 40u) + 8u;
                            _3498 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x));
                            uint _3500 = (_3455 * 40u) + 16u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3455 * 40u) + 20u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3455 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3455 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_2791, _3562.z, fma(_2790, _3562.y, _3562.x * _2789)) + _3562.w;
                            _3575 = !((fma(_2791, _3543.z, fma(_2790, _3543.y, _3543.x * _2789)) + _3543.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3470.x - _2789;
                                float _3603 = _3470.y - _2790;
                                float _3604 = _3470.z - _2791;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3471 * _3471));
                                float _4807 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3620 = sqrt(_3605) * _3486.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_1002, _1005, _1008))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_2791, _3513.z, fma(_2790, _3513.y, _3513.x * _2789)) + _3513.w) / _3574;
                                float _3634 = (fma(_2791, _3528.z, fma(_2790, _3528.y, _3528.x * _2789)) + _3528.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4823 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _1077;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3082;
                                float _3664 = _3610 - _3083;
                                float _3665 = _3611 - _3084;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4834 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3677 = dot(vec3(_1002, _1005, _1008), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4845 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_1002, _1005, _1008), vec3(_3609, _3610, _3611))) + _3686;
                                float _4856 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4867 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3640 * _3486.y;
                                frontier_phi_83_pred_1 = _3640 * _3486.x;
                                frontier_phi_83_pred_2 = _3714 * _3498.z;
                                frontier_phi_83_pred_3 = _3714 * _3498.y;
                                frontier_phi_83_pred_4 = _3714 * _3498.x;
                                frontier_phi_83_pred_5 = _3640 * _3486.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_83_pred;
                            _3721 = frontier_phi_83_pred_1;
                            _3720 = frontier_phi_83_pred_2;
                            _3719 = frontier_phi_83_pred_3;
                            _3718 = frontier_phi_83_pred_4;
                            _3723 = frontier_phi_83_pred_5;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            if (_3445 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3445;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3430;
                        frontier_phi_77_pred_1 = _3429;
                        frontier_phi_77_pred_2 = _3428;
                        frontier_phi_77_pred_3 = _3427;
                        frontier_phi_77_pred_4 = _3426;
                        frontier_phi_77_pred_5 = _3425;
                    }
                    _3067 = frontier_phi_77_pred;
                    _3065 = frontier_phi_77_pred_1;
                    _3063 = frontier_phi_77_pred_2;
                    _3061 = frontier_phi_77_pred_3;
                    _3059 = frontier_phi_77_pred_4;
                    _3057 = frontier_phi_77_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3057;
                        _3217 = _3059;
                        _3218 = _3061;
                        _3219 = _3063;
                        _3220 = _3065;
                        _3221 = _3067;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3061;
                frontier_phi_58_59_ladder_1 = _3067;
                frontier_phi_58_59_ladder_2 = _3065;
                frontier_phi_58_59_ladder_3 = _3063;
                frontier_phi_58_59_ladder_4 = _3059;
                frontier_phi_58_59_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_58_59_ladder = _2940;
                frontier_phi_58_59_ladder_1 = _2946;
                frontier_phi_58_59_ladder_2 = _2944;
                frontier_phi_58_59_ladder_3 = _2942;
                frontier_phi_58_59_ladder_4 = _2938;
                frontier_phi_58_59_ladder_5 = _2936;
            }
            _3056 = frontier_phi_58_59_ladder_5;
            _3058 = frontier_phi_58_59_ladder_4;
            _3060 = frontier_phi_58_59_ladder;
            _3062 = frontier_phi_58_59_ladder_3;
            _3064 = frontier_phi_58_59_ladder_2;
            _3066 = frontier_phi_58_59_ladder_1;
        }
        float _3071 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2848 = (_3071 * _3062) + _2281;
        _2850 = (_3071 * _3064) + _2283;
        _2852 = (_3071 * _3066) + _2285;
        _2854 = ((_3056 * _1045) * _3071) + _2629;
        _2856 = ((_3058 * _1047) * _3071) + _2631;
        _2858 = ((_3060 * _1048) * _3071) + _2633;
    }
    else
    {
        _2848 = _2281;
        _2850 = _2283;
        _2852 = _2285;
        _2854 = _2629;
        _2856 = _2631;
        _2858 = _2633;
    }
    float _4883 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4894 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4905 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2875 = ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2848 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1061))) + ((_2854 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    float _2876 = ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2850 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1061))) + ((_2856 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    float _2877 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2852 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1061))) + ((_2858 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    uint _2878 = _285 + 6u;
    float _2886 = _983 / cbSceneParam._m0[86u].x;
    float _2887 = _984 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _906 : (isnan(_906) ? cbSceneParam._m0[77u].w : min(_906, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_906 > cbSceneParam._m0[78u].w)
    {
        float _2961 = isnan(_906) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _906 : min(cbSceneParam._m0[80u].w, _906));
        float _2962 = _2961 / _906;
        float _2973 = _2962 * _956;
        float _2974 = _957 * _2962;
        float _2975 = (-0.0) - _2974;
        float _2976 = _2962 * _958;
        float _2978 = (cbSceneParam._m0[77u].w * _2975) / _2961;
        float _2979 = _2978 + cbSceneParam._m0[79u].w;
        float _2980 = cbSceneParam._m0[79u].w - _2974;
        float _2986 = sqrt(((_2973 * _2973) + (_2974 * _2974)) + (_2976 * _2976));
        float _2989 = (1.0 - (cbSceneParam._m0[77u].w / _2961)) * _2986;
        float _2994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3173;
        if (abs((_2975 - _2978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3173 = ((((_2979 > 0.0) ? exp2(_2994 * _2979) : (2.0 - exp2(_2996 * _2979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2989;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : max(_2979, _2980));
            float _3119 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : min(_2979, _2980));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3173 = ((abs(_2986 / _2975) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_2994 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_2994 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_2996 * _3128) - exp2(_2996 * _3129)) * _3117))) + (_2989 * cbSceneParam._m0[80u].z);
        }
        vec4 _3175 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3184 = exp2((_3173 * (-1.44269502162933349609375)) * (1.0 - _3175.w));
        float _3185 = log2(_3184);
        float _3201 = log2(_2906);
        _2998 = (exp2(_3201 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].x)) * _3175.x) / cbSceneParam._m0[78u].x)) + _2903;
        _3000 = (exp2(_3201 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].y)) * _3175.y) / cbSceneParam._m0[78u].y)) + _2904;
        _3002 = (exp2(_3201 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].z)) * _3175.z) / cbSceneParam._m0[78u].z)) + _2905;
        _3004 = _3184 * _2906;
    }
    else
    {
        _2998 = _2903;
        _3000 = _2904;
        _3002 = _2905;
        _3004 = _2906;
    }
    bool _3211;
    vec4 _3014;
    vec4 _3036;
    float _3038;
    float _3042;
    float _3043;
    float _3044;
    float _3045;
    bool _3055;
    for (;;)
    {
        _3014 = cbMatDynParam._m0[0u];
        float _3016 = roundEven(_3014.y);
        bool _3017 = _3016 == 3.0;
        float _3018 = log2(_3004);
        float _3025 = exp2(_3018 * cbSceneParam._m0[78u].x) * _2875;
        float _3026 = exp2(_3018 * cbSceneParam._m0[78u].y) * _2876;
        float _3027 = exp2(_3018 * cbSceneParam._m0[78u].z) * _2877;
        float _3034 = _972 + (-0.5);
        _3036 = cbMtdParam._m0[1u];
        _3038 = _3036.y * _3034;
        float _3041 = (_3016 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3042 = _3041 * (_3017 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2998)));
        _3043 = _3041 * (_3017 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3000)));
        _3044 = _3041 * (_3017 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3002)));
        _3045 = _3034 * 0.999000012874603271484375;
        _3055 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3055)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3045) < 0.5)
            {
                _3211 = true;
                break;
            }
        }
        uint _3152 = _1021 + uint(_3014.w);
        if ((cbInstanceData._m0[_3152].w < 1.0) && ((cbInstanceData._m0[_3152].w + _3045) < 0.5))
        {
            _3211 = true;
            break;
        }
        if ((_3038 + 1.0) < _3036.x)
        {
            _3211 = true;
            break;
        }
        _3211 = false;
        break;
    }
    float _3416;
    if (_3211)
    {
        discard_state = true;
        _3416 = 0.0;
    }
    else
    {
        _3416 = cbInstanceData._m0[_2878].w;
    }
    SV_Target.x = _3042;
    SV_Target.y = _3043;
    SV_Target.z = _3044;
    SV_Target.w = _3416;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
    discard_exit();
}


