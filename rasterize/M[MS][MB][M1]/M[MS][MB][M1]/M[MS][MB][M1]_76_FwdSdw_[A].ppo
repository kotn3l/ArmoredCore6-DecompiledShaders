#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1327;
float _3991;
float _3992;
float _3993;
float _3994;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4003 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _473 = ((_443.z - _464) * _396) + _464;
    float _476 = ((((_443.x - _462) * _396) + _462) * 2.0) + (-1.0);
    float _477 = ((((_443.y - _463) * _396) + _463) * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _4014 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))));
    float _488 = _476 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_418.x * 2.0) + (-1.0)));
    float _489 = _477 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_418.y * 2.0) + (-1.0)));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _547 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_518 - _519) * cbMtdParam._m0[24u].w) + _519) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4025 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _556 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _548) + _403;
    float _557 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _548) + _404;
    float _558 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _548) + _405;
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _586 = _584.x;
    float _604 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _586) * _396) + _586;
    float _608 = ((_570.x - _604) * cbMtdParam._m0[19u].z) + _604;
    float _610 = _608 - (_608 * _548);
    float _615 = (((_418.z - _473) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _473;
    float _619 = ((cbMtdParam._m0[23u].y - _615) * _548) + _615;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _645 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_247, _248, _249, 0.0));
    vec4 _660 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _278) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _279) + cbTextureTilingScale._m0[18u].w));
    float _662 = _660.x;
    float _667 = fract(_660.w + cbPerFrame._m0[22u].x);
    float _669 = (1.0 - _667) * _662;
    float _674 = ((_667 + (-1.0)) + _662) * 9.0;
    float _676 = ((_662 + (-1.0)) + _667) * 9.0;
    float _677 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _678 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _692 = (_669 * ((_660.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _677 : (isnan(_677) ? 3.0 : min(_677, 3.0))) * 3.1415927410125732421875);
    float _694 = (_669 * ((_660.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _678 : (isnan(_678) ? 3.0 : min(_678, 3.0))) * 3.1415927410125732421875);
    float _698 = inversesqrt(dot(vec3(_692, _694, 1.0), vec3(_692, _694, 1.0)));
    float _714 = (((((0.5 - _640) + ((_692 * 0.5) * _698)) * _645) + _640) * 2.0) + (-1.0);
    float _715 = (((((0.5 - _641) + ((_698 * 0.5) * _694)) * _645) + _641) * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4056 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _732 = ((((cbMtdParam._m0[22u].z * _488) - _488) + _714) * _548) + _488;
    float _733 = ((((cbMtdParam._m0[22u].z * _489) - _489) + _715) * _548) + _489;
    float _734 = (_548 * (sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) - _483)) + _483;
    float _736 = cbMtdParam._m0[22u].x + _502.w;
    float _739 = fma(_734, _247, fma(_733, _253 * TANGENT.x, (_239 * _231) * _732));
    float _742 = fma(_734, _248, fma(_733, _253 * TANGENT.y, (_239 * _232) * _732));
    float _745 = fma(_734, _249, fma(_733, _253 * TANGENT.z, (_239 * _233) * _732));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _4067 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _753 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4089 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4100 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4111 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4122 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _758 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _822 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _812);
    float _823 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _812);
    float _824 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _812);
    float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
    float _829 = _822 * _828;
    float _830 = _823 * _828;
    float _831 = _824 * _828;
    vec4 _836 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _838 = _836.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1009 = sqrt(((_822 * _822) + (_823 * _823)) + (_824 * _824));
        float _1015 = (cbMatDynParam._m0[5u].x * _1009) + cbMatDynParam._m0[5u].y;
        float _4133 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1020 = (cbMatDynParam._m0[5u].z * _1009) + cbMatDynParam._m0[5u].w;
        float _4144 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) - _1016)) + _1016) < ((_838 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _849 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _850 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _868 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _871 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _874 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _887 = _259 + 9u;
    uint _888 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _894 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_888].x;
    float _895 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_888].y;
    float _896 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_888].z;
    float _4155 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _900 = 1.0 - _758;
    float _901 = _897 * _900;
    float _902 = _898 * _900;
    float _903 = _899 * _900;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _758;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _758;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _758;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _849, cbSceneParam._m0[86u].y * _850));
    float _927 = ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * TEXCOORD_5.w) * _923.x;
    float _928 = dot(vec3(_750, _751, _752), vec3(_829, _830, _831));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _750) - _829;
    float _936 = (_931 * _751) - _830;
    float _937 = (_931 * _752) - _831;
    float _941 = abs(dot(vec3(_829, _830, _831), vec3(_750, _751, _752)));
    float _4188 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_753);
    float _955 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _961 = (1.0 - _955) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _962 = _955 * _943;
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_998, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990));
        float _1056 = fma(_998, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990));
        float _1060 = fma(_998, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990));
        float _1084 = _990 + _750;
        float _1085 = _994 + _751;
        float _1086 = _998 + _752;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1052;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1056;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1060;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_750, _751, _752), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4236 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_750, _751, _752), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_750, _751, _752), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4302 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1369 = fma(_998, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990));
        float _1373 = fma(_998, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990));
        float _1377 = fma(_998, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990));
        float _1400 = _990 + _750;
        float _1401 = _994 + _751;
        float _1402 = _998 + _752;
        float _1412 = fma(_1402, cbModelParam._m0[30u].z, fma(_1401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1400)) - _1369;
        float _1413 = fma(_1402, cbModelParam._m0[31u].z, fma(_1401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1400)) - _1373;
        float _1414 = fma(_1402, cbModelParam._m0[32u].z, fma(_1401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1400)) - _1377;
        float _1418 = inversesqrt(dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414)));
        float _1431 = ((_1418 * _1412) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1369 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1418 * _1413) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1373 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1418 * _1414) / cbModelParam._m0[35u].z) + ((((((_1377 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        float _1468 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1435.x + (-0.5));
        float _1470 = _1468 * (_1435.y + (-0.5));
        float _1471 = _1468 * (_1435.z + (-0.5));
        float _1478 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1442.x + (-0.5));
        float _1480 = _1478 * (_1442.y + (-0.5));
        float _1481 = _1478 * (_1442.z + (-0.5));
        float _1488 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1449.x + (-0.5));
        float _1490 = _1488 * (_1449.y + (-0.5));
        float _1491 = _1488 * (_1449.z + (-0.5));
        float _1498 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1456.x + (-0.5));
        float _1500 = _1498 * (_1456.y + (-0.5));
        float _1501 = _1498 * (_1456.z + (-0.5));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = _1469 * 0.5;
        float _1506 = _1479 * 0.5;
        float _1507 = _1489 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_750, _751, _752), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4365 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1532 + 1.0))) + _1537) * _1502;
        float _1547 = _1470 * 0.5;
        float _1548 = _1480 * 0.5;
        float _1549 = _1490 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_750, _751, _752), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4398 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1574 + 1.0))) + _1579) * _1503;
        float _1589 = _1471 * 0.5;
        float _1590 = _1481 * 0.5;
        float _1591 = _1491 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_750, _751, _752), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4431 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1616 + 1.0))) + _1621) * _1504;
        _1638 = _1471;
        _1639 = _1470;
        _1640 = _1469;
        _1641 = _1481;
        _1642 = _1480;
        _1643 = _1479;
        _1644 = _1491;
        _1645 = _1490;
        _1646 = _1489;
        _1647 = _1504;
        _1648 = _1503;
        _1649 = _1502;
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
    }
    else
    {
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = _1327;
        _1649 = _1327;
        _1650 = 0.0;
        _1651 = 0.0;
        _1652 = 0.0;
    }
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1340)) + _1340;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1341)) + _1341;
    float _1685 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1662));
    float _1706 = _935 * 0.5;
    float _1707 = _936 * 0.5;
    float _1708 = _937 * 0.5;
    float _1709 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1712 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1715 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1749;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1722 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1726 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1730 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1737 = dot(vec4(cbModelParam._m0[39u]), vec4(_1706, _1707, _1708, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1760;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1751 = dot(vec4(cbModelParam._m0[40u]), vec4(_1706, _1707, _1708, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1764 = (_1760 * cbModelParam._m0[1u].x) + (_1749 * (1.0 - cbModelParam._m0[1u].x));
    float _1774 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1774 : min(cbModelParam._m0[25u].z, _1774));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_998, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_998, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_998, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1838 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1841 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1869 = frontier_phi_17_15_ladder;
        }
        float _2041;
        if (_1838 > 0.0)
        {
            _2041 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2041 = frontier_phi_26_22_ladder;
        }
        float _2336;
        if (_1841 > 0.0)
        {
            _2336 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2336 = frontier_phi_38_33_ladder;
        }
        float _2338 = isnan(_2041) ? _1869 : (isnan(_1869) ? _2041 : min(_1869, _2041));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1835) + _1824;
        float _2344 = (_2339 * _1838) + _1828;
        float _2345 = (_2339 * _1841) + _1832;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1775);
            frontier_phi_16_38_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_16_38_ladder_2;
        _1859 = frontier_phi_16_38_ladder_1;
        _1861 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1775);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_998, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_998, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_998, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1934 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1937 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2046;
        if (_1931 > 0.0)
        {
            _2046 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2046 = frontier_phi_28_24_ladder;
        }
        float _2363;
        if (_1934 > 0.0)
        {
            _2363 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2363 = frontier_phi_40_35_ladder;
        }
        float _2701;
        if (_1937 > 0.0)
        {
            _2701 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2701 = frontier_phi_50_47_ladder;
        }
        float _2703 = isnan(_2363) ? _2046 : (isnan(_2046) ? _2363 : min(_2046, _2363));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _1931) + _1920;
        float _2709 = (_2704 * _1934) + _1924;
        float _2710 = (_2704 * _1937) + _1928;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_25_50_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_25_50_ladder_2;
        _1958 = frontier_phi_25_50_ladder_1;
        _1960 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1866);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1973 = (((_961 * _911) + _962) * _927) * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1975 = (((_961 * _913) + _962) * _927) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1977 = (((_961 * _914) + _962) * _927) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2033 = _2020 / _2032;
    float _2034 = _2024 / _2032;
    float _2035 = _2028 / _2032;
    float _2182;
    float _2183;
    float _2184;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2062 = ((uint(_2035 > cbSceneParam._m0[59u].y) + uint(_2035 > cbSceneParam._m0[59u].x)) + uint(_2035 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2063 = _2062 + 43u;
        uint _2071 = _2062 + 44u;
        uint _2079 = _2062 + 45u;
        uint _2087 = _2062 + 46u;
        float _2098 = fma(_2032, cbSceneParam._m0[_2063].w, fma(_2028, cbSceneParam._m0[_2063].z, fma(_2024, cbSceneParam._m0[_2063].y, _2020 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2032, cbSceneParam._m0[_2071].w, fma(_2028, cbSceneParam._m0[_2071].z, fma(_2024, cbSceneParam._m0[_2071].y, _2020 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2032, cbSceneParam._m0[_2087].w, fma(_2028, cbSceneParam._m0[_2087].z, fma(_2024, cbSceneParam._m0[_2087].y, _2020 * cbSceneParam._m0[_2087].x)));
        float _2115 = cbSceneParam._m0[33u].z * _2110;
        float _2117 = cbSceneParam._m0[33u].w * _2110;
        float _2120 = fma(_2032, cbSceneParam._m0[_2079].w, fma(_2028, cbSceneParam._m0[_2079].z, fma(_2024, cbSceneParam._m0[_2079].y, _2020 * cbSceneParam._m0[_2079].x))) / _2110;
        float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
        float _4557 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2175 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2098) / _2110, (_2117 + _2102) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2098) / _2110, (_2102 - _2115) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2115) / _2110, (_2102 - _2117) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2117) / _2110, (_2115 + _2102) / _2110), _2120), 0.0)).x), vec4(0.25)));
        _2182 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
        _2183 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
        _2184 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2182 = 1.0;
        _2183 = 1.0;
        _2184 = 1.0;
    }
    float _2248;
    float _2250;
    float _2252;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2236 = fma(_2032, cbSceneParam._m0[63u].w, fma(_2028, cbSceneParam._m0[63u].z, fma(_2024, cbSceneParam._m0[63u].y, _2020 * cbSceneParam._m0[63u].x)));
        float _2237 = fma(_2032, cbSceneParam._m0[60u].w, fma(_2028, cbSceneParam._m0[60u].z, fma(_2024, cbSceneParam._m0[60u].y, _2020 * cbSceneParam._m0[60u].x))) / _2236;
        float _2238 = fma(_2032, cbSceneParam._m0[61u].w, fma(_2028, cbSceneParam._m0[61u].z, fma(_2024, cbSceneParam._m0[61u].y, _2020 * cbSceneParam._m0[61u].x))) / _2236;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2237 >= cbSceneParam._m0[64u].x) && (_2238 >= cbSceneParam._m0[64u].y)) && (_2237 <= cbSceneParam._m0[64u].z)) && (_2238 <= cbSceneParam._m0[64u].w))
        {
            float _2376 = fma(_2032, cbSceneParam._m0[62u].w, fma(_2028, cbSceneParam._m0[62u].z, fma(_2024, cbSceneParam._m0[62u].y, _2020 * cbSceneParam._m0[62u].x))) / _2236;
            float _2380 = isnan(cbSceneParam._m0[41u].w) ? _2376 : (isnan(_2376) ? cbSceneParam._m0[41u].w : max(_2376, cbSceneParam._m0[41u].w));
            float _2423 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
            float _4573 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
            float _2430 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2237, cbSceneParam._m0[33u].w + _2238), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2237, _2238 - cbSceneParam._m0[33u].z), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].z, _2238 - cbSceneParam._m0[33u].w), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2238), _2380), 0.0)).x), vec4(0.25)));
            float _2434 = 1.0 - (_2430 * cbSceneParam._m0[34u].x);
            float _2435 = 1.0 - (_2430 * cbSceneParam._m0[34u].y);
            float _2436 = 1.0 - (_2430 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_37_36_ladder_1 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_37_36_ladder_2 = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
        }
        else
        {
            frontier_phi_37_36_ladder = _2184;
            frontier_phi_37_36_ladder_1 = _2183;
            frontier_phi_37_36_ladder_2 = _2182;
        }
        _2248 = frontier_phi_37_36_ladder_2;
        _2250 = frontier_phi_37_36_ladder_1;
        _2252 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2248 = _2182;
        _2250 = _2183;
        _2252 = _2184;
    }
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _927 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_750, _751, _752));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_750, _751, _752));
    float _4609 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4620 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2248) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2250) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2252) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2437;
    float _2439;
    float _2441;
    if (_2335)
    {
        _2437 = _2327;
        _2439 = _2328;
        _2441 = _2329;
    }
    else
    {
        uint _2445 = _2259 + 6u;
        float _2461 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4631 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2464 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2437 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2327;
        _2439 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2328;
        _2441 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2329;
    }
    bool _2444 = _2333.y == 0u;
    float _2499;
    float _2501;
    float _2503;
    if (_2444)
    {
        _2499 = _2437;
        _2501 = _2439;
        _2503 = _2441;
    }
    else
    {
        uint _2672 = _2259 + 7u;
        float _2688 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2689 = _2688 * _2688;
        float _4647 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2690 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2691 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2499 = (((cbLight._m0[_2672].x * 0.3183098733425140380859375) * _2690) * _2691) + _2437;
        _2501 = (((cbLight._m0[_2672].y * 0.3183098733425140380859375) * _2690) * _2691) + _2439;
        _2503 = (((cbLight._m0[_2672].z * 0.3183098733425140380859375) * _2690) * _2691) + _2441;
    }
    uint _2506 = _2259 + 8u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _753) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2259].x + _829;
    float _2522 = cbLight._m0[_2259].y + _830;
    float _2523 = cbLight._m0[_2259].z + _831;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2259].xyz));
    float _4663 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2535 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2536 = dot(vec3(_750, _751, _752), vec3(_2528, _2529, _2530));
    float _4685 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2528, _2529, _2530));
    float _4696 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2520 * _2520;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2557 = 0.959999978542327880859375 - _908;
    float _2559 = 0.959999978542327880859375 - _909;
    float _2560 = 0.959999978542327880859375 - _910;
    float _2567 = 1.0 - _2520;
    float _2578 = (0.5 / (((_2535 * ((_2534 * _2567) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2567) + _2520) * _2534))) * _2534;
    float _4707 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    uint _2594 = _2259 + 9u;
    float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _753) * 0.949999988079071044921875);
    float _2606 = _2605 * _2605;
    float _2607 = cbLight._m0[_2299].x + _829;
    float _2608 = cbLight._m0[_2299].y + _830;
    float _2609 = cbLight._m0[_2299].z + _831;
    float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
    float _2614 = _2613 * _2607;
    float _2615 = _2613 * _2608;
    float _2616 = _2613 * _2609;
    float _2617 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2299].xyz));
    float _4718 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2621 = dot(vec3(_750, _751, _752), vec3(_2614, _2615, _2616));
    float _4729 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2614, _2615, _2616));
    float _4740 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2606 * _2606;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2647 = 1.0 - _2606;
    float _2657 = (0.5 / (((_2535 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2647) + _2606) * _2620))) * _2620;
    float _4751 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    float _2669 = (((((_2640 * _2557) + _911) * cbLight._m0[_2594].x) * _2659) * _2282) + ((((cbLight._m0[_2506].x * _2248) * ((_2556 * _2557) + _911)) * _2580) * _2295);
    float _2670 = (((((_2640 * _2559) + _913) * cbLight._m0[_2594].y) * _2659) * _2282) + ((((cbLight._m0[_2506].y * _2250) * ((_2556 * _2559) + _913)) * _2580) * _2295);
    float _2671 = (((((_2640 * _2560) + _914) * cbLight._m0[_2594].z) * _2659) * _2282) + ((((cbLight._m0[_2506].z * _2252) * ((_2556 * _2560) + _914)) * _2580) * _2295);
    float _2727;
    float _2729;
    float _2731;
    if (_2335)
    {
        _2727 = _2669;
        _2729 = _2670;
        _2731 = _2671;
    }
    else
    {
        uint _2733 = _2259 + 2u;
        uint _2737 = _2259 + 10u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _753) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _829;
        float _2754 = cbLight._m0[_2733].y + _830;
        float _2755 = cbLight._m0[_2733].z + _831;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2733].xyz));
        float _4762 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2767 = dot(vec3(_750, _751, _752), vec3(_2760, _2761, _2762));
        float _4773 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4784 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2793 = 1.0 - _2752;
        float _2803 = (0.5 / (((_2535 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2793) + _2752) * _2766))) * _2766;
        float _4795 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2727 = (((((_2786 * _2557) + _911) * cbLight._m0[_2737].x) * _2805) * _2806) + _2669;
        _2729 = (((((_2786 * _2559) + _913) * cbLight._m0[_2737].y) * _2805) * _2806) + _2670;
        _2731 = (((((_2786 * _2560) + _914) * cbLight._m0[_2737].z) * _2805) * _2806) + _2671;
    }
    float _2837;
    float _2839;
    float _2841;
    if (_2444)
    {
        _2837 = _2727;
        _2839 = _2729;
        _2841 = _2731;
    }
    else
    {
        uint _2848 = _2259 + 3u;
        uint _2852 = _2259 + 11u;
        float _2866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2848].w)) * _753) * 0.949999988079071044921875);
        float _2867 = _2866 * _2866;
        float _2868 = cbLight._m0[_2848].x + _829;
        float _2869 = cbLight._m0[_2848].y + _830;
        float _2870 = cbLight._m0[_2848].z + _831;
        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
        float _2875 = _2874 * _2868;
        float _2876 = _2874 * _2869;
        float _2877 = _2874 * _2870;
        float _2878 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2848].xyz));
        float _4811 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2882 = dot(vec3(_750, _751, _752), vec3(_2875, _2876, _2877));
        float _4822 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2886 = dot(vec3(cbLight._m0[_2848].xyz), vec3(_2875, _2876, _2877));
        float _4833 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2890 = _2867 * _2867;
        float _2894 = ((_2885 * _2885) * (_2890 + (-1.0))) + 1.0;
        float _2901 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2908 = 1.0 - _2867;
        float _2918 = (0.5 / (((_2535 * ((_2881 * _2908) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2908) + _2867) * _2881))) * _2881;
        float _4844 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2920 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2890 / ((_2894 * _2894) * 3.141590118408203125));
        float _2921 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2837 = (((((_2901 * _2557) + _911) * cbLight._m0[_2852].x) * _2920) * _2921) + _2727;
        _2839 = (((((_2901 * _2559) + _913) * cbLight._m0[_2852].y) * _2920) * _2921) + _2729;
        _2841 = (((((_2901 * _2560) + _914) * cbLight._m0[_2852].z) * _2920) * _2921) + _2731;
    }
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_2257.y == 0u)
    {
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.x;
        uint _2954 = uint((float(_2942.y) * floor(float(uint(cbSceneParam._m0[85u].y * _850) / _2943))) + floor(float(uint(cbSceneParam._m0[85u].x * _849) / _2943)));
        float _2964 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2965 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        uint _2968 = uint(isnan(14.0) ? _2965 : (isnan(_2965) ? 14.0 : min(_2965, 14.0)));
        uvec4 _2973 = texelFetch(g_lightClusterGridBuffer, int(((_2968 << 2u) + (_2954 << 6u)) >> 2u));
        uint _2974 = _2973.x;
        uint _2975 = _2942.z;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((((1u << ((_2975 >> 4u) & 15u)) + 4294967295u) & _2974) == 0u) || ((_2975 & 240u) == 0u))
        {
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
        }
        else
        {
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            uint _3213 = 0u;
            uint _3222;
            bool _3223;
            for (;;)
            {
                _3222 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                _3223 = _3222 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3223)
                {
                    frontier_phi_71_pred = _3212;
                    frontier_phi_71_pred_1 = _3211;
                    frontier_phi_71_pred_2 = _3210;
                    frontier_phi_71_pred_3 = _3209;
                    frontier_phi_71_pred_4 = _3208;
                    frontier_phi_71_pred_5 = _3207;
                }
                else
                {
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    uint _3358;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3222;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    for (;;)
                    {
                        uint _3362 = uint(findLSB(_3358)) + (_3213 << 5u);
                        uint _3359 = (_3358 + 4294967295u) & _3358;
                        uint _3364 = _3362 * 48u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3384 = (_3362 * 48u) + 4u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3403 = (_3362 * 48u) + 8u;
                        vec3 _3414 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x));
                        float _3418 = _3378.x - _2033;
                        float _3419 = _3378.y - _2034;
                        float _3420 = _3378.z - _2035;
                        float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                        float _3424 = inversesqrt(_3421);
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3428 = dot(vec3(_868, _871, _874), vec3(_3425, _3426, _3427));
                        float _3433 = 1.0 - (_3421 * _3378.w);
                        float _4870 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3435 = sqrt(_3421) * _3397.w;
                        float _3438 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3428) + _3439;
                        float _3445 = _3435 * _3435;
                        float _3449 = ((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3434) / ((_3445 * 0.699999988079071044921875) + 1.0);
                        float _3453 = (-0.0) - _2033;
                        float _3454 = (-0.0) - _2034;
                        float _3455 = (-0.0) - _2035;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3469 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                        float _3470 = 1.0 - _943;
                        float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                        float _3478 = _3477 * _3477;
                        float _3479 = _3478 * _3478;
                        float _3480 = _3460 + _3425;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                        float _3490 = dot(vec3(_868, _871, _874), vec3(_3460, _3461, _3462));
                        float _4886 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3493 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3494 = dot(vec3(_868, _871, _874), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                        float _4897 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                        float _3502 = _3438 * _3478;
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3428) + _3503;
                        float _4908 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3507 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3508 = 1.0 - _3478;
                        float _3518 = (0.5 / (((_3507 * ((_3493 * _3508) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3478) * _3493))) * _3507;
                        float _4919 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3528 = (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3501 * _3501) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125))) * _3434;
                        _3282 = (_3449 * _3397.x) + _3355;
                        _3283 = (_3449 * _3397.y) + _3356;
                        _3284 = (_3449 * _3397.z) + _3357;
                        _3279 = (_3528 * _3414.x) + _3352;
                        _3280 = (_3528 * _3414.y) + _3353;
                        _3281 = (_3528 * _3414.z) + _3354;
                        if (_3359 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3359;
                        }
                    }
                    frontier_phi_71_pred = _3284;
                    frontier_phi_71_pred_1 = _3283;
                    frontier_phi_71_pred_2 = _3282;
                    frontier_phi_71_pred_3 = _3281;
                    frontier_phi_71_pred_4 = _3280;
                    frontier_phi_71_pred_5 = _3279;
                }
                _3065 = frontier_phi_71_pred;
                _3063 = frontier_phi_71_pred_1;
                _3061 = frontier_phi_71_pred_2;
                _3059 = frontier_phi_71_pred_3;
                _3057 = frontier_phi_71_pred_4;
                _3055 = frontier_phi_71_pred_5;
                uint _3214 = _3213 + 1u;
                if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3207 = _3055;
                    _3208 = _3057;
                    _3209 = _3059;
                    _3210 = _3061;
                    _3211 = _3063;
                    _3212 = _3065;
                    _3213 = _3214;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
        }
        uvec4 _3068 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3069 = _3068.z;
        uint _3071 = (_3069 >> 8u) & 15u;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((4294967295u << _3071) & _2974) == 0u)
        {
            _3175 = _3054;
            _3177 = _3056;
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
        }
        else
        {
            float _3200 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _3201 = _3200 * _2033;
            float _3202 = _3200 * _2034;
            float _3203 = _3200 * _2035;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3071 < ((_3069 >> 12u) & 15u))
            {
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3335 = _3054;
                float _3336 = _3056;
                float _3337 = _3058;
                float _3338 = _3060;
                float _3339 = _3062;
                float _3340 = _3064;
                uint _3341 = _3071;
                uint _3350;
                bool _3351;
                for (;;)
                {
                    _3350 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                    _3351 = _3350 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3351)
                    {
                        frontier_phi_82_pred = _3340;
                        frontier_phi_82_pred_1 = _3339;
                        frontier_phi_82_pred_2 = _3338;
                        frontier_phi_82_pred_3 = _3337;
                        frontier_phi_82_pred_4 = _3336;
                        frontier_phi_82_pred_5 = _3335;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3335;
                        float _3556 = _3336;
                        float _3557 = _3337;
                        float _3558 = _3338;
                        float _3559 = _3339;
                        float _3560 = _3340;
                        uint _3561 = _3350;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3341 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2035, _3679.z, fma(_2034, _3679.y, _3679.x * _2033)) + _3679.w;
                            _3692 = !((fma(_2035, _3660.z, fma(_2034, _3660.y, _3660.x * _2033)) + _3660.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2033;
                                float _3720 = _3587.y - _2034;
                                float _3721 = _3587.z - _2035;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4930 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_868, _871, _874))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2035, _3630.z, fma(_2034, _3630.y, _3630.x * _2033)) + _3630.w) / _3691;
                                float _3751 = (fma(_2035, _3645.z, fma(_2034, _3645.y, _3645.x * _2033)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4946 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _943;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3201;
                                float _3781 = _3727 - _3202;
                                float _3782 = _3728 - _3203;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_868, _871, _874), vec3((-0.0) - _3201, (-0.0) - _3202, (-0.0) - _3203));
                                float _4957 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3794 = dot(vec3(_868, _871, _874), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4968 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_868, _871, _874), vec3(_3726, _3727, _3728))) + _3803;
                                float _4979 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4990 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3757 * _3603.z;
                                frontier_phi_88_pred_1 = _3757 * _3603.y;
                                frontier_phi_88_pred_2 = _3757 * _3603.x;
                                frontier_phi_88_pred_3 = _3831 * _3615.z;
                                frontier_phi_88_pred_4 = _3831 * _3615.y;
                                frontier_phi_88_pred_5 = _3831 * _3615.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3840 = frontier_phi_88_pred;
                            _3839 = frontier_phi_88_pred_1;
                            _3838 = frontier_phi_88_pred_2;
                            _3837 = frontier_phi_88_pred_3;
                            _3836 = frontier_phi_88_pred_4;
                            _3835 = frontier_phi_88_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3547;
                        frontier_phi_82_pred_1 = _3546;
                        frontier_phi_82_pred_2 = _3545;
                        frontier_phi_82_pred_3 = _3544;
                        frontier_phi_82_pred_4 = _3543;
                        frontier_phi_82_pred_5 = _3542;
                    }
                    _3186 = frontier_phi_82_pred;
                    _3184 = frontier_phi_82_pred_1;
                    _3182 = frontier_phi_82_pred_2;
                    _3180 = frontier_phi_82_pred_3;
                    _3178 = frontier_phi_82_pred_4;
                    _3176 = frontier_phi_82_pred_5;
                    uint _3342 = _3341 + 1u;
                    if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3335 = _3176;
                        _3336 = _3178;
                        _3337 = _3180;
                        _3338 = _3182;
                        _3339 = _3184;
                        _3340 = _3186;
                        _3341 = _3342;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3182;
                frontier_phi_63_64_ladder_1 = _3186;
                frontier_phi_63_64_ladder_2 = _3184;
                frontier_phi_63_64_ladder_3 = _3180;
                frontier_phi_63_64_ladder_4 = _3178;
                frontier_phi_63_64_ladder_5 = _3176;
            }
            else
            {
                frontier_phi_63_64_ladder = _3060;
                frontier_phi_63_64_ladder_1 = _3064;
                frontier_phi_63_64_ladder_2 = _3062;
                frontier_phi_63_64_ladder_3 = _3058;
                frontier_phi_63_64_ladder_4 = _3056;
                frontier_phi_63_64_ladder_5 = _3054;
            }
            _3175 = frontier_phi_63_64_ladder_5;
            _3177 = frontier_phi_63_64_ladder_4;
            _3179 = frontier_phi_63_64_ladder_3;
            _3181 = frontier_phi_63_64_ladder;
            _3183 = frontier_phi_63_64_ladder_2;
            _3185 = frontier_phi_63_64_ladder_1;
        }
        float _3190 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2987 = (_3190 * _3181) + _2499;
        _2989 = (_3190 * _3183) + _2501;
        _2991 = (_3190 * _3185) + _2503;
        _2993 = ((_3175 * _911) * _3190) + _2837;
        _2995 = ((_3177 * _913) * _3190) + _2839;
        _2997 = ((_3179 * _914) * _3190) + _2841;
    }
    else
    {
        _2987 = _2499;
        _2989 = _2501;
        _2991 = _2503;
        _2993 = _2837;
        _2995 = _2839;
        _2997 = _2841;
    }
    float _5006 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _5017 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _5028 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _3014 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2987 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _927))) + ((_2993 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _3015 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2989 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _927))) + ((_2995 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _3016 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2991 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _927))) + ((_2997 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    uint _3017 = _259 + 6u;
    float _3025 = _849 / cbSceneParam._m0[86u].x;
    float _3026 = _850 / cbSceneParam._m0[86u].y;
    vec4 _3040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3042 = _3040.x;
    float _3043 = _3040.y;
    float _3044 = _3040.z;
    float _3045 = _3040.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _3079 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _3080 = _3079 / _772;
        float _3091 = _3080 * _822;
        float _3092 = _823 * _3080;
        float _3093 = (-0.0) - _3092;
        float _3095 = _3080 * _824;
        float _3097 = (cbSceneParam._m0[77u].w * _3093) / _3079;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3092;
        float _3105 = sqrt(((_3091 * _3091) + (_3092 * _3092)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3079)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3292;
        if (abs((_3093 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3292 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3236 = 1.0 / cbSceneParam._m0[80u].x;
            float _3237 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3238 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            _3292 = ((abs(_3105 / _3093) * cbSceneParam._m0[80u].y) * ((((_3247 - _3248) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))))) * _3236)) - ((exp2(_3115 * _3247) - exp2(_3115 * _3248)) * _3236))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, 1.0), 0.0);
        float _3303 = exp2((_3292 * (-1.44269502162933349609375)) * (1.0 - _3294.w));
        float _3304 = log2(_3303);
        float _3320 = log2(_3045);
        _3117 = (exp2(_3320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].x)) * _3294.x) / cbSceneParam._m0[78u].x)) + _3042;
        _3119 = (exp2(_3320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].y)) * _3294.y) / cbSceneParam._m0[78u].y)) + _3043;
        _3121 = (exp2(_3320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].z)) * _3294.z) / cbSceneParam._m0[78u].z)) + _3044;
        _3123 = _3303 * _3045;
    }
    else
    {
        _3117 = _3042;
        _3119 = _3043;
        _3121 = _3044;
        _3123 = _3045;
    }
    bool _3330;
    vec4 _3133;
    vec4 _3155;
    float _3157;
    float _3161;
    float _3162;
    float _3163;
    float _3164;
    bool _3174;
    for (;;)
    {
        _3133 = cbMatDynParam._m0[0u];
        float _3135 = roundEven(_3133.y);
        bool _3136 = _3135 == 3.0;
        float _3137 = log2(_3123);
        float _3144 = exp2(_3137 * cbSceneParam._m0[78u].x) * _3014;
        float _3145 = exp2(_3137 * cbSceneParam._m0[78u].y) * _3015;
        float _3146 = exp2(_3137 * cbSceneParam._m0[78u].z) * _3016;
        float _3153 = _838 + (-0.5);
        _3155 = cbMtdParam._m0[1u];
        _3157 = _3155.y * _3153;
        float _3160 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3161 = _3160 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
        _3162 = _3160 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
        _3163 = _3160 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
        _3164 = _3153 * 0.999000012874603271484375;
        _3174 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3174)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3164) < 0.5)
            {
                _3330 = true;
                break;
            }
        }
        uint _3271 = _887 + uint(_3133.w);
        if ((cbInstanceData._m0[_3271].w < 1.0) && ((cbInstanceData._m0[_3271].w + _3164) < 0.5))
        {
            _3330 = true;
            break;
        }
        if ((_3157 + 1.0) < _3155.x)
        {
            _3330 = true;
            break;
        }
        _3330 = false;
        break;
    }
    float _3533;
    if (_3330)
    {
        discard_state = true;
        _3533 = 0.0;
    }
    else
    {
        _3533 = cbInstanceData._m0[_3017].w;
    }
    SV_Target.x = _3161;
    SV_Target.y = _3162;
    SV_Target.z = _3163;
    SV_Target.w = _3533;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3017].w;
    discard_exit();
}


