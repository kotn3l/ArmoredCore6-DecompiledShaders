#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3944 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _396) + _469;
    float _481 = ((((_448.x - _467) * _396) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _396) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3955 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _538 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _541 = ((isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : min(_538, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _550 = (_541 - ((((((_531 - _532) * cbMtdParam._m0[24u].z) + _532) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _541))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3976 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _558 = (_551 * (cbMtdParam._m0[17u].x - _403)) + _403;
    float _559 = (_551 * (cbMtdParam._m0[17u].y - _404)) + _404;
    float _560 = (_551 * (cbMtdParam._m0[17u].z - _405)) + _405;
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _602 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_574 - _575) * cbMtdParam._m0[24u].w) + _575) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3987 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _611 = ((((cbMtdParam._m0[10u].x - _558) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _603) + _558;
    float _612 = ((((cbMtdParam._m0[10u].y - _559) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _603) + _559;
    float _613 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _560)) * _603) + _560;
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _641 = _639.x;
    float _659 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _641) * _396) + _641;
    float _663 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _659) * cbMtdParam._m0[19u].z) + _659;
    float _665 = _663 - (_663 * _551);
    float _667 = _665 - (_665 * _603);
    float _672 = (((_423.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    float _676 = ((_504.z - _672) * cbMtdParam._m0[19u].w) + _672;
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3998 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = (_551 * (_690.z - _676)) + _676;
    float _710 = ((cbMtdParam._m0[23u].y - _707) * _603) + _707;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _735 = (_729.x * 2.0) + (-1.0);
    float _736 = (_729.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4009 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _751 = (_481 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_423.x * 2.0) + (-1.0)))) + (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _752 = (_482 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_423.y * 2.0) + (-1.0)))) + (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _764 = (((_697 - _751) + (cbMtdParam._m0[21u].x * _751)) * _551) + _751;
    float _765 = (((_698 - _752) + (cbMtdParam._m0[21u].x * _752)) * _551) + _752;
    float _766 = (_551 * (sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) - _488)) + _488;
    float _777 = (((_735 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _603) + _764;
    float _778 = (((_736 - _765) + (_765 * cbMtdParam._m0[22u].z)) * _603) + _765;
    float _779 = ((sqrt(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) - _766) * _603) + _766;
    float _781 = cbMtdParam._m0[22u].x + _504.w;
    float _784 = fma(_779, _246 * NORMAL.x, fma(_778, _253 * TANGENT.x, (_239 * _231) * _777));
    float _787 = fma(_779, _246 * NORMAL.y, fma(_778, _253 * TANGENT.y, (_239 * _232) * _777));
    float _790 = fma(_779, _246 * NORMAL.z, fma(_778, _253 * TANGENT.z, (_239 * _233) * _777));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _4020 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _798 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4042 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4053 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4064 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4075 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _803 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _817 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _904 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _907 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _921 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4086 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _933 = 1.0 - _803;
    float _934 = _930 * _933;
    float _935 = _931 * _933;
    float _936 = _932 * _933;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _803;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _803;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _803;
    float _944 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * TEXCOORD_5.w) * _956.x;
    float _961 = dot(vec3(_795, _796, _797), vec3(_874, _875, _876));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _795) - _874;
    float _969 = (_964 * _796) - _875;
    float _970 = (_964 * _797) - _876;
    float _974 = abs(dot(vec3(_874, _875, _876), vec3(_795, _796, _797)));
    float _4119 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_798);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1062 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1066 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1091 = _1024 + _795;
        float _1092 = _1028 + _796;
        float _1093 = _1032 + _797;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_795, _796, _797), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4167 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_795, _796, _797), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4200 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_795, _796, _797), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4233 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1377 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1381 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1404 = _1024 + _795;
        float _1405 = _1028 + _796;
        float _1406 = _1032 + _797;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_795, _796, _797), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4296 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_795, _796, _797), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4329 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_795, _796, _797), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4362 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1334;
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1348)) + _1348;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _968 * 0.5;
    float _1711 = _969 * 0.5;
    float _1712 = _970 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1841 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1844 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1872 = frontier_phi_14_12_ladder;
        }
        float _2044;
        if (_1841 > 0.0)
        {
            _2044 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2044 = frontier_phi_23_19_ladder;
        }
        float _2339;
        if (_1844 > 0.0)
        {
            _2339 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2339 = frontier_phi_35_30_ladder;
        }
        float _2341 = isnan(_2044) ? _1872 : (isnan(_1872) ? _2044 : min(_1872, _2044));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1838) + _1827;
        float _2347 = (_2342 * _1841) + _1831;
        float _2348 = (_2342 * _1844) + _1835;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_13_35_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_13_35_ladder_2;
        _1862 = frontier_phi_13_35_ladder_1;
        _1864 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1779);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1937 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1940 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2049;
        if (_1934 > 0.0)
        {
            _2049 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2366;
        if (_1937 > 0.0)
        {
            _2366 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2366 = frontier_phi_37_32_ladder;
        }
        float _2704;
        if (_1940 > 0.0)
        {
            _2704 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2704 = frontier_phi_47_44_ladder;
        }
        float _2706 = isnan(_2366) ? _2049 : (isnan(_2049) ? _2366 : min(_2049, _2366));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _1934) + _1923;
        float _2712 = (_2707 * _1937) + _1927;
        float _2713 = (_2707 * _1940) + _1931;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2715 = (-1.0) - _2714;
        float _2717 = _2714 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2713 > _2717) || ((_2713 < _2715) || ((_2712 > _2717) || ((_2712 < _2715) || ((_2711 < _2715) || (_2711 > _2717))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2713, cbModelParam._m0[17u].z, fma(_2712, cbModelParam._m0[17u].y, _2711 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2713, cbModelParam._m0[18u].z, fma(_2712, cbModelParam._m0[18u].y, _2711 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2713, cbModelParam._m0[19u].z, fma(_2712, cbModelParam._m0[19u].y, _2711 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_22_47_ladder = _2835.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2835.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2835.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_22_47_ladder_2;
        _1961 = frontier_phi_22_47_ladder_1;
        _1963 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1869);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1976 = (((_995 * _944) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1978 = (((_995 * _946) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1980 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2036 = _2023 / _2035;
    float _2037 = _2027 / _2035;
    float _2038 = _2031 / _2035;
    float _2185;
    float _2186;
    float _2187;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2065 = ((uint(_2038 > cbSceneParam._m0[59u].y) + uint(_2038 > cbSceneParam._m0[59u].x)) + uint(_2038 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2066 = _2065 + 43u;
        uint _2074 = _2065 + 44u;
        uint _2082 = _2065 + 45u;
        uint _2090 = _2065 + 46u;
        float _2101 = fma(_2035, cbSceneParam._m0[_2066].w, fma(_2031, cbSceneParam._m0[_2066].z, fma(_2027, cbSceneParam._m0[_2066].y, _2023 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2035, cbSceneParam._m0[_2074].w, fma(_2031, cbSceneParam._m0[_2074].z, fma(_2027, cbSceneParam._m0[_2074].y, _2023 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2035, cbSceneParam._m0[_2090].w, fma(_2031, cbSceneParam._m0[_2090].z, fma(_2027, cbSceneParam._m0[_2090].y, _2023 * cbSceneParam._m0[_2090].x)));
        float _2118 = cbSceneParam._m0[33u].z * _2113;
        float _2120 = cbSceneParam._m0[33u].w * _2113;
        float _2123 = fma(_2035, cbSceneParam._m0[_2082].w, fma(_2031, cbSceneParam._m0[_2082].z, fma(_2027, cbSceneParam._m0[_2082].y, _2023 * cbSceneParam._m0[_2082].x))) / _2113;
        float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
        float _4488 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2178 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2101) / _2113, (_2120 + _2105) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2101) / _2113, (_2105 - _2118) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2118) / _2113, (_2105 - _2120) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2120) / _2113, (_2118 + _2105) / _2113), _2123), 0.0)).x), vec4(0.25)));
        _2185 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
        _2186 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
        _2187 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2185 = 1.0;
        _2186 = 1.0;
        _2187 = 1.0;
    }
    float _2251;
    float _2253;
    float _2255;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2239 = fma(_2035, cbSceneParam._m0[63u].w, fma(_2031, cbSceneParam._m0[63u].z, fma(_2027, cbSceneParam._m0[63u].y, _2023 * cbSceneParam._m0[63u].x)));
        float _2240 = fma(_2035, cbSceneParam._m0[60u].w, fma(_2031, cbSceneParam._m0[60u].z, fma(_2027, cbSceneParam._m0[60u].y, _2023 * cbSceneParam._m0[60u].x))) / _2239;
        float _2241 = fma(_2035, cbSceneParam._m0[61u].w, fma(_2031, cbSceneParam._m0[61u].z, fma(_2027, cbSceneParam._m0[61u].y, _2023 * cbSceneParam._m0[61u].x))) / _2239;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2240 >= cbSceneParam._m0[64u].x) && (_2241 >= cbSceneParam._m0[64u].y)) && (_2240 <= cbSceneParam._m0[64u].z)) && (_2241 <= cbSceneParam._m0[64u].w))
        {
            float _2379 = fma(_2035, cbSceneParam._m0[62u].w, fma(_2031, cbSceneParam._m0[62u].z, fma(_2027, cbSceneParam._m0[62u].y, _2023 * cbSceneParam._m0[62u].x))) / _2239;
            float _2383 = isnan(cbSceneParam._m0[41u].w) ? _2379 : (isnan(_2379) ? cbSceneParam._m0[41u].w : max(_2379, cbSceneParam._m0[41u].w));
            float _2426 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
            float _4504 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
            float _2433 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2240, cbSceneParam._m0[33u].w + _2241), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2240, _2241 - cbSceneParam._m0[33u].z), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].z, _2241 - cbSceneParam._m0[33u].w), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2241), _2383), 0.0)).x), vec4(0.25)));
            float _2437 = 1.0 - (_2433 * cbSceneParam._m0[34u].x);
            float _2438 = 1.0 - (_2433 * cbSceneParam._m0[34u].y);
            float _2439 = 1.0 - (_2433 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_34_33_ladder_1 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_34_33_ladder_2 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
        }
        else
        {
            frontier_phi_34_33_ladder = _2187;
            frontier_phi_34_33_ladder_1 = _2186;
            frontier_phi_34_33_ladder_2 = _2185;
        }
        _2251 = frontier_phi_34_33_ladder_2;
        _2253 = frontier_phi_34_33_ladder_1;
        _2255 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2251 = _2185;
        _2253 = _2186;
        _2255 = _2187;
    }
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2270 = _960 + (-1.0);
    float _2275 = (cbLight._m0[_2263].x * _2270) + 1.0;
    float _2276 = (cbLight._m0[_2263].y * _2270) + 1.0;
    float _2277 = (cbLight._m0[_2263].z * _2270) + 1.0;
    float _2278 = (cbLight._m0[_2263].w * _2270) + 1.0;
    uint _2279 = _2262 + 5u;
    float _2285 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2289 = _2262 + 4u;
    float _2298 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2302 = _2262 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_795, _796, _797));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_795, _796, _797));
    float _4540 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4551 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2279].x * _2285) * _2323) + (((cbLight._m0[_2289].x * _2251) * _2298) * _2321);
    float _2331 = ((_2285 * cbLight._m0[_2279].y) * _2323) + (((cbLight._m0[_2289].y * _2253) * _2298) * _2321);
    float _2332 = ((_2285 * cbLight._m0[_2279].z) * _2323) + (((cbLight._m0[_2289].z * _2255) * _2298) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2262 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2338)
    {
        _2440 = _2330;
        _2442 = _2331;
        _2444 = _2332;
    }
    else
    {
        uint _2448 = _2262 + 6u;
        float _2464 = (dot(vec3(cbLight._m0[_2262 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4562 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2467 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2440 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2330;
        _2442 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2331;
        _2444 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2332;
    }
    bool _2447 = _2336.y == 0u;
    float _2502;
    float _2504;
    float _2506;
    if (_2447)
    {
        _2502 = _2440;
        _2504 = _2442;
        _2506 = _2444;
    }
    else
    {
        uint _2675 = _2262 + 7u;
        float _2691 = (dot(vec3(cbLight._m0[_2262 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4578 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2694 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2502 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2440;
        _2504 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2442;
        _2506 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2444;
    }
    uint _2509 = _2262 + 8u;
    float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _798) * 0.949999988079071044921875);
    float _2523 = _2522 * _2522;
    float _2524 = cbLight._m0[_2262].x + _874;
    float _2525 = cbLight._m0[_2262].y + _875;
    float _2526 = cbLight._m0[_2262].z + _876;
    float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
    float _2531 = _2530 * _2524;
    float _2532 = _2530 * _2525;
    float _2533 = _2530 * _2526;
    float _2534 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2262].xyz));
    float _4594 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _4605 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2538 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2539 = dot(vec3(_795, _796, _797), vec3(_2531, _2532, _2533));
    float _4616 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2531, _2532, _2533));
    float _4627 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2523 * _2523;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2560 = 0.959999978542327880859375 - _941;
    float _2562 = 0.959999978542327880859375 - _942;
    float _2563 = 0.959999978542327880859375 - _943;
    float _2570 = 1.0 - _2523;
    float _2581 = (0.5 / (((_2538 * ((_2537 * _2570) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2570) + _2523) * _2537))) * _2537;
    float _4638 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    uint _2597 = _2262 + 9u;
    float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _798) * 0.949999988079071044921875);
    float _2609 = _2608 * _2608;
    float _2610 = cbLight._m0[_2302].x + _874;
    float _2611 = cbLight._m0[_2302].y + _875;
    float _2612 = cbLight._m0[_2302].z + _876;
    float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
    float _2617 = _2616 * _2610;
    float _2618 = _2616 * _2611;
    float _2619 = _2616 * _2612;
    float _2620 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2302].xyz));
    float _4649 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2624 = dot(vec3(_795, _796, _797), vec3(_2617, _2618, _2619));
    float _4660 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2617, _2618, _2619));
    float _4671 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2609 * _2609;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
    float _2650 = 1.0 - _2609;
    float _2660 = (0.5 / (((_2538 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2650) + _2609) * _2623))) * _2623;
    float _4682 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2662 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    float _2672 = (((((_2643 * _2560) + _944) * cbLight._m0[_2597].x) * _2662) * _2285) + ((((cbLight._m0[_2509].x * _2251) * ((_2559 * _2560) + _944)) * _2583) * _2298);
    float _2673 = (((((_2643 * _2562) + _946) * cbLight._m0[_2597].y) * _2662) * _2285) + ((((cbLight._m0[_2509].y * _2253) * ((_2559 * _2562) + _946)) * _2583) * _2298);
    float _2674 = (((((_2643 * _2563) + _947) * cbLight._m0[_2597].z) * _2662) * _2285) + ((((cbLight._m0[_2509].z * _2255) * ((_2559 * _2563) + _947)) * _2583) * _2298);
    float _2730;
    float _2732;
    float _2734;
    if (_2338)
    {
        _2730 = _2672;
        _2732 = _2673;
        _2734 = _2674;
    }
    else
    {
        uint _2736 = _2262 + 2u;
        uint _2740 = _2262 + 10u;
        float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2736].w)) * _798) * 0.949999988079071044921875);
        float _2755 = _2754 * _2754;
        float _2756 = cbLight._m0[_2736].x + _874;
        float _2757 = cbLight._m0[_2736].y + _875;
        float _2758 = cbLight._m0[_2736].z + _876;
        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
        float _2763 = _2762 * _2756;
        float _2764 = _2762 * _2757;
        float _2765 = _2762 * _2758;
        float _2766 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2736].xyz));
        float _4693 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2770 = dot(vec3(_795, _796, _797), vec3(_2763, _2764, _2765));
        float _4704 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2774 = dot(vec3(cbLight._m0[_2736].xyz), vec3(_2763, _2764, _2765));
        float _4715 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2778 = _2755 * _2755;
        float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
        float _2789 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
        float _2796 = 1.0 - _2755;
        float _2806 = (0.5 / (((_2538 * ((_2769 * _2796) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2796) + _2755) * _2769))) * _2769;
        float _4726 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2808 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
        float _2809 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2730 = (((((_2789 * _2560) + _944) * cbLight._m0[_2740].x) * _2808) * _2809) + _2672;
        _2732 = (((((_2789 * _2562) + _946) * cbLight._m0[_2740].y) * _2808) * _2809) + _2673;
        _2734 = (((((_2789 * _2563) + _947) * cbLight._m0[_2740].z) * _2808) * _2809) + _2674;
    }
    float _2840;
    float _2842;
    float _2844;
    if (_2447)
    {
        _2840 = _2730;
        _2842 = _2732;
        _2844 = _2734;
    }
    else
    {
        uint _2851 = _2262 + 3u;
        uint _2855 = _2262 + 11u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _798) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _874;
        float _2872 = cbLight._m0[_2851].y + _875;
        float _2873 = cbLight._m0[_2851].z + _876;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2851].xyz));
        float _4742 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2885 = dot(vec3(_795, _796, _797), vec3(_2878, _2879, _2880));
        float _4753 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4764 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2904 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
        float _2911 = 1.0 - _2870;
        float _2921 = (0.5 / (((_2538 * ((_2884 * _2911) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2911) + _2870) * _2884))) * _2884;
        float _4775 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2923 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2924 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2840 = (((((_2904 * _2560) + _944) * cbLight._m0[_2855].x) * _2923) * _2924) + _2730;
        _2842 = (((((_2904 * _2562) + _946) * cbLight._m0[_2855].y) * _2923) * _2924) + _2732;
        _2844 = (((((_2904 * _2563) + _947) * cbLight._m0[_2855].z) * _2923) * _2924) + _2734;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2260.y == 0u)
    {
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2946)));
        float _2967 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
        }
        else
        {
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3218)
                {
                    frontier_phi_66_pred = _3207;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                else
                {
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    uint _3332;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3217;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    for (;;)
                    {
                        uint _3336 = uint(findLSB(_3332)) + (_3208 << 5u);
                        uint _3333 = (_3332 + 4294967295u) & _3332;
                        uint _3338 = _3336 * 48u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3358 = (_3336 * 48u) + 4u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3377 = (_3336 * 48u) + 8u;
                        vec3 _3388 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x));
                        float _3392 = _3352.x - _2036;
                        float _3393 = _3352.y - _2037;
                        float _3394 = _3352.z - _2038;
                        float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                        float _3398 = inversesqrt(_3395);
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3402 = dot(vec3(_901, _904, _907), vec3(_3399, _3400, _3401));
                        float _3407 = 1.0 - (_3395 * _3352.w);
                        float _4801 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3409 = sqrt(_3395) * _3371.w;
                        float _3412 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3402) + _3413;
                        float _3419 = _3409 * _3409;
                        float _3423 = ((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3408) / ((_3419 * 0.699999988079071044921875) + 1.0);
                        float _3427 = (-0.0) - _2036;
                        float _3428 = (-0.0) - _2037;
                        float _3429 = (-0.0) - _2038;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3443 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                        float _3444 = 1.0 - _976;
                        float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                        float _3452 = _3451 * _3451;
                        float _3453 = _3452 * _3452;
                        float _3454 = _3434 + _3399;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3464 = dot(vec3(_901, _904, _907), vec3(_3434, _3435, _3436));
                        float _4817 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3468 = dot(vec3(_901, _904, _907), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                        float _4828 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                        float _3476 = _3412 * _3452;
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3402) + _3477;
                        float _4839 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3482 = 1.0 - _3452;
                        float _3492 = (0.5 / (((_3481 * ((_3467 * _3482) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3452) * _3467))) * _3481;
                        float _4850 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3503 = (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3475 * _3475) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125))) * _3408;
                        _3261 = (_3423 * _3371.x) + _3329;
                        _3262 = (_3423 * _3371.y) + _3330;
                        _3263 = (_3423 * _3371.z) + _3331;
                        _3258 = (_3503 * _3388.x) + _3326;
                        _3259 = (_3503 * _3388.y) + _3327;
                        _3260 = (_3503 * _3388.z) + _3328;
                        if (_3333 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3333;
                        }
                    }
                    frontier_phi_66_pred = _3263;
                    frontier_phi_66_pred_1 = _3262;
                    frontier_phi_66_pred_2 = _3261;
                    frontier_phi_66_pred_3 = _3260;
                    frontier_phi_66_pred_4 = _3259;
                    frontier_phi_66_pred_5 = _3258;
                }
                _3068 = frontier_phi_66_pred;
                _3066 = frontier_phi_66_pred_1;
                _3064 = frontier_phi_66_pred_2;
                _3062 = frontier_phi_66_pred_3;
                _3060 = frontier_phi_66_pred_4;
                _3058 = frontier_phi_66_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3058;
                    _3203 = _3060;
                    _3204 = _3062;
                    _3205 = _3064;
                    _3206 = _3066;
                    _3207 = _3068;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
        }
        uvec4 _3071 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3072 = _3071.z;
        uint _3074 = (_3072 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3074) & _2977) == 0u)
        {
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
            _3176 = _3063;
            _3178 = _3065;
            _3180 = _3067;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _3196 = _3195 * _2036;
            float _3197 = _3195 * _2037;
            float _3198 = _3195 * _2038;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3074 < ((_3072 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3309 = _3057;
                float _3310 = _3059;
                float _3311 = _3061;
                float _3312 = _3063;
                float _3313 = _3065;
                float _3314 = _3067;
                uint _3315 = _3074;
                uint _3324;
                bool _3325;
                for (;;)
                {
                    _3324 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                    _3325 = _3324 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3325)
                    {
                        frontier_phi_72_pred = _3314;
                        frontier_phi_72_pred_1 = _3313;
                        frontier_phi_72_pred_2 = _3312;
                        frontier_phi_72_pred_3 = _3311;
                        frontier_phi_72_pred_4 = _3310;
                        frontier_phi_72_pred_5 = _3309;
                    }
                    else
                    {
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        uint _3527 = _3324;
                        uint _3528;
                        vec4 _3553;
                        float _3554;
                        vec4 _3569;
                        vec3 _3581;
                        vec4 _3596;
                        vec4 _3611;
                        float _3657;
                        bool _3658;
                        for (;;)
                        {
                            uint _3538 = ((_3315 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3527));
                            _3528 = (_3527 + 4294967295u) & _3527;
                            uint _3540 = _3538 * 40u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3554 = _3553.w;
                            uint _3556 = (_3538 * 40u) + 4u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3538 * 40u) + 8u;
                            _3581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x));
                            uint _3583 = (_3538 * 40u) + 16u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3538 * 40u) + 20u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3538 * 40u) + 24u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3632 = (_3538 * 40u) + 28u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3657 = fma(_2038, _3645.z, fma(_2037, _3645.y, _3645.x * _2036)) + _3645.w;
                            _3658 = !((fma(_2038, _3626.z, fma(_2037, _3626.y, _3626.x * _2036)) + _3626.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3658)
                            {
                                float _3685 = _3553.x - _2036;
                                float _3686 = _3553.y - _2037;
                                float _3687 = _3553.z - _2038;
                                float _3688 = dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687));
                                float _3691 = inversesqrt(_3688);
                                float _3692 = _3691 * _3685;
                                float _3693 = _3691 * _3686;
                                float _3694 = _3691 * _3687;
                                float _3698 = 1.0 - (_3688 / (_3554 * _3554));
                                float _4861 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3703 = sqrt(_3688) * _3569.w;
                                float _3705 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                                float _3706 = _3705 * _3705;
                                float _3709 = ((1.0 - _3706) * dot(vec3(_3692, _3693, _3694), vec3(_901, _904, _907))) + _3706;
                                float _3712 = _3703 * _3703;
                                float _3716 = (fma(_2038, _3596.z, fma(_2037, _3596.y, _3596.x * _2036)) + _3596.w) / _3657;
                                float _3717 = (fma(_2038, _3611.z, fma(_2037, _3611.y, _3611.x * _2036)) + _3611.w) / _3657;
                                float _3721 = 1.0 - dot(vec2(_3716, _3717), vec2(_3716, _3717));
                                float _4877 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3723 = _3722 * (((isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0))) * _3699) / ((_3712 * 0.699999988079071044921875) + 1.0));
                                float _3735 = exp2(log2(1.0 / ((_3712 * 3.5) + 5.0)) * 0.25);
                                float _3736 = 1.0 - _976;
                                float _3743 = sqrt(1.0 - ((1.0 - (_3736 * _3736)) * (1.0 - (_3735 * _3735))));
                                float _3744 = _3743 * _3743;
                                float _3745 = _3744 * _3744;
                                float _3746 = _3692 - _3196;
                                float _3747 = _3693 - _3197;
                                float _3748 = _3694 - _3198;
                                float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                                float _3756 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4888 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3760 = dot(vec3(_901, _904, _907), vec3(_3752 * _3746, _3752 * _3747, _3752 * _3748));
                                float _4899 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3767 = ((_3763 * _3763) * (_3745 + (-1.0))) + 1.0;
                                float _3768 = _3705 * _3744;
                                float _3769 = _3768 * _3768;
                                float _3775 = ((1.0 - _3769) * dot(vec3(_901, _904, _907), vec3(_3692, _3693, _3694))) + _3769;
                                float _4910 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3777 = 1.0 - _3744;
                                float _3787 = (0.5 / (((_3776 * ((_3759 * _3777) + _3744)) + 9.9999999392252902907785028219223e-09) + (((_3776 * _3777) + _3744) * _3759))) * _3776;
                                float _4921 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3797 = (_3722 * _3699) * (((_3745 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3767 * _3767) * ((_3712 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3723 * _3569.y;
                                frontier_phi_78_pred_1 = _3723 * _3569.x;
                                frontier_phi_78_pred_2 = _3797 * _3581.z;
                                frontier_phi_78_pred_3 = _3797 * _3581.y;
                                frontier_phi_78_pred_4 = _3797 * _3581.x;
                                frontier_phi_78_pred_5 = _3723 * _3569.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3805 = frontier_phi_78_pred;
                            _3804 = frontier_phi_78_pred_1;
                            _3803 = frontier_phi_78_pred_2;
                            _3802 = frontier_phi_78_pred_3;
                            _3801 = frontier_phi_78_pred_4;
                            _3806 = frontier_phi_78_pred_5;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            if (_3528 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3528;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3513;
                        frontier_phi_72_pred_1 = _3512;
                        frontier_phi_72_pred_2 = _3511;
                        frontier_phi_72_pred_3 = _3510;
                        frontier_phi_72_pred_4 = _3509;
                        frontier_phi_72_pred_5 = _3508;
                    }
                    _3181 = frontier_phi_72_pred;
                    _3179 = frontier_phi_72_pred_1;
                    _3177 = frontier_phi_72_pred_2;
                    _3175 = frontier_phi_72_pred_3;
                    _3173 = frontier_phi_72_pred_4;
                    _3171 = frontier_phi_72_pred_5;
                    uint _3316 = _3315 + 1u;
                    if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3309 = _3171;
                        _3310 = _3173;
                        _3311 = _3175;
                        _3312 = _3177;
                        _3313 = _3179;
                        _3314 = _3181;
                        _3315 = _3316;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3181;
                frontier_phi_60_61_ladder_1 = _3179;
                frontier_phi_60_61_ladder_2 = _3175;
                frontier_phi_60_61_ladder_3 = _3173;
                frontier_phi_60_61_ladder_4 = _3171;
                frontier_phi_60_61_ladder_5 = _3177;
            }
            else
            {
                frontier_phi_60_61_ladder = _3067;
                frontier_phi_60_61_ladder_1 = _3065;
                frontier_phi_60_61_ladder_2 = _3061;
                frontier_phi_60_61_ladder_3 = _3059;
                frontier_phi_60_61_ladder_4 = _3057;
                frontier_phi_60_61_ladder_5 = _3063;
            }
            _3170 = frontier_phi_60_61_ladder_4;
            _3172 = frontier_phi_60_61_ladder_3;
            _3174 = frontier_phi_60_61_ladder_2;
            _3176 = frontier_phi_60_61_ladder_5;
            _3178 = frontier_phi_60_61_ladder_1;
            _3180 = frontier_phi_60_61_ladder;
        }
        float _3185 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _2990 = (_3185 * _3176) + _2502;
        _2992 = (_3185 * _3178) + _2504;
        _2994 = (_3185 * _3180) + _2506;
        _2996 = ((_3170 * _944) * _3185) + _2840;
        _2998 = ((_3172 * _946) * _3185) + _2842;
        _3000 = ((_3174 * _947) * _3185) + _2844;
    }
    else
    {
        _2990 = _2502;
        _2992 = _2504;
        _2994 = _2506;
        _2996 = _2840;
        _2998 = _2842;
        _3000 = _2844;
    }
    float _4937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4948 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4959 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    uint _3020 = _259 + 6u;
    float _3028 = _882 / cbSceneParam._m0[86u].x;
    float _3029 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _817 : (isnan(_817) ? cbSceneParam._m0[77u].w : min(_817, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_817 > cbSceneParam._m0[78u].w)
    {
        float _3082 = isnan(_817) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _817 : min(cbSceneParam._m0[80u].w, _817));
        float _3083 = _3082 / _817;
        float _3094 = _3083 * _867;
        float _3095 = _868 * _3083;
        float _3096 = (-0.0) - _3095;
        float _3098 = _3083 * _869;
        float _3100 = (cbSceneParam._m0[77u].w * _3096) / _3082;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3095;
        float _3108 = sqrt(((_3094 * _3094) + (_3095 * _3095)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3082)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3271;
        if (abs((_3096 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3271 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3233 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3271 = ((abs(_3108 / _3096) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3118 * _3242) - exp2(_3118 * _3243)) * _3231))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3282 = exp2((_3271 * (-1.44269502162933349609375)) * (1.0 - _3273.w));
        float _3283 = log2(_3282);
        float _3299 = log2(_3048);
        _3120 = (exp2(_3299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].x)) * _3273.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3122 = (exp2(_3299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].y)) * _3273.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3124 = (exp2(_3299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].z)) * _3273.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3126 = _3282 * _3048;
    }
    else
    {
        _3120 = _3045;
        _3122 = _3046;
        _3124 = _3047;
        _3126 = _3048;
    }
    float _3138 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3139 = _3138 == 3.0;
    float _3140 = log2(_3126);
    float _3147 = exp2(_3140 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2990 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _960))) + ((_2996 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3148 = exp2(_3140 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2992 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _960))) + ((_2998 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3149 = exp2(_3140 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2994 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _960))) + ((_3000 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3158 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3158 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.y = _3158 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.z = _3158 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.w = cbInstanceData._m0[_3020].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
}


