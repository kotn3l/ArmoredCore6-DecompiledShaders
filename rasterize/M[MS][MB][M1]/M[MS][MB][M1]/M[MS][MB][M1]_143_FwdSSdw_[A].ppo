#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1351;
float _3754;
float _3755;
float _3756;
float _3757;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3766 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3777 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3788 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3799 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _547 = ((_517.z - _538) * _423) + _538;
    float _550 = ((((_517.x - _536) * _423) + _536) * 2.0) + (-1.0);
    float _551 = ((((_517.y - _537) * _423) + _537) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3810 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((((_490.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((((_490.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = fma(_557, _239, fma(_590, _246, _589 * _232));
    float _596 = fma(_557, _240, fma(_590, _247, _589 * _233));
    float _599 = fma(_557, _241, fma(_590, _248, _589 * _234));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _639 = (cbMtdParam._m0[19u].x + dot(vec4(_603 * _593, _603 * _596, _603 * _599, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_632 - _633) * cbMtdParam._m0[24u].z) + _633) * cbMtdParam._m0[21u].z);
    float _3821 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _647 = (_640 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _648 = (_640 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _649 = (_640 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _677 = _675.x;
    float _695 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _677) * _423) + _677;
    float _699 = ((_661.x - _695) * cbMtdParam._m0[19u].z) + _695;
    float _701 = _699 - (_699 * _640);
    float _706 = (((_490.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _710 = ((_577.z - _706) * cbMtdParam._m0[19u].w) + _706;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _730 = (_723.x * 2.0) + (-1.0);
    float _731 = (_723.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3832 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _740 = ((_723.z - _710) * _640) + _710;
    float _750 = ((sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) - _557) * _640) + _557;
    float _753 = (((_730 - _589) * _640) + _589) + (cbMtdParam._m0[21u].x * _589);
    float _754 = (((_731 - _590) * _640) + _590) + (cbMtdParam._m0[21u].x * _590);
    float _756 = cbMtdParam._m0[22u].x + _577.w;
    float _759 = fma(_750, _239, fma(_754, _246, _753 * _232));
    float _762 = fma(_750, _240, fma(_754, _247, _753 * _233));
    float _765 = fma(_750, _241, fma(_754, _248, _753 * _234));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3843 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _773 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3865 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3876 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3887 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3898 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _778 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _792 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1031 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1037 = (cbMatDynParam._m0[5u].x * _1031) + cbMatDynParam._m0[5u].y;
        float _3909 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1042 = (cbMatDynParam._m0[5u].z * _1031) + cbMatDynParam._m0[5u].w;
        float _3920 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) - _1038)) + _1038) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _892 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _895 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _908 = _272 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3931 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _921 = 1.0 - _778;
    float _922 = _918 * _921;
    float _923 = _919 * _921;
    float _924 = _920 * _921;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _778;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _778;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _778;
    float _932 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _948 = ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_770, _771, _772), vec3(_850, _851, _852));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _770) - _850;
    float _957 = (_952 * _771) - _851;
    float _958 = (_952 * _772) - _852;
    float _962 = abs(dot(vec3(_850, _851, _852), vec3(_770, _771, _772)));
    float _3964 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_773);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1079 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1083 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1108 = _1012 + _770;
        float _1109 = _1016 + _771;
        float _1110 = _1020 + _772;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_770, _771, _772), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4012 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_770, _771, _772), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4045 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_770, _771, _772), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4078 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1397 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1401 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1424 = _1012 + _770;
        float _1425 = _1016 + _771;
        float _1426 = _1020 + _772;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_770, _771, _772), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4141 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_770, _771, _772), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4174 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_770, _771, _772), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4207 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = _1351;
        _1671 = _1351;
        _1672 = _1351;
        _1673 = _1351;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1365)) + _1365;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _956 * 0.5;
    float _1731 = _957 * 0.5;
    float _1732 = _958 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1860 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1863 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1891 = frontier_phi_17_15_ladder;
        }
        float _2114;
        if (_1860 > 0.0)
        {
            _2114 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2114 = frontier_phi_26_22_ladder;
        }
        float _2371;
        if (_1863 > 0.0)
        {
            _2371 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2371 = frontier_phi_38_33_ladder;
        }
        float _2373 = isnan(_2114) ? _1891 : (isnan(_1891) ? _2114 : min(_1891, _2114));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1857) + _1846;
        float _2379 = (_2374 * _1860) + _1850;
        float _2380 = (_2374 * _1863) + _1854;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2381;
        float _2385 = _2381 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 > _2385) || ((_2379 < _2383) || ((_2378 < _2383) || (_2378 > _2385))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2380, cbModelParam._m0[9u].z, fma(_2379, cbModelParam._m0[9u].y, _2378 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2380, cbModelParam._m0[10u].z, fma(_2379, cbModelParam._m0[10u].y, _2378 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2380, cbModelParam._m0[11u].z, fma(_2379, cbModelParam._m0[11u].y, _2378 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_16_38_ladder = _2508.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2508.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2508.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_16_38_ladder_2;
        _1881 = frontier_phi_16_38_ladder_1;
        _1883 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1955 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1958 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2119;
        if (_1952 > 0.0)
        {
            _2119 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2398;
        if (_1955 > 0.0)
        {
            _2398 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2398 = frontier_phi_40_35_ladder;
        }
        float _2611;
        if (_1958 > 0.0)
        {
            _2611 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2611 = frontier_phi_49_46_ladder;
        }
        float _2613 = isnan(_2398) ? _2119 : (isnan(_2119) ? _2398 : min(_2119, _2398));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1952) + _1941;
        float _2619 = (_2614 * _1955) + _1945;
        float _2620 = (_2614 * _1958) + _1949;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_25_49_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_49_ladder_2;
        _1979 = frontier_phi_25_49_ladder_1;
        _1981 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1888);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_983 * _932) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1996 = (((_983 * _934) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    vec4 _2015 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_870, _871));
    float _2017 = _2015.w;
    float _2029 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2017);
    float _2030 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2017);
    float _2031 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2017);
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _948 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2073 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2077 = _2037 | 1u;
    float _2088 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_770, _771, _772));
    float _2091 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_770, _771, _772));
    float _4343 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _4354 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2096 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2098 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2105 = ((cbLight._m0[_2054].x * _2060) * _2098) + (((cbLight._m0[_2064].x * _2029) * _2073) * _2096);
    float _2106 = ((_2060 * cbLight._m0[_2054].y) * _2098) + (((cbLight._m0[_2064].y * _2030) * _2073) * _2096);
    float _2107 = ((_2060 * cbLight._m0[_2054].z) * _2098) + (((cbLight._m0[_2064].z * _2031) * _2073) * _2096);
    uvec4 _2111 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2113 = _2111.x == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2113)
    {
        _2124 = _2105;
        _2126 = _2106;
        _2128 = _2107;
    }
    else
    {
        uint _2132 = _2037 + 6u;
        float _2148 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4365 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2151 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2124 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _2105;
        _2126 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _2106;
        _2128 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _2107;
    }
    bool _2131 = _2111.y == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2131)
    {
        _2169 = _2124;
        _2171 = _2126;
        _2173 = _2128;
    }
    else
    {
        uint _2342 = _2037 + 7u;
        float _2358 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2359 = _2358 * _2358;
        float _4381 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2360 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2361 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2169 = (((cbLight._m0[_2342].x * 0.3183098733425140380859375) * _2360) * _2361) + _2124;
        _2171 = (((cbLight._m0[_2342].y * 0.3183098733425140380859375) * _2360) * _2361) + _2126;
        _2173 = (((cbLight._m0[_2342].z * 0.3183098733425140380859375) * _2360) * _2361) + _2128;
    }
    uint _2176 = _2037 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _773) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_2037].x + _850;
    float _2192 = cbLight._m0[_2037].y + _851;
    float _2193 = cbLight._m0[_2037].z + _852;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2037].xyz));
    float _4397 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _4408 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2205 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2206 = dot(vec3(_770, _771, _772), vec3(_2198, _2199, _2200));
    float _4419 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2198, _2199, _2200));
    float _4430 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
    float _2227 = 0.959999978542327880859375 - _929;
    float _2229 = 0.959999978542327880859375 - _930;
    float _2230 = 0.959999978542327880859375 - _931;
    float _2237 = 1.0 - _2190;
    float _2248 = (0.5 / (((_2205 * ((_2204 * _2237) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2237) + _2190) * _2204))) * _2204;
    float _4441 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2264 = _2037 + 9u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _773) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2077].x + _850;
    float _2278 = cbLight._m0[_2077].y + _851;
    float _2279 = cbLight._m0[_2077].z + _852;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2077].xyz));
    float _4452 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2291 = dot(vec3(_770, _771, _772), vec3(_2284, _2285, _2286));
    float _4463 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2284, _2285, _2286));
    float _4474 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2276 * _2276;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
    float _2317 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2205 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2317) + _2276) * _2290))) * _2290;
    float _4485 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    float _2339 = (((((_2310 * _2227) + _932) * cbLight._m0[_2264].x) * _2329) * _2060) + ((((cbLight._m0[_2176].x * _2029) * ((_2226 * _2227) + _932)) * _2250) * _2073);
    float _2340 = (((((_2310 * _2229) + _934) * cbLight._m0[_2264].y) * _2329) * _2060) + ((((cbLight._m0[_2176].y * _2030) * ((_2226 * _2229) + _934)) * _2250) * _2073);
    float _2341 = (((((_2310 * _2230) + _935) * cbLight._m0[_2264].z) * _2329) * _2060) + ((((cbLight._m0[_2176].z * _2031) * ((_2226 * _2230) + _935)) * _2250) * _2073);
    float _2403;
    float _2405;
    float _2407;
    if (_2113)
    {
        _2403 = _2339;
        _2405 = _2340;
        _2407 = _2341;
    }
    else
    {
        uint _2409 = _2037 + 2u;
        uint _2413 = _2037 + 10u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _773) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _850;
        float _2430 = cbLight._m0[_2409].y + _851;
        float _2431 = cbLight._m0[_2409].z + _852;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2409].xyz));
        float _4496 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2443 = dot(vec3(_770, _771, _772), vec3(_2436, _2437, _2438));
        float _4507 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4518 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2205 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2469) + _2428) * _2442))) * _2442;
        float _4529 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2403 = (((((_2462 * _2227) + _932) * cbLight._m0[_2413].x) * _2481) * _2482) + _2339;
        _2405 = (((((_2462 * _2229) + _934) * cbLight._m0[_2413].y) * _2481) * _2482) + _2340;
        _2407 = (((((_2462 * _2230) + _935) * cbLight._m0[_2413].z) * _2481) * _2482) + _2341;
    }
    float _2517;
    float _2519;
    float _2521;
    if (_2131)
    {
        _2517 = _2403;
        _2519 = _2405;
        _2521 = _2407;
    }
    else
    {
        uint _2528 = _2037 + 3u;
        uint _2532 = _2037 + 11u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _773) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _850;
        float _2549 = cbLight._m0[_2528].y + _851;
        float _2550 = cbLight._m0[_2528].z + _852;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2528].xyz));
        float _4545 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2562 = dot(vec3(_770, _771, _772), vec3(_2555, _2556, _2557));
        float _4556 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4567 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2588 = 1.0 - _2547;
        float _2598 = (0.5 / (((_2205 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2588) + _2547) * _2561))) * _2561;
        float _4578 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2517 = (((((_2581 * _2227) + _932) * cbLight._m0[_2532].x) * _2600) * _2601) + _2403;
        _2519 = (((((_2581 * _2229) + _934) * cbLight._m0[_2532].y) * _2600) * _2601) + _2405;
        _2521 = (((((_2581 * _2230) + _935) * cbLight._m0[_2532].z) * _2600) * _2601) + _2407;
    }
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_2035.y == 0u)
    {
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2676;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2676;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2676;
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.x;
        uint _2703 = uint((float(_2691.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2692))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2692)));
        float _2713 = (log2(_2679 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2714 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        uint _2717 = uint(isnan(14.0) ? _2714 : (isnan(_2714) ? 14.0 : min(_2714, 14.0)));
        uvec4 _2722 = texelFetch(g_lightClusterGridBuffer, int(((_2717 << 2u) + (_2703 << 6u)) >> 2u));
        uint _2723 = _2722.x;
        uint _2724 = _2691.z;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((((1u << ((_2724 >> 4u) & 15u)) + 4294967295u) & _2723) == 0u) || ((_2724 & 240u) == 0u))
        {
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
        }
        else
        {
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2993)
                {
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2982;
                    frontier_phi_66_pred_2 = _2981;
                    frontier_phi_66_pred_3 = _2980;
                    frontier_phi_66_pred_4 = _2979;
                    frontier_phi_66_pred_5 = _2978;
                }
                else
                {
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    uint _3128;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2992;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    for (;;)
                    {
                        uint _3132 = uint(findLSB(_3128)) + (_2983 << 5u);
                        uint _3129 = (_3128 + 4294967295u) & _3128;
                        uint _3134 = _3132 * 48u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3154 = (_3132 * 48u) + 4u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3173 = (_3132 * 48u) + 8u;
                        vec3 _3184 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x));
                        float _3188 = _3148.x - _2677;
                        float _3189 = _3148.y - _2678;
                        float _3190 = _3148.z - _2679;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_889, _892, _895), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3148.w);
                        float _4604 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3205 = sqrt(_3191) * _3167.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3198) + _3209;
                        float _3215 = _3205 * _3205;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3204) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _2677;
                        float _3224 = (-0.0) - _2678;
                        float _3225 = (-0.0) - _2679;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3240 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _964;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3230 + _3195;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_889, _892, _895), vec3(_3230, _3231, _3232));
                        float _4620 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3265 = dot(vec3(_889, _892, _895), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4631 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3208 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3198) + _3274;
                        float _4642 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4653 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3272 * _3272) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3052 = (_3219 * _3167.x) + _3125;
                        _3053 = (_3219 * _3167.y) + _3126;
                        _3054 = (_3219 * _3167.z) + _3127;
                        _3049 = (_3300 * _3184.x) + _3122;
                        _3050 = (_3300 * _3184.y) + _3123;
                        _3051 = (_3300 * _3184.z) + _3124;
                        if (_3129 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3129;
                        }
                    }
                    frontier_phi_66_pred = _3049;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                _2825 = frontier_phi_66_pred;
                _2835 = frontier_phi_66_pred_1;
                _2833 = frontier_phi_66_pred_2;
                _2831 = frontier_phi_66_pred_3;
                _2829 = frontier_phi_66_pred_4;
                _2827 = frontier_phi_66_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2825;
                    _2978 = _2827;
                    _2979 = _2829;
                    _2980 = _2831;
                    _2981 = _2833;
                    _2982 = _2835;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
        }
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.z;
        uint _2841 = (_2839 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2841) & _2723) == 0u)
        {
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
            float _2971 = _2970 * _2677;
            float _2972 = _2970 * _2678;
            float _2973 = _2970 * _2679;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2841 < ((_2839 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3105 = _2824;
                float _3106 = _2826;
                float _3107 = _2828;
                float _3108 = _2830;
                float _3109 = _2832;
                float _3110 = _2834;
                uint _3111 = _2841;
                uint _3120;
                bool _3121;
                for (;;)
                {
                    _3120 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                    _3121 = _3120 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3121)
                    {
                        frontier_phi_77_pred = _3110;
                        frontier_phi_77_pred_1 = _3109;
                        frontier_phi_77_pred_2 = _3108;
                        frontier_phi_77_pred_3 = _3107;
                        frontier_phi_77_pred_4 = _3106;
                        frontier_phi_77_pred_5 = _3105;
                    }
                    else
                    {
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        uint _3333 = _3120;
                        uint _3334;
                        vec4 _3359;
                        float _3360;
                        vec4 _3375;
                        vec3 _3387;
                        vec4 _3402;
                        vec4 _3417;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3344 = ((_3111 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3333));
                            _3334 = (_3333 + 4294967295u) & _3333;
                            uint _3346 = _3344 * 40u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3360 = _3359.w;
                            uint _3362 = (_3344 * 40u) + 4u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3344 * 40u) + 8u;
                            _3387 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x));
                            uint _3389 = (_3344 * 40u) + 16u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3344 * 40u) + 20u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3344 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3344 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_2679, _3451.z, fma(_2678, _3451.y, _3451.x * _2677)) + _3451.w;
                            _3464 = !((fma(_2679, _3432.z, fma(_2678, _3432.y, _3432.x * _2677)) + _3432.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3359.x - _2677;
                                float _3492 = _3359.y - _2678;
                                float _3493 = _3359.z - _2679;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3360 * _3360));
                                float _4664 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3509 = sqrt(_3494) * _3375.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_889, _892, _895))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_2679, _3402.z, fma(_2678, _3402.y, _3402.x * _2677)) + _3402.w) / _3463;
                                float _3523 = (fma(_2679, _3417.z, fma(_2678, _3417.y, _3417.x * _2677)) + _3417.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4680 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _964;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _2971;
                                float _3553 = _3499 - _2972;
                                float _3554 = _3500 - _2973;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4691 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3566 = dot(vec3(_889, _892, _895), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4702 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_889, _892, _895), vec3(_3498, _3499, _3500))) + _3575;
                                float _4713 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4724 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3529 * _3375.y;
                                frontier_phi_83_pred_1 = _3529 * _3375.x;
                                frontier_phi_83_pred_2 = _3603 * _3387.z;
                                frontier_phi_83_pred_3 = _3603 * _3387.y;
                                frontier_phi_83_pred_4 = _3603 * _3387.x;
                                frontier_phi_83_pred_5 = _3529 * _3375.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_83_pred;
                            _3610 = frontier_phi_83_pred_1;
                            _3609 = frontier_phi_83_pred_2;
                            _3608 = frontier_phi_83_pred_3;
                            _3607 = frontier_phi_83_pred_4;
                            _3612 = frontier_phi_83_pred_5;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            if (_3334 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3334;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3319;
                        frontier_phi_77_pred_1 = _3318;
                        frontier_phi_77_pred_2 = _3317;
                        frontier_phi_77_pred_3 = _3316;
                        frontier_phi_77_pred_4 = _3315;
                        frontier_phi_77_pred_5 = _3314;
                    }
                    _2956 = frontier_phi_77_pred;
                    _2954 = frontier_phi_77_pred_1;
                    _2952 = frontier_phi_77_pred_2;
                    _2950 = frontier_phi_77_pred_3;
                    _2948 = frontier_phi_77_pred_4;
                    _2946 = frontier_phi_77_pred_5;
                    uint _3112 = _3111 + 1u;
                    if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3105 = _2946;
                        _3106 = _2948;
                        _3107 = _2950;
                        _3108 = _2952;
                        _3109 = _2954;
                        _3110 = _2956;
                        _3111 = _3112;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2950;
                frontier_phi_58_59_ladder_1 = _2956;
                frontier_phi_58_59_ladder_2 = _2954;
                frontier_phi_58_59_ladder_3 = _2952;
                frontier_phi_58_59_ladder_4 = _2948;
                frontier_phi_58_59_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_58_59_ladder = _2828;
                frontier_phi_58_59_ladder_1 = _2834;
                frontier_phi_58_59_ladder_2 = _2832;
                frontier_phi_58_59_ladder_3 = _2830;
                frontier_phi_58_59_ladder_4 = _2826;
                frontier_phi_58_59_ladder_5 = _2824;
            }
            _2945 = frontier_phi_58_59_ladder_5;
            _2947 = frontier_phi_58_59_ladder_4;
            _2949 = frontier_phi_58_59_ladder;
            _2951 = frontier_phi_58_59_ladder_3;
            _2953 = frontier_phi_58_59_ladder_2;
            _2955 = frontier_phi_58_59_ladder_1;
        }
        float _2960 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2736 = (_2960 * _2951) + _2169;
        _2738 = (_2960 * _2953) + _2171;
        _2740 = (_2960 * _2955) + _2173;
        _2742 = ((_2945 * _932) * _2960) + _2517;
        _2744 = ((_2947 * _934) * _2960) + _2519;
        _2746 = ((_2949 * _935) * _2960) + _2521;
    }
    else
    {
        _2736 = _2169;
        _2738 = _2171;
        _2740 = _2173;
        _2742 = _2517;
        _2744 = _2519;
        _2746 = _2521;
    }
    float _4740 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4751 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4762 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2763 = ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2736 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _948))) + ((_2742 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _2764 = ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2738 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _948))) + ((_2744 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _2765 = ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2740 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _948))) + ((_2746 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    uint _2766 = _272 + 6u;
    float _2774 = _870 / cbSceneParam._m0[86u].x;
    float _2775 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2789 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, (log2((isnan(cbSceneParam._m0[77u].w) ? _792 : (isnan(_792) ? cbSceneParam._m0[77u].w : min(_792, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2791 = _2789.x;
    float _2792 = _2789.y;
    float _2793 = _2789.z;
    float _2794 = _2789.w;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_792 > cbSceneParam._m0[78u].w)
    {
        float _2849 = isnan(_792) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _792 : min(cbSceneParam._m0[80u].w, _792));
        float _2850 = _2849 / _792;
        float _2861 = _2850 * _843;
        float _2862 = _844 * _2850;
        float _2863 = (-0.0) - _2862;
        float _2865 = _2850 * _845;
        float _2867 = (cbSceneParam._m0[77u].w * _2863) / _2849;
        float _2868 = _2867 + cbSceneParam._m0[79u].w;
        float _2869 = cbSceneParam._m0[79u].w - _2862;
        float _2875 = sqrt(((_2861 * _2861) + (_2862 * _2862)) + (_2865 * _2865));
        float _2878 = (1.0 - (cbSceneParam._m0[77u].w / _2849)) * _2875;
        float _2883 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2885 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3062;
        if (abs((_2863 - _2867) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3062 = ((((_2868 > 0.0) ? exp2(_2883 * _2868) : (2.0 - exp2(_2885 * _2868))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2878;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : max(_2868, _2869));
            float _3008 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : min(_2868, _2869));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3062 = ((abs(_2875 / _2863) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2883 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2883 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2885 * _3017) - exp2(_2885 * _3018)) * _3006))) + (_2878 * cbSceneParam._m0[80u].z);
        }
        vec4 _3064 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, 1.0), 0.0);
        float _3073 = exp2((_3062 * (-1.44269502162933349609375)) * (1.0 - _3064.w));
        float _3074 = log2(_3073);
        float _3090 = log2(_2794);
        _2887 = (exp2(_3090 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].x)) * _3064.x) / cbSceneParam._m0[78u].x)) + _2791;
        _2889 = (exp2(_3090 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].y)) * _3064.y) / cbSceneParam._m0[78u].y)) + _2792;
        _2891 = (exp2(_3090 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].z)) * _3064.z) / cbSceneParam._m0[78u].z)) + _2793;
        _2893 = _3073 * _2794;
    }
    else
    {
        _2887 = _2791;
        _2889 = _2792;
        _2891 = _2793;
        _2893 = _2794;
    }
    bool _3100;
    vec4 _2903;
    vec4 _2925;
    float _2927;
    float _2931;
    float _2932;
    float _2933;
    float _2934;
    bool _2944;
    for (;;)
    {
        _2903 = cbMatDynParam._m0[0u];
        float _2905 = roundEven(_2903.y);
        bool _2906 = _2905 == 3.0;
        float _2907 = log2(_2893);
        float _2914 = exp2(_2907 * cbSceneParam._m0[78u].x) * _2763;
        float _2915 = exp2(_2907 * cbSceneParam._m0[78u].y) * _2764;
        float _2916 = exp2(_2907 * cbSceneParam._m0[78u].z) * _2765;
        float _2923 = _859 + (-0.5);
        _2925 = cbMtdParam._m0[1u];
        _2927 = _2925.y * _2923;
        float _2930 = (_2905 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2931 = _2930 * (_2906 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2887)));
        _2932 = _2930 * (_2906 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2889)));
        _2933 = _2930 * (_2906 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2891)));
        _2934 = _2923 * 0.999000012874603271484375;
        _2944 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2944)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2934) < 0.5)
            {
                _3100 = true;
                break;
            }
        }
        uint _3041 = _908 + uint(_2903.w);
        if ((cbInstanceData._m0[_3041].w < 1.0) && ((cbInstanceData._m0[_3041].w + _2934) < 0.5))
        {
            _3100 = true;
            break;
        }
        if ((_2927 + 1.0) < _2925.x)
        {
            _3100 = true;
            break;
        }
        _3100 = false;
        break;
    }
    float _3305;
    if (_3100)
    {
        discard_state = true;
        _3305 = 0.0;
    }
    else
    {
        _3305 = cbInstanceData._m0[_2766].w;
    }
    SV_Target.x = _2931;
    SV_Target.y = _2932;
    SV_Target.z = _2933;
    SV_Target.w = _3305;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2766].w;
    discard_exit();
}


