#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1249;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3598 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3609 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3620 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) + _340;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _418 = _414.z;
    float _422 = (_414.x * 2.0) + (-1.0);
    float _423 = (_414.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3631 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    float _434 = _422 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_388.x * 2.0) + (-1.0)));
    float _435 = _423 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_388.y * 2.0) + (-1.0)));
    float _438 = fma(_429, _236, fma(_435, _243, _434 * _229));
    float _441 = fma(_429, _237, fma(_435, _244, _434 * _230));
    float _444 = fma(_429, _238, fma(_435, _245, _434 * _231));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _496 = (cbMtdParam._m0[19u].x + dot(vec4(_448 * _438, _448 * _441, _448 * _444, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_486 - _487) * cbMtdParam._m0[24u].z) + _487) * cbMtdParam._m0[21u].z);
    float _3642 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _499 = (-0.0) - cbMtdParam._m0[24u].x;
    float _501 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
    float _509 = _497 - ((_497 * TEXCOORD_8.x) * _502);
    float _510 = _497 - ((_497 * TEXCOORD_8.y) * _502);
    float _511 = _497 - ((_497 * TEXCOORD_8.z) * _502);
    float _518 = (_509 * ((_368.x * cbMtdParam._m0[18u].x) - _347)) + _347;
    float _519 = (_510 * ((_368.y * cbMtdParam._m0[18u].y) - _348)) + _348;
    float _520 = (_511 * ((_368.z * cbMtdParam._m0[18u].z) - _349)) + _349;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _563 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_534 - _535) * cbMtdParam._m0[24u].w) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3663 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _572 = ((((cbMtdParam._m0[10u].x - _518) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _564) + _518;
    float _573 = ((((cbMtdParam._m0[10u].y - _519) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _564) + _519;
    float _574 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _520)) * _564) + _520;
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _589 = _587.x;
    float _591 = _589 - (_589 * _509);
    float _593 = _591 - (_591 * _564);
    float _598 = (((_388.z - _418) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _418;
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3674 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _629 = ((_612.z - _598) * _509) + _598;
    float _632 = ((cbMtdParam._m0[23u].y - _629) * _564) + _629;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _657 = (_651.x * 2.0) + (-1.0);
    float _658 = (_651.y * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _3685 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _674 = ((sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) - _429) * _511) + _429;
    float _677 = (((_619 - _434) * _509) + _434) + (cbMtdParam._m0[21u].x * _434);
    float _678 = (((_620 - _435) * _510) + _435) + (cbMtdParam._m0[21u].x * _435);
    float _689 = (((_657 - _677) + (_677 * cbMtdParam._m0[22u].z)) * _564) + _677;
    float _690 = (((_658 - _678) + (_678 * cbMtdParam._m0[22u].z)) * _564) + _678;
    float _691 = (_564 * (sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) - _674)) + _674;
    float _693 = cbMtdParam._m0[22u].x + _414.w;
    float _696 = fma(_691, _236, fma(_690, _243, _689 * _229));
    float _699 = fma(_691, _237, fma(_690, _244, _689 * _230));
    float _702 = fma(_691, _238, fma(_690, _245, _689 * _231));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3696 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _710 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3718 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3729 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3740 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3751 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _715 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _816 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _819 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _822 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _836 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3762 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _848 = 1.0 - _715;
    float _849 = _845 * _848;
    float _850 = _846 * _848;
    float _851 = _847 * _848;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _715;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _715;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _715;
    float _859 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _875 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * TEXCOORD_5.w) * _871.x;
    float _876 = dot(vec3(_707, _708, _709), vec3(_786, _787, _788));
    float _879 = _876 * 2.0;
    float _883 = (_879 * _707) - _786;
    float _884 = (_879 * _708) - _787;
    float _885 = (_879 * _709) - _788;
    float _889 = abs(dot(vec3(_786, _787, _788), vec3(_707, _708, _709)));
    float _3795 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _891 = sqrt(_710);
    float _904 = exp2((_891 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_891 * 3.0));
    float _910 = (1.0 - _904) * ((_891 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _911 = _904 * _891;
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _977 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _981 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1006 = _939 + _707;
        float _1007 = _943 + _708;
        float _1008 = _947 + _709;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_707, _708, _709), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3843 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_707, _708, _709), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3876 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_707, _708, _709), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3909 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1292 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1296 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1319 = _939 + _707;
        float _1320 = _943 + _708;
        float _1321 = _947 + _709;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_707, _708, _709), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3972 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_707, _708, _709), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4005 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_707, _708, _709), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4038 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1249;
        _1558 = _1249;
        _1559 = _1249;
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1261)) + _1261;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1262)) + _1262;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1263)) + _1263;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _883 * 0.5;
    float _1626 = _884 * 0.5;
    float _1627 = _885 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1755 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1758 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1786 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1755 > 0.0)
        {
            _2010 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2267;
        if (_1758 > 0.0)
        {
            _2267 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2267 = frontier_phi_35_30_ladder;
        }
        float _2269 = isnan(_2010) ? _1786 : (isnan(_1786) ? _2010 : min(_1786, _2010));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1752) + _1741;
        float _2275 = (_2270 * _1755) + _1745;
        float _2276 = (_2270 * _1758) + _1749;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_13_35_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_13_35_ladder_2;
        _1776 = frontier_phi_13_35_ladder_1;
        _1778 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1694);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1850 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1853 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2015;
        if (_1847 > 0.0)
        {
            _2015 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2294;
        if (_1850 > 0.0)
        {
            _2294 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2294 = frontier_phi_37_32_ladder;
        }
        float _2507;
        if (_1853 > 0.0)
        {
            _2507 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2507 = frontier_phi_46_43_ladder;
        }
        float _2509 = isnan(_2294) ? _2015 : (isnan(_2015) ? _2294 : min(_2015, _2294));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1847) + _1836;
        float _2515 = (_2510 * _1850) + _1840;
        float _2516 = (_2510 * _1853) + _1844;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_22_46_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_22_46_ladder_2;
        _1874 = frontier_phi_22_46_ladder_1;
        _1876 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1783);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1889 = (((_910 * _859) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1891 = (((_910 * _861) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1893 = (((_910 * _862) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1876 - _1778)) + _1778);
    float _1896 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    vec4 _1910 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_794, _795));
    float _1912 = _1910.w;
    float _1924 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1912);
    float _1925 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1912);
    float _1926 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1912);
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1940 = _875 + (-1.0);
    float _1945 = (cbLight._m0[_1933].x * _1940) + 1.0;
    float _1946 = (cbLight._m0[_1933].y * _1940) + 1.0;
    float _1947 = (cbLight._m0[_1933].z * _1940) + 1.0;
    float _1948 = (cbLight._m0[_1933].w * _1940) + 1.0;
    uint _1949 = _1932 + 5u;
    float _1955 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1959 = _1932 + 4u;
    float _1969 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1973 = _1932 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_707, _708, _709));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_707, _708, _709));
    float _4174 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4185 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1949].x * _1955) * _1994) + (((cbLight._m0[_1959].x * _1924) * _1969) * _1992);
    float _2002 = ((_1955 * cbLight._m0[_1949].y) * _1994) + (((cbLight._m0[_1959].y * _1925) * _1969) * _1992);
    float _2003 = ((_1955 * cbLight._m0[_1949].z) * _1994) + (((cbLight._m0[_1959].z * _1926) * _1969) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1932 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_2009)
    {
        _2020 = _2001;
        _2022 = _2002;
        _2024 = _2003;
    }
    else
    {
        uint _2028 = _1932 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1932 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4196 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2047 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _2001;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _2002;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _2003;
    }
    bool _2027 = _2007.y == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2027)
    {
        _2065 = _2020;
        _2067 = _2022;
        _2069 = _2024;
    }
    else
    {
        uint _2238 = _1932 + 7u;
        float _2254 = (dot(vec3(cbLight._m0[_1932 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4212 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2257 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2065 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2020;
        _2067 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2022;
        _2069 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2024;
    }
    uint _2072 = _1932 + 8u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _710) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1932].x + _786;
    float _2088 = cbLight._m0[_1932].y + _787;
    float _2089 = cbLight._m0[_1932].z + _788;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1932].xyz));
    float _4228 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2101 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2102 = dot(vec3(_707, _708, _709), vec3(_2094, _2095, _2096));
    float _4250 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2094, _2095, _2096));
    float _4261 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2086 * _2086;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2123 = 0.959999978542327880859375 - _856;
    float _2125 = 0.959999978542327880859375 - _857;
    float _2126 = 0.959999978542327880859375 - _858;
    float _2133 = 1.0 - _2086;
    float _2144 = (0.5 / (((_2101 * ((_2100 * _2133) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2133) + _2086) * _2100))) * _2100;
    float _4272 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    uint _2160 = _1932 + 9u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _710) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1973].x + _786;
    float _2174 = cbLight._m0[_1973].y + _787;
    float _2175 = cbLight._m0[_1973].z + _788;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1973].xyz));
    float _4283 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2187 = dot(vec3(_707, _708, _709), vec3(_2180, _2181, _2182));
    float _4294 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2180, _2181, _2182));
    float _4305 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2172 * _2172;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2213 = 1.0 - _2172;
    float _2223 = (0.5 / (((_2101 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2213) + _2172) * _2186))) * _2186;
    float _4316 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    float _2235 = (((((_2206 * _2123) + _859) * cbLight._m0[_2160].x) * _2225) * _1955) + ((((cbLight._m0[_2072].x * _1924) * ((_2122 * _2123) + _859)) * _2146) * _1969);
    float _2236 = (((((_2206 * _2125) + _861) * cbLight._m0[_2160].y) * _2225) * _1955) + ((((cbLight._m0[_2072].y * _1925) * ((_2122 * _2125) + _861)) * _2146) * _1969);
    float _2237 = (((((_2206 * _2126) + _862) * cbLight._m0[_2160].z) * _2225) * _1955) + ((((cbLight._m0[_2072].z * _1926) * ((_2122 * _2126) + _862)) * _2146) * _1969);
    float _2299;
    float _2301;
    float _2303;
    if (_2009)
    {
        _2299 = _2235;
        _2301 = _2236;
        _2303 = _2237;
    }
    else
    {
        uint _2305 = _1932 + 2u;
        uint _2309 = _1932 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _710) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _786;
        float _2326 = cbLight._m0[_2305].y + _787;
        float _2327 = cbLight._m0[_2305].z + _788;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2305].xyz));
        float _4327 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2339 = dot(vec3(_707, _708, _709), vec3(_2332, _2333, _2334));
        float _4338 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4349 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2365 = 1.0 - _2324;
        float _2375 = (0.5 / (((_2101 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2365) + _2324) * _2338))) * _2338;
        float _4360 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2299 = (((((_2358 * _2123) + _859) * cbLight._m0[_2309].x) * _2377) * _2378) + _2235;
        _2301 = (((((_2358 * _2125) + _861) * cbLight._m0[_2309].y) * _2377) * _2378) + _2236;
        _2303 = (((((_2358 * _2126) + _862) * cbLight._m0[_2309].z) * _2377) * _2378) + _2237;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2027)
    {
        _2413 = _2299;
        _2415 = _2301;
        _2417 = _2303;
    }
    else
    {
        uint _2424 = _1932 + 3u;
        uint _2428 = _1932 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _710) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _786;
        float _2445 = cbLight._m0[_2424].y + _787;
        float _2446 = cbLight._m0[_2424].z + _788;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2424].xyz));
        float _4376 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2458 = dot(vec3(_707, _708, _709), vec3(_2451, _2452, _2453));
        float _4387 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4398 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2101 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2484) + _2443) * _2457))) * _2457;
        float _4409 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2413 = (((((_2477 * _2123) + _859) * cbLight._m0[_2428].x) * _2496) * _2497) + _2299;
        _2415 = (((((_2477 * _2125) + _861) * cbLight._m0[_2428].y) * _2496) * _2497) + _2301;
        _2417 = (((((_2477 * _2126) + _862) * cbLight._m0[_2428].z) * _2496) * _2497) + _2303;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1930.y == 0u)
    {
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2572;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2572;
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2572;
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.x;
        uint _2599 = uint((float(_2587.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2588))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2588)));
        float _2609 = (log2(_2575 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2610 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        uint _2613 = uint(isnan(14.0) ? _2610 : (isnan(_2610) ? 14.0 : min(_2610, 14.0)));
        uvec4 _2618 = texelFetch(g_lightClusterGridBuffer, int(((_2613 << 2u) + (_2599 << 6u)) >> 2u));
        uint _2619 = _2618.x;
        uint _2620 = _2587.z;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((((1u << ((_2620 >> 4u) & 15u)) + 4294967295u) & _2619) == 0u) || ((_2620 & 240u) == 0u))
        {
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
        }
        else
        {
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2880)
                {
                    frontier_phi_61_pred = _2864;
                    frontier_phi_61_pred_1 = _2869;
                    frontier_phi_61_pred_2 = _2868;
                    frontier_phi_61_pred_3 = _2867;
                    frontier_phi_61_pred_4 = _2866;
                    frontier_phi_61_pred_5 = _2865;
                }
                else
                {
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    uint _2994;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2879;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _2998 = uint(findLSB(_2994)) + (_2870 << 5u);
                        uint _2995 = (_2994 + 4294967295u) & _2994;
                        uint _3000 = _2998 * 48u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3020 = (_2998 * 48u) + 4u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3039 = (_2998 * 48u) + 8u;
                        vec3 _3050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x));
                        float _3054 = _3014.x - _2573;
                        float _3055 = _3014.y - _2574;
                        float _3056 = _3014.z - _2575;
                        float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                        float _3060 = inversesqrt(_3057);
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3064 = dot(vec3(_816, _819, _822), vec3(_3061, _3062, _3063));
                        float _3069 = 1.0 - (_3057 * _3014.w);
                        float _4435 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3071 = sqrt(_3057) * _3033.w;
                        float _3074 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3064) + _3075;
                        float _3081 = _3071 * _3071;
                        float _3085 = ((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3070) / ((_3081 * 0.699999988079071044921875) + 1.0);
                        float _3089 = (-0.0) - _2573;
                        float _3090 = (-0.0) - _2574;
                        float _3091 = (-0.0) - _2575;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3106 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                        float _3107 = 1.0 - _891;
                        float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                        float _3115 = _3114 * _3114;
                        float _3116 = _3115 * _3115;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3127 = dot(vec3(_816, _819, _822), vec3(_3096, _3097, _3098));
                        float _4451 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3131 = dot(vec3(_816, _819, _822), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                        float _4462 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                        float _3139 = _3074 * _3115;
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3064) + _3140;
                        float _4473 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3145 = 1.0 - _3115;
                        float _3155 = (0.5 / (((_3144 * ((_3130 * _3145) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3115) * _3130))) * _3144;
                        float _4484 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3166 = (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3138 * _3138) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125))) * _3070;
                        _2923 = (_3085 * _3033.x) + _2991;
                        _2924 = (_3085 * _3033.y) + _2992;
                        _2925 = (_3085 * _3033.z) + _2993;
                        _2920 = (_3166 * _3050.x) + _2988;
                        _2921 = (_3166 * _3050.y) + _2989;
                        _2922 = (_3166 * _3050.z) + _2990;
                        if (_2995 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2995;
                        }
                    }
                    frontier_phi_61_pred = _2920;
                    frontier_phi_61_pred_1 = _2925;
                    frontier_phi_61_pred_2 = _2924;
                    frontier_phi_61_pred_3 = _2923;
                    frontier_phi_61_pred_4 = _2922;
                    frontier_phi_61_pred_5 = _2921;
                }
                _2721 = frontier_phi_61_pred;
                _2731 = frontier_phi_61_pred_1;
                _2729 = frontier_phi_61_pred_2;
                _2727 = frontier_phi_61_pred_3;
                _2725 = frontier_phi_61_pred_4;
                _2723 = frontier_phi_61_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2721;
                    _2865 = _2723;
                    _2866 = _2725;
                    _2867 = _2727;
                    _2868 = _2729;
                    _2869 = _2731;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
        }
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.z;
        uint _2737 = (_2735 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2737) & _2619) == 0u)
        {
            _2832 = _2720;
            _2834 = _2722;
            _2836 = _2724;
            _2838 = _2726;
            _2840 = _2728;
            _2842 = _2730;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
            float _2858 = _2857 * _2573;
            float _2859 = _2857 * _2574;
            float _2860 = _2857 * _2575;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2737 < ((_2735 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2971 = _2720;
                float _2972 = _2722;
                float _2973 = _2724;
                float _2974 = _2726;
                float _2975 = _2728;
                float _2976 = _2730;
                uint _2977 = _2737;
                uint _2986;
                bool _2987;
                for (;;)
                {
                    _2986 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                    _2987 = _2986 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2987)
                    {
                        frontier_phi_67_pred = _2974;
                        frontier_phi_67_pred_1 = _2975;
                        frontier_phi_67_pred_2 = _2976;
                        frontier_phi_67_pred_3 = _2973;
                        frontier_phi_67_pred_4 = _2972;
                        frontier_phi_67_pred_5 = _2971;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        uint _3190 = _2986;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3274;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3201 = ((_2977 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3201 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3201 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3201 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_2575, _3308.z, fma(_2574, _3308.y, _3308.x * _2573)) + _3308.w;
                            _3321 = !((fma(_2575, _3289.z, fma(_2574, _3289.y, _3289.x * _2573)) + _3289.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3216.x - _2573;
                                float _3349 = _3216.y - _2574;
                                float _3350 = _3216.z - _2575;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3217 * _3217));
                                float _4495 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3366 = sqrt(_3351) * _3232.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_816, _819, _822))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_2575, _3259.z, fma(_2574, _3259.y, _3259.x * _2573)) + _3259.w) / _3320;
                                float _3380 = (fma(_2575, _3274.z, fma(_2574, _3274.y, _3274.x * _2573)) + _3274.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4511 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _891;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2858;
                                float _3410 = _3356 - _2859;
                                float _3411 = _3357 - _2860;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_816, _819, _822), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4522 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3423 = dot(vec3(_816, _819, _822), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4533 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_816, _819, _822), vec3(_3355, _3356, _3357))) + _3432;
                                float _4544 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4555 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3460 * _3244.x;
                                frontier_phi_73_pred_1 = _3460 * _3244.y;
                                frontier_phi_73_pred_2 = _3386 * _3232.z;
                                frontier_phi_73_pred_3 = _3386 * _3232.y;
                                frontier_phi_73_pred_4 = _3386 * _3232.x;
                                frontier_phi_73_pred_5 = _3460 * _3244.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3464 = frontier_phi_73_pred;
                            _3465 = frontier_phi_73_pred_1;
                            _3469 = frontier_phi_73_pred_2;
                            _3468 = frontier_phi_73_pred_3;
                            _3467 = frontier_phi_73_pred_4;
                            _3466 = frontier_phi_73_pred_5;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    _2839 = frontier_phi_67_pred;
                    _2841 = frontier_phi_67_pred_1;
                    _2843 = frontier_phi_67_pred_2;
                    _2837 = frontier_phi_67_pred_3;
                    _2835 = frontier_phi_67_pred_4;
                    _2833 = frontier_phi_67_pred_5;
                    uint _2978 = _2977 + 1u;
                    if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2971 = _2833;
                        _2972 = _2835;
                        _2973 = _2837;
                        _2974 = _2839;
                        _2975 = _2841;
                        _2976 = _2843;
                        _2977 = _2978;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2841;
                frontier_phi_55_56_ladder_1 = _2843;
                frontier_phi_55_56_ladder_2 = _2839;
                frontier_phi_55_56_ladder_3 = _2837;
                frontier_phi_55_56_ladder_4 = _2835;
                frontier_phi_55_56_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_55_56_ladder = _2728;
                frontier_phi_55_56_ladder_1 = _2730;
                frontier_phi_55_56_ladder_2 = _2726;
                frontier_phi_55_56_ladder_3 = _2724;
                frontier_phi_55_56_ladder_4 = _2722;
                frontier_phi_55_56_ladder_5 = _2720;
            }
            _2832 = frontier_phi_55_56_ladder_5;
            _2834 = frontier_phi_55_56_ladder_4;
            _2836 = frontier_phi_55_56_ladder_3;
            _2838 = frontier_phi_55_56_ladder_2;
            _2840 = frontier_phi_55_56_ladder;
            _2842 = frontier_phi_55_56_ladder_1;
        }
        float _2847 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
        _2632 = (_2847 * _2838) + _2065;
        _2634 = (_2847 * _2840) + _2067;
        _2636 = (_2847 * _2842) + _2069;
        _2638 = ((_2832 * _859) * _2847) + _2413;
        _2640 = ((_2834 * _861) * _2847) + _2415;
        _2642 = ((_2836 * _862) * _2847) + _2417;
    }
    else
    {
        _2632 = _2065;
        _2634 = _2067;
        _2636 = _2069;
        _2638 = _2413;
        _2640 = _2415;
        _2642 = _2417;
    }
    float _4571 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4582 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4593 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    uint _2662 = _267 + 6u;
    float _2670 = _794 / cbSceneParam._m0[86u].x;
    float _2671 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2685 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2687 = _2685.x;
    float _2688 = _2685.y;
    float _2689 = _2685.z;
    float _2690 = _2685.w;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2745 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2746 = _2745 / _729;
        float _2757 = _2746 * _779;
        float _2758 = _780 * _2746;
        float _2759 = (-0.0) - _2758;
        float _2760 = _2746 * _781;
        float _2762 = (cbSceneParam._m0[77u].w * _2759) / _2745;
        float _2763 = _2762 + cbSceneParam._m0[79u].w;
        float _2764 = cbSceneParam._m0[79u].w - _2758;
        float _2770 = sqrt(((_2757 * _2757) + (_2758 * _2758)) + (_2760 * _2760));
        float _2773 = (1.0 - (cbSceneParam._m0[77u].w / _2745)) * _2770;
        float _2778 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2780 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2759 - _2762) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2763 > 0.0) ? exp2(_2778 * _2763) : (2.0 - exp2(_2780 * _2763))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2773;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : max(_2763, _2764));
            float _2895 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : min(_2763, _2764));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2933 = ((abs(_2770 / _2759) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2778 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2778 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2780 * _2904) - exp2(_2780 * _2905)) * _2893))) + (_2773 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2690);
        _2782 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2687;
        _2784 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2688;
        _2786 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2689;
        _2788 = _2944 * _2690;
    }
    else
    {
        _2782 = _2687;
        _2784 = _2688;
        _2786 = _2689;
        _2788 = _2690;
    }
    float _2800 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2801 = _2800 == 3.0;
    float _2802 = log2(_2788);
    float _2809 = exp2(_2802 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2632 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _875))) + ((_2638 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2810 = exp2(_2802 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2634 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _875))) + ((_2640 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2811 = exp2(_2802 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2636 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _875))) + ((_2642 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2820 = (_2800 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2820 * (_2801 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.y = _2820 * (_2801 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.z = _2820 * (_2801 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.w = cbInstanceData._m0[_2662].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2662].w;
}


