#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1233;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3582 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    float _485 = ((_455.z - _476) * _380) + _476;
    float _488 = ((((_455.x - _474) * _380) + _474) * 2.0) + (-1.0);
    float _489 = ((((_455.y - _475) * _380) + _475) * 2.0) + (-1.0);
    float _490 = dot(vec2(_488, _489), vec2(_488, _489));
    float _3593 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    float _498 = _488 + ((((_428.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _499 = _489 + ((((_428.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _502 = fma(_495, _230, fma(_499, _237, _498 * _223));
    float _505 = fma(_495, _231, fma(_499, _238, _498 * _224));
    float _508 = fma(_495, _232, fma(_499, _239, _498 * _225));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _556 = _554.x;
    float _557 = 1.0 - _556;
    float _563 = (cbMtdParam._m0[19u].x + dot(vec4(_512 * _502, _512 * _505, _512 * _508, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_556 - _557) * cbMtdParam._m0[24u].z) + _557) * cbMtdParam._m0[21u].z);
    float _3604 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _571 = (_564 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) + _387;
    float _572 = (_564 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) + _388;
    float _573 = (_564 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) + _389;
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _601 = _599.x;
    float _619 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _601) * _380) + _601;
    float _623 = ((_585.x - _619) * cbMtdParam._m0[19u].z) + _619;
    float _625 = _623 - (_623 * _564);
    float _630 = (((_428.z - _485) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _485;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3615 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _660 = ((_643.z - _630) * _564) + _630;
    float _670 = ((sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _495) * _564) + _495;
    float _673 = (((_650 - _498) * _564) + _498) + (cbMtdParam._m0[21u].x * _498);
    float _674 = (((_651 - _499) * _564) + _499) + (cbMtdParam._m0[21u].x * _499);
    float _679 = cbMtdParam._m0[22u].x + _528.w;
    float _682 = fma(_670, _230, fma(_674, _237, _673 * _223));
    float _685 = fma(_670, _231, fma(_674, _238, _673 * _224));
    float _688 = fma(_670, _232, fma(_674, _239, _673 * _225));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3626 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _696 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3648 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3659 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3670 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3681 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _701 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _766 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _768 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
    float _773 = _766 * _772;
    float _774 = _767 * _772;
    float _775 = _768 * _772;
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_695, cbSceneParam._m0[5u].z, fma(_694, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _693));
    float _803 = fma(_695, cbSceneParam._m0[6u].z, fma(_694, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _693));
    float _806 = fma(_695, cbSceneParam._m0[7u].z, fma(_694, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _693));
    uint _820 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_820].z;
    float _3692 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _832 = 1.0 - _701;
    float _833 = _829 * _832;
    float _834 = _830 * _832;
    float _835 = _831 * _832;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _701;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _701;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _701;
    float _843 = _840 + 0.039999999105930328369140625;
    float _845 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _859 = ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_693, _694, _695), vec3(_773, _774, _775));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _693) - _773;
    float _868 = (_863 * _694) - _774;
    float _869 = (_863 * _695) - _775;
    float _873 = abs(dot(vec3(_773, _774, _775), vec3(_693, _694, _695)));
    float _3725 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_696);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _894 = (1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _875;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1232;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _957 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _961 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _965 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _990 = _923 + _693;
        float _991 = _927 + _694;
        float _992 = _931 + _695;
        float _1002 = fma(_992, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990)) - _957;
        float _1003 = fma(_992, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990)) - _961;
        float _1004 = fma(_992, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990)) - _965;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_957 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_961 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[34u].z) + ((((((_965 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1060 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1026.x + (-0.5));
        float _1062 = _1060 * (_1026.y + (-0.5));
        float _1063 = _1060 * (_1026.z + (-0.5));
        float _1070 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1033.x + (-0.5));
        float _1072 = _1070 * (_1033.y + (-0.5));
        float _1073 = _1070 * (_1033.z + (-0.5));
        float _1080 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1040.x + (-0.5));
        float _1082 = _1080 * (_1040.y + (-0.5));
        float _1083 = _1080 * (_1040.z + (-0.5));
        float _1090 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1047.x + (-0.5));
        float _1092 = _1090 * (_1047.y + (-0.5));
        float _1093 = _1090 * (_1047.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1114 = (dot(vec3(_693, _694, _695), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1124 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3773 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1126 + 1.0))) + _1131) * _1094;
        float _1141 = _1062 * 0.5;
        float _1142 = _1072 * 0.5;
        float _1143 = _1082 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_693, _694, _695), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3806 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1168 + 1.0))) + _1173) * _1095;
        float _1183 = _1063 * 0.5;
        float _1184 = _1073 * 0.5;
        float _1185 = _1083 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_693, _694, _695), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3839 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1210 + 1.0))) + _1215) * _1096;
        _1232 = _1063;
        _1234 = _1062;
        _1235 = _1061;
        _1236 = _1073;
        _1237 = _1072;
        _1238 = _1071;
        _1239 = _1083;
        _1240 = _1082;
        _1241 = _1081;
        _1242 = _1096;
        _1243 = _1095;
        _1244 = _1094;
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _1233;
        _1234 = _1233;
        _1235 = _1233;
        _1236 = _1233;
        _1237 = _1233;
        _1238 = _1233;
        _1239 = _1233;
        _1240 = _1233;
        _1241 = _1233;
        _1242 = _1233;
        _1243 = _1233;
        _1244 = _1233;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1272 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1276 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1280 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1303 = _923 + _693;
        float _1304 = _927 + _694;
        float _1305 = _931 + _695;
        float _1315 = fma(_1305, cbModelParam._m0[30u].z, fma(_1304, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303)) - _1272;
        float _1316 = fma(_1305, cbModelParam._m0[31u].z, fma(_1304, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303)) - _1276;
        float _1317 = fma(_1305, cbModelParam._m0[32u].z, fma(_1304, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303)) - _1280;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1334 = ((_1321 * _1315) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1272 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1321 * _1316) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1276 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1321 * _1317) / cbModelParam._m0[35u].z) + ((((((_1280 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        float _1371 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1338.x + (-0.5));
        float _1373 = _1371 * (_1338.y + (-0.5));
        float _1374 = _1371 * (_1338.z + (-0.5));
        float _1381 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1345.x + (-0.5));
        float _1383 = _1381 * (_1345.y + (-0.5));
        float _1384 = _1381 * (_1345.z + (-0.5));
        float _1391 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1352.x + (-0.5));
        float _1393 = _1391 * (_1352.y + (-0.5));
        float _1394 = _1391 * (_1352.z + (-0.5));
        float _1401 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1359.x + (-0.5));
        float _1403 = _1401 * (_1359.y + (-0.5));
        float _1404 = _1401 * (_1359.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_693, _694, _695), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3902 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1435 + 1.0))) + _1440) * _1405;
        float _1450 = _1373 * 0.5;
        float _1451 = _1383 * 0.5;
        float _1452 = _1393 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_693, _694, _695), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3935 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1477 + 1.0))) + _1482) * _1406;
        float _1492 = _1374 * 0.5;
        float _1493 = _1384 * 0.5;
        float _1494 = _1394 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_693, _694, _695), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3968 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1519 + 1.0))) + _1524) * _1407;
        _1541 = _1374;
        _1542 = _1373;
        _1543 = _1372;
        _1544 = _1384;
        _1545 = _1383;
        _1546 = _1382;
        _1547 = _1394;
        _1548 = _1393;
        _1549 = _1392;
        _1550 = _1407;
        _1551 = _1406;
        _1552 = _1405;
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1233;
        _1542 = _1233;
        _1543 = _1233;
        _1544 = _1233;
        _1545 = _1233;
        _1546 = _1233;
        _1547 = _1233;
        _1548 = _1233;
        _1549 = _1233;
        _1550 = _1233;
        _1551 = _1233;
        _1552 = _1233;
        _1553 = 0.0;
        _1554 = 0.0;
        _1555 = 0.0;
    }
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1588 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1565));
    float _1609 = _867 * 0.5;
    float _1610 = _868 * 0.5;
    float _1611 = _869 * 0.5;
    float _1612 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1615 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1618 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1652;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1625 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1232, _1236, _1239, _1242));
        float _1629 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1633 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1640 = dot(vec4(cbModelParam._m0[39u]), vec4(_1609, _1610, _1611, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1663;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1654 = dot(vec4(cbModelParam._m0[40u]), vec4(_1609, _1610, _1611, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1667 = (_1663 * cbModelParam._m0[1u].x) + (_1652 * (1.0 - cbModelParam._m0[1u].x));
    float _1677 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1677 : min(cbModelParam._m0[25u].z, _1677));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1739 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1742 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1770 = frontier_phi_14_12_ladder;
        }
        float _1993;
        if (_1739 > 0.0)
        {
            _1993 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1993 = frontier_phi_23_19_ladder;
        }
        float _2250;
        if (_1742 > 0.0)
        {
            _2250 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2250 = frontier_phi_35_30_ladder;
        }
        float _2252 = isnan(_1993) ? _1770 : (isnan(_1770) ? _1993 : min(_1770, _1993));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1736) + _1725;
        float _2258 = (_2253 * _1739) + _1729;
        float _2259 = (_2253 * _1742) + _1733;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1678);
            frontier_phi_13_35_ladder = _2387.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2387.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2387.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_13_35_ladder_2;
        _1760 = frontier_phi_13_35_ladder_1;
        _1762 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1678);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1820 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1824 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1828 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1831 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1834 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1837 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1998;
        if (_1831 > 0.0)
        {
            _1998 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1998 = frontier_phi_25_21_ladder;
        }
        float _2277;
        if (_1834 > 0.0)
        {
            _2277 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2277 = frontier_phi_37_32_ladder;
        }
        float _2490;
        if (_1837 > 0.0)
        {
            _2490 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2490 = frontier_phi_46_43_ladder;
        }
        float _2492 = isnan(_2277) ? _1998 : (isnan(_1998) ? _2277 : min(_1998, _2277));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1831) + _1820;
        float _2498 = (_2493 * _1834) + _1824;
        float _2499 = (_2493 * _1837) + _1828;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_22_46_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1856 = frontier_phi_22_46_ladder_2;
        _1858 = frontier_phi_22_46_ladder_1;
        _1860 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1767);
        _1856 = _1840.x * cbModelParam._m0[1u].z;
        _1858 = _1840.y * cbModelParam._m0[1u].z;
        _1860 = _1840.z * cbModelParam._m0[1u].z;
    }
    float _1873 = (((_894 * _843) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1875 = (((_894 * _845) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1858 - _1760)) + _1760);
    float _1877 = (((_894 * _846) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1860 - _1762)) + _1762);
    float _1880 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1875, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1875, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1875, cbSceneParam._m0[91u].y, _1873 * cbSceneParam._m0[91u].x));
    vec4 _1894 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_781, _782));
    float _1896 = _1894.w;
    float _1908 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1896);
    float _1909 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1896);
    float _1910 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1896);
    uvec4 _1914 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1916 = _1914.x * 14u;
    uint _1917 = _1916 + 13u;
    float _1924 = _859 + (-1.0);
    float _1929 = (cbLight._m0[_1917].x * _1924) + 1.0;
    float _1930 = (cbLight._m0[_1917].y * _1924) + 1.0;
    float _1931 = (cbLight._m0[_1917].z * _1924) + 1.0;
    float _1932 = (cbLight._m0[_1917].w * _1924) + 1.0;
    uint _1933 = _1916 + 5u;
    float _1939 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1943 = _1916 + 4u;
    float _1952 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1956 = _1916 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_693, _694, _695));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_693, _694, _695));
    float _4104 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4115 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1933].x * _1939) * _1977) + (((cbLight._m0[_1943].x * _1908) * _1952) * _1975);
    float _1985 = ((_1939 * cbLight._m0[_1933].y) * _1977) + (((cbLight._m0[_1943].y * _1909) * _1952) * _1975);
    float _1986 = ((_1939 * cbLight._m0[_1933].z) * _1977) + (((cbLight._m0[_1943].z * _1910) * _1952) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1916 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1992)
    {
        _2003 = _1984;
        _2005 = _1985;
        _2007 = _1986;
    }
    else
    {
        uint _2011 = _1916 + 6u;
        float _2027 = (dot(vec3(cbLight._m0[_1916 + 2u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4126 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2030 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2003 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1984;
        _2005 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1985;
        _2007 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1986;
    }
    bool _2010 = _1990.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2010)
    {
        _2048 = _2003;
        _2050 = _2005;
        _2052 = _2007;
    }
    else
    {
        uint _2221 = _1916 + 7u;
        float _2237 = (dot(vec3(cbLight._m0[_1916 + 3u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4142 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2240 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2048 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2003;
        _2050 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2005;
        _2052 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2007;
    }
    uint _2055 = _1916 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _696) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1916].x + _773;
    float _2071 = cbLight._m0[_1916].y + _774;
    float _2072 = cbLight._m0[_1916].z + _775;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_1916].xyz));
    float _4158 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2084 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2085 = dot(vec3(_693, _694, _695), vec3(_2077, _2078, _2079));
    float _4180 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2077, _2078, _2079));
    float _4191 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2105 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2106 = 0.959999978542327880859375 - _840;
    float _2108 = 0.959999978542327880859375 - _841;
    float _2109 = 0.959999978542327880859375 - _842;
    float _2116 = 1.0 - _2069;
    float _2127 = (0.5 / (((_2084 * ((_2083 * _2116) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2116) + _2069) * _2083))) * _2083;
    float _4202 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2143 = _1916 + 9u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _696) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_1956].x + _773;
    float _2157 = cbLight._m0[_1956].y + _774;
    float _2158 = cbLight._m0[_1956].z + _775;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_1956].xyz));
    float _4213 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2170 = dot(vec3(_693, _694, _695), vec3(_2163, _2164, _2165));
    float _4224 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2163, _2164, _2165));
    float _4235 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2155 * _2155;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2196 = 1.0 - _2155;
    float _2206 = (0.5 / (((_2084 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2196) + _2155) * _2169))) * _2169;
    float _4246 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2208 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    float _2218 = (((((_2189 * _2106) + _843) * cbLight._m0[_2143].x) * _2208) * _1939) + ((((cbLight._m0[_2055].x * _1908) * ((_2105 * _2106) + _843)) * _2129) * _1952);
    float _2219 = (((((_2189 * _2108) + _845) * cbLight._m0[_2143].y) * _2208) * _1939) + ((((cbLight._m0[_2055].y * _1909) * ((_2105 * _2108) + _845)) * _2129) * _1952);
    float _2220 = (((((_2189 * _2109) + _846) * cbLight._m0[_2143].z) * _2208) * _1939) + ((((cbLight._m0[_2055].z * _1910) * ((_2105 * _2109) + _846)) * _2129) * _1952);
    float _2282;
    float _2284;
    float _2286;
    if (_1992)
    {
        _2282 = _2218;
        _2284 = _2219;
        _2286 = _2220;
    }
    else
    {
        uint _2288 = _1916 + 2u;
        uint _2292 = _1916 + 10u;
        float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _696) * 0.949999988079071044921875);
        float _2307 = _2306 * _2306;
        float _2308 = cbLight._m0[_2288].x + _773;
        float _2309 = cbLight._m0[_2288].y + _774;
        float _2310 = cbLight._m0[_2288].z + _775;
        float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
        float _2315 = _2314 * _2308;
        float _2316 = _2314 * _2309;
        float _2317 = _2314 * _2310;
        float _2318 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2288].xyz));
        float _4257 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2322 = dot(vec3(_693, _694, _695), vec3(_2315, _2316, _2317));
        float _4268 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2326 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2315, _2316, _2317));
        float _4279 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2330 = _2307 * _2307;
        float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
        float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2348 = 1.0 - _2307;
        float _2358 = (0.5 / (((_2084 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2348) + _2307) * _2321))) * _2321;
        float _4290 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2282 = (((((_2341 * _2106) + _843) * cbLight._m0[_2292].x) * _2360) * _2361) + _2218;
        _2284 = (((((_2341 * _2108) + _845) * cbLight._m0[_2292].y) * _2360) * _2361) + _2219;
        _2286 = (((((_2341 * _2109) + _846) * cbLight._m0[_2292].z) * _2360) * _2361) + _2220;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2010)
    {
        _2396 = _2282;
        _2398 = _2284;
        _2400 = _2286;
    }
    else
    {
        uint _2407 = _1916 + 3u;
        uint _2411 = _1916 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _696) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _773;
        float _2428 = cbLight._m0[_2407].y + _774;
        float _2429 = cbLight._m0[_2407].z + _775;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2407].xyz));
        float _4306 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2441 = dot(vec3(_693, _694, _695), vec3(_2434, _2435, _2436));
        float _4317 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4328 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2084 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2467) + _2426) * _2440))) * _2440;
        float _4339 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2396 = (((((_2460 * _2106) + _843) * cbLight._m0[_2411].x) * _2479) * _2480) + _2282;
        _2398 = (((((_2460 * _2108) + _845) * cbLight._m0[_2411].y) * _2479) * _2480) + _2284;
        _2400 = (((((_2460 * _2109) + _846) * cbLight._m0[_2411].z) * _2479) * _2480) + _2286;
    }
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_1914.y == 0u)
    {
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2555;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2555;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2555;
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.x;
        uint _2582 = uint((float(_2570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2571))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2571)));
        float _2592 = (log2(_2558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        uint _2596 = uint(isnan(14.0) ? _2593 : (isnan(_2593) ? 14.0 : min(_2593, 14.0)));
        uvec4 _2601 = texelFetch(g_lightClusterGridBuffer, int(((_2596 << 2u) + (_2582 << 6u)) >> 2u));
        uint _2602 = _2601.x;
        uint _2603 = _2570.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2603 >> 4u) & 15u)) + 4294967295u) & _2602) == 0u) || ((_2603 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2864)
                {
                    frontier_phi_61_pred = _2848;
                    frontier_phi_61_pred_1 = _2853;
                    frontier_phi_61_pred_2 = _2852;
                    frontier_phi_61_pred_3 = _2851;
                    frontier_phi_61_pred_4 = _2850;
                    frontier_phi_61_pred_5 = _2849;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2556;
                        float _3039 = _2998.y - _2557;
                        float _3040 = _2998.z - _2558;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_800, _803, _806), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4365 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2556;
                        float _3074 = (-0.0) - _2557;
                        float _3075 = (-0.0) - _2558;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _875;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_800, _803, _806), vec3(_3080, _3081, _3082));
                        float _4381 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3115 = dot(vec3(_800, _803, _806), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4392 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4403 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4414 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3150 * _3034.x) + _2972;
                        _2905 = (_3150 * _3034.y) + _2973;
                        _2906 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_61_pred = _2904;
                    frontier_phi_61_pred_1 = _2909;
                    frontier_phi_61_pred_2 = _2908;
                    frontier_phi_61_pred_3 = _2907;
                    frontier_phi_61_pred_4 = _2906;
                    frontier_phi_61_pred_5 = _2905;
                }
                _2704 = frontier_phi_61_pred;
                _2714 = frontier_phi_61_pred_1;
                _2712 = frontier_phi_61_pred_2;
                _2710 = frontier_phi_61_pred_3;
                _2708 = frontier_phi_61_pred_4;
                _2706 = frontier_phi_61_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2704;
                    _2849 = _2706;
                    _2850 = _2708;
                    _2851 = _2710;
                    _2852 = _2712;
                    _2853 = _2714;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2720) & _2602) == 0u)
        {
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
            float _2842 = _2841 * _2556;
            float _2843 = _2841 * _2557;
            float _2844 = _2841 * _2558;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2703;
                float _2956 = _2705;
                float _2957 = _2707;
                float _2958 = _2709;
                float _2959 = _2711;
                float _2960 = _2713;
                uint _2961 = _2720;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2971)
                    {
                        frontier_phi_67_pred = _2958;
                        frontier_phi_67_pred_1 = _2959;
                        frontier_phi_67_pred_2 = _2960;
                        frontier_phi_67_pred_3 = _2957;
                        frontier_phi_67_pred_4 = _2956;
                        frontier_phi_67_pred_5 = _2955;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        uint _3174 = _2970;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2558, _3292.z, fma(_2557, _3292.y, _3292.x * _2556)) + _3292.w;
                            _3305 = !((fma(_2558, _3273.z, fma(_2557, _3273.y, _3273.x * _2556)) + _3273.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2556;
                                float _3333 = _3200.y - _2557;
                                float _3334 = _3200.z - _2558;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4425 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_800, _803, _806))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2558, _3243.z, fma(_2557, _3243.y, _3243.x * _2556)) + _3243.w) / _3304;
                                float _3364 = (fma(_2558, _3258.z, fma(_2557, _3258.y, _3258.x * _2556)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4441 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _875;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3395 = _3341 - _2844;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_800, _803, _806), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4452 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3407 = dot(vec3(_800, _803, _806), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4463 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_800, _803, _806), vec3(_3339, _3340, _3341))) + _3416;
                                float _4474 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4485 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3444 * _3228.x;
                                frontier_phi_73_pred_1 = _3444 * _3228.y;
                                frontier_phi_73_pred_2 = _3370 * _3216.z;
                                frontier_phi_73_pred_3 = _3370 * _3216.y;
                                frontier_phi_73_pred_4 = _3370 * _3216.x;
                                frontier_phi_73_pred_5 = _3444 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_73_pred;
                            _3449 = frontier_phi_73_pred_1;
                            _3453 = frontier_phi_73_pred_2;
                            _3452 = frontier_phi_73_pred_3;
                            _3451 = frontier_phi_73_pred_4;
                            _3450 = frontier_phi_73_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    _2823 = frontier_phi_67_pred;
                    _2825 = frontier_phi_67_pred_1;
                    _2827 = frontier_phi_67_pred_2;
                    _2821 = frontier_phi_67_pred_3;
                    _2819 = frontier_phi_67_pred_4;
                    _2817 = frontier_phi_67_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2825;
                frontier_phi_55_56_ladder_1 = _2827;
                frontier_phi_55_56_ladder_2 = _2823;
                frontier_phi_55_56_ladder_3 = _2821;
                frontier_phi_55_56_ladder_4 = _2819;
                frontier_phi_55_56_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            _2816 = frontier_phi_55_56_ladder_5;
            _2818 = frontier_phi_55_56_ladder_4;
            _2820 = frontier_phi_55_56_ladder_3;
            _2822 = frontier_phi_55_56_ladder_2;
            _2824 = frontier_phi_55_56_ladder;
            _2826 = frontier_phi_55_56_ladder_1;
        }
        float _2831 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2615 = (_2831 * _2822) + _2048;
        _2617 = (_2831 * _2824) + _2050;
        _2619 = (_2831 * _2826) + _2052;
        _2621 = ((_2816 * _843) * _2831) + _2396;
        _2623 = ((_2818 * _845) * _2831) + _2398;
        _2625 = ((_2820 * _846) * _2831) + _2400;
    }
    else
    {
        _2615 = _2048;
        _2617 = _2050;
        _2619 = _2052;
        _2621 = _2396;
        _2623 = _2398;
        _2625 = _2400;
    }
    float _4501 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4512 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4523 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    uint _2645 = _242 + 6u;
    float _2653 = _781 / cbSceneParam._m0[86u].x;
    float _2654 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2729 = _2728 / _715;
        float _2740 = _2729 * _766;
        float _2741 = _767 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _768;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2673);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2772 = _2928 * _2673;
    }
    else
    {
        _2766 = _2670;
        _2768 = _2671;
        _2770 = _2672;
        _2772 = _2673;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2615 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _859))) + ((_2621 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2617 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _859))) + ((_2623 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2619 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _859))) + ((_2625 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2645].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
}


