#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1393;
float _3798;
float _3799;
float _3800;
float _3801;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].y) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3810 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _408 = (_401 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _409 = (_401 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _410 = (_401 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].y) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3821 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _546 = ((_518.x - _537) * _401) + _537;
    float _547 = ((_518.y - _538) * _401) + _538;
    float _548 = ((_518.z - _539) * _401) + _539;
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _573 = ((_560.z - _548) * _474) + _548;
    float _576 = ((((_560.x - _546) * _474) + _546) * 2.0) + (-1.0);
    float _577 = ((((_560.y - _547) * _474) + _547) * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _3832 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)))) + (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _616 = (_577 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)))) + (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _659 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_630 - _631) * cbMtdParam._m0[24u].w) + _631) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3843 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _668 = ((((cbMtdParam._m0[10u].x - _481) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _660) + _481;
    float _669 = ((((cbMtdParam._m0[10u].y - _482) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _660) + _482;
    float _670 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _483)) * _660) + _483;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _698 = _696.x;
    float _716 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _698) * _401) + _698;
    float _734 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _716) * _474) + _716;
    float _738 = ((_682.x - _734) * cbMtdParam._m0[19u].z) + _734;
    float _740 = _738 - (_738 * _660);
    float _745 = (((_495.z - _573) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _573;
    float _749 = ((_603.z - _745) * cbMtdParam._m0[19u].w) + _745;
    float _753 = ((cbMtdParam._m0[23u].y - _749) * _660) + _749;
    vec4 _772 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _778 = (_772.x * 2.0) + (-1.0);
    float _779 = (_772.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _3854 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _796 = (_660 * (((cbMtdParam._m0[22u].z * _615) - _615) + _778)) + _615;
    float _797 = (_660 * (((cbMtdParam._m0[22u].z * _616) - _616) + _779)) + _616;
    float _798 = (_660 * (sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) - _583)) + _583;
    float _800 = cbMtdParam._m0[22u].x + _603.w;
    float _803 = fma(_798, _250 * NORMAL.x, fma(_797, _257 * TANGENT.x, (_243 * _235) * _796));
    float _806 = fma(_798, _250 * NORMAL.y, fma(_797, _257 * TANGENT.y, (_243 * _236) * _796));
    float _809 = fma(_798, _250 * NORMAL.z, fma(_797, _257 * TANGENT.z, (_243 * _237) * _796));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _3865 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _817 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3887 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3898 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3909 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3920 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _822 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _836 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _886 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _876);
    float _887 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _876);
    float _888 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _876);
    float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
    float _893 = _886 * _892;
    float _894 = _887 * _892;
    float _895 = _888 * _892;
    vec4 _900 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _902 = _900.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1074 = sqrt(((_886 * _886) + (_887 * _887)) + (_888 * _888));
        float _1080 = (cbMatDynParam._m0[5u].x * _1074) + cbMatDynParam._m0[5u].y;
        float _3931 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1085 = (cbMatDynParam._m0[5u].z * _1074) + cbMatDynParam._m0[5u].w;
        float _3942 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) - _1081)) + _1081) < ((_902 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _913 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _914 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _932 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _935 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _938 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _951 = _263 + 9u;
    uint _952 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_952].z;
    float _3953 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _964 = 1.0 - _822;
    float _965 = _961 * _964;
    float _966 = _962 * _964;
    float _967 = _963 * _964;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _822;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _822;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _822;
    float _975 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    float _978 = _974 + 0.039999999105930328369140625;
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _913, cbSceneParam._m0[86u].y * _914));
    float _991 = ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * TEXCOORD_5.w) * _987.x;
    float _992 = dot(vec3(_814, _815, _816), vec3(_893, _894, _895));
    float _995 = _992 * 2.0;
    float _999 = (_995 * _814) - _893;
    float _1000 = (_995 * _815) - _894;
    float _1001 = (_995 * _816) - _895;
    float _1005 = abs(dot(vec3(_893, _894, _895), vec3(_814, _815, _816)));
    float _3986 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1007 = sqrt(_817);
    float _1020 = exp2((_1007 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1007 * 3.0));
    float _1026 = (1.0 - _1020) * ((_1007 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1027 = _1020 * _1007;
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1121 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1125 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1150 = _1055 + _814;
        float _1151 = _1059 + _815;
        float _1152 = _1063 + _816;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_814, _815, _816), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4034 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_814, _815, _816), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4067 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_814, _815, _816), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4100 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1438 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1442 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1465 = _1055 + _814;
        float _1466 = _1059 + _815;
        float _1467 = _1063 + _816;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_814, _815, _816), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4163 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_814, _815, _816), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4196 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_814, _815, _816), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4229 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1393;
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = _1393;
        _1713 = _1393;
        _1714 = _1393;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1405)) + _1405;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1406)) + _1406;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1407)) + _1407;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _999 * 0.5;
    float _1772 = _1000 * 0.5;
    float _1773 = _1001 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1001, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999));
        float _1903 = fma(_1001, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999));
        float _1906 = fma(_1001, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1934 = frontier_phi_17_15_ladder;
        }
        float _2158;
        if (_1903 > 0.0)
        {
            _2158 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2158 = frontier_phi_26_22_ladder;
        }
        float _2415;
        if (_1906 > 0.0)
        {
            _2415 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2415 = frontier_phi_38_33_ladder;
        }
        float _2417 = isnan(_2158) ? _1934 : (isnan(_1934) ? _2158 : min(_1934, _2158));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1900) + _1889;
        float _2423 = (_2418 * _1903) + _1893;
        float _2424 = (_2418 * _1906) + _1897;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_16_38_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_16_38_ladder_2;
        _1924 = frontier_phi_16_38_ladder_1;
        _1926 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_999, _1000, _1001), _1840);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1001, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999));
        float _1999 = fma(_1001, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999));
        float _2002 = fma(_1001, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999));
        float _2163;
        if (_1996 > 0.0)
        {
            _2163 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2442;
        if (_1999 > 0.0)
        {
            _2442 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2442 = frontier_phi_40_35_ladder;
        }
        float _2655;
        if (_2002 > 0.0)
        {
            _2655 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2655 = frontier_phi_49_46_ladder;
        }
        float _2657 = isnan(_2442) ? _2163 : (isnan(_2163) ? _2442 : min(_2163, _2442));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1996) + _1985;
        float _2663 = (_2658 * _1999) + _1989;
        float _2664 = (_2658 * _2002) + _1993;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_25_49_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_25_49_ladder_2;
        _2023 = frontier_phi_25_49_ladder_1;
        _2025 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_999, _1000, _1001), _1931);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1026 * _975) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2040 = (((_1026 * _977) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2042 = (((_1026 * _978) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    vec4 _2059 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_913, _914));
    float _2061 = _2059.w;
    float _2073 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2061);
    float _2074 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2061);
    float _2075 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2061);
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _991 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2117 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2121 = _2081 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_814, _815, _816));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_814, _815, _816));
    float _4365 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4376 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2098].x * _2104) * _2142) + (((cbLight._m0[_2108].x * _2073) * _2117) * _2140);
    float _2150 = ((_2104 * cbLight._m0[_2098].y) * _2142) + (((cbLight._m0[_2108].y * _2074) * _2117) * _2140);
    float _2151 = ((_2104 * cbLight._m0[_2098].z) * _2142) + (((cbLight._m0[_2108].z * _2075) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2081 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4387 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2195 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2386 = _2081 + 7u;
        float _2402 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4403 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2405 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2213 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2168;
        _2215 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2170;
        _2217 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2172;
    }
    uint _2220 = _2081 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _817) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2081].x + _893;
    float _2236 = cbLight._m0[_2081].y + _894;
    float _2237 = cbLight._m0[_2081].z + _895;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2081].xyz));
    float _4419 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _4430 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2249 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2250 = dot(vec3(_814, _815, _816), vec3(_2242, _2243, _2244));
    float _4441 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2242, _2243, _2244));
    float _4452 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _972;
    float _2273 = 0.959999978542327880859375 - _973;
    float _2274 = 0.959999978542327880859375 - _974;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4463 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2308 = _2081 + 9u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _817) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2121].x + _893;
    float _2322 = cbLight._m0[_2121].y + _894;
    float _2323 = cbLight._m0[_2121].z + _895;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2121].xyz));
    float _4474 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2335 = dot(vec3(_814, _815, _816), vec3(_2328, _2329, _2330));
    float _4485 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2328, _2329, _2330));
    float _4496 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2320 * _2320;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
    float _2361 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2249 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2361) + _2320) * _2334))) * _2334;
    float _4507 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    float _2383 = (((((_2354 * _2271) + _975) * cbLight._m0[_2308].x) * _2373) * _2104) + ((((cbLight._m0[_2220].x * _2073) * ((_2270 * _2271) + _975)) * _2294) * _2117);
    float _2384 = (((((_2354 * _2273) + _977) * cbLight._m0[_2308].y) * _2373) * _2104) + ((((cbLight._m0[_2220].y * _2074) * ((_2270 * _2273) + _977)) * _2294) * _2117);
    float _2385 = (((((_2354 * _2274) + _978) * cbLight._m0[_2308].z) * _2373) * _2104) + ((((cbLight._m0[_2220].z * _2075) * ((_2270 * _2274) + _978)) * _2294) * _2117);
    float _2447;
    float _2449;
    float _2451;
    if (_2157)
    {
        _2447 = _2383;
        _2449 = _2384;
        _2451 = _2385;
    }
    else
    {
        uint _2453 = _2081 + 2u;
        uint _2457 = _2081 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _817) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _893;
        float _2474 = cbLight._m0[_2453].y + _894;
        float _2475 = cbLight._m0[_2453].z + _895;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2453].xyz));
        float _4518 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2487 = dot(vec3(_814, _815, _816), vec3(_2480, _2481, _2482));
        float _4529 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4540 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
        float _2513 = 1.0 - _2472;
        float _2523 = (0.5 / (((_2249 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2513) + _2472) * _2486))) * _2486;
        float _4551 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2447 = (((((_2506 * _2271) + _975) * cbLight._m0[_2457].x) * _2525) * _2526) + _2383;
        _2449 = (((((_2506 * _2273) + _977) * cbLight._m0[_2457].y) * _2525) * _2526) + _2384;
        _2451 = (((((_2506 * _2274) + _978) * cbLight._m0[_2457].z) * _2525) * _2526) + _2385;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2175)
    {
        _2561 = _2447;
        _2563 = _2449;
        _2565 = _2451;
    }
    else
    {
        uint _2572 = _2081 + 3u;
        uint _2576 = _2081 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _817) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _893;
        float _2593 = cbLight._m0[_2572].y + _894;
        float _2594 = cbLight._m0[_2572].z + _895;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2572].xyz));
        float _4567 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2606 = dot(vec3(_814, _815, _816), vec3(_2599, _2600, _2601));
        float _4578 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4589 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2632 = 1.0 - _2591;
        float _2642 = (0.5 / (((_2249 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2632) + _2591) * _2605))) * _2605;
        float _4600 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2561 = (((((_2625 * _2271) + _975) * cbLight._m0[_2576].x) * _2644) * _2645) + _2447;
        _2563 = (((((_2625 * _2273) + _977) * cbLight._m0[_2576].y) * _2644) * _2645) + _2449;
        _2565 = (((((_2625 * _2274) + _978) * cbLight._m0[_2576].z) * _2644) * _2645) + _2451;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2079.y == 0u)
    {
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2720;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2720;
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2720;
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _914) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _913) / _2736)));
        float _2757 = (log2(_2723 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
        }
        else
        {
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            uint _3027 = 0u;
            uint _3036;
            bool _3037;
            for (;;)
            {
                _3036 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                _3037 = _3036 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3037)
                {
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3036;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3027 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2721;
                        float _3233 = _3192.y - _2722;
                        float _3234 = _3192.z - _2723;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_932, _935, _938), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4626 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2721;
                        float _3268 = (-0.0) - _2722;
                        float _3269 = (-0.0) - _2723;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _1007;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_932, _935, _938), vec3(_3274, _3275, _3276));
                        float _4642 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3309 = dot(vec3(_932, _935, _938), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4653 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4664 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4675 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3096 = (_3263 * _3211.x) + _3169;
                        _3097 = (_3263 * _3211.y) + _3170;
                        _3098 = (_3263 * _3211.z) + _3171;
                        _3093 = (_3344 * _3228.x) + _3166;
                        _3094 = (_3344 * _3228.y) + _3167;
                        _3095 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3098;
                    frontier_phi_66_pred_2 = _3097;
                    frontier_phi_66_pred_3 = _3096;
                    frontier_phi_66_pred_4 = _3095;
                    frontier_phi_66_pred_5 = _3094;
                }
                _2869 = frontier_phi_66_pred;
                _2879 = frontier_phi_66_pred_1;
                _2877 = frontier_phi_66_pred_2;
                _2875 = frontier_phi_66_pred_3;
                _2873 = frontier_phi_66_pred_4;
                _2871 = frontier_phi_66_pred_5;
                uint _3028 = _3027 + 1u;
                if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3021 = _2869;
                    _3022 = _2871;
                    _3023 = _2873;
                    _3024 = _2875;
                    _3025 = _2877;
                    _3026 = _2879;
                    _3027 = _3028;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
        }
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.z;
        uint _2885 = (_2883 >> 8u) & 15u;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((4294967295u << _2885) & _2767) == 0u)
        {
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
        }
        else
        {
            float _3014 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
            float _3015 = _3014 * _2721;
            float _3016 = _3014 * _2722;
            float _3017 = _3014 * _2723;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2885 < ((_2883 >> 12u) & 15u))
            {
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3149 = _2868;
                float _3150 = _2870;
                float _3151 = _2872;
                float _3152 = _2874;
                float _3153 = _2876;
                float _3154 = _2878;
                uint _3155 = _2885;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3165)
                    {
                        frontier_phi_77_pred = _3154;
                        frontier_phi_77_pred_1 = _3153;
                        frontier_phi_77_pred_2 = _3152;
                        frontier_phi_77_pred_3 = _3151;
                        frontier_phi_77_pred_4 = _3150;
                        frontier_phi_77_pred_5 = _3149;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        uint _3377 = _3164;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3388 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3388 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3388 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_2723, _3495.z, fma(_2722, _3495.y, _3495.x * _2721)) + _3495.w;
                            _3508 = !((fma(_2723, _3476.z, fma(_2722, _3476.y, _3476.x * _2721)) + _3476.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3403.x - _2721;
                                float _3536 = _3403.y - _2722;
                                float _3537 = _3403.z - _2723;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3404 * _3404));
                                float _4686 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3553 = sqrt(_3538) * _3419.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_932, _935, _938))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_2723, _3446.z, fma(_2722, _3446.y, _3446.x * _2721)) + _3446.w) / _3507;
                                float _3567 = (fma(_2723, _3461.z, fma(_2722, _3461.y, _3461.x * _2721)) + _3461.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4702 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _1007;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3015;
                                float _3597 = _3543 - _3016;
                                float _3598 = _3544 - _3017;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_932, _935, _938), vec3((-0.0) - _3015, (-0.0) - _3016, (-0.0) - _3017));
                                float _4713 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3610 = dot(vec3(_932, _935, _938), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4724 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_932, _935, _938), vec3(_3542, _3543, _3544))) + _3619;
                                float _4735 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4746 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3573 * _3419.y;
                                frontier_phi_83_pred_1 = _3573 * _3419.x;
                                frontier_phi_83_pred_2 = _3647 * _3431.z;
                                frontier_phi_83_pred_3 = _3647 * _3431.y;
                                frontier_phi_83_pred_4 = _3647 * _3431.x;
                                frontier_phi_83_pred_5 = _3573 * _3419.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3655 = frontier_phi_83_pred;
                            _3654 = frontier_phi_83_pred_1;
                            _3653 = frontier_phi_83_pred_2;
                            _3652 = frontier_phi_83_pred_3;
                            _3651 = frontier_phi_83_pred_4;
                            _3656 = frontier_phi_83_pred_5;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3363;
                        frontier_phi_77_pred_1 = _3362;
                        frontier_phi_77_pred_2 = _3361;
                        frontier_phi_77_pred_3 = _3360;
                        frontier_phi_77_pred_4 = _3359;
                        frontier_phi_77_pred_5 = _3358;
                    }
                    _3000 = frontier_phi_77_pred;
                    _2998 = frontier_phi_77_pred_1;
                    _2996 = frontier_phi_77_pred_2;
                    _2994 = frontier_phi_77_pred_3;
                    _2992 = frontier_phi_77_pred_4;
                    _2990 = frontier_phi_77_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _2990;
                        _3150 = _2992;
                        _3151 = _2994;
                        _3152 = _2996;
                        _3153 = _2998;
                        _3154 = _3000;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2994;
                frontier_phi_58_59_ladder_1 = _3000;
                frontier_phi_58_59_ladder_2 = _2998;
                frontier_phi_58_59_ladder_3 = _2996;
                frontier_phi_58_59_ladder_4 = _2992;
                frontier_phi_58_59_ladder_5 = _2990;
            }
            else
            {
                frontier_phi_58_59_ladder = _2872;
                frontier_phi_58_59_ladder_1 = _2878;
                frontier_phi_58_59_ladder_2 = _2876;
                frontier_phi_58_59_ladder_3 = _2874;
                frontier_phi_58_59_ladder_4 = _2870;
                frontier_phi_58_59_ladder_5 = _2868;
            }
            _2989 = frontier_phi_58_59_ladder_5;
            _2991 = frontier_phi_58_59_ladder_4;
            _2993 = frontier_phi_58_59_ladder;
            _2995 = frontier_phi_58_59_ladder_3;
            _2997 = frontier_phi_58_59_ladder_2;
            _2999 = frontier_phi_58_59_ladder_1;
        }
        float _3004 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
        _2780 = (_3004 * _2995) + _2213;
        _2782 = (_3004 * _2997) + _2215;
        _2784 = (_3004 * _2999) + _2217;
        _2786 = ((_2989 * _975) * _3004) + _2561;
        _2788 = ((_2991 * _977) * _3004) + _2563;
        _2790 = ((_2993 * _978) * _3004) + _2565;
    }
    else
    {
        _2780 = _2213;
        _2782 = _2215;
        _2784 = _2217;
        _2786 = _2561;
        _2788 = _2563;
        _2790 = _2565;
    }
    float _4762 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4773 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4784 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2807 = ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2780 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _991))) + ((_2786 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2782 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _991))) + ((_2788 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2784 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _991))) + ((_2790 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    uint _2810 = _263 + 6u;
    float _2818 = _913 / cbSceneParam._m0[86u].x;
    float _2819 = _914 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _836 : (isnan(_836) ? cbSceneParam._m0[77u].w : min(_836, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_836 > cbSceneParam._m0[78u].w)
    {
        float _2893 = isnan(_836) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _836 : min(cbSceneParam._m0[80u].w, _836));
        float _2894 = _2893 / _836;
        float _2905 = _2894 * _886;
        float _2906 = _887 * _2894;
        float _2907 = (-0.0) - _2906;
        float _2909 = _2894 * _888;
        float _2911 = (cbSceneParam._m0[77u].w * _2907) / _2893;
        float _2912 = _2911 + cbSceneParam._m0[79u].w;
        float _2913 = cbSceneParam._m0[79u].w - _2906;
        float _2919 = sqrt(((_2905 * _2905) + (_2906 * _2906)) + (_2909 * _2909));
        float _2922 = (1.0 - (cbSceneParam._m0[77u].w / _2893)) * _2919;
        float _2927 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2929 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3106;
        if (abs((_2907 - _2911) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3106 = ((((_2912 > 0.0) ? exp2(_2927 * _2912) : (2.0 - exp2(_2929 * _2912))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2922;
        }
        else
        {
            float _3050 = 1.0 / cbSceneParam._m0[80u].x;
            float _3051 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : max(_2912, _2913));
            float _3052 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : min(_2912, _2913));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            _3106 = ((abs(_2919 / _2907) * cbSceneParam._m0[80u].y) * ((((_3061 - _3062) * 2.0) - ((exp2(_2927 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0)))) - exp2(_2927 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))))) * _3050)) - ((exp2(_2929 * _3061) - exp2(_2929 * _3062)) * _3050))) + (_2922 * cbSceneParam._m0[80u].z);
        }
        vec4 _3108 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3117 = exp2((_3106 * (-1.44269502162933349609375)) * (1.0 - _3108.w));
        float _3118 = log2(_3117);
        float _3134 = log2(_2838);
        _2931 = (exp2(_3134 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].x)) * _3108.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2933 = (exp2(_3134 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].y)) * _3108.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2935 = (exp2(_3134 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].z)) * _3108.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2937 = _3117 * _2838;
    }
    else
    {
        _2931 = _2835;
        _2933 = _2836;
        _2935 = _2837;
        _2937 = _2838;
    }
    bool _3144;
    vec4 _2947;
    vec4 _2969;
    float _2971;
    float _2975;
    float _2976;
    float _2977;
    float _2978;
    bool _2988;
    for (;;)
    {
        _2947 = cbMatDynParam._m0[0u];
        float _2949 = roundEven(_2947.y);
        bool _2950 = _2949 == 3.0;
        float _2951 = log2(_2937);
        float _2958 = exp2(_2951 * cbSceneParam._m0[78u].x) * _2807;
        float _2959 = exp2(_2951 * cbSceneParam._m0[78u].y) * _2808;
        float _2960 = exp2(_2951 * cbSceneParam._m0[78u].z) * _2809;
        float _2967 = _902 + (-0.5);
        _2969 = cbMtdParam._m0[1u];
        _2971 = _2969.y * _2967;
        float _2974 = (_2949 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2975 = _2974 * (_2950 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2931)));
        _2976 = _2974 * (_2950 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2933)));
        _2977 = _2974 * (_2950 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2935)));
        _2978 = _2967 * 0.999000012874603271484375;
        _2988 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2988)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _2978) < 0.5)
            {
                _3144 = true;
                break;
            }
        }
        uint _3085 = _951 + uint(_2947.w);
        if ((cbInstanceData._m0[_3085].w < 1.0) && ((cbInstanceData._m0[_3085].w + _2978) < 0.5))
        {
            _3144 = true;
            break;
        }
        if ((_2971 + 1.0) < _2969.x)
        {
            _3144 = true;
            break;
        }
        _3144 = false;
        break;
    }
    float _3349;
    if (_3144)
    {
        discard_state = true;
        _3349 = 0.0;
    }
    else
    {
        _3349 = cbInstanceData._m0[_2810].w;
    }
    SV_Target.x = _2975;
    SV_Target.y = _2976;
    SV_Target.z = _2977;
    SV_Target.w = _3349;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
    discard_exit();
}


