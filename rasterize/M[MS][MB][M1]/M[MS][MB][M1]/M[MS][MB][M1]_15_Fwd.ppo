#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1071;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3400 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3411 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3422 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) + _325;
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3433 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _435 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_418 - _419) * cbMtdParam._m0[24u].z) + _419) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3444 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _443 = (_436 * (cbMtdParam._m0[17u].x - _332)) + _332;
    float _444 = (_436 * (cbMtdParam._m0[17u].y - _333)) + _333;
    float _445 = (_436 * (cbMtdParam._m0[17u].z - _334)) + _334;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _460 = _458.x;
    float _462 = _460 - (_460 * _436);
    float _467 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _487 = (_480.x * 2.0) + (-1.0);
    float _488 = (_480.y * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3455 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _497 = (_436 * (_480.z - _467)) + _467;
    float _509 = (((_487 - _398) + (cbMtdParam._m0[21u].x * _398)) * _436) + _398;
    float _510 = (((_488 - _399) + (cbMtdParam._m0[21u].x * _399)) * _436) + _399;
    float _511 = (_436 * (sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) - _393)) + _393;
    float _513 = cbMtdParam._m0[22u].x + _378.w;
    float _516 = fma(_511, _218 * NORMAL.x, fma(_510, _225 * TANGENT.x, (_211 * _203) * _509));
    float _519 = fma(_511, _218 * NORMAL.y, fma(_510, _225 * TANGENT.y, (_211 * _204) * _509));
    float _522 = fma(_511, _218 * NORMAL.z, fma(_510, _225 * TANGENT.z, (_211 * _205) * _509));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _527 = _526 * _516;
    float _528 = _526 * _519;
    float _529 = _526 * _522;
    float _3466 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _530 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3488 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3499 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3510 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3521 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _535 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _600 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _590);
    float _601 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _590);
    float _602 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _590);
    float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
    float _607 = _600 * _606;
    float _608 = _601 * _606;
    float _609 = _602 * _606;
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_529, cbSceneParam._m0[5u].z, fma(_528, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _527));
    float _640 = fma(_529, cbSceneParam._m0[6u].z, fma(_528, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _527));
    float _643 = fma(_529, cbSceneParam._m0[7u].z, fma(_528, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _527));
    uint _657 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3532 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _669 = 1.0 - _535;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _535;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _535;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _535;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _696 = ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * TEXCOORD_5.w) * _692.x;
    float _697 = dot(vec3(_527, _528, _529), vec3(_607, _608, _609));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _527) - _607;
    float _705 = (_700 * _528) - _608;
    float _706 = (_700 * _529) - _609;
    float _710 = abs(dot(vec3(_607, _608, _609), vec3(_527, _528, _529)));
    float _3565 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_530);
    float _725 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _731 = (1.0 - _725) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _732 = _725 * _712;
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_768, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760));
        float _799 = fma(_768, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760));
        float _803 = fma(_768, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760));
        float _828 = _760 + _527;
        float _829 = _764 + _528;
        float _830 = _768 + _529;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _795;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _799;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _803;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_527, _528, _529), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3613 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_527, _528, _529), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3646 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_527, _528, _529), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3679 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_768, cbModelParam._m0[30u].z, fma(_764, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760));
        float _1114 = fma(_768, cbModelParam._m0[31u].z, fma(_764, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760));
        float _1118 = fma(_768, cbModelParam._m0[32u].z, fma(_764, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760));
        float _1141 = _760 + _527;
        float _1142 = _764 + _528;
        float _1143 = _768 + _529;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_527, _528, _529), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3742 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_527, _528, _529), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3775 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_527, _528, _529), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3808 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1071;
        _1380 = _1071;
        _1381 = _1071;
        _1382 = _1071;
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1083)) + _1083;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1084)) + _1084;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _704 * 0.5;
    float _1448 = _705 * 0.5;
    float _1449 = _706 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _530);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_768, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_768, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_768, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1578 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1581 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1609 = frontier_phi_14_12_ladder;
        }
        float _1814;
        if (_1578 > 0.0)
        {
            _1814 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1814 = frontier_phi_23_19_ladder;
        }
        float _2068;
        if (_1581 > 0.0)
        {
            _2068 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2068 = frontier_phi_35_30_ladder;
        }
        float _2070 = isnan(_1814) ? _1609 : (isnan(_1609) ? _1814 : min(_1609, _1814));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1575) + _1564;
        float _2076 = (_2071 * _1578) + _1568;
        float _2077 = (_2071 * _1581) + _1572;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2080 = (-1.0) - _2078;
        float _2082 = _2078 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2077 > _2082) || ((_2077 < _2080) || ((_2076 > _2082) || ((_2076 < _2080) || ((_2075 < _2080) || (_2075 > _2082))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2205 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2077, cbModelParam._m0[9u].z, fma(_2076, cbModelParam._m0[9u].y, _2075 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2077, cbModelParam._m0[10u].z, fma(_2076, cbModelParam._m0[10u].y, _2075 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2077, cbModelParam._m0[11u].z, fma(_2076, cbModelParam._m0[11u].y, _2075 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_13_35_ladder = _2205.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2205.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2205.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_13_35_ladder_2;
        _1599 = frontier_phi_13_35_ladder_1;
        _1601 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1516);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _530);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_768, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_768, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_768, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1675 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1678 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1819;
        if (_1672 > 0.0)
        {
            _1819 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2095;
        if (_1675 > 0.0)
        {
            _2095 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2095 = frontier_phi_37_32_ladder;
        }
        float _2308;
        if (_1678 > 0.0)
        {
            _2308 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2308 = frontier_phi_46_43_ladder;
        }
        float _2310 = isnan(_2095) ? _1819 : (isnan(_1819) ? _2095 : min(_1819, _2095));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1672) + _1661;
        float _2316 = (_2311 * _1675) + _1665;
        float _2317 = (_2311 * _1678) + _1669;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2317, cbModelParam._m0[17u].z, fma(_2316, cbModelParam._m0[17u].y, _2315 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2317, cbModelParam._m0[18u].z, fma(_2316, cbModelParam._m0[18u].y, _2315 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2317, cbModelParam._m0[19u].z, fma(_2316, cbModelParam._m0[19u].y, _2315 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_22_46_ladder = _2516.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2516.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2516.x * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_22_46_ladder_2;
        _1699 = frontier_phi_22_46_ladder_1;
        _1701 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1606);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1714 = (((_731 * _680) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1716 = (((_731 * _682) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_731 * _683) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1747 = _696 + (-1.0);
    float _1752 = (cbLight._m0[_1740].x * _1747) + 1.0;
    float _1753 = (cbLight._m0[_1740].y * _1747) + 1.0;
    float _1754 = (cbLight._m0[_1740].z * _1747) + 1.0;
    float _1755 = (cbLight._m0[_1740].w * _1747) + 1.0;
    uint _1756 = _1739 + 5u;
    float _1762 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1766 = _1739 + 4u;
    float _1773 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1777 = _1739 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_527, _528, _529));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_527, _528, _529));
    float _3944 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3955 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1756].x * _1762) * _1798) + ((cbLight._m0[_1766].x * _1773) * _1796);
    float _1806 = ((_1762 * cbLight._m0[_1756].y) * _1798) + ((_1773 * cbLight._m0[_1766].y) * _1796);
    float _1807 = ((_1762 * cbLight._m0[_1756].z) * _1798) + ((_1773 * cbLight._m0[_1766].z) * _1796);
    uvec4 _1811 = floatBitsToUint(cbLight._m0[_1739 + 12u]);
    bool _1813 = _1811.x == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1813)
    {
        _1824 = _1805;
        _1826 = _1806;
        _1828 = _1807;
    }
    else
    {
        uint _1832 = _1739 + 6u;
        float _1848 = (dot(vec3(cbLight._m0[_1739 + 2u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3966 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1851 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1824 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1805;
        _1826 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1806;
        _1828 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1807;
    }
    bool _1831 = _1811.y == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1831)
    {
        _1869 = _1824;
        _1871 = _1826;
        _1873 = _1828;
    }
    else
    {
        uint _2039 = _1739 + 7u;
        float _2055 = (dot(vec3(cbLight._m0[_1739 + 3u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _3982 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2058 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1869 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1824;
        _1871 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1826;
        _1873 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1828;
    }
    uint _1876 = _1739 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _530) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1739].x + _607;
    float _1892 = cbLight._m0[_1739].y + _608;
    float _1893 = cbLight._m0[_1739].z + _609;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1739].xyz));
    float _3998 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _1905 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1906 = dot(vec3(_527, _528, _529), vec3(_1898, _1899, _1900));
    float _4020 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1898, _1899, _1900));
    float _4031 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1926 = exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0);
    float _1927 = 0.959999978542327880859375 - _677;
    float _1929 = 0.959999978542327880859375 - _678;
    float _1930 = 0.959999978542327880859375 - _679;
    float _1937 = 1.0 - _1890;
    float _1948 = (0.5 / (((_1905 * ((_1904 * _1937) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1937) + _1890) * _1904))) * _1904;
    float _4042 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1961 = _1739 + 9u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _530) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1777].x + _607;
    float _1975 = cbLight._m0[_1777].y + _608;
    float _1976 = cbLight._m0[_1777].z + _609;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1777].xyz));
    float _4053 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1988 = dot(vec3(_527, _528, _529), vec3(_1981, _1982, _1983));
    float _4064 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1981, _1982, _1983));
    float _4075 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1973 * _1973;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2007 = exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0);
    float _2014 = 1.0 - _1973;
    float _2024 = (0.5 / (((_1905 * ((_1987 * _2014) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2014) + _1973) * _1987))) * _1987;
    float _4086 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    float _2036 = (((((_2007 * _1927) + _680) * cbLight._m0[_1961].x) * _2026) * _1762) + (((((_1926 * _1927) + _680) * cbLight._m0[_1876].x) * _1950) * _1773);
    float _2037 = (((((_2007 * _1929) + _682) * cbLight._m0[_1961].y) * _2026) * _1762) + (((((_1926 * _1929) + _682) * cbLight._m0[_1876].y) * _1950) * _1773);
    float _2038 = (((((_2007 * _1930) + _683) * cbLight._m0[_1961].z) * _2026) * _1762) + (((((_1926 * _1930) + _683) * cbLight._m0[_1876].z) * _1950) * _1773);
    float _2100;
    float _2102;
    float _2104;
    if (_1813)
    {
        _2100 = _2036;
        _2102 = _2037;
        _2104 = _2038;
    }
    else
    {
        uint _2106 = _1739 + 2u;
        uint _2110 = _1739 + 10u;
        float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _530) * 0.949999988079071044921875);
        float _2125 = _2124 * _2124;
        float _2126 = cbLight._m0[_2106].x + _607;
        float _2127 = cbLight._m0[_2106].y + _608;
        float _2128 = cbLight._m0[_2106].z + _609;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2133 = _2132 * _2126;
        float _2134 = _2132 * _2127;
        float _2135 = _2132 * _2128;
        float _2136 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2106].xyz));
        float _4097 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2140 = dot(vec3(_527, _528, _529), vec3(_2133, _2134, _2135));
        float _4108 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2133, _2134, _2135));
        float _4119 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2148 = _2125 * _2125;
        float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
        float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
        float _2166 = 1.0 - _2125;
        float _2176 = (0.5 / (((_1905 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2166) + _2125) * _2139))) * _2139;
        float _4130 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2178 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
        float _2179 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2100 = (((((_2159 * _1927) + _680) * cbLight._m0[_2110].x) * _2178) * _2179) + _2036;
        _2102 = (((((_2159 * _1929) + _682) * cbLight._m0[_2110].y) * _2178) * _2179) + _2037;
        _2104 = (((((_2159 * _1930) + _683) * cbLight._m0[_2110].z) * _2178) * _2179) + _2038;
    }
    float _2214;
    float _2216;
    float _2218;
    if (_1831)
    {
        _2214 = _2100;
        _2216 = _2102;
        _2218 = _2104;
    }
    else
    {
        uint _2225 = _1739 + 3u;
        uint _2229 = _1739 + 11u;
        float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _530) * 0.949999988079071044921875);
        float _2244 = _2243 * _2243;
        float _2245 = cbLight._m0[_2225].x + _607;
        float _2246 = cbLight._m0[_2225].y + _608;
        float _2247 = cbLight._m0[_2225].z + _609;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2252 = _2251 * _2245;
        float _2253 = _2251 * _2246;
        float _2254 = _2251 * _2247;
        float _2255 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2225].xyz));
        float _4146 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2259 = dot(vec3(_527, _528, _529), vec3(_2252, _2253, _2254));
        float _4157 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2263 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2252, _2253, _2254));
        float _4168 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2267 = _2244 * _2244;
        float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
        float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
        float _2285 = 1.0 - _2244;
        float _2295 = (0.5 / (((_1905 * ((_2258 * _2285) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2285) + _2244) * _2258))) * _2258;
        float _4179 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2297 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
        float _2298 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2214 = (((((_2278 * _1927) + _680) * cbLight._m0[_2229].x) * _2297) * _2298) + _2100;
        _2216 = (((((_2278 * _1929) + _682) * cbLight._m0[_2229].y) * _2297) * _2298) + _2102;
        _2218 = (((((_2278 * _1930) + _683) * cbLight._m0[_2229].z) * _2297) * _2298) + _2104;
    }
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_1737.y == 0u)
    {
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2373;
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2373;
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2373;
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.x;
        uint _2400 = uint((float(_2388.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2389))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2389)));
        float _2410 = (log2(_2376 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2411 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        uint _2414 = uint(isnan(14.0) ? _2411 : (isnan(_2411) ? 14.0 : min(_2411, 14.0)));
        uvec4 _2419 = texelFetch(g_lightClusterGridBuffer, int(((_2414 << 2u) + (_2400 << 6u)) >> 2u));
        uint _2420 = _2419.x;
        uint _2421 = _2388.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2421 >> 4u) & 15u)) + 4294967295u) & _2420) == 0u) || ((_2421 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            uint _2672 = 0u;
            uint _2681;
            bool _2682;
            for (;;)
            {
                _2681 = texelFetch(g_lightClassification, int((((_2414 << 5u) + (_2400 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                _2682 = _2681 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2682)
                {
                    frontier_phi_61_pred = _2666;
                    frontier_phi_61_pred_1 = _2671;
                    frontier_phi_61_pred_2 = _2670;
                    frontier_phi_61_pred_3 = _2669;
                    frontier_phi_61_pred_4 = _2668;
                    frontier_phi_61_pred_5 = _2667;
                }
                else
                {
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    uint _2796;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2681;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    for (;;)
                    {
                        uint _2800 = uint(findLSB(_2796)) + (_2672 << 5u);
                        uint _2797 = (_2796 + 4294967295u) & _2796;
                        uint _2802 = _2800 * 48u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2822 = (_2800 * 48u) + 4u;
                        vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2841 = (_2800 * 48u) + 8u;
                        vec3 _2852 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x));
                        float _2856 = _2816.x - _2374;
                        float _2857 = _2816.y - _2375;
                        float _2858 = _2816.z - _2376;
                        float _2859 = dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858));
                        float _2862 = inversesqrt(_2859);
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2866 = dot(vec3(_637, _640, _643), vec3(_2863, _2864, _2865));
                        float _2871 = 1.0 - (_2859 * _2816.w);
                        float _4205 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2873 = sqrt(_2859) * _2835.w;
                        float _2876 = 1.39999997615814208984375 / (_2873 + 1.39999997615814208984375);
                        float _2877 = _2876 * _2876;
                        float _2880 = ((1.0 - _2877) * _2866) + _2877;
                        float _2883 = _2873 * _2873;
                        float _2887 = ((isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))) * _2872) / ((_2883 * 0.699999988079071044921875) + 1.0);
                        float _2891 = (-0.0) - _2374;
                        float _2892 = (-0.0) - _2375;
                        float _2893 = (-0.0) - _2376;
                        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
                        float _2898 = _2897 * _2891;
                        float _2899 = _2897 * _2892;
                        float _2900 = _2897 * _2893;
                        float _2908 = exp2(log2(1.0 / ((_2883 * 3.5) + 5.0)) * 0.25);
                        float _2909 = 1.0 - _712;
                        float _2916 = sqrt(1.0 - ((1.0 - (_2909 * _2909)) * (1.0 - (_2908 * _2908))));
                        float _2917 = _2916 * _2916;
                        float _2918 = _2917 * _2917;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2921 = _2900 + _2865;
                        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
                        float _2929 = dot(vec3(_637, _640, _643), vec3(_2898, _2899, _2900));
                        float _4221 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2933 = dot(vec3(_637, _640, _643), vec3(_2925 * _2919, _2925 * _2920, _2925 * _2921));
                        float _4232 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2940 = ((_2936 * _2936) * (_2918 + (-1.0))) + 1.0;
                        float _2941 = _2876 * _2917;
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2866) + _2942;
                        float _4243 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2946 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2947 = 1.0 - _2917;
                        float _2957 = (0.5 / (((_2946 * ((_2932 * _2947) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2946 * _2947) + _2917) * _2932))) * _2946;
                        float _4254 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2968 = (((_2918 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_2940 * _2940) * ((_2883 * 2.1991131305694580078125) + 3.141590118408203125))) * _2872;
                        _2725 = (_2887 * _2835.x) + _2793;
                        _2726 = (_2887 * _2835.y) + _2794;
                        _2727 = (_2887 * _2835.z) + _2795;
                        _2722 = (_2968 * _2852.x) + _2790;
                        _2723 = (_2968 * _2852.y) + _2791;
                        _2724 = (_2968 * _2852.z) + _2792;
                        if (_2797 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2797;
                        }
                    }
                    frontier_phi_61_pred = _2722;
                    frontier_phi_61_pred_1 = _2727;
                    frontier_phi_61_pred_2 = _2726;
                    frontier_phi_61_pred_3 = _2725;
                    frontier_phi_61_pred_4 = _2724;
                    frontier_phi_61_pred_5 = _2723;
                }
                _2522 = frontier_phi_61_pred;
                _2532 = frontier_phi_61_pred_1;
                _2530 = frontier_phi_61_pred_2;
                _2528 = frontier_phi_61_pred_3;
                _2526 = frontier_phi_61_pred_4;
                _2524 = frontier_phi_61_pred_5;
                uint _2673 = _2672 + 1u;
                if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2666 = _2522;
                    _2667 = _2524;
                    _2668 = _2526;
                    _2669 = _2528;
                    _2670 = _2530;
                    _2671 = _2532;
                    _2672 = _2673;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((4294967295u << _2538) & _2420) == 0u)
        {
            _2634 = _2521;
            _2636 = _2523;
            _2638 = _2525;
            _2640 = _2527;
            _2642 = _2529;
            _2644 = _2531;
        }
        else
        {
            float _2659 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
            float _2660 = _2659 * _2374;
            float _2661 = _2659 * _2375;
            float _2662 = _2659 * _2376;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2773 = _2521;
                float _2774 = _2523;
                float _2775 = _2525;
                float _2776 = _2527;
                float _2777 = _2529;
                float _2778 = _2531;
                uint _2779 = _2538;
                uint _2788;
                bool _2789;
                for (;;)
                {
                    _2788 = texelFetch(g_lightClassification, int((((_2414 << 5u) + (_2400 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                    _2789 = _2788 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2789)
                    {
                        frontier_phi_67_pred = _2776;
                        frontier_phi_67_pred_1 = _2777;
                        frontier_phi_67_pred_2 = _2778;
                        frontier_phi_67_pred_3 = _2775;
                        frontier_phi_67_pred_4 = _2774;
                        frontier_phi_67_pred_5 = _2773;
                    }
                    else
                    {
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        uint _2992 = _2788;
                        uint _2993;
                        vec4 _3018;
                        float _3019;
                        vec4 _3034;
                        vec3 _3046;
                        vec4 _3061;
                        vec4 _3076;
                        float _3122;
                        bool _3123;
                        for (;;)
                        {
                            uint _3003 = ((_2779 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2992));
                            _2993 = (_2992 + 4294967295u) & _2992;
                            uint _3005 = _3003 * 40u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3019 = _3018.w;
                            uint _3021 = (_3003 * 40u) + 4u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3036 = (_3003 * 40u) + 8u;
                            _3046 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x));
                            uint _3048 = (_3003 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3003 * 40u) + 20u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3003 * 40u) + 24u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3097 = (_3003 * 40u) + 28u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3122 = fma(_2376, _3110.z, fma(_2375, _3110.y, _3110.x * _2374)) + _3110.w;
                            _3123 = !((fma(_2376, _3091.z, fma(_2375, _3091.y, _3091.x * _2374)) + _3091.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3123)
                            {
                                float _3150 = _3018.x - _2374;
                                float _3151 = _3018.y - _2375;
                                float _3152 = _3018.z - _2376;
                                float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                                float _3156 = inversesqrt(_3153);
                                float _3157 = _3156 * _3150;
                                float _3158 = _3156 * _3151;
                                float _3159 = _3156 * _3152;
                                float _3163 = 1.0 - (_3153 / (_3019 * _3019));
                                float _4265 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3168 = sqrt(_3153) * _3034.w;
                                float _3170 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                                float _3171 = _3170 * _3170;
                                float _3174 = ((1.0 - _3171) * dot(vec3(_3157, _3158, _3159), vec3(_637, _640, _643))) + _3171;
                                float _3177 = _3168 * _3168;
                                float _3181 = (fma(_2376, _3061.z, fma(_2375, _3061.y, _3061.x * _2374)) + _3061.w) / _3122;
                                float _3182 = (fma(_2376, _3076.z, fma(_2375, _3076.y, _3076.x * _2374)) + _3076.w) / _3122;
                                float _3186 = 1.0 - dot(vec2(_3181, _3182), vec2(_3181, _3182));
                                float _4281 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3188 = _3187 * (((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3164) / ((_3177 * 0.699999988079071044921875) + 1.0));
                                float _3200 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                                float _3201 = 1.0 - _712;
                                float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                                float _3209 = _3208 * _3208;
                                float _3210 = _3209 * _3209;
                                float _3211 = _3157 - _2660;
                                float _3212 = _3158 - _2661;
                                float _3213 = _3159 - _2662;
                                float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                                float _3221 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2660, (-0.0) - _2661, (-0.0) - _2662));
                                float _4292 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3225 = dot(vec3(_637, _640, _643), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                                float _4303 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3228 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                                float _3233 = _3170 * _3209;
                                float _3234 = _3233 * _3233;
                                float _3240 = ((1.0 - _3234) * dot(vec3(_637, _640, _643), vec3(_3157, _3158, _3159))) + _3234;
                                float _4314 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3242 = 1.0 - _3209;
                                float _3252 = (0.5 / (((_3241 * ((_3224 * _3242) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3209) * _3224))) * _3241;
                                float _4325 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3262 = (_3187 * _3164) * (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) / ((_3232 * _3232) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3262 * _3046.x;
                                frontier_phi_73_pred_1 = _3262 * _3046.y;
                                frontier_phi_73_pred_2 = _3188 * _3034.z;
                                frontier_phi_73_pred_3 = _3188 * _3034.y;
                                frontier_phi_73_pred_4 = _3188 * _3034.x;
                                frontier_phi_73_pred_5 = _3262 * _3046.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_73_pred;
                            _3267 = frontier_phi_73_pred_1;
                            _3271 = frontier_phi_73_pred_2;
                            _3270 = frontier_phi_73_pred_3;
                            _3269 = frontier_phi_73_pred_4;
                            _3268 = frontier_phi_73_pred_5;
                            _2976 = _3269 + _2989;
                            _2977 = _3270 + _2990;
                            _2978 = _3271 + _2991;
                            _2973 = _3266 + _2986;
                            _2974 = _3267 + _2987;
                            _2975 = _3268 + _2988;
                            if (_2993 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2993;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2976;
                        frontier_phi_67_pred_1 = _2977;
                        frontier_phi_67_pred_2 = _2978;
                        frontier_phi_67_pred_3 = _2975;
                        frontier_phi_67_pred_4 = _2974;
                        frontier_phi_67_pred_5 = _2973;
                    }
                    _2641 = frontier_phi_67_pred;
                    _2643 = frontier_phi_67_pred_1;
                    _2645 = frontier_phi_67_pred_2;
                    _2639 = frontier_phi_67_pred_3;
                    _2637 = frontier_phi_67_pred_4;
                    _2635 = frontier_phi_67_pred_5;
                    uint _2780 = _2779 + 1u;
                    if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2773 = _2635;
                        _2774 = _2637;
                        _2775 = _2639;
                        _2776 = _2641;
                        _2777 = _2643;
                        _2778 = _2645;
                        _2779 = _2780;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2643;
                frontier_phi_55_56_ladder_1 = _2645;
                frontier_phi_55_56_ladder_2 = _2641;
                frontier_phi_55_56_ladder_3 = _2639;
                frontier_phi_55_56_ladder_4 = _2637;
                frontier_phi_55_56_ladder_5 = _2635;
            }
            else
            {
                frontier_phi_55_56_ladder = _2529;
                frontier_phi_55_56_ladder_1 = _2531;
                frontier_phi_55_56_ladder_2 = _2527;
                frontier_phi_55_56_ladder_3 = _2525;
                frontier_phi_55_56_ladder_4 = _2523;
                frontier_phi_55_56_ladder_5 = _2521;
            }
            _2634 = frontier_phi_55_56_ladder_5;
            _2636 = frontier_phi_55_56_ladder_4;
            _2638 = frontier_phi_55_56_ladder_3;
            _2640 = frontier_phi_55_56_ladder_2;
            _2642 = frontier_phi_55_56_ladder;
            _2644 = frontier_phi_55_56_ladder_1;
        }
        float _2649 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2433 = (_2649 * _2640) + _1869;
        _2435 = (_2649 * _2642) + _1871;
        _2437 = (_2649 * _2644) + _1873;
        _2439 = ((_2634 * _680) * _2649) + _2214;
        _2441 = ((_2636 * _682) * _2649) + _2216;
        _2443 = ((_2638 * _683) * _2649) + _2218;
    }
    else
    {
        _2433 = _1869;
        _2435 = _1871;
        _2437 = _1873;
        _2439 = _2214;
        _2441 = _2216;
        _2443 = _2218;
    }
    float _4341 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4352 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4363 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    uint _2463 = _252 + 6u;
    float _2471 = _615 / cbSceneParam._m0[86u].x;
    float _2472 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2486 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2488 = _2486.x;
    float _2489 = _2486.y;
    float _2490 = _2486.z;
    float _2491 = _2486.w;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2546 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2547 = _2546 / _549;
        float _2558 = _2547 * _600;
        float _2559 = _601 * _2547;
        float _2560 = (-0.0) - _2559;
        float _2562 = _2547 * _602;
        float _2564 = (cbSceneParam._m0[77u].w * _2560) / _2546;
        float _2565 = _2564 + cbSceneParam._m0[79u].w;
        float _2566 = cbSceneParam._m0[79u].w - _2559;
        float _2572 = sqrt(((_2558 * _2558) + (_2559 * _2559)) + (_2562 * _2562));
        float _2575 = (1.0 - (cbSceneParam._m0[77u].w / _2546)) * _2572;
        float _2580 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2582 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2735;
        if (abs((_2560 - _2564) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2735 = ((((_2565 > 0.0) ? exp2(_2580 * _2565) : (2.0 - exp2(_2582 * _2565))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2575;
        }
        else
        {
            float _2695 = 1.0 / cbSceneParam._m0[80u].x;
            float _2696 = isnan(_2566) ? _2565 : (isnan(_2565) ? _2566 : max(_2565, _2566));
            float _2697 = isnan(_2566) ? _2565 : (isnan(_2565) ? _2566 : min(_2565, _2566));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            _2735 = ((abs(_2572 / _2560) * cbSceneParam._m0[80u].y) * ((((_2706 - _2707) * 2.0) - ((exp2(_2580 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)))) - exp2(_2580 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))))) * _2695)) - ((exp2(_2582 * _2706) - exp2(_2582 * _2707)) * _2695))) + (_2575 * cbSceneParam._m0[80u].z);
        }
        vec4 _2737 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, 1.0), 0.0);
        float _2746 = exp2((_2735 * (-1.44269502162933349609375)) * (1.0 - _2737.w));
        float _2747 = log2(_2746);
        float _2763 = log2(_2491);
        _2584 = (exp2(_2763 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].x)) * _2737.x) / cbSceneParam._m0[78u].x)) + _2488;
        _2586 = (exp2(_2763 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].y)) * _2737.y) / cbSceneParam._m0[78u].y)) + _2489;
        _2588 = (exp2(_2763 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].z)) * _2737.z) / cbSceneParam._m0[78u].z)) + _2490;
        _2590 = _2746 * _2491;
    }
    else
    {
        _2584 = _2488;
        _2586 = _2489;
        _2588 = _2490;
        _2590 = _2491;
    }
    float _2602 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2603 = _2602 == 3.0;
    float _2604 = log2(_2590);
    float _2611 = exp2(_2604 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2433 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _696))) + ((_2439 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2612 = exp2(_2604 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2435 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _696))) + ((_2441 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2613 = exp2(_2604 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2437 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _696))) + ((_2443 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2622 = (_2602 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2622 * (_2603 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2584)));
    SV_Target.y = _2622 * (_2603 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.z = _2622 * (_2603 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.w = cbInstanceData._m0[_2463].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2463].w;
}


