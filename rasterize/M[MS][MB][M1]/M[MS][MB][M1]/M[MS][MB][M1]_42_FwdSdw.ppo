#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1166;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3776 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _400 = _398.x;
    float _401 = 1.0 - _400;
    float _410 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _413 = ((isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : min(_410, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _422 = (_413 - ((((((_400 - _401) * cbMtdParam._m0[24u].z) + _401) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _413))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3797 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _430 = (_423 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) + _292;
    float _431 = (_423 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) + _293;
    float _432 = (_423 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) + _294;
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _447 = _445.x;
    float _448 = 1.0 - _447;
    float _477 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_447 - _448) * cbMtdParam._m0[24u].w) + _448) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3808 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _486 = ((((cbMtdParam._m0[10u].x - _430) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _478) + _430;
    float _487 = ((((cbMtdParam._m0[10u].y - _431) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _478) + _431;
    float _488 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _432)) * _478) + _432;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _503 = _501.x;
    float _505 = _503 - (_503 * _423);
    float _507 = _505 - (_505 * _478);
    float _512 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3819 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _543 = (_423 * (_526.z - _512)) + _512;
    float _546 = ((cbMtdParam._m0[23u].y - _543) * _478) + _543;
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _574 = (_568.x * 2.0) + (-1.0);
    float _575 = (_568.y * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3830 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _593 = (((_533 - _380) + (cbMtdParam._m0[21u].x * _380)) * _423) + _380;
    float _594 = (((_534 - _381) + (cbMtdParam._m0[21u].x * _381)) * _423) + _381;
    float _595 = (_423 * (sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _375)) + _375;
    float _606 = (((_574 - _593) + (_593 * cbMtdParam._m0[22u].z)) * _478) + _593;
    float _607 = (((_575 - _594) + (_594 * cbMtdParam._m0[22u].z)) * _478) + _594;
    float _608 = ((sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) - _595) * _478) + _595;
    float _610 = cbMtdParam._m0[22u].x + _359.w;
    float _613 = fma(_608, _234 * NORMAL.x, fma(_607, _241 * TANGENT.x, (_227 * _219) * _606));
    float _616 = fma(_608, _234 * NORMAL.y, fma(_607, _241 * TANGENT.y, (_227 * _220) * _606));
    float _619 = fma(_608, _234 * NORMAL.z, fma(_607, _241 * TANGENT.z, (_227 * _221) * _606));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3841 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _627 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3863 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3874 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3885 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3896 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _632 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _696 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _686);
    float _697 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _686);
    float _698 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _686);
    float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
    float _703 = _696 * _702;
    float _704 = _697 * _702;
    float _705 = _698 * _702;
    float _711 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _712 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _736 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _739 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _753 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3907 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _765 = 1.0 - _632;
    float _766 = _762 * _765;
    float _767 = _763 * _765;
    float _768 = _764 * _765;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _632;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _632;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _632;
    float _776 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _711, cbSceneParam._m0[86u].y * _712));
    float _792 = ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * TEXCOORD_5.w) * _788.x;
    float _793 = dot(vec3(_624, _625, _626), vec3(_703, _704, _705));
    float _796 = _793 * 2.0;
    float _800 = (_796 * _624) - _703;
    float _801 = (_796 * _625) - _704;
    float _802 = (_796 * _626) - _705;
    float _806 = abs(dot(vec3(_703, _704, _705), vec3(_624, _625, _626)));
    float _3940 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = sqrt(_627);
    float _821 = exp2((_808 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_808 * 3.0));
    float _827 = (1.0 - _821) * ((_808 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _828 = _821 * _808;
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _894 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _898 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _923 = _856 + _624;
        float _924 = _860 + _625;
        float _925 = _864 + _626;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _890;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _894;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _898;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_624, _625, _626), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3988 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_624, _625, _626), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4021 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_624, _625, _626), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4054 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1209 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1213 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1236 = _856 + _624;
        float _1237 = _860 + _625;
        float _1238 = _864 + _626;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_624, _625, _626), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4117 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_624, _625, _626), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4150 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_624, _625, _626), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4183 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1166;
        _1475 = _1166;
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = _1166;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1178)) + _1178;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _800 * 0.5;
    float _1543 = _801 * 0.5;
    float _1544 = _802 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_802, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800));
        float _1672 = fma(_802, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800));
        float _1675 = fma(_802, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1703 = frontier_phi_14_12_ladder;
        }
        float _1874;
        if (_1672 > 0.0)
        {
            _1874 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1874 = frontier_phi_23_19_ladder;
        }
        float _2170;
        if (_1675 > 0.0)
        {
            _2170 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2170 = frontier_phi_35_30_ladder;
        }
        float _2172 = isnan(_1874) ? _1703 : (isnan(_1703) ? _1874 : min(_1703, _1874));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1669) + _1658;
        float _2178 = (_2173 * _1672) + _1662;
        float _2179 = (_2173 * _1675) + _1666;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_13_35_ladder = _2324.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2324.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2324.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_13_35_ladder_2;
        _1693 = frontier_phi_13_35_ladder_1;
        _1695 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_800, _801, _802), _1611);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_802, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800));
        float _1767 = fma(_802, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800));
        float _1770 = fma(_802, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800));
        float _1879;
        if (_1764 > 0.0)
        {
            _1879 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1879 = frontier_phi_25_21_ladder;
        }
        float _2197;
        if (_1767 > 0.0)
        {
            _2197 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2197 = frontier_phi_37_32_ladder;
        }
        float _2535;
        if (_1770 > 0.0)
        {
            _2535 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2535 = frontier_phi_47_44_ladder;
        }
        float _2537 = isnan(_2197) ? _1879 : (isnan(_1879) ? _2197 : min(_1879, _2197));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1764) + _1753;
        float _2543 = (_2538 * _1767) + _1757;
        float _2544 = (_2538 * _1770) + _1761;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_22_47_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_22_47_ladder_2;
        _1791 = frontier_phi_22_47_ladder_1;
        _1793 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_800, _801, _802), _1700);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1806 = (((_827 * _776) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1808 = (((_827 * _778) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_827 * _779) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1813 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1866 = _1853 / _1865;
    float _1867 = _1857 / _1865;
    float _1868 = _1861 / _1865;
    float _2015;
    float _2016;
    float _2017;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1895 = ((uint(_1868 > cbSceneParam._m0[59u].y) + uint(_1868 > cbSceneParam._m0[59u].x)) + uint(_1868 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1896 = _1895 + 43u;
        uint _1904 = _1895 + 44u;
        uint _1912 = _1895 + 45u;
        uint _1920 = _1895 + 46u;
        float _1931 = fma(_1865, cbSceneParam._m0[_1896].w, fma(_1861, cbSceneParam._m0[_1896].z, fma(_1857, cbSceneParam._m0[_1896].y, _1853 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1865, cbSceneParam._m0[_1904].w, fma(_1861, cbSceneParam._m0[_1904].z, fma(_1857, cbSceneParam._m0[_1904].y, _1853 * cbSceneParam._m0[_1904].x)));
        float _1943 = fma(_1865, cbSceneParam._m0[_1920].w, fma(_1861, cbSceneParam._m0[_1920].z, fma(_1857, cbSceneParam._m0[_1920].y, _1853 * cbSceneParam._m0[_1920].x)));
        float _1948 = cbSceneParam._m0[33u].z * _1943;
        float _1950 = cbSceneParam._m0[33u].w * _1943;
        float _1953 = fma(_1865, cbSceneParam._m0[_1912].w, fma(_1861, cbSceneParam._m0[_1912].z, fma(_1857, cbSceneParam._m0[_1912].y, _1853 * cbSceneParam._m0[_1912].x))) / _1943;
        float _2001 = (cbSceneParam._m0[33u].x - sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868))) * cbSceneParam._m0[33u].y;
        float _4309 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2008 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 + _1931) / _1943, (_1950 + _1935) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 + _1931) / _1943, (_1935 - _1948) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 - _1948) / _1943, (_1935 - _1950) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 - _1950) / _1943, (_1948 + _1935) / _1943), _1953), 0.0)).x), vec4(0.25)));
        _2015 = 1.0 - (_2008 * cbSceneParam._m0[34u].x);
        _2016 = 1.0 - (_2008 * cbSceneParam._m0[34u].y);
        _2017 = 1.0 - (_2008 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2015 = 1.0;
        _2016 = 1.0;
        _2017 = 1.0;
    }
    float _2081;
    float _2083;
    float _2085;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2069 = fma(_1865, cbSceneParam._m0[63u].w, fma(_1861, cbSceneParam._m0[63u].z, fma(_1857, cbSceneParam._m0[63u].y, _1853 * cbSceneParam._m0[63u].x)));
        float _2070 = fma(_1865, cbSceneParam._m0[60u].w, fma(_1861, cbSceneParam._m0[60u].z, fma(_1857, cbSceneParam._m0[60u].y, _1853 * cbSceneParam._m0[60u].x))) / _2069;
        float _2071 = fma(_1865, cbSceneParam._m0[61u].w, fma(_1861, cbSceneParam._m0[61u].z, fma(_1857, cbSceneParam._m0[61u].y, _1853 * cbSceneParam._m0[61u].x))) / _2069;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2070 >= cbSceneParam._m0[64u].x) && (_2071 >= cbSceneParam._m0[64u].y)) && (_2070 <= cbSceneParam._m0[64u].z)) && (_2071 <= cbSceneParam._m0[64u].w))
        {
            float _2210 = fma(_1865, cbSceneParam._m0[62u].w, fma(_1861, cbSceneParam._m0[62u].z, fma(_1857, cbSceneParam._m0[62u].y, _1853 * cbSceneParam._m0[62u].x))) / _2069;
            float _2214 = isnan(cbSceneParam._m0[41u].w) ? _2210 : (isnan(_2210) ? cbSceneParam._m0[41u].w : max(_2210, cbSceneParam._m0[41u].w));
            float _2257 = (cbSceneParam._m0[33u].x - sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868))) * cbSceneParam._m0[33u].y;
            float _4325 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
            float _2264 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2070, cbSceneParam._m0[33u].w + _2071), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2070, _2071 - cbSceneParam._m0[33u].z), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2070 - cbSceneParam._m0[33u].z, _2071 - cbSceneParam._m0[33u].w), _2214), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2070 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2071), _2214), 0.0)).x), vec4(0.25)));
            float _2268 = 1.0 - (_2264 * cbSceneParam._m0[34u].x);
            float _2269 = 1.0 - (_2264 * cbSceneParam._m0[34u].y);
            float _2270 = 1.0 - (_2264 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2270) ? _2017 : (isnan(_2017) ? _2270 : min(_2017, _2270));
            frontier_phi_34_33_ladder_1 = isnan(_2269) ? _2016 : (isnan(_2016) ? _2269 : min(_2016, _2269));
            frontier_phi_34_33_ladder_2 = isnan(_2268) ? _2015 : (isnan(_2015) ? _2268 : min(_2015, _2268));
        }
        else
        {
            frontier_phi_34_33_ladder = _2017;
            frontier_phi_34_33_ladder_1 = _2016;
            frontier_phi_34_33_ladder_2 = _2015;
        }
        _2081 = frontier_phi_34_33_ladder_2;
        _2083 = frontier_phi_34_33_ladder_1;
        _2085 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2081 = _2015;
        _2083 = _2016;
        _2085 = _2017;
    }
    uvec4 _2090 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2092 = _2090.x * 14u;
    uint _2093 = _2092 + 13u;
    float _2100 = _792 + (-1.0);
    float _2105 = (cbLight._m0[_2093].x * _2100) + 1.0;
    float _2106 = (cbLight._m0[_2093].y * _2100) + 1.0;
    float _2107 = (cbLight._m0[_2093].z * _2100) + 1.0;
    float _2108 = (cbLight._m0[_2093].w * _2100) + 1.0;
    uint _2109 = _2092 + 5u;
    float _2115 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2119 = _2092 + 4u;
    float _2129 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2133 = _2092 | 1u;
    float _2144 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_624, _625, _626));
    float _2147 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_624, _625, _626));
    float _4361 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _4372 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2154 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2161 = ((cbLight._m0[_2109].x * _2115) * _2154) + (((cbLight._m0[_2119].x * _2081) * _2129) * _2152);
    float _2162 = ((_2115 * cbLight._m0[_2109].y) * _2154) + (((cbLight._m0[_2119].y * _2083) * _2129) * _2152);
    float _2163 = ((_2115 * cbLight._m0[_2109].z) * _2154) + (((cbLight._m0[_2119].z * _2085) * _2129) * _2152);
    uvec4 _2167 = floatBitsToUint(cbLight._m0[_2092 + 12u]);
    bool _2169 = _2167.x == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2169)
    {
        _2271 = _2161;
        _2273 = _2162;
        _2275 = _2163;
    }
    else
    {
        uint _2279 = _2092 + 6u;
        float _2295 = (dot(vec3(cbLight._m0[_2092 + 2u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4383 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2298 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2271 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2161;
        _2273 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2162;
        _2275 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2163;
    }
    bool _2278 = _2167.y == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2278)
    {
        _2333 = _2271;
        _2335 = _2273;
        _2337 = _2275;
    }
    else
    {
        uint _2506 = _2092 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2092 + 3u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4399 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2525 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2333 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2271;
        _2335 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2273;
        _2337 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2275;
    }
    uint _2340 = _2092 + 8u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _627) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2092].x + _703;
    float _2356 = cbLight._m0[_2092].y + _704;
    float _2357 = cbLight._m0[_2092].z + _705;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2092].xyz));
    float _4415 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2369 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2370 = dot(vec3(_624, _625, _626), vec3(_2362, _2363, _2364));
    float _4437 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2362, _2363, _2364));
    float _4448 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2354 * _2354;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2391 = 0.959999978542327880859375 - _773;
    float _2393 = 0.959999978542327880859375 - _774;
    float _2394 = 0.959999978542327880859375 - _775;
    float _2401 = 1.0 - _2354;
    float _2412 = (0.5 / (((_2369 * ((_2368 * _2401) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2401) + _2354) * _2368))) * _2368;
    float _4459 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    uint _2428 = _2092 + 9u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _627) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2133].x + _703;
    float _2442 = cbLight._m0[_2133].y + _704;
    float _2443 = cbLight._m0[_2133].z + _705;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2133].xyz));
    float _4470 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2455 = dot(vec3(_624, _625, _626), vec3(_2448, _2449, _2450));
    float _4481 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2448, _2449, _2450));
    float _4492 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2440 * _2440;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2481 = 1.0 - _2440;
    float _2491 = (0.5 / (((_2369 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2481) + _2440) * _2454))) * _2454;
    float _4503 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    float _2503 = (((((_2474 * _2391) + _776) * cbLight._m0[_2428].x) * _2493) * _2115) + ((((cbLight._m0[_2340].x * _2081) * ((_2390 * _2391) + _776)) * _2414) * _2129);
    float _2504 = (((((_2474 * _2393) + _778) * cbLight._m0[_2428].y) * _2493) * _2115) + ((((cbLight._m0[_2340].y * _2083) * ((_2390 * _2393) + _778)) * _2414) * _2129);
    float _2505 = (((((_2474 * _2394) + _779) * cbLight._m0[_2428].z) * _2493) * _2115) + ((((cbLight._m0[_2340].z * _2085) * ((_2390 * _2394) + _779)) * _2414) * _2129);
    float _2561;
    float _2563;
    float _2565;
    if (_2169)
    {
        _2561 = _2503;
        _2563 = _2504;
        _2565 = _2505;
    }
    else
    {
        uint _2567 = _2092 + 2u;
        uint _2571 = _2092 + 10u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _627) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _703;
        float _2588 = cbLight._m0[_2567].y + _704;
        float _2589 = cbLight._m0[_2567].z + _705;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2567].xyz));
        float _4514 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2601 = dot(vec3(_624, _625, _626), vec3(_2594, _2595, _2596));
        float _4525 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4536 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
        float _2627 = 1.0 - _2586;
        float _2637 = (0.5 / (((_2369 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2627) + _2586) * _2600))) * _2600;
        float _4547 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2561 = (((((_2620 * _2391) + _776) * cbLight._m0[_2571].x) * _2639) * _2640) + _2503;
        _2563 = (((((_2620 * _2393) + _778) * cbLight._m0[_2571].y) * _2639) * _2640) + _2504;
        _2565 = (((((_2620 * _2394) + _779) * cbLight._m0[_2571].z) * _2639) * _2640) + _2505;
    }
    float _2671;
    float _2673;
    float _2675;
    if (_2278)
    {
        _2671 = _2561;
        _2673 = _2563;
        _2675 = _2565;
    }
    else
    {
        uint _2682 = _2092 + 3u;
        uint _2686 = _2092 + 11u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _627) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _703;
        float _2703 = cbLight._m0[_2682].y + _704;
        float _2704 = cbLight._m0[_2682].z + _705;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2682].xyz));
        float _4563 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2716 = dot(vec3(_624, _625, _626), vec3(_2709, _2710, _2711));
        float _4574 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4585 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2742 = 1.0 - _2701;
        float _2752 = (0.5 / (((_2369 * ((_2715 * _2742) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2742) + _2701) * _2715))) * _2715;
        float _4596 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2754 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2755 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2671 = (((((_2735 * _2391) + _776) * cbLight._m0[_2686].x) * _2754) * _2755) + _2561;
        _2673 = (((((_2735 * _2393) + _778) * cbLight._m0[_2686].y) * _2754) * _2755) + _2563;
        _2675 = (((((_2735 * _2394) + _779) * cbLight._m0[_2686].z) * _2754) * _2755) + _2565;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2090.y == 0u)
    {
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.x;
        uint _2788 = uint((float(_2776.y) * floor(float(uint(cbSceneParam._m0[85u].y * _712) / _2777))) + floor(float(uint(cbSceneParam._m0[85u].x * _711) / _2777)));
        float _2798 = (log2(_1868 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2799 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        uint _2802 = uint(isnan(14.0) ? _2799 : (isnan(_2799) ? 14.0 : min(_2799, 14.0)));
        uvec4 _2807 = texelFetch(g_lightClusterGridBuffer, int(((_2802 << 2u) + (_2788 << 6u)) >> 2u));
        uint _2808 = _2807.x;
        uint _2809 = _2776.z;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((((1u << ((_2809 >> 4u) & 15u)) + 4294967295u) & _2808) == 0u) || ((_2809 & 240u) == 0u))
        {
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
        }
        else
        {
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3049)
                {
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3048;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3039 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _1866;
                        float _3224 = _3183.y - _1867;
                        float _3225 = _3183.z - _1868;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_733, _736, _739), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4622 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _1866;
                        float _3259 = (-0.0) - _1867;
                        float _3260 = (-0.0) - _1868;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3274 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _808;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3265 + _3230;
                        float _3286 = _3266 + _3231;
                        float _3287 = _3267 + _3232;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_733, _736, _739), vec3(_3265, _3266, _3267));
                        float _4638 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3299 = dot(vec3(_733, _736, _739), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4649 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3243 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3233) + _3308;
                        float _4660 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4671 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3306 * _3306) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3092 = (_3254 * _3202.x) + _3160;
                        _3093 = (_3254 * _3202.y) + _3161;
                        _3094 = (_3254 * _3202.z) + _3162;
                        _3089 = (_3334 * _3219.x) + _3157;
                        _3090 = (_3334 * _3219.y) + _3158;
                        _3091 = (_3334 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_66_pred = _3094;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                _2899 = frontier_phi_66_pred;
                _2897 = frontier_phi_66_pred_1;
                _2895 = frontier_phi_66_pred_2;
                _2893 = frontier_phi_66_pred_3;
                _2891 = frontier_phi_66_pred_4;
                _2889 = frontier_phi_66_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2889;
                    _3034 = _2891;
                    _3035 = _2893;
                    _3036 = _2895;
                    _3037 = _2897;
                    _3038 = _2899;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
        }
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.z;
        uint _2905 = (_2903 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2905) & _2808) == 0u)
        {
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
            float _3027 = _3026 * _1866;
            float _3028 = _3026 * _1867;
            float _3029 = _3026 * _1868;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2905 < ((_2903 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3140 = _2888;
                float _3141 = _2890;
                float _3142 = _2892;
                float _3143 = _2894;
                float _3144 = _2896;
                float _3145 = _2898;
                uint _3146 = _2905;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3156)
                    {
                        frontier_phi_72_pred = _3145;
                        frontier_phi_72_pred_1 = _3144;
                        frontier_phi_72_pred_2 = _3143;
                        frontier_phi_72_pred_3 = _3142;
                        frontier_phi_72_pred_4 = _3141;
                        frontier_phi_72_pred_5 = _3140;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3352 = _3140;
                        float _3353 = _3141;
                        float _3354 = _3142;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        uint _3358 = _3155;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3428;
                        vec4 _3443;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3369 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3415 = (_3369 * 40u) + 16u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3369 * 40u) + 20u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3369 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3369 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_1868, _3477.z, fma(_1867, _3477.y, _3477.x * _1866)) + _3477.w;
                            _3490 = !((fma(_1868, _3458.z, fma(_1867, _3458.y, _3458.x * _1866)) + _3458.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3384.x - _1866;
                                float _3518 = _3384.y - _1867;
                                float _3519 = _3384.z - _1868;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3385 * _3385));
                                float _4682 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3535 = sqrt(_3520) * _3400.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_733, _736, _739))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_1868, _3428.z, fma(_1867, _3428.y, _3428.x * _1866)) + _3428.w) / _3489;
                                float _3549 = (fma(_1868, _3443.z, fma(_1867, _3443.y, _3443.x * _1866)) + _3443.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4698 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _808;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _3027;
                                float _3579 = _3525 - _3028;
                                float _3580 = _3526 - _3029;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_733, _736, _739), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4709 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3592 = dot(vec3(_733, _736, _739), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4720 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_733, _736, _739), vec3(_3524, _3525, _3526))) + _3601;
                                float _4731 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4742 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3555 * _3400.y;
                                frontier_phi_78_pred_1 = _3555 * _3400.x;
                                frontier_phi_78_pred_2 = _3629 * _3412.z;
                                frontier_phi_78_pred_3 = _3629 * _3412.y;
                                frontier_phi_78_pred_4 = _3629 * _3412.x;
                                frontier_phi_78_pred_5 = _3555 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_78_pred;
                            _3636 = frontier_phi_78_pred_1;
                            _3635 = frontier_phi_78_pred_2;
                            _3634 = frontier_phi_78_pred_3;
                            _3633 = frontier_phi_78_pred_4;
                            _3638 = frontier_phi_78_pred_5;
                            _3342 = _3636 + _3355;
                            _3343 = _3637 + _3356;
                            _3344 = _3638 + _3357;
                            _3339 = _3633 + _3352;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3344;
                        frontier_phi_72_pred_1 = _3343;
                        frontier_phi_72_pred_2 = _3342;
                        frontier_phi_72_pred_3 = _3341;
                        frontier_phi_72_pred_4 = _3340;
                        frontier_phi_72_pred_5 = _3339;
                    }
                    _3012 = frontier_phi_72_pred;
                    _3010 = frontier_phi_72_pred_1;
                    _3008 = frontier_phi_72_pred_2;
                    _3006 = frontier_phi_72_pred_3;
                    _3004 = frontier_phi_72_pred_4;
                    _3002 = frontier_phi_72_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _3002;
                        _3141 = _3004;
                        _3142 = _3006;
                        _3143 = _3008;
                        _3144 = _3010;
                        _3145 = _3012;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3012;
                frontier_phi_60_61_ladder_1 = _3010;
                frontier_phi_60_61_ladder_2 = _3006;
                frontier_phi_60_61_ladder_3 = _3004;
                frontier_phi_60_61_ladder_4 = _3002;
                frontier_phi_60_61_ladder_5 = _3008;
            }
            else
            {
                frontier_phi_60_61_ladder = _2898;
                frontier_phi_60_61_ladder_1 = _2896;
                frontier_phi_60_61_ladder_2 = _2892;
                frontier_phi_60_61_ladder_3 = _2890;
                frontier_phi_60_61_ladder_4 = _2888;
                frontier_phi_60_61_ladder_5 = _2894;
            }
            _3001 = frontier_phi_60_61_ladder_4;
            _3003 = frontier_phi_60_61_ladder_3;
            _3005 = frontier_phi_60_61_ladder_2;
            _3007 = frontier_phi_60_61_ladder_5;
            _3009 = frontier_phi_60_61_ladder_1;
            _3011 = frontier_phi_60_61_ladder;
        }
        float _3016 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
        _2821 = (_3016 * _3007) + _2333;
        _2823 = (_3016 * _3009) + _2335;
        _2825 = (_3016 * _3011) + _2337;
        _2827 = ((_3001 * _776) * _3016) + _2671;
        _2829 = ((_3003 * _778) * _3016) + _2673;
        _2831 = ((_3005 * _779) * _3016) + _2675;
    }
    else
    {
        _2821 = _2333;
        _2823 = _2335;
        _2825 = _2337;
        _2827 = _2671;
        _2829 = _2673;
        _2831 = _2675;
    }
    float _4758 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4769 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4780 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    uint _2851 = _247 + 6u;
    float _2859 = _711 / cbSceneParam._m0[86u].x;
    float _2860 = _712 / cbSceneParam._m0[86u].y;
    vec4 _2874 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2876 = _2874.x;
    float _2877 = _2874.y;
    float _2878 = _2874.z;
    float _2879 = _2874.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2913 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2914 = _2913 / _646;
        float _2925 = _2914 * _696;
        float _2926 = _697 * _2914;
        float _2927 = (-0.0) - _2926;
        float _2929 = _2914 * _698;
        float _2931 = (cbSceneParam._m0[77u].w * _2927) / _2913;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2926;
        float _2939 = sqrt(((_2925 * _2925) + (_2926 * _2926)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2913)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2927 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3064 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3102 = ((abs(_2939 / _2927) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2949 * _3073) - exp2(_2949 * _3074)) * _3062))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2879);
        _2951 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2876;
        _2953 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2877;
        _2955 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2878;
        _2957 = _3113 * _2879;
    }
    else
    {
        _2951 = _2876;
        _2953 = _2877;
        _2955 = _2878;
        _2957 = _2879;
    }
    float _2969 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2970 = _2969 == 3.0;
    float _2971 = log2(_2957);
    float _2978 = exp2(_2971 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2821 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _792))) + ((_2827 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2979 = exp2(_2971 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2823 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _792))) + ((_2829 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2980 = exp2(_2971 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2825 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _792))) + ((_2831 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1600)) * cbPerFrame._m0[3u].x));
    float _2989 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2989 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.y = _2989 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.z = _2989 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
    SV_Target.w = cbInstanceData._m0[_2851].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2851].w;
}


