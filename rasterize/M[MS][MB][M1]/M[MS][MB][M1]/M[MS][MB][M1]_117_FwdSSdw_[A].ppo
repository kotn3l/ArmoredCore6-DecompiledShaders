#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1365;
float _3770;
float _3771;
float _3772;
float _3773;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3782 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3793 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _463 = fma(_460, _243, fma(_454, _250, _452 * _236));
    float _466 = fma(_460, _244, fma(_454, _251, _452 * _237));
    float _469 = fma(_460, _245, fma(_454, _252, _452 * _238));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _522 = ((_517 - _518) * cbMtdParam._m0[24u].z) + _518;
    float _524 = (cbMtdParam._m0[19u].x + dot(vec4(_473 * _463, _473 * _466, _473 * _469, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_522 * cbMtdParam._m0[21u].z);
    float _3804 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _527 = (-0.0) - cbMtdParam._m0[24u].x;
    float _529 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
    float _537 = _525 - ((_525 * TEXCOORD_8.x) * _530);
    float _538 = _525 - ((_525 * TEXCOORD_8.y) * _530);
    float _539 = _525 - ((_525 * TEXCOORD_8.z) * _530);
    float _546 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _550 = ((isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : min(_546, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _558 = (_550 - (((_522 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _550))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3835 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _563 = ((_537 * (cbMtdParam._m0[17u].x - _399)) * _559) + _399;
    float _564 = ((_538 * (cbMtdParam._m0[17u].y - _400)) * _559) + _400;
    float _565 = ((_539 * (cbMtdParam._m0[17u].z - _401)) * _559) + _401;
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _579 = _577.x;
    float _580 = 1.0 - _579;
    float _607 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_579 - _580) * cbMtdParam._m0[24u].w) + _580) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3846 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _616 = ((((cbMtdParam._m0[10u].x - _563) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _608) + _563;
    float _617 = ((((cbMtdParam._m0[10u].y - _564) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _608) + _564;
    float _618 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _565)) * _608) + _565;
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _646 = _644.x;
    float _664 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _646) * _392) + _646;
    float _668 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _664) * cbMtdParam._m0[19u].z) + _664;
    float _671 = _668 - ((_559 * _537) * _668);
    float _673 = _671 - (_671 * _608);
    vec4 _687 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _694 = (_687.x * 2.0) + (-1.0);
    float _695 = (_687.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _3857 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _705 = (((_687.z - _449) * _537) * _559) + _449;
    float _708 = ((cbMtdParam._m0[23u].y - _705) * _608) + _705;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _733 = (_727.x * 2.0) + (-1.0);
    float _734 = (_727.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3868 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _755 = (((cbMtdParam._m0[21u].x * _452) + ((_694 - _452) * _537)) * _559) + _452;
    float _756 = (((cbMtdParam._m0[21u].x * _454) + ((_695 - _454) * _538)) * _559) + _454;
    float _757 = (((sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _460) * _539) * _559) + _460;
    float _768 = (((_733 - _755) + (_755 * cbMtdParam._m0[22u].z)) * _608) + _755;
    float _769 = (((_734 - _756) + (_756 * cbMtdParam._m0[22u].z)) * _608) + _756;
    float _770 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _757) * _608) + _757;
    float _772 = cbMtdParam._m0[22u].x + _489.w;
    float _775 = fma(_770, _243, fma(_769, _250, _768 * _236));
    float _778 = fma(_770, _244, fma(_769, _251, _768 * _237));
    float _781 = fma(_770, _245, fma(_769, _252, _768 * _238));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3879 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _789 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3901 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3912 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3923 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3934 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _794 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    vec4 _872 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _874 = _872.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1046 = sqrt(((_858 * _858) + (_859 * _859)) + (_860 * _860));
        float _1052 = (cbMatDynParam._m0[5u].x * _1046) + cbMatDynParam._m0[5u].y;
        float _3945 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1057 = (cbMatDynParam._m0[5u].z * _1046) + cbMatDynParam._m0[5u].w;
        float _3956 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) - _1053)) + _1053) < ((_874 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _907 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _910 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _923 = _255 + 9u;
    uint _924 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3967 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _936 = 1.0 - _794;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _794;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _794;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _794;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _963 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_786, _787, _788), vec3(_865, _866, _867));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _786) - _865;
    float _972 = (_967 * _787) - _866;
    float _973 = (_967 * _788) - _867;
    float _977 = abs(dot(vec3(_865, _866, _867), vec3(_786, _787, _788)));
    float _4000 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_789);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _998 = (1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _999 = _992 * _979;
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1093 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1097 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1122 = _1027 + _786;
        float _1123 = _1031 + _787;
        float _1124 = _1035 + _788;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1089;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1093;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1097;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_786, _787, _788), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4048 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_786, _787, _788), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4081 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_786, _787, _788), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4114 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1411 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1415 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1438 = _1027 + _786;
        float _1439 = _1031 + _787;
        float _1440 = _1035 + _788;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_786, _787, _788), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4177 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_786, _787, _788), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4210 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_786, _787, _788), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4243 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1365;
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = _1365;
        _1686 = _1365;
        _1687 = _1365;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1377)) + _1377;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1378)) + _1378;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1379)) + _1379;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _971 * 0.5;
    float _1745 = _972 * 0.5;
    float _1746 = _973 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1787;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1798;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1789 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1802 = (_1798 * cbModelParam._m0[1u].x) + (_1787 * (1.0 - cbModelParam._m0[1u].x));
    float _1812 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1812 : min(cbModelParam._m0[25u].z, _1812));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1875 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1878 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1906 = frontier_phi_17_15_ladder;
        }
        float _2130;
        if (_1875 > 0.0)
        {
            _2130 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2130 = frontier_phi_26_22_ladder;
        }
        float _2387;
        if (_1878 > 0.0)
        {
            _2387 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2387 = frontier_phi_38_33_ladder;
        }
        float _2389 = isnan(_2130) ? _1906 : (isnan(_1906) ? _2130 : min(_1906, _2130));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1872) + _1861;
        float _2395 = (_2390 * _1875) + _1865;
        float _2396 = (_2390 * _1878) + _1869;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1813);
            frontier_phi_16_38_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_16_38_ladder_2;
        _1896 = frontier_phi_16_38_ladder_1;
        _1898 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1813);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1957 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1961 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1965 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1968 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1971 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1974 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2135;
        if (_1968 > 0.0)
        {
            _2135 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2135 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1971 > 0.0)
        {
            _2414 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2627;
        if (_1974 > 0.0)
        {
            _2627 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2627 = frontier_phi_49_46_ladder;
        }
        float _2629 = isnan(_2414) ? _2135 : (isnan(_2135) ? _2414 : min(_2135, _2414));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _1968) + _1957;
        float _2635 = (_2630 * _1971) + _1961;
        float _2636 = (_2630 * _1974) + _1965;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2637;
        float _2640 = _2637 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2636 > _2640) || ((_2636 < _2638) || ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 < _2638) || (_2634 > _2640))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2636, cbModelParam._m0[17u].z, fma(_2635, cbModelParam._m0[17u].y, _2634 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2636, cbModelParam._m0[18u].z, fma(_2635, cbModelParam._m0[18u].y, _2634 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2636, cbModelParam._m0[19u].z, fma(_2635, cbModelParam._m0[19u].y, _2634 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_25_49_ladder = _2835.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2835.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2835.x * cbModelParam._m0[1u].z;
        }
        _1993 = frontier_phi_25_49_ladder_2;
        _1995 = frontier_phi_25_49_ladder_1;
        _1997 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1903);
        _1993 = _1977.x * cbModelParam._m0[1u].z;
        _1995 = _1977.y * cbModelParam._m0[1u].z;
        _1997 = _1977.z * cbModelParam._m0[1u].z;
    }
    float _2010 = (((_998 * _947) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2012 = (((_998 * _949) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2014 = (((_998 * _950) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1997 - _1898)) + _1898);
    float _2017 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2010 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2010 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2010 * cbSceneParam._m0[91u].x));
    vec4 _2031 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_885, _886));
    float _2033 = _2031.w;
    float _2045 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2033);
    float _2046 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2033);
    float _2047 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2033);
    uvec4 _2051 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2053 = _2051.x * 14u;
    uint _2054 = _2053 + 13u;
    float _2061 = _963 + (-1.0);
    float _2066 = (cbLight._m0[_2054].x * _2061) + 1.0;
    float _2067 = (cbLight._m0[_2054].y * _2061) + 1.0;
    float _2068 = (cbLight._m0[_2054].z * _2061) + 1.0;
    float _2069 = (cbLight._m0[_2054].w * _2061) + 1.0;
    uint _2070 = _2053 + 5u;
    float _2076 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2080 = _2053 + 4u;
    float _2089 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2093 = _2053 | 1u;
    float _2104 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_786, _787, _788));
    float _2107 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_786, _787, _788));
    float _4379 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _4390 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2112 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2114 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2121 = ((cbLight._m0[_2070].x * _2076) * _2114) + (((cbLight._m0[_2080].x * _2045) * _2089) * _2112);
    float _2122 = ((_2076 * cbLight._m0[_2070].y) * _2114) + (((cbLight._m0[_2080].y * _2046) * _2089) * _2112);
    float _2123 = ((_2076 * cbLight._m0[_2070].z) * _2114) + (((cbLight._m0[_2080].z * _2047) * _2089) * _2112);
    uvec4 _2127 = floatBitsToUint(cbLight._m0[_2053 + 12u]);
    bool _2129 = _2127.x == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2129)
    {
        _2140 = _2121;
        _2142 = _2122;
        _2144 = _2123;
    }
    else
    {
        uint _2148 = _2053 + 6u;
        float _2164 = (dot(vec3(cbLight._m0[_2053 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4401 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2167 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2140 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _2121;
        _2142 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _2122;
        _2144 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _2123;
    }
    bool _2147 = _2127.y == 0u;
    float _2185;
    float _2187;
    float _2189;
    if (_2147)
    {
        _2185 = _2140;
        _2187 = _2142;
        _2189 = _2144;
    }
    else
    {
        uint _2358 = _2053 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_2053 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4417 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2377 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2185 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2140;
        _2187 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2142;
        _2189 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2144;
    }
    uint _2192 = _2053 + 8u;
    float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _789) * 0.949999988079071044921875);
    float _2206 = _2205 * _2205;
    float _2207 = cbLight._m0[_2053].x + _865;
    float _2208 = cbLight._m0[_2053].y + _866;
    float _2209 = cbLight._m0[_2053].z + _867;
    float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
    float _2214 = _2213 * _2207;
    float _2215 = _2213 * _2208;
    float _2216 = _2213 * _2209;
    float _2217 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2053].xyz));
    float _4433 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _4444 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2221 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2222 = dot(vec3(_786, _787, _788), vec3(_2214, _2215, _2216));
    float _4455 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2214, _2215, _2216));
    float _4466 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2206 * _2206;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2243 = 0.959999978542327880859375 - _944;
    float _2245 = 0.959999978542327880859375 - _945;
    float _2246 = 0.959999978542327880859375 - _946;
    float _2253 = 1.0 - _2206;
    float _2264 = (0.5 / (((_2221 * ((_2220 * _2253) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_2221 * _2253) + _2206) * _2220))) * _2220;
    float _4477 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    uint _2280 = _2053 + 9u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _789) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2093].x + _865;
    float _2294 = cbLight._m0[_2093].y + _866;
    float _2295 = cbLight._m0[_2093].z + _867;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2093].xyz));
    float _4488 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2307 = dot(vec3(_786, _787, _788), vec3(_2300, _2301, _2302));
    float _4499 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2300, _2301, _2302));
    float _4510 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2292 * _2292;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
    float _2333 = 1.0 - _2292;
    float _2343 = (0.5 / (((_2221 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2221 * _2333) + _2292) * _2306))) * _2306;
    float _4521 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    float _2355 = (((((_2326 * _2243) + _947) * cbLight._m0[_2280].x) * _2345) * _2076) + ((((cbLight._m0[_2192].x * _2045) * ((_2242 * _2243) + _947)) * _2266) * _2089);
    float _2356 = (((((_2326 * _2245) + _949) * cbLight._m0[_2280].y) * _2345) * _2076) + ((((cbLight._m0[_2192].y * _2046) * ((_2242 * _2245) + _949)) * _2266) * _2089);
    float _2357 = (((((_2326 * _2246) + _950) * cbLight._m0[_2280].z) * _2345) * _2076) + ((((cbLight._m0[_2192].z * _2047) * ((_2242 * _2246) + _950)) * _2266) * _2089);
    float _2419;
    float _2421;
    float _2423;
    if (_2129)
    {
        _2419 = _2355;
        _2421 = _2356;
        _2423 = _2357;
    }
    else
    {
        uint _2425 = _2053 + 2u;
        uint _2429 = _2053 + 10u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _789) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _865;
        float _2446 = cbLight._m0[_2425].y + _866;
        float _2447 = cbLight._m0[_2425].z + _867;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2425].xyz));
        float _4532 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2459 = dot(vec3(_786, _787, _788), vec3(_2452, _2453, _2454));
        float _4543 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4554 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0);
        float _2485 = 1.0 - _2444;
        float _2495 = (0.5 / (((_2221 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2221 * _2485) + _2444) * _2458))) * _2458;
        float _4565 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2419 = (((((_2478 * _2243) + _947) * cbLight._m0[_2429].x) * _2497) * _2498) + _2355;
        _2421 = (((((_2478 * _2245) + _949) * cbLight._m0[_2429].y) * _2497) * _2498) + _2356;
        _2423 = (((((_2478 * _2246) + _950) * cbLight._m0[_2429].z) * _2497) * _2498) + _2357;
    }
    float _2533;
    float _2535;
    float _2537;
    if (_2147)
    {
        _2533 = _2419;
        _2535 = _2421;
        _2537 = _2423;
    }
    else
    {
        uint _2544 = _2053 + 3u;
        uint _2548 = _2053 + 11u;
        float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _789) * 0.949999988079071044921875);
        float _2563 = _2562 * _2562;
        float _2564 = cbLight._m0[_2544].x + _865;
        float _2565 = cbLight._m0[_2544].y + _866;
        float _2566 = cbLight._m0[_2544].z + _867;
        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
        float _2571 = _2570 * _2564;
        float _2572 = _2570 * _2565;
        float _2573 = _2570 * _2566;
        float _2574 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2544].xyz));
        float _4581 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2578 = dot(vec3(_786, _787, _788), vec3(_2571, _2572, _2573));
        float _4592 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2582 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2571, _2572, _2573));
        float _4603 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2586 = _2563 * _2563;
        float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
        float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
        float _2604 = 1.0 - _2563;
        float _2614 = (0.5 / (((_2221 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2221 * _2604) + _2563) * _2577))) * _2577;
        float _4614 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2533 = (((((_2597 * _2243) + _947) * cbLight._m0[_2548].x) * _2616) * _2617) + _2419;
        _2535 = (((((_2597 * _2245) + _949) * cbLight._m0[_2548].y) * _2616) * _2617) + _2421;
        _2537 = (((((_2597 * _2246) + _950) * cbLight._m0[_2548].z) * _2616) * _2617) + _2423;
    }
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_2051.y == 0u)
    {
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2692;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2692;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2692;
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2708)));
        float _2729 = (log2(_2695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
        }
        else
        {
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3008)
                {
                    frontier_phi_66_pred = _2992;
                    frontier_phi_66_pred_1 = _2997;
                    frontier_phi_66_pred_2 = _2996;
                    frontier_phi_66_pred_3 = _2995;
                    frontier_phi_66_pred_4 = _2994;
                    frontier_phi_66_pred_5 = _2993;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _3007;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_2998 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _2693;
                        float _3204 = _3163.y - _2694;
                        float _3205 = _3163.z - _2695;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_904, _907, _910), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4640 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _2693;
                        float _3239 = (-0.0) - _2694;
                        float _3240 = (-0.0) - _2695;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3255 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _979;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3268 = _3247 + _3212;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_904, _907, _910), vec3(_3245, _3246, _3247));
                        float _4656 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3280 = dot(vec3(_904, _907, _910), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4667 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3223 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3213) + _3289;
                        float _4678 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4689 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3287 * _3287) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3067 = (_3234 * _3182.x) + _3140;
                        _3068 = (_3234 * _3182.y) + _3141;
                        _3069 = (_3234 * _3182.z) + _3142;
                        _3064 = (_3315 * _3199.x) + _3137;
                        _3065 = (_3315 * _3199.y) + _3138;
                        _3066 = (_3315 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                _2841 = frontier_phi_66_pred;
                _2851 = frontier_phi_66_pred_1;
                _2849 = frontier_phi_66_pred_2;
                _2847 = frontier_phi_66_pred_3;
                _2845 = frontier_phi_66_pred_4;
                _2843 = frontier_phi_66_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2841;
                    _2993 = _2843;
                    _2994 = _2845;
                    _2995 = _2847;
                    _2996 = _2849;
                    _2997 = _2851;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
        }
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.z;
        uint _2857 = (_2855 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2857) & _2739) == 0u)
        {
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
            _2966 = _2846;
            _2968 = _2848;
            _2970 = _2850;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
            float _2986 = _2985 * _2693;
            float _2987 = _2985 * _2694;
            float _2988 = _2985 * _2695;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2857 < ((_2855 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3120 = _2840;
                float _3121 = _2842;
                float _3122 = _2844;
                float _3123 = _2846;
                float _3124 = _2848;
                float _3125 = _2850;
                uint _3126 = _2857;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3136)
                    {
                        frontier_phi_77_pred = _3125;
                        frontier_phi_77_pred_1 = _3124;
                        frontier_phi_77_pred_2 = _3123;
                        frontier_phi_77_pred_3 = _3122;
                        frontier_phi_77_pred_4 = _3121;
                        frontier_phi_77_pred_5 = _3120;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        uint _3348 = _3135;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3433;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3359 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3420 = (_3359 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3359 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3359 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_2695, _3467.z, fma(_2694, _3467.y, _3467.x * _2693)) + _3467.w;
                            _3480 = !((fma(_2695, _3448.z, fma(_2694, _3448.y, _3448.x * _2693)) + _3448.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3374.x - _2693;
                                float _3508 = _3374.y - _2694;
                                float _3509 = _3374.z - _2695;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3375 * _3375));
                                float _4700 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3525 = sqrt(_3510) * _3390.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_904, _907, _910))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_2695, _3417.z, fma(_2694, _3417.y, _3417.x * _2693)) + _3417.w) / _3479;
                                float _3539 = (fma(_2695, _3433.z, fma(_2694, _3433.y, _3433.x * _2693)) + _3433.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4716 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _979;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _2986;
                                float _3569 = _3515 - _2987;
                                float _3570 = _3516 - _2988;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_904, _907, _910), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4727 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3582 = dot(vec3(_904, _907, _910), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4738 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_904, _907, _910), vec3(_3514, _3515, _3516))) + _3591;
                                float _4749 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4760 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3545 * _3390.y;
                                frontier_phi_83_pred_1 = _3545 * _3390.x;
                                frontier_phi_83_pred_2 = _3619 * _3402.z;
                                frontier_phi_83_pred_3 = _3619 * _3402.y;
                                frontier_phi_83_pred_4 = _3619 * _3402.x;
                                frontier_phi_83_pred_5 = _3545 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_83_pred;
                            _3626 = frontier_phi_83_pred_1;
                            _3625 = frontier_phi_83_pred_2;
                            _3624 = frontier_phi_83_pred_3;
                            _3623 = frontier_phi_83_pred_4;
                            _3628 = frontier_phi_83_pred_5;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            _3329 = _3623 + _3342;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3334;
                        frontier_phi_77_pred_1 = _3333;
                        frontier_phi_77_pred_2 = _3332;
                        frontier_phi_77_pred_3 = _3331;
                        frontier_phi_77_pred_4 = _3330;
                        frontier_phi_77_pred_5 = _3329;
                    }
                    _2971 = frontier_phi_77_pred;
                    _2969 = frontier_phi_77_pred_1;
                    _2967 = frontier_phi_77_pred_2;
                    _2965 = frontier_phi_77_pred_3;
                    _2963 = frontier_phi_77_pred_4;
                    _2961 = frontier_phi_77_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2961;
                        _3121 = _2963;
                        _3122 = _2965;
                        _3123 = _2967;
                        _3124 = _2969;
                        _3125 = _2971;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2965;
                frontier_phi_58_59_ladder_1 = _2971;
                frontier_phi_58_59_ladder_2 = _2969;
                frontier_phi_58_59_ladder_3 = _2967;
                frontier_phi_58_59_ladder_4 = _2963;
                frontier_phi_58_59_ladder_5 = _2961;
            }
            else
            {
                frontier_phi_58_59_ladder = _2844;
                frontier_phi_58_59_ladder_1 = _2850;
                frontier_phi_58_59_ladder_2 = _2848;
                frontier_phi_58_59_ladder_3 = _2846;
                frontier_phi_58_59_ladder_4 = _2842;
                frontier_phi_58_59_ladder_5 = _2840;
            }
            _2960 = frontier_phi_58_59_ladder_5;
            _2962 = frontier_phi_58_59_ladder_4;
            _2964 = frontier_phi_58_59_ladder;
            _2966 = frontier_phi_58_59_ladder_3;
            _2968 = frontier_phi_58_59_ladder_2;
            _2970 = frontier_phi_58_59_ladder_1;
        }
        float _2975 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2752 = (_2975 * _2966) + _2185;
        _2754 = (_2975 * _2968) + _2187;
        _2756 = (_2975 * _2970) + _2189;
        _2758 = ((_2960 * _947) * _2975) + _2533;
        _2760 = ((_2962 * _949) * _2975) + _2535;
        _2762 = ((_2964 * _950) * _2975) + _2537;
    }
    else
    {
        _2752 = _2185;
        _2754 = _2187;
        _2756 = _2189;
        _2758 = _2533;
        _2760 = _2535;
        _2762 = _2537;
    }
    float _4776 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4787 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4798 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2779 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2752 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _963))) + ((_2758 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    float _2780 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2754 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _963))) + ((_2760 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    float _2781 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2756 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _963))) + ((_2762 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    uint _2782 = _255 + 6u;
    float _2790 = _885 / cbSceneParam._m0[86u].x;
    float _2791 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2805 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2790, _2791, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2807 = _2805.x;
    float _2808 = _2805.y;
    float _2809 = _2805.z;
    float _2810 = _2805.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2865 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2866 = _2865 / _808;
        float _2877 = _2866 * _858;
        float _2878 = _859 * _2866;
        float _2879 = (-0.0) - _2878;
        float _2880 = _2866 * _860;
        float _2882 = (cbSceneParam._m0[77u].w * _2879) / _2865;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2878;
        float _2890 = sqrt(((_2877 * _2877) + (_2878 * _2878)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2865)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2879 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3077 = ((abs(_2890 / _2879) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2900 * _3032) - exp2(_2900 * _3033)) * _3021))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2790, _2791, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2810);
        _2902 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2807;
        _2904 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2808;
        _2906 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2809;
        _2908 = _3088 * _2810;
    }
    else
    {
        _2902 = _2807;
        _2904 = _2808;
        _2906 = _2809;
        _2908 = _2810;
    }
    bool _3115;
    vec4 _2918;
    vec4 _2940;
    float _2942;
    float _2946;
    float _2947;
    float _2948;
    float _2949;
    bool _2959;
    for (;;)
    {
        _2918 = cbMatDynParam._m0[0u];
        float _2920 = roundEven(_2918.y);
        bool _2921 = _2920 == 3.0;
        float _2922 = log2(_2908);
        float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * _2779;
        float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * _2780;
        float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * _2781;
        float _2938 = _874 + (-0.5);
        _2940 = cbMtdParam._m0[1u];
        _2942 = _2940.y * _2938;
        float _2945 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2946 = _2945 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
        _2947 = _2945 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2945 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2938 * 0.999000012874603271484375;
        _2959 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2959)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2949) < 0.5)
            {
                _3115 = true;
                break;
            }
        }
        uint _3056 = _923 + uint(_2918.w);
        if ((cbInstanceData._m0[_3056].w < 1.0) && ((cbInstanceData._m0[_3056].w + _2949) < 0.5))
        {
            _3115 = true;
            break;
        }
        if ((_2942 + 1.0) < _2940.x)
        {
            _3115 = true;
            break;
        }
        _3115 = false;
        break;
    }
    float _3320;
    if (_3115)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = cbInstanceData._m0[_2782].w;
    }
    SV_Target.x = _2946;
    SV_Target.y = _2947;
    SV_Target.z = _2948;
    SV_Target.w = _3320;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2782].w;
    discard_exit();
}


