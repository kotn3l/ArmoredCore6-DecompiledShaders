#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1239;
float _3644;
float _3645;
float _3646;
float _3647;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3656 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _384) + _457;
    float _469 = ((((_436.x - _455) * _384) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _384) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3667 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _523 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_509 - _510) * cbMtdParam._m0[24u].z) + _510) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3678 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _531 = (_524 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _532 = (_524 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _533 = (_524 * (cbMtdParam._m0[17u].z - _393)) + _393;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _561 = _559.x;
    float _579 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _561) * _384) + _561;
    float _583 = ((_545.x - _579) * cbMtdParam._m0[19u].z) + _579;
    float _585 = _583 - (_583 * _524);
    float _590 = (((_411.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _610 = (_603.x * 2.0) + (-1.0);
    float _611 = (_603.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3689 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _620 = (_524 * (_603.z - _590)) + _590;
    float _625 = _469 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_411.x * 2.0) + (-1.0)));
    float _626 = _470 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_411.y * 2.0) + (-1.0)));
    float _638 = (((_610 - _625) + (cbMtdParam._m0[21u].x * _625)) * _524) + _625;
    float _639 = (((_611 - _626) + (cbMtdParam._m0[21u].x * _626)) * _524) + _626;
    float _640 = (_524 * (sqrt(1.0 - (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) - _476)) + _476;
    float _645 = cbMtdParam._m0[22u].x + _489.w;
    float _648 = fma(_640, _233 * NORMAL.x, fma(_639, _240 * TANGENT.x, (_226 * _218) * _638));
    float _651 = fma(_640, _233 * NORMAL.y, fma(_639, _240 * TANGENT.y, (_226 * _219) * _638));
    float _654 = fma(_640, _233 * NORMAL.z, fma(_639, _240 * TANGENT.z, (_226 * _220) * _638));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3700 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _662 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3722 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3733 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3744 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3755 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _667 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _732 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _722);
    float _733 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _722);
    float _734 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _722);
    float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
    float _739 = _732 * _738;
    float _740 = _733 * _738;
    float _741 = _734 * _738;
    vec4 _746 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _748 = _746.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_732 * _732) + (_733 * _733)) + (_734 * _734));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _3766 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _3777 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) - _927)) + _927) < ((_748 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _781 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _784 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _797 = _246 + 9u;
    uint _798 = _797 + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3788 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _810 = 1.0 - _667;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _667;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _667;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _667;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _837 = ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_659, _660, _661), vec3(_739, _740, _741));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _659) - _739;
    float _846 = (_841 * _660) - _740;
    float _847 = (_841 * _661) - _741;
    float _851 = abs(dot(vec3(_739, _740, _741), vec3(_659, _660, _661)));
    float _3821 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_662);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _967 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _971 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _996 = _901 + _659;
        float _997 = _905 + _660;
        float _998 = _909 + _661;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_659, _660, _661), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3869 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_659, _660, _661), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3902 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_659, _660, _661), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3935 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1285 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1289 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1312 = _901 + _659;
        float _1313 = _905 + _660;
        float _1314 = _909 + _661;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_659, _660, _661), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3998 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_659, _660, _661), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4031 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_659, _660, _661), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4064 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = _1239;
        _1561 = _1239;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1252)) + _1252;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _845 * 0.5;
    float _1619 = _846 * 0.5;
    float _1620 = _847 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1749 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1752 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1780 = frontier_phi_17_15_ladder;
        }
        float _2004;
        if (_1749 > 0.0)
        {
            _2004 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2004 = frontier_phi_26_22_ladder;
        }
        float _2261;
        if (_1752 > 0.0)
        {
            _2261 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2261 = frontier_phi_38_33_ladder;
        }
        float _2263 = isnan(_2004) ? _1780 : (isnan(_1780) ? _2004 : min(_1780, _2004));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1746) + _1735;
        float _2269 = (_2264 * _1749) + _1739;
        float _2270 = (_2264 * _1752) + _1743;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_16_38_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_16_38_ladder_2;
        _1770 = frontier_phi_16_38_ladder_1;
        _1772 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1687);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1845 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1848 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _2009;
        if (_1842 > 0.0)
        {
            _2009 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2009 = frontier_phi_28_24_ladder;
        }
        float _2288;
        if (_1845 > 0.0)
        {
            _2288 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2288 = frontier_phi_40_35_ladder;
        }
        float _2501;
        if (_1848 > 0.0)
        {
            _2501 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2501 = frontier_phi_49_46_ladder;
        }
        float _2503 = isnan(_2288) ? _2009 : (isnan(_2009) ? _2288 : min(_2009, _2288));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1842) + _1831;
        float _2509 = (_2504 * _1845) + _1835;
        float _2510 = (_2504 * _1848) + _1839;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_25_49_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_25_49_ladder_2;
        _1869 = frontier_phi_25_49_ladder_1;
        _1871 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1777);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_872 * _821) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_872 * _823) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    vec4 _1905 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_759, _760));
    float _1907 = _1905.w;
    float _1919 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1907);
    float _1920 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1907);
    float _1921 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1907);
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1935 = _837 + (-1.0);
    float _1940 = (cbLight._m0[_1928].x * _1935) + 1.0;
    float _1941 = (cbLight._m0[_1928].y * _1935) + 1.0;
    float _1942 = (cbLight._m0[_1928].z * _1935) + 1.0;
    float _1943 = (cbLight._m0[_1928].w * _1935) + 1.0;
    uint _1944 = _1927 + 5u;
    float _1950 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1954 = _1927 + 4u;
    float _1963 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1967 = _1927 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_659, _660, _661));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_659, _660, _661));
    float _4200 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _4211 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1944].x * _1950) * _1988) + (((cbLight._m0[_1954].x * _1919) * _1963) * _1986);
    float _1996 = ((_1950 * cbLight._m0[_1944].y) * _1988) + (((cbLight._m0[_1954].y * _1920) * _1963) * _1986);
    float _1997 = ((_1950 * cbLight._m0[_1944].z) * _1988) + (((cbLight._m0[_1954].z * _1921) * _1963) * _1986);
    uvec4 _2001 = floatBitsToUint(cbLight._m0[_1927 + 12u]);
    bool _2003 = _2001.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_2003)
    {
        _2014 = _1995;
        _2016 = _1996;
        _2018 = _1997;
    }
    else
    {
        uint _2022 = _1927 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1927 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4222 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2041 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1995;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1996;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1997;
    }
    bool _2021 = _2001.y == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2021)
    {
        _2059 = _2014;
        _2061 = _2016;
        _2063 = _2018;
    }
    else
    {
        uint _2232 = _1927 + 7u;
        float _2248 = (dot(vec3(cbLight._m0[_1927 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4238 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2251 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2059 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2014;
        _2061 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2016;
        _2063 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2018;
    }
    uint _2066 = _1927 + 8u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _662) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1927].x + _739;
    float _2082 = cbLight._m0[_1927].y + _740;
    float _2083 = cbLight._m0[_1927].z + _741;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1927].xyz));
    float _4254 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2095 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2096 = dot(vec3(_659, _660, _661), vec3(_2088, _2089, _2090));
    float _4276 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2088, _2089, _2090));
    float _4287 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2080 * _2080;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2117 = 0.959999978542327880859375 - _818;
    float _2119 = 0.959999978542327880859375 - _819;
    float _2120 = 0.959999978542327880859375 - _820;
    float _2127 = 1.0 - _2080;
    float _2138 = (0.5 / (((_2095 * ((_2094 * _2127) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2127) + _2080) * _2094))) * _2094;
    float _4298 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    uint _2154 = _1927 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _662) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1967].x + _739;
    float _2168 = cbLight._m0[_1967].y + _740;
    float _2169 = cbLight._m0[_1967].z + _741;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1967].xyz));
    float _4309 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2181 = dot(vec3(_659, _660, _661), vec3(_2174, _2175, _2176));
    float _4320 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2174, _2175, _2176));
    float _4331 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2207 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2095 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2207) + _2166) * _2180))) * _2180;
    float _4342 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2229 = (((((_2200 * _2117) + _821) * cbLight._m0[_2154].x) * _2219) * _1950) + ((((cbLight._m0[_2066].x * _1919) * ((_2116 * _2117) + _821)) * _2140) * _1963);
    float _2230 = (((((_2200 * _2119) + _823) * cbLight._m0[_2154].y) * _2219) * _1950) + ((((cbLight._m0[_2066].y * _1920) * ((_2116 * _2119) + _823)) * _2140) * _1963);
    float _2231 = (((((_2200 * _2120) + _824) * cbLight._m0[_2154].z) * _2219) * _1950) + ((((cbLight._m0[_2066].z * _1921) * ((_2116 * _2120) + _824)) * _2140) * _1963);
    float _2293;
    float _2295;
    float _2297;
    if (_2003)
    {
        _2293 = _2229;
        _2295 = _2230;
        _2297 = _2231;
    }
    else
    {
        uint _2299 = _1927 + 2u;
        uint _2303 = _1927 + 10u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _662) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _739;
        float _2320 = cbLight._m0[_2299].y + _740;
        float _2321 = cbLight._m0[_2299].z + _741;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2299].xyz));
        float _4353 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2333 = dot(vec3(_659, _660, _661), vec3(_2326, _2327, _2328));
        float _4364 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4375 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
        float _2359 = 1.0 - _2318;
        float _2369 = (0.5 / (((_2095 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2359) + _2318) * _2332))) * _2332;
        float _4386 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2293 = (((((_2352 * _2117) + _821) * cbLight._m0[_2303].x) * _2371) * _2372) + _2229;
        _2295 = (((((_2352 * _2119) + _823) * cbLight._m0[_2303].y) * _2371) * _2372) + _2230;
        _2297 = (((((_2352 * _2120) + _824) * cbLight._m0[_2303].z) * _2371) * _2372) + _2231;
    }
    float _2407;
    float _2409;
    float _2411;
    if (_2021)
    {
        _2407 = _2293;
        _2409 = _2295;
        _2411 = _2297;
    }
    else
    {
        uint _2418 = _1927 + 3u;
        uint _2422 = _1927 + 11u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _662) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _739;
        float _2439 = cbLight._m0[_2418].y + _740;
        float _2440 = cbLight._m0[_2418].z + _741;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2418].xyz));
        float _4402 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2452 = dot(vec3(_659, _660, _661), vec3(_2445, _2446, _2447));
        float _4413 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4424 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
        float _2478 = 1.0 - _2437;
        float _2488 = (0.5 / (((_2095 * ((_2451 * _2478) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2478) + _2437) * _2451))) * _2451;
        float _4435 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2407 = (((((_2471 * _2117) + _821) * cbLight._m0[_2422].x) * _2490) * _2491) + _2293;
        _2409 = (((((_2471 * _2119) + _823) * cbLight._m0[_2422].y) * _2490) * _2491) + _2295;
        _2411 = (((((_2471 * _2120) + _824) * cbLight._m0[_2422].z) * _2490) * _2491) + _2297;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1925.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2883)
                {
                    frontier_phi_66_pred = _2867;
                    frontier_phi_66_pred_1 = _2872;
                    frontier_phi_66_pred_2 = _2871;
                    frontier_phi_66_pred_3 = _2870;
                    frontier_phi_66_pred_4 = _2869;
                    frontier_phi_66_pred_5 = _2868;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2882;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2873 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _2567;
                        float _3079 = _3038.y - _2568;
                        float _3080 = _3038.z - _2569;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_778, _781, _784), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4461 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2567;
                        float _3114 = (-0.0) - _2568;
                        float _3115 = (-0.0) - _2569;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _853;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_778, _781, _784), vec3(_3120, _3121, _3122));
                        float _4477 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3155 = dot(vec3(_778, _781, _784), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4488 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3098 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3088) + _3164;
                        float _4499 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4510 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3162 * _3162) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2942 = (_3109 * _3057.x) + _3015;
                        _2943 = (_3109 * _3057.y) + _3016;
                        _2944 = (_3109 * _3057.z) + _3017;
                        _2939 = (_3190 * _3074.x) + _3012;
                        _2940 = (_3190 * _3074.y) + _3013;
                        _2941 = (_3190 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_66_pred = _2939;
                    frontier_phi_66_pred_1 = _2944;
                    frontier_phi_66_pred_2 = _2943;
                    frontier_phi_66_pred_3 = _2942;
                    frontier_phi_66_pred_4 = _2941;
                    frontier_phi_66_pred_5 = _2940;
                }
                _2715 = frontier_phi_66_pred;
                _2725 = frontier_phi_66_pred_1;
                _2723 = frontier_phi_66_pred_2;
                _2721 = frontier_phi_66_pred_3;
                _2719 = frontier_phi_66_pred_4;
                _2717 = frontier_phi_66_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2715;
                    _2868 = _2717;
                    _2869 = _2719;
                    _2870 = _2721;
                    _2871 = _2723;
                    _2872 = _2725;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2731) & _2613) == 0u)
        {
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2861 = _2860 * _2567;
            float _2862 = _2860 * _2568;
            float _2863 = _2860 * _2569;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2995 = _2714;
                float _2996 = _2716;
                float _2997 = _2718;
                float _2998 = _2720;
                float _2999 = _2722;
                float _3000 = _2724;
                uint _3001 = _2731;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3011)
                    {
                        frontier_phi_77_pred = _3000;
                        frontier_phi_77_pred_1 = _2999;
                        frontier_phi_77_pred_2 = _2998;
                        frontier_phi_77_pred_3 = _2997;
                        frontier_phi_77_pred_4 = _2996;
                        frontier_phi_77_pred_5 = _2995;
                    }
                    else
                    {
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        uint _3223 = _3010;
                        uint _3224;
                        vec4 _3249;
                        float _3250;
                        vec4 _3265;
                        vec3 _3277;
                        vec4 _3292;
                        vec4 _3307;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3234 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3223));
                            _3224 = (_3223 + 4294967295u) & _3223;
                            uint _3236 = _3234 * 40u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3250 = _3249.w;
                            uint _3252 = (_3234 * 40u) + 4u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3234 * 40u) + 8u;
                            _3277 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x));
                            uint _3279 = (_3234 * 40u) + 16u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3234 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3234 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3234 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2569, _3341.z, fma(_2568, _3341.y, _3341.x * _2567)) + _3341.w;
                            _3354 = !((fma(_2569, _3322.z, fma(_2568, _3322.y, _3322.x * _2567)) + _3322.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3249.x - _2567;
                                float _3382 = _3249.y - _2568;
                                float _3383 = _3249.z - _2569;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3250 * _3250));
                                float _4521 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3399 = sqrt(_3384) * _3265.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_778, _781, _784))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2569, _3292.z, fma(_2568, _3292.y, _3292.x * _2567)) + _3292.w) / _3353;
                                float _3413 = (fma(_2569, _3307.z, fma(_2568, _3307.y, _3307.x * _2567)) + _3307.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4537 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _853;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2861;
                                float _3443 = _3389 - _2862;
                                float _3444 = _3390 - _2863;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_778, _781, _784), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4548 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3456 = dot(vec3(_778, _781, _784), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4559 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_778, _781, _784), vec3(_3388, _3389, _3390))) + _3465;
                                float _4570 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4581 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3419 * _3265.y;
                                frontier_phi_83_pred_1 = _3419 * _3265.x;
                                frontier_phi_83_pred_2 = _3493 * _3277.z;
                                frontier_phi_83_pred_3 = _3493 * _3277.y;
                                frontier_phi_83_pred_4 = _3493 * _3277.x;
                                frontier_phi_83_pred_5 = _3419 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3501 = frontier_phi_83_pred;
                            _3500 = frontier_phi_83_pred_1;
                            _3499 = frontier_phi_83_pred_2;
                            _3498 = frontier_phi_83_pred_3;
                            _3497 = frontier_phi_83_pred_4;
                            _3502 = frontier_phi_83_pred_5;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            if (_3224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3224;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3209;
                        frontier_phi_77_pred_1 = _3208;
                        frontier_phi_77_pred_2 = _3207;
                        frontier_phi_77_pred_3 = _3206;
                        frontier_phi_77_pred_4 = _3205;
                        frontier_phi_77_pred_5 = _3204;
                    }
                    _2846 = frontier_phi_77_pred;
                    _2844 = frontier_phi_77_pred_1;
                    _2842 = frontier_phi_77_pred_2;
                    _2840 = frontier_phi_77_pred_3;
                    _2838 = frontier_phi_77_pred_4;
                    _2836 = frontier_phi_77_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2836;
                        _2996 = _2838;
                        _2997 = _2840;
                        _2998 = _2842;
                        _2999 = _2844;
                        _3000 = _2846;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2840;
                frontier_phi_58_59_ladder_1 = _2846;
                frontier_phi_58_59_ladder_2 = _2844;
                frontier_phi_58_59_ladder_3 = _2842;
                frontier_phi_58_59_ladder_4 = _2838;
                frontier_phi_58_59_ladder_5 = _2836;
            }
            else
            {
                frontier_phi_58_59_ladder = _2718;
                frontier_phi_58_59_ladder_1 = _2724;
                frontier_phi_58_59_ladder_2 = _2722;
                frontier_phi_58_59_ladder_3 = _2720;
                frontier_phi_58_59_ladder_4 = _2716;
                frontier_phi_58_59_ladder_5 = _2714;
            }
            _2835 = frontier_phi_58_59_ladder_5;
            _2837 = frontier_phi_58_59_ladder_4;
            _2839 = frontier_phi_58_59_ladder;
            _2841 = frontier_phi_58_59_ladder_3;
            _2843 = frontier_phi_58_59_ladder_2;
            _2845 = frontier_phi_58_59_ladder_1;
        }
        float _2850 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2626 = (_2850 * _2841) + _2059;
        _2628 = (_2850 * _2843) + _2061;
        _2630 = (_2850 * _2845) + _2063;
        _2632 = ((_2835 * _821) * _2850) + _2407;
        _2634 = ((_2837 * _823) * _2850) + _2409;
        _2636 = ((_2839 * _824) * _2850) + _2411;
    }
    else
    {
        _2626 = _2059;
        _2628 = _2061;
        _2630 = _2063;
        _2632 = _2407;
        _2634 = _2409;
        _2636 = _2411;
    }
    float _4597 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4608 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4619 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2653 = ((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2626 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _837))) + ((_2632 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2628 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _837))) + ((_2634 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2655 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2630 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _837))) + ((_2636 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    uint _2656 = _246 + 6u;
    float _2664 = _759 / cbSceneParam._m0[86u].x;
    float _2665 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2740 = _2739 / _681;
        float _2751 = _2740 * _732;
        float _2752 = _733 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2755 = _2740 * _734;
        float _2757 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2752;
        float _2765 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2753 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2898 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2952 = ((abs(_2765 / _2753) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2775 * _2907) - exp2(_2775 * _2908)) * _2896))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2684);
        _2777 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2779 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2781 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2783 = _2963 * _2684;
    }
    else
    {
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
        _2783 = _2684;
    }
    bool _2990;
    vec4 _2793;
    vec4 _2815;
    float _2817;
    float _2821;
    float _2822;
    float _2823;
    float _2824;
    bool _2834;
    for (;;)
    {
        _2793 = cbMatDynParam._m0[0u];
        float _2795 = roundEven(_2793.y);
        bool _2796 = _2795 == 3.0;
        float _2797 = log2(_2783);
        float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * _2653;
        float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * _2654;
        float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * _2655;
        float _2813 = _748 + (-0.5);
        _2815 = cbMtdParam._m0[1u];
        _2817 = _2815.y * _2813;
        float _2820 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2821 = _2820 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
        _2822 = _2820 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
        _2823 = _2820 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
        _2824 = _2813 * 0.999000012874603271484375;
        _2834 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2834)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2824) < 0.5)
            {
                _2990 = true;
                break;
            }
        }
        uint _2931 = _797 + uint(_2793.w);
        if ((cbInstanceData._m0[_2931].w < 1.0) && ((cbInstanceData._m0[_2931].w + _2824) < 0.5))
        {
            _2990 = true;
            break;
        }
        if ((_2817 + 1.0) < _2815.x)
        {
            _2990 = true;
            break;
        }
        _2990 = false;
        break;
    }
    float _3195;
    if (_2990)
    {
        discard_state = true;
        _3195 = 0.0;
    }
    else
    {
        _3195 = cbInstanceData._m0[_2656].w;
    }
    SV_Target.x = _2821;
    SV_Target.y = _2822;
    SV_Target.z = _2823;
    SV_Target.w = _3195;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
    discard_exit();
}


