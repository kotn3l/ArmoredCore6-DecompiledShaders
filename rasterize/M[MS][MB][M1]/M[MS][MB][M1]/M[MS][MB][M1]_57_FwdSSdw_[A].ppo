#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1219;
float _3624;
float _3625;
float _3626;
float _3627;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _338 = (_329.x * 2.0) + (-1.0);
    float _340 = (_329.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3636 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _350 = fma(_347, _231, fma(_340, _238, _338 * _224));
    float _353 = fma(_347, _232, fma(_340, _239, _338 * _225));
    float _356 = fma(_347, _233, fma(_340, _240, _338 * _226));
    float _360 = inversesqrt(dot(vec3(_350, _353, _356), vec3(_350, _353, _356)));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _398 = _396.x;
    float _399 = 1.0 - _398;
    float _406 = ((_398 - _399) * cbMtdParam._m0[24u].z) + _399;
    float _408 = (cbMtdParam._m0[19u].x + dot(vec4(_360 * _350, _360 * _353, _360 * _356, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_406 * cbMtdParam._m0[21u].z);
    float _3647 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _411 = (-0.0) - cbMtdParam._m0[24u].x;
    float _413 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    float _421 = _409 - ((_409 * TEXCOORD_8.x) * _414);
    float _422 = _409 - ((_409 * TEXCOORD_8.y) * _414);
    float _423 = _409 - ((_409 * TEXCOORD_8.z) * _414);
    float _430 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _434 = ((isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : min(_430, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _442 = (_434 - (((_406 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _434))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3678 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _447 = ((_421 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) * _443) + _288;
    float _448 = ((_422 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) * _443) + _289;
    float _449 = ((_423 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) * _443) + _290;
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _463 = _461.x;
    float _464 = 1.0 - _463;
    float _493 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_463 - _464) * cbMtdParam._m0[24u].w) + _464) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3689 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _502 = ((((cbMtdParam._m0[10u].x - _447) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _494) + _447;
    float _503 = ((((cbMtdParam._m0[10u].y - _448) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _494) + _448;
    float _504 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _449)) * _494) + _449;
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _519 = _517.x;
    float _522 = _519 - ((_519 * _421) * _443);
    float _524 = _522 - (_522 * _494);
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3700 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _556 = (((_538.z - _333) * _421) * _443) + _333;
    float _559 = ((cbMtdParam._m0[23u].y - _556) * _494) + _556;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3711 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _606 = (((cbMtdParam._m0[21u].x * _338) + ((_545 - _338) * _421)) * _443) + _338;
    float _607 = (((cbMtdParam._m0[21u].x * _340) + ((_546 - _340) * _422)) * _443) + _340;
    float _608 = (((sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) - _347) * _423) * _443) + _347;
    float _619 = (((_584 - _606) + (_606 * cbMtdParam._m0[22u].z)) * _494) + _606;
    float _620 = (((_585 - _607) + (_607 * cbMtdParam._m0[22u].z)) * _494) + _607;
    float _621 = ((sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) - _608) * _494) + _608;
    float _623 = cbMtdParam._m0[22u].x + _329.w;
    float _626 = fma(_621, _231, fma(_620, _238, _619 * _224));
    float _629 = fma(_621, _232, fma(_620, _239, _619 * _225));
    float _632 = fma(_621, _233, fma(_620, _240, _619 * _226));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3722 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _640 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3744 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3755 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3766 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3777 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _645 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _709 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _699);
    float _710 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _699);
    float _711 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _699);
    float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
    float _716 = _709 * _715;
    float _717 = _710 * _715;
    float _718 = _711 * _715;
    vec4 _723 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _725 = _723.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _900 = sqrt(((_709 * _709) + (_710 * _710)) + (_711 * _711));
        float _906 = (cbMatDynParam._m0[5u].x * _900) + cbMatDynParam._m0[5u].y;
        float _3788 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _911 = (cbMatDynParam._m0[5u].z * _900) + cbMatDynParam._m0[5u].w;
        float _3799 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) - _907)) + _907) < ((_725 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _761 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _764 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _777 = _243 + 9u;
    uint _778 = _777 + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3810 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _790 = 1.0 - _645;
    float _791 = _787 * _790;
    float _792 = _788 * _790;
    float _793 = _789 * _790;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _645;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _645;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _645;
    float _801 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    float _804 = _800 + 0.039999999105930328369140625;
    vec4 _813 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _817 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * TEXCOORD_5.w) * _813.x;
    float _818 = dot(vec3(_637, _638, _639), vec3(_716, _717, _718));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _637) - _716;
    float _826 = (_821 * _638) - _717;
    float _827 = (_821 * _639) - _718;
    float _831 = abs(dot(vec3(_716, _717, _718), vec3(_637, _638, _639)));
    float _3843 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_640);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _852 = (1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _853 = _846 * _833;
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _947 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _951 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _976 = _881 + _637;
        float _977 = _885 + _638;
        float _978 = _889 + _639;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _943;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _947;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _951;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_637, _638, _639), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3891 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_637, _638, _639), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3924 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_637, _638, _639), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3957 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1261 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1265 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1269 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1292 = _881 + _637;
        float _1293 = _885 + _638;
        float _1294 = _889 + _639;
        float _1304 = fma(_1294, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1292)) - _1261;
        float _1305 = fma(_1294, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1292)) - _1265;
        float _1306 = fma(_1294, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1292)) - _1269;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1261 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1265 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[35u].z) + ((((((_1269 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1360 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1327.x + (-0.5));
        float _1362 = _1360 * (_1327.y + (-0.5));
        float _1363 = _1360 * (_1327.z + (-0.5));
        float _1370 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1334.x + (-0.5));
        float _1372 = _1370 * (_1334.y + (-0.5));
        float _1373 = _1370 * (_1334.z + (-0.5));
        float _1380 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1341.x + (-0.5));
        float _1382 = _1380 * (_1341.y + (-0.5));
        float _1383 = _1380 * (_1341.z + (-0.5));
        float _1390 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1348.x + (-0.5));
        float _1392 = _1390 * (_1348.y + (-0.5));
        float _1393 = _1390 * (_1348.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_637, _638, _639), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4020 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1424 + 1.0))) + _1429) * _1394;
        float _1439 = _1362 * 0.5;
        float _1440 = _1372 * 0.5;
        float _1441 = _1382 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_637, _638, _639), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4053 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1466 + 1.0))) + _1471) * _1395;
        float _1481 = _1363 * 0.5;
        float _1482 = _1373 * 0.5;
        float _1483 = _1383 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_637, _638, _639), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4086 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1508 + 1.0))) + _1513) * _1396;
        _1530 = _1363;
        _1531 = _1362;
        _1532 = _1361;
        _1533 = _1373;
        _1534 = _1372;
        _1535 = _1371;
        _1536 = _1383;
        _1537 = _1382;
        _1538 = _1381;
        _1539 = _1396;
        _1540 = _1395;
        _1541 = _1394;
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1219;
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = _1219;
        _1541 = _1219;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1231)) + _1231;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1232)) + _1232;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1233)) + _1233;
    float _1577 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1554));
    float _1598 = _825 * 0.5;
    float _1599 = _826 * 0.5;
    float _1600 = _827 * 0.5;
    float _1601 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1604 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1607 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1641;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1614 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1618 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1622 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1629 = dot(vec4(cbModelParam._m0[39u]), vec4(_1598, _1599, _1600, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1652;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1643 = dot(vec4(cbModelParam._m0[40u]), vec4(_1598, _1599, _1600, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1656 = (_1652 * cbModelParam._m0[1u].x) + (_1641 * (1.0 - cbModelParam._m0[1u].x));
    float _1666 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1666 : min(cbModelParam._m0[25u].z, _1666));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1714 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1718 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1722 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1725 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1728 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1731 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1759;
        if (_1725 > 0.0)
        {
            _1759 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1759 = frontier_phi_17_15_ladder;
        }
        float _1983;
        if (_1728 > 0.0)
        {
            _1983 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1983 = frontier_phi_26_22_ladder;
        }
        float _2240;
        if (_1731 > 0.0)
        {
            _2240 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2240 = frontier_phi_38_33_ladder;
        }
        float _2242 = isnan(_1983) ? _1759 : (isnan(_1759) ? _1983 : min(_1759, _1983));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1725) + _1714;
        float _2248 = (_2243 * _1728) + _1718;
        float _2249 = (_2243 * _1731) + _1722;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1667);
            frontier_phi_16_38_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1747 = frontier_phi_16_38_ladder_2;
        _1749 = frontier_phi_16_38_ladder_1;
        _1751 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1667);
        _1747 = _1735.x * cbModelParam._m0[1u].y;
        _1749 = _1735.y * cbModelParam._m0[1u].y;
        _1751 = _1735.z * cbModelParam._m0[1u].y;
    }
    float _1755 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1755 : min(cbModelParam._m0[25u].w, _1755));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1823 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1826 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1988;
        if (_1820 > 0.0)
        {
            _1988 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1988 = frontier_phi_28_24_ladder;
        }
        float _2267;
        if (_1823 > 0.0)
        {
            _2267 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2267 = frontier_phi_40_35_ladder;
        }
        float _2480;
        if (_1826 > 0.0)
        {
            _2480 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2480 = frontier_phi_49_46_ladder;
        }
        float _2482 = isnan(_2267) ? _1988 : (isnan(_1988) ? _2267 : min(_1988, _2267));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1820) + _1809;
        float _2488 = (_2483 * _1823) + _1813;
        float _2489 = (_2483 * _1826) + _1817;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1756);
            frontier_phi_25_49_ladder = _2688.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2688.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_25_49_ladder_2;
        _1847 = frontier_phi_25_49_ladder_1;
        _1849 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1756);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_852 * _801) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1864 = (((_852 * _803) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1866 = (((_852 * _804) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1849 - _1751)) + _1751);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    vec4 _1883 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_737, _738));
    float _1885 = _1883.w;
    float _1897 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1885);
    float _1898 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1885);
    float _1899 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1885);
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _817 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1942 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1946 = _1905 | 1u;
    float _1957 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_637, _638, _639));
    float _1960 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_637, _638, _639));
    float _4222 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _4233 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1965 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _1967 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _1974 = ((cbLight._m0[_1922].x * _1928) * _1967) + (((cbLight._m0[_1932].x * _1897) * _1942) * _1965);
    float _1975 = ((_1928 * cbLight._m0[_1922].y) * _1967) + (((cbLight._m0[_1932].y * _1898) * _1942) * _1965);
    float _1976 = ((_1928 * cbLight._m0[_1922].z) * _1967) + (((cbLight._m0[_1932].z * _1899) * _1942) * _1965);
    uvec4 _1980 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1982 = _1980.x == 0u;
    float _1993;
    float _1995;
    float _1997;
    if (_1982)
    {
        _1993 = _1974;
        _1995 = _1975;
        _1997 = _1976;
    }
    else
    {
        uint _2001 = _1905 + 6u;
        float _2017 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4244 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2020 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1993 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1974;
        _1995 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1975;
        _1997 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1976;
    }
    bool _2000 = _1980.y == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2000)
    {
        _2038 = _1993;
        _2040 = _1995;
        _2042 = _1997;
    }
    else
    {
        uint _2211 = _1905 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4260 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2230 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2038 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _1993;
        _2040 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _1995;
        _2042 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _1997;
    }
    uint _2045 = _1905 + 8u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _640) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1905].x + _716;
    float _2061 = cbLight._m0[_1905].y + _717;
    float _2062 = cbLight._m0[_1905].z + _718;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1905].xyz));
    float _4276 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _4287 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2074 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2075 = dot(vec3(_637, _638, _639), vec3(_2067, _2068, _2069));
    float _4298 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2067, _2068, _2069));
    float _4309 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2059 * _2059;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
    float _2096 = 0.959999978542327880859375 - _798;
    float _2098 = 0.959999978542327880859375 - _799;
    float _2099 = 0.959999978542327880859375 - _800;
    float _2106 = 1.0 - _2059;
    float _2117 = (0.5 / (((_2074 * ((_2073 * _2106) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2106) + _2059) * _2073))) * _2073;
    float _4320 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    uint _2133 = _1905 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _640) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1946].x + _716;
    float _2147 = cbLight._m0[_1946].y + _717;
    float _2148 = cbLight._m0[_1946].z + _718;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1946].xyz));
    float _4331 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2160 = dot(vec3(_637, _638, _639), vec3(_2153, _2154, _2155));
    float _4342 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2153, _2154, _2155));
    float _4353 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
    float _2186 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2074 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2186) + _2145) * _2159))) * _2159;
    float _4364 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2208 = (((((_2179 * _2096) + _801) * cbLight._m0[_2133].x) * _2198) * _1928) + ((((cbLight._m0[_2045].x * _1897) * ((_2095 * _2096) + _801)) * _2119) * _1942);
    float _2209 = (((((_2179 * _2098) + _803) * cbLight._m0[_2133].y) * _2198) * _1928) + ((((cbLight._m0[_2045].y * _1898) * ((_2095 * _2098) + _803)) * _2119) * _1942);
    float _2210 = (((((_2179 * _2099) + _804) * cbLight._m0[_2133].z) * _2198) * _1928) + ((((cbLight._m0[_2045].z * _1899) * ((_2095 * _2099) + _804)) * _2119) * _1942);
    float _2272;
    float _2274;
    float _2276;
    if (_1982)
    {
        _2272 = _2208;
        _2274 = _2209;
        _2276 = _2210;
    }
    else
    {
        uint _2278 = _1905 + 2u;
        uint _2282 = _1905 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _640) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _716;
        float _2299 = cbLight._m0[_2278].y + _717;
        float _2300 = cbLight._m0[_2278].z + _718;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2278].xyz));
        float _4375 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2312 = dot(vec3(_637, _638, _639), vec3(_2305, _2306, _2307));
        float _4386 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4397 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_2074 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2338) + _2297) * _2311))) * _2311;
        float _4408 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2272 = (((((_2331 * _2096) + _801) * cbLight._m0[_2282].x) * _2350) * _2351) + _2208;
        _2274 = (((((_2331 * _2098) + _803) * cbLight._m0[_2282].y) * _2350) * _2351) + _2209;
        _2276 = (((((_2331 * _2099) + _804) * cbLight._m0[_2282].z) * _2350) * _2351) + _2210;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2000)
    {
        _2386 = _2272;
        _2388 = _2274;
        _2390 = _2276;
    }
    else
    {
        uint _2397 = _1905 + 3u;
        uint _2401 = _1905 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _640) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _716;
        float _2418 = cbLight._m0[_2397].y + _717;
        float _2419 = cbLight._m0[_2397].z + _718;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2397].xyz));
        float _4424 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2431 = dot(vec3(_637, _638, _639), vec3(_2424, _2425, _2426));
        float _4435 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4446 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2074 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2457) + _2416) * _2430))) * _2430;
        float _4457 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2386 = (((((_2450 * _2096) + _801) * cbLight._m0[_2401].x) * _2469) * _2470) + _2272;
        _2388 = (((((_2450 * _2098) + _803) * cbLight._m0[_2401].y) * _2469) * _2470) + _2274;
        _2390 = (((((_2450 * _2099) + _804) * cbLight._m0[_2401].z) * _2469) * _2470) + _2276;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1903.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
        }
        else
        {
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2861)
                {
                    frontier_phi_66_pred = _2845;
                    frontier_phi_66_pred_1 = _2850;
                    frontier_phi_66_pred_2 = _2849;
                    frontier_phi_66_pred_3 = _2848;
                    frontier_phi_66_pred_4 = _2847;
                    frontier_phi_66_pred_5 = _2846;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2860;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2851 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _2546;
                        float _3057 = _3016.y - _2547;
                        float _3058 = _3016.z - _2548;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_758, _761, _764), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4483 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3076 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3066) + _3077;
                        float _3083 = _3073 * _3073;
                        float _3087 = ((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3072) / ((_3083 * 0.699999988079071044921875) + 1.0);
                        float _3091 = (-0.0) - _2546;
                        float _3092 = (-0.0) - _2547;
                        float _3093 = (-0.0) - _2548;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3108 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                        float _3109 = 1.0 - _833;
                        float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                        float _3117 = _3116 * _3116;
                        float _3118 = _3117 * _3117;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3121 = _3100 + _3065;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3129 = dot(vec3(_758, _761, _764), vec3(_3098, _3099, _3100));
                        float _4499 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3133 = dot(vec3(_758, _761, _764), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                        float _4510 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                        float _3141 = _3076 * _3117;
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3066) + _3142;
                        float _4521 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3147 = 1.0 - _3117;
                        float _3157 = (0.5 / (((_3146 * ((_3132 * _3147) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3117) * _3132))) * _3146;
                        float _4532 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3168 = (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) / ((_3140 * _3140) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2920 = (_3087 * _3035.x) + _2993;
                        _2921 = (_3087 * _3035.y) + _2994;
                        _2922 = (_3087 * _3035.z) + _2995;
                        _2917 = (_3168 * _3052.x) + _2990;
                        _2918 = (_3168 * _3052.y) + _2991;
                        _2919 = (_3168 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_66_pred = _2917;
                    frontier_phi_66_pred_1 = _2922;
                    frontier_phi_66_pred_2 = _2921;
                    frontier_phi_66_pred_3 = _2920;
                    frontier_phi_66_pred_4 = _2919;
                    frontier_phi_66_pred_5 = _2918;
                }
                _2694 = frontier_phi_66_pred;
                _2704 = frontier_phi_66_pred_1;
                _2702 = frontier_phi_66_pred_2;
                _2700 = frontier_phi_66_pred_3;
                _2698 = frontier_phi_66_pred_4;
                _2696 = frontier_phi_66_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2694;
                    _2846 = _2696;
                    _2847 = _2698;
                    _2848 = _2700;
                    _2849 = _2702;
                    _2850 = _2704;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
        }
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.z;
        uint _2710 = (_2708 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2710) & _2592) == 0u)
        {
            _2813 = _2693;
            _2815 = _2695;
            _2817 = _2697;
            _2819 = _2699;
            _2821 = _2701;
            _2823 = _2703;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2839 = _2838 * _2546;
            float _2840 = _2838 * _2547;
            float _2841 = _2838 * _2548;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2710 < ((_2708 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2973 = _2693;
                float _2974 = _2695;
                float _2975 = _2697;
                float _2976 = _2699;
                float _2977 = _2701;
                float _2978 = _2703;
                uint _2979 = _2710;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2989)
                    {
                        frontier_phi_77_pred = _2978;
                        frontier_phi_77_pred_1 = _2977;
                        frontier_phi_77_pred_2 = _2976;
                        frontier_phi_77_pred_3 = _2975;
                        frontier_phi_77_pred_4 = _2974;
                        frontier_phi_77_pred_5 = _2973;
                    }
                    else
                    {
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        uint _3201 = _2988;
                        uint _3202;
                        vec4 _3227;
                        float _3228;
                        vec4 _3243;
                        vec3 _3255;
                        vec4 _3271;
                        vec4 _3287;
                        float _3333;
                        bool _3334;
                        for (;;)
                        {
                            uint _3212 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3201));
                            _3202 = (_3201 + 4294967295u) & _3201;
                            uint _3214 = _3212 * 40u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3228 = _3227.w;
                            uint _3230 = (_3212 * 40u) + 4u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3212 * 40u) + 8u;
                            _3255 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x));
                            uint _3258 = (_3212 * 40u) + 16u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3212 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3212 * 40u) + 24u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3308 = (_3212 * 40u) + 28u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3333 = fma(_2548, _3321.z, fma(_2547, _3321.y, _3321.x * _2546)) + _3321.w;
                            _3334 = !((fma(_2548, _3302.z, fma(_2547, _3302.y, _3302.x * _2546)) + _3302.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3334)
                            {
                                float _3361 = _3227.x - _2546;
                                float _3362 = _3227.y - _2547;
                                float _3363 = _3227.z - _2548;
                                float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                                float _3367 = inversesqrt(_3364);
                                float _3368 = _3367 * _3361;
                                float _3369 = _3367 * _3362;
                                float _3370 = _3367 * _3363;
                                float _3374 = 1.0 - (_3364 / (_3228 * _3228));
                                float _4543 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3379 = sqrt(_3364) * _3243.w;
                                float _3381 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                                float _3382 = _3381 * _3381;
                                float _3385 = ((1.0 - _3382) * dot(vec3(_3368, _3369, _3370), vec3(_758, _761, _764))) + _3382;
                                float _3388 = _3379 * _3379;
                                float _3392 = (fma(_2548, _3271.z, fma(_2547, _3271.y, _3271.x * _2546)) + _3271.w) / _3333;
                                float _3393 = (fma(_2548, _3287.z, fma(_2547, _3287.y, _3287.x * _2546)) + _3287.w) / _3333;
                                float _3397 = 1.0 - dot(vec2(_3392, _3393), vec2(_3392, _3393));
                                float _4559 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3399 = _3398 * (((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3375) / ((_3388 * 0.699999988079071044921875) + 1.0));
                                float _3411 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3412 = 1.0 - _833;
                                float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                                float _3420 = _3419 * _3419;
                                float _3421 = _3420 * _3420;
                                float _3422 = _3368 - _2839;
                                float _3423 = _3369 - _2840;
                                float _3424 = _3370 - _2841;
                                float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                                float _3432 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4570 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3436 = dot(vec3(_758, _761, _764), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                                float _4581 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                                float _3444 = _3381 * _3420;
                                float _3445 = _3444 * _3444;
                                float _3451 = ((1.0 - _3445) * dot(vec3(_758, _761, _764), vec3(_3368, _3369, _3370))) + _3445;
                                float _4592 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3453 = 1.0 - _3420;
                                float _3463 = (0.5 / (((_3452 * ((_3435 * _3453) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3420) * _3435))) * _3452;
                                float _4603 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3473 = (_3398 * _3375) * (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) / ((_3443 * _3443) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3399 * _3243.y;
                                frontier_phi_83_pred_1 = _3399 * _3243.x;
                                frontier_phi_83_pred_2 = _3473 * _3255.z;
                                frontier_phi_83_pred_3 = _3473 * _3255.y;
                                frontier_phi_83_pred_4 = _3473 * _3255.x;
                                frontier_phi_83_pred_5 = _3399 * _3243.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3481 = frontier_phi_83_pred;
                            _3480 = frontier_phi_83_pred_1;
                            _3479 = frontier_phi_83_pred_2;
                            _3478 = frontier_phi_83_pred_3;
                            _3477 = frontier_phi_83_pred_4;
                            _3482 = frontier_phi_83_pred_5;
                            _3185 = _3480 + _3198;
                            _3186 = _3481 + _3199;
                            _3187 = _3482 + _3200;
                            _3182 = _3477 + _3195;
                            _3183 = _3478 + _3196;
                            _3184 = _3479 + _3197;
                            if (_3202 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3202;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3187;
                        frontier_phi_77_pred_1 = _3186;
                        frontier_phi_77_pred_2 = _3185;
                        frontier_phi_77_pred_3 = _3184;
                        frontier_phi_77_pred_4 = _3183;
                        frontier_phi_77_pred_5 = _3182;
                    }
                    _2824 = frontier_phi_77_pred;
                    _2822 = frontier_phi_77_pred_1;
                    _2820 = frontier_phi_77_pred_2;
                    _2818 = frontier_phi_77_pred_3;
                    _2816 = frontier_phi_77_pred_4;
                    _2814 = frontier_phi_77_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2814;
                        _2974 = _2816;
                        _2975 = _2818;
                        _2976 = _2820;
                        _2977 = _2822;
                        _2978 = _2824;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2818;
                frontier_phi_58_59_ladder_1 = _2824;
                frontier_phi_58_59_ladder_2 = _2822;
                frontier_phi_58_59_ladder_3 = _2820;
                frontier_phi_58_59_ladder_4 = _2816;
                frontier_phi_58_59_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_58_59_ladder = _2697;
                frontier_phi_58_59_ladder_1 = _2703;
                frontier_phi_58_59_ladder_2 = _2701;
                frontier_phi_58_59_ladder_3 = _2699;
                frontier_phi_58_59_ladder_4 = _2695;
                frontier_phi_58_59_ladder_5 = _2693;
            }
            _2813 = frontier_phi_58_59_ladder_5;
            _2815 = frontier_phi_58_59_ladder_4;
            _2817 = frontier_phi_58_59_ladder;
            _2819 = frontier_phi_58_59_ladder_3;
            _2821 = frontier_phi_58_59_ladder_2;
            _2823 = frontier_phi_58_59_ladder_1;
        }
        float _2828 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2605 = (_2828 * _2819) + _2038;
        _2607 = (_2828 * _2821) + _2040;
        _2609 = (_2828 * _2823) + _2042;
        _2611 = ((_2813 * _801) * _2828) + _2386;
        _2613 = ((_2815 * _803) * _2828) + _2388;
        _2615 = ((_2817 * _804) * _2828) + _2390;
    }
    else
    {
        _2605 = _2038;
        _2607 = _2040;
        _2609 = _2042;
        _2611 = _2386;
        _2613 = _2388;
        _2615 = _2390;
    }
    float _4619 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4630 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4641 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2632 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2605 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _817))) + ((_2611 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1656)) * cbPerFrame._m0[3u].x);
    float _2633 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2607 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _817))) + ((_2613 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1656)) * cbPerFrame._m0[3u].x);
    float _2634 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2609 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _817))) + ((_2615 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1656)) * cbPerFrame._m0[3u].x);
    uint _2635 = _243 + 6u;
    float _2643 = _737 / cbSceneParam._m0[86u].x;
    float _2644 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2658 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2660 = _2658.x;
    float _2661 = _2658.y;
    float _2662 = _2658.z;
    float _2663 = _2658.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2718 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2719 = _2718 / _659;
        float _2730 = _2719 * _709;
        float _2731 = _710 * _2719;
        float _2732 = (-0.0) - _2731;
        float _2733 = _2719 * _711;
        float _2735 = (cbSceneParam._m0[77u].w * _2732) / _2718;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2731;
        float _2743 = sqrt(((_2730 * _2730) + (_2731 * _2731)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2718)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2732 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2876 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2930 = ((abs(_2743 / _2732) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2753 * _2885) - exp2(_2753 * _2886)) * _2874))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2663);
        _2755 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2660;
        _2757 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2661;
        _2759 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2662;
        _2761 = _2941 * _2663;
    }
    else
    {
        _2755 = _2660;
        _2757 = _2661;
        _2759 = _2662;
        _2761 = _2663;
    }
    bool _2968;
    vec4 _2771;
    vec4 _2793;
    float _2795;
    float _2799;
    float _2800;
    float _2801;
    float _2802;
    bool _2812;
    for (;;)
    {
        _2771 = cbMatDynParam._m0[0u];
        float _2773 = roundEven(_2771.y);
        bool _2774 = _2773 == 3.0;
        float _2775 = log2(_2761);
        float _2782 = exp2(_2775 * cbSceneParam._m0[78u].x) * _2632;
        float _2783 = exp2(_2775 * cbSceneParam._m0[78u].y) * _2633;
        float _2784 = exp2(_2775 * cbSceneParam._m0[78u].z) * _2634;
        float _2791 = _725 + (-0.5);
        _2793 = cbMtdParam._m0[1u];
        _2795 = _2793.y * _2791;
        float _2798 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2799 = _2798 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
        _2800 = _2798 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
        _2801 = _2798 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
        _2802 = _2791 * 0.999000012874603271484375;
        _2812 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2812)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2802) < 0.5)
            {
                _2968 = true;
                break;
            }
        }
        uint _2909 = _777 + uint(_2771.w);
        if ((cbInstanceData._m0[_2909].w < 1.0) && ((cbInstanceData._m0[_2909].w + _2802) < 0.5))
        {
            _2968 = true;
            break;
        }
        if ((_2795 + 1.0) < _2793.x)
        {
            _2968 = true;
            break;
        }
        _2968 = false;
        break;
    }
    float _3173;
    if (_2968)
    {
        discard_state = true;
        _3173 = 0.0;
    }
    else
    {
        _3173 = cbInstanceData._m0[_2635].w;
    }
    SV_Target.x = _2799;
    SV_Target.y = _2800;
    SV_Target.z = _2801;
    SV_Target.w = _3173;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2635].w;
    discard_exit();
}


