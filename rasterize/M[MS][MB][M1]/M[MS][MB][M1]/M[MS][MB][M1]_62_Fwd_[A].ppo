#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1139;
float _3522;
float _3523;
float _3524;
float _3525;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3534 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _442 = _440.x;
    float _443 = _440.y;
    float _444 = _440.z;
    float _453 = ((_423.z - _444) * _376) + _444;
    float _456 = ((((_423.x - _442) * _376) + _442) * 2.0) + (-1.0);
    float _457 = ((((_423.y - _443) * _376) + _443) * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3545 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))));
    float _468 = _456 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_398.x * 2.0) + (-1.0)));
    float _469 = _457 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_398.y * 2.0) + (-1.0)));
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _512 = _510.x;
    float _530 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _512) * _376) + _512;
    float _534 = ((_496.x - _530) * cbMtdParam._m0[19u].z) + _530;
    float _539 = (((_398.z - _453) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _453;
    float _544 = cbMtdParam._m0[22u].x + _482.w;
    float _547 = fma(_463, _225 * NORMAL.x, fma(_469, _232 * TANGENT.x, (_218 * _210) * _468));
    float _550 = fma(_463, _225 * NORMAL.y, fma(_469, _232 * TANGENT.y, (_218 * _211) * _468));
    float _553 = fma(_463, _225 * NORMAL.z, fma(_469, _232 * TANGENT.z, (_218 * _212) * _468));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3556 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _561 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3578 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3589 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3600 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3611 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _566 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _580 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    vec4 _645 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _647 = _645.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _819 = sqrt(((_631 * _631) + (_632 * _632)) + (_633 * _633));
        float _825 = (cbMatDynParam._m0[5u].x * _819) + cbMatDynParam._m0[5u].y;
        float _3622 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _830 = (cbMatDynParam._m0[5u].z * _819) + cbMatDynParam._m0[5u].w;
        float _3633 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) - _826)) + _826) < ((_647 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _677 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _680 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _683 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    uint _696 = _238 + 9u;
    uint _697 = _696 + uint(cbMatDynParam._m0[0u].w);
    float _703 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_697].x;
    float _704 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_697].y;
    float _705 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_697].z;
    float _3644 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _709 = 1.0 - _566;
    float _710 = _706 * _709;
    float _711 = _707 * _709;
    float _712 = _708 * _709;
    float _717 = (_706 + (-0.039999999105930328369140625)) * _566;
    float _718 = (_707 + (-0.039999999105930328369140625)) * _566;
    float _719 = (_708 + (-0.039999999105930328369140625)) * _566;
    float _720 = _717 + 0.039999999105930328369140625;
    float _722 = _718 + 0.039999999105930328369140625;
    float _723 = _719 + 0.039999999105930328369140625;
    vec4 _732 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _736 = ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * TEXCOORD_5.w) * _732.x;
    float _737 = dot(vec3(_558, _559, _560), vec3(_638, _639, _640));
    float _740 = _737 * 2.0;
    float _744 = (_740 * _558) - _638;
    float _745 = (_740 * _559) - _639;
    float _746 = (_740 * _560) - _640;
    float _750 = abs(dot(vec3(_638, _639, _640), vec3(_558, _559, _560)));
    float _3677 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _752 = sqrt(_561);
    float _765 = exp2((_752 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_752 * 3.0));
    float _771 = (1.0 - _765) * ((_752 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _772 = _765 * _752;
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1138;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _867 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _871 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _896 = _800 + _558;
        float _897 = _804 + _559;
        float _898 = _808 + _560;
        float _908 = fma(_898, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896)) - _863;
        float _909 = fma(_898, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896)) - _867;
        float _910 = fma(_898, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896)) - _871;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _966 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_932.x + (-0.5));
        float _968 = _966 * (_932.y + (-0.5));
        float _969 = _966 * (_932.z + (-0.5));
        float _976 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_939.x + (-0.5));
        float _978 = _976 * (_939.y + (-0.5));
        float _979 = _976 * (_939.z + (-0.5));
        float _986 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_946.x + (-0.5));
        float _988 = _986 * (_946.y + (-0.5));
        float _989 = _986 * (_946.z + (-0.5));
        float _996 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_953.x + (-0.5));
        float _998 = _996 * (_953.y + (-0.5));
        float _999 = _996 * (_953.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1020 = (dot(vec3(_558, _559, _560), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1030 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3725 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1032 + 1.0))) + _1037) * _1000;
        float _1047 = _968 * 0.5;
        float _1048 = _978 * 0.5;
        float _1049 = _988 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_558, _559, _560), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3758 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1074 + 1.0))) + _1079) * _1001;
        float _1089 = _969 * 0.5;
        float _1090 = _979 * 0.5;
        float _1091 = _989 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_558, _559, _560), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3791 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1116 + 1.0))) + _1121) * _1002;
        _1138 = _969;
        _1140 = _968;
        _1141 = _967;
        _1142 = _979;
        _1143 = _978;
        _1144 = _977;
        _1145 = _989;
        _1146 = _988;
        _1147 = _987;
        _1148 = _1002;
        _1149 = _1001;
        _1150 = _1000;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _1139;
        _1140 = _1139;
        _1141 = _1139;
        _1142 = _1139;
        _1143 = _1139;
        _1144 = _1139;
        _1145 = _1139;
        _1146 = _1139;
        _1147 = _1139;
        _1148 = _1139;
        _1149 = _1139;
        _1150 = _1139;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1181 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1185 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1189 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1212 = _800 + _558;
        float _1213 = _804 + _559;
        float _1214 = _808 + _560;
        float _1224 = fma(_1214, cbModelParam._m0[30u].z, fma(_1213, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1212)) - _1181;
        float _1225 = fma(_1214, cbModelParam._m0[31u].z, fma(_1213, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1212)) - _1185;
        float _1226 = fma(_1214, cbModelParam._m0[32u].z, fma(_1213, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1212)) - _1189;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1181 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1185 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[35u].z) + ((((((_1189 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1280 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1247.x + (-0.5));
        float _1282 = _1280 * (_1247.y + (-0.5));
        float _1283 = _1280 * (_1247.z + (-0.5));
        float _1290 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1254.x + (-0.5));
        float _1292 = _1290 * (_1254.y + (-0.5));
        float _1293 = _1290 * (_1254.z + (-0.5));
        float _1300 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1261.x + (-0.5));
        float _1302 = _1300 * (_1261.y + (-0.5));
        float _1303 = _1300 * (_1261.z + (-0.5));
        float _1310 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1268.x + (-0.5));
        float _1312 = _1310 * (_1268.y + (-0.5));
        float _1313 = _1310 * (_1268.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_558, _559, _560), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3854 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1344 + 1.0))) + _1349) * _1314;
        float _1359 = _1282 * 0.5;
        float _1360 = _1292 * 0.5;
        float _1361 = _1302 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_558, _559, _560), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3887 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1386 + 1.0))) + _1391) * _1315;
        float _1401 = _1283 * 0.5;
        float _1402 = _1293 * 0.5;
        float _1403 = _1303 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_558, _559, _560), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3920 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1428 + 1.0))) + _1433) * _1316;
        _1450 = _1283;
        _1451 = _1282;
        _1452 = _1281;
        _1453 = _1293;
        _1454 = _1292;
        _1455 = _1291;
        _1456 = _1303;
        _1457 = _1302;
        _1458 = _1301;
        _1459 = _1316;
        _1460 = _1315;
        _1461 = _1314;
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1139;
        _1451 = _1139;
        _1452 = _1139;
        _1453 = _1139;
        _1454 = _1139;
        _1455 = _1139;
        _1456 = _1139;
        _1457 = _1139;
        _1458 = _1139;
        _1459 = _1139;
        _1460 = _1139;
        _1461 = _1139;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1151)) + _1151;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1497 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1474));
    float _1518 = _744 * 0.5;
    float _1519 = _745 * 0.5;
    float _1520 = _746 * 0.5;
    float _1521 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1524 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1527 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1561;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1534 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1138, _1142, _1145, _1148));
        float _1538 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1542 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1549 = dot(vec4(cbModelParam._m0[39u]), vec4(_1518, _1519, _1520, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1572;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1563 = dot(vec4(cbModelParam._m0[40u]), vec4(_1518, _1519, _1520, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1576 = (_1572 * cbModelParam._m0[1u].x) + (_1561 * (1.0 - cbModelParam._m0[1u].x));
    float _1586 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _561);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1586 : min(cbModelParam._m0[25u].z, _1586));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1650 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1653 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1885;
        if (_1650 > 0.0)
        {
            _1885 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1885 = frontier_phi_26_22_ladder;
        }
        float _2139;
        if (_1653 > 0.0)
        {
            _2139 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2139 = frontier_phi_38_33_ladder;
        }
        float _2141 = isnan(_1885) ? _1681 : (isnan(_1681) ? _1885 : min(_1681, _1885));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1647) + _1636;
        float _2147 = (_2142 * _1650) + _1640;
        float _2148 = (_2142 * _1653) + _1644;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1587);
            frontier_phi_16_38_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1587);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _561);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1747 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1750 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _1890;
        if (_1744 > 0.0)
        {
            _1890 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1890 = frontier_phi_28_24_ladder;
        }
        float _2166;
        if (_1747 > 0.0)
        {
            _2166 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2166 = frontier_phi_40_35_ladder;
        }
        float _2379;
        if (_1750 > 0.0)
        {
            _2379 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2379 = frontier_phi_49_46_ladder;
        }
        float _2381 = isnan(_2166) ? _1890 : (isnan(_1890) ? _2166 : min(_1890, _2166));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1744) + _1733;
        float _2387 = (_2382 * _1747) + _1737;
        float _2388 = (_2382 * _1750) + _1741;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_49_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_25_49_ladder_2;
        _1771 = frontier_phi_25_49_ladder_1;
        _1773 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1678);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1786 = (((_771 * _720) + _772) * _736) * ((cbModelParam._m0[1u].w * (_1769 - _1669)) + _1669);
    float _1788 = (((_771 * _722) + _772) * _736) * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1790 = (((_771 * _723) + _772) * _736) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _736 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1844 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1848 = _1811 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_558, _559, _560));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_558, _559, _560));
    float _4056 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _4067 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1828].x * _1834) * _1869) + ((cbLight._m0[_1838].x * _1844) * _1867);
    float _1877 = ((_1834 * cbLight._m0[_1828].y) * _1869) + ((_1844 * cbLight._m0[_1838].y) * _1867);
    float _1878 = ((_1834 * cbLight._m0[_1828].z) * _1869) + ((_1844 * cbLight._m0[_1838].z) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1884)
    {
        _1895 = _1876;
        _1897 = _1877;
        _1899 = _1878;
    }
    else
    {
        uint _1903 = _1811 + 6u;
        float _1919 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _4078 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1922 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1895 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1876;
        _1897 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1877;
        _1899 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1878;
    }
    bool _1902 = _1882.y == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1902)
    {
        _1940 = _1895;
        _1942 = _1897;
        _1944 = _1899;
    }
    else
    {
        uint _2110 = _1811 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4094 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2129 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1940 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1895;
        _1942 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1897;
        _1944 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1899;
    }
    uint _1947 = _1811 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _561) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1811].x + _638;
    float _1963 = cbLight._m0[_1811].y + _639;
    float _1964 = cbLight._m0[_1811].z + _640;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1811].xyz));
    float _4110 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _1976 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1977 = dot(vec3(_558, _559, _560), vec3(_1969, _1970, _1971));
    float _4132 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1969, _1970, _1971));
    float _4143 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
    float _1998 = 0.959999978542327880859375 - _717;
    float _2000 = 0.959999978542327880859375 - _718;
    float _2001 = 0.959999978542327880859375 - _719;
    float _2008 = 1.0 - _1961;
    float _2019 = (0.5 / (((_1976 * ((_1975 * _2008) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2008) + _1961) * _1975))) * _1975;
    float _4154 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2032 = _1811 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _561) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1848].x + _638;
    float _2046 = cbLight._m0[_1848].y + _639;
    float _2047 = cbLight._m0[_1848].z + _640;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1848].xyz));
    float _4165 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2059 = dot(vec3(_558, _559, _560), vec3(_2052, _2053, _2054));
    float _4176 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2052, _2053, _2054));
    float _4187 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2078 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
    float _2085 = 1.0 - _2044;
    float _2095 = (0.5 / (((_1976 * ((_2058 * _2085) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2085) + _2044) * _2058))) * _2058;
    float _4198 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2107 = (((((_2078 * _1998) + _720) * cbLight._m0[_2032].x) * _2097) * _1834) + (((((_1997 * _1998) + _720) * cbLight._m0[_1947].x) * _2021) * _1844);
    float _2108 = (((((_2078 * _2000) + _722) * cbLight._m0[_2032].y) * _2097) * _1834) + (((((_1997 * _2000) + _722) * cbLight._m0[_1947].y) * _2021) * _1844);
    float _2109 = (((((_2078 * _2001) + _723) * cbLight._m0[_2032].z) * _2097) * _1834) + (((((_1997 * _2001) + _723) * cbLight._m0[_1947].z) * _2021) * _1844);
    float _2171;
    float _2173;
    float _2175;
    if (_1884)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1811 + 2u;
        uint _2181 = _1811 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _561) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _638;
        float _2198 = cbLight._m0[_2177].y + _639;
        float _2199 = cbLight._m0[_2177].z + _640;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2177].xyz));
        float _4209 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2211 = dot(vec3(_558, _559, _560), vec3(_2204, _2205, _2206));
        float _4220 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4231 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1976 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2237) + _2196) * _2210))) * _2210;
        float _4242 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2171 = (((((_2230 * _1998) + _720) * cbLight._m0[_2181].x) * _2249) * _2250) + _2107;
        _2173 = (((((_2230 * _2000) + _722) * cbLight._m0[_2181].y) * _2249) * _2250) + _2108;
        _2175 = (((((_2230 * _2001) + _723) * cbLight._m0[_2181].z) * _2249) * _2250) + _2109;
    }
    float _2285;
    float _2287;
    float _2289;
    if (_1902)
    {
        _2285 = _2171;
        _2287 = _2173;
        _2289 = _2175;
    }
    else
    {
        uint _2296 = _1811 + 3u;
        uint _2300 = _1811 + 11u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _561) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _638;
        float _2317 = cbLight._m0[_2296].y + _639;
        float _2318 = cbLight._m0[_2296].z + _640;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2296].xyz));
        float _4258 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2330 = dot(vec3(_558, _559, _560), vec3(_2323, _2324, _2325));
        float _4269 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4280 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0);
        float _2356 = 1.0 - _2315;
        float _2366 = (0.5 / (((_1976 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2356) + _2315) * _2329))) * _2329;
        float _4291 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2285 = (((((_2349 * _1998) + _720) * cbLight._m0[_2300].x) * _2368) * _2369) + _2171;
        _2287 = (((((_2349 * _2000) + _722) * cbLight._m0[_2300].y) * _2368) * _2369) + _2173;
        _2289 = (((((_2349 * _2001) + _723) * cbLight._m0[_2300].z) * _2368) * _2369) + _2175;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1809.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2761)
                {
                    frontier_phi_66_pred = _2745;
                    frontier_phi_66_pred_1 = _2750;
                    frontier_phi_66_pred_2 = _2749;
                    frontier_phi_66_pred_3 = _2748;
                    frontier_phi_66_pred_4 = _2747;
                    frontier_phi_66_pred_5 = _2746;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2760;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2751 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2445;
                        float _2957 = _2916.y - _2446;
                        float _2958 = _2916.z - _2447;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_677, _680, _683), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4317 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2445;
                        float _2992 = (-0.0) - _2446;
                        float _2993 = (-0.0) - _2447;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _752;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_677, _680, _683), vec3(_2998, _2999, _3000));
                        float _4333 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3033 = dot(vec3(_677, _680, _683), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4344 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4355 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4366 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2820 = (_2987 * _2935.x) + _2893;
                        _2821 = (_2987 * _2935.y) + _2894;
                        _2822 = (_2987 * _2935.z) + _2895;
                        _2817 = (_3068 * _2952.x) + _2890;
                        _2818 = (_3068 * _2952.y) + _2891;
                        _2819 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_66_pred = _2817;
                    frontier_phi_66_pred_1 = _2822;
                    frontier_phi_66_pred_2 = _2821;
                    frontier_phi_66_pred_3 = _2820;
                    frontier_phi_66_pred_4 = _2819;
                    frontier_phi_66_pred_5 = _2818;
                }
                _2593 = frontier_phi_66_pred;
                _2603 = frontier_phi_66_pred_1;
                _2601 = frontier_phi_66_pred_2;
                _2599 = frontier_phi_66_pred_3;
                _2597 = frontier_phi_66_pred_4;
                _2595 = frontier_phi_66_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2593;
                    _2746 = _2595;
                    _2747 = _2597;
                    _2748 = _2599;
                    _2749 = _2601;
                    _2750 = _2603;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2609) & _2491) == 0u)
        {
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2739 = _2738 * _2445;
            float _2740 = _2738 * _2446;
            float _2741 = _2738 * _2447;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2873 = _2592;
                float _2874 = _2594;
                float _2875 = _2596;
                float _2876 = _2598;
                float _2877 = _2600;
                float _2878 = _2602;
                uint _2879 = _2609;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2889)
                    {
                        frontier_phi_77_pred = _2878;
                        frontier_phi_77_pred_1 = _2877;
                        frontier_phi_77_pred_2 = _2876;
                        frontier_phi_77_pred_3 = _2875;
                        frontier_phi_77_pred_4 = _2874;
                        frontier_phi_77_pred_5 = _2873;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        uint _3101 = _2888;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3185;
                        float _3231;
                        bool _3232;
                        for (;;)
                        {
                            uint _3112 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3112 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3112 * 40u) + 24u;
                            vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3206 = (_3112 * 40u) + 28u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3231 = fma(_2447, _3219.z, fma(_2446, _3219.y, _3219.x * _2445)) + _3219.w;
                            _3232 = !((fma(_2447, _3200.z, fma(_2446, _3200.y, _3200.x * _2445)) + _3200.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3232)
                            {
                                float _3259 = _3127.x - _2445;
                                float _3260 = _3127.y - _2446;
                                float _3261 = _3127.z - _2447;
                                float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                                float _3265 = inversesqrt(_3262);
                                float _3266 = _3265 * _3259;
                                float _3267 = _3265 * _3260;
                                float _3268 = _3265 * _3261;
                                float _3272 = 1.0 - (_3262 / (_3128 * _3128));
                                float _4377 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3277 = sqrt(_3262) * _3143.w;
                                float _3279 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                                float _3280 = _3279 * _3279;
                                float _3283 = ((1.0 - _3280) * dot(vec3(_3266, _3267, _3268), vec3(_677, _680, _683))) + _3280;
                                float _3286 = _3277 * _3277;
                                float _3290 = (fma(_2447, _3170.z, fma(_2446, _3170.y, _3170.x * _2445)) + _3170.w) / _3231;
                                float _3291 = (fma(_2447, _3185.z, fma(_2446, _3185.y, _3185.x * _2445)) + _3185.w) / _3231;
                                float _3295 = 1.0 - dot(vec2(_3290, _3291), vec2(_3290, _3291));
                                float _4393 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3297 = _3296 * (((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3273) / ((_3286 * 0.699999988079071044921875) + 1.0));
                                float _3309 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                                float _3310 = 1.0 - _752;
                                float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                                float _3318 = _3317 * _3317;
                                float _3319 = _3318 * _3318;
                                float _3320 = _3266 - _2739;
                                float _3321 = _3267 - _2740;
                                float _3322 = _3268 - _2741;
                                float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                                float _3330 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4404 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3334 = dot(vec3(_677, _680, _683), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                                float _4415 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                                float _3342 = _3279 * _3318;
                                float _3343 = _3342 * _3342;
                                float _3349 = ((1.0 - _3343) * dot(vec3(_677, _680, _683), vec3(_3266, _3267, _3268))) + _3343;
                                float _4426 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3351 = 1.0 - _3318;
                                float _3361 = (0.5 / (((_3350 * ((_3333 * _3351) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3318) * _3333))) * _3350;
                                float _4437 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3371 = (_3296 * _3273) * (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3341 * _3341) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3297 * _3143.y;
                                frontier_phi_83_pred_1 = _3297 * _3143.x;
                                frontier_phi_83_pred_2 = _3371 * _3155.z;
                                frontier_phi_83_pred_3 = _3371 * _3155.y;
                                frontier_phi_83_pred_4 = _3371 * _3155.x;
                                frontier_phi_83_pred_5 = _3297 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3379 = frontier_phi_83_pred;
                            _3378 = frontier_phi_83_pred_1;
                            _3377 = frontier_phi_83_pred_2;
                            _3376 = frontier_phi_83_pred_3;
                            _3375 = frontier_phi_83_pred_4;
                            _3380 = frontier_phi_83_pred_5;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            _3082 = _3375 + _3095;
                            _3083 = _3376 + _3096;
                            _3084 = _3377 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3087;
                        frontier_phi_77_pred_1 = _3086;
                        frontier_phi_77_pred_2 = _3085;
                        frontier_phi_77_pred_3 = _3084;
                        frontier_phi_77_pred_4 = _3083;
                        frontier_phi_77_pred_5 = _3082;
                    }
                    _2724 = frontier_phi_77_pred;
                    _2722 = frontier_phi_77_pred_1;
                    _2720 = frontier_phi_77_pred_2;
                    _2718 = frontier_phi_77_pred_3;
                    _2716 = frontier_phi_77_pred_4;
                    _2714 = frontier_phi_77_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2714;
                        _2874 = _2716;
                        _2875 = _2718;
                        _2876 = _2720;
                        _2877 = _2722;
                        _2878 = _2724;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2718;
                frontier_phi_58_59_ladder_1 = _2724;
                frontier_phi_58_59_ladder_2 = _2722;
                frontier_phi_58_59_ladder_3 = _2720;
                frontier_phi_58_59_ladder_4 = _2716;
                frontier_phi_58_59_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_58_59_ladder = _2596;
                frontier_phi_58_59_ladder_1 = _2602;
                frontier_phi_58_59_ladder_2 = _2600;
                frontier_phi_58_59_ladder_3 = _2598;
                frontier_phi_58_59_ladder_4 = _2594;
                frontier_phi_58_59_ladder_5 = _2592;
            }
            _2713 = frontier_phi_58_59_ladder_5;
            _2715 = frontier_phi_58_59_ladder_4;
            _2717 = frontier_phi_58_59_ladder;
            _2719 = frontier_phi_58_59_ladder_3;
            _2721 = frontier_phi_58_59_ladder_2;
            _2723 = frontier_phi_58_59_ladder_1;
        }
        float _2728 = isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0));
        _2504 = (_2728 * _2719) + _1940;
        _2506 = (_2728 * _2721) + _1942;
        _2508 = (_2728 * _2723) + _1944;
        _2510 = ((_2713 * _720) * _2728) + _2285;
        _2512 = ((_2715 * _722) * _2728) + _2287;
        _2514 = ((_2717 * _723) * _2728) + _2289;
    }
    else
    {
        _2504 = _1940;
        _2506 = _1942;
        _2508 = _1944;
        _2510 = _2285;
        _2512 = _2287;
        _2514 = _2289;
    }
    float _4453 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4464 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4475 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _2531 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2504 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _736))) + ((_2510 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    float _2532 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2506 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _736))) + ((_2512 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    float _2533 = ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2508 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _736))) + ((_2514 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    uint _2534 = _238 + 6u;
    float _2542 = _658 / cbSceneParam._m0[86u].x;
    float _2543 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _580 : (isnan(_580) ? cbSceneParam._m0[77u].w : min(_580, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_580 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_580) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _580 : min(cbSceneParam._m0[80u].w, _580));
        float _2618 = _2617 / _580;
        float _2629 = _2618 * _631;
        float _2630 = _632 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2633 = _2618 * _633;
        float _2635 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2630;
        float _2643 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2631 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2776 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2830 = ((abs(_2643 / _2631) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2653 * _2785) - exp2(_2653 * _2786)) * _2774))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2562);
        _2655 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2657 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2659 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2661 = _2841 * _2562;
    }
    else
    {
        _2655 = _2559;
        _2657 = _2560;
        _2659 = _2561;
        _2661 = _2562;
    }
    bool _2868;
    vec4 _2671;
    vec4 _2693;
    float _2695;
    float _2699;
    float _2700;
    float _2701;
    float _2702;
    bool _2712;
    for (;;)
    {
        _2671 = cbMatDynParam._m0[0u];
        float _2673 = roundEven(_2671.y);
        bool _2674 = _2673 == 3.0;
        float _2675 = log2(_2661);
        float _2682 = exp2(_2675 * cbSceneParam._m0[78u].x) * _2531;
        float _2683 = exp2(_2675 * cbSceneParam._m0[78u].y) * _2532;
        float _2684 = exp2(_2675 * cbSceneParam._m0[78u].z) * _2533;
        float _2691 = _647 + (-0.5);
        _2693 = cbMtdParam._m0[1u];
        _2695 = _2693.y * _2691;
        float _2698 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2699 = _2698 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
        _2700 = _2698 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
        _2701 = _2698 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
        _2702 = _2691 * 0.999000012874603271484375;
        _2712 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2712)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2702) < 0.5)
            {
                _2868 = true;
                break;
            }
        }
        uint _2809 = _696 + uint(_2671.w);
        if ((cbInstanceData._m0[_2809].w < 1.0) && ((cbInstanceData._m0[_2809].w + _2702) < 0.5))
        {
            _2868 = true;
            break;
        }
        if ((_2695 + 1.0) < _2693.x)
        {
            _2868 = true;
            break;
        }
        _2868 = false;
        break;
    }
    float _3073;
    if (_2868)
    {
        discard_state = true;
        _3073 = 0.0;
    }
    else
    {
        _3073 = cbInstanceData._m0[_2534].w;
    }
    SV_Target.x = _2699;
    SV_Target.y = _2700;
    SV_Target.z = _2701;
    SV_Target.w = _3073;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2534].w;
    discard_exit();
}


