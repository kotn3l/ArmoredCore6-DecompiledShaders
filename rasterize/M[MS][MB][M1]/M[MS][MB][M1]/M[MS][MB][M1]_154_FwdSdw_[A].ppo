#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3939;
float _3940;
float _3941;
float _3942;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3951 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _382) + _451;
    float _463 = ((((_430.x - _449) * _382) + _449) * 2.0) + (-1.0);
    float _465 = ((((_430.y - _450) * _382) + _450) * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3962 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _499 = (((_487.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _463;
    float _500 = (((_487.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _465;
    float _503 = fma(_471, _232, fma(_500, _239, _499 * _225));
    float _506 = fma(_471, _233, fma(_500, _240, _499 * _226));
    float _509 = fma(_471, _234, fma(_500, _241, _499 * _227));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _547 = ((_542 - _543) * cbMtdParam._m0[24u].z) + _543;
    float _549 = (cbMtdParam._m0[19u].x + dot(vec4(_513 * _503, _513 * _506, _513 * _509, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_547 * cbMtdParam._m0[21u].z);
    float _3973 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _565 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_547 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3984 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _570 = ((_550 * ((_410.x * cbMtdParam._m0[18u].x) - _389)) * _566) + _389;
    float _571 = ((_550 * ((_410.y * cbMtdParam._m0[18u].y) - _390)) * _566) + _390;
    float _572 = ((_550 * ((_410.z * cbMtdParam._m0[18u].z) - _391)) * _566) + _391;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _600 = _598.x;
    float _618 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _600) * _382) + _600;
    float _622 = ((_584.x - _618) * cbMtdParam._m0[19u].z) + _618;
    float _625 = _622 - ((_566 * _550) * _622);
    float _629 = (cbMtdParam._m0[19u].w * (_487.z - _460)) + _460;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3995 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _660 = (((_642.z - _629) * _550) * _566) + _629;
    float _675 = (((cbMtdParam._m0[21u].x * _499) + ((_649 - _499) * _550)) * _566) + _499;
    float _676 = (((cbMtdParam._m0[21u].x * _500) + ((_650 - _500) * _550)) * _566) + _500;
    float _677 = (((sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) - _471) * _550) * _566) + _471;
    float _682 = cbMtdParam._m0[22u].x + _487.w;
    float _685 = fma(_677, _232, fma(_676, _239, _675 * _225));
    float _688 = fma(_677, _233, fma(_676, _240, _675 * _226));
    float _691 = fma(_677, _234, fma(_676, _241, _675 * _227));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _4006 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _699 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4028 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4039 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4050 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4061 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _704 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    vec4 _783 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _785 = _783.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_769 * _769) + (_770 * _770)) + (_771 * _771));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _4072 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _4083 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) - _964)) + _964) < ((_785 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _818 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _821 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _834 = _244 + 9u;
    uint _835 = _834 + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_835].z;
    float _4094 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _847 = 1.0 - _704;
    float _848 = _844 * _847;
    float _849 = _845 * _847;
    float _850 = _846 * _847;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _704;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _704;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _704;
    float _858 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _874 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * TEXCOORD_5.w) * _870.x;
    float _875 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _696) - _776;
    float _883 = (_878 * _697) - _777;
    float _884 = (_878 * _698) - _778;
    float _888 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _4127 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_699);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _909 = (1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _890;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1004 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1008 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1033 = _938 + _696;
        float _1034 = _942 + _697;
        float _1035 = _946 + _698;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_696, _697, _698), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4175 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_696, _697, _698), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4208 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_696, _697, _698), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4241 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1322 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1326 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1349 = _938 + _696;
        float _1350 = _942 + _697;
        float _1351 = _946 + _698;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_696, _697, _698), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4304 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_696, _697, _698), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4337 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_696, _697, _698), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4370 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = _1276;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _882 * 0.5;
    float _1656 = _883 * 0.5;
    float _1657 = _884 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1785 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1788 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1816 = frontier_phi_17_15_ladder;
        }
        float _1987;
        if (_1785 > 0.0)
        {
            _1987 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1987 = frontier_phi_26_22_ladder;
        }
        float _2282;
        if (_1788 > 0.0)
        {
            _2282 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2282 = frontier_phi_38_33_ladder;
        }
        float _2284 = isnan(_1987) ? _1816 : (isnan(_1816) ? _1987 : min(_1816, _1987));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1782) + _1771;
        float _2290 = (_2285 * _1785) + _1775;
        float _2291 = (_2285 * _1788) + _1779;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_16_38_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_16_38_ladder_2;
        _1806 = frontier_phi_16_38_ladder_1;
        _1808 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1724);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1880 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1883 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _1992;
        if (_1877 > 0.0)
        {
            _1992 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1992 = frontier_phi_28_24_ladder;
        }
        float _2309;
        if (_1880 > 0.0)
        {
            _2309 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2309 = frontier_phi_40_35_ladder;
        }
        float _2647;
        if (_1883 > 0.0)
        {
            _2647 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2647 = frontier_phi_50_47_ladder;
        }
        float _2649 = isnan(_2309) ? _1992 : (isnan(_1992) ? _2309 : min(_1992, _2309));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _1877) + _1866;
        float _2655 = (_2650 * _1880) + _1870;
        float _2656 = (_2650 * _1883) + _1874;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_25_50_ladder = _2778.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2778.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2778.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_25_50_ladder_2;
        _1904 = frontier_phi_25_50_ladder_1;
        _1906 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1813);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1919 = (((_909 * _858) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1921 = (((_909 * _860) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1923 = (((_909 * _861) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1979 = _1966 / _1978;
    float _1980 = _1970 / _1978;
    float _1981 = _1974 / _1978;
    float _2128;
    float _2129;
    float _2130;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2008 = ((uint(_1981 > cbSceneParam._m0[59u].y) + uint(_1981 > cbSceneParam._m0[59u].x)) + uint(_1981 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2009 = _2008 + 43u;
        uint _2017 = _2008 + 44u;
        uint _2025 = _2008 + 45u;
        uint _2033 = _2008 + 46u;
        float _2044 = fma(_1978, cbSceneParam._m0[_2009].w, fma(_1974, cbSceneParam._m0[_2009].z, fma(_1970, cbSceneParam._m0[_2009].y, _1966 * cbSceneParam._m0[_2009].x)));
        float _2048 = fma(_1978, cbSceneParam._m0[_2017].w, fma(_1974, cbSceneParam._m0[_2017].z, fma(_1970, cbSceneParam._m0[_2017].y, _1966 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1978, cbSceneParam._m0[_2033].w, fma(_1974, cbSceneParam._m0[_2033].z, fma(_1970, cbSceneParam._m0[_2033].y, _1966 * cbSceneParam._m0[_2033].x)));
        float _2061 = cbSceneParam._m0[33u].z * _2056;
        float _2063 = cbSceneParam._m0[33u].w * _2056;
        float _2066 = fma(_1978, cbSceneParam._m0[_2025].w, fma(_1974, cbSceneParam._m0[_2025].z, fma(_1970, cbSceneParam._m0[_2025].y, _1966 * cbSceneParam._m0[_2025].x))) / _2056;
        float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
        float _4496 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2121 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2044) / _2056, (_2063 + _2048) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2044) / _2056, (_2048 - _2061) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2061) / _2056, (_2048 - _2063) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2063) / _2056, (_2061 + _2048) / _2056), _2066), 0.0)).x), vec4(0.25)));
        _2128 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
        _2129 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
        _2130 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2128 = 1.0;
        _2129 = 1.0;
        _2130 = 1.0;
    }
    float _2194;
    float _2196;
    float _2198;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2182 = fma(_1978, cbSceneParam._m0[63u].w, fma(_1974, cbSceneParam._m0[63u].z, fma(_1970, cbSceneParam._m0[63u].y, _1966 * cbSceneParam._m0[63u].x)));
        float _2183 = fma(_1978, cbSceneParam._m0[60u].w, fma(_1974, cbSceneParam._m0[60u].z, fma(_1970, cbSceneParam._m0[60u].y, _1966 * cbSceneParam._m0[60u].x))) / _2182;
        float _2184 = fma(_1978, cbSceneParam._m0[61u].w, fma(_1974, cbSceneParam._m0[61u].z, fma(_1970, cbSceneParam._m0[61u].y, _1966 * cbSceneParam._m0[61u].x))) / _2182;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2183 >= cbSceneParam._m0[64u].x) && (_2184 >= cbSceneParam._m0[64u].y)) && (_2183 <= cbSceneParam._m0[64u].z)) && (_2184 <= cbSceneParam._m0[64u].w))
        {
            float _2322 = fma(_1978, cbSceneParam._m0[62u].w, fma(_1974, cbSceneParam._m0[62u].z, fma(_1970, cbSceneParam._m0[62u].y, _1966 * cbSceneParam._m0[62u].x))) / _2182;
            float _2326 = isnan(cbSceneParam._m0[41u].w) ? _2322 : (isnan(_2322) ? cbSceneParam._m0[41u].w : max(_2322, cbSceneParam._m0[41u].w));
            float _2369 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
            float _4512 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
            float _2376 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2183, cbSceneParam._m0[33u].w + _2184), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2183, _2184 - cbSceneParam._m0[33u].z), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].z, _2184 - cbSceneParam._m0[33u].w), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2184), _2326), 0.0)).x), vec4(0.25)));
            float _2380 = 1.0 - (_2376 * cbSceneParam._m0[34u].x);
            float _2381 = 1.0 - (_2376 * cbSceneParam._m0[34u].y);
            float _2382 = 1.0 - (_2376 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_37_36_ladder_1 = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_37_36_ladder_2 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
        }
        else
        {
            frontier_phi_37_36_ladder = _2130;
            frontier_phi_37_36_ladder_1 = _2129;
            frontier_phi_37_36_ladder_2 = _2128;
        }
        _2194 = frontier_phi_37_36_ladder_2;
        _2196 = frontier_phi_37_36_ladder_1;
        _2198 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2194 = _2128;
        _2196 = _2129;
        _2198 = _2130;
    }
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _874 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_696, _697, _698));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_696, _697, _698));
    float _4548 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4559 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2194) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2196) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2198) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2281)
    {
        _2383 = _2273;
        _2385 = _2274;
        _2387 = _2275;
    }
    else
    {
        uint _2391 = _2205 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4570 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2410 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2273;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2274;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2275;
    }
    bool _2390 = _2279.y == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2390)
    {
        _2445 = _2383;
        _2447 = _2385;
        _2449 = _2387;
    }
    else
    {
        uint _2618 = _2205 + 7u;
        float _2634 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4586 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2637 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2445 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2383;
        _2447 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2385;
        _2449 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2387;
    }
    uint _2452 = _2205 + 8u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _699) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2205].x + _776;
    float _2468 = cbLight._m0[_2205].y + _777;
    float _2469 = cbLight._m0[_2205].z + _778;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2205].xyz));
    float _4602 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _4613 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2481 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2482 = dot(vec3(_696, _697, _698), vec3(_2474, _2475, _2476));
    float _4624 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2474, _2475, _2476));
    float _4635 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2466 * _2466;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2503 = 0.959999978542327880859375 - _855;
    float _2505 = 0.959999978542327880859375 - _856;
    float _2506 = 0.959999978542327880859375 - _857;
    float _2513 = 1.0 - _2466;
    float _2524 = (0.5 / (((_2481 * ((_2480 * _2513) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2513) + _2466) * _2480))) * _2480;
    float _4646 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    uint _2540 = _2205 + 9u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _699) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2245].x + _776;
    float _2554 = cbLight._m0[_2245].y + _777;
    float _2555 = cbLight._m0[_2245].z + _778;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2245].xyz));
    float _4657 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2567 = dot(vec3(_696, _697, _698), vec3(_2560, _2561, _2562));
    float _4668 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2560, _2561, _2562));
    float _4679 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2552 * _2552;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
    float _2593 = 1.0 - _2552;
    float _2603 = (0.5 / (((_2481 * ((_2566 * _2593) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2593) + _2552) * _2566))) * _2566;
    float _4690 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    float _2615 = (((((_2586 * _2503) + _858) * cbLight._m0[_2540].x) * _2605) * _2228) + ((((cbLight._m0[_2452].x * _2194) * ((_2502 * _2503) + _858)) * _2526) * _2241);
    float _2616 = (((((_2586 * _2505) + _860) * cbLight._m0[_2540].y) * _2605) * _2228) + ((((cbLight._m0[_2452].y * _2196) * ((_2502 * _2505) + _860)) * _2526) * _2241);
    float _2617 = (((((_2586 * _2506) + _861) * cbLight._m0[_2540].z) * _2605) * _2228) + ((((cbLight._m0[_2452].z * _2198) * ((_2502 * _2506) + _861)) * _2526) * _2241);
    float _2673;
    float _2675;
    float _2677;
    if (_2281)
    {
        _2673 = _2615;
        _2675 = _2616;
        _2677 = _2617;
    }
    else
    {
        uint _2679 = _2205 + 2u;
        uint _2683 = _2205 + 10u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _699) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _776;
        float _2700 = cbLight._m0[_2679].y + _777;
        float _2701 = cbLight._m0[_2679].z + _778;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2679].xyz));
        float _4701 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2713 = dot(vec3(_696, _697, _698), vec3(_2706, _2707, _2708));
        float _4712 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4723 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2739 = 1.0 - _2698;
        float _2749 = (0.5 / (((_2481 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2739) + _2698) * _2712))) * _2712;
        float _4734 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2673 = (((((_2732 * _2503) + _858) * cbLight._m0[_2683].x) * _2751) * _2752) + _2615;
        _2675 = (((((_2732 * _2505) + _860) * cbLight._m0[_2683].y) * _2751) * _2752) + _2616;
        _2677 = (((((_2732 * _2506) + _861) * cbLight._m0[_2683].z) * _2751) * _2752) + _2617;
    }
    float _2783;
    float _2785;
    float _2787;
    if (_2390)
    {
        _2783 = _2673;
        _2785 = _2675;
        _2787 = _2677;
    }
    else
    {
        uint _2794 = _2205 + 3u;
        uint _2798 = _2205 + 11u;
        float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2794].w)) * _699) * 0.949999988079071044921875);
        float _2813 = _2812 * _2812;
        float _2814 = cbLight._m0[_2794].x + _776;
        float _2815 = cbLight._m0[_2794].y + _777;
        float _2816 = cbLight._m0[_2794].z + _778;
        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
        float _2821 = _2820 * _2814;
        float _2822 = _2820 * _2815;
        float _2823 = _2820 * _2816;
        float _2824 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2794].xyz));
        float _4750 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2828 = dot(vec3(_696, _697, _698), vec3(_2821, _2822, _2823));
        float _4761 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2832 = dot(vec3(cbLight._m0[_2794].xyz), vec3(_2821, _2822, _2823));
        float _4772 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2836 = _2813 * _2813;
        float _2840 = ((_2831 * _2831) * (_2836 + (-1.0))) + 1.0;
        float _2847 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
        float _2854 = 1.0 - _2813;
        float _2864 = (0.5 / (((_2481 * ((_2827 * _2854) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2854) + _2813) * _2827))) * _2827;
        float _4783 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2836 / ((_2840 * _2840) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2783 = (((((_2847 * _2503) + _858) * cbLight._m0[_2798].x) * _2866) * _2867) + _2673;
        _2785 = (((((_2847 * _2505) + _860) * cbLight._m0[_2798].y) * _2866) * _2867) + _2675;
        _2787 = (((((_2847 * _2506) + _861) * cbLight._m0[_2798].z) * _2866) * _2867) + _2677;
    }
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_2203.y == 0u)
    {
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.x;
        uint _2900 = uint((float(_2888.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2889))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2889)));
        float _2910 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2911 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        uint _2914 = uint(isnan(14.0) ? _2911 : (isnan(_2911) ? 14.0 : min(_2911, 14.0)));
        uvec4 _2919 = texelFetch(g_lightClusterGridBuffer, int(((_2914 << 2u) + (_2900 << 6u)) >> 2u));
        uint _2920 = _2919.x;
        uint _2921 = _2888.z;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((((1u << ((_2921 >> 4u) & 15u)) + 4294967295u) & _2920) == 0u) || ((_2921 & 240u) == 0u))
        {
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
        }
        else
        {
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2914 << 5u) + (_2900 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3169)
                {
                    frontier_phi_71_pred = _3158;
                    frontier_phi_71_pred_1 = _3157;
                    frontier_phi_71_pred_2 = _3156;
                    frontier_phi_71_pred_3 = _3155;
                    frontier_phi_71_pred_4 = _3154;
                    frontier_phi_71_pred_5 = _3153;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3168;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3159 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _1979;
                        float _3365 = _3324.y - _1980;
                        float _3366 = _3324.z - _1981;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_815, _818, _821), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4809 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _1979;
                        float _3400 = (-0.0) - _1980;
                        float _3401 = (-0.0) - _1981;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3415 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3416 = 1.0 - _890;
                        float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                        float _3424 = _3423 * _3423;
                        float _3425 = _3424 * _3424;
                        float _3426 = _3406 + _3371;
                        float _3427 = _3407 + _3372;
                        float _3428 = _3408 + _3373;
                        float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                        float _3436 = dot(vec3(_815, _818, _821), vec3(_3406, _3407, _3408));
                        float _4825 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3440 = dot(vec3(_815, _818, _821), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                        float _4836 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                        float _3448 = _3384 * _3424;
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3374) + _3449;
                        float _4847 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3454 = 1.0 - _3424;
                        float _3464 = (0.5 / (((_3453 * ((_3439 * _3454) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3424) * _3439))) * _3453;
                        float _4858 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3475 = (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3447 * _3447) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3228 = (_3395 * _3343.x) + _3301;
                        _3229 = (_3395 * _3343.y) + _3302;
                        _3230 = (_3395 * _3343.z) + _3303;
                        _3225 = (_3475 * _3360.x) + _3298;
                        _3226 = (_3475 * _3360.y) + _3299;
                        _3227 = (_3475 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_71_pred = _3230;
                    frontier_phi_71_pred_1 = _3229;
                    frontier_phi_71_pred_2 = _3228;
                    frontier_phi_71_pred_3 = _3227;
                    frontier_phi_71_pred_4 = _3226;
                    frontier_phi_71_pred_5 = _3225;
                }
                _3011 = frontier_phi_71_pred;
                _3009 = frontier_phi_71_pred_1;
                _3007 = frontier_phi_71_pred_2;
                _3005 = frontier_phi_71_pred_3;
                _3003 = frontier_phi_71_pred_4;
                _3001 = frontier_phi_71_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _3001;
                    _3154 = _3003;
                    _3155 = _3005;
                    _3156 = _3007;
                    _3157 = _3009;
                    _3158 = _3011;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
        }
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.z;
        uint _3017 = (_3015 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3017) & _2920) == 0u)
        {
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _3147 = _3146 * _1979;
            float _3148 = _3146 * _1980;
            float _3149 = _3146 * _1981;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3017 < ((_3015 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3281 = _3000;
                float _3282 = _3002;
                float _3283 = _3004;
                float _3284 = _3006;
                float _3285 = _3008;
                float _3286 = _3010;
                uint _3287 = _3017;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2914 << 5u) + (_2900 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3297)
                    {
                        frontier_phi_82_pred = _3286;
                        frontier_phi_82_pred_1 = _3285;
                        frontier_phi_82_pred_2 = _3284;
                        frontier_phi_82_pred_3 = _3283;
                        frontier_phi_82_pred_4 = _3282;
                        frontier_phi_82_pred_5 = _3281;
                    }
                    else
                    {
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3502 = _3281;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        uint _3508 = _3296;
                        uint _3509;
                        vec4 _3534;
                        float _3535;
                        vec4 _3550;
                        vec3 _3562;
                        vec4 _3577;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3519 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3508));
                            _3509 = (_3508 + 4294967295u) & _3508;
                            uint _3521 = _3519 * 40u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3535 = _3534.w;
                            uint _3537 = (_3519 * 40u) + 4u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3519 * 40u) + 8u;
                            _3562 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x));
                            uint _3564 = (_3519 * 40u) + 16u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3580 = (_3519 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3519 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3519 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_1981, _3627.z, fma(_1980, _3627.y, _3627.x * _1979)) + _3627.w;
                            _3640 = !((fma(_1981, _3608.z, fma(_1980, _3608.y, _3608.x * _1979)) + _3608.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3534.x - _1979;
                                float _3668 = _3534.y - _1980;
                                float _3669 = _3534.z - _1981;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3535 * _3535));
                                float _4869 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3685 = sqrt(_3670) * _3550.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_815, _818, _821))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_1981, _3577.z, fma(_1980, _3577.y, _3577.x * _1979)) + _3577.w) / _3639;
                                float _3699 = (fma(_1981, _3593.z, fma(_1980, _3593.y, _3593.x * _1979)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4885 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _890;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3147;
                                float _3729 = _3675 - _3148;
                                float _3730 = _3676 - _3149;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_815, _818, _821), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4896 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3742 = dot(vec3(_815, _818, _821), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4907 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_815, _818, _821), vec3(_3674, _3675, _3676))) + _3751;
                                float _4918 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4929 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3705 * _3550.z;
                                frontier_phi_88_pred_1 = _3705 * _3550.y;
                                frontier_phi_88_pred_2 = _3705 * _3550.x;
                                frontier_phi_88_pred_3 = _3779 * _3562.z;
                                frontier_phi_88_pred_4 = _3779 * _3562.y;
                                frontier_phi_88_pred_5 = _3779 * _3562.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3788 = frontier_phi_88_pred;
                            _3787 = frontier_phi_88_pred_1;
                            _3786 = frontier_phi_88_pred_2;
                            _3785 = frontier_phi_88_pred_3;
                            _3784 = frontier_phi_88_pred_4;
                            _3783 = frontier_phi_88_pred_5;
                            _3492 = _3786 + _3505;
                            _3493 = _3787 + _3506;
                            _3494 = _3788 + _3507;
                            _3489 = _3783 + _3502;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            if (_3509 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3509;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3494;
                        frontier_phi_82_pred_1 = _3493;
                        frontier_phi_82_pred_2 = _3492;
                        frontier_phi_82_pred_3 = _3491;
                        frontier_phi_82_pred_4 = _3490;
                        frontier_phi_82_pred_5 = _3489;
                    }
                    _3132 = frontier_phi_82_pred;
                    _3130 = frontier_phi_82_pred_1;
                    _3128 = frontier_phi_82_pred_2;
                    _3126 = frontier_phi_82_pred_3;
                    _3124 = frontier_phi_82_pred_4;
                    _3122 = frontier_phi_82_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3122;
                        _3282 = _3124;
                        _3283 = _3126;
                        _3284 = _3128;
                        _3285 = _3130;
                        _3286 = _3132;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3128;
                frontier_phi_63_64_ladder_1 = _3132;
                frontier_phi_63_64_ladder_2 = _3130;
                frontier_phi_63_64_ladder_3 = _3126;
                frontier_phi_63_64_ladder_4 = _3124;
                frontier_phi_63_64_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_63_64_ladder = _3006;
                frontier_phi_63_64_ladder_1 = _3010;
                frontier_phi_63_64_ladder_2 = _3008;
                frontier_phi_63_64_ladder_3 = _3004;
                frontier_phi_63_64_ladder_4 = _3002;
                frontier_phi_63_64_ladder_5 = _3000;
            }
            _3121 = frontier_phi_63_64_ladder_5;
            _3123 = frontier_phi_63_64_ladder_4;
            _3125 = frontier_phi_63_64_ladder_3;
            _3127 = frontier_phi_63_64_ladder;
            _3129 = frontier_phi_63_64_ladder_2;
            _3131 = frontier_phi_63_64_ladder_1;
        }
        float _3136 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2933 = (_3136 * _3127) + _2445;
        _2935 = (_3136 * _3129) + _2447;
        _2937 = (_3136 * _3131) + _2449;
        _2939 = ((_3121 * _858) * _3136) + _2783;
        _2941 = ((_3123 * _860) * _3136) + _2785;
        _2943 = ((_3125 * _861) * _3136) + _2787;
    }
    else
    {
        _2933 = _2445;
        _2935 = _2447;
        _2937 = _2449;
        _2939 = _2783;
        _2941 = _2785;
        _2943 = _2787;
    }
    float _4945 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4956 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4967 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2960 = ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2933 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _874))) + ((_2939 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2961 = ((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2935 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _874))) + ((_2941 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2962 = ((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2937 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _874))) + ((_2943 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    uint _2963 = _244 + 6u;
    float _2971 = _796 / cbSceneParam._m0[86u].x;
    float _2972 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2986 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2971, _2972, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2988 = _2986.x;
    float _2989 = _2986.y;
    float _2990 = _2986.z;
    float _2991 = _2986.w;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3025 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3026 = _3025 / _718;
        float _3037 = _3026 * _769;
        float _3038 = _770 * _3026;
        float _3039 = (-0.0) - _3038;
        float _3041 = _3026 * _771;
        float _3043 = (cbSceneParam._m0[77u].w * _3039) / _3025;
        float _3044 = _3043 + cbSceneParam._m0[79u].w;
        float _3045 = cbSceneParam._m0[79u].w - _3038;
        float _3051 = sqrt(((_3037 * _3037) + (_3038 * _3038)) + (_3041 * _3041));
        float _3054 = (1.0 - (cbSceneParam._m0[77u].w / _3025)) * _3051;
        float _3059 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3061 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3238;
        if (abs((_3039 - _3043) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3238 = ((((_3044 > 0.0) ? exp2(_3059 * _3044) : (2.0 - exp2(_3061 * _3044))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3054;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : max(_3044, _3045));
            float _3184 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : min(_3044, _3045));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3238 = ((abs(_3051 / _3039) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3059 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3059 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3061 * _3193) - exp2(_3061 * _3194)) * _3182))) + (_3054 * cbSceneParam._m0[80u].z);
        }
        vec4 _3240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2971, _2972, 1.0), 0.0);
        float _3249 = exp2((_3238 * (-1.44269502162933349609375)) * (1.0 - _3240.w));
        float _3250 = log2(_3249);
        float _3266 = log2(_2991);
        _3063 = (exp2(_3266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].x)) * _3240.x) / cbSceneParam._m0[78u].x)) + _2988;
        _3065 = (exp2(_3266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].y)) * _3240.y) / cbSceneParam._m0[78u].y)) + _2989;
        _3067 = (exp2(_3266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].z)) * _3240.z) / cbSceneParam._m0[78u].z)) + _2990;
        _3069 = _3249 * _2991;
    }
    else
    {
        _3063 = _2988;
        _3065 = _2989;
        _3067 = _2990;
        _3069 = _2991;
    }
    bool _3276;
    vec4 _3079;
    vec4 _3101;
    float _3103;
    float _3107;
    float _3108;
    float _3109;
    float _3110;
    bool _3120;
    for (;;)
    {
        _3079 = cbMatDynParam._m0[0u];
        float _3081 = roundEven(_3079.y);
        bool _3082 = _3081 == 3.0;
        float _3083 = log2(_3069);
        float _3090 = exp2(_3083 * cbSceneParam._m0[78u].x) * _2960;
        float _3091 = exp2(_3083 * cbSceneParam._m0[78u].y) * _2961;
        float _3092 = exp2(_3083 * cbSceneParam._m0[78u].z) * _2962;
        float _3099 = _785 + (-0.5);
        _3101 = cbMtdParam._m0[1u];
        _3103 = _3101.y * _3099;
        float _3106 = (_3081 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3107 = _3106 * (_3082 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3063)));
        _3108 = _3106 * (_3082 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3065)));
        _3109 = _3106 * (_3082 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3067)));
        _3110 = _3099 * 0.999000012874603271484375;
        _3120 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3120)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3110) < 0.5)
            {
                _3276 = true;
                break;
            }
        }
        uint _3217 = _834 + uint(_3079.w);
        if ((cbInstanceData._m0[_3217].w < 1.0) && ((cbInstanceData._m0[_3217].w + _3110) < 0.5))
        {
            _3276 = true;
            break;
        }
        if ((_3103 + 1.0) < _3101.x)
        {
            _3276 = true;
            break;
        }
        _3276 = false;
        break;
    }
    float _3480;
    if (_3276)
    {
        discard_state = true;
        _3480 = 0.0;
    }
    else
    {
        _3480 = cbInstanceData._m0[_2963].w;
    }
    SV_Target.x = _3107;
    SV_Target.y = _3108;
    SV_Target.z = _3109;
    SV_Target.w = _3480;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2963].w;
    discard_exit();
}


