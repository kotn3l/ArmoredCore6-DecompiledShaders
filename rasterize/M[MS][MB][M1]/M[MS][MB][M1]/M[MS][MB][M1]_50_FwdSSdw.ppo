#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _359 = _355.z;
    float _363 = (_355.x * 2.0) + (-1.0);
    float _364 = (_355.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3543 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    float _376 = _363 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_329.x * 2.0) + (-1.0)));
    float _377 = _364 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_329.y * 2.0) + (-1.0)));
    float _380 = fma(_371, _231, fma(_377, _238, _376 * _224));
    float _383 = fma(_371, _232, fma(_377, _239, _376 * _225));
    float _386 = fma(_371, _233, fma(_377, _240, _376 * _226));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = 1.0 - _428;
    float _438 = (cbMtdParam._m0[19u].x + dot(vec4(_390 * _380, _390 * _383, _390 * _386, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_428 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[21u].z);
    float _3554 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _441 = (-0.0) - cbMtdParam._m0[24u].x;
    float _443 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
    float _451 = _439 - ((_439 * TEXCOORD_8.x) * _444);
    float _452 = _439 - ((_439 * TEXCOORD_8.y) * _444);
    float _453 = _439 - ((_439 * TEXCOORD_8.z) * _444);
    float _460 = (_451 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) + _288;
    float _461 = (_452 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) + _289;
    float _462 = (_453 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) + _290;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _507 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3575 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _516 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _508) + _460;
    float _517 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _508) + _461;
    float _518 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _508) + _462;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _533 = _531.x;
    float _535 = _533 - (_533 * _451);
    float _537 = _535 - (_535 * _508);
    float _542 = (((_329.z - _359) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _359;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _563 = (_556.x * 2.0) + (-1.0);
    float _564 = (_556.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3586 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _573 = ((_556.z - _542) * _451) + _542;
    float _576 = ((cbMtdParam._m0[23u].y - _573) * _508) + _573;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _601 = (_595.x * 2.0) + (-1.0);
    float _602 = (_595.y * 2.0) + (-1.0);
    float _603 = dot(vec2(_601, _602), vec2(_601, _602));
    float _3597 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _618 = ((sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) - _371) * _453) + _371;
    float _621 = (((_563 - _376) * _451) + _376) + (cbMtdParam._m0[21u].x * _376);
    float _622 = (((_564 - _377) * _452) + _377) + (cbMtdParam._m0[21u].x * _377);
    float _633 = (((_601 - _621) + (_621 * cbMtdParam._m0[22u].z)) * _508) + _621;
    float _634 = (((_602 - _622) + (_622 * cbMtdParam._m0[22u].z)) * _508) + _622;
    float _635 = (_508 * (sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) - _618)) + _618;
    float _637 = cbMtdParam._m0[22u].x + _355.w;
    float _640 = fma(_635, _231, fma(_634, _238, _633 * _224));
    float _643 = fma(_635, _232, fma(_634, _239, _633 * _225));
    float _646 = fma(_635, _233, fma(_634, _240, _633 * _226));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3608 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _654 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3630 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3641 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3652 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3663 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _659 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _763 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _766 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _780 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3674 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _792 = 1.0 - _659;
    float _793 = _789 * _792;
    float _794 = _790 * _792;
    float _795 = _791 * _792;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _659;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _659;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _659;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _819 = ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_651, _652, _653), vec3(_730, _731, _732));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _651) - _730;
    float _828 = (_823 * _652) - _731;
    float _829 = (_823 * _653) - _732;
    float _833 = abs(dot(vec3(_730, _731, _732), vec3(_651, _652, _653)));
    float _3707 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_654);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _854 = (1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _835;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _921 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _925 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _950 = _883 + _651;
        float _951 = _887 + _652;
        float _952 = _891 + _653;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_651, _652, _653), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3755 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_651, _652, _653), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3788 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_651, _652, _653), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3821 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1236 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1240 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1263 = _883 + _651;
        float _1264 = _887 + _652;
        float _1265 = _891 + _653;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_651, _652, _653), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3884 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_651, _652, _653), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3917 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_651, _652, _653), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3950 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _827 * 0.5;
    float _1570 = _828 * 0.5;
    float _1571 = _829 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1685 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1689 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1693 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1696 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1699 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1702 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1730;
        if (_1696 > 0.0)
        {
            _1730 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1730 = frontier_phi_14_12_ladder;
        }
        float _1954;
        if (_1699 > 0.0)
        {
            _1954 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1954 = frontier_phi_23_19_ladder;
        }
        float _2211;
        if (_1702 > 0.0)
        {
            _2211 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2211 = frontier_phi_35_30_ladder;
        }
        float _2213 = isnan(_1954) ? _1730 : (isnan(_1730) ? _1954 : min(_1730, _1954));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1696) + _1685;
        float _2219 = (_2214 * _1699) + _1689;
        float _2220 = (_2214 * _1702) + _1693;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2221;
        float _2225 = _2221 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 > _2225) || ((_2219 < _2223) || ((_2218 < _2223) || (_2218 > _2225))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2220, cbModelParam._m0[9u].z, fma(_2219, cbModelParam._m0[9u].y, _2218 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2220, cbModelParam._m0[10u].z, fma(_2219, cbModelParam._m0[10u].y, _2218 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2220, cbModelParam._m0[11u].z, fma(_2219, cbModelParam._m0[11u].y, _2218 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1718 = frontier_phi_13_35_ladder_2;
        _1720 = frontier_phi_13_35_ladder_1;
        _1722 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1638);
        _1718 = _1706.x * cbModelParam._m0[1u].y;
        _1720 = _1706.y * cbModelParam._m0[1u].y;
        _1722 = _1706.z * cbModelParam._m0[1u].y;
    }
    float _1726 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1726 : min(cbModelParam._m0[25u].w, _1726));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1794 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1797 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1959;
        if (_1791 > 0.0)
        {
            _1959 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1959 = frontier_phi_25_21_ladder;
        }
        float _2238;
        if (_1794 > 0.0)
        {
            _2238 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2238 = frontier_phi_37_32_ladder;
        }
        float _2451;
        if (_1797 > 0.0)
        {
            _2451 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2451 = frontier_phi_46_43_ladder;
        }
        float _2453 = isnan(_2238) ? _1959 : (isnan(_1959) ? _2238 : min(_1959, _2238));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1791) + _1780;
        float _2459 = (_2454 * _1794) + _1784;
        float _2460 = (_2454 * _1797) + _1788;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2461;
        float _2464 = _2461 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2460 > _2464) || ((_2460 < _2462) || ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 < _2462) || (_2458 > _2464))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2460, cbModelParam._m0[17u].z, fma(_2459, cbModelParam._m0[17u].y, _2458 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2460, cbModelParam._m0[18u].z, fma(_2459, cbModelParam._m0[18u].y, _2458 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2460, cbModelParam._m0[19u].z, fma(_2459, cbModelParam._m0[19u].y, _2458 * cbModelParam._m0[19u].x))), _1727);
            frontier_phi_22_46_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_22_46_ladder_2;
        _1818 = frontier_phi_22_46_ladder_1;
        _1820 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1727);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1833 = (((_854 * _803) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1816 - _1718)) + _1718);
    float _1835 = (((_854 * _805) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1818 - _1720)) + _1720);
    float _1837 = (((_854 * _806) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1840 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    vec4 _1854 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_738, _739));
    float _1856 = _1854.w;
    float _1868 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1856);
    float _1869 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1856);
    float _1870 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1856);
    uvec4 _1874 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1876 = _1874.x * 14u;
    uint _1877 = _1876 + 13u;
    float _1884 = _819 + (-1.0);
    float _1889 = (cbLight._m0[_1877].x * _1884) + 1.0;
    float _1890 = (cbLight._m0[_1877].y * _1884) + 1.0;
    float _1891 = (cbLight._m0[_1877].z * _1884) + 1.0;
    float _1892 = (cbLight._m0[_1877].w * _1884) + 1.0;
    uint _1893 = _1876 + 5u;
    float _1899 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1903 = _1876 + 4u;
    float _1913 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1917 = _1876 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_651, _652, _653));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_651, _652, _653));
    float _4086 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4097 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1893].x * _1899) * _1938) + (((cbLight._m0[_1903].x * _1868) * _1913) * _1936);
    float _1946 = ((_1899 * cbLight._m0[_1893].y) * _1938) + (((cbLight._m0[_1903].y * _1869) * _1913) * _1936);
    float _1947 = ((_1899 * cbLight._m0[_1893].z) * _1938) + (((cbLight._m0[_1903].z * _1870) * _1913) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1876 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1876 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1876 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4108 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1991 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2182 = _1876 + 7u;
        float _2198 = (dot(vec3(cbLight._m0[_1876 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4124 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2201 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2009 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _1964;
        _2011 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _1966;
        _2013 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _1968;
    }
    uint _2016 = _1876 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _654) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1876].x + _730;
    float _2032 = cbLight._m0[_1876].y + _731;
    float _2033 = cbLight._m0[_1876].z + _732;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1876].xyz));
    float _4140 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2045 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2046 = dot(vec3(_651, _652, _653), vec3(_2038, _2039, _2040));
    float _4162 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2038, _2039, _2040));
    float _4173 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2067 = 0.959999978542327880859375 - _800;
    float _2069 = 0.959999978542327880859375 - _801;
    float _2070 = 0.959999978542327880859375 - _802;
    float _2077 = 1.0 - _2030;
    float _2088 = (0.5 / (((_2045 * ((_2044 * _2077) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2077) + _2030) * _2044))) * _2044;
    float _4184 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2104 = _1876 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _654) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1917].x + _730;
    float _2118 = cbLight._m0[_1917].y + _731;
    float _2119 = cbLight._m0[_1917].z + _732;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1917].xyz));
    float _4195 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2131 = dot(vec3(_651, _652, _653), vec3(_2124, _2125, _2126));
    float _4206 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2124, _2125, _2126));
    float _4217 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _2157 = 1.0 - _2116;
    float _2167 = (0.5 / (((_2045 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2157) + _2116) * _2130))) * _2130;
    float _4228 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2179 = (((((_2150 * _2067) + _803) * cbLight._m0[_2104].x) * _2169) * _1899) + ((((cbLight._m0[_2016].x * _1868) * ((_2066 * _2067) + _803)) * _2090) * _1913);
    float _2180 = (((((_2150 * _2069) + _805) * cbLight._m0[_2104].y) * _2169) * _1899) + ((((cbLight._m0[_2016].y * _1869) * ((_2066 * _2069) + _805)) * _2090) * _1913);
    float _2181 = (((((_2150 * _2070) + _806) * cbLight._m0[_2104].z) * _2169) * _1899) + ((((cbLight._m0[_2016].z * _1870) * ((_2066 * _2070) + _806)) * _2090) * _1913);
    float _2243;
    float _2245;
    float _2247;
    if (_1953)
    {
        _2243 = _2179;
        _2245 = _2180;
        _2247 = _2181;
    }
    else
    {
        uint _2249 = _1876 + 2u;
        uint _2253 = _1876 + 10u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _654) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _730;
        float _2270 = cbLight._m0[_2249].y + _731;
        float _2271 = cbLight._m0[_2249].z + _732;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2249].xyz));
        float _4239 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2283 = dot(vec3(_651, _652, _653), vec3(_2276, _2277, _2278));
        float _4250 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4261 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_2045 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2309) + _2268) * _2282))) * _2282;
        float _4272 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2243 = (((((_2302 * _2067) + _803) * cbLight._m0[_2253].x) * _2321) * _2322) + _2179;
        _2245 = (((((_2302 * _2069) + _805) * cbLight._m0[_2253].y) * _2321) * _2322) + _2180;
        _2247 = (((((_2302 * _2070) + _806) * cbLight._m0[_2253].z) * _2321) * _2322) + _2181;
    }
    float _2357;
    float _2359;
    float _2361;
    if (_1971)
    {
        _2357 = _2243;
        _2359 = _2245;
        _2361 = _2247;
    }
    else
    {
        uint _2368 = _1876 + 3u;
        uint _2372 = _1876 + 11u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _654) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _730;
        float _2389 = cbLight._m0[_2368].y + _731;
        float _2390 = cbLight._m0[_2368].z + _732;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2368].xyz));
        float _4288 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2402 = dot(vec3(_651, _652, _653), vec3(_2395, _2396, _2397));
        float _4299 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4310 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
        float _2428 = 1.0 - _2387;
        float _2438 = (0.5 / (((_2045 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2428) + _2387) * _2401))) * _2401;
        float _4321 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2357 = (((((_2421 * _2067) + _803) * cbLight._m0[_2372].x) * _2440) * _2441) + _2243;
        _2359 = (((((_2421 * _2069) + _805) * cbLight._m0[_2372].y) * _2440) * _2441) + _2245;
        _2361 = (((((_2421 * _2070) + _806) * cbLight._m0[_2372].z) * _2440) * _2441) + _2247;
    }
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    if (_1874.y == 0u)
    {
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2516;
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2516;
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2516;
        uvec4 _2531 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2532 = _2531.x;
        uint _2543 = uint((float(_2531.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2532))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2532)));
        float _2553 = (log2(_2519 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2554 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        uint _2557 = uint(isnan(14.0) ? _2554 : (isnan(_2554) ? 14.0 : min(_2554, 14.0)));
        uvec4 _2562 = texelFetch(g_lightClusterGridBuffer, int(((_2557 << 2u) + (_2543 << 6u)) >> 2u));
        uint _2563 = _2562.x;
        uint _2564 = _2531.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2564 >> 4u) & 15u)) + 4294967295u) & _2563) == 0u) || ((_2564 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            uint _2814 = 0u;
            uint _2823;
            bool _2824;
            for (;;)
            {
                _2823 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                _2824 = _2823 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2824)
                {
                    frontier_phi_61_pred = _2808;
                    frontier_phi_61_pred_1 = _2813;
                    frontier_phi_61_pred_2 = _2812;
                    frontier_phi_61_pred_3 = _2811;
                    frontier_phi_61_pred_4 = _2810;
                    frontier_phi_61_pred_5 = _2809;
                }
                else
                {
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    uint _2938;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2823;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2942 = uint(findLSB(_2938)) + (_2814 << 5u);
                        uint _2939 = (_2938 + 4294967295u) & _2938;
                        uint _2944 = _2942 * 48u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2964 = (_2942 * 48u) + 4u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2983 = (_2942 * 48u) + 8u;
                        vec3 _2994 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x));
                        float _2998 = _2958.x - _2517;
                        float _2999 = _2958.y - _2518;
                        float _3000 = _2958.z - _2519;
                        float _3001 = dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000));
                        float _3004 = inversesqrt(_3001);
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3008 = dot(vec3(_760, _763, _766), vec3(_3005, _3006, _3007));
                        float _3013 = 1.0 - (_3001 * _2958.w);
                        float _4347 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3015 = sqrt(_3001) * _2977.w;
                        float _3018 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _3008) + _3019;
                        float _3025 = _3015 * _3015;
                        float _3029 = ((isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))) * _3014) / ((_3025 * 0.699999988079071044921875) + 1.0);
                        float _3033 = (-0.0) - _2517;
                        float _3034 = (-0.0) - _2518;
                        float _3035 = (-0.0) - _2519;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3050 = exp2(log2(1.0 / ((_3025 * 3.5) + 5.0)) * 0.25);
                        float _3051 = 1.0 - _835;
                        float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                        float _3059 = _3058 * _3058;
                        float _3060 = _3059 * _3059;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3071 = dot(vec3(_760, _763, _766), vec3(_3040, _3041, _3042));
                        float _4363 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3075 = dot(vec3(_760, _763, _766), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                        float _4374 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                        float _3083 = _3018 * _3059;
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3008) + _3084;
                        float _4385 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3089 = 1.0 - _3059;
                        float _3099 = (0.5 / (((_3088 * ((_3074 * _3089) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3059) * _3074))) * _3088;
                        float _4396 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3110 = (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3082 * _3082) * ((_3025 * 2.1991131305694580078125) + 3.141590118408203125))) * _3014;
                        _2867 = (_3029 * _2977.x) + _2935;
                        _2868 = (_3029 * _2977.y) + _2936;
                        _2869 = (_3029 * _2977.z) + _2937;
                        _2864 = (_3110 * _2994.x) + _2932;
                        _2865 = (_3110 * _2994.y) + _2933;
                        _2866 = (_3110 * _2994.z) + _2934;
                        if (_2939 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2939;
                        }
                    }
                    frontier_phi_61_pred = _2864;
                    frontier_phi_61_pred_1 = _2869;
                    frontier_phi_61_pred_2 = _2868;
                    frontier_phi_61_pred_3 = _2867;
                    frontier_phi_61_pred_4 = _2866;
                    frontier_phi_61_pred_5 = _2865;
                }
                _2665 = frontier_phi_61_pred;
                _2675 = frontier_phi_61_pred_1;
                _2673 = frontier_phi_61_pred_2;
                _2671 = frontier_phi_61_pred_3;
                _2669 = frontier_phi_61_pred_4;
                _2667 = frontier_phi_61_pred_5;
                uint _2815 = _2814 + 1u;
                if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2808 = _2665;
                    _2809 = _2667;
                    _2810 = _2669;
                    _2811 = _2671;
                    _2812 = _2673;
                    _2813 = _2675;
                    _2814 = _2815;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((4294967295u << _2681) & _2563) == 0u)
        {
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
            _2784 = _2672;
            _2786 = _2674;
        }
        else
        {
            float _2801 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
            float _2802 = _2801 * _2517;
            float _2803 = _2801 * _2518;
            float _2804 = _2801 * _2519;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2915 = _2664;
                float _2916 = _2666;
                float _2917 = _2668;
                float _2918 = _2670;
                float _2919 = _2672;
                float _2920 = _2674;
                uint _2921 = _2681;
                uint _2930;
                bool _2931;
                for (;;)
                {
                    _2930 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                    _2931 = _2930 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2931)
                    {
                        frontier_phi_67_pred = _2918;
                        frontier_phi_67_pred_1 = _2919;
                        frontier_phi_67_pred_2 = _2920;
                        frontier_phi_67_pred_3 = _2917;
                        frontier_phi_67_pred_4 = _2916;
                        frontier_phi_67_pred_5 = _2915;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        uint _3134 = _2930;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3204;
                        vec4 _3219;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3145 = ((_2921 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3191 = (_3145 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3145 * 40u) + 20u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3145 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3145 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_2519, _3253.z, fma(_2518, _3253.y, _3253.x * _2517)) + _3253.w;
                            _3266 = !((fma(_2519, _3234.z, fma(_2518, _3234.y, _3234.x * _2517)) + _3234.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3160.x - _2517;
                                float _3294 = _3160.y - _2518;
                                float _3295 = _3160.z - _2519;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3161 * _3161));
                                float _4407 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3311 = sqrt(_3296) * _3176.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_760, _763, _766))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_2519, _3204.z, fma(_2518, _3204.y, _3204.x * _2517)) + _3204.w) / _3265;
                                float _3325 = (fma(_2519, _3219.z, fma(_2518, _3219.y, _3219.x * _2517)) + _3219.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4423 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _835;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2802;
                                float _3355 = _3301 - _2803;
                                float _3356 = _3302 - _2804;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2802, (-0.0) - _2803, (-0.0) - _2804));
                                float _4434 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3368 = dot(vec3(_760, _763, _766), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4445 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_760, _763, _766), vec3(_3300, _3301, _3302))) + _3377;
                                float _4456 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4467 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3405 * _3188.x;
                                frontier_phi_73_pred_1 = _3405 * _3188.y;
                                frontier_phi_73_pred_2 = _3331 * _3176.z;
                                frontier_phi_73_pred_3 = _3331 * _3176.y;
                                frontier_phi_73_pred_4 = _3331 * _3176.x;
                                frontier_phi_73_pred_5 = _3405 * _3188.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_73_pred;
                            _3410 = frontier_phi_73_pred_1;
                            _3414 = frontier_phi_73_pred_2;
                            _3413 = frontier_phi_73_pred_3;
                            _3412 = frontier_phi_73_pred_4;
                            _3411 = frontier_phi_73_pred_5;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            _3120 = _3414 + _3133;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3118;
                        frontier_phi_67_pred_1 = _3119;
                        frontier_phi_67_pred_2 = _3120;
                        frontier_phi_67_pred_3 = _3117;
                        frontier_phi_67_pred_4 = _3116;
                        frontier_phi_67_pred_5 = _3115;
                    }
                    _2783 = frontier_phi_67_pred;
                    _2785 = frontier_phi_67_pred_1;
                    _2787 = frontier_phi_67_pred_2;
                    _2781 = frontier_phi_67_pred_3;
                    _2779 = frontier_phi_67_pred_4;
                    _2777 = frontier_phi_67_pred_5;
                    uint _2922 = _2921 + 1u;
                    if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2915 = _2777;
                        _2916 = _2779;
                        _2917 = _2781;
                        _2918 = _2783;
                        _2919 = _2785;
                        _2920 = _2787;
                        _2921 = _2922;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2785;
                frontier_phi_55_56_ladder_1 = _2787;
                frontier_phi_55_56_ladder_2 = _2783;
                frontier_phi_55_56_ladder_3 = _2781;
                frontier_phi_55_56_ladder_4 = _2779;
                frontier_phi_55_56_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_55_56_ladder = _2672;
                frontier_phi_55_56_ladder_1 = _2674;
                frontier_phi_55_56_ladder_2 = _2670;
                frontier_phi_55_56_ladder_3 = _2668;
                frontier_phi_55_56_ladder_4 = _2666;
                frontier_phi_55_56_ladder_5 = _2664;
            }
            _2776 = frontier_phi_55_56_ladder_5;
            _2778 = frontier_phi_55_56_ladder_4;
            _2780 = frontier_phi_55_56_ladder_3;
            _2782 = frontier_phi_55_56_ladder_2;
            _2784 = frontier_phi_55_56_ladder;
            _2786 = frontier_phi_55_56_ladder_1;
        }
        float _2791 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2576 = (_2791 * _2782) + _2009;
        _2578 = (_2791 * _2784) + _2011;
        _2580 = (_2791 * _2786) + _2013;
        _2582 = ((_2776 * _803) * _2791) + _2357;
        _2584 = ((_2778 * _805) * _2791) + _2359;
        _2586 = ((_2780 * _806) * _2791) + _2361;
    }
    else
    {
        _2576 = _2009;
        _2578 = _2011;
        _2580 = _2013;
        _2582 = _2357;
        _2584 = _2359;
        _2586 = _2361;
    }
    float _4483 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4494 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4505 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    uint _2606 = _243 + 6u;
    float _2614 = _738 / cbSceneParam._m0[86u].x;
    float _2615 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2690 = _2689 / _673;
        float _2701 = _2690 * _723;
        float _2702 = _724 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2704 = _2690 * _725;
        float _2706 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2702;
        float _2714 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2714;
        float _2722 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2724 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2877;
        if (abs((_2703 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2877 = ((((_2707 > 0.0) ? exp2(_2722 * _2707) : (2.0 - exp2(_2724 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2837 = 1.0 / cbSceneParam._m0[80u].x;
            float _2838 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2839 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            _2877 = ((abs(_2714 / _2703) * cbSceneParam._m0[80u].y) * ((((_2848 - _2849) * 2.0) - ((exp2(_2722 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)))) - exp2(_2722 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))))) * _2837)) - ((exp2(_2724 * _2848) - exp2(_2724 * _2849)) * _2837))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2879 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2888 = exp2((_2877 * (-1.44269502162933349609375)) * (1.0 - _2879.w));
        float _2889 = log2(_2888);
        float _2905 = log2(_2634);
        _2726 = (exp2(_2905 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].x)) * _2879.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2728 = (exp2(_2905 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].y)) * _2879.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2730 = (exp2(_2905 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].z)) * _2879.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2732 = _2888 * _2634;
    }
    else
    {
        _2726 = _2631;
        _2728 = _2632;
        _2730 = _2633;
        _2732 = _2634;
    }
    float _2744 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2745 = _2744 == 3.0;
    float _2746 = log2(_2732);
    float _2753 = exp2(_2746 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2576 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _819))) + ((_2582 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2754 = exp2(_2746 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2578 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _819))) + ((_2584 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2755 = exp2(_2746 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2580 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _819))) + ((_2586 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2764 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2764 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.y = _2764 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.z = _2764 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.w = cbInstanceData._m0[_2606].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2606].w;
}


