#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1442;
float _4105;
float _4106;
float _4107;
float _4108;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4117 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4128 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4139 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4150 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) + _455;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _436) + _530;
    float _542 = ((((_509.x - _528) * _436) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _436) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _4161 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))));
    float _552 = _542 + ((((_482.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _553 = _543 + ((((_482.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _556 = fma(_549, _254, fma(_553, _261, _552 * _247));
    float _559 = fma(_549, _255, fma(_553, _262, _552 * _248));
    float _562 = fma(_549, _256, fma(_553, _263, _552 * _249));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _617 = (cbMtdParam._m0[19u].x + dot(vec4(_566 * _556, _566 * _559, _566 * _562, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_610 - _611) * cbMtdParam._m0[24u].z) + _611) * cbMtdParam._m0[21u].z);
    float _4172 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _620 = (-0.0) - cbMtdParam._m0[24u].x;
    float _622 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
    float _630 = _618 - ((_618 * TEXCOORD_8.x) * _623);
    float _631 = _618 - ((_618 * TEXCOORD_8.y) * _623);
    float _632 = _618 - ((_618 * TEXCOORD_8.z) * _623);
    float _639 = (_630 * (cbMtdParam._m0[17u].x - _462)) + _462;
    float _640 = (_631 * (cbMtdParam._m0[17u].y - _463)) + _463;
    float _641 = (_632 * (cbMtdParam._m0[17u].z - _464)) + _464;
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _682 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_655 - _656) * cbMtdParam._m0[24u].w) + _656) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4193 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _691 = ((((cbMtdParam._m0[10u].x - _639) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _683) + _639;
    float _692 = ((((cbMtdParam._m0[10u].y - _640) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _683) + _640;
    float _693 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _641)) * _683) + _641;
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _721 = _719.x;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _721) * _436) + _721;
    float _743 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _739) * cbMtdParam._m0[19u].z) + _739;
    float _745 = _743 - (_743 * _630);
    float _747 = _745 - (_745 * _683);
    float _752 = (((_482.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    vec4 _766 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4204 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = ((_766.z - _752) * _630) + _752;
    float _786 = ((cbMtdParam._m0[23u].y - _783) * _683) + _783;
    vec4 _805 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4215 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _828 = ((sqrt(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) - _549) * _632) + _549;
    float _831 = (((_773 - _552) * _630) + _552) + (cbMtdParam._m0[21u].x * _552);
    float _832 = (((_774 - _553) * _631) + _553) + (cbMtdParam._m0[21u].x * _553);
    float _843 = (((_811 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _683) + _831;
    float _844 = (((_812 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _683) + _832;
    float _845 = (_683 * (sqrt(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) - _828)) + _828;
    float _849 = cbMtdParam._m0[22u].x + _582.w;
    float _852 = fma(_845, _254, fma(_844, _261, _843 * _247));
    float _855 = fma(_845, _255, fma(_844, _262, _843 * _248));
    float _858 = fma(_845, _256, fma(_844, _263, _843 * _249));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _4226 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _866 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4248 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4259 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4270 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4281 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _871 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _935 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _925);
    float _936 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _925);
    float _937 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _925);
    float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
    float _942 = _935 * _941;
    float _943 = _936 * _941;
    float _944 = _937 * _941;
    vec4 _949 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _951 = _949.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1123 = sqrt(((_935 * _935) + (_936 * _936)) + (_937 * _937));
        float _1129 = (cbMatDynParam._m0[5u].x * _1123) + cbMatDynParam._m0[5u].y;
        float _4292 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1134 = (cbMatDynParam._m0[5u].z * _1123) + cbMatDynParam._m0[5u].w;
        float _4303 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) - _1130)) + _1130) < ((_951 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _962 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _963 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _984 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _987 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _1000 = _285 + 9u;
    uint _1001 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4314 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _1013 = 1.0 - _871;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _871;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _871;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _871;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _962, cbSceneParam._m0[86u].y * _963));
    float _1040 = ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_863, _864, _865), vec3(_942, _943, _944));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _863) - _942;
    float _1049 = (_1044 * _864) - _943;
    float _1050 = (_1044 * _865) - _944;
    float _1054 = abs(dot(vec3(_942, _943, _944), vec3(_863, _864, _865)));
    float _4347 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_866);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1075 = (1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1076 = _1069 * _1056;
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1441;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1166 = fma(_1112, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104));
        float _1170 = fma(_1112, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104));
        float _1174 = fma(_1112, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104));
        float _1199 = _1104 + _863;
        float _1200 = _1108 + _864;
        float _1201 = _1112 + _865;
        float _1211 = fma(_1201, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199)) - _1166;
        float _1212 = fma(_1201, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199)) - _1170;
        float _1213 = fma(_1201, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199)) - _1174;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1166 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1170 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[34u].z) + ((((((_1174 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1269 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1235.x + (-0.5));
        float _1271 = _1269 * (_1235.y + (-0.5));
        float _1272 = _1269 * (_1235.z + (-0.5));
        float _1279 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1242.x + (-0.5));
        float _1281 = _1279 * (_1242.y + (-0.5));
        float _1282 = _1279 * (_1242.z + (-0.5));
        float _1289 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1249.x + (-0.5));
        float _1291 = _1289 * (_1249.y + (-0.5));
        float _1292 = _1289 * (_1249.z + (-0.5));
        float _1299 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1256.x + (-0.5));
        float _1301 = _1299 * (_1256.y + (-0.5));
        float _1302 = _1299 * (_1256.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1323 = (dot(vec3(_863, _864, _865), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1333 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4395 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1335 + 1.0))) + _1340) * _1303;
        float _1350 = _1271 * 0.5;
        float _1351 = _1281 * 0.5;
        float _1352 = _1291 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_863, _864, _865), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4428 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1377 + 1.0))) + _1382) * _1304;
        float _1392 = _1272 * 0.5;
        float _1393 = _1282 * 0.5;
        float _1394 = _1292 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_863, _864, _865), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4461 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1419 + 1.0))) + _1424) * _1305;
        _1441 = _1272;
        _1443 = _1271;
        _1444 = _1270;
        _1445 = _1282;
        _1446 = _1281;
        _1447 = _1280;
        _1448 = _1292;
        _1449 = _1291;
        _1450 = _1290;
        _1451 = _1305;
        _1452 = _1304;
        _1453 = _1303;
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1442;
        _1443 = _1442;
        _1444 = _1442;
        _1445 = _1442;
        _1446 = _1442;
        _1447 = _1442;
        _1448 = _1442;
        _1449 = _1442;
        _1450 = _1442;
        _1451 = _1442;
        _1452 = _1442;
        _1453 = _1442;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1484 = fma(_1112, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104));
        float _1488 = fma(_1112, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104));
        float _1492 = fma(_1112, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104));
        float _1515 = _1104 + _863;
        float _1516 = _1108 + _864;
        float _1517 = _1112 + _865;
        float _1527 = fma(_1517, cbModelParam._m0[30u].z, fma(_1516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1515)) - _1484;
        float _1528 = fma(_1517, cbModelParam._m0[31u].z, fma(_1516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1515)) - _1488;
        float _1529 = fma(_1517, cbModelParam._m0[32u].z, fma(_1516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1515)) - _1492;
        float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
        float _1546 = ((_1533 * _1527) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1484 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1533 * _1528) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1488 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1533 * _1529) / cbModelParam._m0[35u].z) + ((((((_1492 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        float _1583 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1550.x + (-0.5));
        float _1585 = _1583 * (_1550.y + (-0.5));
        float _1586 = _1583 * (_1550.z + (-0.5));
        float _1593 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1557.x + (-0.5));
        float _1595 = _1593 * (_1557.y + (-0.5));
        float _1596 = _1593 * (_1557.z + (-0.5));
        float _1603 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1564.x + (-0.5));
        float _1605 = _1603 * (_1564.y + (-0.5));
        float _1606 = _1603 * (_1564.z + (-0.5));
        float _1613 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1571.x + (-0.5));
        float _1615 = _1613 * (_1571.y + (-0.5));
        float _1616 = _1613 * (_1571.z + (-0.5));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = _1584 * 0.5;
        float _1621 = _1594 * 0.5;
        float _1622 = _1604 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_863, _864, _865), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4524 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1647 + 1.0))) + _1652) * _1617;
        float _1662 = _1585 * 0.5;
        float _1663 = _1595 * 0.5;
        float _1664 = _1605 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_863, _864, _865), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4557 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1689 + 1.0))) + _1694) * _1618;
        float _1704 = _1586 * 0.5;
        float _1705 = _1596 * 0.5;
        float _1706 = _1606 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_863, _864, _865), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4590 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1731 + 1.0))) + _1736) * _1619;
        _1753 = _1586;
        _1754 = _1585;
        _1755 = _1584;
        _1756 = _1596;
        _1757 = _1595;
        _1758 = _1594;
        _1759 = _1606;
        _1760 = _1605;
        _1761 = _1604;
        _1762 = _1619;
        _1763 = _1618;
        _1764 = _1617;
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
    }
    else
    {
        _1753 = _1442;
        _1754 = _1442;
        _1755 = _1442;
        _1756 = _1442;
        _1757 = _1442;
        _1758 = _1442;
        _1759 = _1442;
        _1760 = _1442;
        _1761 = _1442;
        _1762 = _1442;
        _1763 = _1442;
        _1764 = _1442;
        _1765 = 0.0;
        _1766 = 0.0;
        _1767 = 0.0;
    }
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1454)) + _1454;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1455)) + _1455;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1456)) + _1456;
    float _1800 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1777));
    float _1821 = _1048 * 0.5;
    float _1822 = _1049 * 0.5;
    float _1823 = _1050 * 0.5;
    float _1824 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1827 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1830 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1864;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1837 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1441, _1445, _1448, _1451));
        float _1841 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1845 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1852 = dot(vec4(cbModelParam._m0[39u]), vec4(_1821, _1822, _1823, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1875;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1866 = dot(vec4(cbModelParam._m0[40u]), vec4(_1821, _1822, _1823, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1879 = (_1875 * cbModelParam._m0[1u].x) + (_1864 * (1.0 - cbModelParam._m0[1u].x));
    float _1889 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1889 : min(cbModelParam._m0[25u].z, _1889));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1112, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1112, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1112, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1952 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1955 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1983 = frontier_phi_17_15_ladder;
        }
        float _2155;
        if (_1952 > 0.0)
        {
            _2155 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2155 = frontier_phi_26_22_ladder;
        }
        float _2450;
        if (_1955 > 0.0)
        {
            _2450 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2450 = frontier_phi_38_33_ladder;
        }
        float _2452 = isnan(_2155) ? _1983 : (isnan(_1983) ? _2155 : min(_1983, _2155));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1949) + _1938;
        float _2458 = (_2453 * _1952) + _1942;
        float _2459 = (_2453 * _1955) + _1946;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1890);
            frontier_phi_16_38_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_16_38_ladder_2;
        _1973 = frontier_phi_16_38_ladder_1;
        _1975 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1890);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1112, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1112, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1112, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2048 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2051 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2160;
        if (_2045 > 0.0)
        {
            _2160 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2160 = frontier_phi_28_24_ladder;
        }
        float _2477;
        if (_2048 > 0.0)
        {
            _2477 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2477 = frontier_phi_40_35_ladder;
        }
        float _2815;
        if (_2051 > 0.0)
        {
            _2815 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2815 = frontier_phi_50_47_ladder;
        }
        float _2817 = isnan(_2477) ? _2160 : (isnan(_2160) ? _2477 : min(_2160, _2477));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2045) + _2034;
        float _2823 = (_2818 * _2048) + _2038;
        float _2824 = (_2818 * _2051) + _2042;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2826 = (-1.0) - _2825;
        float _2828 = _2825 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2824 > _2828) || ((_2824 < _2826) || ((_2823 > _2828) || ((_2823 < _2826) || ((_2822 < _2826) || (_2822 > _2828))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2824, cbModelParam._m0[17u].z, fma(_2823, cbModelParam._m0[17u].y, _2822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2824, cbModelParam._m0[18u].z, fma(_2823, cbModelParam._m0[18u].y, _2822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2824, cbModelParam._m0[19u].z, fma(_2823, cbModelParam._m0[19u].y, _2822 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_25_50_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_25_50_ladder_2;
        _2072 = frontier_phi_25_50_ladder_1;
        _2074 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1980);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2087 = (((_1075 * _1024) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2089 = (((_1075 * _1026) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2091 = (((_1075 * _1027) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2089, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2089, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2089, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2147 = _2134 / _2146;
    float _2148 = _2138 / _2146;
    float _2149 = _2142 / _2146;
    float _2296;
    float _2297;
    float _2298;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2176 = ((uint(_2149 > cbSceneParam._m0[59u].y) + uint(_2149 > cbSceneParam._m0[59u].x)) + uint(_2149 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2177 = _2176 + 43u;
        uint _2185 = _2176 + 44u;
        uint _2193 = _2176 + 45u;
        uint _2201 = _2176 + 46u;
        float _2212 = fma(_2146, cbSceneParam._m0[_2177].w, fma(_2142, cbSceneParam._m0[_2177].z, fma(_2138, cbSceneParam._m0[_2177].y, _2134 * cbSceneParam._m0[_2177].x)));
        float _2216 = fma(_2146, cbSceneParam._m0[_2185].w, fma(_2142, cbSceneParam._m0[_2185].z, fma(_2138, cbSceneParam._m0[_2185].y, _2134 * cbSceneParam._m0[_2185].x)));
        float _2224 = fma(_2146, cbSceneParam._m0[_2201].w, fma(_2142, cbSceneParam._m0[_2201].z, fma(_2138, cbSceneParam._m0[_2201].y, _2134 * cbSceneParam._m0[_2201].x)));
        float _2229 = cbSceneParam._m0[33u].z * _2224;
        float _2231 = cbSceneParam._m0[33u].w * _2224;
        float _2234 = fma(_2146, cbSceneParam._m0[_2193].w, fma(_2142, cbSceneParam._m0[_2193].z, fma(_2138, cbSceneParam._m0[_2193].y, _2134 * cbSceneParam._m0[_2193].x))) / _2224;
        float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
        float _4716 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2289 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2229 + _2212) / _2224, (_2231 + _2216) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 + _2212) / _2224, (_2216 - _2229) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2229) / _2224, (_2216 - _2231) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2231) / _2224, (_2229 + _2216) / _2224), _2234), 0.0)).x), vec4(0.25)));
        _2296 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
        _2297 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
        _2298 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2296 = 1.0;
        _2297 = 1.0;
        _2298 = 1.0;
    }
    float _2362;
    float _2364;
    float _2366;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2350 = fma(_2146, cbSceneParam._m0[63u].w, fma(_2142, cbSceneParam._m0[63u].z, fma(_2138, cbSceneParam._m0[63u].y, _2134 * cbSceneParam._m0[63u].x)));
        float _2351 = fma(_2146, cbSceneParam._m0[60u].w, fma(_2142, cbSceneParam._m0[60u].z, fma(_2138, cbSceneParam._m0[60u].y, _2134 * cbSceneParam._m0[60u].x))) / _2350;
        float _2352 = fma(_2146, cbSceneParam._m0[61u].w, fma(_2142, cbSceneParam._m0[61u].z, fma(_2138, cbSceneParam._m0[61u].y, _2134 * cbSceneParam._m0[61u].x))) / _2350;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2351 >= cbSceneParam._m0[64u].x) && (_2352 >= cbSceneParam._m0[64u].y)) && (_2351 <= cbSceneParam._m0[64u].z)) && (_2352 <= cbSceneParam._m0[64u].w))
        {
            float _2490 = fma(_2146, cbSceneParam._m0[62u].w, fma(_2142, cbSceneParam._m0[62u].z, fma(_2138, cbSceneParam._m0[62u].y, _2134 * cbSceneParam._m0[62u].x))) / _2350;
            float _2494 = isnan(cbSceneParam._m0[41u].w) ? _2490 : (isnan(_2490) ? cbSceneParam._m0[41u].w : max(_2490, cbSceneParam._m0[41u].w));
            float _2537 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
            float _4732 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
            float _2544 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2351, cbSceneParam._m0[33u].w + _2352), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2351, _2352 - cbSceneParam._m0[33u].z), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].z, _2352 - cbSceneParam._m0[33u].w), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2352), _2494), 0.0)).x), vec4(0.25)));
            float _2548 = 1.0 - (_2544 * cbSceneParam._m0[34u].x);
            float _2549 = 1.0 - (_2544 * cbSceneParam._m0[34u].y);
            float _2550 = 1.0 - (_2544 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2550) ? _2298 : (isnan(_2298) ? _2550 : min(_2298, _2550));
            frontier_phi_37_36_ladder_1 = isnan(_2549) ? _2297 : (isnan(_2297) ? _2549 : min(_2297, _2549));
            frontier_phi_37_36_ladder_2 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
        }
        else
        {
            frontier_phi_37_36_ladder = _2298;
            frontier_phi_37_36_ladder_1 = _2297;
            frontier_phi_37_36_ladder_2 = _2296;
        }
        _2362 = frontier_phi_37_36_ladder_2;
        _2364 = frontier_phi_37_36_ladder_1;
        _2366 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2362 = _2296;
        _2364 = _2297;
        _2366 = _2298;
    }
    uvec4 _2371 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2373 = _2371.x * 14u;
    uint _2374 = _2373 + 13u;
    float _2381 = _1040 + (-1.0);
    float _2386 = (cbLight._m0[_2374].x * _2381) + 1.0;
    float _2387 = (cbLight._m0[_2374].y * _2381) + 1.0;
    float _2388 = (cbLight._m0[_2374].z * _2381) + 1.0;
    float _2389 = (cbLight._m0[_2374].w * _2381) + 1.0;
    uint _2390 = _2373 + 5u;
    float _2396 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
    uint _2400 = _2373 + 4u;
    float _2409 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    uint _2413 = _2373 | 1u;
    float _2424 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_863, _864, _865));
    float _2427 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_863, _864, _865));
    float _4768 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _4779 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2432 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * 0.3183098733425140380859375;
    float _2434 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * 0.3183098733425140380859375;
    float _2441 = ((cbLight._m0[_2390].x * _2396) * _2434) + (((cbLight._m0[_2400].x * _2362) * _2409) * _2432);
    float _2442 = ((_2396 * cbLight._m0[_2390].y) * _2434) + (((cbLight._m0[_2400].y * _2364) * _2409) * _2432);
    float _2443 = ((_2396 * cbLight._m0[_2390].z) * _2434) + (((cbLight._m0[_2400].z * _2366) * _2409) * _2432);
    uvec4 _2447 = floatBitsToUint(cbLight._m0[_2373 + 12u]);
    bool _2449 = _2447.x == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2449)
    {
        _2551 = _2441;
        _2553 = _2442;
        _2555 = _2443;
    }
    else
    {
        uint _2559 = _2373 + 6u;
        float _2575 = (dot(vec3(cbLight._m0[_2373 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4790 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2578 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2551 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2441;
        _2553 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2442;
        _2555 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2443;
    }
    bool _2558 = _2447.y == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2558)
    {
        _2613 = _2551;
        _2615 = _2553;
        _2617 = _2555;
    }
    else
    {
        uint _2786 = _2373 + 7u;
        float _2802 = (dot(vec3(cbLight._m0[_2373 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2803 = _2802 * _2802;
        float _4806 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2804 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2805 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2613 = (((cbLight._m0[_2786].x * 0.3183098733425140380859375) * _2804) * _2805) + _2551;
        _2615 = (((cbLight._m0[_2786].y * 0.3183098733425140380859375) * _2804) * _2805) + _2553;
        _2617 = (((cbLight._m0[_2786].z * 0.3183098733425140380859375) * _2804) * _2805) + _2555;
    }
    uint _2620 = _2373 + 8u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _866) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2373].x + _942;
    float _2636 = cbLight._m0[_2373].y + _943;
    float _2637 = cbLight._m0[_2373].z + _944;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2373].xyz));
    float _4822 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
    float _4833 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2649 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    float _2650 = dot(vec3(_863, _864, _865), vec3(_2642, _2643, _2644));
    float _4844 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2642, _2643, _2644));
    float _4855 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2634 * _2634;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
    float _2671 = 0.959999978542327880859375 - _1021;
    float _2673 = 0.959999978542327880859375 - _1022;
    float _2674 = 0.959999978542327880859375 - _1023;
    float _2681 = 1.0 - _2634;
    float _2692 = (0.5 / (((_2649 * ((_2648 * _2681) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2681) + _2634) * _2648))) * _2648;
    float _4866 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    uint _2708 = _2373 + 9u;
    float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _866) * 0.949999988079071044921875);
    float _2720 = _2719 * _2719;
    float _2721 = cbLight._m0[_2413].x + _942;
    float _2722 = cbLight._m0[_2413].y + _943;
    float _2723 = cbLight._m0[_2413].z + _944;
    float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
    float _2728 = _2727 * _2721;
    float _2729 = _2727 * _2722;
    float _2730 = _2727 * _2723;
    float _2731 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2413].xyz));
    float _4877 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2735 = dot(vec3(_863, _864, _865), vec3(_2728, _2729, _2730));
    float _4888 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2728, _2729, _2730));
    float _4899 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2720 * _2720;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
    float _2761 = 1.0 - _2720;
    float _2771 = (0.5 / (((_2649 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2761) + _2720) * _2734))) * _2734;
    float _4910 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2773 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    float _2783 = (((((_2754 * _2671) + _1024) * cbLight._m0[_2708].x) * _2773) * _2396) + ((((cbLight._m0[_2620].x * _2362) * ((_2670 * _2671) + _1024)) * _2694) * _2409);
    float _2784 = (((((_2754 * _2673) + _1026) * cbLight._m0[_2708].y) * _2773) * _2396) + ((((cbLight._m0[_2620].y * _2364) * ((_2670 * _2673) + _1026)) * _2694) * _2409);
    float _2785 = (((((_2754 * _2674) + _1027) * cbLight._m0[_2708].z) * _2773) * _2396) + ((((cbLight._m0[_2620].z * _2366) * ((_2670 * _2674) + _1027)) * _2694) * _2409);
    float _2841;
    float _2843;
    float _2845;
    if (_2449)
    {
        _2841 = _2783;
        _2843 = _2784;
        _2845 = _2785;
    }
    else
    {
        uint _2847 = _2373 + 2u;
        uint _2851 = _2373 + 10u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _866) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _942;
        float _2868 = cbLight._m0[_2847].y + _943;
        float _2869 = cbLight._m0[_2847].z + _944;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2847].xyz));
        float _4921 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2881 = dot(vec3(_863, _864, _865), vec3(_2874, _2875, _2876));
        float _4932 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4943 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2649 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2907) + _2866) * _2880))) * _2880;
        float _4954 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2841 = (((((_2900 * _2671) + _1024) * cbLight._m0[_2851].x) * _2919) * _2920) + _2783;
        _2843 = (((((_2900 * _2673) + _1026) * cbLight._m0[_2851].y) * _2919) * _2920) + _2784;
        _2845 = (((((_2900 * _2674) + _1027) * cbLight._m0[_2851].z) * _2919) * _2920) + _2785;
    }
    float _2951;
    float _2953;
    float _2955;
    if (_2558)
    {
        _2951 = _2841;
        _2953 = _2843;
        _2955 = _2845;
    }
    else
    {
        uint _2962 = _2373 + 3u;
        uint _2966 = _2373 + 11u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _866) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _942;
        float _2983 = cbLight._m0[_2962].y + _943;
        float _2984 = cbLight._m0[_2962].z + _944;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2962].xyz));
        float _4970 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _2996 = dot(vec3(_863, _864, _865), vec3(_2989, _2990, _2991));
        float _4981 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4992 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3015 = exp2(log2(1.0 - (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) * 5.0);
        float _3022 = 1.0 - _2981;
        float _3032 = (0.5 / (((_2649 * ((_2995 * _3022) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _3022) + _2981) * _2995))) * _2995;
        float _5003 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3034 = (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3035 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2951 = (((((_3015 * _2671) + _1024) * cbLight._m0[_2966].x) * _3034) * _3035) + _2841;
        _2953 = (((((_3015 * _2673) + _1026) * cbLight._m0[_2966].y) * _3034) * _3035) + _2843;
        _2955 = (((((_3015 * _2674) + _1027) * cbLight._m0[_2966].z) * _3034) * _3035) + _2845;
    }
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_2371.y == 0u)
    {
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.x;
        uint _3068 = uint((float(_3056.y) * floor(float(uint(cbSceneParam._m0[85u].y * _963) / _3057))) + floor(float(uint(cbSceneParam._m0[85u].x * _962) / _3057)));
        float _3078 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3079 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        uint _3082 = uint(isnan(14.0) ? _3079 : (isnan(_3079) ? 14.0 : min(_3079, 14.0)));
        uvec4 _3087 = texelFetch(g_lightClusterGridBuffer, int(((_3082 << 2u) + (_3068 << 6u)) >> 2u));
        uint _3088 = _3087.x;
        uint _3089 = _3056.z;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((((1u << ((_3089 >> 4u) & 15u)) + 4294967295u) & _3088) == 0u) || ((_3089 & 240u) == 0u))
        {
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
        }
        else
        {
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            uint _3326 = 0u;
            uint _3335;
            bool _3336;
            for (;;)
            {
                _3335 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                _3336 = _3335 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3336)
                {
                    frontier_phi_71_pred = _3325;
                    frontier_phi_71_pred_1 = _3324;
                    frontier_phi_71_pred_2 = _3323;
                    frontier_phi_71_pred_3 = _3322;
                    frontier_phi_71_pred_4 = _3321;
                    frontier_phi_71_pred_5 = _3320;
                }
                else
                {
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    uint _3471;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3323;
                    _3469 = _3324;
                    _3470 = _3325;
                    _3471 = _3335;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    for (;;)
                    {
                        uint _3475 = uint(findLSB(_3471)) + (_3326 << 5u);
                        uint _3472 = (_3471 + 4294967295u) & _3471;
                        uint _3477 = _3475 * 48u;
                        vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 3u)).x));
                        uint _3497 = (_3475 * 48u) + 4u;
                        vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3516 = (_3475 * 48u) + 8u;
                        vec3 _3527 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x));
                        float _3531 = _3491.x - _2147;
                        float _3532 = _3491.y - _2148;
                        float _3533 = _3491.z - _2149;
                        float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                        float _3537 = inversesqrt(_3534);
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3541 = dot(vec3(_981, _984, _987), vec3(_3538, _3539, _3540));
                        float _3546 = 1.0 - (_3534 * _3491.w);
                        float _5029 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3547 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                        float _3548 = sqrt(_3534) * _3510.w;
                        float _3551 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                        float _3552 = _3551 * _3551;
                        float _3555 = ((1.0 - _3552) * _3541) + _3552;
                        float _3558 = _3548 * _3548;
                        float _3562 = ((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3547) / ((_3558 * 0.699999988079071044921875) + 1.0);
                        float _3566 = (-0.0) - _2147;
                        float _3567 = (-0.0) - _2148;
                        float _3568 = (-0.0) - _2149;
                        float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                        float _3573 = _3572 * _3566;
                        float _3574 = _3572 * _3567;
                        float _3575 = _3572 * _3568;
                        float _3582 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                        float _3583 = 1.0 - _1056;
                        float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                        float _3591 = _3590 * _3590;
                        float _3592 = _3591 * _3591;
                        float _3593 = _3573 + _3538;
                        float _3594 = _3574 + _3539;
                        float _3595 = _3575 + _3540;
                        float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                        float _3603 = dot(vec3(_981, _984, _987), vec3(_3573, _3574, _3575));
                        float _5045 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3606 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                        float _3607 = dot(vec3(_981, _984, _987), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                        float _5056 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3610 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                        float _3615 = _3551 * _3591;
                        float _3616 = _3615 * _3615;
                        float _3619 = ((1.0 - _3616) * _3541) + _3616;
                        float _5067 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3620 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3621 = 1.0 - _3591;
                        float _3631 = (0.5 / (((_3620 * ((_3606 * _3621) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3591) * _3606))) * _3620;
                        float _5078 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3642 = (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) / ((_3614 * _3614) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125))) * _3547;
                        _3395 = (_3562 * _3510.x) + _3468;
                        _3396 = (_3562 * _3510.y) + _3469;
                        _3397 = (_3562 * _3510.z) + _3470;
                        _3392 = (_3642 * _3527.x) + _3465;
                        _3393 = (_3642 * _3527.y) + _3466;
                        _3394 = (_3642 * _3527.z) + _3467;
                        if (_3472 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3395;
                            _3469 = _3396;
                            _3470 = _3397;
                            _3471 = _3472;
                        }
                    }
                    frontier_phi_71_pred = _3397;
                    frontier_phi_71_pred_1 = _3396;
                    frontier_phi_71_pred_2 = _3395;
                    frontier_phi_71_pred_3 = _3394;
                    frontier_phi_71_pred_4 = _3393;
                    frontier_phi_71_pred_5 = _3392;
                }
                _3179 = frontier_phi_71_pred;
                _3177 = frontier_phi_71_pred_1;
                _3175 = frontier_phi_71_pred_2;
                _3173 = frontier_phi_71_pred_3;
                _3171 = frontier_phi_71_pred_4;
                _3169 = frontier_phi_71_pred_5;
                uint _3327 = _3326 + 1u;
                if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3320 = _3169;
                    _3321 = _3171;
                    _3322 = _3173;
                    _3323 = _3175;
                    _3324 = _3177;
                    _3325 = _3179;
                    _3326 = _3327;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
        }
        uvec4 _3182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3183 = _3182.z;
        uint _3185 = (_3183 >> 8u) & 15u;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        if (((4294967295u << _3185) & _3088) == 0u)
        {
            _3288 = _3168;
            _3290 = _3170;
            _3292 = _3172;
            _3294 = _3174;
            _3296 = _3176;
            _3298 = _3178;
        }
        else
        {
            float _3313 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _3314 = _3313 * _2147;
            float _3315 = _3313 * _2148;
            float _3316 = _3313 * _2149;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3185 < ((_3183 >> 12u) & 15u))
            {
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3448 = _3168;
                float _3449 = _3170;
                float _3450 = _3172;
                float _3451 = _3174;
                float _3452 = _3176;
                float _3453 = _3178;
                uint _3454 = _3185;
                uint _3463;
                bool _3464;
                for (;;)
                {
                    _3463 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3454 << 2u)) >> 2u)).x;
                    _3464 = _3463 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3464)
                    {
                        frontier_phi_82_pred = _3453;
                        frontier_phi_82_pred_1 = _3452;
                        frontier_phi_82_pred_2 = _3451;
                        frontier_phi_82_pred_3 = _3450;
                        frontier_phi_82_pred_4 = _3449;
                        frontier_phi_82_pred_5 = _3448;
                    }
                    else
                    {
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        float _3672 = _3451;
                        float _3673 = _3452;
                        float _3674 = _3453;
                        uint _3675 = _3463;
                        uint _3676;
                        vec4 _3701;
                        float _3702;
                        vec4 _3717;
                        vec3 _3729;
                        vec4 _3744;
                        vec4 _3759;
                        float _3805;
                        bool _3806;
                        for (;;)
                        {
                            uint _3686 = ((_3454 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3675));
                            _3676 = (_3675 + 4294967295u) & _3675;
                            uint _3688 = _3686 * 40u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3702 = _3701.w;
                            uint _3704 = (_3686 * 40u) + 4u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3686 * 40u) + 8u;
                            _3729 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x));
                            uint _3731 = (_3686 * 40u) + 16u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3686 * 40u) + 20u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3686 * 40u) + 24u;
                            vec4 _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3780 = (_3686 * 40u) + 28u;
                            vec4 _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            _3805 = fma(_2149, _3793.z, fma(_2148, _3793.y, _3793.x * _2147)) + _3793.w;
                            _3806 = !((fma(_2149, _3774.z, fma(_2148, _3774.y, _3774.x * _2147)) + _3774.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3806)
                            {
                                float _3833 = _3701.x - _2147;
                                float _3834 = _3701.y - _2148;
                                float _3835 = _3701.z - _2149;
                                float _3836 = dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835));
                                float _3839 = inversesqrt(_3836);
                                float _3840 = _3839 * _3833;
                                float _3841 = _3839 * _3834;
                                float _3842 = _3839 * _3835;
                                float _3846 = 1.0 - (_3836 / (_3702 * _3702));
                                float _5089 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                                float _3851 = sqrt(_3836) * _3717.w;
                                float _3853 = 1.39999997615814208984375 / (_3851 + 1.39999997615814208984375);
                                float _3854 = _3853 * _3853;
                                float _3857 = ((1.0 - _3854) * dot(vec3(_3840, _3841, _3842), vec3(_981, _984, _987))) + _3854;
                                float _3860 = _3851 * _3851;
                                float _3864 = (fma(_2149, _3744.z, fma(_2148, _3744.y, _3744.x * _2147)) + _3744.w) / _3805;
                                float _3865 = (fma(_2149, _3759.z, fma(_2148, _3759.y, _3759.x * _2147)) + _3759.w) / _3805;
                                float _3869 = 1.0 - dot(vec2(_3864, _3865), vec2(_3864, _3865));
                                float _5105 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                                float _3871 = _3870 * (((isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0))) * _3847) / ((_3860 * 0.699999988079071044921875) + 1.0));
                                float _3883 = exp2(log2(1.0 / ((_3860 * 3.5) + 5.0)) * 0.25);
                                float _3884 = 1.0 - _1056;
                                float _3891 = sqrt(1.0 - ((1.0 - (_3884 * _3884)) * (1.0 - (_3883 * _3883))));
                                float _3892 = _3891 * _3891;
                                float _3893 = _3892 * _3892;
                                float _3894 = _3840 - _3314;
                                float _3895 = _3841 - _3315;
                                float _3896 = _3842 - _3316;
                                float _3900 = inversesqrt(dot(vec3(_3894, _3895, _3896), vec3(_3894, _3895, _3896)));
                                float _3904 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3314, (-0.0) - _3315, (-0.0) - _3316));
                                float _5116 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3907 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3908 = dot(vec3(_981, _984, _987), vec3(_3900 * _3894, _3900 * _3895, _3900 * _3896));
                                float _5127 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3915 = ((_3911 * _3911) * (_3893 + (-1.0))) + 1.0;
                                float _3916 = _3853 * _3892;
                                float _3917 = _3916 * _3916;
                                float _3923 = ((1.0 - _3917) * dot(vec3(_981, _984, _987), vec3(_3840, _3841, _3842))) + _3917;
                                float _5138 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3924 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3925 = 1.0 - _3892;
                                float _3935 = (0.5 / (((_3924 * ((_3907 * _3925) + _3892)) + 9.9999999392252902907785028219223e-09) + (((_3924 * _3925) + _3892) * _3907))) * _3924;
                                float _5149 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3945 = (_3870 * _3847) * (((_3893 * 3.1415927410125732421875) * (isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0)))) / ((_3915 * _3915) * ((_3860 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3871 * _3717.z;
                                frontier_phi_88_pred_1 = _3871 * _3717.y;
                                frontier_phi_88_pred_2 = _3871 * _3717.x;
                                frontier_phi_88_pred_3 = _3945 * _3729.z;
                                frontier_phi_88_pred_4 = _3945 * _3729.y;
                                frontier_phi_88_pred_5 = _3945 * _3729.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3954 = frontier_phi_88_pred;
                            _3953 = frontier_phi_88_pred_1;
                            _3952 = frontier_phi_88_pred_2;
                            _3951 = frontier_phi_88_pred_3;
                            _3950 = frontier_phi_88_pred_4;
                            _3949 = frontier_phi_88_pred_5;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            if (_3676 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3676;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3661;
                        frontier_phi_82_pred_1 = _3660;
                        frontier_phi_82_pred_2 = _3659;
                        frontier_phi_82_pred_3 = _3658;
                        frontier_phi_82_pred_4 = _3657;
                        frontier_phi_82_pred_5 = _3656;
                    }
                    _3299 = frontier_phi_82_pred;
                    _3297 = frontier_phi_82_pred_1;
                    _3295 = frontier_phi_82_pred_2;
                    _3293 = frontier_phi_82_pred_3;
                    _3291 = frontier_phi_82_pred_4;
                    _3289 = frontier_phi_82_pred_5;
                    uint _3455 = _3454 + 1u;
                    if (_3455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3448 = _3289;
                        _3449 = _3291;
                        _3450 = _3293;
                        _3451 = _3295;
                        _3452 = _3297;
                        _3453 = _3299;
                        _3454 = _3455;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3295;
                frontier_phi_63_64_ladder_1 = _3299;
                frontier_phi_63_64_ladder_2 = _3297;
                frontier_phi_63_64_ladder_3 = _3293;
                frontier_phi_63_64_ladder_4 = _3291;
                frontier_phi_63_64_ladder_5 = _3289;
            }
            else
            {
                frontier_phi_63_64_ladder = _3174;
                frontier_phi_63_64_ladder_1 = _3178;
                frontier_phi_63_64_ladder_2 = _3176;
                frontier_phi_63_64_ladder_3 = _3172;
                frontier_phi_63_64_ladder_4 = _3170;
                frontier_phi_63_64_ladder_5 = _3168;
            }
            _3288 = frontier_phi_63_64_ladder_5;
            _3290 = frontier_phi_63_64_ladder_4;
            _3292 = frontier_phi_63_64_ladder_3;
            _3294 = frontier_phi_63_64_ladder;
            _3296 = frontier_phi_63_64_ladder_2;
            _3298 = frontier_phi_63_64_ladder_1;
        }
        float _3303 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3101 = (_3303 * _3294) + _2613;
        _3103 = (_3303 * _3296) + _2615;
        _3105 = (_3303 * _3298) + _2617;
        _3107 = ((_3288 * _1024) * _3303) + _2951;
        _3109 = ((_3290 * _1026) * _3303) + _2953;
        _3111 = ((_3292 * _1027) * _3303) + _2955;
    }
    else
    {
        _3101 = _2613;
        _3103 = _2615;
        _3105 = _2617;
        _3107 = _2951;
        _3109 = _2953;
        _3111 = _2955;
    }
    float _5165 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5176 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5187 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _3128 = ((isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0))) * (_3101 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1040))) + ((_3107 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _3129 = ((isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0))) * (_3103 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1040))) + ((_3109 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _3130 = ((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3105 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1040))) + ((_3111 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    uint _3131 = _285 + 6u;
    float _3139 = _962 / cbSceneParam._m0[86u].x;
    float _3140 = _963 / cbSceneParam._m0[86u].y;
    vec4 _3154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3156 = _3154.x;
    float _3157 = _3154.y;
    float _3158 = _3154.z;
    float _3159 = _3154.w;
    float _3230;
    float _3232;
    float _3234;
    float _3236;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _3193 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _3194 = _3193 / _885;
        float _3205 = _3194 * _935;
        float _3206 = _936 * _3194;
        float _3207 = (-0.0) - _3206;
        float _3208 = _3194 * _937;
        float _3210 = (cbSceneParam._m0[77u].w * _3207) / _3193;
        float _3211 = _3210 + cbSceneParam._m0[79u].w;
        float _3212 = cbSceneParam._m0[79u].w - _3206;
        float _3218 = sqrt(((_3205 * _3205) + (_3206 * _3206)) + (_3208 * _3208));
        float _3221 = (1.0 - (cbSceneParam._m0[77u].w / _3193)) * _3218;
        float _3226 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3228 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3405;
        if (abs((_3207 - _3210) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3405 = ((((_3211 > 0.0) ? exp2(_3226 * _3211) : (2.0 - exp2(_3228 * _3211))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3221;
        }
        else
        {
            float _3349 = 1.0 / cbSceneParam._m0[80u].x;
            float _3350 = isnan(_3212) ? _3211 : (isnan(_3211) ? _3212 : max(_3211, _3212));
            float _3351 = isnan(_3212) ? _3211 : (isnan(_3211) ? _3212 : min(_3211, _3212));
            float _3360 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : min(_3350, 0.0));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            _3405 = ((abs(_3218 / _3207) * cbSceneParam._m0[80u].y) * ((((_3360 - _3361) * 2.0) - ((exp2(_3226 * (isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0)))) - exp2(_3226 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))))) * _3349)) - ((exp2(_3228 * _3360) - exp2(_3228 * _3361)) * _3349))) + (_3221 * cbSceneParam._m0[80u].z);
        }
        vec4 _3407 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, 1.0), 0.0);
        float _3416 = exp2((_3405 * (-1.44269502162933349609375)) * (1.0 - _3407.w));
        float _3417 = log2(_3416);
        float _3433 = log2(_3159);
        _3230 = (exp2(_3433 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].x)) * _3407.x) / cbSceneParam._m0[78u].x)) + _3156;
        _3232 = (exp2(_3433 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].y)) * _3407.y) / cbSceneParam._m0[78u].y)) + _3157;
        _3234 = (exp2(_3433 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].z)) * _3407.z) / cbSceneParam._m0[78u].z)) + _3158;
        _3236 = _3416 * _3159;
    }
    else
    {
        _3230 = _3156;
        _3232 = _3157;
        _3234 = _3158;
        _3236 = _3159;
    }
    bool _3443;
    vec4 _3246;
    vec4 _3268;
    float _3270;
    float _3274;
    float _3275;
    float _3276;
    float _3277;
    bool _3287;
    for (;;)
    {
        _3246 = cbMatDynParam._m0[0u];
        float _3248 = roundEven(_3246.y);
        bool _3249 = _3248 == 3.0;
        float _3250 = log2(_3236);
        float _3257 = exp2(_3250 * cbSceneParam._m0[78u].x) * _3128;
        float _3258 = exp2(_3250 * cbSceneParam._m0[78u].y) * _3129;
        float _3259 = exp2(_3250 * cbSceneParam._m0[78u].z) * _3130;
        float _3266 = _951 + (-0.5);
        _3268 = cbMtdParam._m0[1u];
        _3270 = _3268.y * _3266;
        float _3273 = (_3248 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3274 = _3273 * (_3249 ? _3257 : (_3257 + (cbSceneParam._m0[72u].w * _3230)));
        _3275 = _3273 * (_3249 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3232)));
        _3276 = _3273 * (_3249 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3234)));
        _3277 = _3266 * 0.999000012874603271484375;
        _3287 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3287)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3277) < 0.5)
            {
                _3443 = true;
                break;
            }
        }
        uint _3384 = _1000 + uint(_3246.w);
        if ((cbInstanceData._m0[_3384].w < 1.0) && ((cbInstanceData._m0[_3384].w + _3277) < 0.5))
        {
            _3443 = true;
            break;
        }
        if ((_3270 + 1.0) < _3268.x)
        {
            _3443 = true;
            break;
        }
        _3443 = false;
        break;
    }
    float _3647;
    if (_3443)
    {
        discard_state = true;
        _3647 = 0.0;
    }
    else
    {
        _3647 = cbInstanceData._m0[_3131].w;
    }
    SV_Target.x = _3274;
    SV_Target.y = _3275;
    SV_Target.z = _3276;
    SV_Target.w = _3647;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3131].w;
    discard_exit();
}


