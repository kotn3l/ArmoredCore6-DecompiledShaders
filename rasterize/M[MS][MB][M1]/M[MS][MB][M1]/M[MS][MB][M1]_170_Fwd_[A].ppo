#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1277;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3670 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3681 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _530 = ((_502.x - _521) * _385) + _521;
    float _531 = ((_502.y - _522) * _385) + _522;
    float _532 = ((_502.z - _523) * _385) + _523;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _557 = ((_544.z - _532) * _458) + _532;
    float _560 = ((((_544.x - _530) * _458) + _530) * 2.0) + (-1.0);
    float _561 = ((((_544.y - _531) * _458) + _531) * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3692 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))));
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _599 = (_560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_479.x * 2.0) + (-1.0)))) + (((_587.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _600 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_479.y * 2.0) + (-1.0)))) + (((_587.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _628) * _385) + _628;
    float _664 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _646) * _458) + _646;
    float _668 = ((_612.x - _664) * cbMtdParam._m0[19u].z) + _664;
    float _673 = (((_479.z - _557) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _557;
    float _677 = ((_587.z - _673) * cbMtdParam._m0[19u].w) + _673;
    float _682 = cbMtdParam._m0[22u].x + _587.w;
    float _685 = fma(_567, _233 * NORMAL.x, fma(_600, _240 * TANGENT.x, (_226 * _218) * _599));
    float _688 = fma(_567, _233 * NORMAL.y, fma(_600, _240 * TANGENT.y, (_226 * _219) * _599));
    float _691 = fma(_567, _233 * NORMAL.z, fma(_600, _240 * TANGENT.z, (_226 * _220) * _599));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3703 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _699 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3725 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3736 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3747 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3758 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _704 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    vec4 _783 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _785 = _783.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_769 * _769) + (_770 * _770)) + (_771 * _771));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _3769 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _3780 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) - _964)) + _964) < ((_785 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _818 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _821 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _834 = _246 + 9u;
    uint _835 = _834 + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3791 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _847 = 1.0 - _704;
    float _848 = _844 * _847;
    float _849 = _845 * _847;
    float _850 = _846 * _847;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _704;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _704;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _704;
    float _858 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _874 = ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * TEXCOORD_5.w) * _870.x;
    float _875 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _696) - _776;
    float _883 = (_878 * _697) - _777;
    float _884 = (_878 * _698) - _778;
    float _888 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _3824 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_699);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _909 = (1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _890;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1005 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1009 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1034 = _938 + _696;
        float _1035 = _942 + _697;
        float _1036 = _946 + _698;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_696, _697, _698), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3872 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_696, _697, _698), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3905 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_696, _697, _698), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3938 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1322 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1326 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1349 = _938 + _696;
        float _1350 = _942 + _697;
        float _1351 = _946 + _698;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_696, _697, _698), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4001 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_696, _697, _698), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4034 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_696, _697, _698), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4067 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1277;
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = _1277;
        _1598 = _1277;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1289)) + _1289;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1290)) + _1290;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1291)) + _1291;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _882 * 0.5;
    float _1656 = _883 * 0.5;
    float _1657 = _884 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1787 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1790 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1818 = frontier_phi_17_15_ladder;
        }
        float _2021;
        if (_1787 > 0.0)
        {
            _2021 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2021 = frontier_phi_26_22_ladder;
        }
        float _2275;
        if (_1790 > 0.0)
        {
            _2275 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2275 = frontier_phi_38_33_ladder;
        }
        float _2277 = isnan(_2021) ? _1818 : (isnan(_1818) ? _2021 : min(_1818, _2021));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1784) + _1773;
        float _2283 = (_2278 * _1787) + _1777;
        float _2284 = (_2278 * _1790) + _1781;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2285;
        float _2289 = _2285 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 > _2289) || ((_2283 < _2287) || ((_2282 < _2287) || (_2282 > _2289))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_16_38_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_16_38_ladder_2;
        _1808 = frontier_phi_16_38_ladder_1;
        _1810 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1724);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1869 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1873 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1877 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1880 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1883 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1886 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _2026;
        if (_1880 > 0.0)
        {
            _2026 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2026 = frontier_phi_28_24_ladder;
        }
        float _2302;
        if (_1883 > 0.0)
        {
            _2302 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2302 = frontier_phi_40_35_ladder;
        }
        float _2515;
        if (_1886 > 0.0)
        {
            _2515 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2515 = frontier_phi_49_46_ladder;
        }
        float _2517 = isnan(_2302) ? _2026 : (isnan(_2026) ? _2302 : min(_2026, _2302));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1880) + _1869;
        float _2523 = (_2518 * _1883) + _1873;
        float _2524 = (_2518 * _1886) + _1877;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_25_49_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1905 = frontier_phi_25_49_ladder_2;
        _1907 = frontier_phi_25_49_ladder_1;
        _1909 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1815);
        _1905 = _1889.x * cbModelParam._m0[1u].z;
        _1907 = _1889.y * cbModelParam._m0[1u].z;
        _1909 = _1889.z * cbModelParam._m0[1u].z;
    }
    float _1922 = (((_909 * _858) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1924 = (((_909 * _860) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1926 = (((_909 * _861) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1922 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1922 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, _1922 * cbSceneParam._m0[91u].x));
    uvec4 _1945 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1947 = _1945.x * 14u;
    uint _1948 = _1947 + 13u;
    float _1955 = _874 + (-1.0);
    float _1960 = (cbLight._m0[_1948].x * _1955) + 1.0;
    float _1961 = (cbLight._m0[_1948].y * _1955) + 1.0;
    float _1962 = (cbLight._m0[_1948].z * _1955) + 1.0;
    float _1963 = (cbLight._m0[_1948].w * _1955) + 1.0;
    uint _1964 = _1947 + 5u;
    float _1970 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1974 = _1947 + 4u;
    float _1980 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1984 = _1947 | 1u;
    float _1995 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_696, _697, _698));
    float _1998 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_696, _697, _698));
    float _4203 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _4214 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2003 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2005 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2012 = ((cbLight._m0[_1964].x * _1970) * _2005) + ((cbLight._m0[_1974].x * _1980) * _2003);
    float _2013 = ((_1970 * cbLight._m0[_1964].y) * _2005) + ((_1980 * cbLight._m0[_1974].y) * _2003);
    float _2014 = ((_1970 * cbLight._m0[_1964].z) * _2005) + ((_1980 * cbLight._m0[_1974].z) * _2003);
    uvec4 _2018 = floatBitsToUint(cbLight._m0[_1947 + 12u]);
    bool _2020 = _2018.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_2020)
    {
        _2031 = _2012;
        _2033 = _2013;
        _2035 = _2014;
    }
    else
    {
        uint _2039 = _1947 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1947 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4225 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2058 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _2012;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _2013;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _2014;
    }
    bool _2038 = _2018.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2038)
    {
        _2076 = _2031;
        _2078 = _2033;
        _2080 = _2035;
    }
    else
    {
        uint _2246 = _1947 + 7u;
        float _2262 = (dot(vec3(cbLight._m0[_1947 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4241 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2265 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2076 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2031;
        _2078 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2033;
        _2080 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2035;
    }
    uint _2083 = _1947 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _699) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1947].x + _776;
    float _2099 = cbLight._m0[_1947].y + _777;
    float _2100 = cbLight._m0[_1947].z + _778;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1947].xyz));
    float _4257 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2112 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2113 = dot(vec3(_696, _697, _698), vec3(_2105, _2106, _2107));
    float _4279 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2105, _2106, _2107));
    float _4290 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
    float _2134 = 0.959999978542327880859375 - _855;
    float _2136 = 0.959999978542327880859375 - _856;
    float _2137 = 0.959999978542327880859375 - _857;
    float _2144 = 1.0 - _2097;
    float _2155 = (0.5 / (((_2112 * ((_2111 * _2144) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2144) + _2097) * _2111))) * _2111;
    float _4301 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2168 = _1947 + 9u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _699) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1984].x + _776;
    float _2182 = cbLight._m0[_1984].y + _777;
    float _2183 = cbLight._m0[_1984].z + _778;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1984].xyz));
    float _4312 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2195 = dot(vec3(_696, _697, _698), vec3(_2188, _2189, _2190));
    float _4323 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2188, _2189, _2190));
    float _4334 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2180 * _2180;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2221 = 1.0 - _2180;
    float _2231 = (0.5 / (((_2112 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2221) + _2180) * _2194))) * _2194;
    float _4345 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    float _2243 = (((((_2214 * _2134) + _858) * cbLight._m0[_2168].x) * _2233) * _1970) + (((((_2133 * _2134) + _858) * cbLight._m0[_2083].x) * _2157) * _1980);
    float _2244 = (((((_2214 * _2136) + _860) * cbLight._m0[_2168].y) * _2233) * _1970) + (((((_2133 * _2136) + _860) * cbLight._m0[_2083].y) * _2157) * _1980);
    float _2245 = (((((_2214 * _2137) + _861) * cbLight._m0[_2168].z) * _2233) * _1970) + (((((_2133 * _2137) + _861) * cbLight._m0[_2083].z) * _2157) * _1980);
    float _2307;
    float _2309;
    float _2311;
    if (_2020)
    {
        _2307 = _2243;
        _2309 = _2244;
        _2311 = _2245;
    }
    else
    {
        uint _2313 = _1947 + 2u;
        uint _2317 = _1947 + 10u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _699) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _776;
        float _2334 = cbLight._m0[_2313].y + _777;
        float _2335 = cbLight._m0[_2313].z + _778;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2313].xyz));
        float _4356 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2347 = dot(vec3(_696, _697, _698), vec3(_2340, _2341, _2342));
        float _4367 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4378 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
        float _2373 = 1.0 - _2332;
        float _2383 = (0.5 / (((_2112 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2373) + _2332) * _2346))) * _2346;
        float _4389 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2307 = (((((_2366 * _2134) + _858) * cbLight._m0[_2317].x) * _2385) * _2386) + _2243;
        _2309 = (((((_2366 * _2136) + _860) * cbLight._m0[_2317].y) * _2385) * _2386) + _2244;
        _2311 = (((((_2366 * _2137) + _861) * cbLight._m0[_2317].z) * _2385) * _2386) + _2245;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2038)
    {
        _2421 = _2307;
        _2423 = _2309;
        _2425 = _2311;
    }
    else
    {
        uint _2432 = _1947 + 3u;
        uint _2436 = _1947 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _699) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _776;
        float _2453 = cbLight._m0[_2432].y + _777;
        float _2454 = cbLight._m0[_2432].z + _778;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2432].xyz));
        float _4405 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2466 = dot(vec3(_696, _697, _698), vec3(_2459, _2460, _2461));
        float _4416 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4427 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2112 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2492) + _2451) * _2465))) * _2465;
        float _4438 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2421 = (((((_2485 * _2134) + _858) * cbLight._m0[_2436].x) * _2504) * _2505) + _2307;
        _2423 = (((((_2485 * _2136) + _860) * cbLight._m0[_2436].y) * _2504) * _2505) + _2309;
        _2425 = (((((_2485 * _2137) + _861) * cbLight._m0[_2436].z) * _2504) * _2505) + _2311;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1945.y == 0u)
    {
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2580;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2580;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2580;
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2596)));
        float _2617 = (log2(_2583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            uint _2887 = 0u;
            uint _2896;
            bool _2897;
            for (;;)
            {
                _2896 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                _2897 = _2896 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2897)
                {
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2896;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2887 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2581;
                        float _3093 = _3052.y - _2582;
                        float _3094 = _3052.z - _2583;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_815, _818, _821), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4464 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2581;
                        float _3128 = (-0.0) - _2582;
                        float _3129 = (-0.0) - _2583;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _890;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_815, _818, _821), vec3(_3134, _3135, _3136));
                        float _4480 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3169 = dot(vec3(_815, _818, _821), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4491 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4502 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4513 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2956 = (_3123 * _3071.x) + _3029;
                        _2957 = (_3123 * _3071.y) + _3030;
                        _2958 = (_3123 * _3071.z) + _3031;
                        _2953 = (_3204 * _3088.x) + _3026;
                        _2954 = (_3204 * _3088.y) + _3027;
                        _2955 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                _2729 = frontier_phi_66_pred;
                _2739 = frontier_phi_66_pred_1;
                _2737 = frontier_phi_66_pred_2;
                _2735 = frontier_phi_66_pred_3;
                _2733 = frontier_phi_66_pred_4;
                _2731 = frontier_phi_66_pred_5;
                uint _2888 = _2887 + 1u;
                if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2881 = _2729;
                    _2882 = _2731;
                    _2883 = _2733;
                    _2884 = _2735;
                    _2885 = _2737;
                    _2886 = _2739;
                    _2887 = _2888;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((4294967295u << _2745) & _2627) == 0u)
        {
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
        }
        else
        {
            float _2874 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
            float _2875 = _2874 * _2581;
            float _2876 = _2874 * _2582;
            float _2877 = _2874 * _2583;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _3009 = _2728;
                float _3010 = _2730;
                float _3011 = _2732;
                float _3012 = _2734;
                float _3013 = _2736;
                float _3014 = _2738;
                uint _3015 = _2745;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3025)
                    {
                        frontier_phi_77_pred = _3014;
                        frontier_phi_77_pred_1 = _3013;
                        frontier_phi_77_pred_2 = _3012;
                        frontier_phi_77_pred_3 = _3011;
                        frontier_phi_77_pred_4 = _3010;
                        frontier_phi_77_pred_5 = _3009;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        uint _3237 = _3024;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3321;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3248 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3248 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3248 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3248 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_2583, _3355.z, fma(_2582, _3355.y, _3355.x * _2581)) + _3355.w;
                            _3368 = !((fma(_2583, _3336.z, fma(_2582, _3336.y, _3336.x * _2581)) + _3336.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3263.x - _2581;
                                float _3396 = _3263.y - _2582;
                                float _3397 = _3263.z - _2583;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3264 * _3264));
                                float _4524 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3413 = sqrt(_3398) * _3279.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_815, _818, _821))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_2583, _3306.z, fma(_2582, _3306.y, _3306.x * _2581)) + _3306.w) / _3367;
                                float _3427 = (fma(_2583, _3321.z, fma(_2582, _3321.y, _3321.x * _2581)) + _3321.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4540 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _890;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2875;
                                float _3457 = _3403 - _2876;
                                float _3458 = _3404 - _2877;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2875, (-0.0) - _2876, (-0.0) - _2877));
                                float _4551 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3470 = dot(vec3(_815, _818, _821), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4562 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_815, _818, _821), vec3(_3402, _3403, _3404))) + _3479;
                                float _4573 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4584 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3433 * _3279.y;
                                frontier_phi_83_pred_1 = _3433 * _3279.x;
                                frontier_phi_83_pred_2 = _3507 * _3291.z;
                                frontier_phi_83_pred_3 = _3507 * _3291.y;
                                frontier_phi_83_pred_4 = _3507 * _3291.x;
                                frontier_phi_83_pred_5 = _3433 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_83_pred;
                            _3514 = frontier_phi_83_pred_1;
                            _3513 = frontier_phi_83_pred_2;
                            _3512 = frontier_phi_83_pred_3;
                            _3511 = frontier_phi_83_pred_4;
                            _3516 = frontier_phi_83_pred_5;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    _2860 = frontier_phi_77_pred;
                    _2858 = frontier_phi_77_pred_1;
                    _2856 = frontier_phi_77_pred_2;
                    _2854 = frontier_phi_77_pred_3;
                    _2852 = frontier_phi_77_pred_4;
                    _2850 = frontier_phi_77_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2850;
                        _3010 = _2852;
                        _3011 = _2854;
                        _3012 = _2856;
                        _3013 = _2858;
                        _3014 = _2860;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2860;
                frontier_phi_58_59_ladder_2 = _2858;
                frontier_phi_58_59_ladder_3 = _2856;
                frontier_phi_58_59_ladder_4 = _2852;
                frontier_phi_58_59_ladder_5 = _2850;
            }
            else
            {
                frontier_phi_58_59_ladder = _2732;
                frontier_phi_58_59_ladder_1 = _2738;
                frontier_phi_58_59_ladder_2 = _2736;
                frontier_phi_58_59_ladder_3 = _2734;
                frontier_phi_58_59_ladder_4 = _2730;
                frontier_phi_58_59_ladder_5 = _2728;
            }
            _2849 = frontier_phi_58_59_ladder_5;
            _2851 = frontier_phi_58_59_ladder_4;
            _2853 = frontier_phi_58_59_ladder;
            _2855 = frontier_phi_58_59_ladder_3;
            _2857 = frontier_phi_58_59_ladder_2;
            _2859 = frontier_phi_58_59_ladder_1;
        }
        float _2864 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2640 = (_2864 * _2855) + _2076;
        _2642 = (_2864 * _2857) + _2078;
        _2644 = (_2864 * _2859) + _2080;
        _2646 = ((_2849 * _858) * _2864) + _2421;
        _2648 = ((_2851 * _860) * _2864) + _2423;
        _2650 = ((_2853 * _861) * _2864) + _2425;
    }
    else
    {
        _2640 = _2076;
        _2642 = _2078;
        _2644 = _2080;
        _2646 = _2421;
        _2648 = _2423;
        _2650 = _2425;
    }
    float _4600 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4611 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4622 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2667 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2640 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _874))) + ((_2646 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2642 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _874))) + ((_2648 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2644 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _874))) + ((_2650 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    uint _2670 = _246 + 6u;
    float _2678 = _796 / cbSceneParam._m0[86u].x;
    float _2679 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2754 = _2753 / _718;
        float _2765 = _2754 * _769;
        float _2766 = _770 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2769 = _2754 * _771;
        float _2771 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2766;
        float _2779 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2767 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2910 = 1.0 / cbSceneParam._m0[80u].x;
            float _2911 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2912 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            _2966 = ((abs(_2779 / _2767) * cbSceneParam._m0[80u].y) * ((((_2921 - _2922) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))))) * _2910)) - ((exp2(_2789 * _2921) - exp2(_2789 * _2922)) * _2910))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2698);
        _2791 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2793 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2795 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2797 = _2977 * _2698;
    }
    else
    {
        _2791 = _2695;
        _2793 = _2696;
        _2795 = _2697;
        _2797 = _2698;
    }
    bool _3004;
    vec4 _2807;
    vec4 _2829;
    float _2831;
    float _2835;
    float _2836;
    float _2837;
    float _2838;
    bool _2848;
    for (;;)
    {
        _2807 = cbMatDynParam._m0[0u];
        float _2809 = roundEven(_2807.y);
        bool _2810 = _2809 == 3.0;
        float _2811 = log2(_2797);
        float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * _2667;
        float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * _2668;
        float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * _2669;
        float _2827 = _785 + (-0.5);
        _2829 = cbMtdParam._m0[1u];
        _2831 = _2829.y * _2827;
        float _2834 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2835 = _2834 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
        _2836 = _2834 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
        _2837 = _2834 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
        _2838 = _2827 * 0.999000012874603271484375;
        _2848 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2848)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2838) < 0.5)
            {
                _3004 = true;
                break;
            }
        }
        uint _2945 = _834 + uint(_2807.w);
        if ((cbInstanceData._m0[_2945].w < 1.0) && ((cbInstanceData._m0[_2945].w + _2838) < 0.5))
        {
            _3004 = true;
            break;
        }
        if ((_2831 + 1.0) < _2829.x)
        {
            _3004 = true;
            break;
        }
        _3004 = false;
        break;
    }
    float _3209;
    if (_3004)
    {
        discard_state = true;
        _3209 = 0.0;
    }
    else
    {
        _3209 = cbInstanceData._m0[_2670].w;
    }
    SV_Target.x = _2835;
    SV_Target.y = _2836;
    SV_Target.z = _2837;
    SV_Target.w = _3209;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
    discard_exit();
}


