#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _338 = (_329.x * 2.0) + (-1.0);
    float _340 = (_329.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3874 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))));
    float _350 = fma(_347, _231, fma(_340, _238, _338 * _224));
    float _353 = fma(_347, _232, fma(_340, _239, _338 * _225));
    float _356 = fma(_347, _233, fma(_340, _240, _338 * _226));
    float _360 = inversesqrt(dot(vec3(_350, _353, _356), vec3(_350, _353, _356)));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _398 = _396.x;
    float _399 = 1.0 - _398;
    float _408 = (cbMtdParam._m0[19u].x + dot(vec4(_360 * _350, _360 * _353, _360 * _356, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_398 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[21u].z);
    float _3885 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _411 = (-0.0) - cbMtdParam._m0[24u].x;
    float _413 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    float _421 = _409 - ((_409 * TEXCOORD_8.x) * _414);
    float _422 = _409 - ((_409 * TEXCOORD_8.y) * _414);
    float _423 = _409 - ((_409 * TEXCOORD_8.z) * _414);
    float _430 = (_421 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) + _288;
    float _431 = (_422 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) + _289;
    float _432 = (_423 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) + _290;
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _446 = _444.x;
    float _447 = 1.0 - _446;
    float _477 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_446 - _447) * cbMtdParam._m0[24u].w) + _447) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3906 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _486 = ((((cbMtdParam._m0[10u].x - _430) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _478) + _430;
    float _487 = ((((cbMtdParam._m0[10u].y - _431) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _478) + _431;
    float _488 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _432)) * _478) + _432;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _503 = _501.x;
    float _505 = _503 - (_503 * _421);
    float _507 = _505 - (_505 * _478);
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3917 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _538 = ((_521.z - _333) * _421) + _333;
    float _541 = ((cbMtdParam._m0[23u].y - _538) * _478) + _538;
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _566 = (_560.x * 2.0) + (-1.0);
    float _567 = (_560.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3928 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _583 = ((sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) - _347) * _423) + _347;
    float _586 = (((_528 - _338) * _421) + _338) + (cbMtdParam._m0[21u].x * _338);
    float _587 = (((_529 - _340) * _422) + _340) + (cbMtdParam._m0[21u].x * _340);
    float _598 = (((_566 - _586) + (_586 * cbMtdParam._m0[22u].z)) * _478) + _586;
    float _599 = (((_567 - _587) + (_587 * cbMtdParam._m0[22u].z)) * _478) + _587;
    float _600 = (_478 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _583)) + _583;
    float _602 = cbMtdParam._m0[22u].x + _329.w;
    float _605 = fma(_600, _231, fma(_599, _238, _598 * _224));
    float _608 = fma(_600, _232, fma(_599, _239, _598 * _225));
    float _611 = fma(_600, _233, fma(_599, _240, _598 * _226));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    float _616 = _615 * _605;
    float _617 = _615 * _608;
    float _618 = _615 * _611;
    float _3939 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _619 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3961 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3972 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3983 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3994 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _624 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _638 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_688 * _688) + (_689 * _689)) + (_690 * _690));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _4005 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _4016 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) - _886)) + _886) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_618, cbSceneParam._m0[5u].z, fma(_617, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _616));
    float _740 = fma(_618, cbSceneParam._m0[6u].z, fma(_617, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _616));
    float _743 = fma(_618, cbSceneParam._m0[7u].z, fma(_617, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _616));
    uint _756 = _243 + 9u;
    uint _757 = _756 + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_757].z;
    float _4027 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _769 = 1.0 - _624;
    float _770 = _766 * _769;
    float _771 = _767 * _769;
    float _772 = _768 * _769;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _624;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _624;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _624;
    float _780 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _796 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_616, _617, _618), vec3(_695, _696, _697));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _616) - _695;
    float _805 = (_800 * _617) - _696;
    float _806 = (_800 * _618) - _697;
    float _810 = abs(dot(vec3(_695, _696, _697), vec3(_616, _617, _618)));
    float _4060 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_619);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _926 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _930 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _955 = _860 + _616;
        float _956 = _864 + _617;
        float _957 = _868 + _618;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_616, _617, _618), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4108 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_616, _617, _618), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4141 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_616, _617, _618), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4174 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1244 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1248 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1271 = _860 + _616;
        float _1272 = _864 + _617;
        float _1273 = _868 + _618;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_616, _617, _618), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4237 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_616, _617, _618), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4270 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_616, _617, _618), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4303 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1198;
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _804 * 0.5;
    float _1578 = _805 * 0.5;
    float _1579 = _806 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1693 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1697 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1701 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1704 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1707 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1710 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1738;
        if (_1704 > 0.0)
        {
            _1738 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1738 = frontier_phi_17_15_ladder;
        }
        float _1909;
        if (_1707 > 0.0)
        {
            _1909 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1909 = frontier_phi_26_22_ladder;
        }
        float _2205;
        if (_1710 > 0.0)
        {
            _2205 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2205 = frontier_phi_38_33_ladder;
        }
        float _2207 = isnan(_1909) ? _1738 : (isnan(_1738) ? _1909 : min(_1738, _1909));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1704) + _1693;
        float _2213 = (_2208 * _1707) + _1697;
        float _2214 = (_2208 * _1710) + _1701;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1726 = frontier_phi_16_38_ladder_2;
        _1728 = frontier_phi_16_38_ladder_1;
        _1730 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1646);
        _1726 = _1714.x * cbModelParam._m0[1u].y;
        _1728 = _1714.y * cbModelParam._m0[1u].y;
        _1730 = _1714.z * cbModelParam._m0[1u].y;
    }
    float _1734 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1734 : min(cbModelParam._m0[25u].w, _1734));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1802 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1805 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1914;
        if (_1799 > 0.0)
        {
            _1914 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1914 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1802 > 0.0)
        {
            _2232 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_40_35_ladder;
        }
        float _2570;
        if (_1805 > 0.0)
        {
            _2570 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2570 = frontier_phi_50_47_ladder;
        }
        float _2572 = isnan(_2232) ? _1914 : (isnan(_1914) ? _2232 : min(_1914, _2232));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1799) + _1788;
        float _2578 = (_2573 * _1802) + _1792;
        float _2579 = (_2573 * _1805) + _1796;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1735);
            frontier_phi_25_50_ladder = _2701.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2701.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2701.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_25_50_ladder_2;
        _1826 = frontier_phi_25_50_ladder_1;
        _1828 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1735);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1841 = (((_831 * _780) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1843 = (((_831 * _782) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1845 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1901 = _1888 / _1900;
    float _1902 = _1892 / _1900;
    float _1903 = _1896 / _1900;
    float _2050;
    float _2051;
    float _2052;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1930 = ((uint(_1903 > cbSceneParam._m0[59u].y) + uint(_1903 > cbSceneParam._m0[59u].x)) + uint(_1903 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1931 = _1930 + 43u;
        uint _1939 = _1930 + 44u;
        uint _1947 = _1930 + 45u;
        uint _1955 = _1930 + 46u;
        float _1966 = fma(_1900, cbSceneParam._m0[_1931].w, fma(_1896, cbSceneParam._m0[_1931].z, fma(_1892, cbSceneParam._m0[_1931].y, _1888 * cbSceneParam._m0[_1931].x)));
        float _1970 = fma(_1900, cbSceneParam._m0[_1939].w, fma(_1896, cbSceneParam._m0[_1939].z, fma(_1892, cbSceneParam._m0[_1939].y, _1888 * cbSceneParam._m0[_1939].x)));
        float _1978 = fma(_1900, cbSceneParam._m0[_1955].w, fma(_1896, cbSceneParam._m0[_1955].z, fma(_1892, cbSceneParam._m0[_1955].y, _1888 * cbSceneParam._m0[_1955].x)));
        float _1983 = cbSceneParam._m0[33u].z * _1978;
        float _1985 = cbSceneParam._m0[33u].w * _1978;
        float _1988 = fma(_1900, cbSceneParam._m0[_1947].w, fma(_1896, cbSceneParam._m0[_1947].z, fma(_1892, cbSceneParam._m0[_1947].y, _1888 * cbSceneParam._m0[_1947].x))) / _1978;
        float _2036 = (cbSceneParam._m0[33u].x - sqrt(((_1902 * _1902) + (_1901 * _1901)) + (_1903 * _1903))) * cbSceneParam._m0[33u].y;
        float _4429 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2043 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1966) / _1978, (_1985 + _1970) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 + _1966) / _1978, (_1970 - _1983) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 - _1983) / _1978, (_1970 - _1985) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 - _1985) / _1978, (_1983 + _1970) / _1978), _1988), 0.0)).x), vec4(0.25)));
        _2050 = 1.0 - (_2043 * cbSceneParam._m0[34u].x);
        _2051 = 1.0 - (_2043 * cbSceneParam._m0[34u].y);
        _2052 = 1.0 - (_2043 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2050 = 1.0;
        _2051 = 1.0;
        _2052 = 1.0;
    }
    float _2116;
    float _2118;
    float _2120;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2104 = fma(_1900, cbSceneParam._m0[63u].w, fma(_1896, cbSceneParam._m0[63u].z, fma(_1892, cbSceneParam._m0[63u].y, _1888 * cbSceneParam._m0[63u].x)));
        float _2105 = fma(_1900, cbSceneParam._m0[60u].w, fma(_1896, cbSceneParam._m0[60u].z, fma(_1892, cbSceneParam._m0[60u].y, _1888 * cbSceneParam._m0[60u].x))) / _2104;
        float _2106 = fma(_1900, cbSceneParam._m0[61u].w, fma(_1896, cbSceneParam._m0[61u].z, fma(_1892, cbSceneParam._m0[61u].y, _1888 * cbSceneParam._m0[61u].x))) / _2104;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2105 >= cbSceneParam._m0[64u].x) && (_2106 >= cbSceneParam._m0[64u].y)) && (_2105 <= cbSceneParam._m0[64u].z)) && (_2106 <= cbSceneParam._m0[64u].w))
        {
            float _2245 = fma(_1900, cbSceneParam._m0[62u].w, fma(_1896, cbSceneParam._m0[62u].z, fma(_1892, cbSceneParam._m0[62u].y, _1888 * cbSceneParam._m0[62u].x))) / _2104;
            float _2249 = isnan(cbSceneParam._m0[41u].w) ? _2245 : (isnan(_2245) ? cbSceneParam._m0[41u].w : max(_2245, cbSceneParam._m0[41u].w));
            float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_1902 * _1902) + (_1901 * _1901)) + (_1903 * _1903))) * cbSceneParam._m0[33u].y;
            float _4445 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
            float _2299 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2105, cbSceneParam._m0[33u].w + _2106), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2105, _2106 - cbSceneParam._m0[33u].z), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2105 - cbSceneParam._m0[33u].z, _2106 - cbSceneParam._m0[33u].w), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2105 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2106), _2249), 0.0)).x), vec4(0.25)));
            float _2303 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
            float _2304 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
            float _2305 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2305) ? _2052 : (isnan(_2052) ? _2305 : min(_2052, _2305));
            frontier_phi_37_36_ladder_1 = isnan(_2304) ? _2051 : (isnan(_2051) ? _2304 : min(_2051, _2304));
            frontier_phi_37_36_ladder_2 = isnan(_2303) ? _2050 : (isnan(_2050) ? _2303 : min(_2050, _2303));
        }
        else
        {
            frontier_phi_37_36_ladder = _2052;
            frontier_phi_37_36_ladder_1 = _2051;
            frontier_phi_37_36_ladder_2 = _2050;
        }
        _2116 = frontier_phi_37_36_ladder_2;
        _2118 = frontier_phi_37_36_ladder_1;
        _2120 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2116 = _2050;
        _2118 = _2051;
        _2120 = _2052;
    }
    uvec4 _2125 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2127 = _2125.x * 14u;
    uint _2128 = _2127 + 13u;
    float _2135 = _796 + (-1.0);
    float _2140 = (cbLight._m0[_2128].x * _2135) + 1.0;
    float _2141 = (cbLight._m0[_2128].y * _2135) + 1.0;
    float _2142 = (cbLight._m0[_2128].z * _2135) + 1.0;
    float _2143 = (cbLight._m0[_2128].w * _2135) + 1.0;
    uint _2144 = _2127 + 5u;
    float _2150 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2154 = _2127 + 4u;
    float _2164 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2168 = _2127 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_616, _617, _618));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_616, _617, _618));
    float _4481 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4492 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2144].x * _2150) * _2189) + (((cbLight._m0[_2154].x * _2116) * _2164) * _2187);
    float _2197 = ((_2150 * cbLight._m0[_2144].y) * _2189) + (((cbLight._m0[_2154].y * _2118) * _2164) * _2187);
    float _2198 = ((_2150 * cbLight._m0[_2144].z) * _2189) + (((cbLight._m0[_2154].z * _2120) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2127 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2204)
    {
        _2306 = _2196;
        _2308 = _2197;
        _2310 = _2198;
    }
    else
    {
        uint _2314 = _2127 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2127 + 2u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4503 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2333 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2196;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2197;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2198;
    }
    bool _2313 = _2202.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2313)
    {
        _2368 = _2306;
        _2370 = _2308;
        _2372 = _2310;
    }
    else
    {
        uint _2541 = _2127 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2127 + 3u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4519 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2560 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2368 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2306;
        _2370 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2308;
        _2372 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2310;
    }
    uint _2375 = _2127 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _619) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2127].x + _695;
    float _2391 = cbLight._m0[_2127].y + _696;
    float _2392 = cbLight._m0[_2127].z + _697;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2127].xyz));
    float _4535 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2404 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2405 = dot(vec3(_616, _617, _618), vec3(_2397, _2398, _2399));
    float _4557 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2397, _2398, _2399));
    float _4568 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _777;
    float _2428 = 0.959999978542327880859375 - _778;
    float _2429 = 0.959999978542327880859375 - _779;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4579 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2463 = _2127 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _619) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2168].x + _695;
    float _2477 = cbLight._m0[_2168].y + _696;
    float _2478 = cbLight._m0[_2168].z + _697;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2168].xyz));
    float _4590 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2490 = dot(vec3(_616, _617, _618), vec3(_2483, _2484, _2485));
    float _4601 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2483, _2484, _2485));
    float _4612 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2516 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2404 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2516) + _2475) * _2489))) * _2489;
    float _4623 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2538 = (((((_2509 * _2426) + _780) * cbLight._m0[_2463].x) * _2528) * _2150) + ((((cbLight._m0[_2375].x * _2116) * ((_2425 * _2426) + _780)) * _2449) * _2164);
    float _2539 = (((((_2509 * _2428) + _782) * cbLight._m0[_2463].y) * _2528) * _2150) + ((((cbLight._m0[_2375].y * _2118) * ((_2425 * _2428) + _782)) * _2449) * _2164);
    float _2540 = (((((_2509 * _2429) + _783) * cbLight._m0[_2463].z) * _2528) * _2150) + ((((cbLight._m0[_2375].z * _2120) * ((_2425 * _2429) + _783)) * _2449) * _2164);
    float _2596;
    float _2598;
    float _2600;
    if (_2204)
    {
        _2596 = _2538;
        _2598 = _2539;
        _2600 = _2540;
    }
    else
    {
        uint _2602 = _2127 + 2u;
        uint _2606 = _2127 + 10u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _619) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _695;
        float _2623 = cbLight._m0[_2602].y + _696;
        float _2624 = cbLight._m0[_2602].z + _697;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2602].xyz));
        float _4634 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2636 = dot(vec3(_616, _617, _618), vec3(_2629, _2630, _2631));
        float _4645 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4656 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2404 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2662) + _2621) * _2635))) * _2635;
        float _4667 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2596 = (((((_2655 * _2426) + _780) * cbLight._m0[_2606].x) * _2674) * _2675) + _2538;
        _2598 = (((((_2655 * _2428) + _782) * cbLight._m0[_2606].y) * _2674) * _2675) + _2539;
        _2600 = (((((_2655 * _2429) + _783) * cbLight._m0[_2606].z) * _2674) * _2675) + _2540;
    }
    float _2706;
    float _2708;
    float _2710;
    if (_2313)
    {
        _2706 = _2596;
        _2708 = _2598;
        _2710 = _2600;
    }
    else
    {
        uint _2717 = _2127 + 3u;
        uint _2721 = _2127 + 11u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _619) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _695;
        float _2738 = cbLight._m0[_2717].y + _696;
        float _2739 = cbLight._m0[_2717].z + _697;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2717].xyz));
        float _4683 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2751 = dot(vec3(_616, _617, _618), vec3(_2744, _2745, _2746));
        float _4694 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4705 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2777 = 1.0 - _2736;
        float _2787 = (0.5 / (((_2404 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2777) + _2736) * _2750))) * _2750;
        float _4716 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2706 = (((((_2770 * _2426) + _780) * cbLight._m0[_2721].x) * _2789) * _2790) + _2596;
        _2708 = (((((_2770 * _2428) + _782) * cbLight._m0[_2721].y) * _2789) * _2790) + _2598;
        _2710 = (((((_2770 * _2429) + _783) * cbLight._m0[_2721].z) * _2789) * _2790) + _2600;
    }
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_2125.y == 0u)
    {
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2812)));
        float _2833 = (log2(_1903 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
        }
        else
        {
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3091)
                {
                    frontier_phi_71_pred = _3080;
                    frontier_phi_71_pred_1 = _3079;
                    frontier_phi_71_pred_2 = _3078;
                    frontier_phi_71_pred_3 = _3077;
                    frontier_phi_71_pred_4 = _3076;
                    frontier_phi_71_pred_5 = _3075;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3090;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3081 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _1901;
                        float _3287 = _3246.y - _1902;
                        float _3288 = _3246.z - _1903;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_737, _740, _743), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4742 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _1901;
                        float _3322 = (-0.0) - _1902;
                        float _3323 = (-0.0) - _1903;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3337 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _812;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3350 = _3330 + _3295;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_737, _740, _743), vec3(_3328, _3329, _3330));
                        float _4758 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3362 = dot(vec3(_737, _740, _743), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4769 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3306 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3296) + _3371;
                        float _4780 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4791 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3369 * _3369) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3150 = (_3317 * _3265.x) + _3223;
                        _3151 = (_3317 * _3265.y) + _3224;
                        _3152 = (_3317 * _3265.z) + _3225;
                        _3147 = (_3397 * _3282.x) + _3220;
                        _3148 = (_3397 * _3282.y) + _3221;
                        _3149 = (_3397 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_71_pred = _3152;
                    frontier_phi_71_pred_1 = _3151;
                    frontier_phi_71_pred_2 = _3150;
                    frontier_phi_71_pred_3 = _3149;
                    frontier_phi_71_pred_4 = _3148;
                    frontier_phi_71_pred_5 = _3147;
                }
                _2934 = frontier_phi_71_pred;
                _2932 = frontier_phi_71_pred_1;
                _2930 = frontier_phi_71_pred_2;
                _2928 = frontier_phi_71_pred_3;
                _2926 = frontier_phi_71_pred_4;
                _2924 = frontier_phi_71_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2924;
                    _3076 = _2926;
                    _3077 = _2928;
                    _3078 = _2930;
                    _3079 = _2932;
                    _3080 = _2934;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
        }
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.z;
        uint _2940 = (_2938 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2940) & _2843) == 0u)
        {
            _3043 = _2923;
            _3045 = _2925;
            _3047 = _2927;
            _3049 = _2929;
            _3051 = _2931;
            _3053 = _2933;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
            float _3069 = _3068 * _1901;
            float _3070 = _3068 * _1902;
            float _3071 = _3068 * _1903;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2940 < ((_2938 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3203 = _2923;
                float _3204 = _2925;
                float _3205 = _2927;
                float _3206 = _2929;
                float _3207 = _2931;
                float _3208 = _2933;
                uint _3209 = _2940;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3219)
                    {
                        frontier_phi_82_pred = _3208;
                        frontier_phi_82_pred_1 = _3207;
                        frontier_phi_82_pred_2 = _3206;
                        frontier_phi_82_pred_3 = _3205;
                        frontier_phi_82_pred_4 = _3204;
                        frontier_phi_82_pred_5 = _3203;
                    }
                    else
                    {
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3424 = _3203;
                        float _3425 = _3204;
                        float _3426 = _3205;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        uint _3430 = _3218;
                        uint _3431;
                        vec4 _3456;
                        float _3457;
                        vec4 _3472;
                        vec3 _3484;
                        vec4 _3500;
                        vec4 _3516;
                        float _3562;
                        bool _3563;
                        for (;;)
                        {
                            uint _3441 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3430));
                            _3431 = (_3430 + 4294967295u) & _3430;
                            uint _3443 = _3441 * 40u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3457 = _3456.w;
                            uint _3459 = (_3441 * 40u) + 4u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3441 * 40u) + 8u;
                            _3484 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x));
                            uint _3487 = (_3441 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3503 = (_3441 * 40u) + 20u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3441 * 40u) + 24u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3537 = (_3441 * 40u) + 28u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3562 = fma(_1903, _3550.z, fma(_1902, _3550.y, _3550.x * _1901)) + _3550.w;
                            _3563 = !((fma(_1903, _3531.z, fma(_1902, _3531.y, _3531.x * _1901)) + _3531.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3563)
                            {
                                float _3590 = _3456.x - _1901;
                                float _3591 = _3456.y - _1902;
                                float _3592 = _3456.z - _1903;
                                float _3593 = dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592));
                                float _3596 = inversesqrt(_3593);
                                float _3597 = _3596 * _3590;
                                float _3598 = _3596 * _3591;
                                float _3599 = _3596 * _3592;
                                float _3603 = 1.0 - (_3593 / (_3457 * _3457));
                                float _4802 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3608 = sqrt(_3593) * _3472.w;
                                float _3610 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                                float _3611 = _3610 * _3610;
                                float _3614 = ((1.0 - _3611) * dot(vec3(_3597, _3598, _3599), vec3(_737, _740, _743))) + _3611;
                                float _3617 = _3608 * _3608;
                                float _3621 = (fma(_1903, _3500.z, fma(_1902, _3500.y, _3500.x * _1901)) + _3500.w) / _3562;
                                float _3622 = (fma(_1903, _3516.z, fma(_1902, _3516.y, _3516.x * _1901)) + _3516.w) / _3562;
                                float _3626 = 1.0 - dot(vec2(_3621, _3622), vec2(_3621, _3622));
                                float _4818 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3628 = _3627 * (((isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0))) * _3604) / ((_3617 * 0.699999988079071044921875) + 1.0));
                                float _3640 = exp2(log2(1.0 / ((_3617 * 3.5) + 5.0)) * 0.25);
                                float _3641 = 1.0 - _812;
                                float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                                float _3649 = _3648 * _3648;
                                float _3650 = _3649 * _3649;
                                float _3651 = _3597 - _3069;
                                float _3652 = _3598 - _3070;
                                float _3653 = _3599 - _3071;
                                float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                                float _3661 = dot(vec3(_737, _740, _743), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4829 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3665 = dot(vec3(_737, _740, _743), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                                float _4840 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                                float _3673 = _3610 * _3649;
                                float _3674 = _3673 * _3673;
                                float _3680 = ((1.0 - _3674) * dot(vec3(_737, _740, _743), vec3(_3597, _3598, _3599))) + _3674;
                                float _4851 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3682 = 1.0 - _3649;
                                float _3692 = (0.5 / (((_3681 * ((_3664 * _3682) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3681 * _3682) + _3649) * _3664))) * _3681;
                                float _4862 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3702 = (_3627 * _3604) * (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3672 * _3672) * ((_3617 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3628 * _3472.z;
                                frontier_phi_88_pred_1 = _3628 * _3472.y;
                                frontier_phi_88_pred_2 = _3628 * _3472.x;
                                frontier_phi_88_pred_3 = _3702 * _3484.z;
                                frontier_phi_88_pred_4 = _3702 * _3484.y;
                                frontier_phi_88_pred_5 = _3702 * _3484.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3711 = frontier_phi_88_pred;
                            _3710 = frontier_phi_88_pred_1;
                            _3709 = frontier_phi_88_pred_2;
                            _3708 = frontier_phi_88_pred_3;
                            _3707 = frontier_phi_88_pred_4;
                            _3706 = frontier_phi_88_pred_5;
                            _3414 = _3709 + _3427;
                            _3415 = _3710 + _3428;
                            _3416 = _3711 + _3429;
                            _3411 = _3706 + _3424;
                            _3412 = _3707 + _3425;
                            _3413 = _3708 + _3426;
                            if (_3431 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3431;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3416;
                        frontier_phi_82_pred_1 = _3415;
                        frontier_phi_82_pred_2 = _3414;
                        frontier_phi_82_pred_3 = _3413;
                        frontier_phi_82_pred_4 = _3412;
                        frontier_phi_82_pred_5 = _3411;
                    }
                    _3054 = frontier_phi_82_pred;
                    _3052 = frontier_phi_82_pred_1;
                    _3050 = frontier_phi_82_pred_2;
                    _3048 = frontier_phi_82_pred_3;
                    _3046 = frontier_phi_82_pred_4;
                    _3044 = frontier_phi_82_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3044;
                        _3204 = _3046;
                        _3205 = _3048;
                        _3206 = _3050;
                        _3207 = _3052;
                        _3208 = _3054;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3050;
                frontier_phi_63_64_ladder_1 = _3054;
                frontier_phi_63_64_ladder_2 = _3052;
                frontier_phi_63_64_ladder_3 = _3048;
                frontier_phi_63_64_ladder_4 = _3046;
                frontier_phi_63_64_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_63_64_ladder = _2929;
                frontier_phi_63_64_ladder_1 = _2933;
                frontier_phi_63_64_ladder_2 = _2931;
                frontier_phi_63_64_ladder_3 = _2927;
                frontier_phi_63_64_ladder_4 = _2925;
                frontier_phi_63_64_ladder_5 = _2923;
            }
            _3043 = frontier_phi_63_64_ladder_5;
            _3045 = frontier_phi_63_64_ladder_4;
            _3047 = frontier_phi_63_64_ladder_3;
            _3049 = frontier_phi_63_64_ladder;
            _3051 = frontier_phi_63_64_ladder_2;
            _3053 = frontier_phi_63_64_ladder_1;
        }
        float _3058 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2856 = (_3058 * _3049) + _2368;
        _2858 = (_3058 * _3051) + _2370;
        _2860 = (_3058 * _3053) + _2372;
        _2862 = ((_3043 * _780) * _3058) + _2706;
        _2864 = ((_3045 * _782) * _3058) + _2708;
        _2866 = ((_3047 * _783) * _3058) + _2710;
    }
    else
    {
        _2856 = _2368;
        _2858 = _2370;
        _2860 = _2372;
        _2862 = _2706;
        _2864 = _2708;
        _2866 = _2710;
    }
    float _4878 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4889 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4900 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2883 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2856 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _796))) + ((_2862 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2884 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2858 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2864 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2885 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2860 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _796))) + ((_2866 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2886 = _243 + 6u;
    float _2894 = _716 / cbSceneParam._m0[86u].x;
    float _2895 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _638 : (isnan(_638) ? cbSceneParam._m0[77u].w : min(_638, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_638 > cbSceneParam._m0[78u].w)
    {
        float _2948 = isnan(_638) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _638 : min(cbSceneParam._m0[80u].w, _638));
        float _2949 = _2948 / _638;
        float _2960 = _2949 * _688;
        float _2961 = _689 * _2949;
        float _2962 = (-0.0) - _2961;
        float _2963 = _2949 * _690;
        float _2965 = (cbSceneParam._m0[77u].w * _2962) / _2948;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2961;
        float _2973 = sqrt(((_2960 * _2960) + (_2961 * _2961)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2948)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2962 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3106 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3160 = ((abs(_2973 / _2962) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2983 * _3115) - exp2(_2983 * _3116)) * _3104))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2914);
        _2985 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2911;
        _2987 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2912;
        _2989 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2913;
        _2991 = _3171 * _2914;
    }
    else
    {
        _2985 = _2911;
        _2987 = _2912;
        _2989 = _2913;
        _2991 = _2914;
    }
    bool _3198;
    vec4 _3001;
    vec4 _3023;
    float _3025;
    float _3029;
    float _3030;
    float _3031;
    float _3032;
    bool _3042;
    for (;;)
    {
        _3001 = cbMatDynParam._m0[0u];
        float _3003 = roundEven(_3001.y);
        bool _3004 = _3003 == 3.0;
        float _3005 = log2(_2991);
        float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * _2883;
        float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * _2884;
        float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * _2885;
        float _3021 = _704 + (-0.5);
        _3023 = cbMtdParam._m0[1u];
        _3025 = _3023.y * _3021;
        float _3028 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3029 = _3028 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = _3028 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
        _3031 = _3028 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
        _3032 = _3021 * 0.999000012874603271484375;
        _3042 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3042)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _3032) < 0.5)
            {
                _3198 = true;
                break;
            }
        }
        uint _3139 = _756 + uint(_3001.w);
        if ((cbInstanceData._m0[_3139].w < 1.0) && ((cbInstanceData._m0[_3139].w + _3032) < 0.5))
        {
            _3198 = true;
            break;
        }
        if ((_3025 + 1.0) < _3023.x)
        {
            _3198 = true;
            break;
        }
        _3198 = false;
        break;
    }
    float _3402;
    if (_3198)
    {
        discard_state = true;
        _3402 = 0.0;
    }
    else
    {
        _3402 = cbInstanceData._m0[_2886].w;
    }
    SV_Target.x = _3029;
    SV_Target.y = _3030;
    SV_Target.z = _3031;
    SV_Target.w = _3402;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
    discard_exit();
}


