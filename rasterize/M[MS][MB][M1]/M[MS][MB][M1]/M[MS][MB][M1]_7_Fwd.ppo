#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1092;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3422 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3433 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3444 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _278) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _279) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _315.x * cbMtdParam._m0[9u].x;
    float _321 = _315.y * cbMtdParam._m0[9u].y;
    float _322 = _315.z * cbMtdParam._m0[9u].z;
    float _326 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _292.x) * _320;
    float _329 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _292.y) * _321;
    float _332 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _292.z) * _322;
    float _339 = ((_320 - _326) * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) + _326;
    float _340 = ((_321 - _329) * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) + _329;
    float _341 = ((_322 - _332) * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) + _332;
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3455 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_416 - _417) * cbMtdParam._m0[24u].w) + _417) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3466 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _339) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _449) + _339;
    float _458 = ((((cbMtdParam._m0[10u].y - _340) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _449) + _340;
    float _459 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _341)) * _449) + _341;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _474 = _472.x;
    float _476 = _474 - (_474 * _449);
    float _481 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    float _485 = ((cbMtdParam._m0[23u].y - _481) * _449) + _481;
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _513 = (_507.x * 2.0) + (-1.0);
    float _514 = (_507.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3477 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _531 = (_449 * (((cbMtdParam._m0[22u].z * _400) - _400) + _513)) + _400;
    float _532 = (_449 * (((cbMtdParam._m0[22u].z * _401) - _401) + _514)) + _401;
    float _533 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) - _395)) + _395;
    float _535 = cbMtdParam._m0[22u].x + _380.w;
    float _538 = fma(_533, _227 * NORMAL.x, fma(_532, _234 * TANGENT.x, (_220 * _212) * _531));
    float _541 = fma(_533, _227 * NORMAL.y, fma(_532, _234 * TANGENT.y, (_220 * _213) * _531));
    float _544 = fma(_533, _227 * NORMAL.z, fma(_532, _234 * TANGENT.z, (_220 * _214) * _531));
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    float _549 = _548 * _538;
    float _550 = _548 * _541;
    float _551 = _548 * _544;
    float _3488 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _552 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3510 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3521 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3532 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3543 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _557 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _659 = fma(_551, cbSceneParam._m0[5u].z, fma(_550, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _549));
    float _662 = fma(_551, cbSceneParam._m0[6u].z, fma(_550, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _549));
    float _665 = fma(_551, cbSceneParam._m0[7u].z, fma(_550, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _549));
    uint _679 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3554 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _691 = 1.0 - _557;
    float _692 = _688 * _691;
    float _693 = _689 * _691;
    float _694 = _690 * _691;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _557;
    float _700 = (_689 + (-0.039999999105930328369140625)) * _557;
    float _701 = (_690 + (-0.039999999105930328369140625)) * _557;
    float _702 = _699 + 0.039999999105930328369140625;
    float _704 = _700 + 0.039999999105930328369140625;
    float _705 = _701 + 0.039999999105930328369140625;
    vec4 _714 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _718 = ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * TEXCOORD_5.w) * _714.x;
    float _719 = dot(vec3(_549, _550, _551), vec3(_629, _630, _631));
    float _722 = _719 * 2.0;
    float _726 = (_722 * _549) - _629;
    float _727 = (_722 * _550) - _630;
    float _728 = (_722 * _551) - _631;
    float _732 = abs(dot(vec3(_629, _630, _631), vec3(_549, _550, _551)));
    float _3587 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _734 = sqrt(_552);
    float _747 = exp2((_734 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_734 * 3.0));
    float _753 = (1.0 - _747) * ((_734 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _754 = _747 * _734;
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_790, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782));
        float _820 = fma(_790, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782));
        float _824 = fma(_790, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782));
        float _849 = _782 + _549;
        float _850 = _786 + _550;
        float _851 = _790 + _551;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_549, _550, _551), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3635 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_549, _550, _551), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3668 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_549, _550, _551), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3701 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_790, cbModelParam._m0[30u].z, fma(_786, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _782));
        float _1135 = fma(_790, cbModelParam._m0[31u].z, fma(_786, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _782));
        float _1139 = fma(_790, cbModelParam._m0[32u].z, fma(_786, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _782));
        float _1162 = _782 + _549;
        float _1163 = _786 + _550;
        float _1164 = _790 + _551;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_549, _550, _551), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3764 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_549, _550, _551), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3797 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_549, _550, _551), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3830 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1092;
        _1401 = _1092;
        _1402 = _1092;
        _1403 = _1092;
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1104)) + _1104;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _726 * 0.5;
    float _1469 = _727 * 0.5;
    float _1470 = _728 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_790, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _782)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_790, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _782)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_790, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _782)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_728, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726));
        float _1600 = fma(_728, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726));
        float _1603 = fma(_728, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1631 = frontier_phi_14_12_ladder;
        }
        float _1836;
        if (_1600 > 0.0)
        {
            _1836 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1836 = frontier_phi_23_19_ladder;
        }
        float _2090;
        if (_1603 > 0.0)
        {
            _2090 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2090 = frontier_phi_35_30_ladder;
        }
        float _2092 = isnan(_1836) ? _1631 : (isnan(_1631) ? _1836 : min(_1631, _1836));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1597) + _1586;
        float _2098 = (_2093 * _1600) + _1590;
        float _2099 = (_2093 * _1603) + _1594;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2102 = (-1.0) - _2100;
        float _2104 = _2100 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2099 > _2104) || ((_2099 < _2102) || ((_2098 > _2104) || ((_2098 < _2102) || ((_2097 < _2102) || (_2097 > _2104))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2099, cbModelParam._m0[9u].z, fma(_2098, cbModelParam._m0[9u].y, _2097 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2099, cbModelParam._m0[10u].z, fma(_2098, cbModelParam._m0[10u].y, _2097 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2099, cbModelParam._m0[11u].z, fma(_2098, cbModelParam._m0[11u].y, _2097 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_13_35_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_13_35_ladder_2;
        _1621 = frontier_phi_13_35_ladder_1;
        _1623 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_726, _727, _728), _1537);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_790, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _782)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_790, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _782)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_790, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _782)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_728, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726));
        float _1697 = fma(_728, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726));
        float _1700 = fma(_728, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726));
        float _1841;
        if (_1694 > 0.0)
        {
            _1841 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1841 = frontier_phi_25_21_ladder;
        }
        float _2117;
        if (_1697 > 0.0)
        {
            _2117 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2117 = frontier_phi_37_32_ladder;
        }
        float _2330;
        if (_1700 > 0.0)
        {
            _2330 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2330 = frontier_phi_46_43_ladder;
        }
        float _2332 = isnan(_2117) ? _1841 : (isnan(_1841) ? _2117 : min(_1841, _2117));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1694) + _1683;
        float _2338 = (_2333 * _1697) + _1687;
        float _2339 = (_2333 * _1700) + _1691;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2341 = (-1.0) - _2340;
        float _2343 = _2340 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2339 > _2343) || ((_2339 < _2341) || ((_2338 > _2343) || ((_2338 < _2341) || ((_2337 < _2341) || (_2337 > _2343))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2339, cbModelParam._m0[17u].z, fma(_2338, cbModelParam._m0[17u].y, _2337 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2339, cbModelParam._m0[18u].z, fma(_2338, cbModelParam._m0[18u].y, _2337 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2339, cbModelParam._m0[19u].z, fma(_2338, cbModelParam._m0[19u].y, _2337 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_22_46_ladder = _2538.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2538.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2538.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_22_46_ladder_2;
        _1721 = frontier_phi_22_46_ladder_1;
        _1723 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_726, _727, _728), _1628);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1736 = (((_753 * _702) + _754) * _718) * ((cbModelParam._m0[1u].w * (_1719 - _1619)) + _1619);
    float _1738 = (((_753 * _704) + _754) * _718) * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1740 = (((_753 * _705) + _754) * _718) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1743 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1769 = _718 + (-1.0);
    float _1774 = (cbLight._m0[_1762].x * _1769) + 1.0;
    float _1775 = (cbLight._m0[_1762].y * _1769) + 1.0;
    float _1776 = (cbLight._m0[_1762].z * _1769) + 1.0;
    float _1777 = (cbLight._m0[_1762].w * _1769) + 1.0;
    uint _1778 = _1761 + 5u;
    float _1784 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1788 = _1761 + 4u;
    float _1795 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1799 = _1761 | 1u;
    float _1810 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_549, _550, _551));
    float _1813 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_549, _550, _551));
    float _3966 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _3977 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1818 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1820 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1827 = ((cbLight._m0[_1778].x * _1784) * _1820) + ((cbLight._m0[_1788].x * _1795) * _1818);
    float _1828 = ((_1784 * cbLight._m0[_1778].y) * _1820) + ((_1795 * cbLight._m0[_1788].y) * _1818);
    float _1829 = ((_1784 * cbLight._m0[_1778].z) * _1820) + ((_1795 * cbLight._m0[_1788].z) * _1818);
    uvec4 _1833 = floatBitsToUint(cbLight._m0[_1761 + 12u]);
    bool _1835 = _1833.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1835)
    {
        _1846 = _1827;
        _1848 = _1828;
        _1850 = _1829;
    }
    else
    {
        uint _1854 = _1761 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1761 + 2u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3988 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1873 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1827;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1828;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1829;
    }
    bool _1853 = _1833.y == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1853)
    {
        _1891 = _1846;
        _1893 = _1848;
        _1895 = _1850;
    }
    else
    {
        uint _2061 = _1761 + 7u;
        float _2077 = (dot(vec3(cbLight._m0[_1761 + 3u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _4004 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2080 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1891 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _1846;
        _1893 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _1848;
        _1895 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _1850;
    }
    uint _1898 = _1761 + 8u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _552) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1761].x + _629;
    float _1914 = cbLight._m0[_1761].y + _630;
    float _1915 = cbLight._m0[_1761].z + _631;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1761].xyz));
    float _4020 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _1927 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1928 = dot(vec3(_549, _550, _551), vec3(_1920, _1921, _1922));
    float _4042 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1920, _1921, _1922));
    float _4053 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1912 * _1912;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1948 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
    float _1949 = 0.959999978542327880859375 - _699;
    float _1951 = 0.959999978542327880859375 - _700;
    float _1952 = 0.959999978542327880859375 - _701;
    float _1959 = 1.0 - _1912;
    float _1970 = (0.5 / (((_1927 * ((_1926 * _1959) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _1959) + _1912) * _1926))) * _1926;
    float _4064 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1972 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    uint _1983 = _1761 + 9u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _552) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1799].x + _629;
    float _1997 = cbLight._m0[_1799].y + _630;
    float _1998 = cbLight._m0[_1799].z + _631;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1799].xyz));
    float _4075 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2010 = dot(vec3(_549, _550, _551), vec3(_2003, _2004, _2005));
    float _4086 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_2003, _2004, _2005));
    float _4097 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1995 * _1995;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2029 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
    float _2036 = 1.0 - _1995;
    float _2046 = (0.5 / (((_1927 * ((_2009 * _2036) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2036) + _1995) * _2009))) * _2009;
    float _4108 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    float _2058 = (((((_2029 * _1949) + _702) * cbLight._m0[_1983].x) * _2048) * _1784) + (((((_1948 * _1949) + _702) * cbLight._m0[_1898].x) * _1972) * _1795);
    float _2059 = (((((_2029 * _1951) + _704) * cbLight._m0[_1983].y) * _2048) * _1784) + (((((_1948 * _1951) + _704) * cbLight._m0[_1898].y) * _1972) * _1795);
    float _2060 = (((((_2029 * _1952) + _705) * cbLight._m0[_1983].z) * _2048) * _1784) + (((((_1948 * _1952) + _705) * cbLight._m0[_1898].z) * _1972) * _1795);
    float _2122;
    float _2124;
    float _2126;
    if (_1835)
    {
        _2122 = _2058;
        _2124 = _2059;
        _2126 = _2060;
    }
    else
    {
        uint _2128 = _1761 + 2u;
        uint _2132 = _1761 + 10u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _552) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _629;
        float _2149 = cbLight._m0[_2128].y + _630;
        float _2150 = cbLight._m0[_2128].z + _631;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2128].xyz));
        float _4119 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2162 = dot(vec3(_549, _550, _551), vec3(_2155, _2156, _2157));
        float _4130 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4141 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
        float _2188 = 1.0 - _2147;
        float _2198 = (0.5 / (((_1927 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2188) + _2147) * _2161))) * _2161;
        float _4152 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2122 = (((((_2181 * _1949) + _702) * cbLight._m0[_2132].x) * _2200) * _2201) + _2058;
        _2124 = (((((_2181 * _1951) + _704) * cbLight._m0[_2132].y) * _2200) * _2201) + _2059;
        _2126 = (((((_2181 * _1952) + _705) * cbLight._m0[_2132].z) * _2200) * _2201) + _2060;
    }
    float _2236;
    float _2238;
    float _2240;
    if (_1853)
    {
        _2236 = _2122;
        _2238 = _2124;
        _2240 = _2126;
    }
    else
    {
        uint _2247 = _1761 + 3u;
        uint _2251 = _1761 + 11u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _552) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _629;
        float _2268 = cbLight._m0[_2247].y + _630;
        float _2269 = cbLight._m0[_2247].z + _631;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2247].xyz));
        float _4168 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2281 = dot(vec3(_549, _550, _551), vec3(_2274, _2275, _2276));
        float _4179 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4190 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
        float _2307 = 1.0 - _2266;
        float _2317 = (0.5 / (((_1927 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2307) + _2266) * _2280))) * _2280;
        float _4201 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2319 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2320 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2236 = (((((_2300 * _1949) + _702) * cbLight._m0[_2251].x) * _2319) * _2320) + _2122;
        _2238 = (((((_2300 * _1951) + _704) * cbLight._m0[_2251].y) * _2319) * _2320) + _2124;
        _2240 = (((((_2300 * _1952) + _705) * cbLight._m0[_2251].z) * _2319) * _2320) + _2126;
    }
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_1759.y == 0u)
    {
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2395;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2395;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2395;
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.x;
        uint _2422 = uint((float(_2410.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2411))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2411)));
        float _2432 = (log2(_2398 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2433 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        uint _2436 = uint(isnan(14.0) ? _2433 : (isnan(_2433) ? 14.0 : min(_2433, 14.0)));
        uvec4 _2441 = texelFetch(g_lightClusterGridBuffer, int(((_2436 << 2u) + (_2422 << 6u)) >> 2u));
        uint _2442 = _2441.x;
        uint _2443 = _2410.z;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((((1u << ((_2443 >> 4u) & 15u)) + 4294967295u) & _2442) == 0u) || ((_2443 & 240u) == 0u))
        {
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
        }
        else
        {
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            uint _2694 = 0u;
            uint _2703;
            bool _2704;
            for (;;)
            {
                _2703 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                _2704 = _2703 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2704)
                {
                    frontier_phi_61_pred = _2688;
                    frontier_phi_61_pred_1 = _2693;
                    frontier_phi_61_pred_2 = _2692;
                    frontier_phi_61_pred_3 = _2691;
                    frontier_phi_61_pred_4 = _2690;
                    frontier_phi_61_pred_5 = _2689;
                }
                else
                {
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    uint _2818;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2703;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    for (;;)
                    {
                        uint _2822 = uint(findLSB(_2818)) + (_2694 << 5u);
                        uint _2819 = (_2818 + 4294967295u) & _2818;
                        uint _2824 = _2822 * 48u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2844 = (_2822 * 48u) + 4u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2863 = (_2822 * 48u) + 8u;
                        vec3 _2874 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x));
                        float _2878 = _2838.x - _2396;
                        float _2879 = _2838.y - _2397;
                        float _2880 = _2838.z - _2398;
                        float _2881 = dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880));
                        float _2884 = inversesqrt(_2881);
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2888 = dot(vec3(_659, _662, _665), vec3(_2885, _2886, _2887));
                        float _2893 = 1.0 - (_2881 * _2838.w);
                        float _4227 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2895 = sqrt(_2881) * _2857.w;
                        float _2898 = 1.39999997615814208984375 / (_2895 + 1.39999997615814208984375);
                        float _2899 = _2898 * _2898;
                        float _2902 = ((1.0 - _2899) * _2888) + _2899;
                        float _2905 = _2895 * _2895;
                        float _2909 = ((isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))) * _2894) / ((_2905 * 0.699999988079071044921875) + 1.0);
                        float _2913 = (-0.0) - _2396;
                        float _2914 = (-0.0) - _2397;
                        float _2915 = (-0.0) - _2398;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2930 = exp2(log2(1.0 / ((_2905 * 3.5) + 5.0)) * 0.25);
                        float _2931 = 1.0 - _734;
                        float _2938 = sqrt(1.0 - ((1.0 - (_2931 * _2931)) * (1.0 - (_2930 * _2930))));
                        float _2939 = _2938 * _2938;
                        float _2940 = _2939 * _2939;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2951 = dot(vec3(_659, _662, _665), vec3(_2920, _2921, _2922));
                        float _4243 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2955 = dot(vec3(_659, _662, _665), vec3(_2947 * _2941, _2947 * _2942, _2947 * _2943));
                        float _4254 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2962 = ((_2958 * _2958) * (_2940 + (-1.0))) + 1.0;
                        float _2963 = _2898 * _2939;
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2888) + _2964;
                        float _4265 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2969 = 1.0 - _2939;
                        float _2979 = (0.5 / (((_2968 * ((_2954 * _2969) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2968 * _2969) + _2939) * _2954))) * _2968;
                        float _4276 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2990 = (((_2940 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_2962 * _2962) * ((_2905 * 2.1991131305694580078125) + 3.141590118408203125))) * _2894;
                        _2747 = (_2909 * _2857.x) + _2815;
                        _2748 = (_2909 * _2857.y) + _2816;
                        _2749 = (_2909 * _2857.z) + _2817;
                        _2744 = (_2990 * _2874.x) + _2812;
                        _2745 = (_2990 * _2874.y) + _2813;
                        _2746 = (_2990 * _2874.z) + _2814;
                        if (_2819 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2819;
                        }
                    }
                    frontier_phi_61_pred = _2744;
                    frontier_phi_61_pred_1 = _2749;
                    frontier_phi_61_pred_2 = _2748;
                    frontier_phi_61_pred_3 = _2747;
                    frontier_phi_61_pred_4 = _2746;
                    frontier_phi_61_pred_5 = _2745;
                }
                _2544 = frontier_phi_61_pred;
                _2554 = frontier_phi_61_pred_1;
                _2552 = frontier_phi_61_pred_2;
                _2550 = frontier_phi_61_pred_3;
                _2548 = frontier_phi_61_pred_4;
                _2546 = frontier_phi_61_pred_5;
                uint _2695 = _2694 + 1u;
                if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2688 = _2544;
                    _2689 = _2546;
                    _2690 = _2548;
                    _2691 = _2550;
                    _2692 = _2552;
                    _2693 = _2554;
                    _2694 = _2695;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
        }
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.z;
        uint _2560 = (_2558 >> 8u) & 15u;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((4294967295u << _2560) & _2442) == 0u)
        {
            _2656 = _2543;
            _2658 = _2545;
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
        }
        else
        {
            float _2681 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
            float _2682 = _2681 * _2396;
            float _2683 = _2681 * _2397;
            float _2684 = _2681 * _2398;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2560 < ((_2558 >> 12u) & 15u))
            {
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2795 = _2543;
                float _2796 = _2545;
                float _2797 = _2547;
                float _2798 = _2549;
                float _2799 = _2551;
                float _2800 = _2553;
                uint _2801 = _2560;
                uint _2810;
                bool _2811;
                for (;;)
                {
                    _2810 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                    _2811 = _2810 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2811)
                    {
                        frontier_phi_67_pred = _2798;
                        frontier_phi_67_pred_1 = _2799;
                        frontier_phi_67_pred_2 = _2800;
                        frontier_phi_67_pred_3 = _2797;
                        frontier_phi_67_pred_4 = _2796;
                        frontier_phi_67_pred_5 = _2795;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        uint _3014 = _2810;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3083;
                        vec4 _3098;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3025 = ((_2801 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3070 = (_3025 * 40u) + 16u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3025 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3025 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3025 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_2398, _3132.z, fma(_2397, _3132.y, _3132.x * _2396)) + _3132.w;
                            _3145 = !((fma(_2398, _3113.z, fma(_2397, _3113.y, _3113.x * _2396)) + _3113.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3040.x - _2396;
                                float _3173 = _3040.y - _2397;
                                float _3174 = _3040.z - _2398;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3041 * _3041));
                                float _4287 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3190 = sqrt(_3175) * _3056.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_659, _662, _665))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_2398, _3083.z, fma(_2397, _3083.y, _3083.x * _2396)) + _3083.w) / _3144;
                                float _3204 = (fma(_2398, _3098.z, fma(_2397, _3098.y, _3098.x * _2396)) + _3098.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4303 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _734;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2682;
                                float _3234 = _3180 - _2683;
                                float _3235 = _3181 - _2684;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_659, _662, _665), vec3((-0.0) - _2682, (-0.0) - _2683, (-0.0) - _2684));
                                float _4314 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3247 = dot(vec3(_659, _662, _665), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4325 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_659, _662, _665), vec3(_3179, _3180, _3181))) + _3256;
                                float _4336 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4347 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3284 * _3068.x;
                                frontier_phi_73_pred_1 = _3284 * _3068.y;
                                frontier_phi_73_pred_2 = _3210 * _3056.z;
                                frontier_phi_73_pred_3 = _3210 * _3056.y;
                                frontier_phi_73_pred_4 = _3210 * _3056.x;
                                frontier_phi_73_pred_5 = _3284 * _3068.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3288 = frontier_phi_73_pred;
                            _3289 = frontier_phi_73_pred_1;
                            _3293 = frontier_phi_73_pred_2;
                            _3292 = frontier_phi_73_pred_3;
                            _3291 = frontier_phi_73_pred_4;
                            _3290 = frontier_phi_73_pred_5;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2998;
                        frontier_phi_67_pred_1 = _2999;
                        frontier_phi_67_pred_2 = _3000;
                        frontier_phi_67_pred_3 = _2997;
                        frontier_phi_67_pred_4 = _2996;
                        frontier_phi_67_pred_5 = _2995;
                    }
                    _2663 = frontier_phi_67_pred;
                    _2665 = frontier_phi_67_pred_1;
                    _2667 = frontier_phi_67_pred_2;
                    _2661 = frontier_phi_67_pred_3;
                    _2659 = frontier_phi_67_pred_4;
                    _2657 = frontier_phi_67_pred_5;
                    uint _2802 = _2801 + 1u;
                    if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2795 = _2657;
                        _2796 = _2659;
                        _2797 = _2661;
                        _2798 = _2663;
                        _2799 = _2665;
                        _2800 = _2667;
                        _2801 = _2802;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2665;
                frontier_phi_55_56_ladder_1 = _2667;
                frontier_phi_55_56_ladder_2 = _2663;
                frontier_phi_55_56_ladder_3 = _2661;
                frontier_phi_55_56_ladder_4 = _2659;
                frontier_phi_55_56_ladder_5 = _2657;
            }
            else
            {
                frontier_phi_55_56_ladder = _2551;
                frontier_phi_55_56_ladder_1 = _2553;
                frontier_phi_55_56_ladder_2 = _2549;
                frontier_phi_55_56_ladder_3 = _2547;
                frontier_phi_55_56_ladder_4 = _2545;
                frontier_phi_55_56_ladder_5 = _2543;
            }
            _2656 = frontier_phi_55_56_ladder_5;
            _2658 = frontier_phi_55_56_ladder_4;
            _2660 = frontier_phi_55_56_ladder_3;
            _2662 = frontier_phi_55_56_ladder_2;
            _2664 = frontier_phi_55_56_ladder;
            _2666 = frontier_phi_55_56_ladder_1;
        }
        float _2671 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
        _2455 = (_2671 * _2662) + _1891;
        _2457 = (_2671 * _2664) + _1893;
        _2459 = (_2671 * _2666) + _1895;
        _2461 = ((_2656 * _702) * _2671) + _2236;
        _2463 = ((_2658 * _704) * _2671) + _2238;
        _2465 = ((_2660 * _705) * _2671) + _2240;
    }
    else
    {
        _2455 = _1891;
        _2457 = _1893;
        _2459 = _1895;
        _2461 = _2236;
        _2463 = _2238;
        _2465 = _2240;
    }
    float _4363 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4374 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4385 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    uint _2485 = _259 + 6u;
    float _2493 = _637 / cbSceneParam._m0[86u].x;
    float _2494 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2568 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2569 = _2568 / _571;
        float _2580 = _2569 * _622;
        float _2581 = _623 * _2569;
        float _2582 = (-0.0) - _2581;
        float _2584 = _2569 * _624;
        float _2586 = (cbSceneParam._m0[77u].w * _2582) / _2568;
        float _2587 = _2586 + cbSceneParam._m0[79u].w;
        float _2588 = cbSceneParam._m0[79u].w - _2581;
        float _2594 = sqrt(((_2580 * _2580) + (_2581 * _2581)) + (_2584 * _2584));
        float _2597 = (1.0 - (cbSceneParam._m0[77u].w / _2568)) * _2594;
        float _2602 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2604 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2757;
        if (abs((_2582 - _2586) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2757 = ((((_2587 > 0.0) ? exp2(_2602 * _2587) : (2.0 - exp2(_2604 * _2587))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2597;
        }
        else
        {
            float _2717 = 1.0 / cbSceneParam._m0[80u].x;
            float _2718 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : max(_2587, _2588));
            float _2719 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : min(_2587, _2588));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            _2757 = ((abs(_2594 / _2582) * cbSceneParam._m0[80u].y) * ((((_2728 - _2729) * 2.0) - ((exp2(_2602 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0)))) - exp2(_2602 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0))))) * _2717)) - ((exp2(_2604 * _2728) - exp2(_2604 * _2729)) * _2717))) + (_2597 * cbSceneParam._m0[80u].z);
        }
        vec4 _2759 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _2768 = exp2((_2757 * (-1.44269502162933349609375)) * (1.0 - _2759.w));
        float _2769 = log2(_2768);
        float _2785 = log2(_2513);
        _2606 = (exp2(_2785 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].x)) * _2759.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2608 = (exp2(_2785 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].y)) * _2759.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2610 = (exp2(_2785 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].z)) * _2759.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2612 = _2768 * _2513;
    }
    else
    {
        _2606 = _2510;
        _2608 = _2511;
        _2610 = _2512;
        _2612 = _2513;
    }
    float _2624 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2625 = _2624 == 3.0;
    float _2626 = log2(_2612);
    float _2633 = exp2(_2626 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2455 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _718))) + ((_2461 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2634 = exp2(_2626 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2457 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _718))) + ((_2463 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2635 = exp2(_2626 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2459 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _718))) + ((_2465 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1526)) * cbPerFrame._m0[3u].x));
    float _2644 = (_2624 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2644 * (_2625 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.y = _2644 * (_2625 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.z = _2644 * (_2625 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.w = cbInstanceData._m0[_2485].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2485].w;
}


