#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3925;
float _3926;
float _3927;
float _3928;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _290.x * cbMtdParam._m0[9u].x;
    float _297 = _290.y * cbMtdParam._m0[9u].y;
    float _298 = _290.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _367 = _363.z;
    float _371 = (_363.x * 2.0) + (-1.0);
    float _372 = (_363.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3937 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    float _384 = _371 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_337.x * 2.0) + (-1.0)));
    float _385 = _372 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_337.y * 2.0) + (-1.0)));
    float _388 = fma(_379, _239, fma(_385, _246, _384 * _232));
    float _391 = fma(_379, _240, fma(_385, _247, _384 * _233));
    float _394 = fma(_379, _241, fma(_385, _248, _384 * _234));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _436 = _434.x;
    float _437 = 1.0 - _436;
    float _444 = ((_436 - _437) * cbMtdParam._m0[24u].z) + _437;
    float _446 = (cbMtdParam._m0[19u].x + dot(vec4(_398 * _388, _398 * _391, _398 * _394, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_444 * cbMtdParam._m0[21u].z);
    float _3948 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _449 = (-0.0) - cbMtdParam._m0[24u].x;
    float _451 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
    float _459 = _447 - ((_447 * TEXCOORD_8.x) * _452);
    float _460 = _447 - ((_447 * TEXCOORD_8.y) * _452);
    float _461 = _447 - ((_447 * TEXCOORD_8.z) * _452);
    float _468 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _472 = ((isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : min(_468, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _480 = (_472 - (((_444 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _472))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3979 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _485 = ((_459 * ((_317.x * cbMtdParam._m0[18u].x) - _296)) * _481) + _296;
    float _486 = ((_460 * ((_317.y * cbMtdParam._m0[18u].y) - _297)) * _481) + _297;
    float _487 = ((_461 * ((_317.z * cbMtdParam._m0[18u].z) - _298)) * _481) + _298;
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _531 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_501 - _502) * cbMtdParam._m0[24u].w) + _502) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3990 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _540 = ((((cbMtdParam._m0[10u].x - _485) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _532) + _485;
    float _541 = ((((cbMtdParam._m0[10u].y - _486) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _532) + _486;
    float _542 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _487)) * _532) + _487;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _557 = _555.x;
    float _560 = _557 - ((_557 * _459) * _481);
    float _562 = _560 - (_560 * _532);
    float _567 = (((_337.z - _367) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _367;
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _588 = (_581.x * 2.0) + (-1.0);
    float _589 = (_581.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _4001 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _599 = (((_581.z - _567) * _459) * _481) + _567;
    float _602 = ((cbMtdParam._m0[23u].y - _599) * _532) + _599;
    vec4 _621 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _627 = (_621.x * 2.0) + (-1.0);
    float _628 = (_621.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _4012 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _649 = (((cbMtdParam._m0[21u].x * _384) + ((_588 - _384) * _459)) * _481) + _384;
    float _650 = (((cbMtdParam._m0[21u].x * _385) + ((_589 - _385) * _460)) * _481) + _385;
    float _651 = (((sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) - _379) * _461) * _481) + _379;
    float _662 = (((_627 - _649) + (_649 * cbMtdParam._m0[22u].z)) * _532) + _649;
    float _663 = (((_628 - _650) + (_650 * cbMtdParam._m0[22u].z)) * _532) + _650;
    float _664 = ((sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _651) * _532) + _651;
    float _666 = cbMtdParam._m0[22u].x + _363.w;
    float _669 = fma(_664, _239, fma(_663, _246, _662 * _232));
    float _672 = fma(_664, _240, fma(_663, _247, _662 * _233));
    float _675 = fma(_664, _241, fma(_663, _248, _662 * _234));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _4023 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _683 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4045 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4056 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4067 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4078 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _688 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _702 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _4089 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _4100 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) - _950)) + _950) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _804 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _807 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    uint _820 = _251 + 9u;
    uint _821 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_821].z;
    float _4111 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _833 = 1.0 - _688;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _688;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _688;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _688;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _860 = ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_680, _681, _682), vec3(_759, _760, _761));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _680) - _759;
    float _869 = (_864 * _681) - _760;
    float _870 = (_864 * _682) - _761;
    float _874 = abs(dot(vec3(_759, _760, _761), vec3(_680, _681, _682)));
    float _4144 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_683);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _990 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _994 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1019 = _924 + _680;
        float _1020 = _928 + _681;
        float _1021 = _932 + _682;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_680, _681, _682), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4192 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_680, _681, _682), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4225 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_680, _681, _682), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4258 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1308 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1312 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1335 = _924 + _680;
        float _1336 = _928 + _681;
        float _1337 = _932 + _682;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_680, _681, _682), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4321 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_680, _681, _682), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4354 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_680, _681, _682), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4387 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1275)) + _1275;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _868 * 0.5;
    float _1642 = _869 * 0.5;
    float _1643 = _870 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1771 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1774 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1802 = frontier_phi_17_15_ladder;
        }
        float _1973;
        if (_1771 > 0.0)
        {
            _1973 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1973 = frontier_phi_26_22_ladder;
        }
        float _2269;
        if (_1774 > 0.0)
        {
            _2269 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2269 = frontier_phi_38_33_ladder;
        }
        float _2271 = isnan(_1973) ? _1802 : (isnan(_1802) ? _1973 : min(_1802, _1973));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1768) + _1757;
        float _2277 = (_2272 * _1771) + _1761;
        float _2278 = (_2272 * _1774) + _1765;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_16_38_ladder_2;
        _1792 = frontier_phi_16_38_ladder_1;
        _1794 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1710);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1866 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1869 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _1978;
        if (_1863 > 0.0)
        {
            _1978 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1978 = frontier_phi_28_24_ladder;
        }
        float _2296;
        if (_1866 > 0.0)
        {
            _2296 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2296 = frontier_phi_40_35_ladder;
        }
        float _2634;
        if (_1869 > 0.0)
        {
            _2634 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2634 = frontier_phi_50_47_ladder;
        }
        float _2636 = isnan(_2296) ? _1978 : (isnan(_1978) ? _2296 : min(_1978, _2296));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _1863) + _1852;
        float _2642 = (_2637 * _1866) + _1856;
        float _2643 = (_2637 * _1869) + _1860;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2644;
        float _2647 = _2644 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2643 > _2647) || ((_2643 < _2645) || ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 < _2645) || (_2641 > _2647))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2643, cbModelParam._m0[17u].z, fma(_2642, cbModelParam._m0[17u].y, _2641 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2643, cbModelParam._m0[18u].z, fma(_2642, cbModelParam._m0[18u].y, _2641 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2643, cbModelParam._m0[19u].z, fma(_2642, cbModelParam._m0[19u].y, _2641 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_25_50_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_25_50_ladder_2;
        _1890 = frontier_phi_25_50_ladder_1;
        _1892 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1799);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1905 = (((_895 * _844) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1907 = (((_895 * _846) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1909 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1907, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1907, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1907, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1965 = _1952 / _1964;
    float _1966 = _1956 / _1964;
    float _1967 = _1960 / _1964;
    float _2114;
    float _2115;
    float _2116;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1994 = ((uint(_1967 > cbSceneParam._m0[59u].y) + uint(_1967 > cbSceneParam._m0[59u].x)) + uint(_1967 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1995 = _1994 + 43u;
        uint _2003 = _1994 + 44u;
        uint _2011 = _1994 + 45u;
        uint _2019 = _1994 + 46u;
        float _2030 = fma(_1964, cbSceneParam._m0[_1995].w, fma(_1960, cbSceneParam._m0[_1995].z, fma(_1956, cbSceneParam._m0[_1995].y, _1952 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1964, cbSceneParam._m0[_2003].w, fma(_1960, cbSceneParam._m0[_2003].z, fma(_1956, cbSceneParam._m0[_2003].y, _1952 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1964, cbSceneParam._m0[_2019].w, fma(_1960, cbSceneParam._m0[_2019].z, fma(_1956, cbSceneParam._m0[_2019].y, _1952 * cbSceneParam._m0[_2019].x)));
        float _2047 = cbSceneParam._m0[33u].z * _2042;
        float _2049 = cbSceneParam._m0[33u].w * _2042;
        float _2052 = fma(_1964, cbSceneParam._m0[_2011].w, fma(_1960, cbSceneParam._m0[_2011].z, fma(_1956, cbSceneParam._m0[_2011].y, _1952 * cbSceneParam._m0[_2011].x))) / _2042;
        float _2100 = (cbSceneParam._m0[33u].x - sqrt(((_1966 * _1966) + (_1965 * _1965)) + (_1967 * _1967))) * cbSceneParam._m0[33u].y;
        float _4513 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2107 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2030) / _2042, (_2049 + _2034) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 + _2030) / _2042, (_2034 - _2047) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 - _2047) / _2042, (_2034 - _2049) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 - _2049) / _2042, (_2047 + _2034) / _2042), _2052), 0.0)).x), vec4(0.25)));
        _2114 = 1.0 - (_2107 * cbSceneParam._m0[34u].x);
        _2115 = 1.0 - (_2107 * cbSceneParam._m0[34u].y);
        _2116 = 1.0 - (_2107 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2114 = 1.0;
        _2115 = 1.0;
        _2116 = 1.0;
    }
    float _2180;
    float _2182;
    float _2184;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2168 = fma(_1964, cbSceneParam._m0[63u].w, fma(_1960, cbSceneParam._m0[63u].z, fma(_1956, cbSceneParam._m0[63u].y, _1952 * cbSceneParam._m0[63u].x)));
        float _2169 = fma(_1964, cbSceneParam._m0[60u].w, fma(_1960, cbSceneParam._m0[60u].z, fma(_1956, cbSceneParam._m0[60u].y, _1952 * cbSceneParam._m0[60u].x))) / _2168;
        float _2170 = fma(_1964, cbSceneParam._m0[61u].w, fma(_1960, cbSceneParam._m0[61u].z, fma(_1956, cbSceneParam._m0[61u].y, _1952 * cbSceneParam._m0[61u].x))) / _2168;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2169 >= cbSceneParam._m0[64u].x) && (_2170 >= cbSceneParam._m0[64u].y)) && (_2169 <= cbSceneParam._m0[64u].z)) && (_2170 <= cbSceneParam._m0[64u].w))
        {
            float _2309 = fma(_1964, cbSceneParam._m0[62u].w, fma(_1960, cbSceneParam._m0[62u].z, fma(_1956, cbSceneParam._m0[62u].y, _1952 * cbSceneParam._m0[62u].x))) / _2168;
            float _2313 = isnan(cbSceneParam._m0[41u].w) ? _2309 : (isnan(_2309) ? cbSceneParam._m0[41u].w : max(_2309, cbSceneParam._m0[41u].w));
            float _2356 = (cbSceneParam._m0[33u].x - sqrt(((_1966 * _1966) + (_1965 * _1965)) + (_1967 * _1967))) * cbSceneParam._m0[33u].y;
            float _4529 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
            float _2363 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2169, cbSceneParam._m0[33u].w + _2170), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2169, _2170 - cbSceneParam._m0[33u].z), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2169 - cbSceneParam._m0[33u].z, _2170 - cbSceneParam._m0[33u].w), _2313), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2169 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2170), _2313), 0.0)).x), vec4(0.25)));
            float _2367 = 1.0 - (_2363 * cbSceneParam._m0[34u].x);
            float _2368 = 1.0 - (_2363 * cbSceneParam._m0[34u].y);
            float _2369 = 1.0 - (_2363 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2369) ? _2116 : (isnan(_2116) ? _2369 : min(_2116, _2369));
            frontier_phi_37_36_ladder_1 = isnan(_2368) ? _2115 : (isnan(_2115) ? _2368 : min(_2115, _2368));
            frontier_phi_37_36_ladder_2 = isnan(_2367) ? _2114 : (isnan(_2114) ? _2367 : min(_2114, _2367));
        }
        else
        {
            frontier_phi_37_36_ladder = _2116;
            frontier_phi_37_36_ladder_1 = _2115;
            frontier_phi_37_36_ladder_2 = _2114;
        }
        _2180 = frontier_phi_37_36_ladder_2;
        _2182 = frontier_phi_37_36_ladder_1;
        _2184 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2180 = _2114;
        _2182 = _2115;
        _2184 = _2116;
    }
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _860 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2228 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2232 = _2191 | 1u;
    float _2243 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_680, _681, _682));
    float _2246 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_680, _681, _682));
    float _4565 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _4576 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2251 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2253 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * 0.3183098733425140380859375;
    float _2260 = ((cbLight._m0[_2208].x * _2214) * _2253) + (((cbLight._m0[_2218].x * _2180) * _2228) * _2251);
    float _2261 = ((_2214 * cbLight._m0[_2208].y) * _2253) + (((cbLight._m0[_2218].y * _2182) * _2228) * _2251);
    float _2262 = ((_2214 * cbLight._m0[_2208].z) * _2253) + (((cbLight._m0[_2218].z * _2184) * _2228) * _2251);
    uvec4 _2266 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2268 = _2266.x == 0u;
    float _2370;
    float _2372;
    float _2374;
    if (_2268)
    {
        _2370 = _2260;
        _2372 = _2261;
        _2374 = _2262;
    }
    else
    {
        uint _2378 = _2191 + 6u;
        float _2394 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4587 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2397 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2370 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2260;
        _2372 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2261;
        _2374 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2262;
    }
    bool _2377 = _2266.y == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2377)
    {
        _2432 = _2370;
        _2434 = _2372;
        _2436 = _2374;
    }
    else
    {
        uint _2605 = _2191 + 7u;
        float _2621 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2622 = _2621 * _2621;
        float _4603 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2623 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2624 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2432 = (((cbLight._m0[_2605].x * 0.3183098733425140380859375) * _2623) * _2624) + _2370;
        _2434 = (((cbLight._m0[_2605].y * 0.3183098733425140380859375) * _2623) * _2624) + _2372;
        _2436 = (((cbLight._m0[_2605].z * 0.3183098733425140380859375) * _2623) * _2624) + _2374;
    }
    uint _2439 = _2191 + 8u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _683) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2191].x + _759;
    float _2455 = cbLight._m0[_2191].y + _760;
    float _2456 = cbLight._m0[_2191].z + _761;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2191].xyz));
    float _4619 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _4630 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2468 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2469 = dot(vec3(_680, _681, _682), vec3(_2461, _2462, _2463));
    float _4641 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2461, _2462, _2463));
    float _4652 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2453 * _2453;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2490 = 0.959999978542327880859375 - _841;
    float _2492 = 0.959999978542327880859375 - _842;
    float _2493 = 0.959999978542327880859375 - _843;
    float _2500 = 1.0 - _2453;
    float _2511 = (0.5 / (((_2468 * ((_2467 * _2500) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2500) + _2453) * _2467))) * _2467;
    float _4663 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    uint _2527 = _2191 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _683) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2232].x + _759;
    float _2541 = cbLight._m0[_2232].y + _760;
    float _2542 = cbLight._m0[_2232].z + _761;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2232].xyz));
    float _4674 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2554 = dot(vec3(_680, _681, _682), vec3(_2547, _2548, _2549));
    float _4685 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2547, _2548, _2549));
    float _4696 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2580 = 1.0 - _2539;
    float _2590 = (0.5 / (((_2468 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2580) + _2539) * _2553))) * _2553;
    float _4707 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2602 = (((((_2573 * _2490) + _844) * cbLight._m0[_2527].x) * _2592) * _2214) + ((((cbLight._m0[_2439].x * _2180) * ((_2489 * _2490) + _844)) * _2513) * _2228);
    float _2603 = (((((_2573 * _2492) + _846) * cbLight._m0[_2527].y) * _2592) * _2214) + ((((cbLight._m0[_2439].y * _2182) * ((_2489 * _2492) + _846)) * _2513) * _2228);
    float _2604 = (((((_2573 * _2493) + _847) * cbLight._m0[_2527].z) * _2592) * _2214) + ((((cbLight._m0[_2439].z * _2184) * ((_2489 * _2493) + _847)) * _2513) * _2228);
    float _2660;
    float _2662;
    float _2664;
    if (_2268)
    {
        _2660 = _2602;
        _2662 = _2603;
        _2664 = _2604;
    }
    else
    {
        uint _2666 = _2191 + 2u;
        uint _2670 = _2191 + 10u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _683) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _759;
        float _2687 = cbLight._m0[_2666].y + _760;
        float _2688 = cbLight._m0[_2666].z + _761;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2666].xyz));
        float _4718 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2700 = dot(vec3(_680, _681, _682), vec3(_2693, _2694, _2695));
        float _4729 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4740 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
        float _2726 = 1.0 - _2685;
        float _2736 = (0.5 / (((_2468 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2726) + _2685) * _2699))) * _2699;
        float _4751 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2660 = (((((_2719 * _2490) + _844) * cbLight._m0[_2670].x) * _2738) * _2739) + _2602;
        _2662 = (((((_2719 * _2492) + _846) * cbLight._m0[_2670].y) * _2738) * _2739) + _2603;
        _2664 = (((((_2719 * _2493) + _847) * cbLight._m0[_2670].z) * _2738) * _2739) + _2604;
    }
    float _2770;
    float _2772;
    float _2774;
    if (_2377)
    {
        _2770 = _2660;
        _2772 = _2662;
        _2774 = _2664;
    }
    else
    {
        uint _2781 = _2191 + 3u;
        uint _2785 = _2191 + 11u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _683) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _759;
        float _2802 = cbLight._m0[_2781].y + _760;
        float _2803 = cbLight._m0[_2781].z + _761;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2781].xyz));
        float _4767 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2815 = dot(vec3(_680, _681, _682), vec3(_2808, _2809, _2810));
        float _4778 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4789 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2841 = 1.0 - _2800;
        float _2851 = (0.5 / (((_2468 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2841) + _2800) * _2814))) * _2814;
        float _4800 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2770 = (((((_2834 * _2490) + _844) * cbLight._m0[_2785].x) * _2853) * _2854) + _2660;
        _2772 = (((((_2834 * _2492) + _846) * cbLight._m0[_2785].y) * _2853) * _2854) + _2662;
        _2774 = (((((_2834 * _2493) + _847) * cbLight._m0[_2785].z) * _2853) * _2854) + _2664;
    }
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    if (_2189.y == 0u)
    {
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.x;
        uint _2887 = uint((float(_2875.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2876))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2876)));
        float _2897 = (log2(_1967 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2898 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        uint _2901 = uint(isnan(14.0) ? _2898 : (isnan(_2898) ? 14.0 : min(_2898, 14.0)));
        uvec4 _2906 = texelFetch(g_lightClusterGridBuffer, int(((_2901 << 2u) + (_2887 << 6u)) >> 2u));
        uint _2907 = _2906.x;
        uint _2908 = _2875.z;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((((1u << ((_2908 >> 4u) & 15u)) + 4294967295u) & _2907) == 0u) || ((_2908 & 240u) == 0u))
        {
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
        }
        else
        {
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3155)
                {
                    frontier_phi_71_pred = _3144;
                    frontier_phi_71_pred_1 = _3143;
                    frontier_phi_71_pred_2 = _3142;
                    frontier_phi_71_pred_3 = _3141;
                    frontier_phi_71_pred_4 = _3140;
                    frontier_phi_71_pred_5 = _3139;
                }
                else
                {
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    uint _3290;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3154;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    for (;;)
                    {
                        uint _3294 = uint(findLSB(_3290)) + (_3145 << 5u);
                        uint _3291 = (_3290 + 4294967295u) & _3290;
                        uint _3296 = _3294 * 48u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3316 = (_3294 * 48u) + 4u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3335 = (_3294 * 48u) + 8u;
                        vec3 _3346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x));
                        float _3350 = _3310.x - _1965;
                        float _3351 = _3310.y - _1966;
                        float _3352 = _3310.z - _1967;
                        float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                        float _3356 = inversesqrt(_3353);
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3360 = dot(vec3(_801, _804, _807), vec3(_3357, _3358, _3359));
                        float _3365 = 1.0 - (_3353 * _3310.w);
                        float _4826 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3367 = sqrt(_3353) * _3329.w;
                        float _3370 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3360) + _3371;
                        float _3377 = _3367 * _3367;
                        float _3381 = ((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3366) / ((_3377 * 0.699999988079071044921875) + 1.0);
                        float _3385 = (-0.0) - _1965;
                        float _3386 = (-0.0) - _1966;
                        float _3387 = (-0.0) - _1967;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3401 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _876;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3414 = _3394 + _3359;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_801, _804, _807), vec3(_3392, _3393, _3394));
                        float _4842 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3426 = dot(vec3(_801, _804, _807), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4853 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3370 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3360) + _3435;
                        float _4864 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4875 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3433 * _3433) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125))) * _3366;
                        _3214 = (_3381 * _3329.x) + _3287;
                        _3215 = (_3381 * _3329.y) + _3288;
                        _3216 = (_3381 * _3329.z) + _3289;
                        _3211 = (_3461 * _3346.x) + _3284;
                        _3212 = (_3461 * _3346.y) + _3285;
                        _3213 = (_3461 * _3346.z) + _3286;
                        if (_3291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3291;
                        }
                    }
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                _2998 = frontier_phi_71_pred;
                _2996 = frontier_phi_71_pred_1;
                _2994 = frontier_phi_71_pred_2;
                _2992 = frontier_phi_71_pred_3;
                _2990 = frontier_phi_71_pred_4;
                _2988 = frontier_phi_71_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2988;
                    _3140 = _2990;
                    _3141 = _2992;
                    _3142 = _2994;
                    _3143 = _2996;
                    _3144 = _2998;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
        }
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.z;
        uint _3004 = (_3002 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _3004) & _2907) == 0u)
        {
            _3107 = _2987;
            _3109 = _2989;
            _3111 = _2991;
            _3113 = _2993;
            _3115 = _2995;
            _3117 = _2997;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
            float _3133 = _3132 * _1965;
            float _3134 = _3132 * _1966;
            float _3135 = _3132 * _1967;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3004 < ((_3002 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3267 = _2987;
                float _3268 = _2989;
                float _3269 = _2991;
                float _3270 = _2993;
                float _3271 = _2995;
                float _3272 = _2997;
                uint _3273 = _3004;
                uint _3282;
                bool _3283;
                for (;;)
                {
                    _3282 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                    _3283 = _3282 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3283)
                    {
                        frontier_phi_82_pred = _3272;
                        frontier_phi_82_pred_1 = _3271;
                        frontier_phi_82_pred_2 = _3270;
                        frontier_phi_82_pred_3 = _3269;
                        frontier_phi_82_pred_4 = _3268;
                        frontier_phi_82_pred_5 = _3267;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        uint _3494 = _3282;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3564;
                        vec4 _3579;
                        float _3625;
                        bool _3626;
                        for (;;)
                        {
                            uint _3505 = ((_3273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3551 = (_3505 * 40u) + 16u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3505 * 40u) + 20u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3505 * 40u) + 24u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3600 = (_3505 * 40u) + 28u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3625 = fma(_1967, _3613.z, fma(_1966, _3613.y, _3613.x * _1965)) + _3613.w;
                            _3626 = !((fma(_1967, _3594.z, fma(_1966, _3594.y, _3594.x * _1965)) + _3594.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3626)
                            {
                                float _3653 = _3520.x - _1965;
                                float _3654 = _3520.y - _1966;
                                float _3655 = _3520.z - _1967;
                                float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                                float _3659 = inversesqrt(_3656);
                                float _3660 = _3659 * _3653;
                                float _3661 = _3659 * _3654;
                                float _3662 = _3659 * _3655;
                                float _3666 = 1.0 - (_3656 / (_3521 * _3521));
                                float _4886 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3671 = sqrt(_3656) * _3536.w;
                                float _3673 = 1.39999997615814208984375 / (_3671 + 1.39999997615814208984375);
                                float _3674 = _3673 * _3673;
                                float _3677 = ((1.0 - _3674) * dot(vec3(_3660, _3661, _3662), vec3(_801, _804, _807))) + _3674;
                                float _3680 = _3671 * _3671;
                                float _3684 = (fma(_1967, _3564.z, fma(_1966, _3564.y, _3564.x * _1965)) + _3564.w) / _3625;
                                float _3685 = (fma(_1967, _3579.z, fma(_1966, _3579.y, _3579.x * _1965)) + _3579.w) / _3625;
                                float _3689 = 1.0 - dot(vec2(_3684, _3685), vec2(_3684, _3685));
                                float _4902 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3691 = _3690 * (((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3667) / ((_3680 * 0.699999988079071044921875) + 1.0));
                                float _3703 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                                float _3704 = 1.0 - _876;
                                float _3711 = sqrt(1.0 - ((1.0 - (_3704 * _3704)) * (1.0 - (_3703 * _3703))));
                                float _3712 = _3711 * _3711;
                                float _3713 = _3712 * _3712;
                                float _3714 = _3660 - _3133;
                                float _3715 = _3661 - _3134;
                                float _3716 = _3662 - _3135;
                                float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                                float _3724 = dot(vec3(_801, _804, _807), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _4913 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3728 = dot(vec3(_801, _804, _807), vec3(_3720 * _3714, _3720 * _3715, _3720 * _3716));
                                float _4924 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3735 = ((_3731 * _3731) * (_3713 + (-1.0))) + 1.0;
                                float _3736 = _3673 * _3712;
                                float _3737 = _3736 * _3736;
                                float _3743 = ((1.0 - _3737) * dot(vec3(_801, _804, _807), vec3(_3660, _3661, _3662))) + _3737;
                                float _4935 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3745 = 1.0 - _3712;
                                float _3755 = (0.5 / (((_3744 * ((_3727 * _3745) + _3712)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3712) * _3727))) * _3744;
                                float _4946 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3765 = (_3690 * _3667) * (((_3713 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3735 * _3735) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3691 * _3536.z;
                                frontier_phi_88_pred_1 = _3691 * _3536.y;
                                frontier_phi_88_pred_2 = _3691 * _3536.x;
                                frontier_phi_88_pred_3 = _3765 * _3548.z;
                                frontier_phi_88_pred_4 = _3765 * _3548.y;
                                frontier_phi_88_pred_5 = _3765 * _3548.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3774 = frontier_phi_88_pred;
                            _3773 = frontier_phi_88_pred_1;
                            _3772 = frontier_phi_88_pred_2;
                            _3771 = frontier_phi_88_pred_3;
                            _3770 = frontier_phi_88_pred_4;
                            _3769 = frontier_phi_88_pred_5;
                            _3478 = _3772 + _3491;
                            _3479 = _3773 + _3492;
                            _3480 = _3774 + _3493;
                            _3475 = _3769 + _3488;
                            _3476 = _3770 + _3489;
                            _3477 = _3771 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3480;
                        frontier_phi_82_pred_1 = _3479;
                        frontier_phi_82_pred_2 = _3478;
                        frontier_phi_82_pred_3 = _3477;
                        frontier_phi_82_pred_4 = _3476;
                        frontier_phi_82_pred_5 = _3475;
                    }
                    _3118 = frontier_phi_82_pred;
                    _3116 = frontier_phi_82_pred_1;
                    _3114 = frontier_phi_82_pred_2;
                    _3112 = frontier_phi_82_pred_3;
                    _3110 = frontier_phi_82_pred_4;
                    _3108 = frontier_phi_82_pred_5;
                    uint _3274 = _3273 + 1u;
                    if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3267 = _3108;
                        _3268 = _3110;
                        _3269 = _3112;
                        _3270 = _3114;
                        _3271 = _3116;
                        _3272 = _3118;
                        _3273 = _3274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3114;
                frontier_phi_63_64_ladder_1 = _3118;
                frontier_phi_63_64_ladder_2 = _3116;
                frontier_phi_63_64_ladder_3 = _3112;
                frontier_phi_63_64_ladder_4 = _3110;
                frontier_phi_63_64_ladder_5 = _3108;
            }
            else
            {
                frontier_phi_63_64_ladder = _2993;
                frontier_phi_63_64_ladder_1 = _2997;
                frontier_phi_63_64_ladder_2 = _2995;
                frontier_phi_63_64_ladder_3 = _2991;
                frontier_phi_63_64_ladder_4 = _2989;
                frontier_phi_63_64_ladder_5 = _2987;
            }
            _3107 = frontier_phi_63_64_ladder_5;
            _3109 = frontier_phi_63_64_ladder_4;
            _3111 = frontier_phi_63_64_ladder_3;
            _3113 = frontier_phi_63_64_ladder;
            _3115 = frontier_phi_63_64_ladder_2;
            _3117 = frontier_phi_63_64_ladder_1;
        }
        float _3122 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2920 = (_3122 * _3113) + _2432;
        _2922 = (_3122 * _3115) + _2434;
        _2924 = (_3122 * _3117) + _2436;
        _2926 = ((_3107 * _844) * _3122) + _2770;
        _2928 = ((_3109 * _846) * _3122) + _2772;
        _2930 = ((_3111 * _847) * _3122) + _2774;
    }
    else
    {
        _2920 = _2432;
        _2922 = _2434;
        _2924 = _2436;
        _2926 = _2770;
        _2928 = _2772;
        _2930 = _2774;
    }
    float _4962 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4973 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4984 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2947 = ((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2920 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _860))) + ((_2926 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2948 = ((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2922 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _860))) + ((_2928 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2949 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2924 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _860))) + ((_2930 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2950 = _251 + 6u;
    float _2958 = _780 / cbSceneParam._m0[86u].x;
    float _2959 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _702 : (isnan(_702) ? cbSceneParam._m0[77u].w : min(_702, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_702 > cbSceneParam._m0[78u].w)
    {
        float _3012 = isnan(_702) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _702 : min(cbSceneParam._m0[80u].w, _702));
        float _3013 = _3012 / _702;
        float _3024 = _3013 * _752;
        float _3025 = _753 * _3013;
        float _3026 = (-0.0) - _3025;
        float _3027 = _3013 * _754;
        float _3029 = (cbSceneParam._m0[77u].w * _3026) / _3012;
        float _3030 = _3029 + cbSceneParam._m0[79u].w;
        float _3031 = cbSceneParam._m0[79u].w - _3025;
        float _3037 = sqrt(((_3024 * _3024) + (_3025 * _3025)) + (_3027 * _3027));
        float _3040 = (1.0 - (cbSceneParam._m0[77u].w / _3012)) * _3037;
        float _3045 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3047 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3224;
        if (abs((_3026 - _3029) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3224 = ((((_3030 > 0.0) ? exp2(_3045 * _3030) : (2.0 - exp2(_3047 * _3030))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3040;
        }
        else
        {
            float _3168 = 1.0 / cbSceneParam._m0[80u].x;
            float _3169 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : max(_3030, _3031));
            float _3170 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : min(_3030, _3031));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            _3224 = ((abs(_3037 / _3026) * cbSceneParam._m0[80u].y) * ((((_3179 - _3180) * 2.0) - ((exp2(_3045 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)))) - exp2(_3045 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))))) * _3168)) - ((exp2(_3047 * _3179) - exp2(_3047 * _3180)) * _3168))) + (_3040 * cbSceneParam._m0[80u].z);
        }
        vec4 _3226 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3235 = exp2((_3224 * (-1.44269502162933349609375)) * (1.0 - _3226.w));
        float _3236 = log2(_3235);
        float _3252 = log2(_2978);
        _3049 = (exp2(_3252 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].x)) * _3226.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3051 = (exp2(_3252 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].y)) * _3226.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3053 = (exp2(_3252 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].z)) * _3226.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3055 = _3235 * _2978;
    }
    else
    {
        _3049 = _2975;
        _3051 = _2976;
        _3053 = _2977;
        _3055 = _2978;
    }
    bool _3262;
    vec4 _3065;
    vec4 _3087;
    float _3089;
    float _3093;
    float _3094;
    float _3095;
    float _3096;
    bool _3106;
    for (;;)
    {
        _3065 = cbMatDynParam._m0[0u];
        float _3067 = roundEven(_3065.y);
        bool _3068 = _3067 == 3.0;
        float _3069 = log2(_3055);
        float _3076 = exp2(_3069 * cbSceneParam._m0[78u].x) * _2947;
        float _3077 = exp2(_3069 * cbSceneParam._m0[78u].y) * _2948;
        float _3078 = exp2(_3069 * cbSceneParam._m0[78u].z) * _2949;
        float _3085 = _768 + (-0.5);
        _3087 = cbMtdParam._m0[1u];
        _3089 = _3087.y * _3085;
        float _3092 = (_3067 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3093 = _3092 * (_3068 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3049)));
        _3094 = _3092 * (_3068 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3051)));
        _3095 = _3092 * (_3068 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3053)));
        _3096 = _3085 * 0.999000012874603271484375;
        _3106 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3106)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3096) < 0.5)
            {
                _3262 = true;
                break;
            }
        }
        uint _3203 = _820 + uint(_3065.w);
        if ((cbInstanceData._m0[_3203].w < 1.0) && ((cbInstanceData._m0[_3203].w + _3096) < 0.5))
        {
            _3262 = true;
            break;
        }
        if ((_3089 + 1.0) < _3087.x)
        {
            _3262 = true;
            break;
        }
        _3262 = false;
        break;
    }
    float _3466;
    if (_3262)
    {
        discard_state = true;
        _3466 = 0.0;
    }
    else
    {
        _3466 = cbInstanceData._m0[_2950].w;
    }
    SV_Target.x = _3093;
    SV_Target.y = _3094;
    SV_Target.z = _3095;
    SV_Target.w = _3466;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2950].w;
    discard_exit();
}


