#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1143;
float _3809;
float _3810;
float _3811;
float _3812;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3821 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _448 = _444.z;
    float _457 = ((_427.z - _448) * _380) + _448;
    float _460 = ((((_427.x - _446) * _380) + _446) * 2.0) + (-1.0);
    float _461 = ((((_427.y - _447) * _380) + _447) * 2.0) + (-1.0);
    float _462 = dot(vec2(_460, _461), vec2(_460, _461));
    float _3832 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    float _472 = _460 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_402.x * 2.0) + (-1.0)));
    float _473 = _461 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_402.y * 2.0) + (-1.0)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _516 = _514.x;
    float _534 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _516) * _380) + _516;
    float _538 = ((_500.x - _534) * cbMtdParam._m0[19u].z) + _534;
    float _543 = (((_402.z - _457) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _457;
    float _548 = cbMtdParam._m0[22u].x + _486.w;
    float _551 = fma(_467, _229 * NORMAL.x, fma(_473, _236 * TANGENT.x, (_222 * _214) * _472));
    float _554 = fma(_467, _229 * NORMAL.y, fma(_473, _236 * TANGENT.y, (_222 * _215) * _472));
    float _557 = fma(_467, _229 * NORMAL.z, fma(_473, _236 * TANGENT.z, (_222 * _216) * _472));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3843 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _565 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3865 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3876 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3887 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3898 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _570 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _584 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    vec4 _649 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _651 = _649.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _823 = sqrt(((_635 * _635) + (_636 * _636)) + (_637 * _637));
        float _829 = (cbMatDynParam._m0[5u].x * _823) + cbMatDynParam._m0[5u].y;
        float _3909 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _834 = (cbMatDynParam._m0[5u].z * _823) + cbMatDynParam._m0[5u].w;
        float _3920 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) - _830)) + _830) < ((_651 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _684 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _687 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    uint _700 = _242 + 9u;
    uint _701 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_701].z;
    float _3931 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _713 = 1.0 - _570;
    float _714 = _710 * _713;
    float _715 = _711 * _713;
    float _716 = _712 * _713;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _570;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _570;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _570;
    float _724 = _721 + 0.039999999105930328369140625;
    float _726 = _722 + 0.039999999105930328369140625;
    float _727 = _723 + 0.039999999105930328369140625;
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _740 = ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * TEXCOORD_5.w) * _736.x;
    float _741 = dot(vec3(_562, _563, _564), vec3(_642, _643, _644));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _562) - _642;
    float _749 = (_744 * _563) - _643;
    float _750 = (_744 * _564) - _644;
    float _754 = abs(dot(vec3(_642, _643, _644), vec3(_562, _563, _564)));
    float _3964 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_565);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _775 = (1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _776 = _769 * _756;
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1142;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _871 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _875 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _900 = _804 + _562;
        float _901 = _808 + _563;
        float _902 = _812 + _564;
        float _912 = fma(_902, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900)) - _867;
        float _913 = fma(_902, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900)) - _871;
        float _914 = fma(_902, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900)) - _875;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _970 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_936.x + (-0.5));
        float _972 = _970 * (_936.y + (-0.5));
        float _973 = _970 * (_936.z + (-0.5));
        float _980 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_943.x + (-0.5));
        float _982 = _980 * (_943.y + (-0.5));
        float _983 = _980 * (_943.z + (-0.5));
        float _990 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_950.x + (-0.5));
        float _992 = _990 * (_950.y + (-0.5));
        float _993 = _990 * (_950.z + (-0.5));
        float _1000 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_957.x + (-0.5));
        float _1002 = _1000 * (_957.y + (-0.5));
        float _1003 = _1000 * (_957.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1024 = (dot(vec3(_562, _563, _564), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1034 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _4012 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1036 + 1.0))) + _1041) * _1004;
        float _1051 = _972 * 0.5;
        float _1052 = _982 * 0.5;
        float _1053 = _992 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_562, _563, _564), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _4045 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1078 + 1.0))) + _1083) * _1005;
        float _1093 = _973 * 0.5;
        float _1094 = _983 * 0.5;
        float _1095 = _993 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_562, _563, _564), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4078 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1120 + 1.0))) + _1125) * _1006;
        _1142 = _973;
        _1144 = _972;
        _1145 = _971;
        _1146 = _983;
        _1147 = _982;
        _1148 = _981;
        _1149 = _993;
        _1150 = _992;
        _1151 = _991;
        _1152 = _1006;
        _1153 = _1005;
        _1154 = _1004;
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _1143;
        _1144 = _1143;
        _1145 = _1143;
        _1146 = _1143;
        _1147 = _1143;
        _1148 = _1143;
        _1149 = _1143;
        _1150 = _1143;
        _1151 = _1143;
        _1152 = _1143;
        _1153 = _1143;
        _1154 = _1143;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1185 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1189 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1193 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1216 = _804 + _562;
        float _1217 = _808 + _563;
        float _1218 = _812 + _564;
        float _1228 = fma(_1218, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216)) - _1185;
        float _1229 = fma(_1218, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216)) - _1189;
        float _1230 = fma(_1218, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216)) - _1193;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1185 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1189 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[35u].z) + ((((((_1193 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1284 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1251.x + (-0.5));
        float _1286 = _1284 * (_1251.y + (-0.5));
        float _1287 = _1284 * (_1251.z + (-0.5));
        float _1294 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1258.x + (-0.5));
        float _1296 = _1294 * (_1258.y + (-0.5));
        float _1297 = _1294 * (_1258.z + (-0.5));
        float _1304 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1265.x + (-0.5));
        float _1306 = _1304 * (_1265.y + (-0.5));
        float _1307 = _1304 * (_1265.z + (-0.5));
        float _1314 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1272.x + (-0.5));
        float _1316 = _1314 * (_1272.y + (-0.5));
        float _1317 = _1314 * (_1272.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_562, _563, _564), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4141 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1348 + 1.0))) + _1353) * _1318;
        float _1363 = _1286 * 0.5;
        float _1364 = _1296 * 0.5;
        float _1365 = _1306 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_562, _563, _564), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4174 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1390 + 1.0))) + _1395) * _1319;
        float _1405 = _1287 * 0.5;
        float _1406 = _1297 * 0.5;
        float _1407 = _1307 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_562, _563, _564), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4207 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1432 + 1.0))) + _1437) * _1320;
        _1454 = _1287;
        _1455 = _1286;
        _1456 = _1285;
        _1457 = _1297;
        _1458 = _1296;
        _1459 = _1295;
        _1460 = _1307;
        _1461 = _1306;
        _1462 = _1305;
        _1463 = _1320;
        _1464 = _1319;
        _1465 = _1318;
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1143;
        _1455 = _1143;
        _1456 = _1143;
        _1457 = _1143;
        _1458 = _1143;
        _1459 = _1143;
        _1460 = _1143;
        _1461 = _1143;
        _1462 = _1143;
        _1463 = _1143;
        _1464 = _1143;
        _1465 = _1143;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1501 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1478));
    float _1522 = _748 * 0.5;
    float _1523 = _749 * 0.5;
    float _1524 = _750 * 0.5;
    float _1525 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1528 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1531 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1565;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1538 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1142, _1146, _1149, _1152));
        float _1542 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1546 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1553 = dot(vec4(cbModelParam._m0[39u]), vec4(_1522, _1523, _1524, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1576;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1567 = dot(vec4(cbModelParam._m0[40u]), vec4(_1522, _1523, _1524, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1580 = (_1576 * cbModelParam._m0[1u].x) + (_1565 * (1.0 - cbModelParam._m0[1u].x));
    float _1590 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _565);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1590 : min(cbModelParam._m0[25u].z, _1590));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1654 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1657 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1685 = frontier_phi_17_15_ladder;
        }
        float _1858;
        if (_1654 > 0.0)
        {
            _1858 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1858 = frontier_phi_26_22_ladder;
        }
        float _2153;
        if (_1657 > 0.0)
        {
            _2153 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2153 = frontier_phi_38_33_ladder;
        }
        float _2155 = isnan(_1858) ? _1685 : (isnan(_1685) ? _1858 : min(_1685, _1858));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1651) + _1640;
        float _2161 = (_2156 * _1654) + _1644;
        float _2162 = (_2156 * _1657) + _1648;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1591);
            frontier_phi_16_38_ladder = _2307.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2307.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2307.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_16_38_ladder_2;
        _1675 = frontier_phi_16_38_ladder_1;
        _1677 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1591);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _565);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1751 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1754 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1863;
        if (_1748 > 0.0)
        {
            _1863 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2180;
        if (_1751 > 0.0)
        {
            _2180 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2180 = frontier_phi_40_35_ladder;
        }
        float _2518;
        if (_1754 > 0.0)
        {
            _2518 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2518 = frontier_phi_50_47_ladder;
        }
        float _2520 = isnan(_2180) ? _1863 : (isnan(_1863) ? _2180 : min(_1863, _2180));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1748) + _1737;
        float _2526 = (_2521 * _1751) + _1741;
        float _2527 = (_2521 * _1754) + _1745;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_25_50_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_25_50_ladder_2;
        _1775 = frontier_phi_25_50_ladder_1;
        _1777 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1682);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1790 = (((_775 * _724) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1792 = (((_775 * _726) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1794 = (((_775 * _727) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1777 - _1677)) + _1677);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1850 = _1837 / _1849;
    float _1851 = _1841 / _1849;
    float _1852 = _1845 / _1849;
    float _1999;
    float _2000;
    float _2001;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1879 = ((uint(_1852 > cbSceneParam._m0[59u].y) + uint(_1852 > cbSceneParam._m0[59u].x)) + uint(_1852 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1880 = _1879 + 43u;
        uint _1888 = _1879 + 44u;
        uint _1896 = _1879 + 45u;
        uint _1904 = _1879 + 46u;
        float _1915 = fma(_1849, cbSceneParam._m0[_1880].w, fma(_1845, cbSceneParam._m0[_1880].z, fma(_1841, cbSceneParam._m0[_1880].y, _1837 * cbSceneParam._m0[_1880].x)));
        float _1919 = fma(_1849, cbSceneParam._m0[_1888].w, fma(_1845, cbSceneParam._m0[_1888].z, fma(_1841, cbSceneParam._m0[_1888].y, _1837 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1849, cbSceneParam._m0[_1904].w, fma(_1845, cbSceneParam._m0[_1904].z, fma(_1841, cbSceneParam._m0[_1904].y, _1837 * cbSceneParam._m0[_1904].x)));
        float _1932 = cbSceneParam._m0[33u].z * _1927;
        float _1934 = cbSceneParam._m0[33u].w * _1927;
        float _1937 = fma(_1849, cbSceneParam._m0[_1896].w, fma(_1845, cbSceneParam._m0[_1896].z, fma(_1841, cbSceneParam._m0[_1896].y, _1837 * cbSceneParam._m0[_1896].x))) / _1927;
        float _1985 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
        float _4333 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1992 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 + _1915) / _1927, (_1934 + _1919) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1934 + _1915) / _1927, (_1919 - _1932) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1932) / _1927, (_1919 - _1934) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1934) / _1927, (_1932 + _1919) / _1927), _1937), 0.0)).x), vec4(0.25)));
        _1999 = 1.0 - (_1992 * cbSceneParam._m0[34u].x);
        _2000 = 1.0 - (_1992 * cbSceneParam._m0[34u].y);
        _2001 = 1.0 - (_1992 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1999 = 1.0;
        _2000 = 1.0;
        _2001 = 1.0;
    }
    float _2065;
    float _2067;
    float _2069;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2053 = fma(_1849, cbSceneParam._m0[63u].w, fma(_1845, cbSceneParam._m0[63u].z, fma(_1841, cbSceneParam._m0[63u].y, _1837 * cbSceneParam._m0[63u].x)));
        float _2054 = fma(_1849, cbSceneParam._m0[60u].w, fma(_1845, cbSceneParam._m0[60u].z, fma(_1841, cbSceneParam._m0[60u].y, _1837 * cbSceneParam._m0[60u].x))) / _2053;
        float _2055 = fma(_1849, cbSceneParam._m0[61u].w, fma(_1845, cbSceneParam._m0[61u].z, fma(_1841, cbSceneParam._m0[61u].y, _1837 * cbSceneParam._m0[61u].x))) / _2053;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2054 >= cbSceneParam._m0[64u].x) && (_2055 >= cbSceneParam._m0[64u].y)) && (_2054 <= cbSceneParam._m0[64u].z)) && (_2055 <= cbSceneParam._m0[64u].w))
        {
            float _2193 = fma(_1849, cbSceneParam._m0[62u].w, fma(_1845, cbSceneParam._m0[62u].z, fma(_1841, cbSceneParam._m0[62u].y, _1837 * cbSceneParam._m0[62u].x))) / _2053;
            float _2197 = isnan(cbSceneParam._m0[41u].w) ? _2193 : (isnan(_2193) ? cbSceneParam._m0[41u].w : max(_2193, cbSceneParam._m0[41u].w));
            float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
            float _4349 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
            float _2247 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2054, cbSceneParam._m0[33u].w + _2055), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2054, _2055 - cbSceneParam._m0[33u].z), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].z, _2055 - cbSceneParam._m0[33u].w), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2055), _2197), 0.0)).x), vec4(0.25)));
            float _2251 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
            float _2252 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
            float _2253 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2253) ? _2001 : (isnan(_2001) ? _2253 : min(_2001, _2253));
            frontier_phi_37_36_ladder_1 = isnan(_2252) ? _2000 : (isnan(_2000) ? _2252 : min(_2000, _2252));
            frontier_phi_37_36_ladder_2 = isnan(_2251) ? _1999 : (isnan(_1999) ? _2251 : min(_1999, _2251));
        }
        else
        {
            frontier_phi_37_36_ladder = _2001;
            frontier_phi_37_36_ladder_1 = _2000;
            frontier_phi_37_36_ladder_2 = _1999;
        }
        _2065 = frontier_phi_37_36_ladder_2;
        _2067 = frontier_phi_37_36_ladder_1;
        _2069 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2065 = _1999;
        _2067 = _2000;
        _2069 = _2001;
    }
    uvec4 _2074 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2076 = _2074.x * 14u;
    uint _2077 = _2076 + 13u;
    float _2084 = _740 + (-1.0);
    float _2089 = (cbLight._m0[_2077].x * _2084) + 1.0;
    float _2090 = (cbLight._m0[_2077].y * _2084) + 1.0;
    float _2091 = (cbLight._m0[_2077].z * _2084) + 1.0;
    float _2092 = (cbLight._m0[_2077].w * _2084) + 1.0;
    uint _2093 = _2076 + 5u;
    float _2099 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2103 = _2076 + 4u;
    float _2112 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2116 = _2076 | 1u;
    float _2127 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_562, _563, _564));
    float _2130 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_562, _563, _564));
    float _4385 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _4396 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2137 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2144 = ((cbLight._m0[_2093].x * _2099) * _2137) + (((cbLight._m0[_2103].x * _2065) * _2112) * _2135);
    float _2145 = ((_2099 * cbLight._m0[_2093].y) * _2137) + (((cbLight._m0[_2103].y * _2067) * _2112) * _2135);
    float _2146 = ((_2099 * cbLight._m0[_2093].z) * _2137) + (((cbLight._m0[_2103].z * _2069) * _2112) * _2135);
    uvec4 _2150 = floatBitsToUint(cbLight._m0[_2076 + 12u]);
    bool _2152 = _2150.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2152)
    {
        _2254 = _2144;
        _2256 = _2145;
        _2258 = _2146;
    }
    else
    {
        uint _2262 = _2076 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2076 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4407 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2281 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2144;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2145;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2146;
    }
    bool _2261 = _2150.y == 0u;
    float _2316;
    float _2318;
    float _2320;
    if (_2261)
    {
        _2316 = _2254;
        _2318 = _2256;
        _2320 = _2258;
    }
    else
    {
        uint _2489 = _2076 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2076 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4423 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2508 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2316 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2254;
        _2318 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2256;
        _2320 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2258;
    }
    uint _2323 = _2076 + 8u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _565) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2076].x + _642;
    float _2339 = cbLight._m0[_2076].y + _643;
    float _2340 = cbLight._m0[_2076].z + _644;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2076].xyz));
    float _4439 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2352 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2353 = dot(vec3(_562, _563, _564), vec3(_2345, _2346, _2347));
    float _4461 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2345, _2346, _2347));
    float _4472 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2337 * _2337;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
    float _2374 = 0.959999978542327880859375 - _721;
    float _2376 = 0.959999978542327880859375 - _722;
    float _2377 = 0.959999978542327880859375 - _723;
    float _2384 = 1.0 - _2337;
    float _2395 = (0.5 / (((_2352 * ((_2351 * _2384) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2384) + _2337) * _2351))) * _2351;
    float _4483 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    uint _2411 = _2076 + 9u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _565) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2116].x + _642;
    float _2425 = cbLight._m0[_2116].y + _643;
    float _2426 = cbLight._m0[_2116].z + _644;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2116].xyz));
    float _4494 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2438 = dot(vec3(_562, _563, _564), vec3(_2431, _2432, _2433));
    float _4505 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2431, _2432, _2433));
    float _4516 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2423 * _2423;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
    float _2464 = 1.0 - _2423;
    float _2474 = (0.5 / (((_2352 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2464) + _2423) * _2437))) * _2437;
    float _4527 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    float _2486 = (((((_2457 * _2374) + _724) * cbLight._m0[_2411].x) * _2476) * _2099) + ((((cbLight._m0[_2323].x * _2065) * ((_2373 * _2374) + _724)) * _2397) * _2112);
    float _2487 = (((((_2457 * _2376) + _726) * cbLight._m0[_2411].y) * _2476) * _2099) + ((((cbLight._m0[_2323].y * _2067) * ((_2373 * _2376) + _726)) * _2397) * _2112);
    float _2488 = (((((_2457 * _2377) + _727) * cbLight._m0[_2411].z) * _2476) * _2099) + ((((cbLight._m0[_2323].z * _2069) * ((_2373 * _2377) + _727)) * _2397) * _2112);
    float _2544;
    float _2546;
    float _2548;
    if (_2152)
    {
        _2544 = _2486;
        _2546 = _2487;
        _2548 = _2488;
    }
    else
    {
        uint _2550 = _2076 + 2u;
        uint _2554 = _2076 + 10u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _565) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _642;
        float _2571 = cbLight._m0[_2550].y + _643;
        float _2572 = cbLight._m0[_2550].z + _644;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2550].xyz));
        float _4538 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2584 = dot(vec3(_562, _563, _564), vec3(_2577, _2578, _2579));
        float _4549 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4560 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
        float _2610 = 1.0 - _2569;
        float _2620 = (0.5 / (((_2352 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2610) + _2569) * _2583))) * _2583;
        float _4571 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2544 = (((((_2603 * _2374) + _724) * cbLight._m0[_2554].x) * _2622) * _2623) + _2486;
        _2546 = (((((_2603 * _2376) + _726) * cbLight._m0[_2554].y) * _2622) * _2623) + _2487;
        _2548 = (((((_2603 * _2377) + _727) * cbLight._m0[_2554].z) * _2622) * _2623) + _2488;
    }
    float _2654;
    float _2656;
    float _2658;
    if (_2261)
    {
        _2654 = _2544;
        _2656 = _2546;
        _2658 = _2548;
    }
    else
    {
        uint _2665 = _2076 + 3u;
        uint _2669 = _2076 + 11u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _565) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _642;
        float _2686 = cbLight._m0[_2665].y + _643;
        float _2687 = cbLight._m0[_2665].z + _644;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2665].xyz));
        float _4587 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2699 = dot(vec3(_562, _563, _564), vec3(_2692, _2693, _2694));
        float _4598 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4609 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
        float _2725 = 1.0 - _2684;
        float _2735 = (0.5 / (((_2352 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2725) + _2684) * _2698))) * _2698;
        float _4620 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2654 = (((((_2718 * _2374) + _724) * cbLight._m0[_2669].x) * _2737) * _2738) + _2544;
        _2656 = (((((_2718 * _2376) + _726) * cbLight._m0[_2669].y) * _2737) * _2738) + _2546;
        _2658 = (((((_2718 * _2377) + _727) * cbLight._m0[_2669].z) * _2737) * _2738) + _2548;
    }
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_2074.y == 0u)
    {
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.x;
        uint _2771 = uint((float(_2759.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2760))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2760)));
        float _2781 = (log2(_1852 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2782 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        uint _2785 = uint(isnan(14.0) ? _2782 : (isnan(_2782) ? 14.0 : min(_2782, 14.0)));
        uvec4 _2790 = texelFetch(g_lightClusterGridBuffer, int(((_2785 << 2u) + (_2771 << 6u)) >> 2u));
        uint _2791 = _2790.x;
        uint _2792 = _2759.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2792 >> 4u) & 15u)) + 4294967295u) & _2791) == 0u) || ((_2792 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3040)
                {
                    frontier_phi_71_pred = _3029;
                    frontier_phi_71_pred_1 = _3028;
                    frontier_phi_71_pred_2 = _3027;
                    frontier_phi_71_pred_3 = _3026;
                    frontier_phi_71_pred_4 = _3025;
                    frontier_phi_71_pred_5 = _3024;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3039;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3030 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _1850;
                        float _3236 = _3195.y - _1851;
                        float _3237 = _3195.z - _1852;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_681, _684, _687), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4646 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _1850;
                        float _3271 = (-0.0) - _1851;
                        float _3272 = (-0.0) - _1852;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3286 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _756;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_681, _684, _687), vec3(_3277, _3278, _3279));
                        float _4662 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3311 = dot(vec3(_681, _684, _687), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4673 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3255 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3245) + _3320;
                        float _4684 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4695 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3318 * _3318) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3099 = (_3266 * _3214.x) + _3172;
                        _3100 = (_3266 * _3214.y) + _3173;
                        _3101 = (_3266 * _3214.z) + _3174;
                        _3096 = (_3346 * _3231.x) + _3169;
                        _3097 = (_3346 * _3231.y) + _3170;
                        _3098 = (_3346 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_71_pred = _3101;
                    frontier_phi_71_pred_1 = _3100;
                    frontier_phi_71_pred_2 = _3099;
                    frontier_phi_71_pred_3 = _3098;
                    frontier_phi_71_pred_4 = _3097;
                    frontier_phi_71_pred_5 = _3096;
                }
                _2882 = frontier_phi_71_pred;
                _2880 = frontier_phi_71_pred_1;
                _2878 = frontier_phi_71_pred_2;
                _2876 = frontier_phi_71_pred_3;
                _2874 = frontier_phi_71_pred_4;
                _2872 = frontier_phi_71_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2872;
                    _3025 = _2874;
                    _3026 = _2876;
                    _3027 = _2878;
                    _3028 = _2880;
                    _3029 = _2882;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2888) & _2791) == 0u)
        {
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
            float _3018 = _3017 * _1850;
            float _3019 = _3017 * _1851;
            float _3020 = _3017 * _1852;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3152 = _2871;
                float _3153 = _2873;
                float _3154 = _2875;
                float _3155 = _2877;
                float _3156 = _2879;
                float _3157 = _2881;
                uint _3158 = _2888;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3168)
                    {
                        frontier_phi_82_pred = _3157;
                        frontier_phi_82_pred_1 = _3156;
                        frontier_phi_82_pred_2 = _3155;
                        frontier_phi_82_pred_3 = _3154;
                        frontier_phi_82_pred_4 = _3153;
                        frontier_phi_82_pred_5 = _3152;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3152;
                        float _3374 = _3153;
                        float _3375 = _3154;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        uint _3379 = _3167;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_1852, _3497.z, fma(_1851, _3497.y, _3497.x * _1850)) + _3497.w;
                            _3510 = !((fma(_1852, _3478.z, fma(_1851, _3478.y, _3478.x * _1850)) + _3478.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _1850;
                                float _3538 = _3405.y - _1851;
                                float _3539 = _3405.z - _1852;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4706 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_681, _684, _687))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_1852, _3448.z, fma(_1851, _3448.y, _3448.x * _1850)) + _3448.w) / _3509;
                                float _3569 = (fma(_1852, _3463.z, fma(_1851, _3463.y, _3463.x * _1850)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4722 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _756;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3018;
                                float _3599 = _3545 - _3019;
                                float _3600 = _3546 - _3020;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_681, _684, _687), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4733 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3612 = dot(vec3(_681, _684, _687), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4744 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_681, _684, _687), vec3(_3544, _3545, _3546))) + _3621;
                                float _4755 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4766 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3575 * _3421.z;
                                frontier_phi_88_pred_1 = _3575 * _3421.y;
                                frontier_phi_88_pred_2 = _3575 * _3421.x;
                                frontier_phi_88_pred_3 = _3649 * _3433.z;
                                frontier_phi_88_pred_4 = _3649 * _3433.y;
                                frontier_phi_88_pred_5 = _3649 * _3433.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3658 = frontier_phi_88_pred;
                            _3657 = frontier_phi_88_pred_1;
                            _3656 = frontier_phi_88_pred_2;
                            _3655 = frontier_phi_88_pred_3;
                            _3654 = frontier_phi_88_pred_4;
                            _3653 = frontier_phi_88_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3365;
                        frontier_phi_82_pred_1 = _3364;
                        frontier_phi_82_pred_2 = _3363;
                        frontier_phi_82_pred_3 = _3362;
                        frontier_phi_82_pred_4 = _3361;
                        frontier_phi_82_pred_5 = _3360;
                    }
                    _3003 = frontier_phi_82_pred;
                    _3001 = frontier_phi_82_pred_1;
                    _2999 = frontier_phi_82_pred_2;
                    _2997 = frontier_phi_82_pred_3;
                    _2995 = frontier_phi_82_pred_4;
                    _2993 = frontier_phi_82_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _2993;
                        _3153 = _2995;
                        _3154 = _2997;
                        _3155 = _2999;
                        _3156 = _3001;
                        _3157 = _3003;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2999;
                frontier_phi_63_64_ladder_1 = _3003;
                frontier_phi_63_64_ladder_2 = _3001;
                frontier_phi_63_64_ladder_3 = _2997;
                frontier_phi_63_64_ladder_4 = _2995;
                frontier_phi_63_64_ladder_5 = _2993;
            }
            else
            {
                frontier_phi_63_64_ladder = _2877;
                frontier_phi_63_64_ladder_1 = _2881;
                frontier_phi_63_64_ladder_2 = _2879;
                frontier_phi_63_64_ladder_3 = _2875;
                frontier_phi_63_64_ladder_4 = _2873;
                frontier_phi_63_64_ladder_5 = _2871;
            }
            _2992 = frontier_phi_63_64_ladder_5;
            _2994 = frontier_phi_63_64_ladder_4;
            _2996 = frontier_phi_63_64_ladder_3;
            _2998 = frontier_phi_63_64_ladder;
            _3000 = frontier_phi_63_64_ladder_2;
            _3002 = frontier_phi_63_64_ladder_1;
        }
        float _3007 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2804 = (_3007 * _2998) + _2316;
        _2806 = (_3007 * _3000) + _2318;
        _2808 = (_3007 * _3002) + _2320;
        _2810 = ((_2992 * _724) * _3007) + _2654;
        _2812 = ((_2994 * _726) * _3007) + _2656;
        _2814 = ((_2996 * _727) * _3007) + _2658;
    }
    else
    {
        _2804 = _2316;
        _2806 = _2318;
        _2808 = _2320;
        _2810 = _2654;
        _2812 = _2656;
        _2814 = _2658;
    }
    float _4782 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4793 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4804 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2831 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2804 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _740))) + ((_2810 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2832 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2806 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _740))) + ((_2812 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2833 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2808 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _740))) + ((_2814 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    uint _2834 = _242 + 6u;
    float _2842 = _662 / cbSceneParam._m0[86u].x;
    float _2843 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2857 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, (log2((isnan(cbSceneParam._m0[77u].w) ? _584 : (isnan(_584) ? cbSceneParam._m0[77u].w : min(_584, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2859 = _2857.x;
    float _2860 = _2857.y;
    float _2861 = _2857.z;
    float _2862 = _2857.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_584 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_584) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _584 : min(cbSceneParam._m0[80u].w, _584));
        float _2897 = _2896 / _584;
        float _2908 = _2897 * _635;
        float _2909 = _636 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2912 = _2897 * _637;
        float _2914 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2909;
        float _2922 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2910 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3055 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3109 = ((abs(_2922 / _2910) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2932 * _3064) - exp2(_2932 * _3065)) * _3053))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2862);
        _2934 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2859;
        _2936 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2860;
        _2938 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2861;
        _2940 = _3120 * _2862;
    }
    else
    {
        _2934 = _2859;
        _2936 = _2860;
        _2938 = _2861;
        _2940 = _2862;
    }
    bool _3147;
    vec4 _2950;
    vec4 _2972;
    float _2974;
    float _2978;
    float _2979;
    float _2980;
    float _2981;
    bool _2991;
    for (;;)
    {
        _2950 = cbMatDynParam._m0[0u];
        float _2952 = roundEven(_2950.y);
        bool _2953 = _2952 == 3.0;
        float _2954 = log2(_2940);
        float _2961 = exp2(_2954 * cbSceneParam._m0[78u].x) * _2831;
        float _2962 = exp2(_2954 * cbSceneParam._m0[78u].y) * _2832;
        float _2963 = exp2(_2954 * cbSceneParam._m0[78u].z) * _2833;
        float _2970 = _651 + (-0.5);
        _2972 = cbMtdParam._m0[1u];
        _2974 = _2972.y * _2970;
        float _2977 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2978 = _2977 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
        _2979 = _2977 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
        _2980 = _2977 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
        _2981 = _2970 * 0.999000012874603271484375;
        _2991 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2991)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2981) < 0.5)
            {
                _3147 = true;
                break;
            }
        }
        uint _3088 = _700 + uint(_2950.w);
        if ((cbInstanceData._m0[_3088].w < 1.0) && ((cbInstanceData._m0[_3088].w + _2981) < 0.5))
        {
            _3147 = true;
            break;
        }
        if ((_2974 + 1.0) < _2972.x)
        {
            _3147 = true;
            break;
        }
        _3147 = false;
        break;
    }
    float _3351;
    if (_3147)
    {
        discard_state = true;
        _3351 = 0.0;
    }
    else
    {
        _3351 = cbInstanceData._m0[_2834].w;
    }
    SV_Target.x = _2978;
    SV_Target.y = _2979;
    SV_Target.z = _2980;
    SV_Target.w = _3351;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2834].w;
    discard_exit();
}


