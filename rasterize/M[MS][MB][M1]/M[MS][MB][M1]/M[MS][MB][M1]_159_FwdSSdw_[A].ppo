#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1388;
float _3791;
float _3792;
float _3793;
float _3794;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3803 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _394) + _463;
    float _475 = ((((_442.x - _461) * _394) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _394) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _3814 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    float _486 = fma(_483, _245, fma(_477, _252, _475 * _238));
    float _489 = fma(_483, _246, fma(_477, _253, _475 * _239));
    float _492 = fma(_483, _247, fma(_477, _254, _475 * _240));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _545 = ((_540 - _541) * cbMtdParam._m0[24u].z) + _541;
    float _547 = (cbMtdParam._m0[19u].x + dot(vec4(_496 * _486, _496 * _489, _496 * _492, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_545 * cbMtdParam._m0[21u].z);
    float _3825 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _550 = (-0.0) - cbMtdParam._m0[24u].x;
    float _552 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
    float _560 = _548 - ((_548 * TEXCOORD_8.x) * _553);
    float _561 = _548 - ((_548 * TEXCOORD_8.y) * _553);
    float _562 = _548 - ((_548 * TEXCOORD_8.z) * _553);
    float _569 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _573 = ((isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : min(_569, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _581 = (_573 - (((_545 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _573))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3856 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _586 = ((_560 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) * _582) + _401;
    float _587 = ((_561 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) * _582) + _402;
    float _588 = ((_562 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) * _582) + _403;
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _630 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_602 - _603) * cbMtdParam._m0[24u].w) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3867 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _639 = ((((cbMtdParam._m0[10u].x - _586) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _631) + _586;
    float _640 = ((((cbMtdParam._m0[10u].y - _587) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _631) + _587;
    float _641 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _588)) * _631) + _588;
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _669 = _667.x;
    float _687 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _669) * _394) + _669;
    float _691 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _687) * cbMtdParam._m0[19u].z) + _687;
    float _694 = _691 - ((_582 * _560) * _691);
    float _696 = _694 - (_694 * _631);
    vec4 _710 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _717 = (_710.x * 2.0) + (-1.0);
    float _718 = (_710.y * 2.0) + (-1.0);
    float _719 = dot(vec2(_717, _718), vec2(_717, _718));
    float _3878 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _728 = (((_710.z - _472) * _560) * _582) + _472;
    float _731 = ((cbMtdParam._m0[23u].y - _728) * _631) + _728;
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _756 = (_750.x * 2.0) + (-1.0);
    float _757 = (_750.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3889 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _778 = (((cbMtdParam._m0[21u].x * _475) + ((_717 - _475) * _560)) * _582) + _475;
    float _779 = (((cbMtdParam._m0[21u].x * _477) + ((_718 - _477) * _561)) * _582) + _477;
    float _780 = (((sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) - _483) * _562) * _582) + _483;
    float _791 = (((_756 - _778) + (_778 * cbMtdParam._m0[22u].z)) * _631) + _778;
    float _792 = (((_757 - _779) + (_779 * cbMtdParam._m0[22u].z)) * _631) + _779;
    float _793 = ((sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _780) * _631) + _780;
    float _795 = cbMtdParam._m0[22u].x + _512.w;
    float _798 = fma(_793, _245, fma(_792, _252, _791 * _238));
    float _801 = fma(_793, _246, fma(_792, _253, _791 * _239));
    float _804 = fma(_793, _247, fma(_792, _254, _791 * _240));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3900 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _812 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _3922 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3933 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3944 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3955 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _817 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    vec4 _895 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _897 = _895.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1069 = sqrt(((_881 * _881) + (_882 * _882)) + (_883 * _883));
        float _1075 = (cbMatDynParam._m0[5u].x * _1069) + cbMatDynParam._m0[5u].y;
        float _3966 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1080 = (cbMatDynParam._m0[5u].z * _1069) + cbMatDynParam._m0[5u].w;
        float _3977 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) - _1076)) + _1076) < ((_897 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _930 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _933 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _946 = _257 + 9u;
    uint _947 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3988 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _959 = 1.0 - _817;
    float _960 = _956 * _959;
    float _961 = _957 * _959;
    float _962 = _958 * _959;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _817;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _817;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _817;
    float _970 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _986 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_809, _810, _811), vec3(_888, _889, _890));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _809) - _888;
    float _995 = (_990 * _810) - _889;
    float _996 = (_990 * _811) - _890;
    float _1000 = abs(dot(vec3(_888, _889, _890), vec3(_809, _810, _811)));
    float _4021 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_812);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1021 = (1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1022 = _1015 * _1002;
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1387;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1112 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1116 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1120 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1145 = _1050 + _809;
        float _1146 = _1054 + _810;
        float _1147 = _1058 + _811;
        float _1157 = fma(_1147, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145)) - _1112;
        float _1158 = fma(_1147, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145)) - _1116;
        float _1159 = fma(_1147, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145)) - _1120;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1112 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1116 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[34u].z) + ((((((_1120 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1215 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1181.x + (-0.5));
        float _1217 = _1215 * (_1181.y + (-0.5));
        float _1218 = _1215 * (_1181.z + (-0.5));
        float _1225 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1188.x + (-0.5));
        float _1227 = _1225 * (_1188.y + (-0.5));
        float _1228 = _1225 * (_1188.z + (-0.5));
        float _1235 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1195.x + (-0.5));
        float _1237 = _1235 * (_1195.y + (-0.5));
        float _1238 = _1235 * (_1195.z + (-0.5));
        float _1245 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1202.x + (-0.5));
        float _1247 = _1245 * (_1202.y + (-0.5));
        float _1248 = _1245 * (_1202.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1269 = (dot(vec3(_809, _810, _811), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1279 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4069 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1281 + 1.0))) + _1286) * _1249;
        float _1296 = _1217 * 0.5;
        float _1297 = _1227 * 0.5;
        float _1298 = _1237 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_809, _810, _811), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4102 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1323 + 1.0))) + _1328) * _1250;
        float _1338 = _1218 * 0.5;
        float _1339 = _1228 * 0.5;
        float _1340 = _1238 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_809, _810, _811), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4135 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1365 + 1.0))) + _1370) * _1251;
        _1387 = _1218;
        _1389 = _1217;
        _1390 = _1216;
        _1391 = _1228;
        _1392 = _1227;
        _1393 = _1226;
        _1394 = _1238;
        _1395 = _1237;
        _1396 = _1236;
        _1397 = _1251;
        _1398 = _1250;
        _1399 = _1249;
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1388;
        _1389 = _1388;
        _1390 = _1388;
        _1391 = _1388;
        _1392 = _1388;
        _1393 = _1388;
        _1394 = _1388;
        _1395 = _1388;
        _1396 = _1388;
        _1397 = _1388;
        _1398 = _1388;
        _1399 = _1388;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1434 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1438 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1461 = _1050 + _809;
        float _1462 = _1054 + _810;
        float _1463 = _1058 + _811;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_809, _810, _811), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4198 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_809, _810, _811), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4231 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_809, _810, _811), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4264 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1388;
        _1700 = _1388;
        _1701 = _1388;
        _1702 = _1388;
        _1703 = _1388;
        _1704 = _1388;
        _1705 = _1388;
        _1706 = _1388;
        _1707 = _1388;
        _1708 = _1388;
        _1709 = _1388;
        _1710 = _1388;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1400)) + _1400;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1401)) + _1401;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1402)) + _1402;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _994 * 0.5;
    float _1768 = _995 * 0.5;
    float _1769 = _996 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1387, _1391, _1394, _1397));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1897 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1900 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1928 = frontier_phi_17_15_ladder;
        }
        float _2151;
        if (_1897 > 0.0)
        {
            _2151 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2151 = frontier_phi_26_22_ladder;
        }
        float _2408;
        if (_1900 > 0.0)
        {
            _2408 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2408 = frontier_phi_38_33_ladder;
        }
        float _2410 = isnan(_2151) ? _1928 : (isnan(_1928) ? _2151 : min(_1928, _2151));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1894) + _1883;
        float _2416 = (_2411 * _1897) + _1887;
        float _2417 = (_2411 * _1900) + _1891;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2418;
        float _2422 = _2418 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 > _2422) || ((_2416 < _2420) || ((_2415 < _2420) || (_2415 > _2422))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2417, cbModelParam._m0[9u].z, fma(_2416, cbModelParam._m0[9u].y, _2415 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2417, cbModelParam._m0[10u].z, fma(_2416, cbModelParam._m0[10u].y, _2415 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2417, cbModelParam._m0[11u].z, fma(_2416, cbModelParam._m0[11u].y, _2415 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_16_38_ladder_2;
        _1918 = frontier_phi_16_38_ladder_1;
        _1920 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1836);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1978 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1982 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1986 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1989 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1992 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1995 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2156;
        if (_1989 > 0.0)
        {
            _2156 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2156 = frontier_phi_28_24_ladder;
        }
        float _2435;
        if (_1992 > 0.0)
        {
            _2435 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2435 = frontier_phi_40_35_ladder;
        }
        float _2648;
        if (_1995 > 0.0)
        {
            _2648 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2648 = frontier_phi_49_46_ladder;
        }
        float _2650 = isnan(_2435) ? _2156 : (isnan(_2156) ? _2435 : min(_2156, _2435));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _1989) + _1978;
        float _2656 = (_2651 * _1992) + _1982;
        float _2657 = (_2651 * _1995) + _1986;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2659 = (-1.0) - _2658;
        float _2661 = _2658 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2657 > _2661) || ((_2657 < _2659) || ((_2656 > _2661) || ((_2656 < _2659) || ((_2655 < _2659) || (_2655 > _2661))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2657, cbModelParam._m0[17u].z, fma(_2656, cbModelParam._m0[17u].y, _2655 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2657, cbModelParam._m0[18u].z, fma(_2656, cbModelParam._m0[18u].y, _2655 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2657, cbModelParam._m0[19u].z, fma(_2656, cbModelParam._m0[19u].y, _2655 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_25_49_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _2014 = frontier_phi_25_49_ladder_2;
        _2016 = frontier_phi_25_49_ladder_1;
        _2018 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1925);
        _2014 = _1998.x * cbModelParam._m0[1u].z;
        _2016 = _1998.y * cbModelParam._m0[1u].z;
        _2018 = _1998.z * cbModelParam._m0[1u].z;
    }
    float _2031 = (((_1021 * _970) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2033 = (((_1021 * _972) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2035 = (((_1021 * _973) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2038 = fma(_2035, cbSceneParam._m0[89u].z, fma(_2033, cbSceneParam._m0[89u].y, _2031 * cbSceneParam._m0[89u].x));
    float _2041 = fma(_2035, cbSceneParam._m0[90u].z, fma(_2033, cbSceneParam._m0[90u].y, _2031 * cbSceneParam._m0[90u].x));
    float _2044 = fma(_2035, cbSceneParam._m0[91u].z, fma(_2033, cbSceneParam._m0[91u].y, _2031 * cbSceneParam._m0[91u].x));
    vec4 _2052 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_908, _909));
    float _2054 = _2052.w;
    float _2066 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2054);
    float _2067 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2054);
    float _2068 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2054);
    uvec4 _2072 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2074 = _2072.x * 14u;
    uint _2075 = _2074 + 13u;
    float _2082 = _986 + (-1.0);
    float _2087 = (cbLight._m0[_2075].x * _2082) + 1.0;
    float _2088 = (cbLight._m0[_2075].y * _2082) + 1.0;
    float _2089 = (cbLight._m0[_2075].z * _2082) + 1.0;
    float _2090 = (cbLight._m0[_2075].w * _2082) + 1.0;
    uint _2091 = _2074 + 5u;
    float _2097 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2101 = _2074 + 4u;
    float _2110 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2114 = _2074 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_809, _810, _811));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_809, _810, _811));
    float _4400 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4411 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2091].x * _2097) * _2135) + (((cbLight._m0[_2101].x * _2066) * _2110) * _2133);
    float _2143 = ((_2097 * cbLight._m0[_2091].y) * _2135) + (((cbLight._m0[_2101].y * _2067) * _2110) * _2133);
    float _2144 = ((_2097 * cbLight._m0[_2091].z) * _2135) + (((cbLight._m0[_2101].z * _2068) * _2110) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2074 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2150)
    {
        _2161 = _2142;
        _2163 = _2143;
        _2165 = _2144;
    }
    else
    {
        uint _2169 = _2074 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_2074 + 2u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4422 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2188 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2142;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2143;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2144;
    }
    bool _2168 = _2148.y == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2168)
    {
        _2206 = _2161;
        _2208 = _2163;
        _2210 = _2165;
    }
    else
    {
        uint _2379 = _2074 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_2074 + 3u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4438 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2398 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2206 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2161;
        _2208 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2163;
        _2210 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2165;
    }
    uint _2213 = _2074 + 8u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _812) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2074].x + _888;
    float _2229 = cbLight._m0[_2074].y + _889;
    float _2230 = cbLight._m0[_2074].z + _890;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2074].xyz));
    float _4454 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _4465 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2242 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2243 = dot(vec3(_809, _810, _811), vec3(_2235, _2236, _2237));
    float _4476 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2235, _2236, _2237));
    float _4487 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2227 * _2227;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
    float _2264 = 0.959999978542327880859375 - _967;
    float _2266 = 0.959999978542327880859375 - _968;
    float _2267 = 0.959999978542327880859375 - _969;
    float _2274 = 1.0 - _2227;
    float _2285 = (0.5 / (((_2242 * ((_2241 * _2274) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2274) + _2227) * _2241))) * _2241;
    float _4498 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    uint _2301 = _2074 + 9u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _812) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2114].x + _888;
    float _2315 = cbLight._m0[_2114].y + _889;
    float _2316 = cbLight._m0[_2114].z + _890;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2114].xyz));
    float _4509 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2328 = dot(vec3(_809, _810, _811), vec3(_2321, _2322, _2323));
    float _4520 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2321, _2322, _2323));
    float _4531 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2313 * _2313;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
    float _2354 = 1.0 - _2313;
    float _2364 = (0.5 / (((_2242 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2354) + _2313) * _2327))) * _2327;
    float _4542 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    float _2376 = (((((_2347 * _2264) + _970) * cbLight._m0[_2301].x) * _2366) * _2097) + ((((cbLight._m0[_2213].x * _2066) * ((_2263 * _2264) + _970)) * _2287) * _2110);
    float _2377 = (((((_2347 * _2266) + _972) * cbLight._m0[_2301].y) * _2366) * _2097) + ((((cbLight._m0[_2213].y * _2067) * ((_2263 * _2266) + _972)) * _2287) * _2110);
    float _2378 = (((((_2347 * _2267) + _973) * cbLight._m0[_2301].z) * _2366) * _2097) + ((((cbLight._m0[_2213].z * _2068) * ((_2263 * _2267) + _973)) * _2287) * _2110);
    float _2440;
    float _2442;
    float _2444;
    if (_2150)
    {
        _2440 = _2376;
        _2442 = _2377;
        _2444 = _2378;
    }
    else
    {
        uint _2446 = _2074 + 2u;
        uint _2450 = _2074 + 10u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _812) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _888;
        float _2467 = cbLight._m0[_2446].y + _889;
        float _2468 = cbLight._m0[_2446].z + _890;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2446].xyz));
        float _4553 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2480 = dot(vec3(_809, _810, _811), vec3(_2473, _2474, _2475));
        float _4564 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4575 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2499 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2506 = 1.0 - _2465;
        float _2516 = (0.5 / (((_2242 * ((_2479 * _2506) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2506) + _2465) * _2479))) * _2479;
        float _4586 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2440 = (((((_2499 * _2264) + _970) * cbLight._m0[_2450].x) * _2518) * _2519) + _2376;
        _2442 = (((((_2499 * _2266) + _972) * cbLight._m0[_2450].y) * _2518) * _2519) + _2377;
        _2444 = (((((_2499 * _2267) + _973) * cbLight._m0[_2450].z) * _2518) * _2519) + _2378;
    }
    float _2554;
    float _2556;
    float _2558;
    if (_2168)
    {
        _2554 = _2440;
        _2556 = _2442;
        _2558 = _2444;
    }
    else
    {
        uint _2565 = _2074 + 3u;
        uint _2569 = _2074 + 11u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _812) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _888;
        float _2586 = cbLight._m0[_2565].y + _889;
        float _2587 = cbLight._m0[_2565].z + _890;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2565].xyz));
        float _4602 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2599 = dot(vec3(_809, _810, _811), vec3(_2592, _2593, _2594));
        float _4613 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4624 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2618 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
        float _2625 = 1.0 - _2584;
        float _2635 = (0.5 / (((_2242 * ((_2598 * _2625) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2625) + _2584) * _2598))) * _2598;
        float _4635 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2554 = (((((_2618 * _2264) + _970) * cbLight._m0[_2569].x) * _2637) * _2638) + _2440;
        _2556 = (((((_2618 * _2266) + _972) * cbLight._m0[_2569].y) * _2637) * _2638) + _2442;
        _2558 = (((((_2618 * _2267) + _973) * cbLight._m0[_2569].z) * _2637) * _2638) + _2444;
    }
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_2072.y == 0u)
    {
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2713;
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2713;
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2713;
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.x;
        uint _2740 = uint((float(_2728.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2729))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2729)));
        float _2750 = (log2(_2716 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2751 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        uint _2754 = uint(isnan(14.0) ? _2751 : (isnan(_2751) ? 14.0 : min(_2751, 14.0)));
        uvec4 _2759 = texelFetch(g_lightClusterGridBuffer, int(((_2754 << 2u) + (_2740 << 6u)) >> 2u));
        uint _2760 = _2759.x;
        uint _2761 = _2728.z;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((((1u << ((_2761 >> 4u) & 15u)) + 4294967295u) & _2760) == 0u) || ((_2761 & 240u) == 0u))
        {
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
        }
        else
        {
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2754 << 5u) + (_2740 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3029)
                {
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2714;
                        float _3225 = _3184.y - _2715;
                        float _3226 = _3184.z - _2716;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_927, _930, _933), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4661 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2714;
                        float _3260 = (-0.0) - _2715;
                        float _3261 = (-0.0) - _2716;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3276 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3277 = 1.0 - _1002;
                        float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                        float _3285 = _3284 * _3284;
                        float _3286 = _3285 * _3285;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3297 = dot(vec3(_927, _930, _933), vec3(_3266, _3267, _3268));
                        float _4677 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3301 = dot(vec3(_927, _930, _933), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                        float _4688 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                        float _3309 = _3244 * _3285;
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3234) + _3310;
                        float _4699 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3315 = 1.0 - _3285;
                        float _3325 = (0.5 / (((_3314 * ((_3300 * _3315) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3285) * _3300))) * _3314;
                        float _4710 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3336 = (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3308 * _3308) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3255 * _3203.x) + _3161;
                        _3089 = (_3255 * _3203.y) + _3162;
                        _3090 = (_3255 * _3203.z) + _3163;
                        _3085 = (_3336 * _3220.x) + _3158;
                        _3086 = (_3336 * _3220.y) + _3159;
                        _3087 = (_3336 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                _2862 = frontier_phi_66_pred;
                _2872 = frontier_phi_66_pred_1;
                _2870 = frontier_phi_66_pred_2;
                _2868 = frontier_phi_66_pred_3;
                _2866 = frontier_phi_66_pred_4;
                _2864 = frontier_phi_66_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2862;
                    _3014 = _2864;
                    _3015 = _2866;
                    _3016 = _2868;
                    _3017 = _2870;
                    _3018 = _2872;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
        }
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.z;
        uint _2878 = (_2876 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2878) & _2760) == 0u)
        {
            _2981 = _2861;
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
            _2989 = _2869;
            _2991 = _2871;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
            float _3007 = _3006 * _2714;
            float _3008 = _3006 * _2715;
            float _3009 = _3006 * _2716;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2878 < ((_2876 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2861;
                float _3142 = _2863;
                float _3143 = _2865;
                float _3144 = _2867;
                float _3145 = _2869;
                float _3146 = _2871;
                uint _3147 = _2878;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2754 << 5u) + (_2740 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3157)
                    {
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        uint _3369 = _3156;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3454;
                        float _3500;
                        bool _3501;
                        for (;;)
                        {
                            uint _3380 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3380 * 40u) + 20u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3380 * 40u) + 24u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3475 = (_3380 * 40u) + 28u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3500 = fma(_2716, _3488.z, fma(_2715, _3488.y, _3488.x * _2714)) + _3488.w;
                            _3501 = !((fma(_2716, _3469.z, fma(_2715, _3469.y, _3469.x * _2714)) + _3469.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3501)
                            {
                                float _3528 = _3395.x - _2714;
                                float _3529 = _3395.y - _2715;
                                float _3530 = _3395.z - _2716;
                                float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                                float _3534 = inversesqrt(_3531);
                                float _3535 = _3534 * _3528;
                                float _3536 = _3534 * _3529;
                                float _3537 = _3534 * _3530;
                                float _3541 = 1.0 - (_3531 / (_3396 * _3396));
                                float _4721 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3546 = sqrt(_3531) * _3411.w;
                                float _3548 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                                float _3549 = _3548 * _3548;
                                float _3552 = ((1.0 - _3549) * dot(vec3(_3535, _3536, _3537), vec3(_927, _930, _933))) + _3549;
                                float _3555 = _3546 * _3546;
                                float _3559 = (fma(_2716, _3438.z, fma(_2715, _3438.y, _3438.x * _2714)) + _3438.w) / _3500;
                                float _3560 = (fma(_2716, _3454.z, fma(_2715, _3454.y, _3454.x * _2714)) + _3454.w) / _3500;
                                float _3564 = 1.0 - dot(vec2(_3559, _3560), vec2(_3559, _3560));
                                float _4737 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3566 = _3565 * (((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3542) / ((_3555 * 0.699999988079071044921875) + 1.0));
                                float _3578 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                                float _3579 = 1.0 - _1002;
                                float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                                float _3587 = _3586 * _3586;
                                float _3588 = _3587 * _3587;
                                float _3589 = _3535 - _3007;
                                float _3590 = _3536 - _3008;
                                float _3591 = _3537 - _3009;
                                float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                                float _3599 = dot(vec3(_927, _930, _933), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4748 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3603 = dot(vec3(_927, _930, _933), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                                float _4759 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                                float _3611 = _3548 * _3587;
                                float _3612 = _3611 * _3611;
                                float _3618 = ((1.0 - _3612) * dot(vec3(_927, _930, _933), vec3(_3535, _3536, _3537))) + _3612;
                                float _4770 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3620 = 1.0 - _3587;
                                float _3630 = (0.5 / (((_3619 * ((_3602 * _3620) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3587) * _3602))) * _3619;
                                float _4781 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3640 = (_3565 * _3542) * (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3610 * _3610) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3566 * _3411.y;
                                frontier_phi_83_pred_1 = _3566 * _3411.x;
                                frontier_phi_83_pred_2 = _3640 * _3423.z;
                                frontier_phi_83_pred_3 = _3640 * _3423.y;
                                frontier_phi_83_pred_4 = _3640 * _3423.x;
                                frontier_phi_83_pred_5 = _3566 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_83_pred;
                            _3647 = frontier_phi_83_pred_1;
                            _3646 = frontier_phi_83_pred_2;
                            _3645 = frontier_phi_83_pred_3;
                            _3644 = frontier_phi_83_pred_4;
                            _3649 = frontier_phi_83_pred_5;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    _2992 = frontier_phi_77_pred;
                    _2990 = frontier_phi_77_pred_1;
                    _2988 = frontier_phi_77_pred_2;
                    _2986 = frontier_phi_77_pred_3;
                    _2984 = frontier_phi_77_pred_4;
                    _2982 = frontier_phi_77_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_58_59_ladder = _2865;
                frontier_phi_58_59_ladder_1 = _2871;
                frontier_phi_58_59_ladder_2 = _2869;
                frontier_phi_58_59_ladder_3 = _2867;
                frontier_phi_58_59_ladder_4 = _2863;
                frontier_phi_58_59_ladder_5 = _2861;
            }
            _2981 = frontier_phi_58_59_ladder_5;
            _2983 = frontier_phi_58_59_ladder_4;
            _2985 = frontier_phi_58_59_ladder;
            _2987 = frontier_phi_58_59_ladder_3;
            _2989 = frontier_phi_58_59_ladder_2;
            _2991 = frontier_phi_58_59_ladder_1;
        }
        float _2996 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2773 = (_2996 * _2987) + _2206;
        _2775 = (_2996 * _2989) + _2208;
        _2777 = (_2996 * _2991) + _2210;
        _2779 = ((_2981 * _970) * _2996) + _2554;
        _2781 = ((_2983 * _972) * _2996) + _2556;
        _2783 = ((_2985 * _973) * _2996) + _2558;
    }
    else
    {
        _2773 = _2206;
        _2775 = _2208;
        _2777 = _2210;
        _2779 = _2554;
        _2781 = _2556;
        _2783 = _2558;
    }
    float _4797 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4808 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4819 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2800 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2773 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _986))) + ((_2779 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2775 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _986))) + ((_2781 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    float _2802 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2777 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _986))) + ((_2783 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1825)) * cbPerFrame._m0[3u].x);
    uint _2803 = _257 + 6u;
    float _2811 = _908 / cbSceneParam._m0[86u].x;
    float _2812 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2828 = _2826.x;
    float _2829 = _2826.y;
    float _2830 = _2826.z;
    float _2831 = _2826.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _2886 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _2887 = _2886 / _831;
        float _2898 = _2887 * _881;
        float _2899 = _882 * _2887;
        float _2900 = (-0.0) - _2899;
        float _2901 = _2887 * _883;
        float _2903 = (cbSceneParam._m0[77u].w * _2900) / _2886;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2899;
        float _2911 = sqrt(((_2898 * _2898) + (_2899 * _2899)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2886)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2900 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3044 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2911 / _2900) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2921 * _3053) - exp2(_2921 * _3054)) * _3042))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2831);
        _2923 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2828;
        _2925 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2829;
        _2927 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2830;
        _2929 = _3109 * _2831;
    }
    else
    {
        _2923 = _2828;
        _2925 = _2829;
        _2927 = _2830;
        _2929 = _2831;
    }
    bool _3136;
    vec4 _2939;
    vec4 _2961;
    float _2963;
    float _2967;
    float _2968;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2939 = cbMatDynParam._m0[0u];
        float _2941 = roundEven(_2939.y);
        bool _2942 = _2941 == 3.0;
        float _2943 = log2(_2929);
        float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * _2800;
        float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * _2801;
        float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * _2802;
        float _2959 = _897 + (-0.5);
        _2961 = cbMtdParam._m0[1u];
        _2963 = _2961.y * _2959;
        float _2966 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2967 = _2966 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = _2966 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
        _2969 = _2966 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
        _2970 = _2959 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _946 + uint(_2939.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2963 + 1.0) < _2961.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3341;
    if (_3136)
    {
        discard_state = true;
        _3341 = 0.0;
    }
    else
    {
        _3341 = cbInstanceData._m0[_2803].w;
    }
    SV_Target.x = _2967;
    SV_Target.y = _2968;
    SV_Target.z = _2969;
    SV_Target.w = _3341;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2803].w;
    discard_exit();
}


