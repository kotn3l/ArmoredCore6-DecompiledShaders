#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1391;
float _3772;
float _3773;
float _3774;
float _3775;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3784 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3795 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _544 = ((_516.x - _535) * _399) + _535;
    float _545 = ((_516.y - _536) * _399) + _536;
    float _546 = ((_516.z - _537) * _399) + _537;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _571 = ((_558.z - _546) * _472) + _546;
    float _574 = ((((_558.x - _544) * _472) + _544) * 2.0) + (-1.0);
    float _575 = ((((_558.y - _545) * _472) + _545) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3806 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_493.x * 2.0) + (-1.0)))) + (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _614 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_493.y * 2.0) + (-1.0)))) + (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _628 = _626.x;
    float _629 = 1.0 - _628;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_628 - _629) * cbMtdParam._m0[24u].w) + _629) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3817 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _479) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _658) + _479;
    float _667 = ((((cbMtdParam._m0[10u].y - _480) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _658) + _480;
    float _668 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _481)) * _658) + _481;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _696) * _399) + _696;
    float _732 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _714) * _472) + _714;
    float _736 = ((_680.x - _732) * cbMtdParam._m0[19u].z) + _732;
    float _738 = _736 - (_736 * _658);
    float _743 = (((_493.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _747 = ((_601.z - _743) * cbMtdParam._m0[19u].w) + _743;
    float _751 = ((cbMtdParam._m0[23u].y - _747) * _658) + _747;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3828 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _794 = (_658 * (((cbMtdParam._m0[22u].z * _613) - _613) + _776)) + _613;
    float _795 = (_658 * (((cbMtdParam._m0[22u].z * _614) - _614) + _777)) + _614;
    float _796 = (_658 * (sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) - _581)) + _581;
    float _798 = cbMtdParam._m0[22u].x + _601.w;
    float _801 = fma(_796, _248 * NORMAL.x, fma(_795, _255 * TANGENT.x, (_241 * _233) * _794));
    float _804 = fma(_796, _248 * NORMAL.y, fma(_795, _255 * TANGENT.y, (_241 * _234) * _794));
    float _807 = fma(_796, _248 * NORMAL.z, fma(_795, _255 * TANGENT.z, (_241 * _235) * _794));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _3839 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _815 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _3861 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3872 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3883 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3894 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _820 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    vec4 _898 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _900 = _898.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1072 = sqrt(((_884 * _884) + (_885 * _885)) + (_886 * _886));
        float _1078 = (cbMatDynParam._m0[5u].x * _1072) + cbMatDynParam._m0[5u].y;
        float _3905 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1083 = (cbMatDynParam._m0[5u].z * _1072) + cbMatDynParam._m0[5u].w;
        float _3916 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) - _1079)) + _1079) < ((_900 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _930 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _933 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _936 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _949 = _261 + 9u;
    uint _950 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_950].z;
    float _3927 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _962 = 1.0 - _820;
    float _963 = _959 * _962;
    float _964 = _960 * _962;
    float _965 = _961 * _962;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _820;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _820;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _820;
    float _973 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _989 = ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_812, _813, _814), vec3(_891, _892, _893));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _812) - _891;
    float _998 = (_993 * _813) - _892;
    float _999 = (_993 * _814) - _893;
    float _1003 = abs(dot(vec3(_891, _892, _893), vec3(_812, _813, _814)));
    float _3960 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_815);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1024 = (1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1025 = _1018 * _1005;
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1119 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1123 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1148 = _1053 + _812;
        float _1149 = _1057 + _813;
        float _1150 = _1061 + _814;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_812, _813, _814), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4008 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_812, _813, _814), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4041 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_812, _813, _814), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4074 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1432 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1436 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1440 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1463 = _1053 + _812;
        float _1464 = _1057 + _813;
        float _1465 = _1061 + _814;
        float _1475 = fma(_1465, cbModelParam._m0[30u].z, fma(_1464, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1463)) - _1432;
        float _1476 = fma(_1465, cbModelParam._m0[31u].z, fma(_1464, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1463)) - _1436;
        float _1477 = fma(_1465, cbModelParam._m0[32u].z, fma(_1464, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1463)) - _1440;
        float _1481 = inversesqrt(dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477)));
        float _1494 = ((_1481 * _1475) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1432 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1481 * _1476) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1436 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1481 * _1477) / cbModelParam._m0[35u].z) + ((((((_1440 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        float _1531 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1498.x + (-0.5));
        float _1533 = _1531 * (_1498.y + (-0.5));
        float _1534 = _1531 * (_1498.z + (-0.5));
        float _1541 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1505.x + (-0.5));
        float _1543 = _1541 * (_1505.y + (-0.5));
        float _1544 = _1541 * (_1505.z + (-0.5));
        float _1551 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1512.x + (-0.5));
        float _1553 = _1551 * (_1512.y + (-0.5));
        float _1554 = _1551 * (_1512.z + (-0.5));
        float _1561 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1519.x + (-0.5));
        float _1563 = _1561 * (_1519.y + (-0.5));
        float _1564 = _1561 * (_1519.z + (-0.5));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = _1532 * 0.5;
        float _1569 = _1542 * 0.5;
        float _1570 = _1552 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_812, _813, _814), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4137 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1595 + 1.0))) + _1600) * _1565;
        float _1610 = _1533 * 0.5;
        float _1611 = _1543 * 0.5;
        float _1612 = _1553 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_812, _813, _814), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4170 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1637 + 1.0))) + _1642) * _1566;
        float _1652 = _1534 * 0.5;
        float _1653 = _1544 * 0.5;
        float _1654 = _1554 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_812, _813, _814), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4203 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1679 + 1.0))) + _1684) * _1567;
        _1701 = _1534;
        _1702 = _1533;
        _1703 = _1532;
        _1704 = _1544;
        _1705 = _1543;
        _1706 = _1542;
        _1707 = _1554;
        _1708 = _1553;
        _1709 = _1552;
        _1710 = _1567;
        _1711 = _1566;
        _1712 = _1565;
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
    }
    else
    {
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = _1391;
        _1711 = _1391;
        _1712 = _1391;
        _1713 = 0.0;
        _1714 = 0.0;
        _1715 = 0.0;
    }
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1403)) + _1403;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1404)) + _1404;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1405)) + _1405;
    float _1748 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1725));
    float _1769 = _997 * 0.5;
    float _1770 = _998 * 0.5;
    float _1771 = _999 * 0.5;
    float _1772 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1775 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1778 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1812;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1785 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1789 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1793 = dot(vec4(_1769, _1770, _1771, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1800 = dot(vec4(cbModelParam._m0[39u]), vec4(_1769, _1770, _1771, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1823;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1814 = dot(vec4(cbModelParam._m0[40u]), vec4(_1769, _1770, _1771, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1814) ? 0.0 : (isnan(0.0) ? _1814 : max(0.0, _1814))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1827 = (_1823 * cbModelParam._m0[1u].x) + (_1812 * (1.0 - cbModelParam._m0[1u].x));
    float _1837 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1837 : min(cbModelParam._m0[25u].z, _1837));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1901 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1904 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1932 = frontier_phi_17_15_ladder;
        }
        float _2135;
        if (_1901 > 0.0)
        {
            _2135 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2135 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1904 > 0.0)
        {
            _2389 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2135) ? _1932 : (isnan(_1932) ? _2135 : min(_1932, _2135));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1898) + _1887;
        float _2397 = (_2392 * _1901) + _1891;
        float _2398 = (_2392 * _1904) + _1895;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1838);
            frontier_phi_16_38_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_16_38_ladder_2;
        _1922 = frontier_phi_16_38_ladder_1;
        _1924 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1838);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1983 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1987 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1991 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1994 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1997 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _2000 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2140;
        if (_1994 > 0.0)
        {
            _2140 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2140 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1997 > 0.0)
        {
            _2416 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2629;
        if (_2000 > 0.0)
        {
            _2629 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2629 = frontier_phi_49_46_ladder;
        }
        float _2631 = isnan(_2416) ? _2140 : (isnan(_2140) ? _2416 : min(_2140, _2416));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _1994) + _1983;
        float _2637 = (_2632 * _1997) + _1987;
        float _2638 = (_2632 * _2000) + _1991;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2639;
        float _2642 = _2639 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2638 > _2642) || ((_2638 < _2640) || ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 < _2640) || (_2636 > _2642))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2638, cbModelParam._m0[17u].z, fma(_2637, cbModelParam._m0[17u].y, _2636 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2638, cbModelParam._m0[18u].z, fma(_2637, cbModelParam._m0[18u].y, _2636 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2638, cbModelParam._m0[19u].z, fma(_2637, cbModelParam._m0[19u].y, _2636 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_25_49_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _2019 = frontier_phi_25_49_ladder_2;
        _2021 = frontier_phi_25_49_ladder_1;
        _2023 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1929);
        _2019 = _2003.x * cbModelParam._m0[1u].z;
        _2021 = _2003.y * cbModelParam._m0[1u].z;
        _2023 = _2003.z * cbModelParam._m0[1u].z;
    }
    float _2036 = (((_1024 * _973) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2038 = (((_1024 * _975) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2040 = (((_1024 * _976) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2043 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2038, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2038, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2038, cbSceneParam._m0[91u].y, _2036 * cbSceneParam._m0[91u].x));
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _989 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2094 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2098 = _2061 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_812, _813, _814));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_812, _813, _814));
    float _4339 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4350 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2078].x * _2084) * _2119) + ((cbLight._m0[_2088].x * _2094) * _2117);
    float _2127 = ((_2084 * cbLight._m0[_2078].y) * _2119) + ((_2094 * cbLight._m0[_2088].y) * _2117);
    float _2128 = ((_2084 * cbLight._m0[_2078].z) * _2119) + ((_2094 * cbLight._m0[_2088].z) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2134)
    {
        _2145 = _2126;
        _2147 = _2127;
        _2149 = _2128;
    }
    else
    {
        uint _2153 = _2061 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4361 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2172 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2126;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2127;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2128;
    }
    bool _2152 = _2132.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2152)
    {
        _2190 = _2145;
        _2192 = _2147;
        _2194 = _2149;
    }
    else
    {
        uint _2360 = _2061 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4377 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2379 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2190 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2145;
        _2192 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2147;
        _2194 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2149;
    }
    uint _2197 = _2061 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _815) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2061].x + _891;
    float _2213 = cbLight._m0[_2061].y + _892;
    float _2214 = cbLight._m0[_2061].z + _893;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2061].xyz));
    float _4393 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2226 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2227 = dot(vec3(_812, _813, _814), vec3(_2219, _2220, _2221));
    float _4415 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2219, _2220, _2221));
    float _4426 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2248 = 0.959999978542327880859375 - _970;
    float _2250 = 0.959999978542327880859375 - _971;
    float _2251 = 0.959999978542327880859375 - _972;
    float _2258 = 1.0 - _2211;
    float _2269 = (0.5 / (((_2226 * ((_2225 * _2258) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2258) + _2211) * _2225))) * _2225;
    float _4437 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2282 = _2061 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _815) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2098].x + _891;
    float _2296 = cbLight._m0[_2098].y + _892;
    float _2297 = cbLight._m0[_2098].z + _893;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2098].xyz));
    float _4448 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2309 = dot(vec3(_812, _813, _814), vec3(_2302, _2303, _2304));
    float _4459 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2302, _2303, _2304));
    float _4470 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2335 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2226 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2335) + _2294) * _2308))) * _2308;
    float _4481 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2357 = (((((_2328 * _2248) + _973) * cbLight._m0[_2282].x) * _2347) * _2084) + (((((_2247 * _2248) + _973) * cbLight._m0[_2197].x) * _2271) * _2094);
    float _2358 = (((((_2328 * _2250) + _975) * cbLight._m0[_2282].y) * _2347) * _2084) + (((((_2247 * _2250) + _975) * cbLight._m0[_2197].y) * _2271) * _2094);
    float _2359 = (((((_2328 * _2251) + _976) * cbLight._m0[_2282].z) * _2347) * _2084) + (((((_2247 * _2251) + _976) * cbLight._m0[_2197].z) * _2271) * _2094);
    float _2421;
    float _2423;
    float _2425;
    if (_2134)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2061 + 2u;
        uint _2431 = _2061 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _815) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _891;
        float _2448 = cbLight._m0[_2427].y + _892;
        float _2449 = cbLight._m0[_2427].z + _893;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2427].xyz));
        float _4492 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2461 = dot(vec3(_812, _813, _814), vec3(_2454, _2455, _2456));
        float _4503 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4514 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2226 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2487) + _2446) * _2460))) * _2460;
        float _4525 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2421 = (((((_2480 * _2248) + _973) * cbLight._m0[_2431].x) * _2499) * _2500) + _2357;
        _2423 = (((((_2480 * _2250) + _975) * cbLight._m0[_2431].y) * _2499) * _2500) + _2358;
        _2425 = (((((_2480 * _2251) + _976) * cbLight._m0[_2431].z) * _2499) * _2500) + _2359;
    }
    float _2535;
    float _2537;
    float _2539;
    if (_2152)
    {
        _2535 = _2421;
        _2537 = _2423;
        _2539 = _2425;
    }
    else
    {
        uint _2546 = _2061 + 3u;
        uint _2550 = _2061 + 11u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _815) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _891;
        float _2567 = cbLight._m0[_2546].y + _892;
        float _2568 = cbLight._m0[_2546].z + _893;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2546].xyz));
        float _4541 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2580 = dot(vec3(_812, _813, _814), vec3(_2573, _2574, _2575));
        float _4552 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4563 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2226 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2606) + _2565) * _2579))) * _2579;
        float _4574 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2535 = (((((_2599 * _2248) + _973) * cbLight._m0[_2550].x) * _2618) * _2619) + _2421;
        _2537 = (((((_2599 * _2250) + _975) * cbLight._m0[_2550].y) * _2618) * _2619) + _2423;
        _2539 = (((((_2599 * _2251) + _976) * cbLight._m0[_2550].z) * _2618) * _2619) + _2425;
    }
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_2059.y == 0u)
    {
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2694;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2694;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2694;
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2710)));
        float _2731 = (log2(_2697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            uint _3001 = 0u;
            uint _3010;
            bool _3011;
            for (;;)
            {
                _3010 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                _3011 = _3010 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3011)
                {
                    frontier_phi_66_pred = _2995;
                    frontier_phi_66_pred_1 = _3000;
                    frontier_phi_66_pred_2 = _2999;
                    frontier_phi_66_pred_3 = _2998;
                    frontier_phi_66_pred_4 = _2997;
                    frontier_phi_66_pred_5 = _2996;
                }
                else
                {
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    uint _3146;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3010;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    for (;;)
                    {
                        uint _3150 = uint(findLSB(_3146)) + (_3001 << 5u);
                        uint _3147 = (_3146 + 4294967295u) & _3146;
                        uint _3152 = _3150 * 48u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3172 = (_3150 * 48u) + 4u;
                        vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3191 = (_3150 * 48u) + 8u;
                        vec3 _3202 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x));
                        float _3206 = _3166.x - _2695;
                        float _3207 = _3166.y - _2696;
                        float _3208 = _3166.z - _2697;
                        float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                        float _3212 = inversesqrt(_3209);
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3216 = dot(vec3(_930, _933, _936), vec3(_3213, _3214, _3215));
                        float _3221 = 1.0 - (_3209 * _3166.w);
                        float _4600 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3223 = sqrt(_3209) * _3185.w;
                        float _3226 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3216) + _3227;
                        float _3233 = _3223 * _3223;
                        float _3237 = ((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3222) / ((_3233 * 0.699999988079071044921875) + 1.0);
                        float _3241 = (-0.0) - _2695;
                        float _3242 = (-0.0) - _2696;
                        float _3243 = (-0.0) - _2697;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3258 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                        float _3259 = 1.0 - _1005;
                        float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                        float _3267 = _3266 * _3266;
                        float _3268 = _3267 * _3267;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3279 = dot(vec3(_930, _933, _936), vec3(_3248, _3249, _3250));
                        float _4616 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3283 = dot(vec3(_930, _933, _936), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                        float _4627 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                        float _3291 = _3226 * _3267;
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3216) + _3292;
                        float _4638 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3297 = 1.0 - _3267;
                        float _3307 = (0.5 / (((_3296 * ((_3282 * _3297) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3267) * _3282))) * _3296;
                        float _4649 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3318 = (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3290 * _3290) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125))) * _3222;
                        _3070 = (_3237 * _3185.x) + _3143;
                        _3071 = (_3237 * _3185.y) + _3144;
                        _3072 = (_3237 * _3185.z) + _3145;
                        _3067 = (_3318 * _3202.x) + _3140;
                        _3068 = (_3318 * _3202.y) + _3141;
                        _3069 = (_3318 * _3202.z) + _3142;
                        if (_3147 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3147;
                        }
                    }
                    frontier_phi_66_pred = _3067;
                    frontier_phi_66_pred_1 = _3072;
                    frontier_phi_66_pred_2 = _3071;
                    frontier_phi_66_pred_3 = _3070;
                    frontier_phi_66_pred_4 = _3069;
                    frontier_phi_66_pred_5 = _3068;
                }
                _2843 = frontier_phi_66_pred;
                _2853 = frontier_phi_66_pred_1;
                _2851 = frontier_phi_66_pred_2;
                _2849 = frontier_phi_66_pred_3;
                _2847 = frontier_phi_66_pred_4;
                _2845 = frontier_phi_66_pred_5;
                uint _3002 = _3001 + 1u;
                if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2995 = _2843;
                    _2996 = _2845;
                    _2997 = _2847;
                    _2998 = _2849;
                    _2999 = _2851;
                    _3000 = _2853;
                    _3001 = _3002;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((4294967295u << _2859) & _2741) == 0u)
        {
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
        }
        else
        {
            float _2988 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
            float _2989 = _2988 * _2695;
            float _2990 = _2988 * _2696;
            float _2991 = _2988 * _2697;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _3123 = _2842;
                float _3124 = _2844;
                float _3125 = _2846;
                float _3126 = _2848;
                float _3127 = _2850;
                float _3128 = _2852;
                uint _3129 = _2859;
                uint _3138;
                bool _3139;
                for (;;)
                {
                    _3138 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                    _3139 = _3138 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3139)
                    {
                        frontier_phi_77_pred = _3128;
                        frontier_phi_77_pred_1 = _3127;
                        frontier_phi_77_pred_2 = _3126;
                        frontier_phi_77_pred_3 = _3125;
                        frontier_phi_77_pred_4 = _3124;
                        frontier_phi_77_pred_5 = _3123;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        uint _3351 = _3138;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3420;
                        vec4 _3435;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3362 = ((_3129 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3407 = (_3362 * 40u) + 16u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3362 * 40u) + 20u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3362 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3362 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_2697, _3469.z, fma(_2696, _3469.y, _3469.x * _2695)) + _3469.w;
                            _3482 = !((fma(_2697, _3450.z, fma(_2696, _3450.y, _3450.x * _2695)) + _3450.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3377.x - _2695;
                                float _3510 = _3377.y - _2696;
                                float _3511 = _3377.z - _2697;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3378 * _3378));
                                float _4660 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3527 = sqrt(_3512) * _3393.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_930, _933, _936))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_2697, _3420.z, fma(_2696, _3420.y, _3420.x * _2695)) + _3420.w) / _3481;
                                float _3541 = (fma(_2697, _3435.z, fma(_2696, _3435.y, _3435.x * _2695)) + _3435.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4676 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _1005;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _2989;
                                float _3571 = _3517 - _2990;
                                float _3572 = _3518 - _2991;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_930, _933, _936), vec3((-0.0) - _2989, (-0.0) - _2990, (-0.0) - _2991));
                                float _4687 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3584 = dot(vec3(_930, _933, _936), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4698 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_930, _933, _936), vec3(_3516, _3517, _3518))) + _3593;
                                float _4709 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4720 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3547 * _3393.y;
                                frontier_phi_83_pred_1 = _3547 * _3393.x;
                                frontier_phi_83_pred_2 = _3621 * _3405.z;
                                frontier_phi_83_pred_3 = _3621 * _3405.y;
                                frontier_phi_83_pred_4 = _3621 * _3405.x;
                                frontier_phi_83_pred_5 = _3547 * _3393.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3629 = frontier_phi_83_pred;
                            _3628 = frontier_phi_83_pred_1;
                            _3627 = frontier_phi_83_pred_2;
                            _3626 = frontier_phi_83_pred_3;
                            _3625 = frontier_phi_83_pred_4;
                            _3630 = frontier_phi_83_pred_5;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3337;
                        frontier_phi_77_pred_1 = _3336;
                        frontier_phi_77_pred_2 = _3335;
                        frontier_phi_77_pred_3 = _3334;
                        frontier_phi_77_pred_4 = _3333;
                        frontier_phi_77_pred_5 = _3332;
                    }
                    _2974 = frontier_phi_77_pred;
                    _2972 = frontier_phi_77_pred_1;
                    _2970 = frontier_phi_77_pred_2;
                    _2968 = frontier_phi_77_pred_3;
                    _2966 = frontier_phi_77_pred_4;
                    _2964 = frontier_phi_77_pred_5;
                    uint _3130 = _3129 + 1u;
                    if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3123 = _2964;
                        _3124 = _2966;
                        _3125 = _2968;
                        _3126 = _2970;
                        _3127 = _2972;
                        _3128 = _2974;
                        _3129 = _3130;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2968;
                frontier_phi_58_59_ladder_1 = _2974;
                frontier_phi_58_59_ladder_2 = _2972;
                frontier_phi_58_59_ladder_3 = _2970;
                frontier_phi_58_59_ladder_4 = _2966;
                frontier_phi_58_59_ladder_5 = _2964;
            }
            else
            {
                frontier_phi_58_59_ladder = _2846;
                frontier_phi_58_59_ladder_1 = _2852;
                frontier_phi_58_59_ladder_2 = _2850;
                frontier_phi_58_59_ladder_3 = _2848;
                frontier_phi_58_59_ladder_4 = _2844;
                frontier_phi_58_59_ladder_5 = _2842;
            }
            _2963 = frontier_phi_58_59_ladder_5;
            _2965 = frontier_phi_58_59_ladder_4;
            _2967 = frontier_phi_58_59_ladder;
            _2969 = frontier_phi_58_59_ladder_3;
            _2971 = frontier_phi_58_59_ladder_2;
            _2973 = frontier_phi_58_59_ladder_1;
        }
        float _2978 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2754 = (_2978 * _2969) + _2190;
        _2756 = (_2978 * _2971) + _2192;
        _2758 = (_2978 * _2973) + _2194;
        _2760 = ((_2963 * _973) * _2978) + _2535;
        _2762 = ((_2965 * _975) * _2978) + _2537;
        _2764 = ((_2967 * _976) * _2978) + _2539;
    }
    else
    {
        _2754 = _2190;
        _2756 = _2192;
        _2758 = _2194;
        _2760 = _2535;
        _2762 = _2537;
        _2764 = _2539;
    }
    float _4736 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4747 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4758 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2781 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2754 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _989))) + ((_2760 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1827)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2756 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _989))) + ((_2762 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1827)) * cbPerFrame._m0[3u].x);
    float _2783 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2758 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _989))) + ((_2764 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1827)) * cbPerFrame._m0[3u].x);
    uint _2784 = _261 + 6u;
    float _2792 = _911 / cbSceneParam._m0[86u].x;
    float _2793 = _912 / cbSceneParam._m0[86u].y;
    vec4 _2807 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2809 = _2807.x;
    float _2810 = _2807.y;
    float _2811 = _2807.z;
    float _2812 = _2807.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _2868 = _2867 / _834;
        float _2879 = _2868 * _884;
        float _2880 = _885 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _886;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3080;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3080 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3024 = 1.0 / cbSceneParam._m0[80u].x;
            float _3025 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3026 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            _3080 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3035 - _3036) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))))) * _3024)) - ((exp2(_2903 * _3035) - exp2(_2903 * _3036)) * _3024))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3082 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, 1.0), 0.0);
        float _3091 = exp2((_3080 * (-1.44269502162933349609375)) * (1.0 - _3082.w));
        float _3092 = log2(_3091);
        float _3108 = log2(_2812);
        _2905 = (exp2(_3108 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].x)) * _3082.x) / cbSceneParam._m0[78u].x)) + _2809;
        _2907 = (exp2(_3108 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].y)) * _3082.y) / cbSceneParam._m0[78u].y)) + _2810;
        _2909 = (exp2(_3108 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].z)) * _3082.z) / cbSceneParam._m0[78u].z)) + _2811;
        _2911 = _3091 * _2812;
    }
    else
    {
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
        _2911 = _2812;
    }
    bool _3118;
    vec4 _2921;
    vec4 _2943;
    float _2945;
    float _2949;
    float _2950;
    float _2951;
    float _2952;
    bool _2962;
    for (;;)
    {
        _2921 = cbMatDynParam._m0[0u];
        float _2923 = roundEven(_2921.y);
        bool _2924 = _2923 == 3.0;
        float _2925 = log2(_2911);
        float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * _2781;
        float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * _2782;
        float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * _2783;
        float _2941 = _900 + (-0.5);
        _2943 = cbMtdParam._m0[1u];
        _2945 = _2943.y * _2941;
        float _2948 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2949 = _2948 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
        _2950 = _2948 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
        _2951 = _2948 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
        _2952 = _2941 * 0.999000012874603271484375;
        _2962 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2962)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2952) < 0.5)
            {
                _3118 = true;
                break;
            }
        }
        uint _3059 = _949 + uint(_2921.w);
        if ((cbInstanceData._m0[_3059].w < 1.0) && ((cbInstanceData._m0[_3059].w + _2952) < 0.5))
        {
            _3118 = true;
            break;
        }
        if ((_2945 + 1.0) < _2943.x)
        {
            _3118 = true;
            break;
        }
        _3118 = false;
        break;
    }
    float _3323;
    if (_3118)
    {
        discard_state = true;
        _3323 = 0.0;
    }
    else
    {
        _3323 = cbInstanceData._m0[_2784].w;
    }
    SV_Target.x = _2949;
    SV_Target.y = _2950;
    SV_Target.z = _2951;
    SV_Target.w = _3323;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2784].w;
    discard_exit();
}


