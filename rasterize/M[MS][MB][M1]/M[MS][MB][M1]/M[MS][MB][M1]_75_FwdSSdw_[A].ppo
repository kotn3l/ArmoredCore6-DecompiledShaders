#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3702 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _429 = _427.x;
    float _430 = _427.y;
    float _431 = _427.z;
    float _440 = ((_410.z - _431) * _388) + _431;
    float _443 = ((((_410.x - _429) * _388) + _429) * 2.0) + (-1.0);
    float _445 = ((((_410.y - _430) * _388) + _430) * 2.0) + (-1.0);
    float _446 = dot(vec2(_443, _445), vec2(_443, _445));
    float _3713 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _451 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _480 = _478.x;
    float _481 = 1.0 - _480;
    float _509 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_480 - _481) * cbMtdParam._m0[24u].w) + _481) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3724 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _518 = ((((cbMtdParam._m0[10u].x - _395) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _510) + _395;
    float _519 = ((((cbMtdParam._m0[10u].y - _396) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _510) + _396;
    float _520 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _397)) * _510) + _397;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _548 = _546.x;
    float _566 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _548) * _388) + _548;
    float _570 = ((_532.x - _566) * cbMtdParam._m0[19u].z) + _566;
    float _572 = _570 - (_570 * _510);
    float _576 = ((cbMtdParam._m0[23u].y - _440) * _510) + _440;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _597 = _595.x;
    float _598 = _595.y;
    float _602 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_239, _240, _241, 0.0));
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _270) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _271) + cbTextureTilingScale._m0[18u].w));
    float _619 = _617.x;
    float _624 = fract(_617.w + cbPerFrame._m0[22u].x);
    float _626 = (1.0 - _624) * _619;
    float _631 = ((_624 + (-1.0)) + _619) * 9.0;
    float _633 = ((_619 + (-1.0)) + _624) * 9.0;
    float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _635 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _649 = (_626 * ((_617.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _634 : (isnan(_634) ? 3.0 : min(_634, 3.0))) * 3.1415927410125732421875);
    float _651 = (_626 * ((_617.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _635 : (isnan(_635) ? 3.0 : min(_635, 3.0))) * 3.1415927410125732421875);
    float _655 = inversesqrt(dot(vec3(_649, _651, 1.0), vec3(_649, _651, 1.0)));
    float _671 = (((((0.5 - _597) + ((_649 * 0.5) * _655)) * _602) + _597) * 2.0) + (-1.0);
    float _672 = (((((0.5 - _598) + ((_655 * 0.5) * _651)) * _602) + _598) * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3755 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _689 = ((((cbMtdParam._m0[22u].z * _443) - _443) + _671) * _510) + _443;
    float _690 = ((((cbMtdParam._m0[22u].z * _445) - _445) + _672) * _510) + _445;
    float _691 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) - _451)) + _451;
    float _693 = cbMtdParam._m0[22u].x + _464.w;
    float _696 = fma(_691, _239, fma(_690, _245 * TANGENT.x, (_231 * _223) * _689));
    float _699 = fma(_691, _240, fma(_690, _245 * TANGENT.y, (_231 * _224) * _689));
    float _702 = fma(_691, _241, fma(_690, _245 * TANGENT.z, (_231 * _225) * _689));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3766 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _710 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3788 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3799 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3810 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3821 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _715 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    vec4 _793 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _795 = _793.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _966 = sqrt(((_779 * _779) + (_780 * _780)) + (_781 * _781));
        float _972 = (cbMatDynParam._m0[5u].x * _966) + cbMatDynParam._m0[5u].y;
        float _3832 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _977 = (cbMatDynParam._m0[5u].z * _966) + cbMatDynParam._m0[5u].w;
        float _3843 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) - _973)) + _973) < ((_795 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _828 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _831 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _844 = _251 + 9u;
    uint _845 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _857 = 1.0 - _715;
    float _858 = _854 * _857;
    float _859 = _855 * _857;
    float _860 = _856 * _857;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _715;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _715;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _715;
    float _868 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _884 = ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * TEXCOORD_5.w) * _880.x;
    float _885 = dot(vec3(_707, _708, _709), vec3(_786, _787, _788));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _707) - _786;
    float _893 = (_888 * _708) - _787;
    float _894 = (_888 * _709) - _788;
    float _898 = abs(dot(vec3(_786, _787, _788), vec3(_707, _708, _709)));
    float _3887 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_710);
    float _912 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _918 = (1.0 - _912) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _919 = _912 * _900;
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _1013 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _1017 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1041 = _947 + _707;
        float _1042 = _951 + _708;
        float _1043 = _955 + _709;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1009;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1013;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1017;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_707, _708, _709), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3935 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_707, _708, _709), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3968 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_707, _708, _709), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4001 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1330 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1334 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1357 = _947 + _707;
        float _1358 = _951 + _708;
        float _1359 = _955 + _709;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_707, _708, _709), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4064 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_707, _708, _709), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4097 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_707, _708, _709), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4130 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = _1284;
        _1606 = _1284;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1297)) + _1297;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1298)) + _1298;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _892 * 0.5;
    float _1664 = _893 * 0.5;
    float _1665 = _894 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1795 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1798 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1826 = frontier_phi_17_15_ladder;
        }
        float _2050;
        if (_1795 > 0.0)
        {
            _2050 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2050 = frontier_phi_26_22_ladder;
        }
        float _2307;
        if (_1798 > 0.0)
        {
            _2307 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2307 = frontier_phi_38_33_ladder;
        }
        float _2309 = isnan(_2050) ? _1826 : (isnan(_1826) ? _2050 : min(_1826, _2050));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1792) + _1781;
        float _2315 = (_2310 * _1795) + _1785;
        float _2316 = (_2310 * _1798) + _1789;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_16_38_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_16_38_ladder_2;
        _1816 = frontier_phi_16_38_ladder_1;
        _1818 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1732);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1891 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1894 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2055;
        if (_1888 > 0.0)
        {
            _2055 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2055 = frontier_phi_28_24_ladder;
        }
        float _2334;
        if (_1891 > 0.0)
        {
            _2334 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2334 = frontier_phi_40_35_ladder;
        }
        float _2547;
        if (_1894 > 0.0)
        {
            _2547 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2547 = frontier_phi_49_46_ladder;
        }
        float _2549 = isnan(_2334) ? _2055 : (isnan(_2055) ? _2334 : min(_2055, _2334));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1888) + _1877;
        float _2555 = (_2550 * _1891) + _1881;
        float _2556 = (_2550 * _1894) + _1885;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_25_49_ladder = _2755.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2755.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2755.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_25_49_ladder_2;
        _1915 = frontier_phi_25_49_ladder_1;
        _1917 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1823);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_918 * _868) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1932 = (((_918 * _870) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1934 = (((_918 * _871) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    vec4 _1951 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_806, _807));
    float _1953 = _1951.w;
    float _1965 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1953);
    float _1966 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1953);
    float _1967 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1953);
    uvec4 _1971 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1973 = _1971.x * 14u;
    uint _1974 = _1973 + 13u;
    float _1981 = _884 + (-1.0);
    float _1986 = (cbLight._m0[_1974].x * _1981) + 1.0;
    float _1987 = (cbLight._m0[_1974].y * _1981) + 1.0;
    float _1988 = (cbLight._m0[_1974].z * _1981) + 1.0;
    float _1989 = (cbLight._m0[_1974].w * _1981) + 1.0;
    uint _1990 = _1973 + 5u;
    float _1996 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2000 = _1973 + 4u;
    float _2009 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2013 = _1973 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_707, _708, _709));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_707, _708, _709));
    float _4266 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4277 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1990].x * _1996) * _2034) + (((cbLight._m0[_2000].x * _1965) * _2009) * _2032);
    float _2042 = ((_1996 * cbLight._m0[_1990].y) * _2034) + (((cbLight._m0[_2000].y * _1966) * _2009) * _2032);
    float _2043 = ((_1996 * cbLight._m0[_1990].z) * _2034) + (((cbLight._m0[_2000].z * _1967) * _2009) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1973 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2049)
    {
        _2060 = _2041;
        _2062 = _2042;
        _2064 = _2043;
    }
    else
    {
        uint _2068 = _1973 + 6u;
        float _2084 = (dot(vec3(cbLight._m0[_1973 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _4288 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2087 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2060 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _2041;
        _2062 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _2042;
        _2064 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _2043;
    }
    bool _2067 = _2047.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2067)
    {
        _2105 = _2060;
        _2107 = _2062;
        _2109 = _2064;
    }
    else
    {
        uint _2278 = _1973 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1973 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4304 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2297 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2105 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2060;
        _2107 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2062;
        _2109 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2064;
    }
    uint _2112 = _1973 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _710) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1973].x + _786;
    float _2128 = cbLight._m0[_1973].y + _787;
    float _2129 = cbLight._m0[_1973].z + _788;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1973].xyz));
    float _4320 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2141 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2142 = dot(vec3(_707, _708, _709), vec3(_2134, _2135, _2136));
    float _4342 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2134, _2135, _2136));
    float _4353 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
    float _2163 = 0.959999978542327880859375 - _865;
    float _2165 = 0.959999978542327880859375 - _866;
    float _2166 = 0.959999978542327880859375 - _867;
    float _2173 = 1.0 - _2126;
    float _2184 = (0.5 / (((_2141 * ((_2140 * _2173) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2173) + _2126) * _2140))) * _2140;
    float _4364 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2200 = _1973 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _710) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2013].x + _786;
    float _2214 = cbLight._m0[_2013].y + _787;
    float _2215 = cbLight._m0[_2013].z + _788;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2013].xyz));
    float _4375 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2227 = dot(vec3(_707, _708, _709), vec3(_2220, _2221, _2222));
    float _4386 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2220, _2221, _2222));
    float _4397 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
    float _2253 = 1.0 - _2212;
    float _2263 = (0.5 / (((_2141 * ((_2226 * _2253) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2253) + _2212) * _2226))) * _2226;
    float _4408 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2275 = (((((_2246 * _2163) + _868) * cbLight._m0[_2200].x) * _2265) * _1996) + ((((cbLight._m0[_2112].x * _1965) * ((_2162 * _2163) + _868)) * _2186) * _2009);
    float _2276 = (((((_2246 * _2165) + _870) * cbLight._m0[_2200].y) * _2265) * _1996) + ((((cbLight._m0[_2112].y * _1966) * ((_2162 * _2165) + _870)) * _2186) * _2009);
    float _2277 = (((((_2246 * _2166) + _871) * cbLight._m0[_2200].z) * _2265) * _1996) + ((((cbLight._m0[_2112].z * _1967) * ((_2162 * _2166) + _871)) * _2186) * _2009);
    float _2339;
    float _2341;
    float _2343;
    if (_2049)
    {
        _2339 = _2275;
        _2341 = _2276;
        _2343 = _2277;
    }
    else
    {
        uint _2345 = _1973 + 2u;
        uint _2349 = _1973 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _710) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _786;
        float _2366 = cbLight._m0[_2345].y + _787;
        float _2367 = cbLight._m0[_2345].z + _788;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2345].xyz));
        float _4419 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2379 = dot(vec3(_707, _708, _709), vec3(_2372, _2373, _2374));
        float _4430 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4441 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2141 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2405) + _2364) * _2378))) * _2378;
        float _4452 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2339 = (((((_2398 * _2163) + _868) * cbLight._m0[_2349].x) * _2417) * _2418) + _2275;
        _2341 = (((((_2398 * _2165) + _870) * cbLight._m0[_2349].y) * _2417) * _2418) + _2276;
        _2343 = (((((_2398 * _2166) + _871) * cbLight._m0[_2349].z) * _2417) * _2418) + _2277;
    }
    float _2453;
    float _2455;
    float _2457;
    if (_2067)
    {
        _2453 = _2339;
        _2455 = _2341;
        _2457 = _2343;
    }
    else
    {
        uint _2464 = _1973 + 3u;
        uint _2468 = _1973 + 11u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _710) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _786;
        float _2485 = cbLight._m0[_2464].y + _787;
        float _2486 = cbLight._m0[_2464].z + _788;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2464].xyz));
        float _4468 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2498 = dot(vec3(_707, _708, _709), vec3(_2491, _2492, _2493));
        float _4479 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4490 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2524 = 1.0 - _2483;
        float _2534 = (0.5 / (((_2141 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2524) + _2483) * _2497))) * _2497;
        float _4501 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2453 = (((((_2517 * _2163) + _868) * cbLight._m0[_2468].x) * _2536) * _2537) + _2339;
        _2455 = (((((_2517 * _2165) + _870) * cbLight._m0[_2468].y) * _2536) * _2537) + _2341;
        _2457 = (((((_2517 * _2166) + _871) * cbLight._m0[_2468].z) * _2536) * _2537) + _2343;
    }
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_1971.y == 0u)
    {
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2612;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2612;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2612;
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.x;
        uint _2639 = uint((float(_2627.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2628))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2628)));
        float _2649 = (log2(_2615 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2650 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        uint _2653 = uint(isnan(14.0) ? _2650 : (isnan(_2650) ? 14.0 : min(_2650, 14.0)));
        uvec4 _2658 = texelFetch(g_lightClusterGridBuffer, int(((_2653 << 2u) + (_2639 << 6u)) >> 2u));
        uint _2659 = _2658.x;
        uint _2660 = _2627.z;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((((1u << ((_2660 >> 4u) & 15u)) + 4294967295u) & _2659) == 0u) || ((_2660 & 240u) == 0u))
        {
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
        }
        else
        {
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            uint _2919 = 0u;
            uint _2928;
            bool _2929;
            for (;;)
            {
                _2928 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                _2929 = _2928 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2929)
                {
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2918;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2916;
                    frontier_phi_66_pred_4 = _2915;
                    frontier_phi_66_pred_5 = _2914;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2928;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2919 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2613;
                        float _3125 = _3084.y - _2614;
                        float _3126 = _3084.z - _2615;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_825, _828, _831), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4527 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2613;
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _900;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_825, _828, _831), vec3(_3166, _3167, _3168));
                        float _4543 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3201 = dot(vec3(_825, _828, _831), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4554 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4565 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4576 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3235 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2988 = (_3155 * _3103.x) + _3061;
                        _2989 = (_3155 * _3103.y) + _3062;
                        _2990 = (_3155 * _3103.z) + _3063;
                        _2985 = (_3235 * _3120.x) + _3058;
                        _2986 = (_3235 * _3120.y) + _3059;
                        _2987 = (_3235 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2761 = frontier_phi_66_pred;
                _2771 = frontier_phi_66_pred_1;
                _2769 = frontier_phi_66_pred_2;
                _2767 = frontier_phi_66_pred_3;
                _2765 = frontier_phi_66_pred_4;
                _2763 = frontier_phi_66_pred_5;
                uint _2920 = _2919 + 1u;
                if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2913 = _2761;
                    _2914 = _2763;
                    _2915 = _2765;
                    _2916 = _2767;
                    _2917 = _2769;
                    _2918 = _2771;
                    _2919 = _2920;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
        }
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.z;
        uint _2777 = (_2775 >> 8u) & 15u;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((4294967295u << _2777) & _2659) == 0u)
        {
            _2881 = _2760;
            _2883 = _2762;
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
        }
        else
        {
            float _2906 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
            float _2907 = _2906 * _2613;
            float _2908 = _2906 * _2614;
            float _2909 = _2906 * _2615;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2777 < ((_2775 >> 12u) & 15u))
            {
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _3041 = _2760;
                float _3042 = _2762;
                float _3043 = _2764;
                float _3044 = _2766;
                float _3045 = _2768;
                float _3046 = _2770;
                uint _3047 = _2777;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3057)
                    {
                        frontier_phi_77_pred = _3046;
                        frontier_phi_77_pred_1 = _3045;
                        frontier_phi_77_pred_2 = _3044;
                        frontier_phi_77_pred_3 = _3043;
                        frontier_phi_77_pred_4 = _3042;
                        frontier_phi_77_pred_5 = _3041;
                    }
                    else
                    {
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3262 = _3041;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        float _3266 = _3045;
                        float _3267 = _3046;
                        uint _3268 = _3056;
                        uint _3269;
                        vec4 _3294;
                        float _3295;
                        vec4 _3310;
                        vec3 _3322;
                        vec4 _3337;
                        vec4 _3353;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3279 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3268));
                            _3269 = (_3268 + 4294967295u) & _3268;
                            uint _3281 = _3279 * 40u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3295 = _3294.w;
                            uint _3297 = (_3279 * 40u) + 4u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3279 * 40u) + 8u;
                            _3322 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x));
                            uint _3324 = (_3279 * 40u) + 16u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3340 = (_3279 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3279 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3279 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_2615, _3387.z, fma(_2614, _3387.y, _3387.x * _2613)) + _3387.w;
                            _3400 = !((fma(_2615, _3368.z, fma(_2614, _3368.y, _3368.x * _2613)) + _3368.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3294.x - _2613;
                                float _3428 = _3294.y - _2614;
                                float _3429 = _3294.z - _2615;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3295 * _3295));
                                float _4587 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3445 = sqrt(_3430) * _3310.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_825, _828, _831))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_2615, _3337.z, fma(_2614, _3337.y, _3337.x * _2613)) + _3337.w) / _3399;
                                float _3459 = (fma(_2615, _3353.z, fma(_2614, _3353.y, _3353.x * _2613)) + _3353.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4603 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _900;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2907;
                                float _3489 = _3435 - _2908;
                                float _3490 = _3436 - _2909;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2907, (-0.0) - _2908, (-0.0) - _2909));
                                float _4614 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3502 = dot(vec3(_825, _828, _831), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4625 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_825, _828, _831), vec3(_3434, _3435, _3436))) + _3511;
                                float _4636 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4647 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3465 * _3310.y;
                                frontier_phi_83_pred_1 = _3465 * _3310.x;
                                frontier_phi_83_pred_2 = _3539 * _3322.z;
                                frontier_phi_83_pred_3 = _3539 * _3322.y;
                                frontier_phi_83_pred_4 = _3539 * _3322.x;
                                frontier_phi_83_pred_5 = _3465 * _3310.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_83_pred;
                            _3546 = frontier_phi_83_pred_1;
                            _3545 = frontier_phi_83_pred_2;
                            _3544 = frontier_phi_83_pred_3;
                            _3543 = frontier_phi_83_pred_4;
                            _3548 = frontier_phi_83_pred_5;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            _3254 = _3548 + _3267;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            if (_3269 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3269;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3254;
                        frontier_phi_77_pred_1 = _3253;
                        frontier_phi_77_pred_2 = _3252;
                        frontier_phi_77_pred_3 = _3251;
                        frontier_phi_77_pred_4 = _3250;
                        frontier_phi_77_pred_5 = _3249;
                    }
                    _2892 = frontier_phi_77_pred;
                    _2890 = frontier_phi_77_pred_1;
                    _2888 = frontier_phi_77_pred_2;
                    _2886 = frontier_phi_77_pred_3;
                    _2884 = frontier_phi_77_pred_4;
                    _2882 = frontier_phi_77_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2882;
                        _3042 = _2884;
                        _3043 = _2886;
                        _3044 = _2888;
                        _3045 = _2890;
                        _3046 = _2892;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2886;
                frontier_phi_58_59_ladder_1 = _2892;
                frontier_phi_58_59_ladder_2 = _2890;
                frontier_phi_58_59_ladder_3 = _2888;
                frontier_phi_58_59_ladder_4 = _2884;
                frontier_phi_58_59_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_58_59_ladder = _2764;
                frontier_phi_58_59_ladder_1 = _2770;
                frontier_phi_58_59_ladder_2 = _2768;
                frontier_phi_58_59_ladder_3 = _2766;
                frontier_phi_58_59_ladder_4 = _2762;
                frontier_phi_58_59_ladder_5 = _2760;
            }
            _2881 = frontier_phi_58_59_ladder_5;
            _2883 = frontier_phi_58_59_ladder_4;
            _2885 = frontier_phi_58_59_ladder;
            _2887 = frontier_phi_58_59_ladder_3;
            _2889 = frontier_phi_58_59_ladder_2;
            _2891 = frontier_phi_58_59_ladder_1;
        }
        float _2896 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2672 = (_2896 * _2887) + _2105;
        _2674 = (_2896 * _2889) + _2107;
        _2676 = (_2896 * _2891) + _2109;
        _2678 = ((_2881 * _868) * _2896) + _2453;
        _2680 = ((_2883 * _870) * _2896) + _2455;
        _2682 = ((_2885 * _871) * _2896) + _2457;
    }
    else
    {
        _2672 = _2105;
        _2674 = _2107;
        _2676 = _2109;
        _2678 = _2453;
        _2680 = _2455;
        _2682 = _2457;
    }
    float _4663 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4674 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4685 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2699 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2672 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _884))) + ((_2678 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2700 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2674 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _884))) + ((_2680 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2676 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _884))) + ((_2682 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2702 = _251 + 6u;
    float _2710 = _806 / cbSceneParam._m0[86u].x;
    float _2711 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2725 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2727 = _2725.x;
    float _2728 = _2725.y;
    float _2729 = _2725.z;
    float _2730 = _2725.w;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2785 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2786 = _2785 / _729;
        float _2797 = _2786 * _779;
        float _2798 = _780 * _2786;
        float _2799 = (-0.0) - _2798;
        float _2801 = _2786 * _781;
        float _2803 = (cbSceneParam._m0[77u].w * _2799) / _2785;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2798;
        float _2811 = sqrt(((_2797 * _2797) + (_2798 * _2798)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2785)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2821 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2799 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2821 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2942 = 1.0 / cbSceneParam._m0[80u].x;
            float _2943 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2944 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            _2998 = ((abs(_2811 / _2799) * cbSceneParam._m0[80u].y) * ((((_2953 - _2954) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))))) * _2942)) - ((exp2(_2821 * _2953) - exp2(_2821 * _2954)) * _2942))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2730);
        _2823 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2727;
        _2825 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2728;
        _2827 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2729;
        _2829 = _3009 * _2730;
    }
    else
    {
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
        _2829 = _2730;
    }
    bool _3036;
    vec4 _2839;
    vec4 _2861;
    float _2863;
    float _2867;
    float _2868;
    float _2869;
    float _2870;
    bool _2880;
    for (;;)
    {
        _2839 = cbMatDynParam._m0[0u];
        float _2841 = roundEven(_2839.y);
        bool _2842 = _2841 == 3.0;
        float _2843 = log2(_2829);
        float _2850 = exp2(_2843 * cbSceneParam._m0[78u].x) * _2699;
        float _2851 = exp2(_2843 * cbSceneParam._m0[78u].y) * _2700;
        float _2852 = exp2(_2843 * cbSceneParam._m0[78u].z) * _2701;
        float _2859 = _795 + (-0.5);
        _2861 = cbMtdParam._m0[1u];
        _2863 = _2861.y * _2859;
        float _2866 = (_2841 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2867 = _2866 * (_2842 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2823)));
        _2868 = _2866 * (_2842 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
        _2869 = _2866 * (_2842 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
        _2870 = _2859 * 0.999000012874603271484375;
        _2880 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2880)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2870) < 0.5)
            {
                _3036 = true;
                break;
            }
        }
        uint _2977 = _844 + uint(_2839.w);
        if ((cbInstanceData._m0[_2977].w < 1.0) && ((cbInstanceData._m0[_2977].w + _2870) < 0.5))
        {
            _3036 = true;
            break;
        }
        if ((_2863 + 1.0) < _2861.x)
        {
            _3036 = true;
            break;
        }
        _3036 = false;
        break;
    }
    float _3240;
    if (_3036)
    {
        discard_state = true;
        _3240 = 0.0;
    }
    else
    {
        _3240 = cbInstanceData._m0[_2702].w;
    }
    SV_Target.x = _2867;
    SV_Target.y = _2868;
    SV_Target.z = _2869;
    SV_Target.w = _3240;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2702].w;
    discard_exit();
}


