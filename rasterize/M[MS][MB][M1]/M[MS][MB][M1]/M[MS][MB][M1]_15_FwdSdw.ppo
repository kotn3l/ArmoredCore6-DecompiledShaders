#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1075;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3687 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3698 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3709 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3720 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _439 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_422 - _423) * cbMtdParam._m0[24u].z) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3731 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _447 = (_440 * (cbMtdParam._m0[17u].x - _336)) + _336;
    float _448 = (_440 * (cbMtdParam._m0[17u].y - _337)) + _337;
    float _449 = (_440 * (cbMtdParam._m0[17u].z - _338)) + _338;
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _464 = _462.x;
    float _466 = _464 - (_464 * _440);
    float _471 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3742 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = (_440 * (_484.z - _471)) + _471;
    float _513 = (((_491 - _402) + (cbMtdParam._m0[21u].x * _402)) * _440) + _402;
    float _514 = (((_492 - _403) + (cbMtdParam._m0[21u].x * _403)) * _440) + _403;
    float _515 = (_440 * (sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) - _397)) + _397;
    float _517 = cbMtdParam._m0[22u].x + _382.w;
    float _520 = fma(_515, _222 * NORMAL.x, fma(_514, _229 * TANGENT.x, (_215 * _207) * _513));
    float _523 = fma(_515, _222 * NORMAL.y, fma(_514, _229 * TANGENT.y, (_215 * _208) * _513));
    float _526 = fma(_515, _222 * NORMAL.z, fma(_514, _229 * TANGENT.z, (_215 * _209) * _513));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3753 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _534 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3775 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3786 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3797 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3808 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _539 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _641 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _644 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _647 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _661 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_661].z;
    float _3819 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _673 = 1.0 - _539;
    float _674 = _670 * _673;
    float _675 = _671 * _673;
    float _676 = _672 * _673;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _539;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _539;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _539;
    float _684 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _700 = ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * TEXCOORD_5.w) * _696.x;
    float _701 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _704 = _701 * 2.0;
    float _708 = (_704 * _531) - _611;
    float _709 = (_704 * _532) - _612;
    float _710 = (_704 * _533) - _613;
    float _714 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3852 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _716 = sqrt(_534);
    float _729 = exp2((_716 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_716 * 3.0));
    float _735 = (1.0 - _729) * ((_716 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _736 = _729 * _716;
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1074;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _799 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _803 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _807 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _832 = _764 + _531;
        float _833 = _768 + _532;
        float _834 = _772 + _533;
        float _844 = fma(_834, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832)) - _799;
        float _845 = fma(_834, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832)) - _803;
        float _846 = fma(_834, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832)) - _807;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_799 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_803 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[34u].z) + ((((((_807 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_868.x + (-0.5));
        float _904 = _902 * (_868.y + (-0.5));
        float _905 = _902 * (_868.z + (-0.5));
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_875.x + (-0.5));
        float _914 = _912 * (_875.y + (-0.5));
        float _915 = _912 * (_875.z + (-0.5));
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_882.x + (-0.5));
        float _924 = _922 * (_882.y + (-0.5));
        float _925 = _922 * (_882.z + (-0.5));
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _956 = (dot(vec3(_531, _532, _533), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _966 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3900 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_968 + 1.0))) + _973) * _936;
        float _983 = _904 * 0.5;
        float _984 = _914 * 0.5;
        float _985 = _924 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_531, _532, _533), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3933 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1010 + 1.0))) + _1015) * _937;
        float _1025 = _905 * 0.5;
        float _1026 = _915 * 0.5;
        float _1027 = _925 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_531, _532, _533), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3966 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1052 + 1.0))) + _1057) * _938;
        _1074 = _905;
        _1076 = _904;
        _1077 = _903;
        _1078 = _915;
        _1079 = _914;
        _1080 = _913;
        _1081 = _925;
        _1082 = _924;
        _1083 = _923;
        _1084 = _938;
        _1085 = _937;
        _1086 = _936;
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _1075;
        _1076 = _1075;
        _1077 = _1075;
        _1078 = _1075;
        _1079 = _1075;
        _1080 = _1075;
        _1081 = _1075;
        _1082 = _1075;
        _1083 = _1075;
        _1084 = _1075;
        _1085 = _1075;
        _1086 = _1075;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1118 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1122 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1145 = _764 + _531;
        float _1146 = _768 + _532;
        float _1147 = _772 + _533;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_531, _532, _533), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4029 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_531, _532, _533), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4062 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_531, _532, _533), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4095 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1075;
        _1384 = _1075;
        _1385 = _1075;
        _1386 = _1075;
        _1387 = _1075;
        _1388 = _1075;
        _1389 = _1075;
        _1390 = _1075;
        _1391 = _1075;
        _1392 = _1075;
        _1393 = _1075;
        _1394 = _1075;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1088)) + _1088;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1089)) + _1089;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _708 * 0.5;
    float _1452 = _709 * 0.5;
    float _1453 = _710 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1074, _1078, _1081, _1084));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_710, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708));
        float _1582 = fma(_710, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708));
        float _1585 = fma(_710, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1613 = frontier_phi_14_12_ladder;
        }
        float _1786;
        if (_1582 > 0.0)
        {
            _1786 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1786 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1585 > 0.0)
        {
            _2082 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1786) ? _1613 : (isnan(_1613) ? _1786 : min(_1613, _1786));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1579) + _1568;
        float _2090 = (_2085 * _1582) + _1572;
        float _2091 = (_2085 * _1585) + _1576;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_13_35_ladder_2;
        _1603 = frontier_phi_13_35_ladder_1;
        _1605 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_708, _709, _710), _1520);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_710, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708));
        float _1679 = fma(_710, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708));
        float _1682 = fma(_710, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708));
        float _1791;
        if (_1676 > 0.0)
        {
            _1791 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1791 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1679 > 0.0)
        {
            _2109 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2447;
        if (_1682 > 0.0)
        {
            _2447 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2447 = frontier_phi_47_44_ladder;
        }
        float _2449 = isnan(_2109) ? _1791 : (isnan(_1791) ? _2109 : min(_1791, _2109));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1676) + _1665;
        float _2455 = (_2450 * _1679) + _1669;
        float _2456 = (_2450 * _1682) + _1673;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2457;
        float _2460 = _2457 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2456 > _2460) || ((_2456 < _2458) || ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 < _2458) || (_2454 > _2460))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2456, cbModelParam._m0[17u].z, fma(_2455, cbModelParam._m0[17u].y, _2454 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2456, cbModelParam._m0[18u].z, fma(_2455, cbModelParam._m0[18u].y, _2454 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2456, cbModelParam._m0[19u].z, fma(_2455, cbModelParam._m0[19u].y, _2454 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_22_47_ladder = _2578.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2578.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2578.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_22_47_ladder_2;
        _1703 = frontier_phi_22_47_ladder_1;
        _1705 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_708, _709, _710), _1610);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1718 = (((_735 * _684) + _736) * _700) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_735 * _686) + _736) * _700) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1722 = (((_735 * _687) + _736) * _700) * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1778 = _1765 / _1777;
    float _1779 = _1769 / _1777;
    float _1780 = _1773 / _1777;
    float _1927;
    float _1928;
    float _1929;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1807 = ((uint(_1780 > cbSceneParam._m0[59u].y) + uint(_1780 > cbSceneParam._m0[59u].x)) + uint(_1780 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1808 = _1807 + 43u;
        uint _1816 = _1807 + 44u;
        uint _1824 = _1807 + 45u;
        uint _1832 = _1807 + 46u;
        float _1843 = fma(_1777, cbSceneParam._m0[_1808].w, fma(_1773, cbSceneParam._m0[_1808].z, fma(_1769, cbSceneParam._m0[_1808].y, _1765 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1777, cbSceneParam._m0[_1816].w, fma(_1773, cbSceneParam._m0[_1816].z, fma(_1769, cbSceneParam._m0[_1816].y, _1765 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1777, cbSceneParam._m0[_1832].w, fma(_1773, cbSceneParam._m0[_1832].z, fma(_1769, cbSceneParam._m0[_1832].y, _1765 * cbSceneParam._m0[_1832].x)));
        float _1860 = cbSceneParam._m0[33u].z * _1855;
        float _1862 = cbSceneParam._m0[33u].w * _1855;
        float _1865 = fma(_1777, cbSceneParam._m0[_1824].w, fma(_1773, cbSceneParam._m0[_1824].z, fma(_1769, cbSceneParam._m0[_1824].y, _1765 * cbSceneParam._m0[_1824].x))) / _1855;
        float _1913 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
        float _4221 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1920 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 + _1843) / _1855, (_1862 + _1847) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1843) / _1855, (_1847 - _1860) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1860) / _1855, (_1847 - _1862) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1862) / _1855, (_1860 + _1847) / _1855), _1865), 0.0)).x), vec4(0.25)));
        _1927 = 1.0 - (_1920 * cbSceneParam._m0[34u].x);
        _1928 = 1.0 - (_1920 * cbSceneParam._m0[34u].y);
        _1929 = 1.0 - (_1920 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1927 = 1.0;
        _1928 = 1.0;
        _1929 = 1.0;
    }
    float _1993;
    float _1995;
    float _1997;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1981 = fma(_1777, cbSceneParam._m0[63u].w, fma(_1773, cbSceneParam._m0[63u].z, fma(_1769, cbSceneParam._m0[63u].y, _1765 * cbSceneParam._m0[63u].x)));
        float _1982 = fma(_1777, cbSceneParam._m0[60u].w, fma(_1773, cbSceneParam._m0[60u].z, fma(_1769, cbSceneParam._m0[60u].y, _1765 * cbSceneParam._m0[60u].x))) / _1981;
        float _1983 = fma(_1777, cbSceneParam._m0[61u].w, fma(_1773, cbSceneParam._m0[61u].z, fma(_1769, cbSceneParam._m0[61u].y, _1765 * cbSceneParam._m0[61u].x))) / _1981;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1982 >= cbSceneParam._m0[64u].x) && (_1983 >= cbSceneParam._m0[64u].y)) && (_1982 <= cbSceneParam._m0[64u].z)) && (_1983 <= cbSceneParam._m0[64u].w))
        {
            float _2122 = fma(_1777, cbSceneParam._m0[62u].w, fma(_1773, cbSceneParam._m0[62u].z, fma(_1769, cbSceneParam._m0[62u].y, _1765 * cbSceneParam._m0[62u].x))) / _1981;
            float _2126 = isnan(cbSceneParam._m0[41u].w) ? _2122 : (isnan(_2122) ? cbSceneParam._m0[41u].w : max(_2122, cbSceneParam._m0[41u].w));
            float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
            float _4237 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
            float _2176 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1982, cbSceneParam._m0[33u].w + _1983), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1982, _1983 - cbSceneParam._m0[33u].z), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].z, _1983 - cbSceneParam._m0[33u].w), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1983), _2126), 0.0)).x), vec4(0.25)));
            float _2180 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
            float _2181 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
            float _2182 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2182) ? _1929 : (isnan(_1929) ? _2182 : min(_1929, _2182));
            frontier_phi_34_33_ladder_1 = isnan(_2181) ? _1928 : (isnan(_1928) ? _2181 : min(_1928, _2181));
            frontier_phi_34_33_ladder_2 = isnan(_2180) ? _1927 : (isnan(_1927) ? _2180 : min(_1927, _2180));
        }
        else
        {
            frontier_phi_34_33_ladder = _1929;
            frontier_phi_34_33_ladder_1 = _1928;
            frontier_phi_34_33_ladder_2 = _1927;
        }
        _1993 = frontier_phi_34_33_ladder_2;
        _1995 = frontier_phi_34_33_ladder_1;
        _1997 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1993 = _1927;
        _1995 = _1928;
        _1997 = _1929;
    }
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2012 = _700 + (-1.0);
    float _2017 = (cbLight._m0[_2005].x * _2012) + 1.0;
    float _2018 = (cbLight._m0[_2005].y * _2012) + 1.0;
    float _2019 = (cbLight._m0[_2005].z * _2012) + 1.0;
    float _2020 = (cbLight._m0[_2005].w * _2012) + 1.0;
    uint _2021 = _2004 + 5u;
    float _2027 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2031 = _2004 + 4u;
    float _2041 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2045 = _2004 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_531, _532, _533));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_531, _532, _533));
    float _4273 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4284 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2021].x * _2027) * _2066) + (((cbLight._m0[_2031].x * _1993) * _2041) * _2064);
    float _2074 = ((_2027 * cbLight._m0[_2021].y) * _2066) + (((cbLight._m0[_2031].y * _1995) * _2041) * _2064);
    float _2075 = ((_2027 * cbLight._m0[_2021].z) * _2066) + (((cbLight._m0[_2031].z * _1997) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2004 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2081)
    {
        _2183 = _2073;
        _2185 = _2074;
        _2187 = _2075;
    }
    else
    {
        uint _2191 = _2004 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2004 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4295 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2210 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2073;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2074;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2075;
    }
    bool _2190 = _2079.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2190)
    {
        _2245 = _2183;
        _2247 = _2185;
        _2249 = _2187;
    }
    else
    {
        uint _2418 = _2004 + 7u;
        float _2434 = (dot(vec3(cbLight._m0[_2004 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2435 = _2434 * _2434;
        float _4311 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2436 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2437 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2245 = (((cbLight._m0[_2418].x * 0.3183098733425140380859375) * _2436) * _2437) + _2183;
        _2247 = (((cbLight._m0[_2418].y * 0.3183098733425140380859375) * _2436) * _2437) + _2185;
        _2249 = (((cbLight._m0[_2418].z * 0.3183098733425140380859375) * _2436) * _2437) + _2187;
    }
    uint _2252 = _2004 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _534) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2004].x + _611;
    float _2268 = cbLight._m0[_2004].y + _612;
    float _2269 = cbLight._m0[_2004].z + _613;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2004].xyz));
    float _4327 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _2281 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2282 = dot(vec3(_531, _532, _533), vec3(_2274, _2275, _2276));
    float _4349 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2274, _2275, _2276));
    float _4360 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
    float _2303 = 0.959999978542327880859375 - _681;
    float _2305 = 0.959999978542327880859375 - _682;
    float _2306 = 0.959999978542327880859375 - _683;
    float _2313 = 1.0 - _2266;
    float _2324 = (0.5 / (((_2281 * ((_2280 * _2313) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2313) + _2266) * _2280))) * _2280;
    float _4371 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2340 = _2004 + 9u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _534) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2045].x + _611;
    float _2354 = cbLight._m0[_2045].y + _612;
    float _2355 = cbLight._m0[_2045].z + _613;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2045].xyz));
    float _4382 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2367 = dot(vec3(_531, _532, _533), vec3(_2360, _2361, _2362));
    float _4393 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2360, _2361, _2362));
    float _4404 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2352 * _2352;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
    float _2393 = 1.0 - _2352;
    float _2403 = (0.5 / (((_2281 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2393) + _2352) * _2366))) * _2366;
    float _4415 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    float _2415 = (((((_2386 * _2303) + _684) * cbLight._m0[_2340].x) * _2405) * _2027) + ((((cbLight._m0[_2252].x * _1993) * ((_2302 * _2303) + _684)) * _2326) * _2041);
    float _2416 = (((((_2386 * _2305) + _686) * cbLight._m0[_2340].y) * _2405) * _2027) + ((((cbLight._m0[_2252].y * _1995) * ((_2302 * _2305) + _686)) * _2326) * _2041);
    float _2417 = (((((_2386 * _2306) + _687) * cbLight._m0[_2340].z) * _2405) * _2027) + ((((cbLight._m0[_2252].z * _1997) * ((_2302 * _2306) + _687)) * _2326) * _2041);
    float _2473;
    float _2475;
    float _2477;
    if (_2081)
    {
        _2473 = _2415;
        _2475 = _2416;
        _2477 = _2417;
    }
    else
    {
        uint _2479 = _2004 + 2u;
        uint _2483 = _2004 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _534) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _611;
        float _2500 = cbLight._m0[_2479].y + _612;
        float _2501 = cbLight._m0[_2479].z + _613;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2479].xyz));
        float _4426 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2513 = dot(vec3(_531, _532, _533), vec3(_2506, _2507, _2508));
        float _4437 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4448 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2281 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2539) + _2498) * _2512))) * _2512;
        float _4459 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2473 = (((((_2532 * _2303) + _684) * cbLight._m0[_2483].x) * _2551) * _2552) + _2415;
        _2475 = (((((_2532 * _2305) + _686) * cbLight._m0[_2483].y) * _2551) * _2552) + _2416;
        _2477 = (((((_2532 * _2306) + _687) * cbLight._m0[_2483].z) * _2551) * _2552) + _2417;
    }
    float _2583;
    float _2585;
    float _2587;
    if (_2190)
    {
        _2583 = _2473;
        _2585 = _2475;
        _2587 = _2477;
    }
    else
    {
        uint _2594 = _2004 + 3u;
        uint _2598 = _2004 + 11u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _534) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _611;
        float _2615 = cbLight._m0[_2594].y + _612;
        float _2616 = cbLight._m0[_2594].z + _613;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2594].xyz));
        float _4475 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2628 = dot(vec3(_531, _532, _533), vec3(_2621, _2622, _2623));
        float _4486 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4497 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
        float _2654 = 1.0 - _2613;
        float _2664 = (0.5 / (((_2281 * ((_2627 * _2654) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2654) + _2613) * _2627))) * _2627;
        float _4508 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2583 = (((((_2647 * _2303) + _684) * cbLight._m0[_2598].x) * _2666) * _2667) + _2473;
        _2585 = (((((_2647 * _2305) + _686) * cbLight._m0[_2598].y) * _2666) * _2667) + _2475;
        _2587 = (((((_2647 * _2306) + _687) * cbLight._m0[_2598].z) * _2666) * _2667) + _2477;
    }
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_2002.y == 0u)
    {
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.x;
        uint _2700 = uint((float(_2688.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2689))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2689)));
        float _2710 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2711 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        uint _2714 = uint(isnan(14.0) ? _2711 : (isnan(_2711) ? 14.0 : min(_2711, 14.0)));
        uvec4 _2719 = texelFetch(g_lightClusterGridBuffer, int(((_2714 << 2u) + (_2700 << 6u)) >> 2u));
        uint _2720 = _2719.x;
        uint _2721 = _2688.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2721 >> 4u) & 15u)) + 4294967295u) & _2720) == 0u) || ((_2721 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            uint _2951 = 0u;
            uint _2960;
            bool _2961;
            for (;;)
            {
                _2960 = texelFetch(g_lightClassification, int((((_2714 << 5u) + (_2700 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                _2961 = _2960 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2961)
                {
                    frontier_phi_66_pred = _2950;
                    frontier_phi_66_pred_1 = _2949;
                    frontier_phi_66_pred_2 = _2948;
                    frontier_phi_66_pred_3 = _2947;
                    frontier_phi_66_pred_4 = _2946;
                    frontier_phi_66_pred_5 = _2945;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2960;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2951 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _1778;
                        float _3136 = _3095.y - _1779;
                        float _3137 = _3095.z - _1780;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_641, _644, _647), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4534 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _1778;
                        float _3171 = (-0.0) - _1779;
                        float _3172 = (-0.0) - _1780;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3186 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _716;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3177 + _3142;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_641, _644, _647), vec3(_3177, _3178, _3179));
                        float _4550 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3211 = dot(vec3(_641, _644, _647), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4561 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3155 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3145) + _3220;
                        float _4572 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4583 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3218 * _3218) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _3004 = (_3166 * _3114.x) + _3072;
                        _3005 = (_3166 * _3114.y) + _3073;
                        _3006 = (_3166 * _3114.z) + _3074;
                        _3001 = (_3246 * _3131.x) + _3069;
                        _3002 = (_3246 * _3131.y) + _3070;
                        _3003 = (_3246 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                _2811 = frontier_phi_66_pred;
                _2809 = frontier_phi_66_pred_1;
                _2807 = frontier_phi_66_pred_2;
                _2805 = frontier_phi_66_pred_3;
                _2803 = frontier_phi_66_pred_4;
                _2801 = frontier_phi_66_pred_5;
                uint _2952 = _2951 + 1u;
                if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2945 = _2801;
                    _2946 = _2803;
                    _2947 = _2805;
                    _2948 = _2807;
                    _2949 = _2809;
                    _2950 = _2811;
                    _2951 = _2952;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((4294967295u << _2817) & _2720) == 0u)
        {
            _2913 = _2800;
            _2915 = _2802;
            _2917 = _2804;
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
        }
        else
        {
            float _2938 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float _2939 = _2938 * _1778;
            float _2940 = _2938 * _1779;
            float _2941 = _2938 * _1780;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _3052 = _2800;
                float _3053 = _2802;
                float _3054 = _2804;
                float _3055 = _2806;
                float _3056 = _2808;
                float _3057 = _2810;
                uint _3058 = _2817;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2714 << 5u) + (_2700 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3068)
                    {
                        frontier_phi_72_pred = _3057;
                        frontier_phi_72_pred_1 = _3056;
                        frontier_phi_72_pred_2 = _3055;
                        frontier_phi_72_pred_3 = _3054;
                        frontier_phi_72_pred_4 = _3053;
                        frontier_phi_72_pred_5 = _3052;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3264 = _3052;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        uint _3270 = _3067;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3281 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3281 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3281 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3281 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_1780, _3388.z, fma(_1779, _3388.y, _3388.x * _1778)) + _3388.w;
                            _3401 = !((fma(_1780, _3369.z, fma(_1779, _3369.y, _3369.x * _1778)) + _3369.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3296.x - _1778;
                                float _3429 = _3296.y - _1779;
                                float _3430 = _3296.z - _1780;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3297 * _3297));
                                float _4594 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3446 = sqrt(_3431) * _3312.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_641, _644, _647))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_1780, _3339.z, fma(_1779, _3339.y, _3339.x * _1778)) + _3339.w) / _3400;
                                float _3460 = (fma(_1780, _3354.z, fma(_1779, _3354.y, _3354.x * _1778)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4610 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _716;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2939;
                                float _3490 = _3436 - _2940;
                                float _3491 = _3437 - _2941;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_641, _644, _647), vec3((-0.0) - _2939, (-0.0) - _2940, (-0.0) - _2941));
                                float _4621 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3503 = dot(vec3(_641, _644, _647), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4632 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_641, _644, _647), vec3(_3435, _3436, _3437))) + _3512;
                                float _4643 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4654 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3466 * _3312.y;
                                frontier_phi_78_pred_1 = _3466 * _3312.x;
                                frontier_phi_78_pred_2 = _3540 * _3324.z;
                                frontier_phi_78_pred_3 = _3540 * _3324.y;
                                frontier_phi_78_pred_4 = _3540 * _3324.x;
                                frontier_phi_78_pred_5 = _3466 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_78_pred;
                            _3547 = frontier_phi_78_pred_1;
                            _3546 = frontier_phi_78_pred_2;
                            _3545 = frontier_phi_78_pred_3;
                            _3544 = frontier_phi_78_pred_4;
                            _3549 = frontier_phi_78_pred_5;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3256;
                        frontier_phi_72_pred_1 = _3255;
                        frontier_phi_72_pred_2 = _3254;
                        frontier_phi_72_pred_3 = _3253;
                        frontier_phi_72_pred_4 = _3252;
                        frontier_phi_72_pred_5 = _3251;
                    }
                    _2924 = frontier_phi_72_pred;
                    _2922 = frontier_phi_72_pred_1;
                    _2920 = frontier_phi_72_pred_2;
                    _2918 = frontier_phi_72_pred_3;
                    _2916 = frontier_phi_72_pred_4;
                    _2914 = frontier_phi_72_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2914;
                        _3053 = _2916;
                        _3054 = _2918;
                        _3055 = _2920;
                        _3056 = _2922;
                        _3057 = _2924;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2924;
                frontier_phi_60_61_ladder_1 = _2922;
                frontier_phi_60_61_ladder_2 = _2918;
                frontier_phi_60_61_ladder_3 = _2916;
                frontier_phi_60_61_ladder_4 = _2914;
                frontier_phi_60_61_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_60_61_ladder = _2810;
                frontier_phi_60_61_ladder_1 = _2808;
                frontier_phi_60_61_ladder_2 = _2804;
                frontier_phi_60_61_ladder_3 = _2802;
                frontier_phi_60_61_ladder_4 = _2800;
                frontier_phi_60_61_ladder_5 = _2806;
            }
            _2913 = frontier_phi_60_61_ladder_4;
            _2915 = frontier_phi_60_61_ladder_3;
            _2917 = frontier_phi_60_61_ladder_2;
            _2919 = frontier_phi_60_61_ladder_5;
            _2921 = frontier_phi_60_61_ladder_1;
            _2923 = frontier_phi_60_61_ladder;
        }
        float _2928 = isnan(1.0) ? _700 : (isnan(_700) ? 1.0 : min(_700, 1.0));
        _2733 = (_2928 * _2919) + _2245;
        _2735 = (_2928 * _2921) + _2247;
        _2737 = (_2928 * _2923) + _2249;
        _2739 = ((_2913 * _684) * _2928) + _2583;
        _2741 = ((_2915 * _686) * _2928) + _2585;
        _2743 = ((_2917 * _687) * _2928) + _2587;
    }
    else
    {
        _2733 = _2245;
        _2735 = _2247;
        _2737 = _2249;
        _2739 = _2583;
        _2741 = _2585;
        _2743 = _2587;
    }
    float _4670 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4681 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4692 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    uint _2763 = _256 + 6u;
    float _2771 = _619 / cbSceneParam._m0[86u].x;
    float _2772 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2786 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2788 = _2786.x;
    float _2789 = _2786.y;
    float _2790 = _2786.z;
    float _2791 = _2786.w;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2826 = _2825 / _553;
        float _2837 = _2826 * _604;
        float _2838 = _605 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2841 = _2826 * _606;
        float _2843 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2844 = _2843 + cbSceneParam._m0[79u].w;
        float _2845 = cbSceneParam._m0[79u].w - _2838;
        float _2851 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2841 * _2841));
        float _2854 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2851;
        float _2859 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2861 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3014;
        if (abs((_2839 - _2843) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3014 = ((((_2844 > 0.0) ? exp2(_2859 * _2844) : (2.0 - exp2(_2861 * _2844))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2854;
        }
        else
        {
            float _2974 = 1.0 / cbSceneParam._m0[80u].x;
            float _2975 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : max(_2844, _2845));
            float _2976 = isnan(_2845) ? _2844 : (isnan(_2844) ? _2845 : min(_2844, _2845));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            _3014 = ((abs(_2851 / _2839) * cbSceneParam._m0[80u].y) * ((((_2985 - _2986) * 2.0) - ((exp2(_2859 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0)))) - exp2(_2859 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))))) * _2974)) - ((exp2(_2861 * _2985) - exp2(_2861 * _2986)) * _2974))) + (_2854 * cbSceneParam._m0[80u].z);
        }
        vec4 _3016 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, 1.0), 0.0);
        float _3025 = exp2((_3014 * (-1.44269502162933349609375)) * (1.0 - _3016.w));
        float _3026 = log2(_3025);
        float _3042 = log2(_2791);
        _2863 = (exp2(_3042 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].x)) * _3016.x) / cbSceneParam._m0[78u].x)) + _2788;
        _2865 = (exp2(_3042 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].y)) * _3016.y) / cbSceneParam._m0[78u].y)) + _2789;
        _2867 = (exp2(_3042 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].z)) * _3016.z) / cbSceneParam._m0[78u].z)) + _2790;
        _2869 = _3025 * _2791;
    }
    else
    {
        _2863 = _2788;
        _2865 = _2789;
        _2867 = _2790;
        _2869 = _2791;
    }
    float _2881 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2882 = _2881 == 3.0;
    float _2883 = log2(_2869);
    float _2890 = exp2(_2883 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2733 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _700))) + ((_2739 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2891 = exp2(_2883 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2735 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _700))) + ((_2741 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2892 = exp2(_2883 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2737 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _700))) + ((_2743 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2901 = (_2881 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2901 * (_2882 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.y = _2901 * (_2882 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.z = _2901 * (_2882 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.w = cbInstanceData._m0[_2763].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2763].w;
}


