#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3668;
float _3669;
float _3670;
float _3671;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3680 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3691 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3702 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) + _346;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _429 = (_420.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3713 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _440 = _428 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _441 = _429 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _460 = _458.x;
    float _461 = 1.0 - _460;
    float _470 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _473 = ((isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : min(_470, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _482 = (_473 - ((((((_460 - _461) * cbMtdParam._m0[24u].z) + _461) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _473))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3734 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _490 = (_483 * ((_374.x * cbMtdParam._m0[18u].x) - _353)) + _353;
    float _491 = (_483 * ((_374.y * cbMtdParam._m0[18u].y) - _354)) + _354;
    float _492 = (_483 * ((_374.z * cbMtdParam._m0[18u].z) - _355)) + _355;
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _535 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_507 - _508) * cbMtdParam._m0[24u].w) + _508) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3745 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _544 = ((((cbMtdParam._m0[10u].x - _490) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _536) + _490;
    float _545 = ((((cbMtdParam._m0[10u].y - _491) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _536) + _491;
    float _546 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _492)) * _536) + _492;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _561 = _559.x;
    float _563 = _561 - (_561 * _483);
    float _565 = _563 - (_563 * _536);
    float _570 = (((_394.z - _424) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _424;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _591 = (_584.x * 2.0) + (-1.0);
    float _592 = (_584.y * 2.0) + (-1.0);
    float _593 = dot(vec2(_591, _592), vec2(_591, _592));
    float _3756 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _601 = (_483 * (_584.z - _570)) + _570;
    float _604 = ((cbMtdParam._m0[23u].y - _601) * _536) + _601;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _632 = (_626.x * 2.0) + (-1.0);
    float _633 = (_626.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3767 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _651 = (((_591 - _440) + (cbMtdParam._m0[21u].x * _440)) * _483) + _440;
    float _652 = (((_592 - _441) + (cbMtdParam._m0[21u].x * _441)) * _483) + _441;
    float _653 = (_483 * (sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) - _435)) + _435;
    float _664 = (((_632 - _651) + (_651 * cbMtdParam._m0[22u].z)) * _536) + _651;
    float _665 = (((_633 - _652) + (_652 * cbMtdParam._m0[22u].z)) * _536) + _652;
    float _666 = ((sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) - _653) * _536) + _653;
    float _668 = cbMtdParam._m0[22u].x + _420.w;
    float _671 = fma(_666, _241 * NORMAL.x, fma(_665, _248 * TANGENT.x, (_234 * _226) * _664));
    float _674 = fma(_666, _241 * NORMAL.y, fma(_665, _248 * TANGENT.y, (_234 * _227) * _664));
    float _677 = fma(_666, _241 * NORMAL.z, fma(_665, _248 * TANGENT.z, (_234 * _228) * _664));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3778 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _685 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3800 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3811 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3822 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3833 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _690 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _952)) + _952) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _806 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _809 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    uint _822 = _273 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3866 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _835 = 1.0 - _690;
    float _836 = _832 * _835;
    float _837 = _833 * _835;
    float _838 = _834 * _835;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _690;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _690;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _690;
    float _846 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _862 = ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_682, _683, _684), vec3(_761, _762, _763));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _682) - _761;
    float _871 = (_866 * _683) - _762;
    float _872 = (_866 * _684) - _763;
    float _876 = abs(dot(vec3(_761, _762, _763), vec3(_682, _683, _684)));
    float _3899 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_685);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _897 = (1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _878;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _992 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _996 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1021 = _926 + _682;
        float _1022 = _930 + _683;
        float _1023 = _934 + _684;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_682, _683, _684), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3947 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_682, _683, _684), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3980 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_682, _683, _684), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4013 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1310 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1314 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1337 = _926 + _682;
        float _1338 = _930 + _683;
        float _1339 = _934 + _684;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_682, _683, _684), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4076 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_682, _683, _684), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4109 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_682, _683, _684), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4142 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = _1264;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1277)) + _1277;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1278)) + _1278;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _870 * 0.5;
    float _1644 = _871 * 0.5;
    float _1645 = _872 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1773 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1776 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1804 = frontier_phi_17_15_ladder;
        }
        float _2028;
        if (_1773 > 0.0)
        {
            _2028 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2028 = frontier_phi_26_22_ladder;
        }
        float _2285;
        if (_1776 > 0.0)
        {
            _2285 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2285 = frontier_phi_38_33_ladder;
        }
        float _2287 = isnan(_2028) ? _1804 : (isnan(_1804) ? _2028 : min(_1804, _2028));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1770) + _1759;
        float _2293 = (_2288 * _1773) + _1763;
        float _2294 = (_2288 * _1776) + _1767;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_16_38_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_16_38_ladder_2;
        _1794 = frontier_phi_16_38_ladder_1;
        _1796 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1712);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1868 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1871 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _2033;
        if (_1865 > 0.0)
        {
            _2033 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2033 = frontier_phi_28_24_ladder;
        }
        float _2312;
        if (_1868 > 0.0)
        {
            _2312 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2312 = frontier_phi_40_35_ladder;
        }
        float _2525;
        if (_1871 > 0.0)
        {
            _2525 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2525 = frontier_phi_49_46_ladder;
        }
        float _2527 = isnan(_2312) ? _2033 : (isnan(_2033) ? _2312 : min(_2033, _2312));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1865) + _1854;
        float _2533 = (_2528 * _1868) + _1858;
        float _2534 = (_2528 * _1871) + _1862;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_25_49_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_25_49_ladder_2;
        _1892 = frontier_phi_25_49_ladder_1;
        _1894 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1801);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1907 = (((_897 * _846) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1909 = (((_897 * _848) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1911 = (((_897 * _849) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    vec4 _1928 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_782, _783));
    float _1930 = _1928.w;
    float _1942 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1930);
    float _1943 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1930);
    float _1944 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1930);
    uvec4 _1948 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1950 = _1948.x * 14u;
    uint _1951 = _1950 + 13u;
    float _1958 = _862 + (-1.0);
    float _1963 = (cbLight._m0[_1951].x * _1958) + 1.0;
    float _1964 = (cbLight._m0[_1951].y * _1958) + 1.0;
    float _1965 = (cbLight._m0[_1951].z * _1958) + 1.0;
    float _1966 = (cbLight._m0[_1951].w * _1958) + 1.0;
    uint _1967 = _1950 + 5u;
    float _1973 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1977 = _1950 + 4u;
    float _1987 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1991 = _1950 | 1u;
    float _2002 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_682, _683, _684));
    float _2005 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_682, _683, _684));
    float _4278 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _4289 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2010 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2012 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2019 = ((cbLight._m0[_1967].x * _1973) * _2012) + (((cbLight._m0[_1977].x * _1942) * _1987) * _2010);
    float _2020 = ((_1973 * cbLight._m0[_1967].y) * _2012) + (((cbLight._m0[_1977].y * _1943) * _1987) * _2010);
    float _2021 = ((_1973 * cbLight._m0[_1967].z) * _2012) + (((cbLight._m0[_1977].z * _1944) * _1987) * _2010);
    uvec4 _2025 = floatBitsToUint(cbLight._m0[_1950 + 12u]);
    bool _2027 = _2025.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2027)
    {
        _2038 = _2019;
        _2040 = _2020;
        _2042 = _2021;
    }
    else
    {
        uint _2046 = _1950 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1950 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4300 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2065 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _2019;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _2020;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _2021;
    }
    bool _2045 = _2025.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2045)
    {
        _2083 = _2038;
        _2085 = _2040;
        _2087 = _2042;
    }
    else
    {
        uint _2256 = _1950 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1950 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4316 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2275 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2083 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2038;
        _2085 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2040;
        _2087 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2042;
    }
    uint _2090 = _1950 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _685) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1950].x + _761;
    float _2106 = cbLight._m0[_1950].y + _762;
    float _2107 = cbLight._m0[_1950].z + _763;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1950].xyz));
    float _4332 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2119 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2120 = dot(vec3(_682, _683, _684), vec3(_2112, _2113, _2114));
    float _4354 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2112, _2113, _2114));
    float _4365 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2141 = 0.959999978542327880859375 - _843;
    float _2143 = 0.959999978542327880859375 - _844;
    float _2144 = 0.959999978542327880859375 - _845;
    float _2151 = 1.0 - _2104;
    float _2162 = (0.5 / (((_2119 * ((_2118 * _2151) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2151) + _2104) * _2118))) * _2118;
    float _4376 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2178 = _1950 + 9u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _685) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1991].x + _761;
    float _2192 = cbLight._m0[_1991].y + _762;
    float _2193 = cbLight._m0[_1991].z + _763;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1991].xyz));
    float _4387 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2205 = dot(vec3(_682, _683, _684), vec3(_2198, _2199, _2200));
    float _4398 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2198, _2199, _2200));
    float _4409 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2190 * _2190;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
    float _2231 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2119 * ((_2204 * _2231) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2231) + _2190) * _2204))) * _2204;
    float _4420 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    float _2253 = (((((_2224 * _2141) + _846) * cbLight._m0[_2178].x) * _2243) * _1973) + ((((cbLight._m0[_2090].x * _1942) * ((_2140 * _2141) + _846)) * _2164) * _1987);
    float _2254 = (((((_2224 * _2143) + _848) * cbLight._m0[_2178].y) * _2243) * _1973) + ((((cbLight._m0[_2090].y * _1943) * ((_2140 * _2143) + _848)) * _2164) * _1987);
    float _2255 = (((((_2224 * _2144) + _849) * cbLight._m0[_2178].z) * _2243) * _1973) + ((((cbLight._m0[_2090].z * _1944) * ((_2140 * _2144) + _849)) * _2164) * _1987);
    float _2317;
    float _2319;
    float _2321;
    if (_2027)
    {
        _2317 = _2253;
        _2319 = _2254;
        _2321 = _2255;
    }
    else
    {
        uint _2323 = _1950 + 2u;
        uint _2327 = _1950 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _685) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _761;
        float _2344 = cbLight._m0[_2323].y + _762;
        float _2345 = cbLight._m0[_2323].z + _763;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2323].xyz));
        float _4431 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2357 = dot(vec3(_682, _683, _684), vec3(_2350, _2351, _2352));
        float _4442 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4453 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
        float _2383 = 1.0 - _2342;
        float _2393 = (0.5 / (((_2119 * ((_2356 * _2383) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2383) + _2342) * _2356))) * _2356;
        float _4464 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2317 = (((((_2376 * _2141) + _846) * cbLight._m0[_2327].x) * _2395) * _2396) + _2253;
        _2319 = (((((_2376 * _2143) + _848) * cbLight._m0[_2327].y) * _2395) * _2396) + _2254;
        _2321 = (((((_2376 * _2144) + _849) * cbLight._m0[_2327].z) * _2395) * _2396) + _2255;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2045)
    {
        _2431 = _2317;
        _2433 = _2319;
        _2435 = _2321;
    }
    else
    {
        uint _2442 = _1950 + 3u;
        uint _2446 = _1950 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _685) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _761;
        float _2463 = cbLight._m0[_2442].y + _762;
        float _2464 = cbLight._m0[_2442].z + _763;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2442].xyz));
        float _4480 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2476 = dot(vec3(_682, _683, _684), vec3(_2469, _2470, _2471));
        float _4491 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4502 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
        float _2502 = 1.0 - _2461;
        float _2512 = (0.5 / (((_2119 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2502) + _2461) * _2475))) * _2475;
        float _4513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2431 = (((((_2495 * _2141) + _846) * cbLight._m0[_2446].x) * _2514) * _2515) + _2317;
        _2433 = (((((_2495 * _2143) + _848) * cbLight._m0[_2446].y) * _2514) * _2515) + _2319;
        _2435 = (((((_2495 * _2144) + _849) * cbLight._m0[_2446].z) * _2514) * _2515) + _2321;
    }
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_1948.y == 0u)
    {
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2590;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2590;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2590;
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.x;
        uint _2617 = uint((float(_2605.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2606))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2606)));
        float _2627 = (log2(_2593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        uint _2631 = uint(isnan(14.0) ? _2628 : (isnan(_2628) ? 14.0 : min(_2628, 14.0)));
        uvec4 _2636 = texelFetch(g_lightClusterGridBuffer, int(((_2631 << 2u) + (_2617 << 6u)) >> 2u));
        uint _2637 = _2636.x;
        uint _2638 = _2605.z;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((((1u << ((_2638 >> 4u) & 15u)) + 4294967295u) & _2637) == 0u) || ((_2638 & 240u) == 0u))
        {
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
        }
        else
        {
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            uint _2897 = 0u;
            uint _2906;
            bool _2907;
            for (;;)
            {
                _2906 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                _2907 = _2906 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2907)
                {
                    frontier_phi_66_pred = _2891;
                    frontier_phi_66_pred_1 = _2896;
                    frontier_phi_66_pred_2 = _2895;
                    frontier_phi_66_pred_3 = _2894;
                    frontier_phi_66_pred_4 = _2893;
                    frontier_phi_66_pred_5 = _2892;
                }
                else
                {
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    uint _3042;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2906;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    for (;;)
                    {
                        uint _3046 = uint(findLSB(_3042)) + (_2897 << 5u);
                        uint _3043 = (_3042 + 4294967295u) & _3042;
                        uint _3048 = _3046 * 48u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3068 = (_3046 * 48u) + 4u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3087 = (_3046 * 48u) + 8u;
                        vec3 _3098 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x));
                        float _3102 = _3062.x - _2591;
                        float _3103 = _3062.y - _2592;
                        float _3104 = _3062.z - _2593;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_803, _806, _809), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3062.w);
                        float _4539 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3119 = sqrt(_3105) * _3081.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3112) + _3123;
                        float _3129 = _3119 * _3119;
                        float _3133 = ((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3118) / ((_3129 * 0.699999988079071044921875) + 1.0);
                        float _3137 = (-0.0) - _2591;
                        float _3138 = (-0.0) - _2592;
                        float _3139 = (-0.0) - _2593;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3154 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                        float _3155 = 1.0 - _878;
                        float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                        float _3163 = _3162 * _3162;
                        float _3164 = _3163 * _3163;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3167 = _3146 + _3111;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3175 = dot(vec3(_803, _806, _809), vec3(_3144, _3145, _3146));
                        float _4555 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3179 = dot(vec3(_803, _806, _809), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                        float _4566 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                        float _3187 = _3122 * _3163;
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3112) + _3188;
                        float _4577 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3193 = 1.0 - _3163;
                        float _3203 = (0.5 / (((_3192 * ((_3178 * _3193) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3163) * _3178))) * _3192;
                        float _4588 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3214 = (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3186 * _3186) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2966 = (_3133 * _3081.x) + _3039;
                        _2967 = (_3133 * _3081.y) + _3040;
                        _2968 = (_3133 * _3081.z) + _3041;
                        _2963 = (_3214 * _3098.x) + _3036;
                        _2964 = (_3214 * _3098.y) + _3037;
                        _2965 = (_3214 * _3098.z) + _3038;
                        if (_3043 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _3043;
                        }
                    }
                    frontier_phi_66_pred = _2963;
                    frontier_phi_66_pred_1 = _2968;
                    frontier_phi_66_pred_2 = _2967;
                    frontier_phi_66_pred_3 = _2966;
                    frontier_phi_66_pred_4 = _2965;
                    frontier_phi_66_pred_5 = _2964;
                }
                _2739 = frontier_phi_66_pred;
                _2749 = frontier_phi_66_pred_1;
                _2747 = frontier_phi_66_pred_2;
                _2745 = frontier_phi_66_pred_3;
                _2743 = frontier_phi_66_pred_4;
                _2741 = frontier_phi_66_pred_5;
                uint _2898 = _2897 + 1u;
                if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2891 = _2739;
                    _2892 = _2741;
                    _2893 = _2743;
                    _2894 = _2745;
                    _2895 = _2747;
                    _2896 = _2749;
                    _2897 = _2898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
        }
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.z;
        uint _2755 = (_2753 >> 8u) & 15u;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((4294967295u << _2755) & _2637) == 0u)
        {
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
        }
        else
        {
            float _2884 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
            float _2885 = _2884 * _2591;
            float _2886 = _2884 * _2592;
            float _2887 = _2884 * _2593;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2755 < ((_2753 >> 12u) & 15u))
            {
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _3019 = _2738;
                float _3020 = _2740;
                float _3021 = _2742;
                float _3022 = _2744;
                float _3023 = _2746;
                float _3024 = _2748;
                uint _3025 = _2755;
                uint _3034;
                bool _3035;
                for (;;)
                {
                    _3034 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                    _3035 = _3034 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3035)
                    {
                        frontier_phi_77_pred = _3024;
                        frontier_phi_77_pred_1 = _3023;
                        frontier_phi_77_pred_2 = _3022;
                        frontier_phi_77_pred_3 = _3021;
                        frontier_phi_77_pred_4 = _3020;
                        frontier_phi_77_pred_5 = _3019;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        uint _3247 = _3034;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3331;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3258 = ((_3025 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3258 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3258 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3258 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2593, _3365.z, fma(_2592, _3365.y, _3365.x * _2591)) + _3365.w;
                            _3378 = !((fma(_2593, _3346.z, fma(_2592, _3346.y, _3346.x * _2591)) + _3346.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3273.x - _2591;
                                float _3406 = _3273.y - _2592;
                                float _3407 = _3273.z - _2593;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3274 * _3274));
                                float _4599 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3423 = sqrt(_3408) * _3289.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_803, _806, _809))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2593, _3316.z, fma(_2592, _3316.y, _3316.x * _2591)) + _3316.w) / _3377;
                                float _3437 = (fma(_2593, _3331.z, fma(_2592, _3331.y, _3331.x * _2591)) + _3331.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4615 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _878;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2885;
                                float _3467 = _3413 - _2886;
                                float _3468 = _3414 - _2887;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2885, (-0.0) - _2886, (-0.0) - _2887));
                                float _4626 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3480 = dot(vec3(_803, _806, _809), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4637 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_803, _806, _809), vec3(_3412, _3413, _3414))) + _3489;
                                float _4648 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4659 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3443 * _3289.y;
                                frontier_phi_83_pred_1 = _3443 * _3289.x;
                                frontier_phi_83_pred_2 = _3517 * _3301.z;
                                frontier_phi_83_pred_3 = _3517 * _3301.y;
                                frontier_phi_83_pred_4 = _3517 * _3301.x;
                                frontier_phi_83_pred_5 = _3443 * _3289.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_83_pred;
                            _3524 = frontier_phi_83_pred_1;
                            _3523 = frontier_phi_83_pred_2;
                            _3522 = frontier_phi_83_pred_3;
                            _3521 = frontier_phi_83_pred_4;
                            _3526 = frontier_phi_83_pred_5;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3233;
                        frontier_phi_77_pred_1 = _3232;
                        frontier_phi_77_pred_2 = _3231;
                        frontier_phi_77_pred_3 = _3230;
                        frontier_phi_77_pred_4 = _3229;
                        frontier_phi_77_pred_5 = _3228;
                    }
                    _2870 = frontier_phi_77_pred;
                    _2868 = frontier_phi_77_pred_1;
                    _2866 = frontier_phi_77_pred_2;
                    _2864 = frontier_phi_77_pred_3;
                    _2862 = frontier_phi_77_pred_4;
                    _2860 = frontier_phi_77_pred_5;
                    uint _3026 = _3025 + 1u;
                    if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3019 = _2860;
                        _3020 = _2862;
                        _3021 = _2864;
                        _3022 = _2866;
                        _3023 = _2868;
                        _3024 = _2870;
                        _3025 = _3026;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            else
            {
                frontier_phi_58_59_ladder = _2742;
                frontier_phi_58_59_ladder_1 = _2748;
                frontier_phi_58_59_ladder_2 = _2746;
                frontier_phi_58_59_ladder_3 = _2744;
                frontier_phi_58_59_ladder_4 = _2740;
                frontier_phi_58_59_ladder_5 = _2738;
            }
            _2859 = frontier_phi_58_59_ladder_5;
            _2861 = frontier_phi_58_59_ladder_4;
            _2863 = frontier_phi_58_59_ladder;
            _2865 = frontier_phi_58_59_ladder_3;
            _2867 = frontier_phi_58_59_ladder_2;
            _2869 = frontier_phi_58_59_ladder_1;
        }
        float _2874 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2650 = (_2874 * _2865) + _2083;
        _2652 = (_2874 * _2867) + _2085;
        _2654 = (_2874 * _2869) + _2087;
        _2656 = ((_2859 * _846) * _2874) + _2431;
        _2658 = ((_2861 * _848) * _2874) + _2433;
        _2660 = ((_2863 * _849) * _2874) + _2435;
    }
    else
    {
        _2650 = _2083;
        _2652 = _2085;
        _2654 = _2087;
        _2656 = _2431;
        _2658 = _2433;
        _2660 = _2435;
    }
    float _4675 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4686 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4697 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2677 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2650 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _862))) + ((_2656 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2678 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2652 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _862))) + ((_2658 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2679 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2654 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _862))) + ((_2660 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    uint _2680 = _273 + 6u;
    float _2688 = _782 / cbSceneParam._m0[86u].x;
    float _2689 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2703 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2705 = _2703.x;
    float _2706 = _2703.y;
    float _2707 = _2703.z;
    float _2708 = _2703.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _2763 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _2764 = _2763 / _704;
        float _2775 = _2764 * _754;
        float _2776 = _755 * _2764;
        float _2777 = (-0.0) - _2776;
        float _2779 = _2764 * _756;
        float _2781 = (cbSceneParam._m0[77u].w * _2777) / _2763;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2776;
        float _2789 = sqrt(((_2775 * _2775) + (_2776 * _2776)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2763)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2976;
        if (abs((_2777 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2976 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2920 = 1.0 / cbSceneParam._m0[80u].x;
            float _2921 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2922 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            _2976 = ((abs(_2789 / _2777) * cbSceneParam._m0[80u].y) * ((((_2931 - _2932) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))))) * _2920)) - ((exp2(_2799 * _2931) - exp2(_2799 * _2932)) * _2920))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2978 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, 1.0), 0.0);
        float _2987 = exp2((_2976 * (-1.44269502162933349609375)) * (1.0 - _2978.w));
        float _2988 = log2(_2987);
        float _3004 = log2(_2708);
        _2801 = (exp2(_3004 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].x)) * _2978.x) / cbSceneParam._m0[78u].x)) + _2705;
        _2803 = (exp2(_3004 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].y)) * _2978.y) / cbSceneParam._m0[78u].y)) + _2706;
        _2805 = (exp2(_3004 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].z)) * _2978.z) / cbSceneParam._m0[78u].z)) + _2707;
        _2807 = _2987 * _2708;
    }
    else
    {
        _2801 = _2705;
        _2803 = _2706;
        _2805 = _2707;
        _2807 = _2708;
    }
    bool _3014;
    vec4 _2817;
    vec4 _2839;
    float _2841;
    float _2845;
    float _2846;
    float _2847;
    float _2848;
    bool _2858;
    for (;;)
    {
        _2817 = cbMatDynParam._m0[0u];
        float _2819 = roundEven(_2817.y);
        bool _2820 = _2819 == 3.0;
        float _2821 = log2(_2807);
        float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * _2677;
        float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * _2678;
        float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * _2679;
        float _2837 = _770 + (-0.5);
        _2839 = cbMtdParam._m0[1u];
        _2841 = _2839.y * _2837;
        float _2844 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2845 = _2844 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
        _2846 = _2844 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
        _2847 = _2844 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
        _2848 = _2837 * 0.999000012874603271484375;
        _2858 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2858)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2848) < 0.5)
            {
                _3014 = true;
                break;
            }
        }
        uint _2955 = _822 + uint(_2817.w);
        if ((cbInstanceData._m0[_2955].w < 1.0) && ((cbInstanceData._m0[_2955].w + _2848) < 0.5))
        {
            _3014 = true;
            break;
        }
        if ((_2841 + 1.0) < _2839.x)
        {
            _3014 = true;
            break;
        }
        _3014 = false;
        break;
    }
    float _3219;
    if (_3014)
    {
        discard_state = true;
        _3219 = 0.0;
    }
    else
    {
        _3219 = cbInstanceData._m0[_2680].w;
    }
    SV_Target.x = _2845;
    SV_Target.y = _2846;
    SV_Target.z = _2847;
    SV_Target.w = _3219;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2680].w;
    discard_exit();
}


