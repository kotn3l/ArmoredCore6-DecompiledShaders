#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1349;
float _4013;
float _4014;
float _4015;
float _4016;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4025 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4036 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4047 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4058 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _444;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    float _528 = ((_498.z - _519) * _425) + _519;
    float _531 = ((((_498.x - _517) * _425) + _517) * 2.0) + (-1.0);
    float _532 = ((((_498.y - _518) * _425) + _518) * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _4069 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _538 = sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _570 = (_531 + ((((_471.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_558.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _571 = (_532 + ((((_471.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_558.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _574 = fma(_538, _241, fma(_571, _248, _570 * _234));
    float _577 = fma(_538, _242, fma(_571, _249, _570 * _235));
    float _580 = fma(_538, _243, fma(_571, _250, _570 * _236));
    float _584 = inversesqrt(dot(vec3(_574, _577, _580), vec3(_574, _577, _580)));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _618 = ((_613 - _614) * cbMtdParam._m0[24u].z) + _614;
    float _620 = (cbMtdParam._m0[19u].x + dot(vec4(_584 * _574, _584 * _577, _584 * _580, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_618 * cbMtdParam._m0[21u].z);
    float _4080 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _636 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_618 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4091 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _641 = ((_621 * (cbMtdParam._m0[17u].x - _451)) * _637) + _451;
    float _642 = ((_621 * (cbMtdParam._m0[17u].y - _452)) * _637) + _452;
    float _643 = ((_621 * (cbMtdParam._m0[17u].z - _453)) * _637) + _453;
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _669 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _671 = _669.x;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _671) * _425) + _671;
    float _693 = ((_655.x - _689) * cbMtdParam._m0[19u].z) + _689;
    float _696 = _693 - ((_637 * _621) * _693);
    float _701 = (((_471.z - _528) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _528;
    float _705 = ((_558.z - _701) * cbMtdParam._m0[19u].w) + _701;
    vec4 _718 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _725 = (_718.x * 2.0) + (-1.0);
    float _726 = (_718.y * 2.0) + (-1.0);
    float _727 = dot(vec2(_725, _726), vec2(_725, _726));
    float _4102 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _736 = (((_718.z - _705) * _621) * _637) + _705;
    float _751 = (((cbMtdParam._m0[21u].x * _570) + ((_725 - _570) * _621)) * _637) + _570;
    float _752 = (((cbMtdParam._m0[21u].x * _571) + ((_726 - _571) * _621)) * _637) + _571;
    float _753 = (((sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) - _538) * _621) * _637) + _538;
    float _755 = cbMtdParam._m0[22u].x + _558.w;
    float _758 = fma(_753, _241, fma(_752, _248, _751 * _234));
    float _761 = fma(_753, _242, fma(_752, _249, _751 * _235));
    float _764 = fma(_753, _243, fma(_752, _250, _751 * _236));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _4113 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _772 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4135 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4146 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4157 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4168 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _777 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    vec4 _856 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _858 = _856.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1030 = sqrt(((_842 * _842) + (_843 * _843)) + (_844 * _844));
        float _1036 = (cbMatDynParam._m0[5u].x * _1030) + cbMatDynParam._m0[5u].y;
        float _4179 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1041 = (cbMatDynParam._m0[5u].z * _1030) + cbMatDynParam._m0[5u].w;
        float _4190 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) - _1037)) + _1037) < ((_858 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _888 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _891 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _894 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    uint _907 = _274 + 9u;
    uint _908 = _907 + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_908].z;
    float _4201 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _920 = 1.0 - _777;
    float _921 = _917 * _920;
    float _922 = _918 * _920;
    float _923 = _919 * _920;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _777;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _777;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _777;
    float _931 = _928 + 0.039999999105930328369140625;
    float _933 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _947 = ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * TEXCOORD_5.w) * _943.x;
    float _948 = dot(vec3(_769, _770, _771), vec3(_849, _850, _851));
    float _951 = _948 * 2.0;
    float _955 = (_951 * _769) - _849;
    float _956 = (_951 * _770) - _850;
    float _957 = (_951 * _771) - _851;
    float _961 = abs(dot(vec3(_849, _850, _851), vec3(_769, _770, _771)));
    float _4234 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_772);
    float _976 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _982 = (1.0 - _976) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _983 = _976 * _963;
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1019, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011));
        float _1077 = fma(_1019, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011));
        float _1081 = fma(_1019, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011));
        float _1106 = _1011 + _769;
        float _1107 = _1015 + _770;
        float _1108 = _1019 + _771;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_769, _770, _771), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4282 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_769, _770, _771), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4315 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_769, _770, _771), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4348 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1391 = fma(_1019, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011));
        float _1395 = fma(_1019, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011));
        float _1399 = fma(_1019, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011));
        float _1422 = _1011 + _769;
        float _1423 = _1015 + _770;
        float _1424 = _1019 + _771;
        float _1434 = fma(_1424, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1422)) - _1391;
        float _1435 = fma(_1424, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1422)) - _1395;
        float _1436 = fma(_1424, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1422)) - _1399;
        float _1440 = inversesqrt(dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436)));
        float _1453 = ((_1440 * _1434) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1391 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1440 * _1435) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1395 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1440 * _1436) / cbModelParam._m0[35u].z) + ((((((_1399 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        float _1490 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1457.x + (-0.5));
        float _1492 = _1490 * (_1457.y + (-0.5));
        float _1493 = _1490 * (_1457.z + (-0.5));
        float _1500 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1464.x + (-0.5));
        float _1502 = _1500 * (_1464.y + (-0.5));
        float _1503 = _1500 * (_1464.z + (-0.5));
        float _1510 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1471.x + (-0.5));
        float _1512 = _1510 * (_1471.y + (-0.5));
        float _1513 = _1510 * (_1471.z + (-0.5));
        float _1520 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1478.x + (-0.5));
        float _1522 = _1520 * (_1478.y + (-0.5));
        float _1523 = _1520 * (_1478.z + (-0.5));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = _1491 * 0.5;
        float _1528 = _1501 * 0.5;
        float _1529 = _1511 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_769, _770, _771), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4411 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1554 + 1.0))) + _1559) * _1524;
        float _1569 = _1492 * 0.5;
        float _1570 = _1502 * 0.5;
        float _1571 = _1512 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_769, _770, _771), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4444 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1596 + 1.0))) + _1601) * _1525;
        float _1611 = _1493 * 0.5;
        float _1612 = _1503 * 0.5;
        float _1613 = _1513 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_769, _770, _771), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4477 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1638 + 1.0))) + _1643) * _1526;
        _1660 = _1493;
        _1661 = _1492;
        _1662 = _1491;
        _1663 = _1503;
        _1664 = _1502;
        _1665 = _1501;
        _1666 = _1513;
        _1667 = _1512;
        _1668 = _1511;
        _1669 = _1526;
        _1670 = _1525;
        _1671 = _1524;
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
    }
    else
    {
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = _1349;
        _1669 = _1349;
        _1670 = _1349;
        _1671 = _1349;
        _1672 = 0.0;
        _1673 = 0.0;
        _1674 = 0.0;
    }
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1707 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1684));
    float _1728 = _955 * 0.5;
    float _1729 = _956 * 0.5;
    float _1730 = _957 * 0.5;
    float _1731 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1734 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1737 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1771;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1744 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1748 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1752 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1759 = dot(vec4(cbModelParam._m0[39u]), vec4(_1728, _1729, _1730, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1782;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1773 = dot(vec4(cbModelParam._m0[40u]), vec4(_1728, _1729, _1730, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1786 = (_1782 * cbModelParam._m0[1u].x) + (_1771 * (1.0 - cbModelParam._m0[1u].x));
    float _1796 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _772);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1796 : min(cbModelParam._m0[25u].z, _1796));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1019, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1019, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1019, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_957, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955));
        float _1859 = fma(_957, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955));
        float _1862 = fma(_957, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1890 = frontier_phi_17_15_ladder;
        }
        float _2062;
        if (_1859 > 0.0)
        {
            _2062 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2062 = frontier_phi_26_22_ladder;
        }
        float _2357;
        if (_1862 > 0.0)
        {
            _2357 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2357 = frontier_phi_38_33_ladder;
        }
        float _2359 = isnan(_2062) ? _1890 : (isnan(_1890) ? _2062 : min(_1890, _2062));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1856) + _1845;
        float _2365 = (_2360 * _1859) + _1849;
        float _2366 = (_2360 * _1862) + _1853;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1797);
            frontier_phi_16_38_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_16_38_ladder_2;
        _1880 = frontier_phi_16_38_ladder_1;
        _1882 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_955, _956, _957), _1797);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _772);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1019, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1019, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1019, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_957, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955));
        float _1955 = fma(_957, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955));
        float _1958 = fma(_957, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955));
        float _2067;
        if (_1952 > 0.0)
        {
            _2067 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2384;
        if (_1955 > 0.0)
        {
            _2384 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_35_ladder;
        }
        float _2722;
        if (_1958 > 0.0)
        {
            _2722 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2722 = frontier_phi_50_47_ladder;
        }
        float _2724 = isnan(_2384) ? _2067 : (isnan(_2067) ? _2384 : min(_2067, _2384));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _1952) + _1941;
        float _2730 = (_2725 * _1955) + _1945;
        float _2731 = (_2725 * _1958) + _1949;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2731, cbModelParam._m0[17u].z, fma(_2730, cbModelParam._m0[17u].y, _2729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2731, cbModelParam._m0[18u].z, fma(_2730, cbModelParam._m0[18u].y, _2729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2731, cbModelParam._m0[19u].z, fma(_2730, cbModelParam._m0[19u].y, _2729 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_25_50_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_50_ladder_2;
        _1979 = frontier_phi_25_50_ladder_1;
        _1981 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_955, _956, _957), _1887);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_982 * _931) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1996 = (((_982 * _933) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1998 = (((_982 * _934) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2054 = _2041 / _2053;
    float _2055 = _2045 / _2053;
    float _2056 = _2049 / _2053;
    float _2203;
    float _2204;
    float _2205;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2083 = ((uint(_2056 > cbSceneParam._m0[59u].y) + uint(_2056 > cbSceneParam._m0[59u].x)) + uint(_2056 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2084 = _2083 + 43u;
        uint _2092 = _2083 + 44u;
        uint _2100 = _2083 + 45u;
        uint _2108 = _2083 + 46u;
        float _2119 = fma(_2053, cbSceneParam._m0[_2084].w, fma(_2049, cbSceneParam._m0[_2084].z, fma(_2045, cbSceneParam._m0[_2084].y, _2041 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2053, cbSceneParam._m0[_2092].w, fma(_2049, cbSceneParam._m0[_2092].z, fma(_2045, cbSceneParam._m0[_2092].y, _2041 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2053, cbSceneParam._m0[_2108].w, fma(_2049, cbSceneParam._m0[_2108].z, fma(_2045, cbSceneParam._m0[_2108].y, _2041 * cbSceneParam._m0[_2108].x)));
        float _2136 = cbSceneParam._m0[33u].z * _2131;
        float _2138 = cbSceneParam._m0[33u].w * _2131;
        float _2141 = fma(_2053, cbSceneParam._m0[_2100].w, fma(_2049, cbSceneParam._m0[_2100].z, fma(_2045, cbSceneParam._m0[_2100].y, _2041 * cbSceneParam._m0[_2100].x))) / _2131;
        float _2189 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
        float _4603 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2196 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 + _2119) / _2131, (_2138 + _2123) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2119) / _2131, (_2123 - _2136) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2136) / _2131, (_2123 - _2138) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2138) / _2131, (_2136 + _2123) / _2131), _2141), 0.0)).x), vec4(0.25)));
        _2203 = 1.0 - (_2196 * cbSceneParam._m0[34u].x);
        _2204 = 1.0 - (_2196 * cbSceneParam._m0[34u].y);
        _2205 = 1.0 - (_2196 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2203 = 1.0;
        _2204 = 1.0;
        _2205 = 1.0;
    }
    float _2269;
    float _2271;
    float _2273;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2257 = fma(_2053, cbSceneParam._m0[63u].w, fma(_2049, cbSceneParam._m0[63u].z, fma(_2045, cbSceneParam._m0[63u].y, _2041 * cbSceneParam._m0[63u].x)));
        float _2258 = fma(_2053, cbSceneParam._m0[60u].w, fma(_2049, cbSceneParam._m0[60u].z, fma(_2045, cbSceneParam._m0[60u].y, _2041 * cbSceneParam._m0[60u].x))) / _2257;
        float _2259 = fma(_2053, cbSceneParam._m0[61u].w, fma(_2049, cbSceneParam._m0[61u].z, fma(_2045, cbSceneParam._m0[61u].y, _2041 * cbSceneParam._m0[61u].x))) / _2257;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2258 >= cbSceneParam._m0[64u].x) && (_2259 >= cbSceneParam._m0[64u].y)) && (_2258 <= cbSceneParam._m0[64u].z)) && (_2259 <= cbSceneParam._m0[64u].w))
        {
            float _2397 = fma(_2053, cbSceneParam._m0[62u].w, fma(_2049, cbSceneParam._m0[62u].z, fma(_2045, cbSceneParam._m0[62u].y, _2041 * cbSceneParam._m0[62u].x))) / _2257;
            float _2401 = isnan(cbSceneParam._m0[41u].w) ? _2397 : (isnan(_2397) ? cbSceneParam._m0[41u].w : max(_2397, cbSceneParam._m0[41u].w));
            float _2444 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
            float _4619 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
            float _2451 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2258, cbSceneParam._m0[33u].w + _2259), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2258, _2259 - cbSceneParam._m0[33u].z), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].z, _2259 - cbSceneParam._m0[33u].w), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2259), _2401), 0.0)).x), vec4(0.25)));
            float _2455 = 1.0 - (_2451 * cbSceneParam._m0[34u].x);
            float _2456 = 1.0 - (_2451 * cbSceneParam._m0[34u].y);
            float _2457 = 1.0 - (_2451 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
            frontier_phi_37_36_ladder_1 = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_37_36_ladder_2 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
        }
        else
        {
            frontier_phi_37_36_ladder = _2205;
            frontier_phi_37_36_ladder_1 = _2204;
            frontier_phi_37_36_ladder_2 = _2203;
        }
        _2269 = frontier_phi_37_36_ladder_2;
        _2271 = frontier_phi_37_36_ladder_1;
        _2273 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2269 = _2203;
        _2271 = _2204;
        _2273 = _2205;
    }
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _947 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2316 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2320 = _2280 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_769, _770, _771));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_769, _770, _771));
    float _4655 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4666 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2297].x * _2303) * _2341) + (((cbLight._m0[_2307].x * _2269) * _2316) * _2339);
    float _2349 = ((_2303 * cbLight._m0[_2297].y) * _2341) + (((cbLight._m0[_2307].y * _2271) * _2316) * _2339);
    float _2350 = ((_2303 * cbLight._m0[_2297].z) * _2341) + (((cbLight._m0[_2307].z * _2273) * _2316) * _2339);
    uvec4 _2354 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2356 = _2354.x == 0u;
    float _2458;
    float _2460;
    float _2462;
    if (_2356)
    {
        _2458 = _2348;
        _2460 = _2349;
        _2462 = _2350;
    }
    else
    {
        uint _2466 = _2280 + 6u;
        float _2482 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4677 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2485 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2458 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2348;
        _2460 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2349;
        _2462 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2350;
    }
    bool _2465 = _2354.y == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2465)
    {
        _2520 = _2458;
        _2522 = _2460;
        _2524 = _2462;
    }
    else
    {
        uint _2693 = _2280 + 7u;
        float _2709 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2710 = _2709 * _2709;
        float _4693 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2711 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2712 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2520 = (((cbLight._m0[_2693].x * 0.3183098733425140380859375) * _2711) * _2712) + _2458;
        _2522 = (((cbLight._m0[_2693].y * 0.3183098733425140380859375) * _2711) * _2712) + _2460;
        _2524 = (((cbLight._m0[_2693].z * 0.3183098733425140380859375) * _2711) * _2712) + _2462;
    }
    uint _2527 = _2280 + 8u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _772) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2280].x + _849;
    float _2543 = cbLight._m0[_2280].y + _850;
    float _2544 = cbLight._m0[_2280].z + _851;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2280].xyz));
    float _4709 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _4720 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2556 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2557 = dot(vec3(_769, _770, _771), vec3(_2549, _2550, _2551));
    float _4731 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2549, _2550, _2551));
    float _4742 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2541 * _2541;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
    float _2578 = 0.959999978542327880859375 - _928;
    float _2580 = 0.959999978542327880859375 - _929;
    float _2581 = 0.959999978542327880859375 - _930;
    float _2588 = 1.0 - _2541;
    float _2599 = (0.5 / (((_2556 * ((_2555 * _2588) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2588) + _2541) * _2555))) * _2555;
    float _4753 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    uint _2615 = _2280 + 9u;
    float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _772) * 0.949999988079071044921875);
    float _2627 = _2626 * _2626;
    float _2628 = cbLight._m0[_2320].x + _849;
    float _2629 = cbLight._m0[_2320].y + _850;
    float _2630 = cbLight._m0[_2320].z + _851;
    float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
    float _2635 = _2634 * _2628;
    float _2636 = _2634 * _2629;
    float _2637 = _2634 * _2630;
    float _2638 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2320].xyz));
    float _4764 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2642 = dot(vec3(_769, _770, _771), vec3(_2635, _2636, _2637));
    float _4775 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2646 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2635, _2636, _2637));
    float _4786 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2650 = _2627 * _2627;
    float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
    float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
    float _2668 = 1.0 - _2627;
    float _2678 = (0.5 / (((_2556 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2668) + _2627) * _2641))) * _2641;
    float _4797 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
    float _2690 = (((((_2661 * _2578) + _931) * cbLight._m0[_2615].x) * _2680) * _2303) + ((((cbLight._m0[_2527].x * _2269) * ((_2577 * _2578) + _931)) * _2601) * _2316);
    float _2691 = (((((_2661 * _2580) + _933) * cbLight._m0[_2615].y) * _2680) * _2303) + ((((cbLight._m0[_2527].y * _2271) * ((_2577 * _2580) + _933)) * _2601) * _2316);
    float _2692 = (((((_2661 * _2581) + _934) * cbLight._m0[_2615].z) * _2680) * _2303) + ((((cbLight._m0[_2527].z * _2273) * ((_2577 * _2581) + _934)) * _2601) * _2316);
    float _2748;
    float _2750;
    float _2752;
    if (_2356)
    {
        _2748 = _2690;
        _2750 = _2691;
        _2752 = _2692;
    }
    else
    {
        uint _2754 = _2280 + 2u;
        uint _2758 = _2280 + 10u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _772) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _849;
        float _2775 = cbLight._m0[_2754].y + _850;
        float _2776 = cbLight._m0[_2754].z + _851;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2754].xyz));
        float _4808 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2788 = dot(vec3(_769, _770, _771), vec3(_2781, _2782, _2783));
        float _4819 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4830 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
        float _2814 = 1.0 - _2773;
        float _2824 = (0.5 / (((_2556 * ((_2787 * _2814) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2814) + _2773) * _2787))) * _2787;
        float _4841 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2826 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2827 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2748 = (((((_2807 * _2578) + _931) * cbLight._m0[_2758].x) * _2826) * _2827) + _2690;
        _2750 = (((((_2807 * _2580) + _933) * cbLight._m0[_2758].y) * _2826) * _2827) + _2691;
        _2752 = (((((_2807 * _2581) + _934) * cbLight._m0[_2758].z) * _2826) * _2827) + _2692;
    }
    float _2858;
    float _2860;
    float _2862;
    if (_2465)
    {
        _2858 = _2748;
        _2860 = _2750;
        _2862 = _2752;
    }
    else
    {
        uint _2869 = _2280 + 3u;
        uint _2873 = _2280 + 11u;
        float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2869].w)) * _772) * 0.949999988079071044921875);
        float _2888 = _2887 * _2887;
        float _2889 = cbLight._m0[_2869].x + _849;
        float _2890 = cbLight._m0[_2869].y + _850;
        float _2891 = cbLight._m0[_2869].z + _851;
        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
        float _2896 = _2895 * _2889;
        float _2897 = _2895 * _2890;
        float _2898 = _2895 * _2891;
        float _2899 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2869].xyz));
        float _4857 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2903 = dot(vec3(_769, _770, _771), vec3(_2896, _2897, _2898));
        float _4868 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2907 = dot(vec3(cbLight._m0[_2869].xyz), vec3(_2896, _2897, _2898));
        float _4879 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2911 = _2888 * _2888;
        float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
        float _2922 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _2929 = 1.0 - _2888;
        float _2939 = (0.5 / (((_2556 * ((_2902 * _2929) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2929) + _2888) * _2902))) * _2902;
        float _4890 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2941 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
        float _2942 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2858 = (((((_2922 * _2578) + _931) * cbLight._m0[_2873].x) * _2941) * _2942) + _2748;
        _2860 = (((((_2922 * _2580) + _933) * cbLight._m0[_2873].y) * _2941) * _2942) + _2750;
        _2862 = (((((_2922 * _2581) + _934) * cbLight._m0[_2873].z) * _2941) * _2942) + _2752;
    }
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_2278.y == 0u)
    {
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.x;
        uint _2975 = uint((float(_2963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2964))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2964)));
        float _2985 = (log2(_2056 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2986 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        uint _2989 = uint(isnan(14.0) ? _2986 : (isnan(_2986) ? 14.0 : min(_2986, 14.0)));
        uvec4 _2994 = texelFetch(g_lightClusterGridBuffer, int(((_2989 << 2u) + (_2975 << 6u)) >> 2u));
        uint _2995 = _2994.x;
        uint _2996 = _2963.z;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((((1u << ((_2996 >> 4u) & 15u)) + 4294967295u) & _2995) == 0u) || ((_2996 & 240u) == 0u))
        {
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
        }
        else
        {
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            uint _3234 = 0u;
            uint _3243;
            bool _3244;
            for (;;)
            {
                _3243 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                _3244 = _3243 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3244)
                {
                    frontier_phi_71_pred = _3233;
                    frontier_phi_71_pred_1 = _3232;
                    frontier_phi_71_pred_2 = _3231;
                    frontier_phi_71_pred_3 = _3230;
                    frontier_phi_71_pred_4 = _3229;
                    frontier_phi_71_pred_5 = _3228;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3243;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3234 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2054;
                        float _3440 = _3399.y - _2055;
                        float _3441 = _3399.z - _2056;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_888, _891, _894), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4916 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2054;
                        float _3475 = (-0.0) - _2055;
                        float _3476 = (-0.0) - _2056;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3490 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _963;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3481 + _3446;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_888, _891, _894), vec3(_3481, _3482, _3483));
                        float _4932 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3515 = dot(vec3(_888, _891, _894), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4943 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3459 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3449) + _3524;
                        float _4954 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4965 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) / ((_3522 * _3522) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3303 = (_3470 * _3418.x) + _3376;
                        _3304 = (_3470 * _3418.y) + _3377;
                        _3305 = (_3470 * _3418.z) + _3378;
                        _3300 = (_3550 * _3435.x) + _3373;
                        _3301 = (_3550 * _3435.y) + _3374;
                        _3302 = (_3550 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_71_pred = _3305;
                    frontier_phi_71_pred_1 = _3304;
                    frontier_phi_71_pred_2 = _3303;
                    frontier_phi_71_pred_3 = _3302;
                    frontier_phi_71_pred_4 = _3301;
                    frontier_phi_71_pred_5 = _3300;
                }
                _3086 = frontier_phi_71_pred;
                _3084 = frontier_phi_71_pred_1;
                _3082 = frontier_phi_71_pred_2;
                _3080 = frontier_phi_71_pred_3;
                _3078 = frontier_phi_71_pred_4;
                _3076 = frontier_phi_71_pred_5;
                uint _3235 = _3234 + 1u;
                if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3228 = _3076;
                    _3229 = _3078;
                    _3230 = _3080;
                    _3231 = _3082;
                    _3232 = _3084;
                    _3233 = _3086;
                    _3234 = _3235;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
        }
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.z;
        uint _3092 = (_3090 >> 8u) & 15u;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((4294967295u << _3092) & _2995) == 0u)
        {
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
        }
        else
        {
            float _3221 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
            float _3222 = _3221 * _2054;
            float _3223 = _3221 * _2055;
            float _3224 = _3221 * _2056;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3092 < ((_3090 >> 12u) & 15u))
            {
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3356 = _3075;
                float _3357 = _3077;
                float _3358 = _3079;
                float _3359 = _3081;
                float _3360 = _3083;
                float _3361 = _3085;
                uint _3362 = _3092;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3372)
                    {
                        frontier_phi_82_pred = _3361;
                        frontier_phi_82_pred_1 = _3360;
                        frontier_phi_82_pred_2 = _3359;
                        frontier_phi_82_pred_3 = _3358;
                        frontier_phi_82_pred_4 = _3357;
                        frontier_phi_82_pred_5 = _3356;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3356;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        uint _3583 = _3371;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2056, _3701.z, fma(_2055, _3701.y, _3701.x * _2054)) + _3701.w;
                            _3714 = !((fma(_2056, _3682.z, fma(_2055, _3682.y, _3682.x * _2054)) + _3682.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2054;
                                float _3742 = _3609.y - _2055;
                                float _3743 = _3609.z - _2056;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4976 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_888, _891, _894))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2056, _3652.z, fma(_2055, _3652.y, _3652.x * _2054)) + _3652.w) / _3713;
                                float _3773 = (fma(_2056, _3667.z, fma(_2055, _3667.y, _3667.x * _2054)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4992 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _963;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3222;
                                float _3803 = _3749 - _3223;
                                float _3804 = _3750 - _3224;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_888, _891, _894), vec3((-0.0) - _3222, (-0.0) - _3223, (-0.0) - _3224));
                                float _5003 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3816 = dot(vec3(_888, _891, _894), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _5014 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_888, _891, _894), vec3(_3748, _3749, _3750))) + _3825;
                                float _5025 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _5036 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3779 * _3625.z;
                                frontier_phi_88_pred_1 = _3779 * _3625.y;
                                frontier_phi_88_pred_2 = _3779 * _3625.x;
                                frontier_phi_88_pred_3 = _3853 * _3637.z;
                                frontier_phi_88_pred_4 = _3853 * _3637.y;
                                frontier_phi_88_pred_5 = _3853 * _3637.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3862 = frontier_phi_88_pred;
                            _3861 = frontier_phi_88_pred_1;
                            _3860 = frontier_phi_88_pred_2;
                            _3859 = frontier_phi_88_pred_3;
                            _3858 = frontier_phi_88_pred_4;
                            _3857 = frontier_phi_88_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3569;
                        frontier_phi_82_pred_1 = _3568;
                        frontier_phi_82_pred_2 = _3567;
                        frontier_phi_82_pred_3 = _3566;
                        frontier_phi_82_pred_4 = _3565;
                        frontier_phi_82_pred_5 = _3564;
                    }
                    _3207 = frontier_phi_82_pred;
                    _3205 = frontier_phi_82_pred_1;
                    _3203 = frontier_phi_82_pred_2;
                    _3201 = frontier_phi_82_pred_3;
                    _3199 = frontier_phi_82_pred_4;
                    _3197 = frontier_phi_82_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3197;
                        _3357 = _3199;
                        _3358 = _3201;
                        _3359 = _3203;
                        _3360 = _3205;
                        _3361 = _3207;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3203;
                frontier_phi_63_64_ladder_1 = _3207;
                frontier_phi_63_64_ladder_2 = _3205;
                frontier_phi_63_64_ladder_3 = _3201;
                frontier_phi_63_64_ladder_4 = _3199;
                frontier_phi_63_64_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_63_64_ladder = _3081;
                frontier_phi_63_64_ladder_1 = _3085;
                frontier_phi_63_64_ladder_2 = _3083;
                frontier_phi_63_64_ladder_3 = _3079;
                frontier_phi_63_64_ladder_4 = _3077;
                frontier_phi_63_64_ladder_5 = _3075;
            }
            _3196 = frontier_phi_63_64_ladder_5;
            _3198 = frontier_phi_63_64_ladder_4;
            _3200 = frontier_phi_63_64_ladder_3;
            _3202 = frontier_phi_63_64_ladder;
            _3204 = frontier_phi_63_64_ladder_2;
            _3206 = frontier_phi_63_64_ladder_1;
        }
        float _3211 = isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0));
        _3008 = (_3211 * _3202) + _2520;
        _3010 = (_3211 * _3204) + _2522;
        _3012 = (_3211 * _3206) + _2524;
        _3014 = ((_3196 * _931) * _3211) + _2858;
        _3016 = ((_3198 * _933) * _3211) + _2860;
        _3018 = ((_3200 * _934) * _3211) + _2862;
    }
    else
    {
        _3008 = _2520;
        _3010 = _2522;
        _3012 = _2524;
        _3014 = _2858;
        _3016 = _2860;
        _3018 = _2862;
    }
    float _5052 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _5063 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _5074 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _3035 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3008 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _947))) + ((_3014 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3010 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _947))) + ((_3016 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    float _3037 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3012 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _947))) + ((_3018 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    uint _3038 = _274 + 6u;
    float _3046 = _869 / cbSceneParam._m0[86u].x;
    float _3047 = _870 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _3100 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _3101 = _3100 / _791;
        float _3112 = _3101 * _842;
        float _3113 = _843 * _3101;
        float _3114 = (-0.0) - _3113;
        float _3116 = _3101 * _844;
        float _3118 = (cbSceneParam._m0[77u].w * _3114) / _3100;
        float _3119 = _3118 + cbSceneParam._m0[79u].w;
        float _3120 = cbSceneParam._m0[79u].w - _3113;
        float _3126 = sqrt(((_3112 * _3112) + (_3113 * _3113)) + (_3116 * _3116));
        float _3129 = (1.0 - (cbSceneParam._m0[77u].w / _3100)) * _3126;
        float _3134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3313;
        if (abs((_3114 - _3118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3313 = ((((_3119 > 0.0) ? exp2(_3134 * _3119) : (2.0 - exp2(_3136 * _3119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3129;
        }
        else
        {
            float _3257 = 1.0 / cbSceneParam._m0[80u].x;
            float _3258 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : max(_3119, _3120));
            float _3259 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : min(_3119, _3120));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            _3313 = ((abs(_3126 / _3114) * cbSceneParam._m0[80u].y) * ((((_3268 - _3269) * 2.0) - ((exp2(_3134 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0)))) - exp2(_3134 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))))) * _3257)) - ((exp2(_3136 * _3268) - exp2(_3136 * _3269)) * _3257))) + (_3129 * cbSceneParam._m0[80u].z);
        }
        vec4 _3315 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3324 = exp2((_3313 * (-1.44269502162933349609375)) * (1.0 - _3315.w));
        float _3325 = log2(_3324);
        float _3341 = log2(_3066);
        _3138 = (exp2(_3341 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].x)) * _3315.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3140 = (exp2(_3341 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].y)) * _3315.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3142 = (exp2(_3341 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].z)) * _3315.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3144 = _3324 * _3066;
    }
    else
    {
        _3138 = _3063;
        _3140 = _3064;
        _3142 = _3065;
        _3144 = _3066;
    }
    bool _3351;
    vec4 _3154;
    vec4 _3176;
    float _3178;
    float _3182;
    float _3183;
    float _3184;
    float _3185;
    bool _3195;
    for (;;)
    {
        _3154 = cbMatDynParam._m0[0u];
        float _3156 = roundEven(_3154.y);
        bool _3157 = _3156 == 3.0;
        float _3158 = log2(_3144);
        float _3165 = exp2(_3158 * cbSceneParam._m0[78u].x) * _3035;
        float _3166 = exp2(_3158 * cbSceneParam._m0[78u].y) * _3036;
        float _3167 = exp2(_3158 * cbSceneParam._m0[78u].z) * _3037;
        float _3174 = _858 + (-0.5);
        _3176 = cbMtdParam._m0[1u];
        _3178 = _3176.y * _3174;
        float _3181 = (_3156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3182 = _3181 * (_3157 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3138)));
        _3183 = _3181 * (_3157 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3140)));
        _3184 = _3181 * (_3157 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3142)));
        _3185 = _3174 * 0.999000012874603271484375;
        _3195 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3195)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3185) < 0.5)
            {
                _3351 = true;
                break;
            }
        }
        uint _3292 = _907 + uint(_3154.w);
        if ((cbInstanceData._m0[_3292].w < 1.0) && ((cbInstanceData._m0[_3292].w + _3185) < 0.5))
        {
            _3351 = true;
            break;
        }
        if ((_3178 + 1.0) < _3176.x)
        {
            _3351 = true;
            break;
        }
        _3351 = false;
        break;
    }
    float _3555;
    if (_3351)
    {
        discard_state = true;
        _3555 = 0.0;
    }
    else
    {
        _3555 = cbInstanceData._m0[_3038].w;
    }
    SV_Target.x = _3182;
    SV_Target.y = _3183;
    SV_Target.z = _3184;
    SV_Target.w = _3555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3038].w;
    discard_exit();
}


