#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1433;
float _3837;
float _3838;
float _3839;
float _3840;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3849 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3860 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3871 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3882 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _439 = (_432 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _440 = (_432 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _441 = (_432 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].y) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3893 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _518 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _512;
    float _521 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _513;
    float _524 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _514;
    float _531 = ((_512 - _518) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) + _518;
    float _532 = ((_513 - _521) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _521;
    float _533 = ((_514 - _524) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _524;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _432) + _592;
    float _602 = ((_573.y - _593) * _432) + _593;
    float _603 = ((_573.z - _594) * _432) + _594;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _628 = ((_615.z - _603) * _505) + _603;
    float _631 = ((((_615.x - _601) * _505) + _601) * 2.0) + (-1.0);
    float _632 = ((((_615.y - _602) * _505) + _602) * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3904 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))));
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _677 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _693 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_679 - _680) * cbMtdParam._m0[24u].z) + _680) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3915 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _701 = (_694 * (cbMtdParam._m0[17u].x - _531)) + _531;
    float _702 = (_694 * (cbMtdParam._m0[17u].y - _532)) + _532;
    float _703 = (_694 * (cbMtdParam._m0[17u].z - _533)) + _533;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _731 = _729.x;
    float _749 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _731) * _432) + _731;
    float _766 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _749) * _505) + _749;
    float _770 = ((_715.x - _766) * cbMtdParam._m0[19u].z) + _766;
    float _772 = _770 - (_770 * _694);
    float _777 = (((_550.z - _628) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _628;
    float _781 = ((_652.z - _777) * cbMtdParam._m0[19u].w) + _777;
    vec4 _794 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _801 = (_794.x * 2.0) + (-1.0);
    float _802 = (_794.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _3926 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _811 = (_694 * (_794.z - _781)) + _781;
    float _820 = (_631 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)))) + (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _821 = (_632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)))) + (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _833 = (((_801 - _820) + (cbMtdParam._m0[21u].x * _820)) * _694) + _820;
    float _834 = (((_802 - _821) + (cbMtdParam._m0[21u].x * _821)) * _694) + _821;
    float _835 = (_694 * (sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) - _638)) + _638;
    float _839 = cbMtdParam._m0[22u].x + _652.w;
    float _842 = fma(_835, _246 * NORMAL.x, fma(_834, _253 * TANGENT.x, (_239 * _231) * _833));
    float _845 = fma(_835, _246 * NORMAL.y, fma(_834, _253 * TANGENT.y, (_239 * _232) * _833));
    float _848 = fma(_835, _246 * NORMAL.z, fma(_834, _253 * TANGENT.z, (_239 * _233) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3937 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _856 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _3959 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3970 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3981 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3992 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _861 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _875 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _926 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _916);
    float _927 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _916);
    float _928 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _916);
    float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
    float _933 = _926 * _932;
    float _934 = _927 * _932;
    float _935 = _928 * _932;
    vec4 _940 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _942 = _940.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1114 = sqrt(((_926 * _926) + (_927 * _927)) + (_928 * _928));
        float _1120 = (cbMatDynParam._m0[5u].x * _1114) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1125 = (cbMatDynParam._m0[5u].z * _1114) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _1121)) + _1121) < ((_942 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _975 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _978 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _991 = _280 + 9u;
    uint _992 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4025 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1004 = 1.0 - _861;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _861;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _861;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _861;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1031 = ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * TEXCOORD_5.w) * _1027.x;
    float _1032 = dot(vec3(_853, _854, _855), vec3(_933, _934, _935));
    float _1035 = _1032 * 2.0;
    float _1039 = (_1035 * _853) - _933;
    float _1040 = (_1035 * _854) - _934;
    float _1041 = (_1035 * _855) - _935;
    float _1045 = abs(dot(vec3(_933, _934, _935), vec3(_853, _854, _855)));
    float _4058 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1047 = sqrt(_856);
    float _1060 = exp2((_1047 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1047 * 3.0));
    float _1066 = (1.0 - _1060) * ((_1047 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1067 = _1060 * _1047;
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1161 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1165 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1190 = _1095 + _853;
        float _1191 = _1099 + _854;
        float _1192 = _1103 + _855;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_853, _854, _855), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4106 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_853, _854, _855), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4139 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_853, _854, _855), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4172 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1478 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1482 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1505 = _1095 + _853;
        float _1506 = _1099 + _854;
        float _1507 = _1103 + _855;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_853, _854, _855), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4235 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_853, _854, _855), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4268 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_853, _854, _855), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4301 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = _1433;
        _1752 = _1433;
        _1753 = _1433;
        _1754 = _1433;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1445)) + _1445;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1446)) + _1446;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1447)) + _1447;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1039 * 0.5;
    float _1812 = _1040 * 0.5;
    float _1813 = _1041 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1854;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1865;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1856 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1869 = (_1865 * cbModelParam._m0[1u].x) + (_1854 * (1.0 - cbModelParam._m0[1u].x));
    float _1879 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1879 : min(cbModelParam._m0[25u].z, _1879));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1928 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1932 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1936 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1939 = fma(_1041, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039));
        float _1942 = fma(_1041, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039));
        float _1945 = fma(_1041, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039));
        float _1973;
        if (_1939 > 0.0)
        {
            _1973 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1973 = frontier_phi_17_15_ladder;
        }
        float _2197;
        if (_1942 > 0.0)
        {
            _2197 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2197 = frontier_phi_26_22_ladder;
        }
        float _2454;
        if (_1945 > 0.0)
        {
            _2454 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2454 = frontier_phi_38_33_ladder;
        }
        float _2456 = isnan(_2197) ? _1973 : (isnan(_1973) ? _2197 : min(_1973, _2197));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1939) + _1928;
        float _2462 = (_2457 * _1942) + _1932;
        float _2463 = (_2457 * _1945) + _1936;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2464;
        float _2468 = _2464 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 > _2468) || ((_2462 < _2466) || ((_2461 < _2466) || (_2461 > _2468))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2463, cbModelParam._m0[9u].z, fma(_2462, cbModelParam._m0[9u].y, _2461 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2463, cbModelParam._m0[10u].z, fma(_2462, cbModelParam._m0[10u].y, _2461 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2463, cbModelParam._m0[11u].z, fma(_2462, cbModelParam._m0[11u].y, _2461 * cbModelParam._m0[11u].x))), _1880);
            frontier_phi_16_38_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _1961 = frontier_phi_16_38_ladder_2;
        _1963 = frontier_phi_16_38_ladder_1;
        _1965 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1039, _1040, _1041), _1880);
        _1961 = _1949.x * cbModelParam._m0[1u].y;
        _1963 = _1949.y * cbModelParam._m0[1u].y;
        _1965 = _1949.z * cbModelParam._m0[1u].y;
    }
    float _1969 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1969 : min(cbModelParam._m0[25u].w, _1969));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2024 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _2028 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2032 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2035 = fma(_1041, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039));
        float _2038 = fma(_1041, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039));
        float _2041 = fma(_1041, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039));
        float _2202;
        if (_2035 > 0.0)
        {
            _2202 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2202 = frontier_phi_28_24_ladder;
        }
        float _2481;
        if (_2038 > 0.0)
        {
            _2481 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2481 = frontier_phi_40_35_ladder;
        }
        float _2694;
        if (_2041 > 0.0)
        {
            _2694 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2694 = frontier_phi_49_46_ladder;
        }
        float _2696 = isnan(_2481) ? _2202 : (isnan(_2202) ? _2481 : min(_2202, _2481));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _2035) + _2024;
        float _2702 = (_2697 * _2038) + _2028;
        float _2703 = (_2697 * _2041) + _2032;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1970);
            frontier_phi_25_49_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2060 = frontier_phi_25_49_ladder_2;
        _2062 = frontier_phi_25_49_ladder_1;
        _2064 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1039, _1040, _1041), _1970);
        _2060 = _2044.x * cbModelParam._m0[1u].z;
        _2062 = _2044.y * cbModelParam._m0[1u].z;
        _2064 = _2044.z * cbModelParam._m0[1u].z;
    }
    float _2077 = (((_1066 * _1015) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2079 = (((_1066 * _1017) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1066 * _1018) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2084 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2079, cbSceneParam._m0[89u].y, _2077 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2079, cbSceneParam._m0[90u].y, _2077 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2079, cbSceneParam._m0[91u].y, _2077 * cbSceneParam._m0[91u].x));
    vec4 _2098 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_953, _954));
    float _2100 = _2098.w;
    float _2112 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2100);
    float _2113 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2100);
    float _2114 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2100);
    uvec4 _2118 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2120 = _2118.x * 14u;
    uint _2121 = _2120 + 13u;
    float _2128 = _1031 + (-1.0);
    float _2133 = (cbLight._m0[_2121].x * _2128) + 1.0;
    float _2134 = (cbLight._m0[_2121].y * _2128) + 1.0;
    float _2135 = (cbLight._m0[_2121].z * _2128) + 1.0;
    float _2136 = (cbLight._m0[_2121].w * _2128) + 1.0;
    uint _2137 = _2120 + 5u;
    float _2143 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2147 = _2120 + 4u;
    float _2156 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2160 = _2120 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_853, _854, _855));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_853, _854, _855));
    float _4437 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4448 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2137].x * _2143) * _2181) + (((cbLight._m0[_2147].x * _2112) * _2156) * _2179);
    float _2189 = ((_2143 * cbLight._m0[_2137].y) * _2181) + (((cbLight._m0[_2147].y * _2113) * _2156) * _2179);
    float _2190 = ((_2143 * cbLight._m0[_2137].z) * _2181) + (((cbLight._m0[_2147].z * _2114) * _2156) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2120 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2196)
    {
        _2207 = _2188;
        _2209 = _2189;
        _2211 = _2190;
    }
    else
    {
        uint _2215 = _2120 + 6u;
        float _2231 = (dot(vec3(cbLight._m0[_2120 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4459 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2234 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2207 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2188;
        _2209 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2189;
        _2211 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2190;
    }
    bool _2214 = _2194.y == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2214)
    {
        _2252 = _2207;
        _2254 = _2209;
        _2256 = _2211;
    }
    else
    {
        uint _2425 = _2120 + 7u;
        float _2441 = (dot(vec3(cbLight._m0[_2120 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4475 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2444 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2252 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2207;
        _2254 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2209;
        _2256 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2211;
    }
    uint _2259 = _2120 + 8u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _856) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2120].x + _933;
    float _2275 = cbLight._m0[_2120].y + _934;
    float _2276 = cbLight._m0[_2120].z + _935;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2120].xyz));
    float _4491 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2288 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2289 = dot(vec3(_853, _854, _855), vec3(_2281, _2282, _2283));
    float _4513 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2281, _2282, _2283));
    float _4524 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2273 * _2273;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2310 = 0.959999978542327880859375 - _1012;
    float _2312 = 0.959999978542327880859375 - _1013;
    float _2313 = 0.959999978542327880859375 - _1014;
    float _2320 = 1.0 - _2273;
    float _2331 = (0.5 / (((_2288 * ((_2287 * _2320) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2320) + _2273) * _2287))) * _2287;
    float _4535 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    uint _2347 = _2120 + 9u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _856) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2160].x + _933;
    float _2361 = cbLight._m0[_2160].y + _934;
    float _2362 = cbLight._m0[_2160].z + _935;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2160].xyz));
    float _4546 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2374 = dot(vec3(_853, _854, _855), vec3(_2367, _2368, _2369));
    float _4557 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2367, _2368, _2369));
    float _4568 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2359 * _2359;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2400 = 1.0 - _2359;
    float _2410 = (0.5 / (((_2288 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2400) + _2359) * _2373))) * _2373;
    float _4579 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    float _2422 = (((((_2393 * _2310) + _1015) * cbLight._m0[_2347].x) * _2412) * _2143) + ((((cbLight._m0[_2259].x * _2112) * ((_2309 * _2310) + _1015)) * _2333) * _2156);
    float _2423 = (((((_2393 * _2312) + _1017) * cbLight._m0[_2347].y) * _2412) * _2143) + ((((cbLight._m0[_2259].y * _2113) * ((_2309 * _2312) + _1017)) * _2333) * _2156);
    float _2424 = (((((_2393 * _2313) + _1018) * cbLight._m0[_2347].z) * _2412) * _2143) + ((((cbLight._m0[_2259].z * _2114) * ((_2309 * _2313) + _1018)) * _2333) * _2156);
    float _2486;
    float _2488;
    float _2490;
    if (_2196)
    {
        _2486 = _2422;
        _2488 = _2423;
        _2490 = _2424;
    }
    else
    {
        uint _2492 = _2120 + 2u;
        uint _2496 = _2120 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _856) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _933;
        float _2513 = cbLight._m0[_2492].y + _934;
        float _2514 = cbLight._m0[_2492].z + _935;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2492].xyz));
        float _4590 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2526 = dot(vec3(_853, _854, _855), vec3(_2519, _2520, _2521));
        float _4601 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4612 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2288 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2552) + _2511) * _2525))) * _2525;
        float _4623 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2486 = (((((_2545 * _2310) + _1015) * cbLight._m0[_2496].x) * _2564) * _2565) + _2422;
        _2488 = (((((_2545 * _2312) + _1017) * cbLight._m0[_2496].y) * _2564) * _2565) + _2423;
        _2490 = (((((_2545 * _2313) + _1018) * cbLight._m0[_2496].z) * _2564) * _2565) + _2424;
    }
    float _2600;
    float _2602;
    float _2604;
    if (_2214)
    {
        _2600 = _2486;
        _2602 = _2488;
        _2604 = _2490;
    }
    else
    {
        uint _2611 = _2120 + 3u;
        uint _2615 = _2120 + 11u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _856) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _933;
        float _2632 = cbLight._m0[_2611].y + _934;
        float _2633 = cbLight._m0[_2611].z + _935;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2611].xyz));
        float _4639 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2645 = dot(vec3(_853, _854, _855), vec3(_2638, _2639, _2640));
        float _4650 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4661 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2288 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2671) + _2630) * _2644))) * _2644;
        float _4672 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2600 = (((((_2664 * _2310) + _1015) * cbLight._m0[_2615].x) * _2683) * _2684) + _2486;
        _2602 = (((((_2664 * _2312) + _1017) * cbLight._m0[_2615].y) * _2683) * _2684) + _2488;
        _2604 = (((((_2664 * _2313) + _1018) * cbLight._m0[_2615].z) * _2683) * _2684) + _2490;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2118.y == 0u)
    {
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2759;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2759;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2759;
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _2775)));
        float _2796 = (log2(_2762 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3076)
                {
                    frontier_phi_66_pred = _3060;
                    frontier_phi_66_pred_1 = _3065;
                    frontier_phi_66_pred_2 = _3064;
                    frontier_phi_66_pred_3 = _3063;
                    frontier_phi_66_pred_4 = _3062;
                    frontier_phi_66_pred_5 = _3061;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3075;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3066 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _2760;
                        float _3272 = _3231.y - _2761;
                        float _3273 = _3231.z - _2762;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_972, _975, _978), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4698 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _2760;
                        float _3307 = (-0.0) - _2761;
                        float _3308 = (-0.0) - _2762;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3323 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3324 = 1.0 - _1047;
                        float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                        float _3332 = _3331 * _3331;
                        float _3333 = _3332 * _3332;
                        float _3334 = _3313 + _3278;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3344 = dot(vec3(_972, _975, _978), vec3(_3313, _3314, _3315));
                        float _4714 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3348 = dot(vec3(_972, _975, _978), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                        float _4725 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                        float _3356 = _3291 * _3332;
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3281) + _3357;
                        float _4736 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3362 = 1.0 - _3332;
                        float _3372 = (0.5 / (((_3361 * ((_3347 * _3362) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3332) * _3347))) * _3361;
                        float _4747 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3383 = (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3355 * _3355) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3135 = (_3302 * _3250.x) + _3208;
                        _3136 = (_3302 * _3250.y) + _3209;
                        _3137 = (_3302 * _3250.z) + _3210;
                        _3132 = (_3383 * _3267.x) + _3205;
                        _3133 = (_3383 * _3267.y) + _3206;
                        _3134 = (_3383 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_66_pred = _3132;
                    frontier_phi_66_pred_1 = _3137;
                    frontier_phi_66_pred_2 = _3136;
                    frontier_phi_66_pred_3 = _3135;
                    frontier_phi_66_pred_4 = _3134;
                    frontier_phi_66_pred_5 = _3133;
                }
                _2908 = frontier_phi_66_pred;
                _2918 = frontier_phi_66_pred_1;
                _2916 = frontier_phi_66_pred_2;
                _2914 = frontier_phi_66_pred_3;
                _2912 = frontier_phi_66_pred_4;
                _2910 = frontier_phi_66_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2908;
                    _3061 = _2910;
                    _3062 = _2912;
                    _3063 = _2914;
                    _3064 = _2916;
                    _3065 = _2918;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2924) & _2806) == 0u)
        {
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
            float _3054 = _3053 * _2760;
            float _3055 = _3053 * _2761;
            float _3056 = _3053 * _2762;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3188 = _2907;
                float _3189 = _2909;
                float _3190 = _2911;
                float _3191 = _2913;
                float _3192 = _2915;
                float _3193 = _2917;
                uint _3194 = _2924;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3204)
                    {
                        frontier_phi_77_pred = _3193;
                        frontier_phi_77_pred_1 = _3192;
                        frontier_phi_77_pred_2 = _3191;
                        frontier_phi_77_pred_3 = _3190;
                        frontier_phi_77_pred_4 = _3189;
                        frontier_phi_77_pred_5 = _3188;
                    }
                    else
                    {
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        uint _3416 = _3203;
                        uint _3417;
                        vec4 _3442;
                        float _3443;
                        vec4 _3458;
                        vec3 _3470;
                        vec4 _3485;
                        vec4 _3500;
                        float _3546;
                        bool _3547;
                        for (;;)
                        {
                            uint _3427 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3416));
                            _3417 = (_3416 + 4294967295u) & _3416;
                            uint _3429 = _3427 * 40u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3443 = _3442.w;
                            uint _3445 = (_3427 * 40u) + 4u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3427 * 40u) + 8u;
                            _3470 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x));
                            uint _3472 = (_3427 * 40u) + 16u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3427 * 40u) + 20u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3427 * 40u) + 24u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3521 = (_3427 * 40u) + 28u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3546 = fma(_2762, _3534.z, fma(_2761, _3534.y, _3534.x * _2760)) + _3534.w;
                            _3547 = !((fma(_2762, _3515.z, fma(_2761, _3515.y, _3515.x * _2760)) + _3515.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3547)
                            {
                                float _3574 = _3442.x - _2760;
                                float _3575 = _3442.y - _2761;
                                float _3576 = _3442.z - _2762;
                                float _3577 = dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576));
                                float _3580 = inversesqrt(_3577);
                                float _3581 = _3580 * _3574;
                                float _3582 = _3580 * _3575;
                                float _3583 = _3580 * _3576;
                                float _3587 = 1.0 - (_3577 / (_3443 * _3443));
                                float _4758 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3592 = sqrt(_3577) * _3458.w;
                                float _3594 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                                float _3595 = _3594 * _3594;
                                float _3598 = ((1.0 - _3595) * dot(vec3(_3581, _3582, _3583), vec3(_972, _975, _978))) + _3595;
                                float _3601 = _3592 * _3592;
                                float _3605 = (fma(_2762, _3485.z, fma(_2761, _3485.y, _3485.x * _2760)) + _3485.w) / _3546;
                                float _3606 = (fma(_2762, _3500.z, fma(_2761, _3500.y, _3500.x * _2760)) + _3500.w) / _3546;
                                float _3610 = 1.0 - dot(vec2(_3605, _3606), vec2(_3605, _3606));
                                float _4774 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3612 = _3611 * (((isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0))) * _3588) / ((_3601 * 0.699999988079071044921875) + 1.0));
                                float _3624 = exp2(log2(1.0 / ((_3601 * 3.5) + 5.0)) * 0.25);
                                float _3625 = 1.0 - _1047;
                                float _3632 = sqrt(1.0 - ((1.0 - (_3625 * _3625)) * (1.0 - (_3624 * _3624))));
                                float _3633 = _3632 * _3632;
                                float _3634 = _3633 * _3633;
                                float _3635 = _3581 - _3054;
                                float _3636 = _3582 - _3055;
                                float _3637 = _3583 - _3056;
                                float _3641 = inversesqrt(dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637)));
                                float _3645 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4785 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3649 = dot(vec3(_972, _975, _978), vec3(_3641 * _3635, _3641 * _3636, _3641 * _3637));
                                float _4796 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3656 = ((_3652 * _3652) * (_3634 + (-1.0))) + 1.0;
                                float _3657 = _3594 * _3633;
                                float _3658 = _3657 * _3657;
                                float _3664 = ((1.0 - _3658) * dot(vec3(_972, _975, _978), vec3(_3581, _3582, _3583))) + _3658;
                                float _4807 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3666 = 1.0 - _3633;
                                float _3676 = (0.5 / (((_3665 * ((_3648 * _3666) + _3633)) + 9.9999999392252902907785028219223e-09) + (((_3665 * _3666) + _3633) * _3648))) * _3665;
                                float _4818 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3686 = (_3611 * _3588) * (((_3634 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3656 * _3656) * ((_3601 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3612 * _3458.y;
                                frontier_phi_83_pred_1 = _3612 * _3458.x;
                                frontier_phi_83_pred_2 = _3686 * _3470.z;
                                frontier_phi_83_pred_3 = _3686 * _3470.y;
                                frontier_phi_83_pred_4 = _3686 * _3470.x;
                                frontier_phi_83_pred_5 = _3612 * _3458.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3694 = frontier_phi_83_pred;
                            _3693 = frontier_phi_83_pred_1;
                            _3692 = frontier_phi_83_pred_2;
                            _3691 = frontier_phi_83_pred_3;
                            _3690 = frontier_phi_83_pred_4;
                            _3695 = frontier_phi_83_pred_5;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            if (_3417 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3417;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3402;
                        frontier_phi_77_pred_1 = _3401;
                        frontier_phi_77_pred_2 = _3400;
                        frontier_phi_77_pred_3 = _3399;
                        frontier_phi_77_pred_4 = _3398;
                        frontier_phi_77_pred_5 = _3397;
                    }
                    _3039 = frontier_phi_77_pred;
                    _3037 = frontier_phi_77_pred_1;
                    _3035 = frontier_phi_77_pred_2;
                    _3033 = frontier_phi_77_pred_3;
                    _3031 = frontier_phi_77_pred_4;
                    _3029 = frontier_phi_77_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3029;
                        _3189 = _3031;
                        _3190 = _3033;
                        _3191 = _3035;
                        _3192 = _3037;
                        _3193 = _3039;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3033;
                frontier_phi_58_59_ladder_1 = _3039;
                frontier_phi_58_59_ladder_2 = _3037;
                frontier_phi_58_59_ladder_3 = _3035;
                frontier_phi_58_59_ladder_4 = _3031;
                frontier_phi_58_59_ladder_5 = _3029;
            }
            else
            {
                frontier_phi_58_59_ladder = _2911;
                frontier_phi_58_59_ladder_1 = _2917;
                frontier_phi_58_59_ladder_2 = _2915;
                frontier_phi_58_59_ladder_3 = _2913;
                frontier_phi_58_59_ladder_4 = _2909;
                frontier_phi_58_59_ladder_5 = _2907;
            }
            _3028 = frontier_phi_58_59_ladder_5;
            _3030 = frontier_phi_58_59_ladder_4;
            _3032 = frontier_phi_58_59_ladder;
            _3034 = frontier_phi_58_59_ladder_3;
            _3036 = frontier_phi_58_59_ladder_2;
            _3038 = frontier_phi_58_59_ladder_1;
        }
        float _3043 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _2819 = (_3043 * _3034) + _2252;
        _2821 = (_3043 * _3036) + _2254;
        _2823 = (_3043 * _3038) + _2256;
        _2825 = ((_3028 * _1015) * _3043) + _2600;
        _2827 = ((_3030 * _1017) * _3043) + _2602;
        _2829 = ((_3032 * _1018) * _3043) + _2604;
    }
    else
    {
        _2819 = _2252;
        _2821 = _2254;
        _2823 = _2256;
        _2825 = _2600;
        _2827 = _2602;
        _2829 = _2604;
    }
    float _4834 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4845 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4856 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2846 = ((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2819 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1031))) + ((_2825 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _2847 = ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2821 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1031))) + ((_2827 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2823 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1031))) + ((_2829 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    uint _2849 = _280 + 6u;
    float _2857 = _953 / cbSceneParam._m0[86u].x;
    float _2858 = _954 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _875 : (isnan(_875) ? cbSceneParam._m0[77u].w : min(_875, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_875 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_875) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _875 : min(cbSceneParam._m0[80u].w, _875));
        float _2933 = _2932 / _875;
        float _2944 = _2933 * _926;
        float _2945 = _927 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2948 = _2933 * _928;
        float _2950 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2945;
        float _2958 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2946 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3091 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3145 = ((abs(_2958 / _2946) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2968 * _3100) - exp2(_2968 * _3101)) * _3089))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2877);
        _2970 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2972 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2974 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2976 = _3156 * _2877;
    }
    else
    {
        _2970 = _2874;
        _2972 = _2875;
        _2974 = _2876;
        _2976 = _2877;
    }
    bool _3183;
    vec4 _2986;
    vec4 _3008;
    float _3010;
    float _3014;
    float _3015;
    float _3016;
    float _3017;
    bool _3027;
    for (;;)
    {
        _2986 = cbMatDynParam._m0[0u];
        float _2988 = roundEven(_2986.y);
        bool _2989 = _2988 == 3.0;
        float _2990 = log2(_2976);
        float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * _2846;
        float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * _2847;
        float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * _2848;
        float _3006 = _942 + (-0.5);
        _3008 = cbMtdParam._m0[1u];
        _3010 = _3008.y * _3006;
        float _3013 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3014 = _3013 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
        _3015 = _3013 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
        _3016 = _3013 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
        _3017 = _3006 * 0.999000012874603271484375;
        _3027 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3027)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3017) < 0.5)
            {
                _3183 = true;
                break;
            }
        }
        uint _3124 = _991 + uint(_2986.w);
        if ((cbInstanceData._m0[_3124].w < 1.0) && ((cbInstanceData._m0[_3124].w + _3017) < 0.5))
        {
            _3183 = true;
            break;
        }
        if ((_3010 + 1.0) < _3008.x)
        {
            _3183 = true;
            break;
        }
        _3183 = false;
        break;
    }
    float _3388;
    if (_3183)
    {
        discard_state = true;
        _3388 = 0.0;
    }
    else
    {
        _3388 = cbInstanceData._m0[_2849].w;
    }
    SV_Target.x = _3014;
    SV_Target.y = _3015;
    SV_Target.z = _3016;
    SV_Target.w = _3388;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
    discard_exit();
}


