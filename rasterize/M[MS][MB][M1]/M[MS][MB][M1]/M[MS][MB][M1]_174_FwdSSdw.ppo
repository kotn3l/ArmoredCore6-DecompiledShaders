#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1333;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3684 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3695 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _542 = ((_514.x - _533) * _397) + _533;
    float _543 = ((_514.y - _534) * _397) + _534;
    float _544 = ((_514.z - _535) * _397) + _535;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _569 = ((_556.z - _544) * _470) + _544;
    float _572 = ((((_556.x - _542) * _470) + _542) * 2.0) + (-1.0);
    float _573 = ((((_556.y - _543) * _470) + _543) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3706 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _584 = _572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_491.x * 2.0) + (-1.0)));
    float _585 = _573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_491.y * 2.0) + (-1.0)));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _614 = _612.x;
    float _615 = 1.0 - _614;
    float _643 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_614 - _615) * cbMtdParam._m0[24u].w) + _615) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3717 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _652 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _644) + _477;
    float _653 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _644) + _478;
    float _654 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _644) + _479;
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _682 = _680.x;
    float _700 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _682) * _397) + _682;
    float _718 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _700) * _470) + _700;
    float _722 = ((_666.x - _718) * cbMtdParam._m0[19u].z) + _718;
    float _724 = _722 - (_722 * _644);
    float _729 = (((_491.z - _569) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _569;
    float _733 = ((cbMtdParam._m0[23u].y - _729) * _644) + _729;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _758 = (_752.x * 2.0) + (-1.0);
    float _759 = (_752.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3728 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _776 = (_644 * (((cbMtdParam._m0[22u].z * _584) - _584) + _758)) + _584;
    float _777 = (_644 * (((cbMtdParam._m0[22u].z * _585) - _585) + _759)) + _585;
    float _778 = (_644 * (sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) - _579)) + _579;
    float _780 = cbMtdParam._m0[22u].x + _598.w;
    float _783 = fma(_778, _246 * NORMAL.x, fma(_777, _253 * TANGENT.x, (_239 * _231) * _776));
    float _786 = fma(_778, _246 * NORMAL.y, fma(_777, _253 * TANGENT.y, (_239 * _232) * _776));
    float _789 = fma(_778, _246 * NORMAL.z, fma(_777, _253 * TANGENT.z, (_239 * _233) * _776));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _3739 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _797 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _3761 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3772 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3783 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3794 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _802 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _900 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _903 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _906 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _920 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_920].z;
    float _3805 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _932 = 1.0 - _802;
    float _933 = _929 * _932;
    float _934 = _930 * _932;
    float _935 = _931 * _932;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _802;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _802;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _802;
    float _943 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    vec4 _955 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _959 = ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * TEXCOORD_5.w) * _955.x;
    float _960 = dot(vec3(_794, _795, _796), vec3(_873, _874, _875));
    float _963 = _960 * 2.0;
    float _967 = (_963 * _794) - _873;
    float _968 = (_963 * _795) - _874;
    float _969 = (_963 * _796) - _875;
    float _973 = abs(dot(vec3(_873, _874, _875), vec3(_794, _795, _796)));
    float _3838 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _975 = sqrt(_797);
    float _988 = exp2((_975 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_975 * 3.0));
    float _994 = (1.0 - _988) * ((_975 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _995 = _988 * _975;
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1031, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023));
        float _1061 = fma(_1031, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023));
        float _1065 = fma(_1031, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023));
        float _1090 = _1023 + _794;
        float _1091 = _1027 + _795;
        float _1092 = _1031 + _796;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_794, _795, _796), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3886 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_794, _795, _796), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3919 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_794, _795, _796), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3952 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1371 = fma(_1031, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023));
        float _1375 = fma(_1031, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023));
        float _1379 = fma(_1031, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023));
        float _1402 = _1023 + _794;
        float _1403 = _1027 + _795;
        float _1404 = _1031 + _796;
        float _1414 = fma(_1404, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402)) - _1371;
        float _1415 = fma(_1404, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402)) - _1375;
        float _1416 = fma(_1404, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402)) - _1379;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1371 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1375 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[35u].z) + ((((((_1379 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1470 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1437.x + (-0.5));
        float _1472 = _1470 * (_1437.y + (-0.5));
        float _1473 = _1470 * (_1437.z + (-0.5));
        float _1480 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1444.x + (-0.5));
        float _1482 = _1480 * (_1444.y + (-0.5));
        float _1483 = _1480 * (_1444.z + (-0.5));
        float _1490 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1451.x + (-0.5));
        float _1492 = _1490 * (_1451.y + (-0.5));
        float _1493 = _1490 * (_1451.z + (-0.5));
        float _1500 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1458.x + (-0.5));
        float _1502 = _1500 * (_1458.y + (-0.5));
        float _1503 = _1500 * (_1458.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_794, _795, _796), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4015 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1534 + 1.0))) + _1539) * _1504;
        float _1549 = _1472 * 0.5;
        float _1550 = _1482 * 0.5;
        float _1551 = _1492 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_794, _795, _796), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4048 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1576 + 1.0))) + _1581) * _1505;
        float _1591 = _1473 * 0.5;
        float _1592 = _1483 * 0.5;
        float _1593 = _1493 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_794, _795, _796), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4081 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1618 + 1.0))) + _1623) * _1506;
        _1640 = _1473;
        _1641 = _1472;
        _1642 = _1471;
        _1643 = _1483;
        _1644 = _1482;
        _1645 = _1481;
        _1646 = _1493;
        _1647 = _1492;
        _1648 = _1491;
        _1649 = _1506;
        _1650 = _1505;
        _1651 = _1504;
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1333;
        _1641 = _1333;
        _1642 = _1333;
        _1643 = _1333;
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1345)) + _1345;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1346)) + _1346;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1347)) + _1347;
    float _1687 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1664));
    float _1708 = _967 * 0.5;
    float _1709 = _968 * 0.5;
    float _1710 = _969 * 0.5;
    float _1711 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1714 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1717 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1751;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1724 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1728 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1732 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1739 = dot(vec4(cbModelParam._m0[39u]), vec4(_1708, _1709, _1710, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1762;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1753 = dot(vec4(cbModelParam._m0[40u]), vec4(_1708, _1709, _1710, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1766 = (_1762 * cbModelParam._m0[1u].x) + (_1751 * (1.0 - cbModelParam._m0[1u].x));
    float _1776 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1776 : min(cbModelParam._m0[25u].z, _1776));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_1031, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_1031, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_1031, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_969, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967));
        float _1840 = fma(_969, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967));
        float _1843 = fma(_969, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1871 = frontier_phi_14_12_ladder;
        }
        float _2095;
        if (_1840 > 0.0)
        {
            _2095 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2095 = frontier_phi_23_19_ladder;
        }
        float _2352;
        if (_1843 > 0.0)
        {
            _2352 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2352 = frontier_phi_35_30_ladder;
        }
        float _2354 = isnan(_2095) ? _1871 : (isnan(_1871) ? _2095 : min(_1871, _2095));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1837) + _1826;
        float _2360 = (_2355 * _1840) + _1830;
        float _2361 = (_2355 * _1843) + _1834;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1777);
            frontier_phi_13_35_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_13_35_ladder_2;
        _1861 = frontier_phi_13_35_ladder_1;
        _1863 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_967, _968, _969), _1777);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1031, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1031, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1031, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_969, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967));
        float _1936 = fma(_969, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967));
        float _1939 = fma(_969, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967));
        float _2100;
        if (_1933 > 0.0)
        {
            _2100 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2100 = frontier_phi_25_21_ladder;
        }
        float _2379;
        if (_1936 > 0.0)
        {
            _2379 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2379 = frontier_phi_37_32_ladder;
        }
        float _2592;
        if (_1939 > 0.0)
        {
            _2592 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2592 = frontier_phi_46_43_ladder;
        }
        float _2594 = isnan(_2379) ? _2100 : (isnan(_2100) ? _2379 : min(_2100, _2379));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1933) + _1922;
        float _2600 = (_2595 * _1936) + _1926;
        float _2601 = (_2595 * _1939) + _1930;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_22_46_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_22_46_ladder_2;
        _1960 = frontier_phi_22_46_ladder_1;
        _1962 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_967, _968, _969), _1868);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1975 = (((_994 * _943) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1977 = (((_994 * _945) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_994 * _946) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    vec4 _1996 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_881, _882));
    float _1998 = _1996.w;
    float _2010 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1998);
    float _2011 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1998);
    float _2012 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1998);
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _959 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2054 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2058 = _2018 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_794, _795, _796));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_794, _795, _796));
    float _4217 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4228 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2010) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2011) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2012) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2086;
        _2107 = _2087;
        _2109 = _2088;
    }
    else
    {
        uint _2113 = _2018 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4239 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2132 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2088;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2323 = _2018 + 7u;
        float _2339 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4255 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2342 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2150 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2105;
        _2152 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2107;
        _2154 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2109;
    }
    uint _2157 = _2018 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _797) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2018].x + _873;
    float _2173 = cbLight._m0[_2018].y + _874;
    float _2174 = cbLight._m0[_2018].z + _875;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2018].xyz));
    float _4271 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2186 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2187 = dot(vec3(_794, _795, _796), vec3(_2179, _2180, _2181));
    float _4293 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2179, _2180, _2181));
    float _4304 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2208 = 0.959999978542327880859375 - _940;
    float _2210 = 0.959999978542327880859375 - _941;
    float _2211 = 0.959999978542327880859375 - _942;
    float _2218 = 1.0 - _2171;
    float _2229 = (0.5 / (((_2186 * ((_2185 * _2218) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2218) + _2171) * _2185))) * _2185;
    float _4315 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2245 = _2018 + 9u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _797) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2058].x + _873;
    float _2259 = cbLight._m0[_2058].y + _874;
    float _2260 = cbLight._m0[_2058].z + _875;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2058].xyz));
    float _4326 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2272 = dot(vec3(_794, _795, _796), vec3(_2265, _2266, _2267));
    float _4337 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2276 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2265, _2266, _2267));
    float _4348 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = _2257 * _2257;
    float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
    float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
    float _2298 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2186 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2298) + _2257) * _2271))) * _2271;
    float _4359 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
    float _2320 = (((((_2291 * _2208) + _943) * cbLight._m0[_2245].x) * _2310) * _2041) + ((((cbLight._m0[_2157].x * _2010) * ((_2207 * _2208) + _943)) * _2231) * _2054);
    float _2321 = (((((_2291 * _2210) + _945) * cbLight._m0[_2245].y) * _2310) * _2041) + ((((cbLight._m0[_2157].y * _2011) * ((_2207 * _2210) + _945)) * _2231) * _2054);
    float _2322 = (((((_2291 * _2211) + _946) * cbLight._m0[_2245].z) * _2310) * _2041) + ((((cbLight._m0[_2157].z * _2012) * ((_2207 * _2211) + _946)) * _2231) * _2054);
    float _2384;
    float _2386;
    float _2388;
    if (_2094)
    {
        _2384 = _2320;
        _2386 = _2321;
        _2388 = _2322;
    }
    else
    {
        uint _2390 = _2018 + 2u;
        uint _2394 = _2018 + 10u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _797) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _873;
        float _2411 = cbLight._m0[_2390].y + _874;
        float _2412 = cbLight._m0[_2390].z + _875;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2390].xyz));
        float _4370 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2424 = dot(vec3(_794, _795, _796), vec3(_2417, _2418, _2419));
        float _4381 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4392 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2186 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2450) + _2409) * _2423))) * _2423;
        float _4403 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2384 = (((((_2443 * _2208) + _943) * cbLight._m0[_2394].x) * _2462) * _2463) + _2320;
        _2386 = (((((_2443 * _2210) + _945) * cbLight._m0[_2394].y) * _2462) * _2463) + _2321;
        _2388 = (((((_2443 * _2211) + _946) * cbLight._m0[_2394].z) * _2462) * _2463) + _2322;
    }
    float _2498;
    float _2500;
    float _2502;
    if (_2112)
    {
        _2498 = _2384;
        _2500 = _2386;
        _2502 = _2388;
    }
    else
    {
        uint _2509 = _2018 + 3u;
        uint _2513 = _2018 + 11u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _797) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _873;
        float _2530 = cbLight._m0[_2509].y + _874;
        float _2531 = cbLight._m0[_2509].z + _875;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2509].xyz));
        float _4419 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2543 = dot(vec3(_794, _795, _796), vec3(_2536, _2537, _2538));
        float _4430 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4441 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2186 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2569) + _2528) * _2542))) * _2542;
        float _4452 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2498 = (((((_2562 * _2208) + _943) * cbLight._m0[_2513].x) * _2581) * _2582) + _2384;
        _2500 = (((((_2562 * _2210) + _945) * cbLight._m0[_2513].y) * _2581) * _2582) + _2386;
        _2502 = (((((_2562 * _2211) + _946) * cbLight._m0[_2513].z) * _2581) * _2582) + _2388;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2016.y == 0u)
    {
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2657;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2657;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2657;
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2673)));
        float _2694 = (log2(_2660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2966)
                {
                    frontier_phi_61_pred = _2950;
                    frontier_phi_61_pred_1 = _2955;
                    frontier_phi_61_pred_2 = _2954;
                    frontier_phi_61_pred_3 = _2953;
                    frontier_phi_61_pred_4 = _2952;
                    frontier_phi_61_pred_5 = _2951;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2965;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2956 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _2658;
                        float _3141 = _3100.y - _2659;
                        float _3142 = _3100.z - _2660;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_900, _903, _906), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4478 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _2658;
                        float _3176 = (-0.0) - _2659;
                        float _3177 = (-0.0) - _2660;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3192 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _975;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_900, _903, _906), vec3(_3182, _3183, _3184));
                        float _4494 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3217 = dot(vec3(_900, _903, _906), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4505 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3160 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3150) + _3226;
                        float _4516 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4527 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3224 * _3224) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3009 = (_3171 * _3119.x) + _3077;
                        _3010 = (_3171 * _3119.y) + _3078;
                        _3011 = (_3171 * _3119.z) + _3079;
                        _3006 = (_3252 * _3136.x) + _3074;
                        _3007 = (_3252 * _3136.y) + _3075;
                        _3008 = (_3252 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_61_pred = _3006;
                    frontier_phi_61_pred_1 = _3011;
                    frontier_phi_61_pred_2 = _3010;
                    frontier_phi_61_pred_3 = _3009;
                    frontier_phi_61_pred_4 = _3008;
                    frontier_phi_61_pred_5 = _3007;
                }
                _2806 = frontier_phi_61_pred;
                _2816 = frontier_phi_61_pred_1;
                _2814 = frontier_phi_61_pred_2;
                _2812 = frontier_phi_61_pred_3;
                _2810 = frontier_phi_61_pred_4;
                _2808 = frontier_phi_61_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2806;
                    _2951 = _2808;
                    _2952 = _2810;
                    _2953 = _2812;
                    _2954 = _2814;
                    _2955 = _2816;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2822) & _2704) == 0u)
        {
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
            _2926 = _2813;
            _2928 = _2815;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
            float _2944 = _2943 * _2658;
            float _2945 = _2943 * _2659;
            float _2946 = _2943 * _2660;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3057 = _2805;
                float _3058 = _2807;
                float _3059 = _2809;
                float _3060 = _2811;
                float _3061 = _2813;
                float _3062 = _2815;
                uint _3063 = _2822;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3073)
                    {
                        frontier_phi_67_pred = _3060;
                        frontier_phi_67_pred_1 = _3061;
                        frontier_phi_67_pred_2 = _3062;
                        frontier_phi_67_pred_3 = _3059;
                        frontier_phi_67_pred_4 = _3058;
                        frontier_phi_67_pred_5 = _3057;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        uint _3276 = _3072;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3360;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3287 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3287 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3287 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3287 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2660, _3394.z, fma(_2659, _3394.y, _3394.x * _2658)) + _3394.w;
                            _3407 = !((fma(_2660, _3375.z, fma(_2659, _3375.y, _3375.x * _2658)) + _3375.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3302.x - _2658;
                                float _3435 = _3302.y - _2659;
                                float _3436 = _3302.z - _2660;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3303 * _3303));
                                float _4538 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3452 = sqrt(_3437) * _3318.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_900, _903, _906))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2660, _3345.z, fma(_2659, _3345.y, _3345.x * _2658)) + _3345.w) / _3406;
                                float _3466 = (fma(_2660, _3360.z, fma(_2659, _3360.y, _3360.x * _2658)) + _3360.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4554 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _975;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2944;
                                float _3496 = _3442 - _2945;
                                float _3497 = _3443 - _2946;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_900, _903, _906), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4565 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3509 = dot(vec3(_900, _903, _906), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4576 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_900, _903, _906), vec3(_3441, _3442, _3443))) + _3518;
                                float _4587 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4598 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3546 * _3330.x;
                                frontier_phi_73_pred_1 = _3546 * _3330.y;
                                frontier_phi_73_pred_2 = _3472 * _3318.z;
                                frontier_phi_73_pred_3 = _3472 * _3318.y;
                                frontier_phi_73_pred_4 = _3472 * _3318.x;
                                frontier_phi_73_pred_5 = _3546 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_73_pred;
                            _3551 = frontier_phi_73_pred_1;
                            _3555 = frontier_phi_73_pred_2;
                            _3554 = frontier_phi_73_pred_3;
                            _3553 = frontier_phi_73_pred_4;
                            _3552 = frontier_phi_73_pred_5;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3260;
                        frontier_phi_67_pred_1 = _3261;
                        frontier_phi_67_pred_2 = _3262;
                        frontier_phi_67_pred_3 = _3259;
                        frontier_phi_67_pred_4 = _3258;
                        frontier_phi_67_pred_5 = _3257;
                    }
                    _2925 = frontier_phi_67_pred;
                    _2927 = frontier_phi_67_pred_1;
                    _2929 = frontier_phi_67_pred_2;
                    _2923 = frontier_phi_67_pred_3;
                    _2921 = frontier_phi_67_pred_4;
                    _2919 = frontier_phi_67_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2919;
                        _3058 = _2921;
                        _3059 = _2923;
                        _3060 = _2925;
                        _3061 = _2927;
                        _3062 = _2929;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_55_56_ladder = _2813;
                frontier_phi_55_56_ladder_1 = _2815;
                frontier_phi_55_56_ladder_2 = _2811;
                frontier_phi_55_56_ladder_3 = _2809;
                frontier_phi_55_56_ladder_4 = _2807;
                frontier_phi_55_56_ladder_5 = _2805;
            }
            _2918 = frontier_phi_55_56_ladder_5;
            _2920 = frontier_phi_55_56_ladder_4;
            _2922 = frontier_phi_55_56_ladder_3;
            _2924 = frontier_phi_55_56_ladder_2;
            _2926 = frontier_phi_55_56_ladder;
            _2928 = frontier_phi_55_56_ladder_1;
        }
        float _2933 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2717 = (_2933 * _2924) + _2150;
        _2719 = (_2933 * _2926) + _2152;
        _2721 = (_2933 * _2928) + _2154;
        _2723 = ((_2918 * _943) * _2933) + _2498;
        _2725 = ((_2920 * _945) * _2933) + _2500;
        _2727 = ((_2922 * _946) * _2933) + _2502;
    }
    else
    {
        _2717 = _2150;
        _2719 = _2152;
        _2721 = _2154;
        _2723 = _2498;
        _2725 = _2500;
        _2727 = _2502;
    }
    float _4614 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4625 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4636 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    uint _2747 = _259 + 6u;
    float _2755 = _881 / cbSceneParam._m0[86u].x;
    float _2756 = _882 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2831 = _2830 / _816;
        float _2842 = _2831 * _866;
        float _2843 = _867 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2846 = _2831 * _868;
        float _2848 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2843;
        float _2856 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3019;
        if (abs((_2844 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3019 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2981 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3019 = ((abs(_2856 / _2844) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2866 * _2990) - exp2(_2866 * _2991)) * _2979))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3021 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3030 = exp2((_3019 * (-1.44269502162933349609375)) * (1.0 - _3021.w));
        float _3031 = log2(_3030);
        float _3047 = log2(_2775);
        _2868 = (exp2(_3047 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].x)) * _3021.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2870 = (exp2(_3047 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].y)) * _3021.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2872 = (exp2(_3047 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].z)) * _3021.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2874 = _3030 * _2775;
    }
    else
    {
        _2868 = _2772;
        _2870 = _2773;
        _2872 = _2774;
        _2874 = _2775;
    }
    float _2886 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2887 = _2886 == 3.0;
    float _2888 = log2(_2874);
    float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2717 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _959))) + ((_2723 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2719 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _959))) + ((_2725 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2721 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _959))) + ((_2727 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2906 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2906 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.y = _2906 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.z = _2906 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.w = cbInstanceData._m0[_2747].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
}


