#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1326;
float _3709;
float _3710;
float _3711;
float _3712;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3721 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3732 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3743 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _435 = (_428 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _436 = (_428 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _437 = (_428 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _447;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _428) + _515;
    float _527 = ((((_494.x - _513) * _428) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _428) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3765 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)))) + (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)))) + (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _583 = _581.x;
    float _584 = 1.0 - _583;
    float _610 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_583 - _584) * cbMtdParam._m0[24u].w) + _584) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3776 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _619 = ((((cbMtdParam._m0[10u].x - _454) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _611) + _454;
    float _620 = ((((cbMtdParam._m0[10u].y - _455) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _611) + _455;
    float _621 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _456)) * _611) + _456;
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _649 = _647.x;
    float _667 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _649) * _428) + _649;
    float _671 = ((_633.x - _667) * cbMtdParam._m0[19u].z) + _667;
    float _673 = _671 - (_671 * _611);
    float _678 = (((_469.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _682 = ((_556.z - _678) * cbMtdParam._m0[19u].w) + _678;
    float _686 = ((cbMtdParam._m0[23u].y - _682) * _611) + _682;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3787 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _729 = (_611 * (((cbMtdParam._m0[22u].z * _568) - _568) + _711)) + _568;
    float _730 = (_611 * (((cbMtdParam._m0[22u].z * _569) - _569) + _712)) + _569;
    float _731 = (_611 * (sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _534)) + _534;
    float _733 = cbMtdParam._m0[22u].x + _556.w;
    float _736 = fma(_731, _245 * NORMAL.x, fma(_730, _252 * TANGENT.x, (_238 * _230) * _729));
    float _739 = fma(_731, _245 * NORMAL.y, fma(_730, _252 * TANGENT.y, (_238 * _231) * _729));
    float _742 = fma(_731, _245 * NORMAL.z, fma(_730, _252 * TANGENT.z, (_238 * _232) * _729));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3798 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _750 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3820 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3831 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3842 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3853 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _755 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _769 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _819 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _809);
    float _820 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _809);
    float _821 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _809);
    float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
    float _826 = _819 * _825;
    float _827 = _820 * _825;
    float _828 = _821 * _825;
    vec4 _833 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _835 = _833.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1007 = sqrt(((_819 * _819) + (_820 * _820)) + (_821 * _821));
        float _1013 = (cbMatDynParam._m0[5u].x * _1007) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1018 = (cbMatDynParam._m0[5u].z * _1007) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _1014)) + _1014) < ((_835 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _868 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _871 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _884 = _277 + 9u;
    uint _885 = _884 + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3886 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _897 = 1.0 - _755;
    float _898 = _894 * _897;
    float _899 = _895 * _897;
    float _900 = _896 * _897;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _755;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _755;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _755;
    float _908 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    float _911 = _907 + 0.039999999105930328369140625;
    vec4 _920 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _924 = ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * TEXCOORD_5.w) * _920.x;
    float _925 = dot(vec3(_747, _748, _749), vec3(_826, _827, _828));
    float _928 = _925 * 2.0;
    float _932 = (_928 * _747) - _826;
    float _933 = (_928 * _748) - _827;
    float _934 = (_928 * _749) - _828;
    float _938 = abs(dot(vec3(_826, _827, _828), vec3(_747, _748, _749)));
    float _3919 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _940 = sqrt(_750);
    float _953 = exp2((_940 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_940 * 3.0));
    float _959 = (1.0 - _953) * ((_940 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _940;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1054 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1058 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1083 = _988 + _747;
        float _1084 = _992 + _748;
        float _1085 = _996 + _749;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_747, _748, _749), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3967 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_747, _748, _749), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4000 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_747, _748, _749), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4033 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1372 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1376 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1399 = _988 + _747;
        float _1400 = _992 + _748;
        float _1401 = _996 + _749;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_747, _748, _749), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4096 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_747, _748, _749), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4129 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_747, _748, _749), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4162 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = _1326;
        _1648 = _1326;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1340)) + _1340;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _932 * 0.5;
    float _1706 = _933 * 0.5;
    float _1707 = _934 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_934, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932));
        float _1837 = fma(_934, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932));
        float _1840 = fma(_934, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1868 = frontier_phi_17_15_ladder;
        }
        float _2072;
        if (_1837 > 0.0)
        {
            _2072 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2072 = frontier_phi_26_22_ladder;
        }
        float _2326;
        if (_1840 > 0.0)
        {
            _2326 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2326 = frontier_phi_38_33_ladder;
        }
        float _2328 = isnan(_2072) ? _1868 : (isnan(_1868) ? _2072 : min(_1868, _2072));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1834) + _1823;
        float _2334 = (_2329 * _1837) + _1827;
        float _2335 = (_2329 * _1840) + _1831;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_16_38_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_16_38_ladder_2;
        _1858 = frontier_phi_16_38_ladder_1;
        _1860 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_932, _933, _934), _1774);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_934, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932));
        float _1934 = fma(_934, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932));
        float _1937 = fma(_934, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932));
        float _2077;
        if (_1931 > 0.0)
        {
            _2077 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2077 = frontier_phi_28_24_ladder;
        }
        float _2353;
        if (_1934 > 0.0)
        {
            _2353 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2353 = frontier_phi_40_35_ladder;
        }
        float _2566;
        if (_1937 > 0.0)
        {
            _2566 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2566 = frontier_phi_49_46_ladder;
        }
        float _2568 = isnan(_2353) ? _2077 : (isnan(_2077) ? _2353 : min(_2077, _2353));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1931) + _1920;
        float _2574 = (_2569 * _1934) + _1924;
        float _2575 = (_2569 * _1937) + _1928;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_25_49_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_25_49_ladder_2;
        _1958 = frontier_phi_25_49_ladder_1;
        _1960 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_932, _933, _934), _1865);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1973 = (((_959 * _908) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1956 - _1856)) + _1856);
    float _1975 = (((_959 * _910) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1958 - _1858)) + _1858);
    float _1977 = (((_959 * _911) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1960 - _1860)) + _1860);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    uvec4 _1996 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _1998 = _1996.x * 14u;
    uint _1999 = _1998 + 13u;
    float _2006 = _924 + (-1.0);
    float _2011 = (cbLight._m0[_1999].x * _2006) + 1.0;
    float _2012 = (cbLight._m0[_1999].y * _2006) + 1.0;
    float _2013 = (cbLight._m0[_1999].z * _2006) + 1.0;
    float _2014 = (cbLight._m0[_1999].w * _2006) + 1.0;
    uint _2015 = _1998 + 5u;
    float _2021 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2025 = _1998 + 4u;
    float _2031 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2035 = _1998 | 1u;
    float _2046 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_747, _748, _749));
    float _2049 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_747, _748, _749));
    float _4298 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _4309 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2054 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2056 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2063 = ((cbLight._m0[_2015].x * _2021) * _2056) + ((cbLight._m0[_2025].x * _2031) * _2054);
    float _2064 = ((_2021 * cbLight._m0[_2015].y) * _2056) + ((_2031 * cbLight._m0[_2025].y) * _2054);
    float _2065 = ((_2021 * cbLight._m0[_2015].z) * _2056) + ((_2031 * cbLight._m0[_2025].z) * _2054);
    uvec4 _2069 = floatBitsToUint(cbLight._m0[_1998 + 12u]);
    bool _2071 = _2069.x == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2071)
    {
        _2082 = _2063;
        _2084 = _2064;
        _2086 = _2065;
    }
    else
    {
        uint _2090 = _1998 + 6u;
        float _2106 = (dot(vec3(cbLight._m0[_1998 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4320 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2109 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2082 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _2063;
        _2084 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _2064;
        _2086 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _2065;
    }
    bool _2089 = _2069.y == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2089)
    {
        _2127 = _2082;
        _2129 = _2084;
        _2131 = _2086;
    }
    else
    {
        uint _2297 = _1998 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_1998 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4336 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2316 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2127 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2082;
        _2129 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2084;
        _2131 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2086;
    }
    uint _2134 = _1998 + 8u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _750) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1998].x + _826;
    float _2150 = cbLight._m0[_1998].y + _827;
    float _2151 = cbLight._m0[_1998].z + _828;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_1998].xyz));
    float _4352 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _2163 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2164 = dot(vec3(_747, _748, _749), vec3(_2156, _2157, _2158));
    float _4374 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2168 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2156, _2157, _2158));
    float _4385 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2172 = _2148 * _2148;
    float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2185 = 0.959999978542327880859375 - _905;
    float _2187 = 0.959999978542327880859375 - _906;
    float _2188 = 0.959999978542327880859375 - _907;
    float _2195 = 1.0 - _2148;
    float _2206 = (0.5 / (((_2163 * ((_2162 * _2195) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2195) + _2148) * _2162))) * _2162;
    float _4396 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2208 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
    uint _2219 = _1998 + 9u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _750) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_2035].x + _826;
    float _2233 = cbLight._m0[_2035].y + _827;
    float _2234 = cbLight._m0[_2035].z + _828;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2035].xyz));
    float _4407 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2246 = dot(vec3(_747, _748, _749), vec3(_2239, _2240, _2241));
    float _4418 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2239, _2240, _2241));
    float _4429 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2231 * _2231;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2272 = 1.0 - _2231;
    float _2282 = (0.5 / (((_2163 * ((_2245 * _2272) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2272) + _2231) * _2245))) * _2245;
    float _4440 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    float _2294 = (((((_2265 * _2185) + _908) * cbLight._m0[_2219].x) * _2284) * _2021) + (((((_2184 * _2185) + _908) * cbLight._m0[_2134].x) * _2208) * _2031);
    float _2295 = (((((_2265 * _2187) + _910) * cbLight._m0[_2219].y) * _2284) * _2021) + (((((_2184 * _2187) + _910) * cbLight._m0[_2134].y) * _2208) * _2031);
    float _2296 = (((((_2265 * _2188) + _911) * cbLight._m0[_2219].z) * _2284) * _2021) + (((((_2184 * _2188) + _911) * cbLight._m0[_2134].z) * _2208) * _2031);
    float _2358;
    float _2360;
    float _2362;
    if (_2071)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _1998 + 2u;
        uint _2368 = _1998 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _750) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _826;
        float _2385 = cbLight._m0[_2364].y + _827;
        float _2386 = cbLight._m0[_2364].z + _828;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2364].xyz));
        float _4451 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2398 = dot(vec3(_747, _748, _749), vec3(_2391, _2392, _2393));
        float _4462 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4473 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2163 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2424) + _2383) * _2397))) * _2397;
        float _4484 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2358 = (((((_2417 * _2185) + _908) * cbLight._m0[_2368].x) * _2436) * _2437) + _2294;
        _2360 = (((((_2417 * _2187) + _910) * cbLight._m0[_2368].y) * _2436) * _2437) + _2295;
        _2362 = (((((_2417 * _2188) + _911) * cbLight._m0[_2368].z) * _2436) * _2437) + _2296;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2089)
    {
        _2472 = _2358;
        _2474 = _2360;
        _2476 = _2362;
    }
    else
    {
        uint _2483 = _1998 + 3u;
        uint _2487 = _1998 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _750) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _826;
        float _2504 = cbLight._m0[_2483].y + _827;
        float _2505 = cbLight._m0[_2483].z + _828;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2483].xyz));
        float _4500 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2517 = dot(vec3(_747, _748, _749), vec3(_2510, _2511, _2512));
        float _4511 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2163 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2543) + _2502) * _2516))) * _2516;
        float _4533 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2472 = (((((_2536 * _2185) + _908) * cbLight._m0[_2487].x) * _2555) * _2556) + _2358;
        _2474 = (((((_2536 * _2187) + _910) * cbLight._m0[_2487].y) * _2555) * _2556) + _2360;
        _2476 = (((((_2536 * _2188) + _911) * cbLight._m0[_2487].z) * _2555) * _2556) + _2362;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_1996.y == 0u)
    {
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2631;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2631;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2631;
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2647)));
        float _2668 = (log2(_2634 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2948)
                {
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2947;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2938 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2632;
                        float _3144 = _3103.y - _2633;
                        float _3145 = _3103.z - _2634;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_865, _868, _871), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4559 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2632;
                        float _3179 = (-0.0) - _2633;
                        float _3180 = (-0.0) - _2634;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _940;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_865, _868, _871), vec3(_3185, _3186, _3187));
                        float _4575 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3220 = dot(vec3(_865, _868, _871), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4586 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4597 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4608 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3007 = (_3174 * _3122.x) + _3080;
                        _3008 = (_3174 * _3122.y) + _3081;
                        _3009 = (_3174 * _3122.z) + _3082;
                        _3004 = (_3255 * _3139.x) + _3077;
                        _3005 = (_3255 * _3139.y) + _3078;
                        _3006 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                _2780 = frontier_phi_66_pred;
                _2790 = frontier_phi_66_pred_1;
                _2788 = frontier_phi_66_pred_2;
                _2786 = frontier_phi_66_pred_3;
                _2784 = frontier_phi_66_pred_4;
                _2782 = frontier_phi_66_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2780;
                    _2933 = _2782;
                    _2934 = _2784;
                    _2935 = _2786;
                    _2936 = _2788;
                    _2937 = _2790;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2796) & _2678) == 0u)
        {
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
            float _2926 = _2925 * _2632;
            float _2927 = _2925 * _2633;
            float _2928 = _2925 * _2634;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3060 = _2779;
                float _3061 = _2781;
                float _3062 = _2783;
                float _3063 = _2785;
                float _3064 = _2787;
                float _3065 = _2789;
                uint _3066 = _2796;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3076)
                    {
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        uint _3288 = _3075;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3299 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3299 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3299 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3299 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_2634, _3406.z, fma(_2633, _3406.y, _3406.x * _2632)) + _3406.w;
                            _3419 = !((fma(_2634, _3387.z, fma(_2633, _3387.y, _3387.x * _2632)) + _3387.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3314.x - _2632;
                                float _3447 = _3314.y - _2633;
                                float _3448 = _3314.z - _2634;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3315 * _3315));
                                float _4619 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3464 = sqrt(_3449) * _3330.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_865, _868, _871))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_2634, _3357.z, fma(_2633, _3357.y, _3357.x * _2632)) + _3357.w) / _3418;
                                float _3478 = (fma(_2634, _3372.z, fma(_2633, _3372.y, _3372.x * _2632)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4635 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _940;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2926;
                                float _3508 = _3454 - _2927;
                                float _3509 = _3455 - _2928;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_865, _868, _871), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4646 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3521 = dot(vec3(_865, _868, _871), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4657 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_865, _868, _871), vec3(_3453, _3454, _3455))) + _3530;
                                float _4668 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4679 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3484 * _3330.y;
                                frontier_phi_83_pred_1 = _3484 * _3330.x;
                                frontier_phi_83_pred_2 = _3558 * _3342.z;
                                frontier_phi_83_pred_3 = _3558 * _3342.y;
                                frontier_phi_83_pred_4 = _3558 * _3342.x;
                                frontier_phi_83_pred_5 = _3484 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_83_pred;
                            _3565 = frontier_phi_83_pred_1;
                            _3564 = frontier_phi_83_pred_2;
                            _3563 = frontier_phi_83_pred_3;
                            _3562 = frontier_phi_83_pred_4;
                            _3567 = frontier_phi_83_pred_5;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3274;
                        frontier_phi_77_pred_1 = _3273;
                        frontier_phi_77_pred_2 = _3272;
                        frontier_phi_77_pred_3 = _3271;
                        frontier_phi_77_pred_4 = _3270;
                        frontier_phi_77_pred_5 = _3269;
                    }
                    _2911 = frontier_phi_77_pred;
                    _2909 = frontier_phi_77_pred_1;
                    _2907 = frontier_phi_77_pred_2;
                    _2905 = frontier_phi_77_pred_3;
                    _2903 = frontier_phi_77_pred_4;
                    _2901 = frontier_phi_77_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2901;
                        _3061 = _2903;
                        _3062 = _2905;
                        _3063 = _2907;
                        _3064 = _2909;
                        _3065 = _2911;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2905;
                frontier_phi_58_59_ladder_1 = _2911;
                frontier_phi_58_59_ladder_2 = _2909;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2903;
                frontier_phi_58_59_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_58_59_ladder = _2783;
                frontier_phi_58_59_ladder_1 = _2789;
                frontier_phi_58_59_ladder_2 = _2787;
                frontier_phi_58_59_ladder_3 = _2785;
                frontier_phi_58_59_ladder_4 = _2781;
                frontier_phi_58_59_ladder_5 = _2779;
            }
            _2900 = frontier_phi_58_59_ladder_5;
            _2902 = frontier_phi_58_59_ladder_4;
            _2904 = frontier_phi_58_59_ladder;
            _2906 = frontier_phi_58_59_ladder_3;
            _2908 = frontier_phi_58_59_ladder_2;
            _2910 = frontier_phi_58_59_ladder_1;
        }
        float _2915 = isnan(1.0) ? _924 : (isnan(_924) ? 1.0 : min(_924, 1.0));
        _2691 = (_2915 * _2906) + _2127;
        _2693 = (_2915 * _2908) + _2129;
        _2695 = (_2915 * _2910) + _2131;
        _2697 = ((_2900 * _908) * _2915) + _2472;
        _2699 = ((_2902 * _910) * _2915) + _2474;
        _2701 = ((_2904 * _911) * _2915) + _2476;
    }
    else
    {
        _2691 = _2127;
        _2693 = _2129;
        _2695 = _2131;
        _2697 = _2472;
        _2699 = _2474;
        _2701 = _2476;
    }
    float _4695 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4706 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4717 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2718 = ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2691 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _924))) + ((_2697 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2719 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2693 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _924))) + ((_2699 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2720 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2695 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _924))) + ((_2701 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    uint _2721 = _277 + 6u;
    float _2729 = _846 / cbSceneParam._m0[86u].x;
    float _2730 = _847 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _769 : (isnan(_769) ? cbSceneParam._m0[77u].w : min(_769, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_769 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_769) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _769 : min(cbSceneParam._m0[80u].w, _769));
        float _2805 = _2804 / _769;
        float _2816 = _2805 * _819;
        float _2817 = _820 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2820 = _2805 * _821;
        float _2822 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2817;
        float _2830 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2818 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2963 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3017 = ((abs(_2830 / _2818) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2840 * _2972) - exp2(_2840 * _2973)) * _2961))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2749);
        _2842 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2844 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2846 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2848 = _3028 * _2749;
    }
    else
    {
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
        _2848 = _2749;
    }
    bool _3055;
    vec4 _2858;
    vec4 _2880;
    float _2882;
    float _2886;
    float _2887;
    float _2888;
    float _2889;
    bool _2899;
    for (;;)
    {
        _2858 = cbMatDynParam._m0[0u];
        float _2860 = roundEven(_2858.y);
        bool _2861 = _2860 == 3.0;
        float _2862 = log2(_2848);
        float _2869 = exp2(_2862 * cbSceneParam._m0[78u].x) * _2718;
        float _2870 = exp2(_2862 * cbSceneParam._m0[78u].y) * _2719;
        float _2871 = exp2(_2862 * cbSceneParam._m0[78u].z) * _2720;
        float _2878 = _835 + (-0.5);
        _2880 = cbMtdParam._m0[1u];
        _2882 = _2880.y * _2878;
        float _2885 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2886 = _2885 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
        _2887 = _2885 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
        _2888 = _2885 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
        _2889 = _2878 * 0.999000012874603271484375;
        _2899 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2899)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2889) < 0.5)
            {
                _3055 = true;
                break;
            }
        }
        uint _2996 = _884 + uint(_2858.w);
        if ((cbInstanceData._m0[_2996].w < 1.0) && ((cbInstanceData._m0[_2996].w + _2889) < 0.5))
        {
            _3055 = true;
            break;
        }
        if ((_2882 + 1.0) < _2880.x)
        {
            _3055 = true;
            break;
        }
        _3055 = false;
        break;
    }
    float _3260;
    if (_3055)
    {
        discard_state = true;
        _3260 = 0.0;
    }
    else
    {
        _3260 = cbInstanceData._m0[_2721].w;
    }
    SV_Target.x = _2886;
    SV_Target.y = _2887;
    SV_Target.z = _2888;
    SV_Target.w = _3260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
    discard_exit();
}


