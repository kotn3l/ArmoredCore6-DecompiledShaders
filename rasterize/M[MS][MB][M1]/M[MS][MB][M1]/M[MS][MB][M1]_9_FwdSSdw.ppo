#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1070;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _276 = _272.z;
    float _281 = (_272.x * 2.0) + (-1.0);
    float _283 = (_272.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3424 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _326 = _324.x;
    float _327 = 1.0 - _326;
    float _360 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_326 - _327) * cbMtdParam._m0[24u].w) + _327) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3435 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _369 = ((((cbMtdParam._m0[10u].x - _257) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _361) + _257;
    float _370 = ((((cbMtdParam._m0[10u].y - _258) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _361) + _258;
    float _371 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _259)) * _361) + _259;
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _386 = _384.x;
    float _388 = _386 - (_386 * _361);
    float _392 = ((cbMtdParam._m0[23u].y - _276) * _361) + _276;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _424 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_221, _222, _223, 0.0));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _310) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _311) + cbTextureTilingScale._m0[18u].w));
    float _441 = _439.x;
    float _446 = fract(_439.w + cbPerFrame._m0[22u].x);
    float _448 = (1.0 - _446) * _441;
    float _453 = ((_446 + (-1.0)) + _441) * 9.0;
    float _455 = ((_441 + (-1.0)) + _446) * 9.0;
    float _456 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _457 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _471 = (_448 * ((_439.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _456 : (isnan(_456) ? 3.0 : min(_456, 3.0))) * 3.1415927410125732421875);
    float _473 = (_448 * ((_439.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _457 : (isnan(_457) ? 3.0 : min(_457, 3.0))) * 3.1415927410125732421875);
    float _477 = inversesqrt(dot(vec3(_471, _473, 1.0), vec3(_471, _473, 1.0)));
    float _493 = (((((0.5 - _416) + ((_471 * 0.5) * _477)) * _424) + _416) * 2.0) + (-1.0);
    float _494 = (((((0.5 - _417) + ((_477 * 0.5) * _473)) * _424) + _417) * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3466 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _511 = ((((cbMtdParam._m0[22u].z * _281) - _281) + _493) * _361) + _281;
    float _512 = ((((cbMtdParam._m0[22u].z * _283) - _283) + _494) * _361) + _283;
    float _513 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) - _290)) + _290;
    float _515 = cbMtdParam._m0[22u].x + _272.w;
    float _518 = fma(_513, _221, fma(_512, _227 * TANGENT.x, (_213 * _205) * _511));
    float _521 = fma(_513, _222, fma(_512, _227 * TANGENT.y, (_213 * _206) * _511));
    float _524 = fma(_513, _223, fma(_512, _227 * TANGENT.z, (_213 * _207) * _511));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3477 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _532 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3499 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3510 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3521 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3532 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _537 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _642 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _645 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _659 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3543 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _671 = 1.0 - _537;
    float _672 = _668 * _671;
    float _673 = _669 * _671;
    float _674 = _670 * _671;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _537;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _537;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _537;
    float _682 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    vec4 _694 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _698 = ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * TEXCOORD_5.w) * _694.x;
    float _699 = dot(vec3(_529, _530, _531), vec3(_609, _610, _611));
    float _702 = _699 * 2.0;
    float _706 = (_702 * _529) - _609;
    float _707 = (_702 * _530) - _610;
    float _708 = (_702 * _531) - _611;
    float _712 = abs(dot(vec3(_609, _610, _611), vec3(_529, _530, _531)));
    float _3576 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _714 = sqrt(_532);
    float _726 = exp2((_714 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_714 * 3.0));
    float _732 = (1.0 - _726) * ((_714 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _733 = _726 * _714;
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1069;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_769, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761));
        float _799 = fma(_769, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761));
        float _803 = fma(_769, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761));
        float _827 = _761 + _529;
        float _828 = _765 + _530;
        float _829 = _769 + _531;
        float _839 = fma(_829, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827)) - _795;
        float _840 = fma(_829, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827)) - _799;
        float _841 = fma(_829, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827)) - _803;
        float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
        float _858 = ((_845 * _839) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_845 * _840) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_845 * _841) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        float _897 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_863.x + (-0.5));
        float _899 = _897 * (_863.y + (-0.5));
        float _900 = _897 * (_863.z + (-0.5));
        float _907 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_870.x + (-0.5));
        float _909 = _907 * (_870.y + (-0.5));
        float _910 = _907 * (_870.z + (-0.5));
        float _917 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_877.x + (-0.5));
        float _919 = _917 * (_877.y + (-0.5));
        float _920 = _917 * (_877.z + (-0.5));
        float _927 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_884.x + (-0.5));
        float _929 = _927 * (_884.y + (-0.5));
        float _930 = _927 * (_884.z + (-0.5));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = _898 * 0.5;
        float _935 = _908 * 0.5;
        float _936 = _918 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _951 = (dot(vec3(_529, _530, _531), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _961 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3624 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_963 + 1.0))) + _968) * _931;
        float _978 = _899 * 0.5;
        float _979 = _909 * 0.5;
        float _980 = _919 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_529, _530, _531), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3657 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1005 + 1.0))) + _1010) * _932;
        float _1020 = _900 * 0.5;
        float _1021 = _910 * 0.5;
        float _1022 = _920 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_529, _530, _531), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3690 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1047 + 1.0))) + _1052) * _933;
        _1069 = _900;
        _1071 = _899;
        _1072 = _898;
        _1073 = _910;
        _1074 = _909;
        _1075 = _908;
        _1076 = _920;
        _1077 = _919;
        _1078 = _918;
        _1079 = _933;
        _1080 = _932;
        _1081 = _931;
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
    }
    else
    {
        _1069 = _1070;
        _1071 = _1070;
        _1072 = _1070;
        _1073 = _1070;
        _1074 = _1070;
        _1075 = _1070;
        _1076 = _1070;
        _1077 = _1070;
        _1078 = _1070;
        _1079 = _1070;
        _1080 = _1070;
        _1081 = _1070;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_769, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _761));
        float _1113 = fma(_769, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _761));
        float _1117 = fma(_769, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _761));
        float _1140 = _761 + _529;
        float _1141 = _765 + _530;
        float _1142 = _769 + _531;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_529, _530, _531), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3753 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_529, _530, _531), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3786 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_529, _530, _531), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3819 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1070;
        _1379 = _1070;
        _1380 = _1070;
        _1381 = _1070;
        _1382 = _1070;
        _1383 = _1070;
        _1384 = _1070;
        _1385 = _1070;
        _1386 = _1070;
        _1387 = _1070;
        _1388 = _1070;
        _1389 = _1070;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1082)) + _1082;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1083)) + _1083;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1084)) + _1084;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _706 * 0.5;
    float _1447 = _707 * 0.5;
    float _1448 = _708 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1069, _1073, _1076, _1079));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_769, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_769, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_769, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_708, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706));
        float _1578 = fma(_708, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706));
        float _1581 = fma(_708, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1609 = frontier_phi_14_12_ladder;
        }
        float _1834;
        if (_1578 > 0.0)
        {
            _1834 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1834 = frontier_phi_23_19_ladder;
        }
        float _2091;
        if (_1581 > 0.0)
        {
            _2091 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2091 = frontier_phi_35_30_ladder;
        }
        float _2093 = isnan(_1834) ? _1609 : (isnan(_1609) ? _1834 : min(_1609, _1834));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1575) + _1564;
        float _2099 = (_2094 * _1578) + _1568;
        float _2100 = (_2094 * _1581) + _1572;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_13_35_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_13_35_ladder_2;
        _1599 = frontier_phi_13_35_ladder_1;
        _1601 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_706, _707, _708), _1515);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1660 = fma(_769, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761)) + cbModelParam._m0[21u].w;
        float _1664 = fma(_769, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761)) + cbModelParam._m0[22u].w;
        float _1668 = fma(_769, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761)) + cbModelParam._m0[23u].w;
        float _1671 = fma(_708, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706));
        float _1674 = fma(_708, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706));
        float _1677 = fma(_708, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706));
        float _1839;
        if (_1671 > 0.0)
        {
            _1839 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1839 = frontier_phi_25_21_ladder;
        }
        float _2118;
        if (_1674 > 0.0)
        {
            _2118 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2118 = frontier_phi_37_32_ladder;
        }
        float _2331;
        if (_1677 > 0.0)
        {
            _2331 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2331 = frontier_phi_46_43_ladder;
        }
        float _2333 = isnan(_2118) ? _1839 : (isnan(_1839) ? _2118 : min(_1839, _2118));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1671) + _1660;
        float _2339 = (_2334 * _1674) + _1664;
        float _2340 = (_2334 * _1677) + _1668;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_22_46_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1696 = frontier_phi_22_46_ladder_2;
        _1698 = frontier_phi_22_46_ladder_1;
        _1700 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_706, _707, _708), _1606);
        _1696 = _1680.x * cbModelParam._m0[1u].z;
        _1698 = _1680.y * cbModelParam._m0[1u].z;
        _1700 = _1680.z * cbModelParam._m0[1u].z;
    }
    float _1713 = (((_732 * _682) + _733) * _698) * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1715 = (((_732 * _684) + _733) * _698) * ((cbModelParam._m0[1u].w * (_1698 - _1599)) + _1599);
    float _1717 = (((_732 * _685) + _733) * _698) * ((cbModelParam._m0[1u].w * (_1700 - _1601)) + _1601);
    float _1720 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, _1713 * cbSceneParam._m0[91u].x));
    vec4 _1734 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_617, _618));
    float _1736 = _1734.w;
    float _1748 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1736);
    float _1749 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1736);
    float _1750 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1736);
    uvec4 _1754 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _1756 = _1754.x * 14u;
    uint _1757 = _1756 + 13u;
    float _1764 = _698 + (-1.0);
    float _1769 = (cbLight._m0[_1757].x * _1764) + 1.0;
    float _1770 = (cbLight._m0[_1757].y * _1764) + 1.0;
    float _1771 = (cbLight._m0[_1757].z * _1764) + 1.0;
    float _1772 = (cbLight._m0[_1757].w * _1764) + 1.0;
    uint _1773 = _1756 + 5u;
    float _1779 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1783 = _1756 + 4u;
    float _1793 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1797 = _1756 | 1u;
    float _1808 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_529, _530, _531));
    float _1811 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_529, _530, _531));
    float _3955 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _3966 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1816 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.3183098733425140380859375;
    float _1818 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1825 = ((cbLight._m0[_1773].x * _1779) * _1818) + (((cbLight._m0[_1783].x * _1748) * _1793) * _1816);
    float _1826 = ((_1779 * cbLight._m0[_1773].y) * _1818) + (((cbLight._m0[_1783].y * _1749) * _1793) * _1816);
    float _1827 = ((_1779 * cbLight._m0[_1773].z) * _1818) + (((cbLight._m0[_1783].z * _1750) * _1793) * _1816);
    uvec4 _1831 = floatBitsToUint(cbLight._m0[_1756 + 12u]);
    bool _1833 = _1831.x == 0u;
    float _1844;
    float _1846;
    float _1848;
    if (_1833)
    {
        _1844 = _1825;
        _1846 = _1826;
        _1848 = _1827;
    }
    else
    {
        uint _1852 = _1756 + 6u;
        float _1868 = (dot(vec3(cbLight._m0[_1756 + 2u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _1869 = _1868 * _1868;
        float _3977 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1871 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1844 = (((cbLight._m0[_1852].x * 0.3183098733425140380859375) * _1870) * _1871) + _1825;
        _1846 = (((cbLight._m0[_1852].y * 0.3183098733425140380859375) * _1870) * _1871) + _1826;
        _1848 = (((cbLight._m0[_1852].z * 0.3183098733425140380859375) * _1870) * _1871) + _1827;
    }
    bool _1851 = _1831.y == 0u;
    float _1889;
    float _1891;
    float _1893;
    if (_1851)
    {
        _1889 = _1844;
        _1891 = _1846;
        _1893 = _1848;
    }
    else
    {
        uint _2062 = _1756 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1756 + 3u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _3993 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2081 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1889 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1844;
        _1891 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1846;
        _1893 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1848;
    }
    uint _1896 = _1756 + 8u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1756].w)) * _532) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1756].x + _609;
    float _1912 = cbLight._m0[_1756].y + _610;
    float _1913 = cbLight._m0[_1756].z + _611;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1756].xyz));
    float _4009 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _1925 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1926 = dot(vec3(_529, _530, _531), vec3(_1918, _1919, _1920));
    float _4031 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1930 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_1918, _1919, _1920));
    float _4042 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1934 = _1910 * _1910;
    float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
    float _1946 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
    float _1947 = 0.959999978542327880859375 - _679;
    float _1949 = 0.959999978542327880859375 - _680;
    float _1950 = 0.959999978542327880859375 - _681;
    float _1957 = 1.0 - _1910;
    float _1968 = (0.5 / (((_1925 * ((_1924 * _1957) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _1957) + _1910) * _1924))) * _1924;
    float _4053 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
    uint _1984 = _1756 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _532) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1797].x + _609;
    float _1998 = cbLight._m0[_1797].y + _610;
    float _1999 = cbLight._m0[_1797].z + _611;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1797].xyz));
    float _4064 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2011 = dot(vec3(_529, _530, _531), vec3(_2004, _2005, _2006));
    float _4075 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_2004, _2005, _2006));
    float _4086 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0);
    float _2037 = 1.0 - _1996;
    float _2047 = (0.5 / (((_1925 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2037) + _1996) * _2010))) * _2010;
    float _4097 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2059 = (((((_2030 * _1947) + _682) * cbLight._m0[_1984].x) * _2049) * _1779) + ((((cbLight._m0[_1896].x * _1748) * ((_1946 * _1947) + _682)) * _1970) * _1793);
    float _2060 = (((((_2030 * _1949) + _684) * cbLight._m0[_1984].y) * _2049) * _1779) + ((((cbLight._m0[_1896].y * _1749) * ((_1946 * _1949) + _684)) * _1970) * _1793);
    float _2061 = (((((_2030 * _1950) + _685) * cbLight._m0[_1984].z) * _2049) * _1779) + ((((cbLight._m0[_1896].z * _1750) * ((_1946 * _1950) + _685)) * _1970) * _1793);
    float _2123;
    float _2125;
    float _2127;
    if (_1833)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1756 + 2u;
        uint _2133 = _1756 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _532) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _609;
        float _2150 = cbLight._m0[_2129].y + _610;
        float _2151 = cbLight._m0[_2129].z + _611;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2129].xyz));
        float _4108 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2163 = dot(vec3(_529, _530, _531), vec3(_2156, _2157, _2158));
        float _4119 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4130 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1925 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2189) + _2148) * _2162))) * _2162;
        float _4141 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2123 = (((((_2182 * _1947) + _682) * cbLight._m0[_2133].x) * _2201) * _2202) + _2059;
        _2125 = (((((_2182 * _1949) + _684) * cbLight._m0[_2133].y) * _2201) * _2202) + _2060;
        _2127 = (((((_2182 * _1950) + _685) * cbLight._m0[_2133].z) * _2201) * _2202) + _2061;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1851)
    {
        _2237 = _2123;
        _2239 = _2125;
        _2241 = _2127;
    }
    else
    {
        uint _2248 = _1756 + 3u;
        uint _2252 = _1756 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _532) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _609;
        float _2269 = cbLight._m0[_2248].y + _610;
        float _2270 = cbLight._m0[_2248].z + _611;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2248].xyz));
        float _4157 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2282 = dot(vec3(_529, _530, _531), vec3(_2275, _2276, _2277));
        float _4168 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4179 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_1925 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2308) + _2267) * _2281))) * _2281;
        float _4190 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2237 = (((((_2301 * _1947) + _682) * cbLight._m0[_2252].x) * _2320) * _2321) + _2123;
        _2239 = (((((_2301 * _1949) + _684) * cbLight._m0[_2252].y) * _2320) * _2321) + _2125;
        _2241 = (((((_2301 * _1950) + _685) * cbLight._m0[_2252].z) * _2320) * _2321) + _2127;
    }
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_1754.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2705)
                {
                    frontier_phi_61_pred = _2689;
                    frontier_phi_61_pred_1 = _2694;
                    frontier_phi_61_pred_2 = _2693;
                    frontier_phi_61_pred_3 = _2692;
                    frontier_phi_61_pred_4 = _2691;
                    frontier_phi_61_pred_5 = _2690;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2704;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2695 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        float _2879 = _2839.x - _2397;
                        float _2880 = _2839.y - _2398;
                        float _2881 = _2839.z - _2399;
                        float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                        float _2885 = inversesqrt(_2882);
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2889 = dot(vec3(_639, _642, _645), vec3(_2886, _2887, _2888));
                        float _2894 = 1.0 - (_2882 * _2839.w);
                        float _4216 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2896 = sqrt(_2882) * _2858.w;
                        float _2899 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2889) + _2900;
                        float _2906 = _2896 * _2896;
                        float _2910 = ((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2895) / ((_2906 * 0.699999988079071044921875) + 1.0);
                        float _2914 = (-0.0) - _2397;
                        float _2915 = (-0.0) - _2398;
                        float _2916 = (-0.0) - _2399;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2931 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _714;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_639, _642, _645), vec3(_2921, _2922, _2923));
                        float _4232 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2956 = dot(vec3(_639, _642, _645), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4243 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2899 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2889) + _2965;
                        float _4254 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4265 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2990 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_2963 * _2963) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125))) * _2895;
                        _2748 = (_2910 * _2858.x) + _2816;
                        _2749 = (_2910 * _2858.y) + _2817;
                        _2750 = (_2910 * _2858.z) + _2818;
                        _2745 = (_2990 * _2875.x) + _2813;
                        _2746 = (_2990 * _2875.y) + _2814;
                        _2747 = (_2990 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_61_pred = _2745;
                    frontier_phi_61_pred_1 = _2750;
                    frontier_phi_61_pred_2 = _2749;
                    frontier_phi_61_pred_3 = _2748;
                    frontier_phi_61_pred_4 = _2747;
                    frontier_phi_61_pred_5 = _2746;
                }
                _2545 = frontier_phi_61_pred;
                _2555 = frontier_phi_61_pred_1;
                _2553 = frontier_phi_61_pred_2;
                _2551 = frontier_phi_61_pred_3;
                _2549 = frontier_phi_61_pred_4;
                _2547 = frontier_phi_61_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2545;
                    _2690 = _2547;
                    _2691 = _2549;
                    _2692 = _2551;
                    _2693 = _2553;
                    _2694 = _2555;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2561) & _2443) == 0u)
        {
            _2657 = _2544;
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2683 = _2682 * _2397;
            float _2684 = _2682 * _2398;
            float _2685 = _2682 * _2399;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2796 = _2544;
                float _2797 = _2546;
                float _2798 = _2548;
                float _2799 = _2550;
                float _2800 = _2552;
                float _2801 = _2554;
                uint _2802 = _2561;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2812)
                    {
                        frontier_phi_67_pred = _2799;
                        frontier_phi_67_pred_1 = _2800;
                        frontier_phi_67_pred_2 = _2801;
                        frontier_phi_67_pred_3 = _2798;
                        frontier_phi_67_pred_4 = _2797;
                        frontier_phi_67_pred_5 = _2796;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3008 = _2796;
                        float _3009 = _2797;
                        float _3010 = _2798;
                        float _3011 = _2799;
                        float _3012 = _2800;
                        float _3013 = _2801;
                        uint _3014 = _2811;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3084;
                        vec4 _3100;
                        float _3146;
                        bool _3147;
                        for (;;)
                        {
                            uint _3025 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3071 = (_3025 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3025 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3025 * 40u) + 24u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3121 = (_3025 * 40u) + 28u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3146 = fma(_2399, _3134.z, fma(_2398, _3134.y, _3134.x * _2397)) + _3134.w;
                            _3147 = !((fma(_2399, _3115.z, fma(_2398, _3115.y, _3115.x * _2397)) + _3115.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3147)
                            {
                                float _3174 = _3040.x - _2397;
                                float _3175 = _3040.y - _2398;
                                float _3176 = _3040.z - _2399;
                                float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                                float _3180 = inversesqrt(_3177);
                                float _3181 = _3180 * _3174;
                                float _3182 = _3180 * _3175;
                                float _3183 = _3180 * _3176;
                                float _3187 = 1.0 - (_3177 / (_3041 * _3041));
                                float _4276 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3192 = sqrt(_3177) * _3056.w;
                                float _3194 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                                float _3195 = _3194 * _3194;
                                float _3198 = ((1.0 - _3195) * dot(vec3(_3181, _3182, _3183), vec3(_639, _642, _645))) + _3195;
                                float _3201 = _3192 * _3192;
                                float _3205 = (fma(_2399, _3084.z, fma(_2398, _3084.y, _3084.x * _2397)) + _3084.w) / _3146;
                                float _3206 = (fma(_2399, _3100.z, fma(_2398, _3100.y, _3100.x * _2397)) + _3100.w) / _3146;
                                float _3210 = 1.0 - dot(vec2(_3205, _3206), vec2(_3205, _3206));
                                float _4292 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3212 = _3211 * (((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3188) / ((_3201 * 0.699999988079071044921875) + 1.0));
                                float _3224 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                                float _3225 = 1.0 - _714;
                                float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                                float _3233 = _3232 * _3232;
                                float _3234 = _3233 * _3233;
                                float _3235 = _3181 - _2683;
                                float _3236 = _3182 - _2684;
                                float _3237 = _3183 - _2685;
                                float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                                float _3245 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4303 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3249 = dot(vec3(_639, _642, _645), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                                float _4314 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                                float _3257 = _3194 * _3233;
                                float _3258 = _3257 * _3257;
                                float _3264 = ((1.0 - _3258) * dot(vec3(_639, _642, _645), vec3(_3181, _3182, _3183))) + _3258;
                                float _4325 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3266 = 1.0 - _3233;
                                float _3276 = (0.5 / (((_3265 * ((_3248 * _3266) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3233) * _3248))) * _3265;
                                float _4336 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3286 = (_3211 * _3188) * (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3256 * _3256) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3286 * _3068.x;
                                frontier_phi_73_pred_1 = _3286 * _3068.y;
                                frontier_phi_73_pred_2 = _3212 * _3056.z;
                                frontier_phi_73_pred_3 = _3212 * _3056.y;
                                frontier_phi_73_pred_4 = _3212 * _3056.x;
                                frontier_phi_73_pred_5 = _3286 * _3068.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3290 = frontier_phi_73_pred;
                            _3291 = frontier_phi_73_pred_1;
                            _3295 = frontier_phi_73_pred_2;
                            _3294 = frontier_phi_73_pred_3;
                            _3293 = frontier_phi_73_pred_4;
                            _3292 = frontier_phi_73_pred_5;
                            _2998 = _3293 + _3011;
                            _2999 = _3294 + _3012;
                            _3000 = _3295 + _3013;
                            _2995 = _3290 + _3008;
                            _2996 = _3291 + _3009;
                            _2997 = _3292 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2998;
                        frontier_phi_67_pred_1 = _2999;
                        frontier_phi_67_pred_2 = _3000;
                        frontier_phi_67_pred_3 = _2997;
                        frontier_phi_67_pred_4 = _2996;
                        frontier_phi_67_pred_5 = _2995;
                    }
                    _2664 = frontier_phi_67_pred;
                    _2666 = frontier_phi_67_pred_1;
                    _2668 = frontier_phi_67_pred_2;
                    _2662 = frontier_phi_67_pred_3;
                    _2660 = frontier_phi_67_pred_4;
                    _2658 = frontier_phi_67_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2658;
                        _2797 = _2660;
                        _2798 = _2662;
                        _2799 = _2664;
                        _2800 = _2666;
                        _2801 = _2668;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2666;
                frontier_phi_55_56_ladder_1 = _2668;
                frontier_phi_55_56_ladder_2 = _2664;
                frontier_phi_55_56_ladder_3 = _2662;
                frontier_phi_55_56_ladder_4 = _2660;
                frontier_phi_55_56_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_55_56_ladder = _2552;
                frontier_phi_55_56_ladder_1 = _2554;
                frontier_phi_55_56_ladder_2 = _2550;
                frontier_phi_55_56_ladder_3 = _2548;
                frontier_phi_55_56_ladder_4 = _2546;
                frontier_phi_55_56_ladder_5 = _2544;
            }
            _2657 = frontier_phi_55_56_ladder_5;
            _2659 = frontier_phi_55_56_ladder_4;
            _2661 = frontier_phi_55_56_ladder_3;
            _2663 = frontier_phi_55_56_ladder_2;
            _2665 = frontier_phi_55_56_ladder;
            _2667 = frontier_phi_55_56_ladder_1;
        }
        float _2672 = isnan(1.0) ? _698 : (isnan(_698) ? 1.0 : min(_698, 1.0));
        _2456 = (_2672 * _2663) + _1889;
        _2458 = (_2672 * _2665) + _1891;
        _2460 = (_2672 * _2667) + _1893;
        _2462 = ((_2657 * _682) * _2672) + _2237;
        _2464 = ((_2659 * _684) * _2672) + _2239;
        _2466 = ((_2661 * _685) * _2672) + _2241;
    }
    else
    {
        _2456 = _1889;
        _2458 = _1891;
        _2460 = _1893;
        _2462 = _2237;
        _2464 = _2239;
        _2466 = _2241;
    }
    float _4352 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4363 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4374 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    uint _2486 = _291 + 6u;
    float _2494 = _617 / cbSceneParam._m0[86u].x;
    float _2495 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2570 = _2569 / _551;
        float _2581 = _2570 * _602;
        float _2582 = _603 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2585 = _2570 * _604;
        float _2587 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2582;
        float _2595 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2758;
        if (abs((_2583 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2758 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2720 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2758 = ((abs(_2595 / _2583) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2605 * _2729) - exp2(_2605 * _2730)) * _2718))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2769 = exp2((_2758 * (-1.44269502162933349609375)) * (1.0 - _2760.w));
        float _2770 = log2(_2769);
        float _2786 = log2(_2514);
        _2607 = (exp2(_2786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].x)) * _2760.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2609 = (exp2(_2786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].y)) * _2760.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2611 = (exp2(_2786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].z)) * _2760.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2613 = _2769 * _2514;
    }
    else
    {
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
        _2613 = _2514;
    }
    float _2625 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2626 = _2625 == 3.0;
    float _2627 = log2(_2613);
    float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2456 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _698))) + ((_2462 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1504)) * cbPerFrame._m0[3u].x));
    float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2458 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _698))) + ((_2464 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1504)) * cbPerFrame._m0[3u].x));
    float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2460 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _698))) + ((_2466 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1504)) * cbPerFrame._m0[3u].x));
    float _2645 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2645 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.y = _2645 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.z = _2645 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.w = cbInstanceData._m0[_2486].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
}


