#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1171;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3783 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3794 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3805 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].y) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3816 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _422 = (_415 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _423 = (_415 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _424 = (_415 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _434;
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _511 = ((_481.z - _502) * _415) + _502;
    float _514 = ((((_481.x - _500) * _415) + _500) * 2.0) + (-1.0);
    float _515 = ((((_481.y - _501) * _415) + _501) * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3827 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _521 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _555 = (_514 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_456.x * 2.0) + (-1.0)))) + (((_543.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _556 = (_515 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_456.y * 2.0) + (-1.0)))) + (((_543.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _584 = _582.x;
    float _602 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _584) * _415) + _584;
    float _606 = ((_568.x - _602) * cbMtdParam._m0[19u].z) + _602;
    float _611 = (((_456.z - _511) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _511;
    float _615 = ((_543.z - _611) * cbMtdParam._m0[19u].w) + _611;
    float _617 = cbMtdParam._m0[22u].x + _543.w;
    float _620 = fma(_521, _230 * NORMAL.x, fma(_556, _237 * TANGENT.x, (_223 * _215) * _555));
    float _623 = fma(_521, _230 * NORMAL.y, fma(_556, _237 * TANGENT.y, (_223 * _216) * _555));
    float _626 = fma(_521, _230 * NORMAL.z, fma(_556, _237 * TANGENT.z, (_223 * _217) * _555));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3838 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _634 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3860 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3871 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3882 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3893 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _639 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    float _719 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _720 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _741 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _744 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _758 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3904 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _770 = 1.0 - _639;
    float _771 = _767 * _770;
    float _772 = _768 * _770;
    float _773 = _769 * _770;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _639;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _639;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _639;
    float _781 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _719, cbSceneParam._m0[86u].y * _720));
    float _797 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _793.x;
    float _798 = dot(vec3(_631, _632, _633), vec3(_711, _712, _713));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _631) - _711;
    float _806 = (_801 * _632) - _712;
    float _807 = (_801 * _633) - _713;
    float _811 = abs(dot(vec3(_711, _712, _713), vec3(_631, _632, _633)));
    float _3937 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_634);
    float _826 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _832 = (1.0 - _826) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _833 = _826 * _813;
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _899 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _903 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _928 = _861 + _631;
        float _929 = _865 + _632;
        float _930 = _869 + _633;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _895;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _899;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _903;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_631, _632, _633), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3985 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_631, _632, _633), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _4018 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_631, _632, _633), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _4051 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1214 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1218 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1241 = _861 + _631;
        float _1242 = _865 + _632;
        float _1243 = _869 + _633;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_631, _632, _633), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4114 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_631, _632, _633), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4147 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_631, _632, _633), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4180 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1171;
        _1480 = _1171;
        _1481 = _1171;
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _805 * 0.5;
    float _1548 = _806 * 0.5;
    float _1549 = _807 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1679 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1682 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1679 > 0.0)
        {
            _1883 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2178;
        if (_1682 > 0.0)
        {
            _2178 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2178 = frontier_phi_35_30_ladder;
        }
        float _2180 = isnan(_1883) ? _1710 : (isnan(_1710) ? _1883 : min(_1710, _1883));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1676) + _1665;
        float _2186 = (_2181 * _1679) + _1669;
        float _2187 = (_2181 * _1682) + _1673;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_13_35_ladder = _2332.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2332.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2332.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1616);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1776 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1779 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1888;
        if (_1773 > 0.0)
        {
            _1888 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2205;
        if (_1776 > 0.0)
        {
            _2205 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2205 = frontier_phi_37_32_ladder;
        }
        float _2543;
        if (_1779 > 0.0)
        {
            _2543 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2543 = frontier_phi_47_44_ladder;
        }
        float _2545 = isnan(_2205) ? _1888 : (isnan(_1888) ? _2205 : min(_1888, _2205));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1773) + _1762;
        float _2551 = (_2546 * _1776) + _1766;
        float _2552 = (_2546 * _1779) + _1770;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_47_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_22_47_ladder_2;
        _1800 = frontier_phi_22_47_ladder_1;
        _1802 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1707);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1815 = (((_832 * _781) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1817 = (((_832 * _783) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1800 - _1700)) + _1700);
    float _1819 = (((_832 * _784) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1802 - _1702)) + _1702);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    float _1862 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1875 = _1862 / _1874;
    float _1876 = _1866 / _1874;
    float _1877 = _1870 / _1874;
    float _2024;
    float _2025;
    float _2026;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1904 = ((uint(_1877 > cbSceneParam._m0[59u].y) + uint(_1877 > cbSceneParam._m0[59u].x)) + uint(_1877 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1905 = _1904 + 43u;
        uint _1913 = _1904 + 44u;
        uint _1921 = _1904 + 45u;
        uint _1929 = _1904 + 46u;
        float _1940 = fma(_1874, cbSceneParam._m0[_1905].w, fma(_1870, cbSceneParam._m0[_1905].z, fma(_1866, cbSceneParam._m0[_1905].y, _1862 * cbSceneParam._m0[_1905].x)));
        float _1944 = fma(_1874, cbSceneParam._m0[_1913].w, fma(_1870, cbSceneParam._m0[_1913].z, fma(_1866, cbSceneParam._m0[_1913].y, _1862 * cbSceneParam._m0[_1913].x)));
        float _1952 = fma(_1874, cbSceneParam._m0[_1929].w, fma(_1870, cbSceneParam._m0[_1929].z, fma(_1866, cbSceneParam._m0[_1929].y, _1862 * cbSceneParam._m0[_1929].x)));
        float _1957 = cbSceneParam._m0[33u].z * _1952;
        float _1959 = cbSceneParam._m0[33u].w * _1952;
        float _1962 = fma(_1874, cbSceneParam._m0[_1921].w, fma(_1870, cbSceneParam._m0[_1921].z, fma(_1866, cbSceneParam._m0[_1921].y, _1862 * cbSceneParam._m0[_1921].x))) / _1952;
        float _2010 = (cbSceneParam._m0[33u].x - sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877))) * cbSceneParam._m0[33u].y;
        float _4306 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2017 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 + _1940) / _1952, (_1959 + _1944) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 + _1940) / _1952, (_1944 - _1957) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 - _1957) / _1952, (_1944 - _1959) / _1952), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 - _1959) / _1952, (_1957 + _1944) / _1952), _1962), 0.0)).x), vec4(0.25)));
        _2024 = 1.0 - (_2017 * cbSceneParam._m0[34u].x);
        _2025 = 1.0 - (_2017 * cbSceneParam._m0[34u].y);
        _2026 = 1.0 - (_2017 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2024 = 1.0;
        _2025 = 1.0;
        _2026 = 1.0;
    }
    float _2090;
    float _2092;
    float _2094;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2078 = fma(_1874, cbSceneParam._m0[63u].w, fma(_1870, cbSceneParam._m0[63u].z, fma(_1866, cbSceneParam._m0[63u].y, _1862 * cbSceneParam._m0[63u].x)));
        float _2079 = fma(_1874, cbSceneParam._m0[60u].w, fma(_1870, cbSceneParam._m0[60u].z, fma(_1866, cbSceneParam._m0[60u].y, _1862 * cbSceneParam._m0[60u].x))) / _2078;
        float _2080 = fma(_1874, cbSceneParam._m0[61u].w, fma(_1870, cbSceneParam._m0[61u].z, fma(_1866, cbSceneParam._m0[61u].y, _1862 * cbSceneParam._m0[61u].x))) / _2078;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2079 >= cbSceneParam._m0[64u].x) && (_2080 >= cbSceneParam._m0[64u].y)) && (_2079 <= cbSceneParam._m0[64u].z)) && (_2080 <= cbSceneParam._m0[64u].w))
        {
            float _2218 = fma(_1874, cbSceneParam._m0[62u].w, fma(_1870, cbSceneParam._m0[62u].z, fma(_1866, cbSceneParam._m0[62u].y, _1862 * cbSceneParam._m0[62u].x))) / _2078;
            float _2222 = isnan(cbSceneParam._m0[41u].w) ? _2218 : (isnan(_2218) ? cbSceneParam._m0[41u].w : max(_2218, cbSceneParam._m0[41u].w));
            float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877))) * cbSceneParam._m0[33u].y;
            float _4322 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
            float _2272 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2079, cbSceneParam._m0[33u].w + _2080), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2079, _2080 - cbSceneParam._m0[33u].z), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2079 - cbSceneParam._m0[33u].z, _2080 - cbSceneParam._m0[33u].w), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2079 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2080), _2222), 0.0)).x), vec4(0.25)));
            float _2276 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
            float _2277 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
            float _2278 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
            frontier_phi_34_33_ladder_1 = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
            frontier_phi_34_33_ladder_2 = isnan(_2276) ? _2024 : (isnan(_2024) ? _2276 : min(_2024, _2276));
        }
        else
        {
            frontier_phi_34_33_ladder = _2026;
            frontier_phi_34_33_ladder_1 = _2025;
            frontier_phi_34_33_ladder_2 = _2024;
        }
        _2090 = frontier_phi_34_33_ladder_2;
        _2092 = frontier_phi_34_33_ladder_1;
        _2094 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2090 = _2024;
        _2092 = _2025;
        _2094 = _2026;
    }
    uvec4 _2099 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2101 = _2099.x * 14u;
    uint _2102 = _2101 + 13u;
    float _2109 = _797 + (-1.0);
    float _2114 = (cbLight._m0[_2102].x * _2109) + 1.0;
    float _2115 = (cbLight._m0[_2102].y * _2109) + 1.0;
    float _2116 = (cbLight._m0[_2102].z * _2109) + 1.0;
    float _2117 = (cbLight._m0[_2102].w * _2109) + 1.0;
    uint _2118 = _2101 + 5u;
    float _2124 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2128 = _2101 + 4u;
    float _2137 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2141 = _2101 | 1u;
    float _2152 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_631, _632, _633));
    float _2155 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_631, _632, _633));
    float _4358 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _4369 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2160 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2162 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2169 = ((cbLight._m0[_2118].x * _2124) * _2162) + (((cbLight._m0[_2128].x * _2090) * _2137) * _2160);
    float _2170 = ((_2124 * cbLight._m0[_2118].y) * _2162) + (((cbLight._m0[_2128].y * _2092) * _2137) * _2160);
    float _2171 = ((_2124 * cbLight._m0[_2118].z) * _2162) + (((cbLight._m0[_2128].z * _2094) * _2137) * _2160);
    uvec4 _2175 = floatBitsToUint(cbLight._m0[_2101 + 12u]);
    bool _2177 = _2175.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2177)
    {
        _2279 = _2169;
        _2281 = _2170;
        _2283 = _2171;
    }
    else
    {
        uint _2287 = _2101 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2101 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4380 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2306 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2169;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2170;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2171;
    }
    bool _2286 = _2175.y == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2286)
    {
        _2341 = _2279;
        _2343 = _2281;
        _2345 = _2283;
    }
    else
    {
        uint _2514 = _2101 + 7u;
        float _2530 = (dot(vec3(cbLight._m0[_2101 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2531 = _2530 * _2530;
        float _4396 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2532 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2533 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2341 = (((cbLight._m0[_2514].x * 0.3183098733425140380859375) * _2532) * _2533) + _2279;
        _2343 = (((cbLight._m0[_2514].y * 0.3183098733425140380859375) * _2532) * _2533) + _2281;
        _2345 = (((cbLight._m0[_2514].z * 0.3183098733425140380859375) * _2532) * _2533) + _2283;
    }
    uint _2348 = _2101 + 8u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _634) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2101].x + _711;
    float _2364 = cbLight._m0[_2101].y + _712;
    float _2365 = cbLight._m0[_2101].z + _713;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2101].xyz));
    float _4412 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2377 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2378 = dot(vec3(_631, _632, _633), vec3(_2370, _2371, _2372));
    float _4434 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2370, _2371, _2372));
    float _4445 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2362 * _2362;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
    float _2399 = 0.959999978542327880859375 - _778;
    float _2401 = 0.959999978542327880859375 - _779;
    float _2402 = 0.959999978542327880859375 - _780;
    float _2409 = 1.0 - _2362;
    float _2420 = (0.5 / (((_2377 * ((_2376 * _2409) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2409) + _2362) * _2376))) * _2376;
    float _4456 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    uint _2436 = _2101 + 9u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _634) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2141].x + _711;
    float _2450 = cbLight._m0[_2141].y + _712;
    float _2451 = cbLight._m0[_2141].z + _713;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2141].xyz));
    float _4467 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2463 = dot(vec3(_631, _632, _633), vec3(_2456, _2457, _2458));
    float _4478 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2456, _2457, _2458));
    float _4489 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2448 * _2448;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2489 = 1.0 - _2448;
    float _2499 = (0.5 / (((_2377 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2489) + _2448) * _2462))) * _2462;
    float _4500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    float _2511 = (((((_2482 * _2399) + _781) * cbLight._m0[_2436].x) * _2501) * _2124) + ((((cbLight._m0[_2348].x * _2090) * ((_2398 * _2399) + _781)) * _2422) * _2137);
    float _2512 = (((((_2482 * _2401) + _783) * cbLight._m0[_2436].y) * _2501) * _2124) + ((((cbLight._m0[_2348].y * _2092) * ((_2398 * _2401) + _783)) * _2422) * _2137);
    float _2513 = (((((_2482 * _2402) + _784) * cbLight._m0[_2436].z) * _2501) * _2124) + ((((cbLight._m0[_2348].z * _2094) * ((_2398 * _2402) + _784)) * _2422) * _2137);
    float _2569;
    float _2571;
    float _2573;
    if (_2177)
    {
        _2569 = _2511;
        _2571 = _2512;
        _2573 = _2513;
    }
    else
    {
        uint _2575 = _2101 + 2u;
        uint _2579 = _2101 + 10u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _634) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _711;
        float _2596 = cbLight._m0[_2575].y + _712;
        float _2597 = cbLight._m0[_2575].z + _713;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2575].xyz));
        float _4511 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2609 = dot(vec3(_631, _632, _633), vec3(_2602, _2603, _2604));
        float _4522 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4533 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2377 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2635) + _2594) * _2608))) * _2608;
        float _4544 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2569 = (((((_2628 * _2399) + _781) * cbLight._m0[_2579].x) * _2647) * _2648) + _2511;
        _2571 = (((((_2628 * _2401) + _783) * cbLight._m0[_2579].y) * _2647) * _2648) + _2512;
        _2573 = (((((_2628 * _2402) + _784) * cbLight._m0[_2579].z) * _2647) * _2648) + _2513;
    }
    float _2679;
    float _2681;
    float _2683;
    if (_2286)
    {
        _2679 = _2569;
        _2681 = _2571;
        _2683 = _2573;
    }
    else
    {
        uint _2690 = _2101 + 3u;
        uint _2694 = _2101 + 11u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _634) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _711;
        float _2711 = cbLight._m0[_2690].y + _712;
        float _2712 = cbLight._m0[_2690].z + _713;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2690].xyz));
        float _4560 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2724 = dot(vec3(_631, _632, _633), vec3(_2717, _2718, _2719));
        float _4571 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4582 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
        float _2750 = 1.0 - _2709;
        float _2760 = (0.5 / (((_2377 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2750) + _2709) * _2723))) * _2723;
        float _4593 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2679 = (((((_2743 * _2399) + _781) * cbLight._m0[_2694].x) * _2762) * _2763) + _2569;
        _2681 = (((((_2743 * _2401) + _783) * cbLight._m0[_2694].y) * _2762) * _2763) + _2571;
        _2683 = (((((_2743 * _2402) + _784) * cbLight._m0[_2694].z) * _2762) * _2763) + _2573;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2099.y == 0u)
    {
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _720) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _719) / _2785)));
        float _2806 = (log2(_1877 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3057)
                {
                    frontier_phi_66_pred = _3046;
                    frontier_phi_66_pred_1 = _3045;
                    frontier_phi_66_pred_2 = _3044;
                    frontier_phi_66_pred_3 = _3043;
                    frontier_phi_66_pred_4 = _3042;
                    frontier_phi_66_pred_5 = _3041;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3056;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3047 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _1875;
                        float _3232 = _3191.y - _1876;
                        float _3233 = _3191.z - _1877;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_738, _741, _744), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4619 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _1875;
                        float _3267 = (-0.0) - _1876;
                        float _3268 = (-0.0) - _1877;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3282 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3283 = 1.0 - _813;
                        float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                        float _3291 = _3290 * _3290;
                        float _3292 = _3291 * _3291;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3295 = _3275 + _3240;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3303 = dot(vec3(_738, _741, _744), vec3(_3273, _3274, _3275));
                        float _4635 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3307 = dot(vec3(_738, _741, _744), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                        float _4646 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                        float _3315 = _3251 * _3291;
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3241) + _3316;
                        float _4657 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3321 = 1.0 - _3291;
                        float _3331 = (0.5 / (((_3320 * ((_3306 * _3321) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3291) * _3306))) * _3320;
                        float _4668 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3342 = (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3314 * _3314) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3100 = (_3262 * _3210.x) + _3168;
                        _3101 = (_3262 * _3210.y) + _3169;
                        _3102 = (_3262 * _3210.z) + _3170;
                        _3097 = (_3342 * _3227.x) + _3165;
                        _3098 = (_3342 * _3227.y) + _3166;
                        _3099 = (_3342 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_66_pred = _3102;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                _2907 = frontier_phi_66_pred;
                _2905 = frontier_phi_66_pred_1;
                _2903 = frontier_phi_66_pred_2;
                _2901 = frontier_phi_66_pred_3;
                _2899 = frontier_phi_66_pred_4;
                _2897 = frontier_phi_66_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2897;
                    _3042 = _2899;
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2913) & _2816) == 0u)
        {
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
            float _3035 = _3034 * _1875;
            float _3036 = _3034 * _1876;
            float _3037 = _3034 * _1877;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3148 = _2896;
                float _3149 = _2898;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                uint _3154 = _2913;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3164)
                    {
                        frontier_phi_72_pred = _3153;
                        frontier_phi_72_pred_1 = _3152;
                        frontier_phi_72_pred_2 = _3151;
                        frontier_phi_72_pred_3 = _3150;
                        frontier_phi_72_pred_4 = _3149;
                        frontier_phi_72_pred_5 = _3148;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        uint _3366 = _3163;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3450;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3377 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3377 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3377 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3377 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_1877, _3484.z, fma(_1876, _3484.y, _3484.x * _1875)) + _3484.w;
                            _3497 = !((fma(_1877, _3465.z, fma(_1876, _3465.y, _3465.x * _1875)) + _3465.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3392.x - _1875;
                                float _3525 = _3392.y - _1876;
                                float _3526 = _3392.z - _1877;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3393 * _3393));
                                float _4679 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3542 = sqrt(_3527) * _3408.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_738, _741, _744))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_1877, _3435.z, fma(_1876, _3435.y, _3435.x * _1875)) + _3435.w) / _3496;
                                float _3556 = (fma(_1877, _3450.z, fma(_1876, _3450.y, _3450.x * _1875)) + _3450.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4695 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _813;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3035;
                                float _3586 = _3532 - _3036;
                                float _3587 = _3533 - _3037;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_738, _741, _744), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4706 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3599 = dot(vec3(_738, _741, _744), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4717 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_738, _741, _744), vec3(_3531, _3532, _3533))) + _3608;
                                float _4728 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4739 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3562 * _3408.y;
                                frontier_phi_78_pred_1 = _3562 * _3408.x;
                                frontier_phi_78_pred_2 = _3636 * _3420.z;
                                frontier_phi_78_pred_3 = _3636 * _3420.y;
                                frontier_phi_78_pred_4 = _3636 * _3420.x;
                                frontier_phi_78_pred_5 = _3562 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_78_pred;
                            _3643 = frontier_phi_78_pred_1;
                            _3642 = frontier_phi_78_pred_2;
                            _3641 = frontier_phi_78_pred_3;
                            _3640 = frontier_phi_78_pred_4;
                            _3645 = frontier_phi_78_pred_5;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3352;
                        frontier_phi_72_pred_1 = _3351;
                        frontier_phi_72_pred_2 = _3350;
                        frontier_phi_72_pred_3 = _3349;
                        frontier_phi_72_pred_4 = _3348;
                        frontier_phi_72_pred_5 = _3347;
                    }
                    _3020 = frontier_phi_72_pred;
                    _3018 = frontier_phi_72_pred_1;
                    _3016 = frontier_phi_72_pred_2;
                    _3014 = frontier_phi_72_pred_3;
                    _3012 = frontier_phi_72_pred_4;
                    _3010 = frontier_phi_72_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _3010;
                        _3149 = _3012;
                        _3150 = _3014;
                        _3151 = _3016;
                        _3152 = _3018;
                        _3153 = _3020;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3020;
                frontier_phi_60_61_ladder_1 = _3018;
                frontier_phi_60_61_ladder_2 = _3014;
                frontier_phi_60_61_ladder_3 = _3012;
                frontier_phi_60_61_ladder_4 = _3010;
                frontier_phi_60_61_ladder_5 = _3016;
            }
            else
            {
                frontier_phi_60_61_ladder = _2906;
                frontier_phi_60_61_ladder_1 = _2904;
                frontier_phi_60_61_ladder_2 = _2900;
                frontier_phi_60_61_ladder_3 = _2898;
                frontier_phi_60_61_ladder_4 = _2896;
                frontier_phi_60_61_ladder_5 = _2902;
            }
            _3009 = frontier_phi_60_61_ladder_4;
            _3011 = frontier_phi_60_61_ladder_3;
            _3013 = frontier_phi_60_61_ladder_2;
            _3015 = frontier_phi_60_61_ladder_5;
            _3017 = frontier_phi_60_61_ladder_1;
            _3019 = frontier_phi_60_61_ladder;
        }
        float _3024 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2829 = (_3024 * _3015) + _2341;
        _2831 = (_3024 * _3017) + _2343;
        _2833 = (_3024 * _3019) + _2345;
        _2835 = ((_3009 * _781) * _3024) + _2679;
        _2837 = ((_3011 * _783) * _3024) + _2681;
        _2839 = ((_3013 * _784) * _3024) + _2683;
    }
    else
    {
        _2829 = _2341;
        _2831 = _2343;
        _2833 = _2345;
        _2835 = _2679;
        _2837 = _2681;
        _2839 = _2683;
    }
    float _4755 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4766 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4777 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    uint _2859 = _264 + 6u;
    float _2867 = _719 / cbSceneParam._m0[86u].x;
    float _2868 = _720 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2922 = _2921 / _653;
        float _2933 = _2922 * _704;
        float _2934 = _705 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _706;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3072 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3110 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2957 * _3081) - exp2(_2957 * _3082)) * _3070))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2887);
        _2959 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2961 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2963 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2965 = _3121 * _2887;
    }
    else
    {
        _2959 = _2884;
        _2961 = _2885;
        _2963 = _2886;
        _2965 = _2887;
    }
    float _2977 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2978 = _2977 == 3.0;
    float _2979 = log2(_2965);
    float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2829 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _797))) + ((_2835 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2831 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _797))) + ((_2837 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2833 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _797))) + ((_2839 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2997 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2997 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.y = _2997 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.z = _2997 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.w = cbInstanceData._m0[_2859].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
}


