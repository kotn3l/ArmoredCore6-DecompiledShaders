#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1387;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3994 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _503 = ((_473.z - _494) * _398) + _494;
    float _506 = ((((_473.x - _492) * _398) + _492) * 2.0) + (-1.0);
    float _507 = ((((_473.y - _493) * _398) + _493) * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _4005 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))));
    float _516 = _506 + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _517 = _507 + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _520 = fma(_513, _249, fma(_517, _256, _516 * _242));
    float _523 = fma(_513, _250, fma(_517, _257, _516 * _243));
    float _526 = fma(_513, _251, fma(_517, _258, _516 * _244));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _579 = ((_574 - _575) * cbMtdParam._m0[24u].z) + _575;
    float _581 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_579 * cbMtdParam._m0[21u].z);
    float _4016 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _584 = (-0.0) - cbMtdParam._m0[24u].x;
    float _586 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
    float _594 = _582 - ((_582 * TEXCOORD_8.x) * _587);
    float _595 = _582 - ((_582 * TEXCOORD_8.y) * _587);
    float _596 = _582 - ((_582 * TEXCOORD_8.z) * _587);
    float _603 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _607 = ((isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : min(_603, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _615 = (_607 - (((_579 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _607))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4047 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _620 = ((_594 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) * _616) + _405;
    float _621 = ((_595 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) * _616) + _406;
    float _622 = ((_596 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) * _616) + _407;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _664 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_636 - _637) * cbMtdParam._m0[24u].w) + _637) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4058 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _673 = ((((cbMtdParam._m0[10u].x - _620) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _665) + _620;
    float _674 = ((((cbMtdParam._m0[10u].y - _621) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _665) + _621;
    float _675 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _622)) * _665) + _622;
    vec4 _701 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _703 = _701.x;
    float _721 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _703) * _398) + _703;
    float _725 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _721) * cbMtdParam._m0[19u].z) + _721;
    float _728 = _725 - ((_616 * _594) * _725);
    float _730 = _728 - (_728 * _665);
    float _735 = (((_446.z - _503) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _503;
    vec4 _749 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4069 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _767 = (((_749.z - _735) * _594) * _616) + _735;
    float _770 = ((cbMtdParam._m0[23u].y - _767) * _665) + _767;
    vec4 _789 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _4080 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _817 = (((cbMtdParam._m0[21u].x * _516) + ((_756 - _516) * _594)) * _616) + _516;
    float _818 = (((cbMtdParam._m0[21u].x * _517) + ((_757 - _517) * _595)) * _616) + _517;
    float _819 = (((sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) - _513) * _596) * _616) + _513;
    float _830 = (((_795 - _817) + (_817 * cbMtdParam._m0[22u].z)) * _665) + _817;
    float _831 = (((_796 - _818) + (_818 * cbMtdParam._m0[22u].z)) * _665) + _818;
    float _832 = ((sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) - _819) * _665) + _819;
    float _834 = cbMtdParam._m0[22u].x + _546.w;
    float _837 = fma(_832, _249, fma(_831, _256, _830 * _242));
    float _840 = fma(_832, _250, fma(_831, _257, _830 * _243));
    float _843 = fma(_832, _251, fma(_831, _258, _830 * _244));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _4091 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _851 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4113 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4124 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4135 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4146 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _856 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _870 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _910);
    float _921 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _957 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _960 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _974 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4157 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _986 = 1.0 - _856;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _856;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _856;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _856;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _1013 = ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_848, _849, _850), vec3(_927, _928, _929));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _848) - _927;
    float _1022 = (_1017 * _849) - _928;
    float _1023 = (_1017 * _850) - _929;
    float _1027 = abs(dot(vec3(_927, _928, _929), vec3(_848, _849, _850)));
    float _4190 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_851);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1029;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1115 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1119 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1144 = _1077 + _848;
        float _1145 = _1081 + _849;
        float _1146 = _1085 + _850;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_848, _849, _850), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4238 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_848, _849, _850), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4271 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_848, _849, _850), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4304 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1430 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1434 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1457 = _1077 + _848;
        float _1458 = _1081 + _849;
        float _1459 = _1085 + _850;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_848, _849, _850), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4367 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_848, _849, _850), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4400 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_848, _849, _850), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4433 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1387;
        _1696 = _1387;
        _1697 = _1387;
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = _1387;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1399)) + _1399;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1400)) + _1400;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1401)) + _1401;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1021 * 0.5;
    float _1764 = _1022 * 0.5;
    float _1765 = _1023 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1893 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1896 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1924 = frontier_phi_14_12_ladder;
        }
        float _2095;
        if (_1893 > 0.0)
        {
            _2095 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2095 = frontier_phi_23_19_ladder;
        }
        float _2390;
        if (_1896 > 0.0)
        {
            _2390 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2390 = frontier_phi_35_30_ladder;
        }
        float _2392 = isnan(_2095) ? _1924 : (isnan(_1924) ? _2095 : min(_1924, _2095));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1890) + _1879;
        float _2398 = (_2393 * _1893) + _1883;
        float _2399 = (_2393 * _1896) + _1887;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2400;
        float _2404 = _2400 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 > _2404) || ((_2398 < _2402) || ((_2397 < _2402) || (_2397 > _2404))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2399, cbModelParam._m0[9u].z, fma(_2398, cbModelParam._m0[9u].y, _2397 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2399, cbModelParam._m0[10u].z, fma(_2398, cbModelParam._m0[10u].y, _2397 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2399, cbModelParam._m0[11u].z, fma(_2398, cbModelParam._m0[11u].y, _2397 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_13_35_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_13_35_ladder_2;
        _1914 = frontier_phi_13_35_ladder_1;
        _1916 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1832);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _1988 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _1991 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2100;
        if (_1985 > 0.0)
        {
            _2100 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2100 = frontier_phi_25_21_ladder;
        }
        float _2417;
        if (_1988 > 0.0)
        {
            _2417 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2417 = frontier_phi_37_32_ladder;
        }
        float _2755;
        if (_1991 > 0.0)
        {
            _2755 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2755 = frontier_phi_47_44_ladder;
        }
        float _2757 = isnan(_2417) ? _2100 : (isnan(_2100) ? _2417 : min(_2100, _2417));
        float _2758 = isnan(_2755) ? _2757 : (isnan(_2757) ? _2755 : min(_2757, _2755));
        float _2762 = (_2758 * _1985) + _1974;
        float _2763 = (_2758 * _1988) + _1978;
        float _2764 = (_2758 * _1991) + _1982;
        float _2765 = _2758 * 9.9999997473787516355514526367188e-05;
        float _2766 = (-1.0) - _2765;
        float _2768 = _2765 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2764 > _2768) || ((_2764 < _2766) || ((_2763 > _2768) || ((_2763 < _2766) || ((_2762 < _2766) || (_2762 > _2768))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2764, cbModelParam._m0[17u].z, fma(_2763, cbModelParam._m0[17u].y, _2762 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2764, cbModelParam._m0[18u].z, fma(_2763, cbModelParam._m0[18u].y, _2762 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2764, cbModelParam._m0[19u].z, fma(_2763, cbModelParam._m0[19u].y, _2762 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_22_47_ladder = _2886.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2886.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2886.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_22_47_ladder_2;
        _2012 = frontier_phi_22_47_ladder_1;
        _2014 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1921);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2027 = (((_1048 * _997) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1048 * _999) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1048 * _1000) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2087 = _2074 / _2086;
    float _2088 = _2078 / _2086;
    float _2089 = _2082 / _2086;
    float _2236;
    float _2237;
    float _2238;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2116 = ((uint(_2089 > cbSceneParam._m0[59u].y) + uint(_2089 > cbSceneParam._m0[59u].x)) + uint(_2089 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2117 = _2116 + 43u;
        uint _2125 = _2116 + 44u;
        uint _2133 = _2116 + 45u;
        uint _2141 = _2116 + 46u;
        float _2152 = fma(_2086, cbSceneParam._m0[_2117].w, fma(_2082, cbSceneParam._m0[_2117].z, fma(_2078, cbSceneParam._m0[_2117].y, _2074 * cbSceneParam._m0[_2117].x)));
        float _2156 = fma(_2086, cbSceneParam._m0[_2125].w, fma(_2082, cbSceneParam._m0[_2125].z, fma(_2078, cbSceneParam._m0[_2125].y, _2074 * cbSceneParam._m0[_2125].x)));
        float _2164 = fma(_2086, cbSceneParam._m0[_2141].w, fma(_2082, cbSceneParam._m0[_2141].z, fma(_2078, cbSceneParam._m0[_2141].y, _2074 * cbSceneParam._m0[_2141].x)));
        float _2169 = cbSceneParam._m0[33u].z * _2164;
        float _2171 = cbSceneParam._m0[33u].w * _2164;
        float _2174 = fma(_2086, cbSceneParam._m0[_2133].w, fma(_2082, cbSceneParam._m0[_2133].z, fma(_2078, cbSceneParam._m0[_2133].y, _2074 * cbSceneParam._m0[_2133].x))) / _2164;
        float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
        float _4559 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2229 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2152) / _2164, (_2171 + _2156) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2152) / _2164, (_2156 - _2169) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2169) / _2164, (_2156 - _2171) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2171) / _2164, (_2169 + _2156) / _2164), _2174), 0.0)).x), vec4(0.25)));
        _2236 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
        _2237 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
        _2238 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2236 = 1.0;
        _2237 = 1.0;
        _2238 = 1.0;
    }
    float _2302;
    float _2304;
    float _2306;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2290 = fma(_2086, cbSceneParam._m0[63u].w, fma(_2082, cbSceneParam._m0[63u].z, fma(_2078, cbSceneParam._m0[63u].y, _2074 * cbSceneParam._m0[63u].x)));
        float _2291 = fma(_2086, cbSceneParam._m0[60u].w, fma(_2082, cbSceneParam._m0[60u].z, fma(_2078, cbSceneParam._m0[60u].y, _2074 * cbSceneParam._m0[60u].x))) / _2290;
        float _2292 = fma(_2086, cbSceneParam._m0[61u].w, fma(_2082, cbSceneParam._m0[61u].z, fma(_2078, cbSceneParam._m0[61u].y, _2074 * cbSceneParam._m0[61u].x))) / _2290;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2291 >= cbSceneParam._m0[64u].x) && (_2292 >= cbSceneParam._m0[64u].y)) && (_2291 <= cbSceneParam._m0[64u].z)) && (_2292 <= cbSceneParam._m0[64u].w))
        {
            float _2430 = fma(_2086, cbSceneParam._m0[62u].w, fma(_2082, cbSceneParam._m0[62u].z, fma(_2078, cbSceneParam._m0[62u].y, _2074 * cbSceneParam._m0[62u].x))) / _2290;
            float _2434 = isnan(cbSceneParam._m0[41u].w) ? _2430 : (isnan(_2430) ? cbSceneParam._m0[41u].w : max(_2430, cbSceneParam._m0[41u].w));
            float _2477 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
            float _4575 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
            float _2484 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2291, cbSceneParam._m0[33u].w + _2292), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2291, _2292 - cbSceneParam._m0[33u].z), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].z, _2292 - cbSceneParam._m0[33u].w), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2292), _2434), 0.0)).x), vec4(0.25)));
            float _2488 = 1.0 - (_2484 * cbSceneParam._m0[34u].x);
            float _2489 = 1.0 - (_2484 * cbSceneParam._m0[34u].y);
            float _2490 = 1.0 - (_2484 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_34_33_ladder_1 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_34_33_ladder_2 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
        }
        else
        {
            frontier_phi_34_33_ladder = _2238;
            frontier_phi_34_33_ladder_1 = _2237;
            frontier_phi_34_33_ladder_2 = _2236;
        }
        _2302 = frontier_phi_34_33_ladder_2;
        _2304 = frontier_phi_34_33_ladder_1;
        _2306 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2302 = _2236;
        _2304 = _2237;
        _2306 = _2238;
    }
    uvec4 _2311 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2313 = _2311.x * 14u;
    uint _2314 = _2313 + 13u;
    float _2321 = _1013 + (-1.0);
    float _2326 = (cbLight._m0[_2314].x * _2321) + 1.0;
    float _2327 = (cbLight._m0[_2314].y * _2321) + 1.0;
    float _2328 = (cbLight._m0[_2314].z * _2321) + 1.0;
    float _2329 = (cbLight._m0[_2314].w * _2321) + 1.0;
    uint _2330 = _2313 + 5u;
    float _2336 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2340 = _2313 + 4u;
    float _2349 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2353 = _2313 | 1u;
    float _2364 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_848, _849, _850));
    float _2367 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_848, _849, _850));
    float _4611 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _4622 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2374 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2381 = ((cbLight._m0[_2330].x * _2336) * _2374) + (((cbLight._m0[_2340].x * _2302) * _2349) * _2372);
    float _2382 = ((_2336 * cbLight._m0[_2330].y) * _2374) + (((cbLight._m0[_2340].y * _2304) * _2349) * _2372);
    float _2383 = ((_2336 * cbLight._m0[_2330].z) * _2374) + (((cbLight._m0[_2340].z * _2306) * _2349) * _2372);
    uvec4 _2387 = floatBitsToUint(cbLight._m0[_2313 + 12u]);
    bool _2389 = _2387.x == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2389)
    {
        _2491 = _2381;
        _2493 = _2382;
        _2495 = _2383;
    }
    else
    {
        uint _2499 = _2313 + 6u;
        float _2515 = (dot(vec3(cbLight._m0[_2313 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2516 = _2515 * _2515;
        float _4633 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2517 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2518 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2491 = (((cbLight._m0[_2499].x * 0.3183098733425140380859375) * _2517) * _2518) + _2381;
        _2493 = (((cbLight._m0[_2499].y * 0.3183098733425140380859375) * _2517) * _2518) + _2382;
        _2495 = (((cbLight._m0[_2499].z * 0.3183098733425140380859375) * _2517) * _2518) + _2383;
    }
    bool _2498 = _2387.y == 0u;
    float _2553;
    float _2555;
    float _2557;
    if (_2498)
    {
        _2553 = _2491;
        _2555 = _2493;
        _2557 = _2495;
    }
    else
    {
        uint _2726 = _2313 + 7u;
        float _2742 = (dot(vec3(cbLight._m0[_2313 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2743 = _2742 * _2742;
        float _4649 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2744 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2745 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2553 = (((cbLight._m0[_2726].x * 0.3183098733425140380859375) * _2744) * _2745) + _2491;
        _2555 = (((cbLight._m0[_2726].y * 0.3183098733425140380859375) * _2744) * _2745) + _2493;
        _2557 = (((cbLight._m0[_2726].z * 0.3183098733425140380859375) * _2744) * _2745) + _2495;
    }
    uint _2560 = _2313 + 8u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _851) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2313].x + _927;
    float _2576 = cbLight._m0[_2313].y + _928;
    float _2577 = cbLight._m0[_2313].z + _929;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2313].xyz));
    float _4665 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _4676 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2589 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2590 = dot(vec3(_848, _849, _850), vec3(_2582, _2583, _2584));
    float _4687 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2582, _2583, _2584));
    float _4698 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2574 * _2574;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
    float _2611 = 0.959999978542327880859375 - _994;
    float _2613 = 0.959999978542327880859375 - _995;
    float _2614 = 0.959999978542327880859375 - _996;
    float _2621 = 1.0 - _2574;
    float _2632 = (0.5 / (((_2589 * ((_2588 * _2621) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2621) + _2574) * _2588))) * _2588;
    float _4709 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2634 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    uint _2648 = _2313 + 9u;
    float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _851) * 0.949999988079071044921875);
    float _2660 = _2659 * _2659;
    float _2661 = cbLight._m0[_2353].x + _927;
    float _2662 = cbLight._m0[_2353].y + _928;
    float _2663 = cbLight._m0[_2353].z + _929;
    float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
    float _2668 = _2667 * _2661;
    float _2669 = _2667 * _2662;
    float _2670 = _2667 * _2663;
    float _2671 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2353].xyz));
    float _4720 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2675 = dot(vec3(_848, _849, _850), vec3(_2668, _2669, _2670));
    float _4731 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2679 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2668, _2669, _2670));
    float _4742 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2683 = _2660 * _2660;
    float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
    float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
    float _2701 = 1.0 - _2660;
    float _2711 = (0.5 / (((_2589 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2701) + _2660) * _2674))) * _2674;
    float _4753 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2713 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
    float _2723 = (((((_2694 * _2611) + _997) * cbLight._m0[_2648].x) * _2713) * _2336) + ((((cbLight._m0[_2560].x * _2302) * ((_2610 * _2611) + _997)) * _2634) * _2349);
    float _2724 = (((((_2694 * _2613) + _999) * cbLight._m0[_2648].y) * _2713) * _2336) + ((((cbLight._m0[_2560].y * _2304) * ((_2610 * _2613) + _999)) * _2634) * _2349);
    float _2725 = (((((_2694 * _2614) + _1000) * cbLight._m0[_2648].z) * _2713) * _2336) + ((((cbLight._m0[_2560].z * _2306) * ((_2610 * _2614) + _1000)) * _2634) * _2349);
    float _2781;
    float _2783;
    float _2785;
    if (_2389)
    {
        _2781 = _2723;
        _2783 = _2724;
        _2785 = _2725;
    }
    else
    {
        uint _2787 = _2313 + 2u;
        uint _2791 = _2313 + 10u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _851) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _927;
        float _2808 = cbLight._m0[_2787].y + _928;
        float _2809 = cbLight._m0[_2787].z + _929;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2787].xyz));
        float _4764 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2821 = dot(vec3(_848, _849, _850), vec3(_2814, _2815, _2816));
        float _4775 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4786 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2589 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2847) + _2806) * _2820))) * _2820;
        float _4797 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2781 = (((((_2840 * _2611) + _997) * cbLight._m0[_2791].x) * _2859) * _2860) + _2723;
        _2783 = (((((_2840 * _2613) + _999) * cbLight._m0[_2791].y) * _2859) * _2860) + _2724;
        _2785 = (((((_2840 * _2614) + _1000) * cbLight._m0[_2791].z) * _2859) * _2860) + _2725;
    }
    float _2891;
    float _2893;
    float _2895;
    if (_2498)
    {
        _2891 = _2781;
        _2893 = _2783;
        _2895 = _2785;
    }
    else
    {
        uint _2902 = _2313 + 3u;
        uint _2906 = _2313 + 11u;
        float _2920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2902].w)) * _851) * 0.949999988079071044921875);
        float _2921 = _2920 * _2920;
        float _2922 = cbLight._m0[_2902].x + _927;
        float _2923 = cbLight._m0[_2902].y + _928;
        float _2924 = cbLight._m0[_2902].z + _929;
        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
        float _2929 = _2928 * _2922;
        float _2930 = _2928 * _2923;
        float _2931 = _2928 * _2924;
        float _2932 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2902].xyz));
        float _4813 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2936 = dot(vec3(_848, _849, _850), vec3(_2929, _2930, _2931));
        float _4824 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2940 = dot(vec3(cbLight._m0[_2902].xyz), vec3(_2929, _2930, _2931));
        float _4835 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2944 = _2921 * _2921;
        float _2948 = ((_2939 * _2939) * (_2944 + (-1.0))) + 1.0;
        float _2955 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2962 = 1.0 - _2921;
        float _2972 = (0.5 / (((_2589 * ((_2935 * _2962) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2962) + _2921) * _2935))) * _2935;
        float _4846 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2944 / ((_2948 * _2948) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2891 = (((((_2955 * _2611) + _997) * cbLight._m0[_2906].x) * _2974) * _2975) + _2781;
        _2893 = (((((_2955 * _2613) + _999) * cbLight._m0[_2906].y) * _2974) * _2975) + _2783;
        _2895 = (((((_2955 * _2614) + _1000) * cbLight._m0[_2906].z) * _2974) * _2975) + _2785;
    }
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    if (_2311.y == 0u)
    {
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.x;
        uint _3008 = uint((float(_2996.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _2997))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _2997)));
        float _3018 = (log2(_2089 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3019 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        uint _3022 = uint(isnan(14.0) ? _3019 : (isnan(_3019) ? 14.0 : min(_3019, 14.0)));
        uvec4 _3027 = texelFetch(g_lightClusterGridBuffer, int(((_3022 << 2u) + (_3008 << 6u)) >> 2u));
        uint _3028 = _3027.x;
        uint _3029 = _2996.z;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((((1u << ((_3029 >> 4u) & 15u)) + 4294967295u) & _3028) == 0u) || ((_3029 & 240u) == 0u))
        {
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
        }
        else
        {
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            uint _3258 = 0u;
            uint _3267;
            bool _3268;
            for (;;)
            {
                _3267 = texelFetch(g_lightClassification, int((((_3022 << 5u) + (_3008 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                _3268 = _3267 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3268)
                {
                    frontier_phi_66_pred = _3257;
                    frontier_phi_66_pred_1 = _3256;
                    frontier_phi_66_pred_2 = _3255;
                    frontier_phi_66_pred_3 = _3254;
                    frontier_phi_66_pred_4 = _3253;
                    frontier_phi_66_pred_5 = _3252;
                }
                else
                {
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    uint _3382;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3255;
                    _3380 = _3256;
                    _3381 = _3257;
                    _3382 = _3267;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    for (;;)
                    {
                        uint _3386 = uint(findLSB(_3382)) + (_3258 << 5u);
                        uint _3383 = (_3382 + 4294967295u) & _3382;
                        uint _3388 = _3386 * 48u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3408 = (_3386 * 48u) + 4u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3427 = (_3386 * 48u) + 8u;
                        vec3 _3438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x));
                        float _3442 = _3402.x - _2087;
                        float _3443 = _3402.y - _2088;
                        float _3444 = _3402.z - _2089;
                        float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                        float _3448 = inversesqrt(_3445);
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3452 = dot(vec3(_954, _957, _960), vec3(_3449, _3450, _3451));
                        float _3457 = 1.0 - (_3445 * _3402.w);
                        float _4872 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3459 = sqrt(_3445) * _3421.w;
                        float _3462 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                        float _3463 = _3462 * _3462;
                        float _3466 = ((1.0 - _3463) * _3452) + _3463;
                        float _3469 = _3459 * _3459;
                        float _3473 = ((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3458) / ((_3469 * 0.699999988079071044921875) + 1.0);
                        float _3477 = (-0.0) - _2087;
                        float _3478 = (-0.0) - _2088;
                        float _3479 = (-0.0) - _2089;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3493 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                        float _3494 = 1.0 - _1029;
                        float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                        float _3502 = _3501 * _3501;
                        float _3503 = _3502 * _3502;
                        float _3504 = _3484 + _3449;
                        float _3505 = _3485 + _3450;
                        float _3506 = _3486 + _3451;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3514 = dot(vec3(_954, _957, _960), vec3(_3484, _3485, _3486));
                        float _4888 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3518 = dot(vec3(_954, _957, _960), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                        float _4899 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                        float _3526 = _3462 * _3502;
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3452) + _3527;
                        float _4910 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3532 = 1.0 - _3502;
                        float _3542 = (0.5 / (((_3531 * ((_3517 * _3532) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3502) * _3517))) * _3531;
                        float _4921 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3553 = (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3525 * _3525) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125))) * _3458;
                        _3311 = (_3473 * _3421.x) + _3379;
                        _3312 = (_3473 * _3421.y) + _3380;
                        _3313 = (_3473 * _3421.z) + _3381;
                        _3308 = (_3553 * _3438.x) + _3376;
                        _3309 = (_3553 * _3438.y) + _3377;
                        _3310 = (_3553 * _3438.z) + _3378;
                        if (_3383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3311;
                            _3380 = _3312;
                            _3381 = _3313;
                            _3382 = _3383;
                        }
                    }
                    frontier_phi_66_pred = _3313;
                    frontier_phi_66_pred_1 = _3312;
                    frontier_phi_66_pred_2 = _3311;
                    frontier_phi_66_pred_3 = _3310;
                    frontier_phi_66_pred_4 = _3309;
                    frontier_phi_66_pred_5 = _3308;
                }
                _3119 = frontier_phi_66_pred;
                _3117 = frontier_phi_66_pred_1;
                _3115 = frontier_phi_66_pred_2;
                _3113 = frontier_phi_66_pred_3;
                _3111 = frontier_phi_66_pred_4;
                _3109 = frontier_phi_66_pred_5;
                uint _3259 = _3258 + 1u;
                if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3252 = _3109;
                    _3253 = _3111;
                    _3254 = _3113;
                    _3255 = _3115;
                    _3256 = _3117;
                    _3257 = _3119;
                    _3258 = _3259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
        }
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.z;
        uint _3125 = (_3123 >> 8u) & 15u;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((4294967295u << _3125) & _3028) == 0u)
        {
            _3220 = _3108;
            _3222 = _3110;
            _3224 = _3112;
            _3226 = _3114;
            _3228 = _3116;
            _3230 = _3118;
        }
        else
        {
            float _3245 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
            float _3246 = _3245 * _2087;
            float _3247 = _3245 * _2088;
            float _3248 = _3245 * _2089;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3125 < ((_3123 >> 12u) & 15u))
            {
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3359 = _3108;
                float _3360 = _3110;
                float _3361 = _3112;
                float _3362 = _3114;
                float _3363 = _3116;
                float _3364 = _3118;
                uint _3365 = _3125;
                uint _3374;
                bool _3375;
                for (;;)
                {
                    _3374 = texelFetch(g_lightClassification, int((((_3022 << 5u) + (_3008 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                    _3375 = _3374 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3375)
                    {
                        frontier_phi_72_pred = _3364;
                        frontier_phi_72_pred_1 = _3363;
                        frontier_phi_72_pred_2 = _3362;
                        frontier_phi_72_pred_3 = _3361;
                        frontier_phi_72_pred_4 = _3360;
                        frontier_phi_72_pred_5 = _3359;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3571 = _3359;
                        float _3572 = _3360;
                        float _3573 = _3361;
                        float _3574 = _3362;
                        float _3575 = _3363;
                        float _3576 = _3364;
                        uint _3577 = _3374;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3661;
                        float _3707;
                        bool _3708;
                        for (;;)
                        {
                            uint _3588 = ((_3365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3588 * 40u) + 20u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3588 * 40u) + 24u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3682 = (_3588 * 40u) + 28u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3707 = fma(_2089, _3695.z, fma(_2088, _3695.y, _3695.x * _2087)) + _3695.w;
                            _3708 = !((fma(_2089, _3676.z, fma(_2088, _3676.y, _3676.x * _2087)) + _3676.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3708)
                            {
                                float _3735 = _3603.x - _2087;
                                float _3736 = _3603.y - _2088;
                                float _3737 = _3603.z - _2089;
                                float _3738 = dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737));
                                float _3741 = inversesqrt(_3738);
                                float _3742 = _3741 * _3735;
                                float _3743 = _3741 * _3736;
                                float _3744 = _3741 * _3737;
                                float _3748 = 1.0 - (_3738 / (_3604 * _3604));
                                float _4932 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3753 = sqrt(_3738) * _3619.w;
                                float _3755 = 1.39999997615814208984375 / (_3753 + 1.39999997615814208984375);
                                float _3756 = _3755 * _3755;
                                float _3759 = ((1.0 - _3756) * dot(vec3(_3742, _3743, _3744), vec3(_954, _957, _960))) + _3756;
                                float _3762 = _3753 * _3753;
                                float _3766 = (fma(_2089, _3646.z, fma(_2088, _3646.y, _3646.x * _2087)) + _3646.w) / _3707;
                                float _3767 = (fma(_2089, _3661.z, fma(_2088, _3661.y, _3661.x * _2087)) + _3661.w) / _3707;
                                float _3771 = 1.0 - dot(vec2(_3766, _3767), vec2(_3766, _3767));
                                float _4948 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3773 = _3772 * (((isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0))) * _3749) / ((_3762 * 0.699999988079071044921875) + 1.0));
                                float _3785 = exp2(log2(1.0 / ((_3762 * 3.5) + 5.0)) * 0.25);
                                float _3786 = 1.0 - _1029;
                                float _3793 = sqrt(1.0 - ((1.0 - (_3786 * _3786)) * (1.0 - (_3785 * _3785))));
                                float _3794 = _3793 * _3793;
                                float _3795 = _3794 * _3794;
                                float _3796 = _3742 - _3246;
                                float _3797 = _3743 - _3247;
                                float _3798 = _3744 - _3248;
                                float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                                float _3806 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3246, (-0.0) - _3247, (-0.0) - _3248));
                                float _4959 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3810 = dot(vec3(_954, _957, _960), vec3(_3802 * _3796, _3802 * _3797, _3802 * _3798));
                                float _4970 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3817 = ((_3813 * _3813) * (_3795 + (-1.0))) + 1.0;
                                float _3818 = _3755 * _3794;
                                float _3819 = _3818 * _3818;
                                float _3825 = ((1.0 - _3819) * dot(vec3(_954, _957, _960), vec3(_3742, _3743, _3744))) + _3819;
                                float _4981 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3827 = 1.0 - _3794;
                                float _3837 = (0.5 / (((_3826 * ((_3809 * _3827) + _3794)) + 9.9999999392252902907785028219223e-09) + (((_3826 * _3827) + _3794) * _3809))) * _3826;
                                float _4992 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3847 = (_3772 * _3749) * (((_3795 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3817 * _3817) * ((_3762 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3773 * _3619.y;
                                frontier_phi_78_pred_1 = _3773 * _3619.x;
                                frontier_phi_78_pred_2 = _3847 * _3631.z;
                                frontier_phi_78_pred_3 = _3847 * _3631.y;
                                frontier_phi_78_pred_4 = _3847 * _3631.x;
                                frontier_phi_78_pred_5 = _3773 * _3619.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3855 = frontier_phi_78_pred;
                            _3854 = frontier_phi_78_pred_1;
                            _3853 = frontier_phi_78_pred_2;
                            _3852 = frontier_phi_78_pred_3;
                            _3851 = frontier_phi_78_pred_4;
                            _3856 = frontier_phi_78_pred_5;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3563;
                        frontier_phi_72_pred_1 = _3562;
                        frontier_phi_72_pred_2 = _3561;
                        frontier_phi_72_pred_3 = _3560;
                        frontier_phi_72_pred_4 = _3559;
                        frontier_phi_72_pred_5 = _3558;
                    }
                    _3231 = frontier_phi_72_pred;
                    _3229 = frontier_phi_72_pred_1;
                    _3227 = frontier_phi_72_pred_2;
                    _3225 = frontier_phi_72_pred_3;
                    _3223 = frontier_phi_72_pred_4;
                    _3221 = frontier_phi_72_pred_5;
                    uint _3366 = _3365 + 1u;
                    if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3359 = _3221;
                        _3360 = _3223;
                        _3361 = _3225;
                        _3362 = _3227;
                        _3363 = _3229;
                        _3364 = _3231;
                        _3365 = _3366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3231;
                frontier_phi_60_61_ladder_1 = _3229;
                frontier_phi_60_61_ladder_2 = _3225;
                frontier_phi_60_61_ladder_3 = _3223;
                frontier_phi_60_61_ladder_4 = _3221;
                frontier_phi_60_61_ladder_5 = _3227;
            }
            else
            {
                frontier_phi_60_61_ladder = _3118;
                frontier_phi_60_61_ladder_1 = _3116;
                frontier_phi_60_61_ladder_2 = _3112;
                frontier_phi_60_61_ladder_3 = _3110;
                frontier_phi_60_61_ladder_4 = _3108;
                frontier_phi_60_61_ladder_5 = _3114;
            }
            _3220 = frontier_phi_60_61_ladder_4;
            _3222 = frontier_phi_60_61_ladder_3;
            _3224 = frontier_phi_60_61_ladder_2;
            _3226 = frontier_phi_60_61_ladder_5;
            _3228 = frontier_phi_60_61_ladder_1;
            _3230 = frontier_phi_60_61_ladder;
        }
        float _3235 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _3041 = (_3235 * _3226) + _2553;
        _3043 = (_3235 * _3228) + _2555;
        _3045 = (_3235 * _3230) + _2557;
        _3047 = ((_3220 * _997) * _3235) + _2891;
        _3049 = ((_3222 * _999) * _3235) + _2893;
        _3051 = ((_3224 * _1000) * _3235) + _2895;
    }
    else
    {
        _3041 = _2553;
        _3043 = _2555;
        _3045 = _2557;
        _3047 = _2891;
        _3049 = _2893;
        _3051 = _2895;
    }
    float _5008 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5019 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _5030 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    uint _3071 = _261 + 6u;
    float _3079 = _935 / cbSceneParam._m0[86u].x;
    float _3080 = _936 / cbSceneParam._m0[86u].y;
    vec4 _3094 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, (log2((isnan(cbSceneParam._m0[77u].w) ? _870 : (isnan(_870) ? cbSceneParam._m0[77u].w : min(_870, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3096 = _3094.x;
    float _3097 = _3094.y;
    float _3098 = _3094.z;
    float _3099 = _3094.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_870 > cbSceneParam._m0[78u].w)
    {
        float _3133 = isnan(_870) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _870 : min(cbSceneParam._m0[80u].w, _870));
        float _3134 = _3133 / _870;
        float _3145 = _3134 * _920;
        float _3146 = _921 * _3134;
        float _3147 = (-0.0) - _3146;
        float _3148 = _3134 * _922;
        float _3150 = (cbSceneParam._m0[77u].w * _3147) / _3133;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3146;
        float _3158 = sqrt(((_3145 * _3145) + (_3146 * _3146)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3133)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3321;
        if (abs((_3147 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3321 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3281 = 1.0 / cbSceneParam._m0[80u].x;
            float _3282 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3283 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            _3321 = ((abs(_3158 / _3147) * cbSceneParam._m0[80u].y) * ((((_3292 - _3293) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))))) * _3281)) - ((exp2(_3168 * _3292) - exp2(_3168 * _3293)) * _3281))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3079, _3080, 1.0), 0.0);
        float _3332 = exp2((_3321 * (-1.44269502162933349609375)) * (1.0 - _3323.w));
        float _3333 = log2(_3332);
        float _3349 = log2(_3099);
        _3170 = (exp2(_3349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].x)) * _3323.x) / cbSceneParam._m0[78u].x)) + _3096;
        _3172 = (exp2(_3349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].y)) * _3323.y) / cbSceneParam._m0[78u].y)) + _3097;
        _3174 = (exp2(_3349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].z)) * _3323.z) / cbSceneParam._m0[78u].z)) + _3098;
        _3176 = _3332 * _3099;
    }
    else
    {
        _3170 = _3096;
        _3172 = _3097;
        _3174 = _3098;
        _3176 = _3099;
    }
    float _3188 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3189 = _3188 == 3.0;
    float _3190 = log2(_3176);
    float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_3041 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1013))) + ((_3047 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_3043 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1013))) + ((_3049 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3045 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1013))) + ((_3051 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _3208 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3208 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
    SV_Target.y = _3208 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
    SV_Target.z = _3208 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
    SV_Target.w = cbInstanceData._m0[_3071].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3071].w;
}


