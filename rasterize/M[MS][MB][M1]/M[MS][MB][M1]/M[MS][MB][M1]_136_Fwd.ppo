#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1410;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3735 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3746 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3757 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3768 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _432) + _545;
    float _557 = ((((_524.x - _543) * _432) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _432) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3779 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _614 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _617 = ((isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : min(_614, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _626 = (_617 - ((((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _617))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3800 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _634 = (_627 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) + _458;
    float _635 = (_627 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) + _459;
    float _636 = (_627 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) + _460;
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_650 - _651) * cbMtdParam._m0[24u].w) + _651) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3811 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _634) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _677) + _634;
    float _686 = ((((cbMtdParam._m0[10u].y - _635) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _677) + _635;
    float _687 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _636)) * _677) + _636;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _715 = _713.x;
    float _733 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _715) * _432) + _715;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _733) * cbMtdParam._m0[19u].z) + _733;
    float _739 = _737 - (_737 * _627);
    float _741 = _739 - (_739 * _677);
    float _746 = (((_499.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    float _750 = ((_580.z - _746) * cbMtdParam._m0[19u].w) + _746;
    vec4 _764 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3822 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _781 = (_627 * (_764.z - _750)) + _750;
    float _784 = ((cbMtdParam._m0[23u].y - _781) * _677) + _781;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3833 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _825 = (_557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_499.x * 2.0) + (-1.0)))) + (((_580.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_499.y * 2.0) + (-1.0)))) + (((_580.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _838 = (((_771 - _825) + (cbMtdParam._m0[21u].x * _825)) * _627) + _825;
    float _839 = (((_772 - _826) + (cbMtdParam._m0[21u].x * _826)) * _627) + _826;
    float _840 = (_627 * (sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) - _564)) + _564;
    float _851 = (((_809 - _838) + (_838 * cbMtdParam._m0[22u].z)) * _677) + _838;
    float _852 = (((_810 - _839) + (_839 * cbMtdParam._m0[22u].z)) * _677) + _839;
    float _853 = ((sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _840) * _677) + _840;
    float _857 = cbMtdParam._m0[22u].x + _580.w;
    float _860 = fma(_853, _249 * NORMAL.x, fma(_852, _256 * TANGENT.x, (_242 * _234) * _851));
    float _863 = fma(_853, _249 * NORMAL.y, fma(_852, _256 * TANGENT.y, (_242 * _235) * _851));
    float _866 = fma(_853, _249 * NORMAL.z, fma(_852, _256 * TANGENT.z, (_242 * _236) * _851));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3844 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _874 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _3866 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3877 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3888 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3899 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _879 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _893 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _943 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _933);
    float _944 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _933);
    float _945 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _933);
    float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
    float _950 = _943 * _949;
    float _951 = _944 * _949;
    float _952 = _945 * _949;
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _980 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _983 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _997 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_997].z;
    float _3910 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1009 = 1.0 - _879;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _879;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _879;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _879;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_871, _872, _873), vec3(_950, _951, _952));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _871) - _950;
    float _1045 = (_1040 * _872) - _951;
    float _1046 = (_1040 * _873) - _952;
    float _1050 = abs(dot(vec3(_950, _951, _952), vec3(_871, _872, _873)));
    float _3943 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_874);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1052;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1138 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1142 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1167 = _1100 + _871;
        float _1168 = _1104 + _872;
        float _1169 = _1108 + _873;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_871, _872, _873), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3991 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_871, _872, _873), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4024 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_871, _872, _873), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4057 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1453 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1457 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1480 = _1100 + _871;
        float _1481 = _1104 + _872;
        float _1482 = _1108 + _873;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_871, _872, _873), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4120 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_871, _872, _873), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4153 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_871, _872, _873), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4186 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1410;
        _1719 = _1410;
        _1720 = _1410;
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1422)) + _1422;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1423)) + _1423;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1424)) + _1424;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1044 * 0.5;
    float _1787 = _1045 * 0.5;
    float _1788 = _1046 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1916 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1919 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1947 = frontier_phi_14_12_ladder;
        }
        float _2149;
        if (_1916 > 0.0)
        {
            _2149 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2149 = frontier_phi_23_19_ladder;
        }
        float _2403;
        if (_1919 > 0.0)
        {
            _2403 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2403 = frontier_phi_35_30_ladder;
        }
        float _2405 = isnan(_2149) ? _1947 : (isnan(_1947) ? _2149 : min(_1947, _2149));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1913) + _1902;
        float _2411 = (_2406 * _1916) + _1906;
        float _2412 = (_2406 * _1919) + _1910;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_13_35_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_13_35_ladder_2;
        _1937 = frontier_phi_13_35_ladder_1;
        _1939 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1855);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2011 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2014 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2154;
        if (_2008 > 0.0)
        {
            _2154 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2154 = frontier_phi_25_21_ladder;
        }
        float _2430;
        if (_2011 > 0.0)
        {
            _2430 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2430 = frontier_phi_37_32_ladder;
        }
        float _2643;
        if (_2014 > 0.0)
        {
            _2643 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2643 = frontier_phi_46_43_ladder;
        }
        float _2645 = isnan(_2430) ? _2154 : (isnan(_2154) ? _2430 : min(_2154, _2430));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _2008) + _1997;
        float _2651 = (_2646 * _2011) + _2001;
        float _2652 = (_2646 * _2014) + _2005;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_22_46_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_22_46_ladder_2;
        _2035 = frontier_phi_22_46_ladder_1;
        _2037 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1944);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2050 = (((_1071 * _1020) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2052 = (((_1071 * _1022) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2054 = (((_1071 * _1023) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _1036 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2108 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2112 = _2075 | 1u;
    float _2123 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_871, _872, _873));
    float _2126 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_871, _872, _873));
    float _4322 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _4333 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2133 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2140 = ((cbLight._m0[_2092].x * _2098) * _2133) + ((cbLight._m0[_2102].x * _2108) * _2131);
    float _2141 = ((_2098 * cbLight._m0[_2092].y) * _2133) + ((_2108 * cbLight._m0[_2102].y) * _2131);
    float _2142 = ((_2098 * cbLight._m0[_2092].z) * _2133) + ((_2108 * cbLight._m0[_2102].z) * _2131);
    uvec4 _2146 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2148 = _2146.x == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2148)
    {
        _2159 = _2140;
        _2161 = _2141;
        _2163 = _2142;
    }
    else
    {
        uint _2167 = _2075 + 6u;
        float _2183 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2184 = _2183 * _2183;
        float _4344 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2185 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2186 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2159 = (((cbLight._m0[_2167].x * 0.3183098733425140380859375) * _2185) * _2186) + _2140;
        _2161 = (((cbLight._m0[_2167].y * 0.3183098733425140380859375) * _2185) * _2186) + _2141;
        _2163 = (((cbLight._m0[_2167].z * 0.3183098733425140380859375) * _2185) * _2186) + _2142;
    }
    bool _2166 = _2146.y == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2166)
    {
        _2204 = _2159;
        _2206 = _2161;
        _2208 = _2163;
    }
    else
    {
        uint _2374 = _2075 + 7u;
        float _2390 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2391 = _2390 * _2390;
        float _4360 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2392 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2393 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2204 = (((cbLight._m0[_2374].x * 0.3183098733425140380859375) * _2392) * _2393) + _2159;
        _2206 = (((cbLight._m0[_2374].y * 0.3183098733425140380859375) * _2392) * _2393) + _2161;
        _2208 = (((cbLight._m0[_2374].z * 0.3183098733425140380859375) * _2392) * _2393) + _2163;
    }
    uint _2211 = _2075 + 8u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _874) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2075].x + _950;
    float _2227 = cbLight._m0[_2075].y + _951;
    float _2228 = cbLight._m0[_2075].z + _952;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2075].xyz));
    float _4376 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2240 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2241 = dot(vec3(_871, _872, _873), vec3(_2233, _2234, _2235));
    float _4398 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2233, _2234, _2235));
    float _4409 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2225 * _2225;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
    float _2262 = 0.959999978542327880859375 - _1017;
    float _2264 = 0.959999978542327880859375 - _1018;
    float _2265 = 0.959999978542327880859375 - _1019;
    float _2272 = 1.0 - _2225;
    float _2283 = (0.5 / (((_2240 * ((_2239 * _2272) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2272) + _2225) * _2239))) * _2239;
    float _4420 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    uint _2296 = _2075 + 9u;
    float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _874) * 0.949999988079071044921875);
    float _2308 = _2307 * _2307;
    float _2309 = cbLight._m0[_2112].x + _950;
    float _2310 = cbLight._m0[_2112].y + _951;
    float _2311 = cbLight._m0[_2112].z + _952;
    float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
    float _2316 = _2315 * _2309;
    float _2317 = _2315 * _2310;
    float _2318 = _2315 * _2311;
    float _2319 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2112].xyz));
    float _4431 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2323 = dot(vec3(_871, _872, _873), vec3(_2316, _2317, _2318));
    float _4442 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2327 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2316, _2317, _2318));
    float _4453 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2331 = _2308 * _2308;
    float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
    float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2349 = 1.0 - _2308;
    float _2359 = (0.5 / (((_2240 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2349) + _2308) * _2322))) * _2322;
    float _4464 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2361 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
    float _2371 = (((((_2342 * _2262) + _1020) * cbLight._m0[_2296].x) * _2361) * _2098) + (((((_2261 * _2262) + _1020) * cbLight._m0[_2211].x) * _2285) * _2108);
    float _2372 = (((((_2342 * _2264) + _1022) * cbLight._m0[_2296].y) * _2361) * _2098) + (((((_2261 * _2264) + _1022) * cbLight._m0[_2211].y) * _2285) * _2108);
    float _2373 = (((((_2342 * _2265) + _1023) * cbLight._m0[_2296].z) * _2361) * _2098) + (((((_2261 * _2265) + _1023) * cbLight._m0[_2211].z) * _2285) * _2108);
    float _2435;
    float _2437;
    float _2439;
    if (_2148)
    {
        _2435 = _2371;
        _2437 = _2372;
        _2439 = _2373;
    }
    else
    {
        uint _2441 = _2075 + 2u;
        uint _2445 = _2075 + 10u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _874) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _950;
        float _2462 = cbLight._m0[_2441].y + _951;
        float _2463 = cbLight._m0[_2441].z + _952;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2441].xyz));
        float _4475 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2475 = dot(vec3(_871, _872, _873), vec3(_2468, _2469, _2470));
        float _4486 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4497 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2240 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2501) + _2460) * _2474))) * _2474;
        float _4508 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2435 = (((((_2494 * _2262) + _1020) * cbLight._m0[_2445].x) * _2513) * _2514) + _2371;
        _2437 = (((((_2494 * _2264) + _1022) * cbLight._m0[_2445].y) * _2513) * _2514) + _2372;
        _2439 = (((((_2494 * _2265) + _1023) * cbLight._m0[_2445].z) * _2513) * _2514) + _2373;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2166)
    {
        _2549 = _2435;
        _2551 = _2437;
        _2553 = _2439;
    }
    else
    {
        uint _2560 = _2075 + 3u;
        uint _2564 = _2075 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _874) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _950;
        float _2581 = cbLight._m0[_2560].y + _951;
        float _2582 = cbLight._m0[_2560].z + _952;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2560].xyz));
        float _4524 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2594 = dot(vec3(_871, _872, _873), vec3(_2587, _2588, _2589));
        float _4535 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4546 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2240 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2620) + _2579) * _2593))) * _2593;
        float _4557 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2549 = (((((_2613 * _2262) + _1020) * cbLight._m0[_2564].x) * _2632) * _2633) + _2435;
        _2551 = (((((_2613 * _2264) + _1022) * cbLight._m0[_2564].y) * _2632) * _2633) + _2437;
        _2553 = (((((_2613 * _2265) + _1023) * cbLight._m0[_2564].z) * _2632) * _2633) + _2439;
    }
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_2073.y == 0u)
    {
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2708;
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2708;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2708;
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.x;
        uint _2735 = uint((float(_2723.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2724))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2724)));
        float _2745 = (log2(_2711 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2746 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        uint _2749 = uint(isnan(14.0) ? _2746 : (isnan(_2746) ? 14.0 : min(_2746, 14.0)));
        uvec4 _2754 = texelFetch(g_lightClusterGridBuffer, int(((_2749 << 2u) + (_2735 << 6u)) >> 2u));
        uint _2755 = _2754.x;
        uint _2756 = _2723.z;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((((1u << ((_2756 >> 4u) & 15u)) + 4294967295u) & _2755) == 0u) || ((_2756 & 240u) == 0u))
        {
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
        }
        else
        {
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3017)
                {
                    frontier_phi_61_pred = _3001;
                    frontier_phi_61_pred_1 = _3006;
                    frontier_phi_61_pred_2 = _3005;
                    frontier_phi_61_pred_3 = _3004;
                    frontier_phi_61_pred_4 = _3003;
                    frontier_phi_61_pred_5 = _3002;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3016;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_3007 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _2709;
                        float _3192 = _3151.y - _2710;
                        float _3193 = _3151.z - _2711;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_977, _980, _983), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4583 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _2709;
                        float _3227 = (-0.0) - _2710;
                        float _3228 = (-0.0) - _2711;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3243 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _1052;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3256 = _3235 + _3200;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_977, _980, _983), vec3(_3233, _3234, _3235));
                        float _4599 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3268 = dot(vec3(_977, _980, _983), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4610 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3211 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3201) + _3277;
                        float _4621 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4632 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3275 * _3275) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3060 = (_3222 * _3170.x) + _3128;
                        _3061 = (_3222 * _3170.y) + _3129;
                        _3062 = (_3222 * _3170.z) + _3130;
                        _3057 = (_3303 * _3187.x) + _3125;
                        _3058 = (_3303 * _3187.y) + _3126;
                        _3059 = (_3303 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_61_pred = _3057;
                    frontier_phi_61_pred_1 = _3062;
                    frontier_phi_61_pred_2 = _3061;
                    frontier_phi_61_pred_3 = _3060;
                    frontier_phi_61_pred_4 = _3059;
                    frontier_phi_61_pred_5 = _3058;
                }
                _2857 = frontier_phi_61_pred;
                _2867 = frontier_phi_61_pred_1;
                _2865 = frontier_phi_61_pred_2;
                _2863 = frontier_phi_61_pred_3;
                _2861 = frontier_phi_61_pred_4;
                _2859 = frontier_phi_61_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2857;
                    _3002 = _2859;
                    _3003 = _2861;
                    _3004 = _2863;
                    _3005 = _2865;
                    _3006 = _2867;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
        }
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.z;
        uint _2873 = (_2871 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2873) & _2755) == 0u)
        {
            _2969 = _2856;
            _2971 = _2858;
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
            float _2995 = _2994 * _2709;
            float _2996 = _2994 * _2710;
            float _2997 = _2994 * _2711;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2873 < ((_2871 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3108 = _2856;
                float _3109 = _2858;
                float _3110 = _2860;
                float _3111 = _2862;
                float _3112 = _2864;
                float _3113 = _2866;
                uint _3114 = _2873;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3124)
                    {
                        frontier_phi_67_pred = _3111;
                        frontier_phi_67_pred_1 = _3112;
                        frontier_phi_67_pred_2 = _3113;
                        frontier_phi_67_pred_3 = _3110;
                        frontier_phi_67_pred_4 = _3109;
                        frontier_phi_67_pred_5 = _3108;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3321 = _3108;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        uint _3327 = _3123;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3396;
                        vec4 _3411;
                        float _3457;
                        bool _3458;
                        for (;;)
                        {
                            uint _3338 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3383 = (_3338 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3338 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3338 * 40u) + 24u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3432 = (_3338 * 40u) + 28u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3457 = fma(_2711, _3445.z, fma(_2710, _3445.y, _3445.x * _2709)) + _3445.w;
                            _3458 = !((fma(_2711, _3426.z, fma(_2710, _3426.y, _3426.x * _2709)) + _3426.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3458)
                            {
                                float _3485 = _3353.x - _2709;
                                float _3486 = _3353.y - _2710;
                                float _3487 = _3353.z - _2711;
                                float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                                float _3491 = inversesqrt(_3488);
                                float _3492 = _3491 * _3485;
                                float _3493 = _3491 * _3486;
                                float _3494 = _3491 * _3487;
                                float _3498 = 1.0 - (_3488 / (_3354 * _3354));
                                float _4643 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3503 = sqrt(_3488) * _3369.w;
                                float _3505 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                                float _3506 = _3505 * _3505;
                                float _3509 = ((1.0 - _3506) * dot(vec3(_3492, _3493, _3494), vec3(_977, _980, _983))) + _3506;
                                float _3512 = _3503 * _3503;
                                float _3516 = (fma(_2711, _3396.z, fma(_2710, _3396.y, _3396.x * _2709)) + _3396.w) / _3457;
                                float _3517 = (fma(_2711, _3411.z, fma(_2710, _3411.y, _3411.x * _2709)) + _3411.w) / _3457;
                                float _3521 = 1.0 - dot(vec2(_3516, _3517), vec2(_3516, _3517));
                                float _4659 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3523 = _3522 * (((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3499) / ((_3512 * 0.699999988079071044921875) + 1.0));
                                float _3535 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                                float _3536 = 1.0 - _1052;
                                float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                                float _3544 = _3543 * _3543;
                                float _3545 = _3544 * _3544;
                                float _3546 = _3492 - _2995;
                                float _3547 = _3493 - _2996;
                                float _3548 = _3494 - _2997;
                                float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                                float _3556 = dot(vec3(_977, _980, _983), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4670 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3560 = dot(vec3(_977, _980, _983), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                                float _4681 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                                float _3568 = _3505 * _3544;
                                float _3569 = _3568 * _3568;
                                float _3575 = ((1.0 - _3569) * dot(vec3(_977, _980, _983), vec3(_3492, _3493, _3494))) + _3569;
                                float _4692 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3577 = 1.0 - _3544;
                                float _3587 = (0.5 / (((_3576 * ((_3559 * _3577) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3544) * _3559))) * _3576;
                                float _4703 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3597 = (_3522 * _3499) * (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3567 * _3567) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3597 * _3381.x;
                                frontier_phi_73_pred_1 = _3597 * _3381.y;
                                frontier_phi_73_pred_2 = _3523 * _3369.z;
                                frontier_phi_73_pred_3 = _3523 * _3369.y;
                                frontier_phi_73_pred_4 = _3523 * _3369.x;
                                frontier_phi_73_pred_5 = _3597 * _3381.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3601 = frontier_phi_73_pred;
                            _3602 = frontier_phi_73_pred_1;
                            _3606 = frontier_phi_73_pred_2;
                            _3605 = frontier_phi_73_pred_3;
                            _3604 = frontier_phi_73_pred_4;
                            _3603 = frontier_phi_73_pred_5;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3311;
                        frontier_phi_67_pred_1 = _3312;
                        frontier_phi_67_pred_2 = _3313;
                        frontier_phi_67_pred_3 = _3310;
                        frontier_phi_67_pred_4 = _3309;
                        frontier_phi_67_pred_5 = _3308;
                    }
                    _2976 = frontier_phi_67_pred;
                    _2978 = frontier_phi_67_pred_1;
                    _2980 = frontier_phi_67_pred_2;
                    _2974 = frontier_phi_67_pred_3;
                    _2972 = frontier_phi_67_pred_4;
                    _2970 = frontier_phi_67_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2970;
                        _3109 = _2972;
                        _3110 = _2974;
                        _3111 = _2976;
                        _3112 = _2978;
                        _3113 = _2980;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2978;
                frontier_phi_55_56_ladder_1 = _2980;
                frontier_phi_55_56_ladder_2 = _2976;
                frontier_phi_55_56_ladder_3 = _2974;
                frontier_phi_55_56_ladder_4 = _2972;
                frontier_phi_55_56_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_55_56_ladder = _2864;
                frontier_phi_55_56_ladder_1 = _2866;
                frontier_phi_55_56_ladder_2 = _2862;
                frontier_phi_55_56_ladder_3 = _2860;
                frontier_phi_55_56_ladder_4 = _2858;
                frontier_phi_55_56_ladder_5 = _2856;
            }
            _2969 = frontier_phi_55_56_ladder_5;
            _2971 = frontier_phi_55_56_ladder_4;
            _2973 = frontier_phi_55_56_ladder_3;
            _2975 = frontier_phi_55_56_ladder_2;
            _2977 = frontier_phi_55_56_ladder;
            _2979 = frontier_phi_55_56_ladder_1;
        }
        float _2984 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2768 = (_2984 * _2975) + _2204;
        _2770 = (_2984 * _2977) + _2206;
        _2772 = (_2984 * _2979) + _2208;
        _2774 = ((_2969 * _1020) * _2984) + _2549;
        _2776 = ((_2971 * _1022) * _2984) + _2551;
        _2778 = ((_2973 * _1023) * _2984) + _2553;
    }
    else
    {
        _2768 = _2204;
        _2770 = _2206;
        _2772 = _2208;
        _2774 = _2549;
        _2776 = _2551;
        _2778 = _2553;
    }
    float _4719 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4730 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4741 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    uint _2798 = _281 + 6u;
    float _2806 = _958 / cbSceneParam._m0[86u].x;
    float _2807 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2821 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, (log2((isnan(cbSceneParam._m0[77u].w) ? _893 : (isnan(_893) ? cbSceneParam._m0[77u].w : min(_893, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2823 = _2821.x;
    float _2824 = _2821.y;
    float _2825 = _2821.z;
    float _2826 = _2821.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_893 > cbSceneParam._m0[78u].w)
    {
        float _2881 = isnan(_893) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _893 : min(cbSceneParam._m0[80u].w, _893));
        float _2882 = _2881 / _893;
        float _2893 = _2882 * _943;
        float _2894 = _944 * _2882;
        float _2895 = (-0.0) - _2894;
        float _2897 = _2882 * _945;
        float _2899 = (cbSceneParam._m0[77u].w * _2895) / _2881;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2894;
        float _2907 = sqrt(((_2893 * _2893) + (_2894 * _2894)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2881)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2895 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3032 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3070 = ((abs(_2907 / _2895) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2917 * _3041) - exp2(_2917 * _3042)) * _3030))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2826);
        _2919 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2823;
        _2921 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2824;
        _2923 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2825;
        _2925 = _3081 * _2826;
    }
    else
    {
        _2919 = _2823;
        _2921 = _2824;
        _2923 = _2825;
        _2925 = _2826;
    }
    float _2937 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2938 = _2937 == 3.0;
    float _2939 = log2(_2925);
    float _2946 = exp2(_2939 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2768 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1036))) + ((_2774 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2947 = exp2(_2939 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2770 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1036))) + ((_2776 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2948 = exp2(_2939 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2772 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1036))) + ((_2778 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2957 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2957 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.y = _2957 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.z = _2957 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.w = cbInstanceData._m0[_2798].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2798].w;
}


