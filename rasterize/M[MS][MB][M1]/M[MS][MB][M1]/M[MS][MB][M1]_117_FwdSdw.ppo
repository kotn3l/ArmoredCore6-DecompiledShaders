#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1323;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3933 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3944 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    float _461 = fma(_458, _241, fma(_452, _248, _450 * _234));
    float _464 = fma(_458, _242, fma(_452, _249, _450 * _235));
    float _467 = fma(_458, _243, fma(_452, _250, _450 * _236));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _520 = ((_515 - _516) * cbMtdParam._m0[24u].z) + _516;
    float _522 = (cbMtdParam._m0[19u].x + dot(vec4(_471 * _461, _471 * _464, _471 * _467, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_520 * cbMtdParam._m0[21u].z);
    float _3955 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _525 = (-0.0) - cbMtdParam._m0[24u].x;
    float _527 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
    float _535 = _523 - ((_523 * TEXCOORD_8.x) * _528);
    float _536 = _523 - ((_523 * TEXCOORD_8.y) * _528);
    float _537 = _523 - ((_523 * TEXCOORD_8.z) * _528);
    float _544 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _548 = ((isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : min(_544, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _556 = (_548 - (((_520 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _548))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3986 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _561 = ((_535 * (cbMtdParam._m0[17u].x - _397)) * _557) + _397;
    float _562 = ((_536 * (cbMtdParam._m0[17u].y - _398)) * _557) + _398;
    float _563 = ((_537 * (cbMtdParam._m0[17u].z - _399)) * _557) + _399;
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _577 = _575.x;
    float _578 = 1.0 - _577;
    float _605 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_577 - _578) * cbMtdParam._m0[24u].w) + _578) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3997 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _614 = ((((cbMtdParam._m0[10u].x - _561) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _606) + _561;
    float _615 = ((((cbMtdParam._m0[10u].y - _562) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _606) + _562;
    float _616 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _563)) * _606) + _563;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _644 = _642.x;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _644) * _390) + _644;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _662) * cbMtdParam._m0[19u].z) + _662;
    float _669 = _666 - ((_557 * _535) * _666);
    float _671 = _669 - (_669 * _606);
    vec4 _685 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _692 = (_685.x * 2.0) + (-1.0);
    float _693 = (_685.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _4008 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _703 = (((_685.z - _447) * _535) * _557) + _447;
    float _706 = ((cbMtdParam._m0[23u].y - _703) * _606) + _703;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _4019 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _753 = (((cbMtdParam._m0[21u].x * _450) + ((_692 - _450) * _535)) * _557) + _450;
    float _754 = (((cbMtdParam._m0[21u].x * _452) + ((_693 - _452) * _536)) * _557) + _452;
    float _755 = (((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _458) * _537) * _557) + _458;
    float _766 = (((_731 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _606) + _753;
    float _767 = (((_732 - _754) + (_754 * cbMtdParam._m0[22u].z)) * _606) + _754;
    float _768 = ((sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _755) * _606) + _755;
    float _770 = cbMtdParam._m0[22u].x + _487.w;
    float _773 = fma(_768, _241, fma(_767, _248, _766 * _234));
    float _776 = fma(_768, _242, fma(_767, _249, _766 * _235));
    float _779 = fma(_768, _243, fma(_767, _250, _766 * _236));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _4030 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _787 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4052 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4063 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4074 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4085 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _792 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _806 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    float _871 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _872 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _890 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _893 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _896 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    uint _910 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_910].z;
    float _4096 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _922 = 1.0 - _792;
    float _923 = _919 * _922;
    float _924 = _920 * _922;
    float _925 = _921 * _922;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _792;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _792;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _792;
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _871, cbSceneParam._m0[86u].y * _872));
    float _949 = ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * TEXCOORD_5.w) * _945.x;
    float _950 = dot(vec3(_784, _785, _786), vec3(_863, _864, _865));
    float _953 = _950 * 2.0;
    float _957 = (_953 * _784) - _863;
    float _958 = (_953 * _785) - _864;
    float _959 = (_953 * _786) - _865;
    float _963 = abs(dot(vec3(_863, _864, _865), vec3(_784, _785, _786)));
    float _4129 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _965 = sqrt(_787);
    float _978 = exp2((_965 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_965 * 3.0));
    float _984 = (1.0 - _978) * ((_965 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _985 = _978 * _965;
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1051 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1055 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1080 = _1013 + _784;
        float _1081 = _1017 + _785;
        float _1082 = _1021 + _786;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1047;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1051;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1055;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_784, _785, _786), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4177 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_784, _785, _786), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4210 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_784, _785, _786), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4243 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1366 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1370 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1393 = _1013 + _784;
        float _1394 = _1017 + _785;
        float _1395 = _1021 + _786;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_784, _785, _786), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4306 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_784, _785, _786), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4339 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_784, _785, _786), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4372 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1323;
        _1632 = _1323;
        _1633 = _1323;
        _1634 = _1323;
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = _1323;
        _1642 = _1323;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1335)) + _1335;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1336)) + _1336;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1337)) + _1337;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _957 * 0.5;
    float _1700 = _958 * 0.5;
    float _1701 = _959 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _787);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_959, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957));
        float _1830 = fma(_959, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957));
        float _1833 = fma(_959, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1861 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1830 > 0.0)
        {
            _2033 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1833 > 0.0)
        {
            _2328 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_35_30_ladder;
        }
        float _2330 = isnan(_2033) ? _1861 : (isnan(_1861) ? _2033 : min(_1861, _2033));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1827) + _1816;
        float _2336 = (_2331 * _1830) + _1820;
        float _2337 = (_2331 * _1833) + _1824;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_13_35_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_13_35_ladder_2;
        _1851 = frontier_phi_13_35_ladder_1;
        _1853 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_957, _958, _959), _1768);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _787);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_959, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957));
        float _1926 = fma(_959, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957));
        float _1929 = fma(_959, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957));
        float _2038;
        if (_1923 > 0.0)
        {
            _2038 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1926 > 0.0)
        {
            _2355 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2693;
        if (_1929 > 0.0)
        {
            _2693 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2693 = frontier_phi_47_44_ladder;
        }
        float _2695 = isnan(_2355) ? _2038 : (isnan(_2038) ? _2355 : min(_2038, _2355));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1923) + _1912;
        float _2701 = (_2696 * _1926) + _1916;
        float _2702 = (_2696 * _1929) + _1920;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_22_47_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_22_47_ladder_2;
        _1950 = frontier_phi_22_47_ladder_1;
        _1952 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_957, _958, _959), _1858);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1965 = (((_984 * _933) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1948 - _1849)) + _1849);
    float _1967 = (((_984 * _935) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1950 - _1851)) + _1851);
    float _1969 = (((_984 * _936) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2025 = _2012 / _2024;
    float _2026 = _2016 / _2024;
    float _2027 = _2020 / _2024;
    float _2174;
    float _2175;
    float _2176;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2054 = ((uint(_2027 > cbSceneParam._m0[59u].y) + uint(_2027 > cbSceneParam._m0[59u].x)) + uint(_2027 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2055 = _2054 + 43u;
        uint _2063 = _2054 + 44u;
        uint _2071 = _2054 + 45u;
        uint _2079 = _2054 + 46u;
        float _2090 = fma(_2024, cbSceneParam._m0[_2055].w, fma(_2020, cbSceneParam._m0[_2055].z, fma(_2016, cbSceneParam._m0[_2055].y, _2012 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2024, cbSceneParam._m0[_2063].w, fma(_2020, cbSceneParam._m0[_2063].z, fma(_2016, cbSceneParam._m0[_2063].y, _2012 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2024, cbSceneParam._m0[_2079].w, fma(_2020, cbSceneParam._m0[_2079].z, fma(_2016, cbSceneParam._m0[_2079].y, _2012 * cbSceneParam._m0[_2079].x)));
        float _2107 = cbSceneParam._m0[33u].z * _2102;
        float _2109 = cbSceneParam._m0[33u].w * _2102;
        float _2112 = fma(_2024, cbSceneParam._m0[_2071].w, fma(_2020, cbSceneParam._m0[_2071].z, fma(_2016, cbSceneParam._m0[_2071].y, _2012 * cbSceneParam._m0[_2071].x))) / _2102;
        float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
        float _4498 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 + _2090) / _2102, (_2109 + _2094) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2090) / _2102, (_2094 - _2107) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2107) / _2102, (_2094 - _2109) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2109) / _2102, (_2107 + _2094) / _2102), _2112), 0.0)).x), vec4(0.25)));
        _2174 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
        _2175 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
        _2176 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2174 = 1.0;
        _2175 = 1.0;
        _2176 = 1.0;
    }
    float _2240;
    float _2242;
    float _2244;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2228 = fma(_2024, cbSceneParam._m0[63u].w, fma(_2020, cbSceneParam._m0[63u].z, fma(_2016, cbSceneParam._m0[63u].y, _2012 * cbSceneParam._m0[63u].x)));
        float _2229 = fma(_2024, cbSceneParam._m0[60u].w, fma(_2020, cbSceneParam._m0[60u].z, fma(_2016, cbSceneParam._m0[60u].y, _2012 * cbSceneParam._m0[60u].x))) / _2228;
        float _2230 = fma(_2024, cbSceneParam._m0[61u].w, fma(_2020, cbSceneParam._m0[61u].z, fma(_2016, cbSceneParam._m0[61u].y, _2012 * cbSceneParam._m0[61u].x))) / _2228;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2229 >= cbSceneParam._m0[64u].x) && (_2230 >= cbSceneParam._m0[64u].y)) && (_2229 <= cbSceneParam._m0[64u].z)) && (_2230 <= cbSceneParam._m0[64u].w))
        {
            float _2368 = fma(_2024, cbSceneParam._m0[62u].w, fma(_2020, cbSceneParam._m0[62u].z, fma(_2016, cbSceneParam._m0[62u].y, _2012 * cbSceneParam._m0[62u].x))) / _2228;
            float _2372 = isnan(cbSceneParam._m0[41u].w) ? _2368 : (isnan(_2368) ? cbSceneParam._m0[41u].w : max(_2368, cbSceneParam._m0[41u].w));
            float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
            float _4514 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
            float _2422 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2229, cbSceneParam._m0[33u].w + _2230), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2229, _2230 - cbSceneParam._m0[33u].z), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].z, _2230 - cbSceneParam._m0[33u].w), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2230), _2372), 0.0)).x), vec4(0.25)));
            float _2426 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
            float _2427 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
            float _2428 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_34_33_ladder_1 = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_34_33_ladder_2 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
        }
        else
        {
            frontier_phi_34_33_ladder = _2176;
            frontier_phi_34_33_ladder_1 = _2175;
            frontier_phi_34_33_ladder_2 = _2174;
        }
        _2240 = frontier_phi_34_33_ladder_2;
        _2242 = frontier_phi_34_33_ladder_1;
        _2244 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2240 = _2174;
        _2242 = _2175;
        _2244 = _2176;
    }
    uvec4 _2249 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2251 = _2249.x * 14u;
    uint _2252 = _2251 + 13u;
    float _2259 = _949 + (-1.0);
    float _2264 = (cbLight._m0[_2252].x * _2259) + 1.0;
    float _2265 = (cbLight._m0[_2252].y * _2259) + 1.0;
    float _2266 = (cbLight._m0[_2252].z * _2259) + 1.0;
    float _2267 = (cbLight._m0[_2252].w * _2259) + 1.0;
    uint _2268 = _2251 + 5u;
    float _2274 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2278 = _2251 + 4u;
    float _2287 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2291 = _2251 | 1u;
    float _2302 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_784, _785, _786));
    float _2305 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_784, _785, _786));
    float _4550 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _4561 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2310 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2312 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2319 = ((cbLight._m0[_2268].x * _2274) * _2312) + (((cbLight._m0[_2278].x * _2240) * _2287) * _2310);
    float _2320 = ((_2274 * cbLight._m0[_2268].y) * _2312) + (((cbLight._m0[_2278].y * _2242) * _2287) * _2310);
    float _2321 = ((_2274 * cbLight._m0[_2268].z) * _2312) + (((cbLight._m0[_2278].z * _2244) * _2287) * _2310);
    uvec4 _2325 = floatBitsToUint(cbLight._m0[_2251 + 12u]);
    bool _2327 = _2325.x == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2327)
    {
        _2429 = _2319;
        _2431 = _2320;
        _2433 = _2321;
    }
    else
    {
        uint _2437 = _2251 + 6u;
        float _2453 = (dot(vec3(cbLight._m0[_2251 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4572 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2456 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2429 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2319;
        _2431 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2320;
        _2433 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2321;
    }
    bool _2436 = _2325.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2436)
    {
        _2491 = _2429;
        _2493 = _2431;
        _2495 = _2433;
    }
    else
    {
        uint _2664 = _2251 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2251 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4588 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2683 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2491 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2429;
        _2493 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2431;
        _2495 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2433;
    }
    uint _2498 = _2251 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _787) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2251].x + _863;
    float _2514 = cbLight._m0[_2251].y + _864;
    float _2515 = cbLight._m0[_2251].z + _865;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2251].xyz));
    float _4604 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _4615 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2527 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2528 = dot(vec3(_784, _785, _786), vec3(_2520, _2521, _2522));
    float _4626 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2520, _2521, _2522));
    float _4637 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
    float _2549 = 0.959999978542327880859375 - _930;
    float _2551 = 0.959999978542327880859375 - _931;
    float _2552 = 0.959999978542327880859375 - _932;
    float _2559 = 1.0 - _2512;
    float _2570 = (0.5 / (((_2527 * ((_2526 * _2559) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2559) + _2512) * _2526))) * _2526;
    float _4648 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2586 = _2251 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _787) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2291].x + _863;
    float _2600 = cbLight._m0[_2291].y + _864;
    float _2601 = cbLight._m0[_2291].z + _865;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2291].xyz));
    float _4659 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2613 = dot(vec3(_784, _785, _786), vec3(_2606, _2607, _2608));
    float _4670 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2606, _2607, _2608));
    float _4681 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0);
    float _2639 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2527 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2639) + _2598) * _2612))) * _2612;
    float _4692 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2661 = (((((_2632 * _2549) + _933) * cbLight._m0[_2586].x) * _2651) * _2274) + ((((cbLight._m0[_2498].x * _2240) * ((_2548 * _2549) + _933)) * _2572) * _2287);
    float _2662 = (((((_2632 * _2551) + _935) * cbLight._m0[_2586].y) * _2651) * _2274) + ((((cbLight._m0[_2498].y * _2242) * ((_2548 * _2551) + _935)) * _2572) * _2287);
    float _2663 = (((((_2632 * _2552) + _936) * cbLight._m0[_2586].z) * _2651) * _2274) + ((((cbLight._m0[_2498].z * _2244) * ((_2548 * _2552) + _936)) * _2572) * _2287);
    float _2719;
    float _2721;
    float _2723;
    if (_2327)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2251 + 2u;
        uint _2729 = _2251 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _787) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _863;
        float _2746 = cbLight._m0[_2725].y + _864;
        float _2747 = cbLight._m0[_2725].z + _865;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2725].xyz));
        float _4703 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2759 = dot(vec3(_784, _785, _786), vec3(_2752, _2753, _2754));
        float _4714 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4725 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2527 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2785) + _2744) * _2758))) * _2758;
        float _4736 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2719 = (((((_2778 * _2549) + _933) * cbLight._m0[_2729].x) * _2797) * _2798) + _2661;
        _2721 = (((((_2778 * _2551) + _935) * cbLight._m0[_2729].y) * _2797) * _2798) + _2662;
        _2723 = (((((_2778 * _2552) + _936) * cbLight._m0[_2729].z) * _2797) * _2798) + _2663;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2436)
    {
        _2829 = _2719;
        _2831 = _2721;
        _2833 = _2723;
    }
    else
    {
        uint _2840 = _2251 + 3u;
        uint _2844 = _2251 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _787) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _863;
        float _2861 = cbLight._m0[_2840].y + _864;
        float _2862 = cbLight._m0[_2840].z + _865;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2840].xyz));
        float _4752 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2874 = dot(vec3(_784, _785, _786), vec3(_2867, _2868, _2869));
        float _4763 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4774 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0);
        float _2900 = 1.0 - _2859;
        float _2910 = (0.5 / (((_2527 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2900) + _2859) * _2873))) * _2873;
        float _4785 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2829 = (((((_2893 * _2549) + _933) * cbLight._m0[_2844].x) * _2912) * _2913) + _2719;
        _2831 = (((((_2893 * _2551) + _935) * cbLight._m0[_2844].y) * _2912) * _2913) + _2721;
        _2833 = (((((_2893 * _2552) + _936) * cbLight._m0[_2844].z) * _2912) * _2913) + _2723;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2249.y == 0u)
    {
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _872) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _871) / _2935)));
        float _2956 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            uint _3196 = 0u;
            uint _3205;
            bool _3206;
            for (;;)
            {
                _3205 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                _3206 = _3205 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3206)
                {
                    frontier_phi_66_pred = _3195;
                    frontier_phi_66_pred_1 = _3194;
                    frontier_phi_66_pred_2 = _3193;
                    frontier_phi_66_pred_3 = _3192;
                    frontier_phi_66_pred_4 = _3191;
                    frontier_phi_66_pred_5 = _3190;
                }
                else
                {
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    uint _3320;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3205;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    for (;;)
                    {
                        uint _3324 = uint(findLSB(_3320)) + (_3196 << 5u);
                        uint _3321 = (_3320 + 4294967295u) & _3320;
                        uint _3326 = _3324 * 48u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3346 = (_3324 * 48u) + 4u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3365 = (_3324 * 48u) + 8u;
                        vec3 _3376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x));
                        float _3380 = _3340.x - _2025;
                        float _3381 = _3340.y - _2026;
                        float _3382 = _3340.z - _2027;
                        float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                        float _3386 = inversesqrt(_3383);
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3390 = dot(vec3(_890, _893, _896), vec3(_3387, _3388, _3389));
                        float _3395 = 1.0 - (_3383 * _3340.w);
                        float _4811 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3397 = sqrt(_3383) * _3359.w;
                        float _3400 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3390) + _3401;
                        float _3407 = _3397 * _3397;
                        float _3411 = ((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3396) / ((_3407 * 0.699999988079071044921875) + 1.0);
                        float _3415 = (-0.0) - _2025;
                        float _3416 = (-0.0) - _2026;
                        float _3417 = (-0.0) - _2027;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3431 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                        float _3432 = 1.0 - _965;
                        float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                        float _3440 = _3439 * _3439;
                        float _3441 = _3440 * _3440;
                        float _3442 = _3422 + _3387;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3452 = dot(vec3(_890, _893, _896), vec3(_3422, _3423, _3424));
                        float _4827 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3456 = dot(vec3(_890, _893, _896), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                        float _4838 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                        float _3464 = _3400 * _3440;
                        float _3465 = _3464 * _3464;
                        float _3468 = ((1.0 - _3465) * _3390) + _3465;
                        float _4849 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3470 = 1.0 - _3440;
                        float _3480 = (0.5 / (((_3469 * ((_3455 * _3470) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3440) * _3455))) * _3469;
                        float _4860 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3491 = (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3463 * _3463) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125))) * _3396;
                        _3249 = (_3411 * _3359.x) + _3317;
                        _3250 = (_3411 * _3359.y) + _3318;
                        _3251 = (_3411 * _3359.z) + _3319;
                        _3246 = (_3491 * _3376.x) + _3314;
                        _3247 = (_3491 * _3376.y) + _3315;
                        _3248 = (_3491 * _3376.z) + _3316;
                        if (_3321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3321;
                        }
                    }
                    frontier_phi_66_pred = _3251;
                    frontier_phi_66_pred_1 = _3250;
                    frontier_phi_66_pred_2 = _3249;
                    frontier_phi_66_pred_3 = _3248;
                    frontier_phi_66_pred_4 = _3247;
                    frontier_phi_66_pred_5 = _3246;
                }
                _3057 = frontier_phi_66_pred;
                _3055 = frontier_phi_66_pred_1;
                _3053 = frontier_phi_66_pred_2;
                _3051 = frontier_phi_66_pred_3;
                _3049 = frontier_phi_66_pred_4;
                _3047 = frontier_phi_66_pred_5;
                uint _3197 = _3196 + 1u;
                if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3190 = _3047;
                    _3191 = _3049;
                    _3192 = _3051;
                    _3193 = _3053;
                    _3194 = _3055;
                    _3195 = _3057;
                    _3196 = _3197;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        if (((4294967295u << _3063) & _2966) == 0u)
        {
            _3158 = _3046;
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
            _3166 = _3054;
            _3168 = _3056;
        }
        else
        {
            float _3183 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _3184 = _3183 * _2025;
            float _3185 = _3183 * _2026;
            float _3186 = _3183 * _2027;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3297 = _3046;
                float _3298 = _3048;
                float _3299 = _3050;
                float _3300 = _3052;
                float _3301 = _3054;
                float _3302 = _3056;
                uint _3303 = _3063;
                uint _3312;
                bool _3313;
                for (;;)
                {
                    _3312 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                    _3313 = _3312 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3313)
                    {
                        frontier_phi_72_pred = _3302;
                        frontier_phi_72_pred_1 = _3301;
                        frontier_phi_72_pred_2 = _3300;
                        frontier_phi_72_pred_3 = _3299;
                        frontier_phi_72_pred_4 = _3298;
                        frontier_phi_72_pred_5 = _3297;
                    }
                    else
                    {
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        float _3512 = _3300;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        uint _3515 = _3312;
                        uint _3516;
                        vec4 _3541;
                        float _3542;
                        vec4 _3557;
                        vec3 _3569;
                        vec4 _3584;
                        vec4 _3600;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3526 = ((_3303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3515));
                            _3516 = (_3515 + 4294967295u) & _3515;
                            uint _3528 = _3526 * 40u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3542 = _3541.w;
                            uint _3544 = (_3526 * 40u) + 4u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3526 * 40u) + 8u;
                            _3569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x));
                            uint _3571 = (_3526 * 40u) + 16u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3587 = (_3526 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3526 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3526 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2027, _3634.z, fma(_2026, _3634.y, _3634.x * _2025)) + _3634.w;
                            _3647 = !((fma(_2027, _3615.z, fma(_2026, _3615.y, _3615.x * _2025)) + _3615.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3541.x - _2025;
                                float _3675 = _3541.y - _2026;
                                float _3676 = _3541.z - _2027;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3542 * _3542));
                                float _4871 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3692 = sqrt(_3677) * _3557.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_890, _893, _896))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2027, _3584.z, fma(_2026, _3584.y, _3584.x * _2025)) + _3584.w) / _3646;
                                float _3706 = (fma(_2027, _3600.z, fma(_2026, _3600.y, _3600.x * _2025)) + _3600.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4887 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _965;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3184;
                                float _3736 = _3682 - _3185;
                                float _3737 = _3683 - _3186;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_890, _893, _896), vec3((-0.0) - _3184, (-0.0) - _3185, (-0.0) - _3186));
                                float _4898 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3749 = dot(vec3(_890, _893, _896), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4909 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_890, _893, _896), vec3(_3681, _3682, _3683))) + _3758;
                                float _4920 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4931 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3712 * _3557.y;
                                frontier_phi_78_pred_1 = _3712 * _3557.x;
                                frontier_phi_78_pred_2 = _3786 * _3569.z;
                                frontier_phi_78_pred_3 = _3786 * _3569.y;
                                frontier_phi_78_pred_4 = _3786 * _3569.x;
                                frontier_phi_78_pred_5 = _3712 * _3557.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_78_pred;
                            _3793 = frontier_phi_78_pred_1;
                            _3792 = frontier_phi_78_pred_2;
                            _3791 = frontier_phi_78_pred_3;
                            _3790 = frontier_phi_78_pred_4;
                            _3795 = frontier_phi_78_pred_5;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            _3496 = _3790 + _3509;
                            _3497 = _3791 + _3510;
                            _3498 = _3792 + _3511;
                            if (_3516 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3516;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3501;
                        frontier_phi_72_pred_1 = _3500;
                        frontier_phi_72_pred_2 = _3499;
                        frontier_phi_72_pred_3 = _3498;
                        frontier_phi_72_pred_4 = _3497;
                        frontier_phi_72_pred_5 = _3496;
                    }
                    _3169 = frontier_phi_72_pred;
                    _3167 = frontier_phi_72_pred_1;
                    _3165 = frontier_phi_72_pred_2;
                    _3163 = frontier_phi_72_pred_3;
                    _3161 = frontier_phi_72_pred_4;
                    _3159 = frontier_phi_72_pred_5;
                    uint _3304 = _3303 + 1u;
                    if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3297 = _3159;
                        _3298 = _3161;
                        _3299 = _3163;
                        _3300 = _3165;
                        _3301 = _3167;
                        _3302 = _3169;
                        _3303 = _3304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3169;
                frontier_phi_60_61_ladder_1 = _3167;
                frontier_phi_60_61_ladder_2 = _3163;
                frontier_phi_60_61_ladder_3 = _3161;
                frontier_phi_60_61_ladder_4 = _3159;
                frontier_phi_60_61_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_60_61_ladder = _3056;
                frontier_phi_60_61_ladder_1 = _3054;
                frontier_phi_60_61_ladder_2 = _3050;
                frontier_phi_60_61_ladder_3 = _3048;
                frontier_phi_60_61_ladder_4 = _3046;
                frontier_phi_60_61_ladder_5 = _3052;
            }
            _3158 = frontier_phi_60_61_ladder_4;
            _3160 = frontier_phi_60_61_ladder_3;
            _3162 = frontier_phi_60_61_ladder_2;
            _3164 = frontier_phi_60_61_ladder_5;
            _3166 = frontier_phi_60_61_ladder_1;
            _3168 = frontier_phi_60_61_ladder;
        }
        float _3173 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
        _2979 = (_3173 * _3164) + _2491;
        _2981 = (_3173 * _3166) + _2493;
        _2983 = (_3173 * _3168) + _2495;
        _2985 = ((_3158 * _933) * _3173) + _2829;
        _2987 = ((_3160 * _935) * _3173) + _2831;
        _2989 = ((_3162 * _936) * _3173) + _2833;
    }
    else
    {
        _2979 = _2491;
        _2981 = _2493;
        _2983 = _2495;
        _2985 = _2829;
        _2987 = _2831;
        _2989 = _2833;
    }
    float _4947 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4958 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4969 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    uint _3009 = _253 + 6u;
    float _3017 = _871 / cbSceneParam._m0[86u].x;
    float _3018 = _872 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _806 : (isnan(_806) ? cbSceneParam._m0[77u].w : min(_806, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_806 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_806) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _806 : min(cbSceneParam._m0[80u].w, _806));
        float _3072 = _3071 / _806;
        float _3083 = _3072 * _856;
        float _3084 = _857 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3086 = _3072 * _858;
        float _3088 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3084;
        float _3096 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3259;
        if (abs((_3085 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3259 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3219 = 1.0 / cbSceneParam._m0[80u].x;
            float _3220 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3221 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3230 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : min(_3220, 0.0));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            _3259 = ((abs(_3096 / _3085) * cbSceneParam._m0[80u].y) * ((((_3230 - _3231) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))))) * _3219)) - ((exp2(_3106 * _3230) - exp2(_3106 * _3231)) * _3219))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3270 = exp2((_3259 * (-1.44269502162933349609375)) * (1.0 - _3261.w));
        float _3271 = log2(_3270);
        float _3287 = log2(_3037);
        _3108 = (exp2(_3287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].x)) * _3261.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3110 = (exp2(_3287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].y)) * _3261.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3112 = (exp2(_3287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].z)) * _3261.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3114 = _3270 * _3037;
    }
    else
    {
        _3108 = _3034;
        _3110 = _3035;
        _3112 = _3036;
        _3114 = _3037;
    }
    float _3126 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3127 = _3126 == 3.0;
    float _3128 = log2(_3114);
    float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2979 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _949))) + ((_2985 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2981 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _949))) + ((_2987 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2983 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _949))) + ((_2989 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _3146 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3146 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.y = _3146 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
    SV_Target.z = _3146 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
    SV_Target.w = cbInstanceData._m0[_3009].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
}


