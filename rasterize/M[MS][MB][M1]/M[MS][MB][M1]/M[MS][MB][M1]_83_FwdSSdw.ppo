#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1195;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3546 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _380) + _453;
    float _465 = ((((_432.x - _451) * _380) + _451) * 2.0) + (-1.0);
    float _466 = ((((_432.y - _452) * _380) + _452) * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3557 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _519 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_505 - _506) * cbMtdParam._m0[24u].z) + _506) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3568 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _527 = (_520 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _528 = (_520 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _529 = (_520 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _557 = _555.x;
    float _575 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _557) * _380) + _557;
    float _579 = ((_541.x - _575) * cbMtdParam._m0[19u].z) + _575;
    float _581 = _579 - (_579 * _520);
    float _586 = (((_407.z - _462) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _462;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3579 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _616 = (_520 * (_599.z - _586)) + _586;
    float _621 = _465 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_407.x * 2.0) + (-1.0)));
    float _622 = _466 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_407.y * 2.0) + (-1.0)));
    float _634 = (((_606 - _621) + (cbMtdParam._m0[21u].x * _621)) * _520) + _621;
    float _635 = (((_607 - _622) + (cbMtdParam._m0[21u].x * _622)) * _520) + _622;
    float _636 = (_520 * (sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) - _472)) + _472;
    float _641 = cbMtdParam._m0[22u].x + _485.w;
    float _644 = fma(_636, _229 * NORMAL.x, fma(_635, _236 * TANGENT.x, (_222 * _214) * _634));
    float _647 = fma(_636, _229 * NORMAL.y, fma(_635, _236 * TANGENT.y, (_222 * _215) * _634));
    float _650 = fma(_636, _229 * NORMAL.z, fma(_635, _236 * TANGENT.z, (_222 * _216) * _634));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3590 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _658 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3612 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3623 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3634 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3645 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _663 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    float _743 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _744 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _765 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _768 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _782 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_782].z;
    float _3656 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _794 = 1.0 - _663;
    float _795 = _791 * _794;
    float _796 = _792 * _794;
    float _797 = _793 * _794;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _663;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _663;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _663;
    float _805 = _802 + 0.039999999105930328369140625;
    float _807 = _803 + 0.039999999105930328369140625;
    float _808 = _804 + 0.039999999105930328369140625;
    vec4 _817 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _743, cbSceneParam._m0[86u].y * _744));
    float _821 = ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * TEXCOORD_5.w) * _817.x;
    float _822 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _655) - _735;
    float _830 = (_825 * _656) - _736;
    float _831 = (_825 * _657) - _737;
    float _835 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _3689 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_658);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _856 = (1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _857 = _850 * _837;
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _923 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _927 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _952 = _885 + _655;
        float _953 = _889 + _656;
        float _954 = _893 + _657;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_655, _656, _657), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3737 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_655, _656, _657), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3770 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_655, _656, _657), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3803 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1234 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1238 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1242 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1265 = _885 + _655;
        float _1266 = _889 + _656;
        float _1267 = _893 + _657;
        float _1277 = fma(_1267, cbModelParam._m0[30u].z, fma(_1266, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265)) - _1234;
        float _1278 = fma(_1267, cbModelParam._m0[31u].z, fma(_1266, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265)) - _1238;
        float _1279 = fma(_1267, cbModelParam._m0[32u].z, fma(_1266, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265)) - _1242;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1234 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1238 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[35u].z) + ((((((_1242 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1333 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1300.x + (-0.5));
        float _1335 = _1333 * (_1300.y + (-0.5));
        float _1336 = _1333 * (_1300.z + (-0.5));
        float _1343 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1307.x + (-0.5));
        float _1345 = _1343 * (_1307.y + (-0.5));
        float _1346 = _1343 * (_1307.z + (-0.5));
        float _1353 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1314.x + (-0.5));
        float _1355 = _1353 * (_1314.y + (-0.5));
        float _1356 = _1353 * (_1314.z + (-0.5));
        float _1363 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1321.x + (-0.5));
        float _1365 = _1363 * (_1321.y + (-0.5));
        float _1366 = _1363 * (_1321.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_655, _656, _657), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3866 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1397 + 1.0))) + _1402) * _1367;
        float _1412 = _1335 * 0.5;
        float _1413 = _1345 * 0.5;
        float _1414 = _1355 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_655, _656, _657), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3899 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1439 + 1.0))) + _1444) * _1368;
        float _1454 = _1336 * 0.5;
        float _1455 = _1346 * 0.5;
        float _1456 = _1356 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_655, _656, _657), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3932 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1481 + 1.0))) + _1486) * _1369;
        _1503 = _1336;
        _1504 = _1335;
        _1505 = _1334;
        _1506 = _1346;
        _1507 = _1345;
        _1508 = _1344;
        _1509 = _1356;
        _1510 = _1355;
        _1511 = _1354;
        _1512 = _1369;
        _1513 = _1368;
        _1514 = _1367;
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1195;
        _1504 = _1195;
        _1505 = _1195;
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = _1195;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1208)) + _1208;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1550 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1527));
    float _1571 = _829 * 0.5;
    float _1572 = _830 * 0.5;
    float _1573 = _831 * 0.5;
    float _1574 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1577 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1580 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1614;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1587 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1591 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1602 = dot(vec4(cbModelParam._m0[39u]), vec4(_1571, _1572, _1573, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1625;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1616 = dot(vec4(cbModelParam._m0[40u]), vec4(_1571, _1572, _1573, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1629 = (_1625 * cbModelParam._m0[1u].x) + (_1614 * (1.0 - cbModelParam._m0[1u].x));
    float _1639 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1639 : min(cbModelParam._m0[25u].z, _1639));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1702 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1705 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1733 = frontier_phi_14_12_ladder;
        }
        float _1957;
        if (_1702 > 0.0)
        {
            _1957 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1957 = frontier_phi_23_19_ladder;
        }
        float _2214;
        if (_1705 > 0.0)
        {
            _2214 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2214 = frontier_phi_35_30_ladder;
        }
        float _2216 = isnan(_1957) ? _1733 : (isnan(_1733) ? _1957 : min(_1733, _1957));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1699) + _1688;
        float _2222 = (_2217 * _1702) + _1692;
        float _2223 = (_2217 * _1705) + _1696;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1640);
            frontier_phi_13_35_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_13_35_ladder_2;
        _1723 = frontier_phi_13_35_ladder_1;
        _1725 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1640);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1784 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1788 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1792 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1795 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1798 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1801 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1962;
        if (_1795 > 0.0)
        {
            _1962 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1962 = frontier_phi_25_21_ladder;
        }
        float _2241;
        if (_1798 > 0.0)
        {
            _2241 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2241 = frontier_phi_37_32_ladder;
        }
        float _2454;
        if (_1801 > 0.0)
        {
            _2454 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2454 = frontier_phi_46_43_ladder;
        }
        float _2456 = isnan(_2241) ? _1962 : (isnan(_1962) ? _2241 : min(_1962, _2241));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1795) + _1784;
        float _2462 = (_2457 * _1798) + _1788;
        float _2463 = (_2457 * _1801) + _1792;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_22_46_ladder = _2662.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2662.x * cbModelParam._m0[1u].z;
        }
        _1820 = frontier_phi_22_46_ladder_2;
        _1822 = frontier_phi_22_46_ladder_1;
        _1824 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1730);
        _1820 = _1804.x * cbModelParam._m0[1u].z;
        _1822 = _1804.y * cbModelParam._m0[1u].z;
        _1824 = _1804.z * cbModelParam._m0[1u].z;
    }
    float _1837 = (((_856 * _805) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1839 = (((_856 * _807) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1841 = (((_856 * _808) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1844 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1837 * cbSceneParam._m0[91u].x));
    vec4 _1858 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_743, _744));
    float _1860 = _1858.w;
    float _1872 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1860);
    float _1873 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1860);
    float _1874 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1860);
    uvec4 _1878 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1880 = _1878.x * 14u;
    uint _1881 = _1880 + 13u;
    float _1888 = _821 + (-1.0);
    float _1893 = (cbLight._m0[_1881].x * _1888) + 1.0;
    float _1894 = (cbLight._m0[_1881].y * _1888) + 1.0;
    float _1895 = (cbLight._m0[_1881].z * _1888) + 1.0;
    float _1896 = (cbLight._m0[_1881].w * _1888) + 1.0;
    uint _1897 = _1880 + 5u;
    float _1903 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1907 = _1880 + 4u;
    float _1916 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1920 = _1880 | 1u;
    float _1931 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_655, _656, _657));
    float _1934 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_655, _656, _657));
    float _4068 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _4079 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1939 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1941 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1948 = ((cbLight._m0[_1897].x * _1903) * _1941) + (((cbLight._m0[_1907].x * _1872) * _1916) * _1939);
    float _1949 = ((_1903 * cbLight._m0[_1897].y) * _1941) + (((cbLight._m0[_1907].y * _1873) * _1916) * _1939);
    float _1950 = ((_1903 * cbLight._m0[_1897].z) * _1941) + (((cbLight._m0[_1907].z * _1874) * _1916) * _1939);
    uvec4 _1954 = floatBitsToUint(cbLight._m0[_1880 + 12u]);
    bool _1956 = _1954.x == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1956)
    {
        _1967 = _1948;
        _1969 = _1949;
        _1971 = _1950;
    }
    else
    {
        uint _1975 = _1880 + 6u;
        float _1991 = (dot(vec3(cbLight._m0[_1880 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4090 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1994 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _1967 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1948;
        _1969 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1949;
        _1971 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1950;
    }
    bool _1974 = _1954.y == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1974)
    {
        _2012 = _1967;
        _2014 = _1969;
        _2016 = _1971;
    }
    else
    {
        uint _2185 = _1880 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1880 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4106 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2204 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2012 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1967;
        _2014 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1969;
        _2016 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1971;
    }
    uint _2019 = _1880 + 8u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _658) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1880].x + _735;
    float _2035 = cbLight._m0[_1880].y + _736;
    float _2036 = cbLight._m0[_1880].z + _737;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1880].xyz));
    float _4122 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2048 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2049 = dot(vec3(_655, _656, _657), vec3(_2041, _2042, _2043));
    float _4144 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2041, _2042, _2043));
    float _4155 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2033 * _2033;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
    float _2070 = 0.959999978542327880859375 - _802;
    float _2072 = 0.959999978542327880859375 - _803;
    float _2073 = 0.959999978542327880859375 - _804;
    float _2080 = 1.0 - _2033;
    float _2091 = (0.5 / (((_2048 * ((_2047 * _2080) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2080) + _2033) * _2047))) * _2047;
    float _4166 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    uint _2107 = _1880 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _658) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1920].x + _735;
    float _2121 = cbLight._m0[_1920].y + _736;
    float _2122 = cbLight._m0[_1920].z + _737;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1920].xyz));
    float _4177 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2134 = dot(vec3(_655, _656, _657), vec3(_2127, _2128, _2129));
    float _4188 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2127, _2128, _2129));
    float _4199 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
    float _2160 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2048 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2160) + _2119) * _2133))) * _2133;
    float _4210 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2182 = (((((_2153 * _2070) + _805) * cbLight._m0[_2107].x) * _2172) * _1903) + ((((cbLight._m0[_2019].x * _1872) * ((_2069 * _2070) + _805)) * _2093) * _1916);
    float _2183 = (((((_2153 * _2072) + _807) * cbLight._m0[_2107].y) * _2172) * _1903) + ((((cbLight._m0[_2019].y * _1873) * ((_2069 * _2072) + _807)) * _2093) * _1916);
    float _2184 = (((((_2153 * _2073) + _808) * cbLight._m0[_2107].z) * _2172) * _1903) + ((((cbLight._m0[_2019].z * _1874) * ((_2069 * _2073) + _808)) * _2093) * _1916);
    float _2246;
    float _2248;
    float _2250;
    if (_1956)
    {
        _2246 = _2182;
        _2248 = _2183;
        _2250 = _2184;
    }
    else
    {
        uint _2252 = _1880 + 2u;
        uint _2256 = _1880 + 10u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _658) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _735;
        float _2273 = cbLight._m0[_2252].y + _736;
        float _2274 = cbLight._m0[_2252].z + _737;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2252].xyz));
        float _4221 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2286 = dot(vec3(_655, _656, _657), vec3(_2279, _2280, _2281));
        float _4232 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4243 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
        float _2312 = 1.0 - _2271;
        float _2322 = (0.5 / (((_2048 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2312) + _2271) * _2285))) * _2285;
        float _4254 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2246 = (((((_2305 * _2070) + _805) * cbLight._m0[_2256].x) * _2324) * _2325) + _2182;
        _2248 = (((((_2305 * _2072) + _807) * cbLight._m0[_2256].y) * _2324) * _2325) + _2183;
        _2250 = (((((_2305 * _2073) + _808) * cbLight._m0[_2256].z) * _2324) * _2325) + _2184;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1974)
    {
        _2360 = _2246;
        _2362 = _2248;
        _2364 = _2250;
    }
    else
    {
        uint _2371 = _1880 + 3u;
        uint _2375 = _1880 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _658) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _735;
        float _2392 = cbLight._m0[_2371].y + _736;
        float _2393 = cbLight._m0[_2371].z + _737;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2371].xyz));
        float _4270 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2405 = dot(vec3(_655, _656, _657), vec3(_2398, _2399, _2400));
        float _4281 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4292 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2048 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2431) + _2390) * _2404))) * _2404;
        float _4303 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2360 = (((((_2424 * _2070) + _805) * cbLight._m0[_2375].x) * _2443) * _2444) + _2246;
        _2362 = (((((_2424 * _2072) + _807) * cbLight._m0[_2375].y) * _2443) * _2444) + _2248;
        _2364 = (((((_2424 * _2073) + _808) * cbLight._m0[_2375].z) * _2443) * _2444) + _2250;
    }
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_1878.y == 0u)
    {
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2519;
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2519;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2519;
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _744) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _743) / _2535)));
        float _2556 = (log2(_2522 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
        }
        else
        {
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            uint _2818 = 0u;
            uint _2827;
            bool _2828;
            for (;;)
            {
                _2827 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                _2828 = _2827 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2828)
                {
                    frontier_phi_61_pred = _2812;
                    frontier_phi_61_pred_1 = _2817;
                    frontier_phi_61_pred_2 = _2816;
                    frontier_phi_61_pred_3 = _2815;
                    frontier_phi_61_pred_4 = _2814;
                    frontier_phi_61_pred_5 = _2813;
                }
                else
                {
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    uint _2942;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2827;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    for (;;)
                    {
                        uint _2946 = uint(findLSB(_2942)) + (_2818 << 5u);
                        uint _2943 = (_2942 + 4294967295u) & _2942;
                        uint _2948 = _2946 * 48u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2968 = (_2946 * 48u) + 4u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2987 = (_2946 * 48u) + 8u;
                        vec3 _2998 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x));
                        float _3002 = _2962.x - _2520;
                        float _3003 = _2962.y - _2521;
                        float _3004 = _2962.z - _2522;
                        float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                        float _3008 = inversesqrt(_3005);
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3012 = dot(vec3(_762, _765, _768), vec3(_3009, _3010, _3011));
                        float _3017 = 1.0 - (_3005 * _2962.w);
                        float _4329 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3019 = sqrt(_3005) * _2981.w;
                        float _3022 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _3012) + _3023;
                        float _3029 = _3019 * _3019;
                        float _3033 = ((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3018) / ((_3029 * 0.699999988079071044921875) + 1.0);
                        float _3037 = (-0.0) - _2520;
                        float _3038 = (-0.0) - _2521;
                        float _3039 = (-0.0) - _2522;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3054 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                        float _3055 = 1.0 - _837;
                        float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                        float _3063 = _3062 * _3062;
                        float _3064 = _3063 * _3063;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3067 = _3046 + _3011;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3075 = dot(vec3(_762, _765, _768), vec3(_3044, _3045, _3046));
                        float _4345 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3079 = dot(vec3(_762, _765, _768), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                        float _4356 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                        float _3087 = _3022 * _3063;
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3012) + _3088;
                        float _4367 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3093 = 1.0 - _3063;
                        float _3103 = (0.5 / (((_3092 * ((_3078 * _3093) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3063) * _3078))) * _3092;
                        float _4378 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3114 = (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3086 * _3086) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125))) * _3018;
                        _2871 = (_3033 * _2981.x) + _2939;
                        _2872 = (_3033 * _2981.y) + _2940;
                        _2873 = (_3033 * _2981.z) + _2941;
                        _2868 = (_3114 * _2998.x) + _2936;
                        _2869 = (_3114 * _2998.y) + _2937;
                        _2870 = (_3114 * _2998.z) + _2938;
                        if (_2943 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2943;
                        }
                    }
                    frontier_phi_61_pred = _2868;
                    frontier_phi_61_pred_1 = _2873;
                    frontier_phi_61_pred_2 = _2872;
                    frontier_phi_61_pred_3 = _2871;
                    frontier_phi_61_pred_4 = _2870;
                    frontier_phi_61_pred_5 = _2869;
                }
                _2668 = frontier_phi_61_pred;
                _2678 = frontier_phi_61_pred_1;
                _2676 = frontier_phi_61_pred_2;
                _2674 = frontier_phi_61_pred_3;
                _2672 = frontier_phi_61_pred_4;
                _2670 = frontier_phi_61_pred_5;
                uint _2819 = _2818 + 1u;
                if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2812 = _2668;
                    _2813 = _2670;
                    _2814 = _2672;
                    _2815 = _2674;
                    _2816 = _2676;
                    _2817 = _2678;
                    _2818 = _2819;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
        }
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.z;
        uint _2684 = (_2682 >> 8u) & 15u;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((4294967295u << _2684) & _2566) == 0u)
        {
            _2780 = _2667;
            _2782 = _2669;
            _2784 = _2671;
            _2786 = _2673;
            _2788 = _2675;
            _2790 = _2677;
        }
        else
        {
            float _2805 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
            float _2806 = _2805 * _2520;
            float _2807 = _2805 * _2521;
            float _2808 = _2805 * _2522;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2684 < ((_2682 >> 12u) & 15u))
            {
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2919 = _2667;
                float _2920 = _2669;
                float _2921 = _2671;
                float _2922 = _2673;
                float _2923 = _2675;
                float _2924 = _2677;
                uint _2925 = _2684;
                uint _2934;
                bool _2935;
                for (;;)
                {
                    _2934 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                    _2935 = _2934 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2935)
                    {
                        frontier_phi_67_pred = _2922;
                        frontier_phi_67_pred_1 = _2923;
                        frontier_phi_67_pred_2 = _2924;
                        frontier_phi_67_pred_3 = _2921;
                        frontier_phi_67_pred_4 = _2920;
                        frontier_phi_67_pred_5 = _2919;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        uint _3138 = _2934;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3207;
                        vec4 _3222;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3149 = ((_2925 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3194 = (_3149 * 40u) + 16u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3149 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3149 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3149 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_2522, _3256.z, fma(_2521, _3256.y, _3256.x * _2520)) + _3256.w;
                            _3269 = !((fma(_2522, _3237.z, fma(_2521, _3237.y, _3237.x * _2520)) + _3237.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3164.x - _2520;
                                float _3297 = _3164.y - _2521;
                                float _3298 = _3164.z - _2522;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3165 * _3165));
                                float _4389 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3314 = sqrt(_3299) * _3180.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_762, _765, _768))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_2522, _3207.z, fma(_2521, _3207.y, _3207.x * _2520)) + _3207.w) / _3268;
                                float _3328 = (fma(_2522, _3222.z, fma(_2521, _3222.y, _3222.x * _2520)) + _3222.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4405 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _837;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2806;
                                float _3358 = _3304 - _2807;
                                float _3359 = _3305 - _2808;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_762, _765, _768), vec3((-0.0) - _2806, (-0.0) - _2807, (-0.0) - _2808));
                                float _4416 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3371 = dot(vec3(_762, _765, _768), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4427 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_762, _765, _768), vec3(_3303, _3304, _3305))) + _3380;
                                float _4438 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4449 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3408 * _3192.x;
                                frontier_phi_73_pred_1 = _3408 * _3192.y;
                                frontier_phi_73_pred_2 = _3334 * _3180.z;
                                frontier_phi_73_pred_3 = _3334 * _3180.y;
                                frontier_phi_73_pred_4 = _3334 * _3180.x;
                                frontier_phi_73_pred_5 = _3408 * _3192.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3412 = frontier_phi_73_pred;
                            _3413 = frontier_phi_73_pred_1;
                            _3417 = frontier_phi_73_pred_2;
                            _3416 = frontier_phi_73_pred_3;
                            _3415 = frontier_phi_73_pred_4;
                            _3414 = frontier_phi_73_pred_5;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            _3124 = _3417 + _3137;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            _3121 = _3414 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3122;
                        frontier_phi_67_pred_1 = _3123;
                        frontier_phi_67_pred_2 = _3124;
                        frontier_phi_67_pred_3 = _3121;
                        frontier_phi_67_pred_4 = _3120;
                        frontier_phi_67_pred_5 = _3119;
                    }
                    _2787 = frontier_phi_67_pred;
                    _2789 = frontier_phi_67_pred_1;
                    _2791 = frontier_phi_67_pred_2;
                    _2785 = frontier_phi_67_pred_3;
                    _2783 = frontier_phi_67_pred_4;
                    _2781 = frontier_phi_67_pred_5;
                    uint _2926 = _2925 + 1u;
                    if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2919 = _2781;
                        _2920 = _2783;
                        _2921 = _2785;
                        _2922 = _2787;
                        _2923 = _2789;
                        _2924 = _2791;
                        _2925 = _2926;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2789;
                frontier_phi_55_56_ladder_1 = _2791;
                frontier_phi_55_56_ladder_2 = _2787;
                frontier_phi_55_56_ladder_3 = _2785;
                frontier_phi_55_56_ladder_4 = _2783;
                frontier_phi_55_56_ladder_5 = _2781;
            }
            else
            {
                frontier_phi_55_56_ladder = _2675;
                frontier_phi_55_56_ladder_1 = _2677;
                frontier_phi_55_56_ladder_2 = _2673;
                frontier_phi_55_56_ladder_3 = _2671;
                frontier_phi_55_56_ladder_4 = _2669;
                frontier_phi_55_56_ladder_5 = _2667;
            }
            _2780 = frontier_phi_55_56_ladder_5;
            _2782 = frontier_phi_55_56_ladder_4;
            _2784 = frontier_phi_55_56_ladder_3;
            _2786 = frontier_phi_55_56_ladder_2;
            _2788 = frontier_phi_55_56_ladder;
            _2790 = frontier_phi_55_56_ladder_1;
        }
        float _2795 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2579 = (_2795 * _2786) + _2012;
        _2581 = (_2795 * _2788) + _2014;
        _2583 = (_2795 * _2790) + _2016;
        _2585 = ((_2780 * _805) * _2795) + _2360;
        _2587 = ((_2782 * _807) * _2795) + _2362;
        _2589 = ((_2784 * _808) * _2795) + _2364;
    }
    else
    {
        _2579 = _2012;
        _2581 = _2014;
        _2583 = _2016;
        _2585 = _2360;
        _2587 = _2362;
        _2589 = _2364;
    }
    float _4465 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4476 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4487 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    uint _2609 = _242 + 6u;
    float _2617 = _743 / cbSceneParam._m0[86u].x;
    float _2618 = _744 / cbSceneParam._m0[86u].y;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2692 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2693 = _2692 / _677;
        float _2704 = _2693 * _728;
        float _2705 = _729 * _2693;
        float _2706 = (-0.0) - _2705;
        float _2708 = _2693 * _730;
        float _2710 = (cbSceneParam._m0[77u].w * _2706) / _2692;
        float _2711 = _2710 + cbSceneParam._m0[79u].w;
        float _2712 = cbSceneParam._m0[79u].w - _2705;
        float _2718 = sqrt(((_2704 * _2704) + (_2705 * _2705)) + (_2708 * _2708));
        float _2721 = (1.0 - (cbSceneParam._m0[77u].w / _2692)) * _2718;
        float _2726 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2728 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2881;
        if (abs((_2706 - _2710) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2881 = ((((_2711 > 0.0) ? exp2(_2726 * _2711) : (2.0 - exp2(_2728 * _2711))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2721;
        }
        else
        {
            float _2841 = 1.0 / cbSceneParam._m0[80u].x;
            float _2842 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : max(_2711, _2712));
            float _2843 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : min(_2711, _2712));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            _2881 = ((abs(_2718 / _2706) * cbSceneParam._m0[80u].y) * ((((_2852 - _2853) * 2.0) - ((exp2(_2726 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0)))) - exp2(_2726 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))))) * _2841)) - ((exp2(_2728 * _2852) - exp2(_2728 * _2853)) * _2841))) + (_2721 * cbSceneParam._m0[80u].z);
        }
        vec4 _2883 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, 1.0), 0.0);
        float _2892 = exp2((_2881 * (-1.44269502162933349609375)) * (1.0 - _2883.w));
        float _2893 = log2(_2892);
        float _2909 = log2(_2637);
        _2730 = (exp2(_2909 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].x)) * _2883.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2732 = (exp2(_2909 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].y)) * _2883.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2734 = (exp2(_2909 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].z)) * _2883.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2736 = _2892 * _2637;
    }
    else
    {
        _2730 = _2634;
        _2732 = _2635;
        _2734 = _2636;
        _2736 = _2637;
    }
    float _2748 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2749 = _2748 == 3.0;
    float _2750 = log2(_2736);
    float _2757 = exp2(_2750 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2579 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _821))) + ((_2585 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _2758 = exp2(_2750 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2581 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _821))) + ((_2587 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _2759 = exp2(_2750 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2583 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _821))) + ((_2589 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _2768 = (_2748 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2768 * (_2749 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.y = _2768 * (_2749 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2732)));
    SV_Target.z = _2768 * (_2749 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2734)));
    SV_Target.w = cbInstanceData._m0[_2609].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2609].w;
}


